
UserApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000200  08040200  08040200  00000200  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eac0  08040400  08040400  00000400  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001298  0804eec0  0804eec0  0000eec0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08050158  08050158  00020410  2**0
                  CONTENTS
  4 .ARM          00000008  08050158  08050158  00010158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08050160  08050160  00020410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08050160  08050160  00010160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08050168  08050168  00010168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20001000  08050170  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .align16      00000010  08050400  08050400  00020400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00013d98  20001290  20001290  00021290  2**2
                  ALLOC
 11 ._user_heap_stack 00001200  20015028  20015028  00021290  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020410  2**0
                  CONTENTS, READONLY
 13 .debug_info   00065a31  00000000  00000000  00020440  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000c525  00000000  00000000  00085e71  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001a00e  00000000  00000000  00092396  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 000022d0  00000000  00000000  000ac3a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000032e8  00000000  00000000  000ae678  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  000149a0  00000000  00000000  000b1960  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00035c57  00000000  00000000  000c6300  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000fd872  00000000  00000000  000fbf57  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  001f97c9  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007368  00000000  00000000  001f9844  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stab         0000009c  00000000  00000000  00200bac  2**2
                  CONTENTS, READONLY, DEBUGGING
 24 .stabstr      0000014d  00000000  00000000  00200c48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08040400 <__do_global_dtors_aux>:
 8040400:	b510      	push	{r4, lr}
 8040402:	4c05      	ldr	r4, [pc, #20]	; (8040418 <APPLI_region_ROM_start+0x18>)
 8040404:	7823      	ldrb	r3, [r4, #0]
 8040406:	b933      	cbnz	r3, 8040416 <__do_global_dtors_aux+0x16>
 8040408:	4b04      	ldr	r3, [pc, #16]	; (804041c <APPLI_region_ROM_start+0x1c>)
 804040a:	b113      	cbz	r3, 8040412 <__do_global_dtors_aux+0x12>
 804040c:	4804      	ldr	r0, [pc, #16]	; (8040420 <APPLI_region_ROM_start+0x20>)
 804040e:	f3af 8000 	nop.w
 8040412:	2301      	movs	r3, #1
 8040414:	7023      	strb	r3, [r4, #0]
 8040416:	bd10      	pop	{r4, pc}
 8040418:	20001290 	.word	0x20001290
 804041c:	00000000 	.word	0x00000000
 8040420:	0804eea8 	.word	0x0804eea8

08040424 <frame_dummy>:
 8040424:	b508      	push	{r3, lr}
 8040426:	4b03      	ldr	r3, [pc, #12]	; (8040434 <frame_dummy+0x10>)
 8040428:	b11b      	cbz	r3, 8040432 <frame_dummy+0xe>
 804042a:	4903      	ldr	r1, [pc, #12]	; (8040438 <frame_dummy+0x14>)
 804042c:	4803      	ldr	r0, [pc, #12]	; (804043c <frame_dummy+0x18>)
 804042e:	f3af 8000 	nop.w
 8040432:	bd08      	pop	{r3, pc}
 8040434:	00000000 	.word	0x00000000
 8040438:	20001294 	.word	0x20001294
 804043c:	0804eea8 	.word	0x0804eea8

08040440 <memchr>:
 8040440:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8040444:	2a10      	cmp	r2, #16
 8040446:	db2b      	blt.n	80404a0 <memchr+0x60>
 8040448:	f010 0f07 	tst.w	r0, #7
 804044c:	d008      	beq.n	8040460 <memchr+0x20>
 804044e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040452:	3a01      	subs	r2, #1
 8040454:	428b      	cmp	r3, r1
 8040456:	d02d      	beq.n	80404b4 <memchr+0x74>
 8040458:	f010 0f07 	tst.w	r0, #7
 804045c:	b342      	cbz	r2, 80404b0 <memchr+0x70>
 804045e:	d1f6      	bne.n	804044e <memchr+0xe>
 8040460:	b4f0      	push	{r4, r5, r6, r7}
 8040462:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8040466:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 804046a:	f022 0407 	bic.w	r4, r2, #7
 804046e:	f07f 0700 	mvns.w	r7, #0
 8040472:	2300      	movs	r3, #0
 8040474:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8040478:	3c08      	subs	r4, #8
 804047a:	ea85 0501 	eor.w	r5, r5, r1
 804047e:	ea86 0601 	eor.w	r6, r6, r1
 8040482:	fa85 f547 	uadd8	r5, r5, r7
 8040486:	faa3 f587 	sel	r5, r3, r7
 804048a:	fa86 f647 	uadd8	r6, r6, r7
 804048e:	faa5 f687 	sel	r6, r5, r7
 8040492:	b98e      	cbnz	r6, 80404b8 <memchr+0x78>
 8040494:	d1ee      	bne.n	8040474 <memchr+0x34>
 8040496:	bcf0      	pop	{r4, r5, r6, r7}
 8040498:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 804049c:	f002 0207 	and.w	r2, r2, #7
 80404a0:	b132      	cbz	r2, 80404b0 <memchr+0x70>
 80404a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80404a6:	3a01      	subs	r2, #1
 80404a8:	ea83 0301 	eor.w	r3, r3, r1
 80404ac:	b113      	cbz	r3, 80404b4 <memchr+0x74>
 80404ae:	d1f8      	bne.n	80404a2 <memchr+0x62>
 80404b0:	2000      	movs	r0, #0
 80404b2:	4770      	bx	lr
 80404b4:	3801      	subs	r0, #1
 80404b6:	4770      	bx	lr
 80404b8:	2d00      	cmp	r5, #0
 80404ba:	bf06      	itte	eq
 80404bc:	4635      	moveq	r5, r6
 80404be:	3803      	subeq	r0, #3
 80404c0:	3807      	subne	r0, #7
 80404c2:	f015 0f01 	tst.w	r5, #1
 80404c6:	d107      	bne.n	80404d8 <memchr+0x98>
 80404c8:	3001      	adds	r0, #1
 80404ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80404ce:	bf02      	ittt	eq
 80404d0:	3001      	addeq	r0, #1
 80404d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80404d6:	3001      	addeq	r0, #1
 80404d8:	bcf0      	pop	{r4, r5, r6, r7}
 80404da:	3801      	subs	r0, #1
 80404dc:	4770      	bx	lr
 80404de:	bf00      	nop

080404e0 <__aeabi_drsub>:
 80404e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80404e4:	e002      	b.n	80404ec <__adddf3>
 80404e6:	bf00      	nop

080404e8 <__aeabi_dsub>:
 80404e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080404ec <__adddf3>:
 80404ec:	b530      	push	{r4, r5, lr}
 80404ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80404f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80404f6:	ea94 0f05 	teq	r4, r5
 80404fa:	bf08      	it	eq
 80404fc:	ea90 0f02 	teqeq	r0, r2
 8040500:	bf1f      	itttt	ne
 8040502:	ea54 0c00 	orrsne.w	ip, r4, r0
 8040506:	ea55 0c02 	orrsne.w	ip, r5, r2
 804050a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 804050e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8040512:	f000 80e2 	beq.w	80406da <__adddf3+0x1ee>
 8040516:	ea4f 5454 	mov.w	r4, r4, lsr #21
 804051a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 804051e:	bfb8      	it	lt
 8040520:	426d      	neglt	r5, r5
 8040522:	dd0c      	ble.n	804053e <__adddf3+0x52>
 8040524:	442c      	add	r4, r5
 8040526:	ea80 0202 	eor.w	r2, r0, r2
 804052a:	ea81 0303 	eor.w	r3, r1, r3
 804052e:	ea82 0000 	eor.w	r0, r2, r0
 8040532:	ea83 0101 	eor.w	r1, r3, r1
 8040536:	ea80 0202 	eor.w	r2, r0, r2
 804053a:	ea81 0303 	eor.w	r3, r1, r3
 804053e:	2d36      	cmp	r5, #54	; 0x36
 8040540:	bf88      	it	hi
 8040542:	bd30      	pophi	{r4, r5, pc}
 8040544:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8040548:	ea4f 3101 	mov.w	r1, r1, lsl #12
 804054c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8040550:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8040554:	d002      	beq.n	804055c <__adddf3+0x70>
 8040556:	4240      	negs	r0, r0
 8040558:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 804055c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8040560:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8040564:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8040568:	d002      	beq.n	8040570 <__adddf3+0x84>
 804056a:	4252      	negs	r2, r2
 804056c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8040570:	ea94 0f05 	teq	r4, r5
 8040574:	f000 80a7 	beq.w	80406c6 <__adddf3+0x1da>
 8040578:	f1a4 0401 	sub.w	r4, r4, #1
 804057c:	f1d5 0e20 	rsbs	lr, r5, #32
 8040580:	db0d      	blt.n	804059e <__adddf3+0xb2>
 8040582:	fa02 fc0e 	lsl.w	ip, r2, lr
 8040586:	fa22 f205 	lsr.w	r2, r2, r5
 804058a:	1880      	adds	r0, r0, r2
 804058c:	f141 0100 	adc.w	r1, r1, #0
 8040590:	fa03 f20e 	lsl.w	r2, r3, lr
 8040594:	1880      	adds	r0, r0, r2
 8040596:	fa43 f305 	asr.w	r3, r3, r5
 804059a:	4159      	adcs	r1, r3
 804059c:	e00e      	b.n	80405bc <__adddf3+0xd0>
 804059e:	f1a5 0520 	sub.w	r5, r5, #32
 80405a2:	f10e 0e20 	add.w	lr, lr, #32
 80405a6:	2a01      	cmp	r2, #1
 80405a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80405ac:	bf28      	it	cs
 80405ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80405b2:	fa43 f305 	asr.w	r3, r3, r5
 80405b6:	18c0      	adds	r0, r0, r3
 80405b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80405bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80405c0:	d507      	bpl.n	80405d2 <__adddf3+0xe6>
 80405c2:	f04f 0e00 	mov.w	lr, #0
 80405c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80405ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80405ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80405d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80405d6:	d31b      	bcc.n	8040610 <__adddf3+0x124>
 80405d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80405dc:	d30c      	bcc.n	80405f8 <__adddf3+0x10c>
 80405de:	0849      	lsrs	r1, r1, #1
 80405e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80405e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80405e8:	f104 0401 	add.w	r4, r4, #1
 80405ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80405f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80405f4:	f080 809a 	bcs.w	804072c <__adddf3+0x240>
 80405f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80405fc:	bf08      	it	eq
 80405fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8040602:	f150 0000 	adcs.w	r0, r0, #0
 8040606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 804060a:	ea41 0105 	orr.w	r1, r1, r5
 804060e:	bd30      	pop	{r4, r5, pc}
 8040610:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8040614:	4140      	adcs	r0, r0
 8040616:	eb41 0101 	adc.w	r1, r1, r1
 804061a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 804061e:	f1a4 0401 	sub.w	r4, r4, #1
 8040622:	d1e9      	bne.n	80405f8 <__adddf3+0x10c>
 8040624:	f091 0f00 	teq	r1, #0
 8040628:	bf04      	itt	eq
 804062a:	4601      	moveq	r1, r0
 804062c:	2000      	moveq	r0, #0
 804062e:	fab1 f381 	clz	r3, r1
 8040632:	bf08      	it	eq
 8040634:	3320      	addeq	r3, #32
 8040636:	f1a3 030b 	sub.w	r3, r3, #11
 804063a:	f1b3 0220 	subs.w	r2, r3, #32
 804063e:	da0c      	bge.n	804065a <__adddf3+0x16e>
 8040640:	320c      	adds	r2, #12
 8040642:	dd08      	ble.n	8040656 <__adddf3+0x16a>
 8040644:	f102 0c14 	add.w	ip, r2, #20
 8040648:	f1c2 020c 	rsb	r2, r2, #12
 804064c:	fa01 f00c 	lsl.w	r0, r1, ip
 8040650:	fa21 f102 	lsr.w	r1, r1, r2
 8040654:	e00c      	b.n	8040670 <__adddf3+0x184>
 8040656:	f102 0214 	add.w	r2, r2, #20
 804065a:	bfd8      	it	le
 804065c:	f1c2 0c20 	rsble	ip, r2, #32
 8040660:	fa01 f102 	lsl.w	r1, r1, r2
 8040664:	fa20 fc0c 	lsr.w	ip, r0, ip
 8040668:	bfdc      	itt	le
 804066a:	ea41 010c 	orrle.w	r1, r1, ip
 804066e:	4090      	lslle	r0, r2
 8040670:	1ae4      	subs	r4, r4, r3
 8040672:	bfa2      	ittt	ge
 8040674:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8040678:	4329      	orrge	r1, r5
 804067a:	bd30      	popge	{r4, r5, pc}
 804067c:	ea6f 0404 	mvn.w	r4, r4
 8040680:	3c1f      	subs	r4, #31
 8040682:	da1c      	bge.n	80406be <__adddf3+0x1d2>
 8040684:	340c      	adds	r4, #12
 8040686:	dc0e      	bgt.n	80406a6 <__adddf3+0x1ba>
 8040688:	f104 0414 	add.w	r4, r4, #20
 804068c:	f1c4 0220 	rsb	r2, r4, #32
 8040690:	fa20 f004 	lsr.w	r0, r0, r4
 8040694:	fa01 f302 	lsl.w	r3, r1, r2
 8040698:	ea40 0003 	orr.w	r0, r0, r3
 804069c:	fa21 f304 	lsr.w	r3, r1, r4
 80406a0:	ea45 0103 	orr.w	r1, r5, r3
 80406a4:	bd30      	pop	{r4, r5, pc}
 80406a6:	f1c4 040c 	rsb	r4, r4, #12
 80406aa:	f1c4 0220 	rsb	r2, r4, #32
 80406ae:	fa20 f002 	lsr.w	r0, r0, r2
 80406b2:	fa01 f304 	lsl.w	r3, r1, r4
 80406b6:	ea40 0003 	orr.w	r0, r0, r3
 80406ba:	4629      	mov	r1, r5
 80406bc:	bd30      	pop	{r4, r5, pc}
 80406be:	fa21 f004 	lsr.w	r0, r1, r4
 80406c2:	4629      	mov	r1, r5
 80406c4:	bd30      	pop	{r4, r5, pc}
 80406c6:	f094 0f00 	teq	r4, #0
 80406ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80406ce:	bf06      	itte	eq
 80406d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80406d4:	3401      	addeq	r4, #1
 80406d6:	3d01      	subne	r5, #1
 80406d8:	e74e      	b.n	8040578 <__adddf3+0x8c>
 80406da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80406de:	bf18      	it	ne
 80406e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80406e4:	d029      	beq.n	804073a <__adddf3+0x24e>
 80406e6:	ea94 0f05 	teq	r4, r5
 80406ea:	bf08      	it	eq
 80406ec:	ea90 0f02 	teqeq	r0, r2
 80406f0:	d005      	beq.n	80406fe <__adddf3+0x212>
 80406f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80406f6:	bf04      	itt	eq
 80406f8:	4619      	moveq	r1, r3
 80406fa:	4610      	moveq	r0, r2
 80406fc:	bd30      	pop	{r4, r5, pc}
 80406fe:	ea91 0f03 	teq	r1, r3
 8040702:	bf1e      	ittt	ne
 8040704:	2100      	movne	r1, #0
 8040706:	2000      	movne	r0, #0
 8040708:	bd30      	popne	{r4, r5, pc}
 804070a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 804070e:	d105      	bne.n	804071c <__adddf3+0x230>
 8040710:	0040      	lsls	r0, r0, #1
 8040712:	4149      	adcs	r1, r1
 8040714:	bf28      	it	cs
 8040716:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 804071a:	bd30      	pop	{r4, r5, pc}
 804071c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8040720:	bf3c      	itt	cc
 8040722:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8040726:	bd30      	popcc	{r4, r5, pc}
 8040728:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 804072c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8040730:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8040734:	f04f 0000 	mov.w	r0, #0
 8040738:	bd30      	pop	{r4, r5, pc}
 804073a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 804073e:	bf1a      	itte	ne
 8040740:	4619      	movne	r1, r3
 8040742:	4610      	movne	r0, r2
 8040744:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8040748:	bf1c      	itt	ne
 804074a:	460b      	movne	r3, r1
 804074c:	4602      	movne	r2, r0
 804074e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8040752:	bf06      	itte	eq
 8040754:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8040758:	ea91 0f03 	teqeq	r1, r3
 804075c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8040760:	bd30      	pop	{r4, r5, pc}
 8040762:	bf00      	nop

08040764 <__aeabi_ui2d>:
 8040764:	f090 0f00 	teq	r0, #0
 8040768:	bf04      	itt	eq
 804076a:	2100      	moveq	r1, #0
 804076c:	4770      	bxeq	lr
 804076e:	b530      	push	{r4, r5, lr}
 8040770:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8040774:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8040778:	f04f 0500 	mov.w	r5, #0
 804077c:	f04f 0100 	mov.w	r1, #0
 8040780:	e750      	b.n	8040624 <__adddf3+0x138>
 8040782:	bf00      	nop

08040784 <__aeabi_i2d>:
 8040784:	f090 0f00 	teq	r0, #0
 8040788:	bf04      	itt	eq
 804078a:	2100      	moveq	r1, #0
 804078c:	4770      	bxeq	lr
 804078e:	b530      	push	{r4, r5, lr}
 8040790:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8040794:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8040798:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 804079c:	bf48      	it	mi
 804079e:	4240      	negmi	r0, r0
 80407a0:	f04f 0100 	mov.w	r1, #0
 80407a4:	e73e      	b.n	8040624 <__adddf3+0x138>
 80407a6:	bf00      	nop

080407a8 <__aeabi_f2d>:
 80407a8:	0042      	lsls	r2, r0, #1
 80407aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80407ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80407b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80407b6:	bf1f      	itttt	ne
 80407b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80407bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80407c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80407c4:	4770      	bxne	lr
 80407c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80407ca:	bf08      	it	eq
 80407cc:	4770      	bxeq	lr
 80407ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80407d2:	bf04      	itt	eq
 80407d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80407d8:	4770      	bxeq	lr
 80407da:	b530      	push	{r4, r5, lr}
 80407dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80407e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80407e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80407e8:	e71c      	b.n	8040624 <__adddf3+0x138>
 80407ea:	bf00      	nop

080407ec <__aeabi_ul2d>:
 80407ec:	ea50 0201 	orrs.w	r2, r0, r1
 80407f0:	bf08      	it	eq
 80407f2:	4770      	bxeq	lr
 80407f4:	b530      	push	{r4, r5, lr}
 80407f6:	f04f 0500 	mov.w	r5, #0
 80407fa:	e00a      	b.n	8040812 <__aeabi_l2d+0x16>

080407fc <__aeabi_l2d>:
 80407fc:	ea50 0201 	orrs.w	r2, r0, r1
 8040800:	bf08      	it	eq
 8040802:	4770      	bxeq	lr
 8040804:	b530      	push	{r4, r5, lr}
 8040806:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 804080a:	d502      	bpl.n	8040812 <__aeabi_l2d+0x16>
 804080c:	4240      	negs	r0, r0
 804080e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8040812:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8040816:	f104 0432 	add.w	r4, r4, #50	; 0x32
 804081a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 804081e:	f43f aed8 	beq.w	80405d2 <__adddf3+0xe6>
 8040822:	f04f 0203 	mov.w	r2, #3
 8040826:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 804082a:	bf18      	it	ne
 804082c:	3203      	addne	r2, #3
 804082e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8040832:	bf18      	it	ne
 8040834:	3203      	addne	r2, #3
 8040836:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 804083a:	f1c2 0320 	rsb	r3, r2, #32
 804083e:	fa00 fc03 	lsl.w	ip, r0, r3
 8040842:	fa20 f002 	lsr.w	r0, r0, r2
 8040846:	fa01 fe03 	lsl.w	lr, r1, r3
 804084a:	ea40 000e 	orr.w	r0, r0, lr
 804084e:	fa21 f102 	lsr.w	r1, r1, r2
 8040852:	4414      	add	r4, r2
 8040854:	e6bd      	b.n	80405d2 <__adddf3+0xe6>
 8040856:	bf00      	nop

08040858 <__aeabi_dmul>:
 8040858:	b570      	push	{r4, r5, r6, lr}
 804085a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 804085e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8040862:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8040866:	bf1d      	ittte	ne
 8040868:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 804086c:	ea94 0f0c 	teqne	r4, ip
 8040870:	ea95 0f0c 	teqne	r5, ip
 8040874:	f000 f8de 	bleq	8040a34 <__aeabi_dmul+0x1dc>
 8040878:	442c      	add	r4, r5
 804087a:	ea81 0603 	eor.w	r6, r1, r3
 804087e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8040882:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8040886:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 804088a:	bf18      	it	ne
 804088c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8040890:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8040894:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8040898:	d038      	beq.n	804090c <__aeabi_dmul+0xb4>
 804089a:	fba0 ce02 	umull	ip, lr, r0, r2
 804089e:	f04f 0500 	mov.w	r5, #0
 80408a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80408a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80408aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80408ae:	f04f 0600 	mov.w	r6, #0
 80408b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80408b6:	f09c 0f00 	teq	ip, #0
 80408ba:	bf18      	it	ne
 80408bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80408c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80408c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80408c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80408cc:	d204      	bcs.n	80408d8 <__aeabi_dmul+0x80>
 80408ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80408d2:	416d      	adcs	r5, r5
 80408d4:	eb46 0606 	adc.w	r6, r6, r6
 80408d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80408dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80408e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80408e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80408e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80408ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80408f0:	bf88      	it	hi
 80408f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80408f6:	d81e      	bhi.n	8040936 <__aeabi_dmul+0xde>
 80408f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80408fc:	bf08      	it	eq
 80408fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8040902:	f150 0000 	adcs.w	r0, r0, #0
 8040906:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 804090a:	bd70      	pop	{r4, r5, r6, pc}
 804090c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8040910:	ea46 0101 	orr.w	r1, r6, r1
 8040914:	ea40 0002 	orr.w	r0, r0, r2
 8040918:	ea81 0103 	eor.w	r1, r1, r3
 804091c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8040920:	bfc2      	ittt	gt
 8040922:	ebd4 050c 	rsbsgt	r5, r4, ip
 8040926:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 804092a:	bd70      	popgt	{r4, r5, r6, pc}
 804092c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8040930:	f04f 0e00 	mov.w	lr, #0
 8040934:	3c01      	subs	r4, #1
 8040936:	f300 80ab 	bgt.w	8040a90 <__aeabi_dmul+0x238>
 804093a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 804093e:	bfde      	ittt	le
 8040940:	2000      	movle	r0, #0
 8040942:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8040946:	bd70      	pople	{r4, r5, r6, pc}
 8040948:	f1c4 0400 	rsb	r4, r4, #0
 804094c:	3c20      	subs	r4, #32
 804094e:	da35      	bge.n	80409bc <__aeabi_dmul+0x164>
 8040950:	340c      	adds	r4, #12
 8040952:	dc1b      	bgt.n	804098c <__aeabi_dmul+0x134>
 8040954:	f104 0414 	add.w	r4, r4, #20
 8040958:	f1c4 0520 	rsb	r5, r4, #32
 804095c:	fa00 f305 	lsl.w	r3, r0, r5
 8040960:	fa20 f004 	lsr.w	r0, r0, r4
 8040964:	fa01 f205 	lsl.w	r2, r1, r5
 8040968:	ea40 0002 	orr.w	r0, r0, r2
 804096c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8040970:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8040974:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8040978:	fa21 f604 	lsr.w	r6, r1, r4
 804097c:	eb42 0106 	adc.w	r1, r2, r6
 8040980:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8040984:	bf08      	it	eq
 8040986:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 804098a:	bd70      	pop	{r4, r5, r6, pc}
 804098c:	f1c4 040c 	rsb	r4, r4, #12
 8040990:	f1c4 0520 	rsb	r5, r4, #32
 8040994:	fa00 f304 	lsl.w	r3, r0, r4
 8040998:	fa20 f005 	lsr.w	r0, r0, r5
 804099c:	fa01 f204 	lsl.w	r2, r1, r4
 80409a0:	ea40 0002 	orr.w	r0, r0, r2
 80409a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80409a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80409ac:	f141 0100 	adc.w	r1, r1, #0
 80409b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80409b4:	bf08      	it	eq
 80409b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80409ba:	bd70      	pop	{r4, r5, r6, pc}
 80409bc:	f1c4 0520 	rsb	r5, r4, #32
 80409c0:	fa00 f205 	lsl.w	r2, r0, r5
 80409c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80409c8:	fa20 f304 	lsr.w	r3, r0, r4
 80409cc:	fa01 f205 	lsl.w	r2, r1, r5
 80409d0:	ea43 0302 	orr.w	r3, r3, r2
 80409d4:	fa21 f004 	lsr.w	r0, r1, r4
 80409d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80409dc:	fa21 f204 	lsr.w	r2, r1, r4
 80409e0:	ea20 0002 	bic.w	r0, r0, r2
 80409e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80409e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80409ec:	bf08      	it	eq
 80409ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80409f2:	bd70      	pop	{r4, r5, r6, pc}
 80409f4:	f094 0f00 	teq	r4, #0
 80409f8:	d10f      	bne.n	8040a1a <__aeabi_dmul+0x1c2>
 80409fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80409fe:	0040      	lsls	r0, r0, #1
 8040a00:	eb41 0101 	adc.w	r1, r1, r1
 8040a04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8040a08:	bf08      	it	eq
 8040a0a:	3c01      	subeq	r4, #1
 8040a0c:	d0f7      	beq.n	80409fe <__aeabi_dmul+0x1a6>
 8040a0e:	ea41 0106 	orr.w	r1, r1, r6
 8040a12:	f095 0f00 	teq	r5, #0
 8040a16:	bf18      	it	ne
 8040a18:	4770      	bxne	lr
 8040a1a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8040a1e:	0052      	lsls	r2, r2, #1
 8040a20:	eb43 0303 	adc.w	r3, r3, r3
 8040a24:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8040a28:	bf08      	it	eq
 8040a2a:	3d01      	subeq	r5, #1
 8040a2c:	d0f7      	beq.n	8040a1e <__aeabi_dmul+0x1c6>
 8040a2e:	ea43 0306 	orr.w	r3, r3, r6
 8040a32:	4770      	bx	lr
 8040a34:	ea94 0f0c 	teq	r4, ip
 8040a38:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8040a3c:	bf18      	it	ne
 8040a3e:	ea95 0f0c 	teqne	r5, ip
 8040a42:	d00c      	beq.n	8040a5e <__aeabi_dmul+0x206>
 8040a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8040a48:	bf18      	it	ne
 8040a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8040a4e:	d1d1      	bne.n	80409f4 <__aeabi_dmul+0x19c>
 8040a50:	ea81 0103 	eor.w	r1, r1, r3
 8040a54:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8040a58:	f04f 0000 	mov.w	r0, #0
 8040a5c:	bd70      	pop	{r4, r5, r6, pc}
 8040a5e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8040a62:	bf06      	itte	eq
 8040a64:	4610      	moveq	r0, r2
 8040a66:	4619      	moveq	r1, r3
 8040a68:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8040a6c:	d019      	beq.n	8040aa2 <__aeabi_dmul+0x24a>
 8040a6e:	ea94 0f0c 	teq	r4, ip
 8040a72:	d102      	bne.n	8040a7a <__aeabi_dmul+0x222>
 8040a74:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8040a78:	d113      	bne.n	8040aa2 <__aeabi_dmul+0x24a>
 8040a7a:	ea95 0f0c 	teq	r5, ip
 8040a7e:	d105      	bne.n	8040a8c <__aeabi_dmul+0x234>
 8040a80:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8040a84:	bf1c      	itt	ne
 8040a86:	4610      	movne	r0, r2
 8040a88:	4619      	movne	r1, r3
 8040a8a:	d10a      	bne.n	8040aa2 <__aeabi_dmul+0x24a>
 8040a8c:	ea81 0103 	eor.w	r1, r1, r3
 8040a90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8040a94:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8040a98:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8040a9c:	f04f 0000 	mov.w	r0, #0
 8040aa0:	bd70      	pop	{r4, r5, r6, pc}
 8040aa2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8040aa6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8040aaa:	bd70      	pop	{r4, r5, r6, pc}

08040aac <__aeabi_ddiv>:
 8040aac:	b570      	push	{r4, r5, r6, lr}
 8040aae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8040ab2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8040ab6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8040aba:	bf1d      	ittte	ne
 8040abc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8040ac0:	ea94 0f0c 	teqne	r4, ip
 8040ac4:	ea95 0f0c 	teqne	r5, ip
 8040ac8:	f000 f8a7 	bleq	8040c1a <__aeabi_ddiv+0x16e>
 8040acc:	eba4 0405 	sub.w	r4, r4, r5
 8040ad0:	ea81 0e03 	eor.w	lr, r1, r3
 8040ad4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8040ad8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8040adc:	f000 8088 	beq.w	8040bf0 <__aeabi_ddiv+0x144>
 8040ae0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8040ae4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8040ae8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8040aec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8040af0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8040af4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8040af8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8040afc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8040b00:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8040b04:	429d      	cmp	r5, r3
 8040b06:	bf08      	it	eq
 8040b08:	4296      	cmpeq	r6, r2
 8040b0a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8040b0e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8040b12:	d202      	bcs.n	8040b1a <__aeabi_ddiv+0x6e>
 8040b14:	085b      	lsrs	r3, r3, #1
 8040b16:	ea4f 0232 	mov.w	r2, r2, rrx
 8040b1a:	1ab6      	subs	r6, r6, r2
 8040b1c:	eb65 0503 	sbc.w	r5, r5, r3
 8040b20:	085b      	lsrs	r3, r3, #1
 8040b22:	ea4f 0232 	mov.w	r2, r2, rrx
 8040b26:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8040b2a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8040b2e:	ebb6 0e02 	subs.w	lr, r6, r2
 8040b32:	eb75 0e03 	sbcs.w	lr, r5, r3
 8040b36:	bf22      	ittt	cs
 8040b38:	1ab6      	subcs	r6, r6, r2
 8040b3a:	4675      	movcs	r5, lr
 8040b3c:	ea40 000c 	orrcs.w	r0, r0, ip
 8040b40:	085b      	lsrs	r3, r3, #1
 8040b42:	ea4f 0232 	mov.w	r2, r2, rrx
 8040b46:	ebb6 0e02 	subs.w	lr, r6, r2
 8040b4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8040b4e:	bf22      	ittt	cs
 8040b50:	1ab6      	subcs	r6, r6, r2
 8040b52:	4675      	movcs	r5, lr
 8040b54:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8040b58:	085b      	lsrs	r3, r3, #1
 8040b5a:	ea4f 0232 	mov.w	r2, r2, rrx
 8040b5e:	ebb6 0e02 	subs.w	lr, r6, r2
 8040b62:	eb75 0e03 	sbcs.w	lr, r5, r3
 8040b66:	bf22      	ittt	cs
 8040b68:	1ab6      	subcs	r6, r6, r2
 8040b6a:	4675      	movcs	r5, lr
 8040b6c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8040b70:	085b      	lsrs	r3, r3, #1
 8040b72:	ea4f 0232 	mov.w	r2, r2, rrx
 8040b76:	ebb6 0e02 	subs.w	lr, r6, r2
 8040b7a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8040b7e:	bf22      	ittt	cs
 8040b80:	1ab6      	subcs	r6, r6, r2
 8040b82:	4675      	movcs	r5, lr
 8040b84:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8040b88:	ea55 0e06 	orrs.w	lr, r5, r6
 8040b8c:	d018      	beq.n	8040bc0 <__aeabi_ddiv+0x114>
 8040b8e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8040b92:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8040b96:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8040b9a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8040b9e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8040ba2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8040ba6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8040baa:	d1c0      	bne.n	8040b2e <__aeabi_ddiv+0x82>
 8040bac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8040bb0:	d10b      	bne.n	8040bca <__aeabi_ddiv+0x11e>
 8040bb2:	ea41 0100 	orr.w	r1, r1, r0
 8040bb6:	f04f 0000 	mov.w	r0, #0
 8040bba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8040bbe:	e7b6      	b.n	8040b2e <__aeabi_ddiv+0x82>
 8040bc0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8040bc4:	bf04      	itt	eq
 8040bc6:	4301      	orreq	r1, r0
 8040bc8:	2000      	moveq	r0, #0
 8040bca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8040bce:	bf88      	it	hi
 8040bd0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8040bd4:	f63f aeaf 	bhi.w	8040936 <__aeabi_dmul+0xde>
 8040bd8:	ebb5 0c03 	subs.w	ip, r5, r3
 8040bdc:	bf04      	itt	eq
 8040bde:	ebb6 0c02 	subseq.w	ip, r6, r2
 8040be2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8040be6:	f150 0000 	adcs.w	r0, r0, #0
 8040bea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8040bee:	bd70      	pop	{r4, r5, r6, pc}
 8040bf0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8040bf4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8040bf8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8040bfc:	bfc2      	ittt	gt
 8040bfe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8040c02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8040c06:	bd70      	popgt	{r4, r5, r6, pc}
 8040c08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8040c0c:	f04f 0e00 	mov.w	lr, #0
 8040c10:	3c01      	subs	r4, #1
 8040c12:	e690      	b.n	8040936 <__aeabi_dmul+0xde>
 8040c14:	ea45 0e06 	orr.w	lr, r5, r6
 8040c18:	e68d      	b.n	8040936 <__aeabi_dmul+0xde>
 8040c1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8040c1e:	ea94 0f0c 	teq	r4, ip
 8040c22:	bf08      	it	eq
 8040c24:	ea95 0f0c 	teqeq	r5, ip
 8040c28:	f43f af3b 	beq.w	8040aa2 <__aeabi_dmul+0x24a>
 8040c2c:	ea94 0f0c 	teq	r4, ip
 8040c30:	d10a      	bne.n	8040c48 <__aeabi_ddiv+0x19c>
 8040c32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8040c36:	f47f af34 	bne.w	8040aa2 <__aeabi_dmul+0x24a>
 8040c3a:	ea95 0f0c 	teq	r5, ip
 8040c3e:	f47f af25 	bne.w	8040a8c <__aeabi_dmul+0x234>
 8040c42:	4610      	mov	r0, r2
 8040c44:	4619      	mov	r1, r3
 8040c46:	e72c      	b.n	8040aa2 <__aeabi_dmul+0x24a>
 8040c48:	ea95 0f0c 	teq	r5, ip
 8040c4c:	d106      	bne.n	8040c5c <__aeabi_ddiv+0x1b0>
 8040c4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8040c52:	f43f aefd 	beq.w	8040a50 <__aeabi_dmul+0x1f8>
 8040c56:	4610      	mov	r0, r2
 8040c58:	4619      	mov	r1, r3
 8040c5a:	e722      	b.n	8040aa2 <__aeabi_dmul+0x24a>
 8040c5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8040c60:	bf18      	it	ne
 8040c62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8040c66:	f47f aec5 	bne.w	80409f4 <__aeabi_dmul+0x19c>
 8040c6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8040c6e:	f47f af0d 	bne.w	8040a8c <__aeabi_dmul+0x234>
 8040c72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8040c76:	f47f aeeb 	bne.w	8040a50 <__aeabi_dmul+0x1f8>
 8040c7a:	e712      	b.n	8040aa2 <__aeabi_dmul+0x24a>

08040c7c <__gedf2>:
 8040c7c:	f04f 3cff 	mov.w	ip, #4294967295
 8040c80:	e006      	b.n	8040c90 <__cmpdf2+0x4>
 8040c82:	bf00      	nop

08040c84 <__ledf2>:
 8040c84:	f04f 0c01 	mov.w	ip, #1
 8040c88:	e002      	b.n	8040c90 <__cmpdf2+0x4>
 8040c8a:	bf00      	nop

08040c8c <__cmpdf2>:
 8040c8c:	f04f 0c01 	mov.w	ip, #1
 8040c90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8040c94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8040c98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040c9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8040ca0:	bf18      	it	ne
 8040ca2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8040ca6:	d01b      	beq.n	8040ce0 <__cmpdf2+0x54>
 8040ca8:	b001      	add	sp, #4
 8040caa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8040cae:	bf0c      	ite	eq
 8040cb0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8040cb4:	ea91 0f03 	teqne	r1, r3
 8040cb8:	bf02      	ittt	eq
 8040cba:	ea90 0f02 	teqeq	r0, r2
 8040cbe:	2000      	moveq	r0, #0
 8040cc0:	4770      	bxeq	lr
 8040cc2:	f110 0f00 	cmn.w	r0, #0
 8040cc6:	ea91 0f03 	teq	r1, r3
 8040cca:	bf58      	it	pl
 8040ccc:	4299      	cmppl	r1, r3
 8040cce:	bf08      	it	eq
 8040cd0:	4290      	cmpeq	r0, r2
 8040cd2:	bf2c      	ite	cs
 8040cd4:	17d8      	asrcs	r0, r3, #31
 8040cd6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8040cda:	f040 0001 	orr.w	r0, r0, #1
 8040cde:	4770      	bx	lr
 8040ce0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8040ce4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040ce8:	d102      	bne.n	8040cf0 <__cmpdf2+0x64>
 8040cea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8040cee:	d107      	bne.n	8040d00 <__cmpdf2+0x74>
 8040cf0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8040cf4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040cf8:	d1d6      	bne.n	8040ca8 <__cmpdf2+0x1c>
 8040cfa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8040cfe:	d0d3      	beq.n	8040ca8 <__cmpdf2+0x1c>
 8040d00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8040d04:	4770      	bx	lr
 8040d06:	bf00      	nop

08040d08 <__aeabi_cdrcmple>:
 8040d08:	4684      	mov	ip, r0
 8040d0a:	4610      	mov	r0, r2
 8040d0c:	4662      	mov	r2, ip
 8040d0e:	468c      	mov	ip, r1
 8040d10:	4619      	mov	r1, r3
 8040d12:	4663      	mov	r3, ip
 8040d14:	e000      	b.n	8040d18 <__aeabi_cdcmpeq>
 8040d16:	bf00      	nop

08040d18 <__aeabi_cdcmpeq>:
 8040d18:	b501      	push	{r0, lr}
 8040d1a:	f7ff ffb7 	bl	8040c8c <__cmpdf2>
 8040d1e:	2800      	cmp	r0, #0
 8040d20:	bf48      	it	mi
 8040d22:	f110 0f00 	cmnmi.w	r0, #0
 8040d26:	bd01      	pop	{r0, pc}

08040d28 <__aeabi_dcmpeq>:
 8040d28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040d2c:	f7ff fff4 	bl	8040d18 <__aeabi_cdcmpeq>
 8040d30:	bf0c      	ite	eq
 8040d32:	2001      	moveq	r0, #1
 8040d34:	2000      	movne	r0, #0
 8040d36:	f85d fb08 	ldr.w	pc, [sp], #8
 8040d3a:	bf00      	nop

08040d3c <__aeabi_dcmplt>:
 8040d3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040d40:	f7ff ffea 	bl	8040d18 <__aeabi_cdcmpeq>
 8040d44:	bf34      	ite	cc
 8040d46:	2001      	movcc	r0, #1
 8040d48:	2000      	movcs	r0, #0
 8040d4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8040d4e:	bf00      	nop

08040d50 <__aeabi_dcmple>:
 8040d50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040d54:	f7ff ffe0 	bl	8040d18 <__aeabi_cdcmpeq>
 8040d58:	bf94      	ite	ls
 8040d5a:	2001      	movls	r0, #1
 8040d5c:	2000      	movhi	r0, #0
 8040d5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8040d62:	bf00      	nop

08040d64 <__aeabi_dcmpge>:
 8040d64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040d68:	f7ff ffce 	bl	8040d08 <__aeabi_cdrcmple>
 8040d6c:	bf94      	ite	ls
 8040d6e:	2001      	movls	r0, #1
 8040d70:	2000      	movhi	r0, #0
 8040d72:	f85d fb08 	ldr.w	pc, [sp], #8
 8040d76:	bf00      	nop

08040d78 <__aeabi_dcmpgt>:
 8040d78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040d7c:	f7ff ffc4 	bl	8040d08 <__aeabi_cdrcmple>
 8040d80:	bf34      	ite	cc
 8040d82:	2001      	movcc	r0, #1
 8040d84:	2000      	movcs	r0, #0
 8040d86:	f85d fb08 	ldr.w	pc, [sp], #8
 8040d8a:	bf00      	nop

08040d8c <__aeabi_d2iz>:
 8040d8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8040d90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8040d94:	d215      	bcs.n	8040dc2 <__aeabi_d2iz+0x36>
 8040d96:	d511      	bpl.n	8040dbc <__aeabi_d2iz+0x30>
 8040d98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8040d9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8040da0:	d912      	bls.n	8040dc8 <__aeabi_d2iz+0x3c>
 8040da2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8040da6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8040daa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8040dae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8040db2:	fa23 f002 	lsr.w	r0, r3, r2
 8040db6:	bf18      	it	ne
 8040db8:	4240      	negne	r0, r0
 8040dba:	4770      	bx	lr
 8040dbc:	f04f 0000 	mov.w	r0, #0
 8040dc0:	4770      	bx	lr
 8040dc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8040dc6:	d105      	bne.n	8040dd4 <__aeabi_d2iz+0x48>
 8040dc8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8040dcc:	bf08      	it	eq
 8040dce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8040dd2:	4770      	bx	lr
 8040dd4:	f04f 0000 	mov.w	r0, #0
 8040dd8:	4770      	bx	lr
 8040dda:	bf00      	nop

08040ddc <__aeabi_d2uiz>:
 8040ddc:	004a      	lsls	r2, r1, #1
 8040dde:	d211      	bcs.n	8040e04 <__aeabi_d2uiz+0x28>
 8040de0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8040de4:	d211      	bcs.n	8040e0a <__aeabi_d2uiz+0x2e>
 8040de6:	d50d      	bpl.n	8040e04 <__aeabi_d2uiz+0x28>
 8040de8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8040dec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8040df0:	d40e      	bmi.n	8040e10 <__aeabi_d2uiz+0x34>
 8040df2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8040df6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8040dfa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8040dfe:	fa23 f002 	lsr.w	r0, r3, r2
 8040e02:	4770      	bx	lr
 8040e04:	f04f 0000 	mov.w	r0, #0
 8040e08:	4770      	bx	lr
 8040e0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8040e0e:	d102      	bne.n	8040e16 <__aeabi_d2uiz+0x3a>
 8040e10:	f04f 30ff 	mov.w	r0, #4294967295
 8040e14:	4770      	bx	lr
 8040e16:	f04f 0000 	mov.w	r0, #0
 8040e1a:	4770      	bx	lr

08040e1c <__aeabi_uldivmod>:
 8040e1c:	b953      	cbnz	r3, 8040e34 <__aeabi_uldivmod+0x18>
 8040e1e:	b94a      	cbnz	r2, 8040e34 <__aeabi_uldivmod+0x18>
 8040e20:	2900      	cmp	r1, #0
 8040e22:	bf08      	it	eq
 8040e24:	2800      	cmpeq	r0, #0
 8040e26:	bf1c      	itt	ne
 8040e28:	f04f 31ff 	movne.w	r1, #4294967295
 8040e2c:	f04f 30ff 	movne.w	r0, #4294967295
 8040e30:	f000 b972 	b.w	8041118 <__aeabi_idiv0>
 8040e34:	f1ad 0c08 	sub.w	ip, sp, #8
 8040e38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8040e3c:	f000 f806 	bl	8040e4c <__udivmoddi4>
 8040e40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040e44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8040e48:	b004      	add	sp, #16
 8040e4a:	4770      	bx	lr

08040e4c <__udivmoddi4>:
 8040e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8040e50:	9e08      	ldr	r6, [sp, #32]
 8040e52:	4604      	mov	r4, r0
 8040e54:	4688      	mov	r8, r1
 8040e56:	2b00      	cmp	r3, #0
 8040e58:	d14b      	bne.n	8040ef2 <__udivmoddi4+0xa6>
 8040e5a:	428a      	cmp	r2, r1
 8040e5c:	4615      	mov	r5, r2
 8040e5e:	d967      	bls.n	8040f30 <__udivmoddi4+0xe4>
 8040e60:	fab2 f282 	clz	r2, r2
 8040e64:	b14a      	cbz	r2, 8040e7a <__udivmoddi4+0x2e>
 8040e66:	f1c2 0720 	rsb	r7, r2, #32
 8040e6a:	fa01 f302 	lsl.w	r3, r1, r2
 8040e6e:	fa20 f707 	lsr.w	r7, r0, r7
 8040e72:	4095      	lsls	r5, r2
 8040e74:	ea47 0803 	orr.w	r8, r7, r3
 8040e78:	4094      	lsls	r4, r2
 8040e7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8040e7e:	0c23      	lsrs	r3, r4, #16
 8040e80:	fbb8 f7fe 	udiv	r7, r8, lr
 8040e84:	fa1f fc85 	uxth.w	ip, r5
 8040e88:	fb0e 8817 	mls	r8, lr, r7, r8
 8040e8c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8040e90:	fb07 f10c 	mul.w	r1, r7, ip
 8040e94:	4299      	cmp	r1, r3
 8040e96:	d909      	bls.n	8040eac <__udivmoddi4+0x60>
 8040e98:	18eb      	adds	r3, r5, r3
 8040e9a:	f107 30ff 	add.w	r0, r7, #4294967295
 8040e9e:	f080 811b 	bcs.w	80410d8 <__udivmoddi4+0x28c>
 8040ea2:	4299      	cmp	r1, r3
 8040ea4:	f240 8118 	bls.w	80410d8 <__udivmoddi4+0x28c>
 8040ea8:	3f02      	subs	r7, #2
 8040eaa:	442b      	add	r3, r5
 8040eac:	1a5b      	subs	r3, r3, r1
 8040eae:	b2a4      	uxth	r4, r4
 8040eb0:	fbb3 f0fe 	udiv	r0, r3, lr
 8040eb4:	fb0e 3310 	mls	r3, lr, r0, r3
 8040eb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8040ebc:	fb00 fc0c 	mul.w	ip, r0, ip
 8040ec0:	45a4      	cmp	ip, r4
 8040ec2:	d909      	bls.n	8040ed8 <__udivmoddi4+0x8c>
 8040ec4:	192c      	adds	r4, r5, r4
 8040ec6:	f100 33ff 	add.w	r3, r0, #4294967295
 8040eca:	f080 8107 	bcs.w	80410dc <__udivmoddi4+0x290>
 8040ece:	45a4      	cmp	ip, r4
 8040ed0:	f240 8104 	bls.w	80410dc <__udivmoddi4+0x290>
 8040ed4:	3802      	subs	r0, #2
 8040ed6:	442c      	add	r4, r5
 8040ed8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8040edc:	eba4 040c 	sub.w	r4, r4, ip
 8040ee0:	2700      	movs	r7, #0
 8040ee2:	b11e      	cbz	r6, 8040eec <__udivmoddi4+0xa0>
 8040ee4:	40d4      	lsrs	r4, r2
 8040ee6:	2300      	movs	r3, #0
 8040ee8:	e9c6 4300 	strd	r4, r3, [r6]
 8040eec:	4639      	mov	r1, r7
 8040eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040ef2:	428b      	cmp	r3, r1
 8040ef4:	d909      	bls.n	8040f0a <__udivmoddi4+0xbe>
 8040ef6:	2e00      	cmp	r6, #0
 8040ef8:	f000 80eb 	beq.w	80410d2 <__udivmoddi4+0x286>
 8040efc:	2700      	movs	r7, #0
 8040efe:	e9c6 0100 	strd	r0, r1, [r6]
 8040f02:	4638      	mov	r0, r7
 8040f04:	4639      	mov	r1, r7
 8040f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040f0a:	fab3 f783 	clz	r7, r3
 8040f0e:	2f00      	cmp	r7, #0
 8040f10:	d147      	bne.n	8040fa2 <__udivmoddi4+0x156>
 8040f12:	428b      	cmp	r3, r1
 8040f14:	d302      	bcc.n	8040f1c <__udivmoddi4+0xd0>
 8040f16:	4282      	cmp	r2, r0
 8040f18:	f200 80fa 	bhi.w	8041110 <__udivmoddi4+0x2c4>
 8040f1c:	1a84      	subs	r4, r0, r2
 8040f1e:	eb61 0303 	sbc.w	r3, r1, r3
 8040f22:	2001      	movs	r0, #1
 8040f24:	4698      	mov	r8, r3
 8040f26:	2e00      	cmp	r6, #0
 8040f28:	d0e0      	beq.n	8040eec <__udivmoddi4+0xa0>
 8040f2a:	e9c6 4800 	strd	r4, r8, [r6]
 8040f2e:	e7dd      	b.n	8040eec <__udivmoddi4+0xa0>
 8040f30:	b902      	cbnz	r2, 8040f34 <__udivmoddi4+0xe8>
 8040f32:	deff      	udf	#255	; 0xff
 8040f34:	fab2 f282 	clz	r2, r2
 8040f38:	2a00      	cmp	r2, #0
 8040f3a:	f040 808f 	bne.w	804105c <__udivmoddi4+0x210>
 8040f3e:	1b49      	subs	r1, r1, r5
 8040f40:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8040f44:	fa1f f885 	uxth.w	r8, r5
 8040f48:	2701      	movs	r7, #1
 8040f4a:	fbb1 fcfe 	udiv	ip, r1, lr
 8040f4e:	0c23      	lsrs	r3, r4, #16
 8040f50:	fb0e 111c 	mls	r1, lr, ip, r1
 8040f54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8040f58:	fb08 f10c 	mul.w	r1, r8, ip
 8040f5c:	4299      	cmp	r1, r3
 8040f5e:	d907      	bls.n	8040f70 <__udivmoddi4+0x124>
 8040f60:	18eb      	adds	r3, r5, r3
 8040f62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8040f66:	d202      	bcs.n	8040f6e <__udivmoddi4+0x122>
 8040f68:	4299      	cmp	r1, r3
 8040f6a:	f200 80cd 	bhi.w	8041108 <__udivmoddi4+0x2bc>
 8040f6e:	4684      	mov	ip, r0
 8040f70:	1a59      	subs	r1, r3, r1
 8040f72:	b2a3      	uxth	r3, r4
 8040f74:	fbb1 f0fe 	udiv	r0, r1, lr
 8040f78:	fb0e 1410 	mls	r4, lr, r0, r1
 8040f7c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8040f80:	fb08 f800 	mul.w	r8, r8, r0
 8040f84:	45a0      	cmp	r8, r4
 8040f86:	d907      	bls.n	8040f98 <__udivmoddi4+0x14c>
 8040f88:	192c      	adds	r4, r5, r4
 8040f8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8040f8e:	d202      	bcs.n	8040f96 <__udivmoddi4+0x14a>
 8040f90:	45a0      	cmp	r8, r4
 8040f92:	f200 80b6 	bhi.w	8041102 <__udivmoddi4+0x2b6>
 8040f96:	4618      	mov	r0, r3
 8040f98:	eba4 0408 	sub.w	r4, r4, r8
 8040f9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8040fa0:	e79f      	b.n	8040ee2 <__udivmoddi4+0x96>
 8040fa2:	f1c7 0c20 	rsb	ip, r7, #32
 8040fa6:	40bb      	lsls	r3, r7
 8040fa8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8040fac:	ea4e 0e03 	orr.w	lr, lr, r3
 8040fb0:	fa01 f407 	lsl.w	r4, r1, r7
 8040fb4:	fa20 f50c 	lsr.w	r5, r0, ip
 8040fb8:	fa21 f30c 	lsr.w	r3, r1, ip
 8040fbc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8040fc0:	4325      	orrs	r5, r4
 8040fc2:	fbb3 f9f8 	udiv	r9, r3, r8
 8040fc6:	0c2c      	lsrs	r4, r5, #16
 8040fc8:	fb08 3319 	mls	r3, r8, r9, r3
 8040fcc:	fa1f fa8e 	uxth.w	sl, lr
 8040fd0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8040fd4:	fb09 f40a 	mul.w	r4, r9, sl
 8040fd8:	429c      	cmp	r4, r3
 8040fda:	fa02 f207 	lsl.w	r2, r2, r7
 8040fde:	fa00 f107 	lsl.w	r1, r0, r7
 8040fe2:	d90b      	bls.n	8040ffc <__udivmoddi4+0x1b0>
 8040fe4:	eb1e 0303 	adds.w	r3, lr, r3
 8040fe8:	f109 30ff 	add.w	r0, r9, #4294967295
 8040fec:	f080 8087 	bcs.w	80410fe <__udivmoddi4+0x2b2>
 8040ff0:	429c      	cmp	r4, r3
 8040ff2:	f240 8084 	bls.w	80410fe <__udivmoddi4+0x2b2>
 8040ff6:	f1a9 0902 	sub.w	r9, r9, #2
 8040ffa:	4473      	add	r3, lr
 8040ffc:	1b1b      	subs	r3, r3, r4
 8040ffe:	b2ad      	uxth	r5, r5
 8041000:	fbb3 f0f8 	udiv	r0, r3, r8
 8041004:	fb08 3310 	mls	r3, r8, r0, r3
 8041008:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 804100c:	fb00 fa0a 	mul.w	sl, r0, sl
 8041010:	45a2      	cmp	sl, r4
 8041012:	d908      	bls.n	8041026 <__udivmoddi4+0x1da>
 8041014:	eb1e 0404 	adds.w	r4, lr, r4
 8041018:	f100 33ff 	add.w	r3, r0, #4294967295
 804101c:	d26b      	bcs.n	80410f6 <__udivmoddi4+0x2aa>
 804101e:	45a2      	cmp	sl, r4
 8041020:	d969      	bls.n	80410f6 <__udivmoddi4+0x2aa>
 8041022:	3802      	subs	r0, #2
 8041024:	4474      	add	r4, lr
 8041026:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 804102a:	fba0 8902 	umull	r8, r9, r0, r2
 804102e:	eba4 040a 	sub.w	r4, r4, sl
 8041032:	454c      	cmp	r4, r9
 8041034:	46c2      	mov	sl, r8
 8041036:	464b      	mov	r3, r9
 8041038:	d354      	bcc.n	80410e4 <__udivmoddi4+0x298>
 804103a:	d051      	beq.n	80410e0 <__udivmoddi4+0x294>
 804103c:	2e00      	cmp	r6, #0
 804103e:	d069      	beq.n	8041114 <__udivmoddi4+0x2c8>
 8041040:	ebb1 050a 	subs.w	r5, r1, sl
 8041044:	eb64 0403 	sbc.w	r4, r4, r3
 8041048:	fa04 fc0c 	lsl.w	ip, r4, ip
 804104c:	40fd      	lsrs	r5, r7
 804104e:	40fc      	lsrs	r4, r7
 8041050:	ea4c 0505 	orr.w	r5, ip, r5
 8041054:	e9c6 5400 	strd	r5, r4, [r6]
 8041058:	2700      	movs	r7, #0
 804105a:	e747      	b.n	8040eec <__udivmoddi4+0xa0>
 804105c:	f1c2 0320 	rsb	r3, r2, #32
 8041060:	fa20 f703 	lsr.w	r7, r0, r3
 8041064:	4095      	lsls	r5, r2
 8041066:	fa01 f002 	lsl.w	r0, r1, r2
 804106a:	fa21 f303 	lsr.w	r3, r1, r3
 804106e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8041072:	4338      	orrs	r0, r7
 8041074:	0c01      	lsrs	r1, r0, #16
 8041076:	fbb3 f7fe 	udiv	r7, r3, lr
 804107a:	fa1f f885 	uxth.w	r8, r5
 804107e:	fb0e 3317 	mls	r3, lr, r7, r3
 8041082:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8041086:	fb07 f308 	mul.w	r3, r7, r8
 804108a:	428b      	cmp	r3, r1
 804108c:	fa04 f402 	lsl.w	r4, r4, r2
 8041090:	d907      	bls.n	80410a2 <__udivmoddi4+0x256>
 8041092:	1869      	adds	r1, r5, r1
 8041094:	f107 3cff 	add.w	ip, r7, #4294967295
 8041098:	d22f      	bcs.n	80410fa <__udivmoddi4+0x2ae>
 804109a:	428b      	cmp	r3, r1
 804109c:	d92d      	bls.n	80410fa <__udivmoddi4+0x2ae>
 804109e:	3f02      	subs	r7, #2
 80410a0:	4429      	add	r1, r5
 80410a2:	1acb      	subs	r3, r1, r3
 80410a4:	b281      	uxth	r1, r0
 80410a6:	fbb3 f0fe 	udiv	r0, r3, lr
 80410aa:	fb0e 3310 	mls	r3, lr, r0, r3
 80410ae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80410b2:	fb00 f308 	mul.w	r3, r0, r8
 80410b6:	428b      	cmp	r3, r1
 80410b8:	d907      	bls.n	80410ca <__udivmoddi4+0x27e>
 80410ba:	1869      	adds	r1, r5, r1
 80410bc:	f100 3cff 	add.w	ip, r0, #4294967295
 80410c0:	d217      	bcs.n	80410f2 <__udivmoddi4+0x2a6>
 80410c2:	428b      	cmp	r3, r1
 80410c4:	d915      	bls.n	80410f2 <__udivmoddi4+0x2a6>
 80410c6:	3802      	subs	r0, #2
 80410c8:	4429      	add	r1, r5
 80410ca:	1ac9      	subs	r1, r1, r3
 80410cc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80410d0:	e73b      	b.n	8040f4a <__udivmoddi4+0xfe>
 80410d2:	4637      	mov	r7, r6
 80410d4:	4630      	mov	r0, r6
 80410d6:	e709      	b.n	8040eec <__udivmoddi4+0xa0>
 80410d8:	4607      	mov	r7, r0
 80410da:	e6e7      	b.n	8040eac <__udivmoddi4+0x60>
 80410dc:	4618      	mov	r0, r3
 80410de:	e6fb      	b.n	8040ed8 <__udivmoddi4+0x8c>
 80410e0:	4541      	cmp	r1, r8
 80410e2:	d2ab      	bcs.n	804103c <__udivmoddi4+0x1f0>
 80410e4:	ebb8 0a02 	subs.w	sl, r8, r2
 80410e8:	eb69 020e 	sbc.w	r2, r9, lr
 80410ec:	3801      	subs	r0, #1
 80410ee:	4613      	mov	r3, r2
 80410f0:	e7a4      	b.n	804103c <__udivmoddi4+0x1f0>
 80410f2:	4660      	mov	r0, ip
 80410f4:	e7e9      	b.n	80410ca <__udivmoddi4+0x27e>
 80410f6:	4618      	mov	r0, r3
 80410f8:	e795      	b.n	8041026 <__udivmoddi4+0x1da>
 80410fa:	4667      	mov	r7, ip
 80410fc:	e7d1      	b.n	80410a2 <__udivmoddi4+0x256>
 80410fe:	4681      	mov	r9, r0
 8041100:	e77c      	b.n	8040ffc <__udivmoddi4+0x1b0>
 8041102:	3802      	subs	r0, #2
 8041104:	442c      	add	r4, r5
 8041106:	e747      	b.n	8040f98 <__udivmoddi4+0x14c>
 8041108:	f1ac 0c02 	sub.w	ip, ip, #2
 804110c:	442b      	add	r3, r5
 804110e:	e72f      	b.n	8040f70 <__udivmoddi4+0x124>
 8041110:	4638      	mov	r0, r7
 8041112:	e708      	b.n	8040f26 <__udivmoddi4+0xda>
 8041114:	4637      	mov	r7, r6
 8041116:	e6e9      	b.n	8040eec <__udivmoddi4+0xa0>

08041118 <__aeabi_idiv0>:
 8041118:	4770      	bx	lr
 804111a:	bf00      	nop

0804111c <assert_version>:
		return true;
	return false;
}

bool assert_version(uint8_t major_version, uint8_t minor_version, uint8_t patch_version){
	if(MAJOR_FIRMWARE_VERSION == major_version){ // Criar define para posições da versão
 804111c:	2801      	cmp	r0, #1
 804111e:	d105      	bne.n	804112c <assert_version+0x10>
		if (MINOR_FIRMWARE_VERSION == minor_version){
 8041120:	b939      	cbnz	r1, 8041132 <assert_version+0x16>
			if (PATCH_FIRMWARE_VERSION < patch_version){
 8041122:	2a07      	cmp	r2, #7
 8041124:	bf94      	ite	ls
 8041126:	2000      	movls	r0, #0
 8041128:	2001      	movhi	r0, #1
 804112a:	4770      	bx	lr
		}
		else if(MINOR_FIRMWARE_VERSION < minor_version){
			return true;
		}
	}
	else if (MAJOR_FIRMWARE_VERSION < major_version){
 804112c:	bf8c      	ite	hi
 804112e:	2001      	movhi	r0, #1
 8041130:	2000      	movls	r0, #0
		return true;
	}
	return false;
}
 8041132:	4770      	bx	lr

08041134 <break_connection>:
//	 if (comVAR==length)
//		 	return 1;
//	 else 	return 0;
//}

void break_connection(){
 8041134:	b510      	push	{r4, lr}

	HAL_GPIO_WritePin(BLE_BRK_GPIO_Port, BLE_BRK_Pin, RESET);		// Aciona o pino que interrompe a possível conexão errada.
 8041136:	4c07      	ldr	r4, [pc, #28]	; (8041154 <break_connection+0x20>)
 8041138:	2200      	movs	r2, #0
 804113a:	4620      	mov	r0, r4
 804113c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8041140:	f002 fd20 	bl	8043b84 <HAL_GPIO_WritePin>

	uint32_t aux = 0;
	while(aux<1*100000)
		aux++;

	HAL_GPIO_WritePin(BLE_BRK_GPIO_Port, BLE_BRK_Pin, SET);			// Se a conexão for quebrada, restaura a forma original.
 8041144:	4620      	mov	r0, r4
 8041146:	2201      	movs	r2, #1
 8041148:	f44f 7180 	mov.w	r1, #256	; 0x100

}
 804114c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(BLE_BRK_GPIO_Port, BLE_BRK_Pin, SET);			// Se a conexão for quebrada, restaura a forma original.
 8041150:	f002 bd18 	b.w	8043b84 <HAL_GPIO_WritePin>
 8041154:	40020000 	.word	0x40020000

08041158 <clear_buffers>:

#if (DEVICE_TYPE == CURRAL)
void clear_buffers(){
	last_TAG = EMPTY_QUEUE;
 8041158:	4b04      	ldr	r3, [pc, #16]	; (804116c <clear_buffers+0x14>)
	memset(&store_TAG, 0, sizeof(store_TAG));
 804115a:	4805      	ldr	r0, [pc, #20]	; (8041170 <clear_buffers+0x18>)
	last_TAG = EMPTY_QUEUE;
 804115c:	f04f 32ff 	mov.w	r2, #4294967295
 8041160:	601a      	str	r2, [r3, #0]
	memset(&store_TAG, 0, sizeof(store_TAG));
 8041162:	2100      	movs	r1, #0
 8041164:	f247 5230 	movw	r2, #30000	; 0x7530
 8041168:	f00c bb36 	b.w	804d7d8 <memset>
 804116c:	20001000 	.word	0x20001000
 8041170:	200024d8 	.word	0x200024d8

08041174 <message_handler>:
{
 8041174:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8041178:	460c      	mov	r4, r1
	memcpy(TAG, message, pkg_length);					// Copia a TAG lida para o vetor
 804117a:	460a      	mov	r2, r1
 804117c:	4601      	mov	r1, r0
 804117e:	4836      	ldr	r0, [pc, #216]	; (8041258 <message_handler+0xe4>)
 8041180:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8041258 <message_handler+0xe4>
 8041184:	f00c fb1d 	bl	804d7c2 <memcpy>
	PRINTF("Tamanho = %d \r\n", pkg_length);
 8041188:	4621      	mov	r1, r4
 804118a:	4834      	ldr	r0, [pc, #208]	; (804125c <message_handler+0xe8>)
 804118c:	f00a fbbe 	bl	804b90c <TraceSend>
	if(pkg_length >= TAG_SIZE + 4/*- 1*/)
 8041190:	2c27      	cmp	r4, #39	; 0x27
 8041192:	dd58      	ble.n	8041246 <message_handler+0xd2>
		PRINTF("fila: %d\r\n", last_TAG);
 8041194:	4d32      	ldr	r5, [pc, #200]	; (8041260 <message_handler+0xec>)
 8041196:	4833      	ldr	r0, [pc, #204]	; (8041264 <message_handler+0xf0>)
 8041198:	6829      	ldr	r1, [r5, #0]
 804119a:	f00a fbb7 	bl	804b90c <TraceSend>
	uint8_t total_de_brincos = (pkg_length - 4) / TAG_SIZE;
 804119e:	3c04      	subs	r4, #4
 80411a0:	2324      	movs	r3, #36	; 0x24
 80411a2:	fb94 f4f3 	sdiv	r4, r4, r3
 80411a6:	b2e4      	uxtb	r4, r4
		if(last_TAG == STORAGE_SIZE - (total_de_brincos+1)){			// Se for vista a ultima TAG, então começa a sobreescrever
 80411a8:	f5c4 73f9 	rsb	r3, r4, #498	; 0x1f2
 80411ac:	682a      	ldr	r2, [r5, #0]
 80411ae:	3301      	adds	r3, #1
 80411b0:	4293      	cmp	r3, r2
 80411b2:	d104      	bne.n	80411be <message_handler+0x4a>
					PRINTF("FILA CHEIA\r\n");
 80411b4:	482c      	ldr	r0, [pc, #176]	; (8041268 <message_handler+0xf4>)
 80411b6:	f00a fba9 	bl	804b90c <TraceSend>
					clear_buffers();
 80411ba:	f7ff ffcd 	bl	8041158 <clear_buffers>
				for(j=0; j<last_TAG;j++){
 80411be:	2600      	movs	r6, #0
					if(memcmp(&store_TAG[j], &TAG[(i*TAG_SIZE)], TAG_SIZE-6) == 0)
 80411c0:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8041274 <message_handler+0x100>
				for(j=0; j<last_TAG;j++){
 80411c4:	4637      	mov	r7, r6
		for (int i=0; i<total_de_brincos;i++){
 80411c6:	42a6      	cmp	r6, r4
 80411c8:	d103      	bne.n	80411d2 <message_handler+0x5e>
		return 1;							// Confirmação que foi lida e armazenada uma TAG
 80411ca:	2001      	movs	r0, #1
}
 80411cc:	b003      	add	sp, #12
 80411ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (last_TAG>0){
 80411d2:	f8d5 b000 	ldr.w	fp, [r5]
 80411d6:	f1bb 0f00 	cmp.w	fp, #0
 80411da:	dd11      	ble.n	8041200 <message_handler+0x8c>
 80411dc:	f04f 0924 	mov.w	r9, #36	; 0x24
 80411e0:	fb09 8906 	mla	r9, r9, r6, r8
				for(j=0; j<last_TAG;j++){
 80411e4:	2700      	movs	r7, #0
					if(memcmp(&store_TAG[j], &TAG[(i*TAG_SIZE)], TAG_SIZE-6) == 0)
 80411e6:	233c      	movs	r3, #60	; 0x3c
 80411e8:	fb03 a007 	mla	r0, r3, r7, sl
 80411ec:	221e      	movs	r2, #30
 80411ee:	4649      	mov	r1, r9
 80411f0:	9301      	str	r3, [sp, #4]
 80411f2:	f00c fad7 	bl	804d7a4 <memcmp>
 80411f6:	9b01      	ldr	r3, [sp, #4]
 80411f8:	bb08      	cbnz	r0, 804123e <message_handler+0xca>
						PRINTF("REPETIDO\r\n");
 80411fa:	481c      	ldr	r0, [pc, #112]	; (804126c <message_handler+0xf8>)
 80411fc:	f00a fb86 	bl	804b90c <TraceSend>
			if((j==last_TAG) || (last_TAG==EMPTY_QUEUE)){
 8041200:	682b      	ldr	r3, [r5, #0]
 8041202:	42bb      	cmp	r3, r7
 8041204:	d001      	beq.n	804120a <message_handler+0x96>
 8041206:	3301      	adds	r3, #1
 8041208:	d117      	bne.n	804123a <message_handler+0xc6>
				PRINTF("COPIA PRO FILA\r\n");
 804120a:	4819      	ldr	r0, [pc, #100]	; (8041270 <message_handler+0xfc>)
 804120c:	f00a fb7e 	bl	804b90c <TraceSend>
				memcpy(store_TAG[++last_TAG].N_TAG, &TAG[(i*TAG_SIZE)], TAG_SIZE-1);
 8041210:	682b      	ldr	r3, [r5, #0]
 8041212:	2224      	movs	r2, #36	; 0x24
 8041214:	3301      	adds	r3, #1
 8041216:	213c      	movs	r1, #60	; 0x3c
 8041218:	fb02 8206 	mla	r2, r2, r6, r8
 804121c:	602b      	str	r3, [r5, #0]
 804121e:	fb01 a303 	mla	r3, r1, r3, sl
 8041222:	f102 0120 	add.w	r1, r2, #32
 8041226:	f852 0b04 	ldr.w	r0, [r2], #4
 804122a:	f843 0b04 	str.w	r0, [r3], #4
 804122e:	428a      	cmp	r2, r1
 8041230:	d1f9      	bne.n	8041226 <message_handler+0xb2>
 8041232:	8811      	ldrh	r1, [r2, #0]
 8041234:	8019      	strh	r1, [r3, #0]
 8041236:	7892      	ldrb	r2, [r2, #2]
 8041238:	709a      	strb	r2, [r3, #2]
		for (int i=0; i<total_de_brincos;i++){
 804123a:	3601      	adds	r6, #1
 804123c:	e7c3      	b.n	80411c6 <message_handler+0x52>
				for(j=0; j<last_TAG;j++){
 804123e:	3701      	adds	r7, #1
 8041240:	45bb      	cmp	fp, r7
 8041242:	d1d1      	bne.n	80411e8 <message_handler+0x74>
 8041244:	e7dc      	b.n	8041200 <message_handler+0x8c>
		if (pkg_length == MSG_RFID_SIZE+1) // Em caso de retorno padrão, sem leitura de TAG. Passa 0xFF ao vetor TAG
 8041246:	2c04      	cmp	r4, #4
 8041248:	d104      	bne.n	8041254 <message_handler+0xe0>
			memset(TAG, 255, TAG_SIZE);
 804124a:	2224      	movs	r2, #36	; 0x24
 804124c:	21ff      	movs	r1, #255	; 0xff
 804124e:	4640      	mov	r0, r8
 8041250:	f00c fac2 	bl	804d7d8 <memset>
		return 0;                            // Sinaliza retorno padrão ou de ID
 8041254:	2000      	movs	r0, #0
 8041256:	e7b9      	b.n	80411cc <message_handler+0x58>
 8041258:	200012ac 	.word	0x200012ac
 804125c:	0804f4a4 	.word	0x0804f4a4
 8041260:	20001000 	.word	0x20001000
 8041264:	0804f4b4 	.word	0x0804f4b4
 8041268:	0804f4bf 	.word	0x0804f4bf
 804126c:	0804f4cc 	.word	0x0804f4cc
 8041270:	0804f4d7 	.word	0x0804f4d7
 8041274:	200024d8 	.word	0x200024d8

08041278 <ble_handler>:
{
 8041278:	b510      	push	{r4, lr}
	switch (message[1]) {
 804127a:	7842      	ldrb	r2, [r0, #1]
 804127c:	2a60      	cmp	r2, #96	; 0x60
{
 804127e:	4603      	mov	r3, r0
	switch (message[1]) {
 8041280:	d01b      	beq.n	80412ba <ble_handler+0x42>
 8041282:	d809      	bhi.n	8041298 <ble_handler+0x20>
 8041284:	2a21      	cmp	r2, #33	; 0x21
 8041286:	d061      	beq.n	804134c <ble_handler+0xd4>
 8041288:	2a22      	cmp	r2, #34	; 0x22
 804128a:	d063      	beq.n	8041354 <ble_handler+0xdc>
 804128c:	2a20      	cmp	r2, #32
 804128e:	d12b      	bne.n	80412e8 <ble_handler+0x70>
			HAL_UART_Transmit(&huart1, (uint8_t *) &answer_firmware_version_buffer, sizeof(answer_firmware_version_buffer), 100);
 8041290:	2364      	movs	r3, #100	; 0x64
 8041292:	2206      	movs	r2, #6
 8041294:	493c      	ldr	r1, [pc, #240]	; (8041388 <ble_handler+0x110>)
 8041296:	e055      	b.n	8041344 <ble_handler+0xcc>
	switch (message[1]) {
 8041298:	2a65      	cmp	r2, #101	; 0x65
 804129a:	d03d      	beq.n	8041318 <ble_handler+0xa0>
 804129c:	2a6f      	cmp	r2, #111	; 0x6f
 804129e:	d025      	beq.n	80412ec <ble_handler+0x74>
 80412a0:	2a61      	cmp	r2, #97	; 0x61
 80412a2:	d121      	bne.n	80412e8 <ble_handler+0x70>
			flags_ble.confirm = SET;
 80412a4:	4a39      	ldr	r2, [pc, #228]	; (804138c <ble_handler+0x114>)
			PRINTF("====>   confirm = SET \r\n");
 80412a6:	483a      	ldr	r0, [pc, #232]	; (8041390 <ble_handler+0x118>)
			flags_ble.confirm = SET;
 80412a8:	7813      	ldrb	r3, [r2, #0]
			flags_ble.wait_for_response=RESET;
 80412aa:	f043 0304 	orr.w	r3, r3, #4
 80412ae:	f36f 13c7 	bfc	r3, #7, #1
 80412b2:	7013      	strb	r3, [r2, #0]
			PRINTF("====>   confirm = SET \r\n");
 80412b4:	f00a fb2a 	bl	804b90c <TraceSend>
			break;
 80412b8:	e016      	b.n	80412e8 <ble_handler+0x70>
				PRINTF("Recebeu Start\r\n");
 80412ba:	4836      	ldr	r0, [pc, #216]	; (8041394 <ble_handler+0x11c>)
 80412bc:	f00a fb26 	bl	804b90c <TraceSend>
				HAL_UART_Transmit(&huart1, (uint8_t *)BLE_ESTABLISHED_CONNECTION, MSG_CONNECTION_ESTABLISHED_SIZE, 100);
 80412c0:	2364      	movs	r3, #100	; 0x64
 80412c2:	2203      	movs	r2, #3
 80412c4:	4934      	ldr	r1, [pc, #208]	; (8041398 <ble_handler+0x120>)
 80412c6:	4835      	ldr	r0, [pc, #212]	; (804139c <ble_handler+0x124>)
 80412c8:	f004 fc92 	bl	8045bf0 <HAL_UART_Transmit>
			  	HAL_TIM_Base_Start_IT(&htim2);			// Inicia o timer que envia as requisições para o módulo RFID
 80412cc:	4834      	ldr	r0, [pc, #208]	; (80413a0 <ble_handler+0x128>)
 80412ce:	f004 f974 	bl	80455ba <HAL_TIM_Base_Start_IT>
			  	flags_ble.start = SET;
 80412d2:	4a2e      	ldr	r2, [pc, #184]	; (804138c <ble_handler+0x114>)
			  	count_confirm=0;
 80412d4:	4933      	ldr	r1, [pc, #204]	; (80413a4 <ble_handler+0x12c>)
			  	flags_ble.start = SET;
 80412d6:	7813      	ldrb	r3, [r2, #0]
			  	flags_ble.connection = SET;
 80412d8:	f003 0376 	and.w	r3, r3, #118	; 0x76
			  	count_confirm=0;
 80412dc:	2000      	movs	r0, #0
			  	flags_ble.connection = SET;
 80412de:	f043 0309 	orr.w	r3, r3, #9
			  	count_confirm=0;
 80412e2:	f8c1 01f4 	str.w	r0, [r1, #500]	; 0x1f4
			  	flags_ble.connection = SET;
 80412e6:	7013      	strb	r3, [r2, #0]
}
 80412e8:	2000      	movs	r0, #0
 80412ea:	bd10      	pop	{r4, pc}
			if (flags_ble.start == SET)
 80412ec:	4c27      	ldr	r4, [pc, #156]	; (804138c <ble_handler+0x114>)
			HAL_UART_Transmit(&huart1, (uint8_t *) answer_end_connection, 3, 100);
 80412ee:	492e      	ldr	r1, [pc, #184]	; (80413a8 <ble_handler+0x130>)
 80412f0:	482a      	ldr	r0, [pc, #168]	; (804139c <ble_handler+0x124>)
 80412f2:	2364      	movs	r3, #100	; 0x64
 80412f4:	2203      	movs	r2, #3
 80412f6:	f004 fc7b 	bl	8045bf0 <HAL_UART_Transmit>
			if (flags_ble.start == SET)
 80412fa:	7823      	ldrb	r3, [r4, #0]
 80412fc:	07db      	lsls	r3, r3, #31
 80412fe:	d5f3      	bpl.n	80412e8 <ble_handler+0x70>
				HAL_TIM_Base_Stop_IT(&htim2);			// Para momentâneamente as requisições e leituras de TAG
 8041300:	4827      	ldr	r0, [pc, #156]	; (80413a0 <ble_handler+0x128>)
 8041302:	f004 f96a 	bl	80455da <HAL_TIM_Base_Stop_IT>
				flags_ble.start = RESET;				// Reseta a flag de inicio da comunicação
 8041306:	7823      	ldrb	r3, [r4, #0]
 8041308:	f36f 0300 	bfc	r3, #0, #1
 804130c:	7023      	strb	r3, [r4, #0]
				clear_buffers();
 804130e:	f7ff ff23 	bl	8041158 <clear_buffers>
				break_connection();						// Função de quebra de conexão
 8041312:	f7ff ff0f 	bl	8041134 <break_connection>
 8041316:	e7e7      	b.n	80412e8 <ble_handler+0x70>
	switch (message[1]) {
 8041318:	2102      	movs	r1, #2
				if(message[sizeofEarring] == 0x0D)
 804131a:	5c58      	ldrb	r0, [r3, r1]
 804131c:	280d      	cmp	r0, #13
 804131e:	b2ca      	uxtb	r2, r1
 8041320:	d003      	beq.n	804132a <ble_handler+0xb2>
 8041322:	3101      	adds	r1, #1
			for (sizeofEarring=2; sizeofEarring<TAG_SIZE; sizeofEarring++)
 8041324:	2924      	cmp	r1, #36	; 0x24
 8041326:	d1f8      	bne.n	804131a <ble_handler+0xa2>
 8041328:	460a      	mov	r2, r1
			sizeofEarring -= 2;
 804132a:	3a02      	subs	r2, #2
 804132c:	b2d2      	uxtb	r2, r2
			memcpy(&MSG_WRITE_EARRING[initialPosition], &message[2], sizeofEarring );
 804132e:	4c1f      	ldr	r4, [pc, #124]	; (80413ac <ble_handler+0x134>)
			initialPosition = (MSG_WRITE_EARRING_SIZE-1) - sizeofEarring;
 8041330:	f1c2 0020 	rsb	r0, r2, #32
			memcpy(&MSG_WRITE_EARRING[initialPosition], &message[2], sizeofEarring );
 8041334:	1c99      	adds	r1, r3, #2
 8041336:	fa54 f080 	uxtab	r0, r4, r0
 804133a:	f00c fa42 	bl	804d7c2 <memcpy>
			HAL_UART_Transmit(&huart1, (uint8_t *) MSG_WRITE_EARRING, MSG_WRITE_EARRING_SIZE, 100);
 804133e:	2364      	movs	r3, #100	; 0x64
 8041340:	2221      	movs	r2, #33	; 0x21
 8041342:	4621      	mov	r1, r4
				HAL_UART_Transmit(&huart1, (uint8_t *) &answer_wrong_file_buffer, sizeof(answer_wrong_file_buffer), 100);
 8041344:	4815      	ldr	r0, [pc, #84]	; (804139c <ble_handler+0x124>)
 8041346:	f004 fc53 	bl	8045bf0 <HAL_UART_Transmit>
 804134a:	e7cd      	b.n	80412e8 <ble_handler+0x70>
			HAL_UART_Transmit(&huart1, (uint8_t *) &answer_device_type,sizeof(answer_device_type),100);
 804134c:	2364      	movs	r3, #100	; 0x64
 804134e:	2204      	movs	r2, #4
 8041350:	4917      	ldr	r1, [pc, #92]	; (80413b0 <ble_handler+0x138>)
 8041352:	e7f7      	b.n	8041344 <ble_handler+0xcc>
			if(assert_version(message[2], message[3], message[4])){
 8041354:	7902      	ldrb	r2, [r0, #4]
 8041356:	78c1      	ldrb	r1, [r0, #3]
 8041358:	7880      	ldrb	r0, [r0, #2]
 804135a:	f7ff fedf 	bl	804111c <assert_version>
 804135e:	b178      	cbz	r0, 8041380 <ble_handler+0x108>
	if (DEVICE_TYPE == device_type)
 8041360:	795b      	ldrb	r3, [r3, #5]
 8041362:	2b02      	cmp	r3, #2
 8041364:	d108      	bne.n	8041378 <ble_handler+0x100>
					flags_ble.update_mode = SET;
 8041366:	4a09      	ldr	r2, [pc, #36]	; (804138c <ble_handler+0x114>)
					HAL_UART_Transmit(&huart1, (uint8_t *) &answer_execute_update_buffer, sizeof(answer_execute_update_buffer), 100);
 8041368:	4912      	ldr	r1, [pc, #72]	; (80413b4 <ble_handler+0x13c>)
					flags_ble.update_mode = SET;
 804136a:	7813      	ldrb	r3, [r2, #0]
 804136c:	f043 0310 	orr.w	r3, r3, #16
 8041370:	7013      	strb	r3, [r2, #0]
					HAL_UART_Transmit(&huart1, (uint8_t *) &answer_execute_update_buffer, sizeof(answer_execute_update_buffer), 100);
 8041372:	2364      	movs	r3, #100	; 0x64
 8041374:	2203      	movs	r2, #3
 8041376:	e7e5      	b.n	8041344 <ble_handler+0xcc>
					HAL_UART_Transmit(&huart1, (uint8_t *) &answer_wrong_device_type, sizeof(answer_wrong_device_type),100);
 8041378:	2364      	movs	r3, #100	; 0x64
 804137a:	2203      	movs	r2, #3
 804137c:	490e      	ldr	r1, [pc, #56]	; (80413b8 <ble_handler+0x140>)
 804137e:	e7e1      	b.n	8041344 <ble_handler+0xcc>
				HAL_UART_Transmit(&huart1, (uint8_t *) &answer_wrong_file_buffer, sizeof(answer_wrong_file_buffer), 100);
 8041380:	2364      	movs	r3, #100	; 0x64
 8041382:	2203      	movs	r2, #3
 8041384:	490d      	ldr	r1, [pc, #52]	; (80413bc <ble_handler+0x144>)
 8041386:	e7dd      	b.n	8041344 <ble_handler+0xcc>
 8041388:	2000102f 	.word	0x2000102f
 804138c:	2000b53c 	.word	0x2000b53c
 8041390:	0804f4f8 	.word	0x0804f4f8
 8041394:	0804f4e8 	.word	0x0804f4e8
 8041398:	20001004 	.word	0x20001004
 804139c:	2000b540 	.word	0x2000b540
 80413a0:	2000d794 	.word	0x2000d794
 80413a4:	200012ac 	.word	0x200012ac
 80413a8:	20001007 	.word	0x20001007
 80413ac:	2000100a 	.word	0x2000100a
 80413b0:	2000102b 	.word	0x2000102b
 80413b4:	20001035 	.word	0x20001035
 80413b8:	20001038 	.word	0x20001038
 80413bc:	2000103b 	.word	0x2000103b

080413c0 <transmit_to_ble>:
}
#endif

void transmit_to_ble(void){
 80413c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	//######### DEBUG ################
	PRINTF("%d Brinco: ", in_use_TAG);
 80413c4:	4c12      	ldr	r4, [pc, #72]	; (8041410 <transmit_to_ble+0x50>)
 80413c6:	4813      	ldr	r0, [pc, #76]	; (8041414 <transmit_to_ble+0x54>)
 80413c8:	f8d4 11f8 	ldr.w	r1, [r4, #504]	; 0x1f8
	for (uint8_t i = 0; i <= TAG_SIZE-1;i++)
	{
		PRINTF("%X ", (store_TAG[in_use_TAG].N_TAG[i]));
 80413cc:	4e12      	ldr	r6, [pc, #72]	; (8041418 <transmit_to_ble+0x58>)
 80413ce:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8041424 <transmit_to_ble+0x64>
	PRINTF("%d Brinco: ", in_use_TAG);
 80413d2:	f00a fa9b 	bl	804b90c <TraceSend>
 80413d6:	2500      	movs	r5, #0
		PRINTF("%X ", (store_TAG[in_use_TAG].N_TAG[i]));
 80413d8:	273c      	movs	r7, #60	; 0x3c
 80413da:	f8d4 31f8 	ldr.w	r3, [r4, #504]	; 0x1f8
 80413de:	fb07 6303 	mla	r3, r7, r3, r6
 80413e2:	4640      	mov	r0, r8
 80413e4:	5d59      	ldrb	r1, [r3, r5]
 80413e6:	3501      	adds	r5, #1
 80413e8:	f00a fa90 	bl	804b90c <TraceSend>
	for (uint8_t i = 0; i <= TAG_SIZE-1;i++)
 80413ec:	2d24      	cmp	r5, #36	; 0x24
 80413ee:	d1f4      	bne.n	80413da <transmit_to_ble+0x1a>
	}
	PRINTF("\r\n");
 80413f0:	480a      	ldr	r0, [pc, #40]	; (804141c <transmit_to_ble+0x5c>)
 80413f2:	f00a fa8b 	bl	804b90c <TraceSend>
	//################################
	HAL_UART_Transmit(&huart1, (uint8_t*) store_TAG[in_use_TAG].N_TAG, TAG_SIZE-1, 1000);
 80413f6:	f8d4 11f8 	ldr.w	r1, [r4, #504]	; 0x1f8
 80413fa:	4809      	ldr	r0, [pc, #36]	; (8041420 <transmit_to_ble+0x60>)
 80413fc:	fb07 6101 	mla	r1, r7, r1, r6
 8041400:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8041404:	2223      	movs	r2, #35	; 0x23
}
 8041406:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_UART_Transmit(&huart1, (uint8_t*) store_TAG[in_use_TAG].N_TAG, TAG_SIZE-1, 1000);
 804140a:	f004 bbf1 	b.w	8045bf0 <HAL_UART_Transmit>
 804140e:	bf00      	nop
 8041410:	200012ac 	.word	0x200012ac
 8041414:	0804f511 	.word	0x0804f511
 8041418:	200024d8 	.word	0x200024d8
 804141c:	0804f760 	.word	0x0804f760
 8041420:	2000b540 	.word	0x2000b540
 8041424:	0804f51d 	.word	0x0804f51d

08041428 <read_earrings>:

void read_earrings(void){
	HAL_UART_Transmit(&huart2, (uint8_t *)READ_MULTIPLE_TAG, MSG_MULTI_TAG_SIZE, 50);
 8041428:	2332      	movs	r3, #50	; 0x32
 804142a:	2203      	movs	r2, #3
 804142c:	4901      	ldr	r1, [pc, #4]	; (8041434 <read_earrings+0xc>)
 804142e:	4802      	ldr	r0, [pc, #8]	; (8041438 <read_earrings+0x10>)
 8041430:	f004 bbde 	b.w	8045bf0 <HAL_UART_Transmit>
 8041434:	2000103e 	.word	0x2000103e
 8041438:	2000b580 	.word	0x2000b580

0804143c <MX_USART1_UART_Init>:
  * @retval None
  */
void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 804143c:	480b      	ldr	r0, [pc, #44]	; (804146c <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 9600;
 804143e:	4a0c      	ldr	r2, [pc, #48]	; (8041470 <MX_USART1_UART_Init+0x34>)
{
 8041440:	b508      	push	{r3, lr}
  huart1.Init.BaudRate = 9600;
 8041442:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8041446:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 804144a:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 804144c:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 804144e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 8041452:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8041454:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8041458:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 804145a:	f004 fb83 	bl	8045b64 <HAL_UART_Init>
 804145e:	b118      	cbz	r0, 8041468 <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8041460:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8041464:	f00a bb50 	b.w	804bb08 <Error_Handler>
}
 8041468:	bd08      	pop	{r3, pc}
 804146a:	bf00      	nop
 804146c:	2000b540 	.word	0x2000b540
 8041470:	40011000 	.word	0x40011000

08041474 <MX_USART2_UART_Init>:
  * @retval None
  */
void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
 8041474:	480b      	ldr	r0, [pc, #44]	; (80414a4 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 38400;
 8041476:	4a0c      	ldr	r2, [pc, #48]	; (80414a8 <MX_USART2_UART_Init+0x34>)
{
 8041478:	b508      	push	{r3, lr}
  huart2.Init.BaudRate = 38400;
 804147a:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 804147e:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8041482:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8041484:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8041486:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Parity = UART_PARITY_NONE;
 804148a:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 804148c:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8041490:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8041492:	f004 fb67 	bl	8045b64 <HAL_UART_Init>
 8041496:	b118      	cbz	r0, 80414a0 <MX_USART2_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8041498:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 804149c:	f00a bb34 	b.w	804bb08 <Error_Handler>
}
 80414a0:	bd08      	pop	{r3, pc}
 80414a2:	bf00      	nop
 80414a4:	2000b580 	.word	0x2000b580
 80414a8:	40004400 	.word	0x40004400

080414ac <Ble_Init_GPIO>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void Ble_Init_GPIO(void)
{
 80414ac:	b530      	push	{r4, r5, lr}
 80414ae:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80414b0:	2214      	movs	r2, #20
 80414b2:	2100      	movs	r1, #0
 80414b4:	a803      	add	r0, sp, #12
 80414b6:	f00c f98f 	bl	804d7d8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80414ba:	2400      	movs	r4, #0
 80414bc:	4b18      	ldr	r3, [pc, #96]	; (8041520 <Ble_Init_GPIO+0x74>)
 80414be:	9401      	str	r4, [sp, #4]
 80414c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_BRK_GPIO_Port, BLE_BRK_Pin, GPIO_PIN_SET);
 80414c2:	4d18      	ldr	r5, [pc, #96]	; (8041524 <Ble_Init_GPIO+0x78>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80414c4:	f042 0201 	orr.w	r2, r2, #1
 80414c8:	631a      	str	r2, [r3, #48]	; 0x30
 80414ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80414cc:	f002 0201 	and.w	r2, r2, #1
 80414d0:	9201      	str	r2, [sp, #4]
 80414d2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80414d4:	9402      	str	r4, [sp, #8]
 80414d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80414d8:	f042 0202 	orr.w	r2, r2, #2
 80414dc:	631a      	str	r2, [r3, #48]	; 0x30
 80414de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80414e0:	f003 0302 	and.w	r3, r3, #2
 80414e4:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(BLE_BRK_GPIO_Port, BLE_BRK_Pin, GPIO_PIN_SET);
 80414e6:	4628      	mov	r0, r5
 80414e8:	2201      	movs	r2, #1
 80414ea:	f44f 7180 	mov.w	r1, #256	; 0x100
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80414ee:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(BLE_BRK_GPIO_Port, BLE_BRK_Pin, GPIO_PIN_SET);
 80414f0:	f002 fb48 	bl	8043b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLE_BRK_Pin */
  GPIO_InitStruct.Pin = BLE_BRK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80414f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80414f8:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(BLE_BRK_GPIO_Port, &GPIO_InitStruct);
 80414fa:	a903      	add	r1, sp, #12
 80414fc:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80414fe:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041502:	e9cd 3405 	strd	r3, r4, [sp, #20]
  HAL_GPIO_Init(BLE_BRK_GPIO_Port, &GPIO_InitStruct);
 8041506:	f002 f9c9 	bl	804389c <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_STATE_Pin */
  GPIO_InitStruct.Pin = BLE_STATE_Pin;
 804150a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BLE_STATE_GPIO_Port, &GPIO_InitStruct);
 804150e:	a903      	add	r1, sp, #12
 8041510:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8041512:	e9cd 3403 	strd	r3, r4, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041516:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(BLE_STATE_GPIO_Port, &GPIO_InitStruct);
 8041518:	f002 f9c0 	bl	804389c <HAL_GPIO_Init>

}
 804151c:	b009      	add	sp, #36	; 0x24
 804151e:	bd30      	pop	{r4, r5, pc}
 8041520:	40023800 	.word	0x40023800
 8041524:	40020000 	.word	0x40020000

08041528 <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8041528:	b510      	push	{r4, lr}
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 804152a:	4909      	ldr	r1, [pc, #36]	; (8041550 <GetFskBandwidthRegValue+0x28>)
{
 804152c:	2300      	movs	r3, #0
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 804152e:	f851 4033 	ldr.w	r4, [r1, r3, lsl #3]
 8041532:	4284      	cmp	r4, r0
 8041534:	ea4f 02c3 	mov.w	r2, r3, lsl #3
 8041538:	d803      	bhi.n	8041542 <GetFskBandwidthRegValue+0x1a>
 804153a:	440a      	add	r2, r1
 804153c:	6894      	ldr	r4, [r2, #8]
 804153e:	4284      	cmp	r4, r0
 8041540:	d803      	bhi.n	804154a <GetFskBandwidthRegValue+0x22>
 8041542:	3301      	adds	r3, #1
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8041544:	2b15      	cmp	r3, #21
 8041546:	d1f2      	bne.n	804152e <GetFskBandwidthRegValue+0x6>
 8041548:	e7fe      	b.n	8041548 <GetFskBandwidthRegValue+0x20>
        {
            return FskBandwidths[i].RegValue;
 804154a:	7910      	ldrb	r0, [r2, #4]
        }
    }
    // ERROR: Value not found
    while( 1 );
}
 804154c:	bd10      	pop	{r4, pc}
 804154e:	bf00      	nop
 8041550:	0804eec0 	.word	0x0804eec0

08041554 <SX1276OnDio4Irq>:
    }
}

void SX1276OnDio4Irq( void* context )
{
    switch( SX1276.Settings.Modem )
 8041554:	4b04      	ldr	r3, [pc, #16]	; (8041568 <SX1276OnDio4Irq+0x14>)
 8041556:	795a      	ldrb	r2, [r3, #5]
 8041558:	b92a      	cbnz	r2, 8041566 <SX1276OnDio4Irq+0x12>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 804155a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 804155e:	b912      	cbnz	r2, 8041566 <SX1276OnDio4Irq+0x12>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8041560:	2201      	movs	r2, #1
 8041562:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 8041566:	4770      	bx	lr
 8041568:	2000b5f4 	.word	0x2000b5f4

0804156c <SX1276BoardInit>:
    LoRaBoardCallbacks =callbacks;
 804156c:	4b01      	ldr	r3, [pc, #4]	; (8041574 <SX1276BoardInit+0x8>)
 804156e:	6018      	str	r0, [r3, #0]
}
 8041570:	4770      	bx	lr
 8041572:	bf00      	nop
 8041574:	20009c34 	.word	0x20009c34

08041578 <SX1276GetStatus>:
}
 8041578:	4b01      	ldr	r3, [pc, #4]	; (8041580 <SX1276GetStatus+0x8>)
 804157a:	7918      	ldrb	r0, [r3, #4]
 804157c:	4770      	bx	lr
 804157e:	bf00      	nop
 8041580:	2000b5f4 	.word	0x2000b5f4

08041584 <SX1276Reset>:
{
 8041584:	b530      	push	{r4, r5, lr}
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8041586:	4d12      	ldr	r5, [pc, #72]	; (80415d0 <SX1276Reset+0x4c>)
{
 8041588:	b087      	sub	sp, #28
    initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 804158a:	2401      	movs	r4, #1
    GPIO_InitTypeDef initStruct = { 0 };
 804158c:	2214      	movs	r2, #20
 804158e:	2100      	movs	r1, #0
 8041590:	a801      	add	r0, sp, #4
 8041592:	f00c f921 	bl	804d7d8 <memset>
    initStruct.Speed = GPIO_SPEED_HIGH;
 8041596:	2303      	movs	r3, #3
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8041598:	aa01      	add	r2, sp, #4
 804159a:	4621      	mov	r1, r4
 804159c:	4628      	mov	r0, r5
    initStruct.Speed = GPIO_SPEED_HIGH;
 804159e:	9304      	str	r3, [sp, #16]
    initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 80415a0:	9402      	str	r4, [sp, #8]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 80415a2:	f00a fc8f 	bl	804bec4 <HW_GPIO_Init>
    HW_GPIO_Write( RADIO_RESET_PORT, RADIO_RESET_PIN, 0 );
 80415a6:	4621      	mov	r1, r4
 80415a8:	2200      	movs	r2, #0
 80415aa:	4628      	mov	r0, r5
 80415ac:	f00a fd0c 	bl	804bfc8 <HW_GPIO_Write>
    DelayMs( 1 );
 80415b0:	4620      	mov	r0, r4
 80415b2:	f00b fadf 	bl	804cb74 <HAL_Delay>
    initStruct.Mode = GPIO_NOPULL;
 80415b6:	2300      	movs	r3, #0
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 80415b8:	aa01      	add	r2, sp, #4
 80415ba:	4621      	mov	r1, r4
 80415bc:	4628      	mov	r0, r5
    initStruct.Mode = GPIO_NOPULL;
 80415be:	9302      	str	r3, [sp, #8]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 80415c0:	f00a fc80 	bl	804bec4 <HW_GPIO_Init>
    DelayMs( 6 );
 80415c4:	2006      	movs	r0, #6
 80415c6:	f00b fad5 	bl	804cb74 <HAL_Delay>
}
 80415ca:	b007      	add	sp, #28
 80415cc:	bd30      	pop	{r4, r5, pc}
 80415ce:	bf00      	nop
 80415d0:	40020400 	.word	0x40020400

080415d4 <SX1276WriteBuffer>:
{
 80415d4:	b570      	push	{r4, r5, r6, lr}
 80415d6:	4606      	mov	r6, r0
 80415d8:	460c      	mov	r4, r1
 80415da:	4615      	mov	r5, r2
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 80415dc:	2102      	movs	r1, #2
 80415de:	2200      	movs	r2, #0
 80415e0:	480b      	ldr	r0, [pc, #44]	; (8041610 <SX1276WriteBuffer+0x3c>)
 80415e2:	f00a fcf1 	bl	804bfc8 <HW_GPIO_Write>
    HW_SPI_InOut( addr | 0x80 );
 80415e6:	f046 0080 	orr.w	r0, r6, #128	; 0x80
 80415ea:	f00a ff91 	bl	804c510 <HW_SPI_InOut>
 80415ee:	3c01      	subs	r4, #1
 80415f0:	4425      	add	r5, r4
    for( i = 0; i < size; i++ )
 80415f2:	42ac      	cmp	r4, r5
 80415f4:	d106      	bne.n	8041604 <SX1276WriteBuffer+0x30>
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 80415f6:	2201      	movs	r2, #1
 80415f8:	2102      	movs	r1, #2
 80415fa:	4805      	ldr	r0, [pc, #20]	; (8041610 <SX1276WriteBuffer+0x3c>)
}
 80415fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 8041600:	f00a bce2 	b.w	804bfc8 <HW_GPIO_Write>
        HW_SPI_InOut( buffer[i] );
 8041604:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8041608:	f00a ff82 	bl	804c510 <HW_SPI_InOut>
 804160c:	e7f1      	b.n	80415f2 <SX1276WriteBuffer+0x1e>
 804160e:	bf00      	nop
 8041610:	40020400 	.word	0x40020400

08041614 <SX1276Write>:
{
 8041614:	b507      	push	{r0, r1, r2, lr}
 8041616:	ab02      	add	r3, sp, #8
    SX1276WriteBuffer( addr, &data, 1 );
 8041618:	2201      	movs	r2, #1
{
 804161a:	f803 1d01 	strb.w	r1, [r3, #-1]!
    SX1276WriteBuffer( addr, &data, 1 );
 804161e:	4619      	mov	r1, r3
 8041620:	f7ff ffd8 	bl	80415d4 <SX1276WriteBuffer>
}
 8041624:	b003      	add	sp, #12
 8041626:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0804162c <SX1276SetChannel>:
    SX1276.Settings.Channel = freq;
 804162c:	4b10      	ldr	r3, [pc, #64]	; (8041670 <SX1276SetChannel+0x44>)
{
 804162e:	b510      	push	{r4, lr}
    SX1276.Settings.Channel = freq;
 8041630:	6098      	str	r0, [r3, #8]
    SX_FREQ_TO_CHANNEL( channel, freq );
 8041632:	f643 5309 	movw	r3, #15625	; 0x3d09
 8041636:	f641 6484 	movw	r4, #7812	; 0x1e84
 804163a:	fbb0 f2f3 	udiv	r2, r0, r3
 804163e:	fb03 0012 	mls	r0, r3, r2, r0
 8041642:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 8041646:	fbb4 f4f3 	udiv	r4, r4, r3
 804164a:	eb04 2402 	add.w	r4, r4, r2, lsl #8
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 804164e:	f3c4 4107 	ubfx	r1, r4, #16, #8
 8041652:	2006      	movs	r0, #6
 8041654:	f7ff ffde 	bl	8041614 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 8041658:	f3c4 2107 	ubfx	r1, r4, #8, #8
 804165c:	2007      	movs	r0, #7
 804165e:	f7ff ffd9 	bl	8041614 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 8041662:	b2e1      	uxtb	r1, r4
 8041664:	2008      	movs	r0, #8
}
 8041666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 804166a:	f7ff bfd3 	b.w	8041614 <SX1276Write>
 804166e:	bf00      	nop
 8041670:	2000b5f4 	.word	0x2000b5f4

08041674 <SX1276ReadBuffer>:
{
 8041674:	b570      	push	{r4, r5, r6, lr}
 8041676:	4606      	mov	r6, r0
 8041678:	460c      	mov	r4, r1
 804167a:	4615      	mov	r5, r2
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 804167c:	2102      	movs	r1, #2
 804167e:	2200      	movs	r2, #0
 8041680:	480b      	ldr	r0, [pc, #44]	; (80416b0 <SX1276ReadBuffer+0x3c>)
 8041682:	f00a fca1 	bl	804bfc8 <HW_GPIO_Write>
    HW_SPI_InOut( addr & 0x7F );
 8041686:	f006 007f 	and.w	r0, r6, #127	; 0x7f
 804168a:	f00a ff41 	bl	804c510 <HW_SPI_InOut>
 804168e:	3c01      	subs	r4, #1
 8041690:	4425      	add	r5, r4
    for( i = 0; i < size; i++ )
 8041692:	42ac      	cmp	r4, r5
 8041694:	d106      	bne.n	80416a4 <SX1276ReadBuffer+0x30>
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 8041696:	2201      	movs	r2, #1
 8041698:	2102      	movs	r1, #2
 804169a:	4805      	ldr	r0, [pc, #20]	; (80416b0 <SX1276ReadBuffer+0x3c>)
}
 804169c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 80416a0:	f00a bc92 	b.w	804bfc8 <HW_GPIO_Write>
        buffer[i] = HW_SPI_InOut( 0 );
 80416a4:	2000      	movs	r0, #0
 80416a6:	f00a ff33 	bl	804c510 <HW_SPI_InOut>
 80416aa:	f804 0f01 	strb.w	r0, [r4, #1]!
 80416ae:	e7f0      	b.n	8041692 <SX1276ReadBuffer+0x1e>
 80416b0:	40020400 	.word	0x40020400

080416b4 <SX1276Read>:
{
 80416b4:	b507      	push	{r0, r1, r2, lr}
    SX1276ReadBuffer( addr, &data, 1 );
 80416b6:	2201      	movs	r2, #1
 80416b8:	f10d 0107 	add.w	r1, sp, #7
 80416bc:	f7ff ffda 	bl	8041674 <SX1276ReadBuffer>
}
 80416c0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80416c4:	b003      	add	sp, #12
 80416c6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080416cc <RxChainCalibration>:
{
 80416cc:	b538      	push	{r3, r4, r5, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 80416ce:	2009      	movs	r0, #9
 80416d0:	f7ff fff0 	bl	80416b4 <SX1276Read>
 80416d4:	4605      	mov	r5, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80416d6:	2006      	movs	r0, #6
 80416d8:	f7ff ffec 	bl	80416b4 <SX1276Read>
 80416dc:	4604      	mov	r4, r0
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 80416de:	2007      	movs	r0, #7
 80416e0:	f7ff ffe8 	bl	80416b4 <SX1276Read>
 80416e4:	0200      	lsls	r0, r0, #8
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80416e6:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 80416ea:	2008      	movs	r0, #8
 80416ec:	f7ff ffe2 	bl	80416b4 <SX1276Read>
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80416f0:	4320      	orrs	r0, r4
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 80416f2:	f643 5309 	movw	r3, #15625	; 0x3d09
 80416f6:	b2c4      	uxtb	r4, r0
 80416f8:	435c      	muls	r4, r3
 80416fa:	0a00      	lsrs	r0, r0, #8
 80416fc:	4358      	muls	r0, r3
 80416fe:	3480      	adds	r4, #128	; 0x80
    SX1276Write( REG_PACONFIG, 0x00 );
 8041700:	2100      	movs	r1, #0
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 8041702:	eb00 2414 	add.w	r4, r0, r4, lsr #8
    SX1276Write( REG_PACONFIG, 0x00 );
 8041706:	2009      	movs	r0, #9
 8041708:	f7ff ff84 	bl	8041614 <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 804170c:	203b      	movs	r0, #59	; 0x3b
 804170e:	f7ff ffd1 	bl	80416b4 <SX1276Read>
 8041712:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8041716:	b2c9      	uxtb	r1, r1
 8041718:	203b      	movs	r0, #59	; 0x3b
 804171a:	f7ff ff7b 	bl	8041614 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 804171e:	203b      	movs	r0, #59	; 0x3b
 8041720:	f7ff ffc8 	bl	80416b4 <SX1276Read>
 8041724:	0682      	lsls	r2, r0, #26
 8041726:	d4fa      	bmi.n	804171e <RxChainCalibration+0x52>
    SX1276SetChannel( 868000000 );
 8041728:	480c      	ldr	r0, [pc, #48]	; (804175c <RxChainCalibration+0x90>)
 804172a:	f7ff ff7f 	bl	804162c <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 804172e:	203b      	movs	r0, #59	; 0x3b
 8041730:	f7ff ffc0 	bl	80416b4 <SX1276Read>
 8041734:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8041738:	b2c9      	uxtb	r1, r1
 804173a:	203b      	movs	r0, #59	; 0x3b
 804173c:	f7ff ff6a 	bl	8041614 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8041740:	203b      	movs	r0, #59	; 0x3b
 8041742:	f7ff ffb7 	bl	80416b4 <SX1276Read>
 8041746:	0683      	lsls	r3, r0, #26
 8041748:	d4fa      	bmi.n	8041740 <RxChainCalibration+0x74>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 804174a:	4629      	mov	r1, r5
 804174c:	2009      	movs	r0, #9
 804174e:	f7ff ff61 	bl	8041614 <SX1276Write>
    SX1276SetChannel( initialFreq );
 8041752:	4620      	mov	r0, r4
}
 8041754:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    SX1276SetChannel( initialFreq );
 8041758:	f7ff bf68 	b.w	804162c <SX1276SetChannel>
 804175c:	33bca100 	.word	0x33bca100

08041760 <SX1276GetTimeOnAir>:
{
 8041760:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8041764:	4688      	mov	r8, r1
    switch( modem )
 8041766:	b118      	cbz	r0, 8041770 <SX1276GetTimeOnAir+0x10>
 8041768:	2801      	cmp	r0, #1
 804176a:	d058      	beq.n	804181e <SX1276GetTimeOnAir+0xbe>
    uint32_t airTime = 0;
 804176c:	2000      	movs	r0, #0
    return airTime;
 804176e:	e04e      	b.n	804180e <SX1276GetTimeOnAir+0xae>
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8041770:	4c75      	ldr	r4, [pc, #468]	; (8041948 <SX1276GetTimeOnAir+0x1e8>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8041772:	2027      	movs	r0, #39	; 0x27
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8041774:	8c25      	ldrh	r5, [r4, #32]
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8041776:	f7ff ff9d 	bl	80416b4 <SX1276Read>
 804177a:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 804177e:	3001      	adds	r0, #1
 8041780:	4428      	add	r0, r5
 8041782:	f7fe ffff 	bl	8040784 <__aeabi_i2d>
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8041786:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 804178a:	2200      	movs	r2, #0
 804178c:	2b00      	cmp	r3, #0
 804178e:	d141      	bne.n	8041814 <SX1276GetTimeOnAir+0xb4>
 8041790:	4b6e      	ldr	r3, [pc, #440]	; (804194c <SX1276GetTimeOnAir+0x1ec>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8041792:	f7fe feab 	bl	80404ec <__adddf3>
 8041796:	4606      	mov	r6, r0
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8041798:	2030      	movs	r0, #48	; 0x30
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 804179a:	460f      	mov	r7, r1
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 804179c:	f7ff ff8a 	bl	80416b4 <SX1276Read>
 80417a0:	f030 03f9 	bics.w	r3, r0, #249	; 0xf9
 80417a4:	bf0c      	ite	eq
 80417a6:	2300      	moveq	r3, #0
 80417a8:	4b68      	ldrne	r3, [pc, #416]	; (804194c <SX1276GetTimeOnAir+0x1ec>)
 80417aa:	2200      	movs	r2, #0
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 80417ac:	4630      	mov	r0, r6
 80417ae:	4639      	mov	r1, r7
 80417b0:	f7fe fe9c 	bl	80404ec <__adddf3>
 80417b4:	4606      	mov	r6, r0
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 80417b6:	4640      	mov	r0, r8
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 80417b8:	460f      	mov	r7, r1
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 80417ba:	f7fe ffe3 	bl	8040784 <__aeabi_i2d>
 80417be:	4602      	mov	r2, r0
 80417c0:	460b      	mov	r3, r1
 80417c2:	4630      	mov	r0, r6
 80417c4:	4639      	mov	r1, r7
 80417c6:	f7fe fe91 	bl	80404ec <__adddf3>
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 80417ca:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80417ce:	2200      	movs	r2, #0
 80417d0:	bb13      	cbnz	r3, 8041818 <SX1276GetTimeOnAir+0xb8>
 80417d2:	2300      	movs	r3, #0
                                     pktLen +
 80417d4:	f7fe fe8a 	bl	80404ec <__adddf3>
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 80417d8:	2200      	movs	r2, #0
 80417da:	4b5d      	ldr	r3, [pc, #372]	; (8041950 <SX1276GetTimeOnAir+0x1f0>)
 80417dc:	f7ff f83c 	bl	8040858 <__aeabi_dmul>
 80417e0:	4606      	mov	r6, r0
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 80417e2:	69e0      	ldr	r0, [r4, #28]
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 80417e4:	460f      	mov	r7, r1
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 80417e6:	f7fe ffbd 	bl	8040764 <__aeabi_ui2d>
 80417ea:	4602      	mov	r2, r0
 80417ec:	460b      	mov	r3, r1
 80417ee:	4630      	mov	r0, r6
 80417f0:	4639      	mov	r1, r7
 80417f2:	f7ff f95b 	bl	8040aac <__aeabi_ddiv>
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 80417f6:	2200      	movs	r2, #0
 80417f8:	4b56      	ldr	r3, [pc, #344]	; (8041954 <SX1276GetTimeOnAir+0x1f4>)
 80417fa:	f7ff f82d 	bl	8040858 <__aeabi_dmul>
 80417fe:	ec41 0b10 	vmov	d0, r0, r1
 8041802:	f00d fac9 	bl	804ed98 <round>
            airTime = (uint32_t) floor( tOnAir * 1000 + 0.999 );
 8041806:	ec51 0b10 	vmov	r0, r1, d0
 804180a:	f7ff fae7 	bl	8040ddc <__aeabi_d2uiz>
}
 804180e:	b003      	add	sp, #12
 8041810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8041814:	2300      	movs	r3, #0
 8041816:	e7bc      	b.n	8041792 <SX1276GetTimeOnAir+0x32>
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8041818:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 804181c:	e7da      	b.n	80417d4 <SX1276GetTimeOnAir+0x74>
            switch( SX1276.Settings.LoRa.Bandwidth )
 804181e:	4a4a      	ldr	r2, [pc, #296]	; (8041948 <SX1276GetTimeOnAir+0x1e8>)
 8041820:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8041822:	3b07      	subs	r3, #7
 8041824:	2b02      	cmp	r3, #2
 8041826:	4692      	mov	sl, r2
 8041828:	f200 8082 	bhi.w	8041930 <SX1276GetTimeOnAir+0x1d0>
 804182c:	4a4a      	ldr	r2, [pc, #296]	; (8041958 <SX1276GetTimeOnAir+0x1f8>)
 804182e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8041832:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 8041836:	f8da b048 	ldr.w	fp, [sl, #72]	; 0x48
 804183a:	2001      	movs	r0, #1
 804183c:	fa00 f00b 	lsl.w	r0, r0, fp
 8041840:	f7fe ffa0 	bl	8040784 <__aeabi_i2d>
 8041844:	4602      	mov	r2, r0
 8041846:	460b      	mov	r3, r1
 8041848:	4620      	mov	r0, r4
 804184a:	4629      	mov	r1, r5
 804184c:	f7ff f92e 	bl	8040aac <__aeabi_ddiv>
            double ts = 1 / rs;
 8041850:	4602      	mov	r2, r0
 8041852:	460b      	mov	r3, r1
 8041854:	2000      	movs	r0, #0
 8041856:	493d      	ldr	r1, [pc, #244]	; (804194c <SX1276GetTimeOnAir+0x1ec>)
 8041858:	f7ff f928 	bl	8040aac <__aeabi_ddiv>
 804185c:	4604      	mov	r4, r0
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 804185e:	f8ba 004e 	ldrh.w	r0, [sl, #78]	; 0x4e
            double ts = 1 / rs;
 8041862:	460d      	mov	r5, r1
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 8041864:	f7fe ff8e 	bl	8040784 <__aeabi_i2d>
 8041868:	2200      	movs	r2, #0
 804186a:	4b3c      	ldr	r3, [pc, #240]	; (804195c <SX1276GetTimeOnAir+0x1fc>)
 804186c:	f7fe fe3e 	bl	80404ec <__adddf3>
 8041870:	4622      	mov	r2, r4
 8041872:	462b      	mov	r3, r5
 8041874:	f7fe fff0 	bl	8040858 <__aeabi_dmul>
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 8041878:	f89a 3050 	ldrb.w	r3, [sl, #80]	; 0x50
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 804187c:	4606      	mov	r6, r0
 804187e:	460f      	mov	r7, r1
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 8041880:	f89a 0052 	ldrb.w	r0, [sl, #82]	; 0x52
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8041884:	ea4f 018b 	mov.w	r1, fp, lsl #2
 8041888:	f1c1 011c 	rsb	r1, r1, #28
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 804188c:	2b00      	cmp	r3, #0
 804188e:	eb01 1100 	add.w	r1, r1, r0, lsl #4
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 8041892:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 8041896:	bf14      	ite	ne
 8041898:	2014      	movne	r0, #20
 804189a:	2000      	moveq	r0, #0
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 804189c:	1a08      	subs	r0, r1, r0
 804189e:	f7fe ff61 	bl	8040764 <__aeabi_ui2d>
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 80418a2:	f89a 304c 	ldrb.w	r3, [sl, #76]	; 0x4c
 80418a6:	2b00      	cmp	r3, #0
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80418a8:	4680      	mov	r8, r0
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 80418aa:	bf14      	ite	ne
 80418ac:	2002      	movne	r0, #2
 80418ae:	2000      	moveq	r0, #0
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 80418b0:	ebab 0000 	sub.w	r0, fp, r0
 80418b4:	0080      	lsls	r0, r0, #2
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80418b6:	4689      	mov	r9, r1
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 80418b8:	f7fe ff54 	bl	8040764 <__aeabi_ui2d>
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80418bc:	4602      	mov	r2, r0
 80418be:	460b      	mov	r3, r1
 80418c0:	4640      	mov	r0, r8
 80418c2:	4649      	mov	r1, r9
 80418c4:	f7ff f8f2 	bl	8040aac <__aeabi_ddiv>
 80418c8:	ec41 0b10 	vmov	d0, r0, r1
 80418cc:	f00d f960 	bl	804eb90 <ceil>
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
 80418d0:	f89a 004d 	ldrb.w	r0, [sl, #77]	; 0x4d
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80418d4:	ec53 2b10 	vmov	r2, r3, d0
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 80418d8:	3004      	adds	r0, #4
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80418da:	e9cd 2300 	strd	r2, r3, [sp]
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 80418de:	f7fe ff51 	bl	8040784 <__aeabi_i2d>
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80418e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80418e6:	f7fe ffb7 	bl	8040858 <__aeabi_dmul>
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 80418ea:	2200      	movs	r2, #0
 80418ec:	2300      	movs	r3, #0
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80418ee:	4680      	mov	r8, r0
 80418f0:	4689      	mov	r9, r1
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 80418f2:	f7ff fa41 	bl	8040d78 <__aeabi_dcmpgt>
 80418f6:	b1f0      	cbz	r0, 8041936 <SX1276GetTimeOnAir+0x1d6>
 80418f8:	2200      	movs	r2, #0
 80418fa:	4b15      	ldr	r3, [pc, #84]	; (8041950 <SX1276GetTimeOnAir+0x1f0>)
 80418fc:	4640      	mov	r0, r8
 80418fe:	4649      	mov	r1, r9
 8041900:	f7fe fdf4 	bl	80404ec <__adddf3>
            double tPayload = nPayload * ts;
 8041904:	4622      	mov	r2, r4
 8041906:	462b      	mov	r3, r5
 8041908:	f7fe ffa6 	bl	8040858 <__aeabi_dmul>
            double tOnAir = tPreamble + tPayload;
 804190c:	4632      	mov	r2, r6
 804190e:	463b      	mov	r3, r7
 8041910:	f7fe fdec 	bl	80404ec <__adddf3>
            airTime = (uint32_t) floor( tOnAir * 1000 + 0.999 );
 8041914:	2200      	movs	r2, #0
 8041916:	4b0f      	ldr	r3, [pc, #60]	; (8041954 <SX1276GetTimeOnAir+0x1f4>)
 8041918:	f7fe ff9e 	bl	8040858 <__aeabi_dmul>
 804191c:	a308      	add	r3, pc, #32	; (adr r3, 8041940 <SX1276GetTimeOnAir+0x1e0>)
 804191e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8041922:	f7fe fde3 	bl	80404ec <__adddf3>
 8041926:	ec41 0b10 	vmov	d0, r0, r1
 804192a:	f00d f9b1 	bl	804ec90 <floor>
 804192e:	e76a      	b.n	8041806 <SX1276GetTimeOnAir+0xa6>
            switch( SX1276.Settings.LoRa.Bandwidth )
 8041930:	2400      	movs	r4, #0
 8041932:	2500      	movs	r5, #0
 8041934:	e77f      	b.n	8041836 <SX1276GetTimeOnAir+0xd6>
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 8041936:	2000      	movs	r0, #0
 8041938:	4905      	ldr	r1, [pc, #20]	; (8041950 <SX1276GetTimeOnAir+0x1f0>)
 804193a:	e7e3      	b.n	8041904 <SX1276GetTimeOnAir+0x1a4>
 804193c:	f3af 8000 	nop.w
 8041940:	d916872b 	.word	0xd916872b
 8041944:	3feff7ce 	.word	0x3feff7ce
 8041948:	2000b5f4 	.word	0x2000b5f4
 804194c:	3ff00000 	.word	0x3ff00000
 8041950:	40200000 	.word	0x40200000
 8041954:	408f4000 	.word	0x408f4000
 8041958:	0804eec0 	.word	0x0804eec0
 804195c:	40110000 	.word	0x40110000

08041960 <SX1276ReadRssi>:
{
 8041960:	b508      	push	{r3, lr}
    switch( modem )
 8041962:	b120      	cbz	r0, 804196e <SX1276ReadRssi+0xe>
 8041964:	2801      	cmp	r0, #1
 8041966:	d00a      	beq.n	804197e <SX1276ReadRssi+0x1e>
        rssi = -1;
 8041968:	f04f 30ff 	mov.w	r0, #4294967295
 804196c:	e006      	b.n	804197c <SX1276ReadRssi+0x1c>
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 804196e:	2011      	movs	r0, #17
 8041970:	f7ff fea0 	bl	80416b4 <SX1276Read>
 8041974:	f3c0 0047 	ubfx	r0, r0, #1, #8
 8041978:	4240      	negs	r0, r0
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 804197a:	b200      	sxth	r0, r0
}
 804197c:	bd08      	pop	{r3, pc}
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 804197e:	4b07      	ldr	r3, [pc, #28]	; (804199c <SX1276ReadRssi+0x3c>)
 8041980:	689a      	ldr	r2, [r3, #8]
 8041982:	4b07      	ldr	r3, [pc, #28]	; (80419a0 <SX1276ReadRssi+0x40>)
 8041984:	429a      	cmp	r2, r3
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8041986:	f04f 001b 	mov.w	r0, #27
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 804198a:	d903      	bls.n	8041994 <SX1276ReadRssi+0x34>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 804198c:	f7ff fe92 	bl	80416b4 <SX1276Read>
 8041990:	389d      	subs	r0, #157	; 0x9d
 8041992:	e7f2      	b.n	804197a <SX1276ReadRssi+0x1a>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8041994:	f7ff fe8e 	bl	80416b4 <SX1276Read>
 8041998:	38a4      	subs	r0, #164	; 0xa4
 804199a:	e7ee      	b.n	804197a <SX1276ReadRssi+0x1a>
 804199c:	2000b5f4 	.word	0x2000b5f4
 80419a0:	1f4add40 	.word	0x1f4add40

080419a4 <SX1276SetOpMode.part.2>:
void SX1276SetOpMode( uint8_t opMode )
 80419a4:	b510      	push	{r4, lr}
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 80419a6:	2001      	movs	r0, #1
 80419a8:	f7ff fe84 	bl	80416b4 <SX1276Read>
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( true );
 80419ac:	4c07      	ldr	r4, [pc, #28]	; (80419cc <SX1276SetOpMode.part.2+0x28>)
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 80419ae:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
 80419b2:	2001      	movs	r0, #1
 80419b4:	f7ff fe2e 	bl	8041614 <SX1276Write>
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( true );
 80419b8:	6823      	ldr	r3, [r4, #0]
 80419ba:	2001      	movs	r0, #1
 80419bc:	691b      	ldr	r3, [r3, #16]
 80419be:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetXO( RESET ); 
 80419c0:	6823      	ldr	r3, [r4, #0]
 80419c2:	2000      	movs	r0, #0
 80419c4:	681b      	ldr	r3, [r3, #0]
}
 80419c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      LoRaBoardCallbacks->SX1276BoardSetXO( RESET ); 
 80419ca:	4718      	bx	r3
 80419cc:	20009c34 	.word	0x20009c34

080419d0 <SX1276SetSleep>:
{
 80419d0:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
 80419d2:	480a      	ldr	r0, [pc, #40]	; (80419fc <SX1276SetSleep+0x2c>)
 80419d4:	f009 ff10 	bl	804b7f8 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 80419d8:	4809      	ldr	r0, [pc, #36]	; (8041a00 <SX1276SetSleep+0x30>)
 80419da:	f009 ff0d 	bl	804b7f8 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 80419de:	4809      	ldr	r0, [pc, #36]	; (8041a04 <SX1276SetSleep+0x34>)
 80419e0:	f009 ff0a 	bl	804b7f8 <TimerStop>
 80419e4:	f7ff ffde 	bl	80419a4 <SX1276SetOpMode.part.2>
    LoRaBoardCallbacks->SX1276BoardSetXO( RESET );
 80419e8:	4b07      	ldr	r3, [pc, #28]	; (8041a08 <SX1276SetSleep+0x38>)
 80419ea:	681b      	ldr	r3, [r3, #0]
 80419ec:	2000      	movs	r0, #0
 80419ee:	681b      	ldr	r3, [r3, #0]
 80419f0:	4798      	blx	r3
    SX1276.Settings.State = RF_IDLE;
 80419f2:	4b06      	ldr	r3, [pc, #24]	; (8041a0c <SX1276SetSleep+0x3c>)
 80419f4:	2200      	movs	r2, #0
 80419f6:	711a      	strb	r2, [r3, #4]
}
 80419f8:	bd08      	pop	{r3, pc}
 80419fa:	bf00      	nop
 80419fc:	2000b65c 	.word	0x2000b65c
 8041a00:	2000b5c4 	.word	0x2000b5c4
 8041a04:	2000b5dc 	.word	0x2000b5dc
 8041a08:	20009c34 	.word	0x20009c34
 8041a0c:	2000b5f4 	.word	0x2000b5f4

08041a10 <SX1276SetOpMode>:
{
 8041a10:	b538      	push	{r3, r4, r5, lr}
    if( opMode == RF_OPMODE_SLEEP )
 8041a12:	4604      	mov	r4, r0
 8041a14:	b918      	cbnz	r0, 8041a1e <SX1276SetOpMode+0xe>
}
 8041a16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8041a1a:	f7ff bfc3 	b.w	80419a4 <SX1276SetOpMode.part.2>
      LoRaBoardCallbacks->SX1276BoardSetXO( SET ); 
 8041a1e:	4d0c      	ldr	r5, [pc, #48]	; (8041a50 <SX1276SetOpMode+0x40>)
 8041a20:	682b      	ldr	r3, [r5, #0]
 8041a22:	2001      	movs	r0, #1
 8041a24:	681b      	ldr	r3, [r3, #0]
 8041a26:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( false );
 8041a28:	682b      	ldr	r3, [r5, #0]
 8041a2a:	2000      	movs	r0, #0
 8041a2c:	691b      	ldr	r3, [r3, #16]
 8041a2e:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSw( opMode );
 8041a30:	682b      	ldr	r3, [r5, #0]
 8041a32:	4620      	mov	r0, r4
 8041a34:	695b      	ldr	r3, [r3, #20]
 8041a36:	4798      	blx	r3
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8041a38:	2001      	movs	r0, #1
 8041a3a:	f7ff fe3b 	bl	80416b4 <SX1276Read>
 8041a3e:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
 8041a42:	4321      	orrs	r1, r4
 8041a44:	2001      	movs	r0, #1
}
 8041a46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8041a4a:	f7ff bde3 	b.w	8041614 <SX1276Write>
 8041a4e:	bf00      	nop
 8041a50:	20009c34 	.word	0x20009c34

08041a54 <SX1276SetStby>:
{
 8041a54:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
 8041a56:	4808      	ldr	r0, [pc, #32]	; (8041a78 <SX1276SetStby+0x24>)
 8041a58:	f009 fece 	bl	804b7f8 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8041a5c:	4807      	ldr	r0, [pc, #28]	; (8041a7c <SX1276SetStby+0x28>)
 8041a5e:	f009 fecb 	bl	804b7f8 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 8041a62:	4807      	ldr	r0, [pc, #28]	; (8041a80 <SX1276SetStby+0x2c>)
 8041a64:	f009 fec8 	bl	804b7f8 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
 8041a68:	2001      	movs	r0, #1
 8041a6a:	f7ff ffd1 	bl	8041a10 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 8041a6e:	4b05      	ldr	r3, [pc, #20]	; (8041a84 <SX1276SetStby+0x30>)
 8041a70:	2200      	movs	r2, #0
 8041a72:	711a      	strb	r2, [r3, #4]
}
 8041a74:	bd08      	pop	{r3, pc}
 8041a76:	bf00      	nop
 8041a78:	2000b65c 	.word	0x2000b65c
 8041a7c:	2000b5c4 	.word	0x2000b5c4
 8041a80:	2000b5dc 	.word	0x2000b5dc
 8041a84:	2000b5f4 	.word	0x2000b5f4

08041a88 <SX1276SetRx>:
{
 8041a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch( SX1276.Settings.Modem )
 8041a8a:	4c79      	ldr	r4, [pc, #484]	; (8041c70 <SX1276SetRx+0x1e8>)
{
 8041a8c:	4607      	mov	r7, r0
    TimerStop( &TxTimeoutTimer );
 8041a8e:	4879      	ldr	r0, [pc, #484]	; (8041c74 <SX1276SetRx+0x1ec>)
 8041a90:	f009 feb2 	bl	804b7f8 <TimerStop>
    switch( SX1276.Settings.Modem )
 8041a94:	7965      	ldrb	r5, [r4, #5]
 8041a96:	b11d      	cbz	r5, 8041aa0 <SX1276SetRx+0x18>
 8041a98:	2d01      	cmp	r5, #1
 8041a9a:	d044      	beq.n	8041b26 <SX1276SetRx+0x9e>
    bool rxContinuous = false;
 8041a9c:	2600      	movs	r6, #0
 8041a9e:	e022      	b.n	8041ae6 <SX1276SetRx+0x5e>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8041aa0:	2040      	movs	r0, #64	; 0x40
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8041aa2:	f894 6026 	ldrb.w	r6, [r4, #38]	; 0x26
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8041aa6:	f7ff fe05 	bl	80416b4 <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8041aaa:	f000 0103 	and.w	r1, r0, #3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8041aae:	f041 010c 	orr.w	r1, r1, #12
 8041ab2:	2040      	movs	r0, #64	; 0x40
 8041ab4:	f7ff fdae 	bl	8041614 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8041ab8:	2041      	movs	r0, #65	; 0x41
 8041aba:	f7ff fdfb 	bl	80416b4 <SX1276Read>
 8041abe:	f060 013e 	orn	r1, r0, #62	; 0x3e
 8041ac2:	b2c9      	uxtb	r1, r1
 8041ac4:	2041      	movs	r0, #65	; 0x41
 8041ac6:	f7ff fda5 	bl	8041614 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8041aca:	2035      	movs	r0, #53	; 0x35
 8041acc:	f7ff fdf2 	bl	80416b4 <SX1276Read>
 8041ad0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8041ad4:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 8041ad8:	211e      	movs	r1, #30
 8041ada:	200d      	movs	r0, #13
 8041adc:	f7ff fd9a 	bl	8041614 <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8041ae0:	8625      	strh	r5, [r4, #48]	; 0x30
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8041ae2:	87a5      	strh	r5, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8041ae4:	8765      	strh	r5, [r4, #58]	; 0x3a
    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 8041ae6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8041aea:	2100      	movs	r1, #0
 8041aec:	4862      	ldr	r0, [pc, #392]	; (8041c78 <SX1276SetRx+0x1f0>)
 8041aee:	f00b fe73 	bl	804d7d8 <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
 8041af2:	2301      	movs	r3, #1
 8041af4:	7123      	strb	r3, [r4, #4]
    if( timeout != 0 )
 8041af6:	b137      	cbz	r7, 8041b06 <SX1276SetRx+0x7e>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8041af8:	4860      	ldr	r0, [pc, #384]	; (8041c7c <SX1276SetRx+0x1f4>)
 8041afa:	4639      	mov	r1, r7
 8041afc:	f009 fea4 	bl	804b848 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8041b00:	485e      	ldr	r0, [pc, #376]	; (8041c7c <SX1276SetRx+0x1f4>)
 8041b02:	f009 fe07 	bl	804b714 <TimerStart>
    if( SX1276.Settings.Modem == MODEM_FSK )
 8041b06:	7963      	ldrb	r3, [r4, #5]
 8041b08:	2b00      	cmp	r3, #0
 8041b0a:	f040 80a9 	bne.w	8041c60 <SX1276SetRx+0x1d8>
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8041b0e:	2005      	movs	r0, #5
 8041b10:	f7ff ff7e 	bl	8041a10 <SX1276SetOpMode>
        TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 8041b14:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8041b16:	485a      	ldr	r0, [pc, #360]	; (8041c80 <SX1276SetRx+0x1f8>)
 8041b18:	f009 fe96 	bl	804b848 <TimerSetValue>
        TimerStart( &RxTimeoutSyncWord );
 8041b1c:	4858      	ldr	r0, [pc, #352]	; (8041c80 <SX1276SetRx+0x1f8>)
}
 8041b1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        TimerStart( &RxTimeoutSyncWord );
 8041b22:	f009 bdf7 	b.w	804b714 <TimerStart>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8041b26:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8041b2a:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 8041b2c:	b32b      	cbz	r3, 8041b7a <SX1276SetRx+0xf2>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8041b2e:	f7ff fdc1 	bl	80416b4 <SX1276Read>
 8041b32:	f040 0141 	orr.w	r1, r0, #65	; 0x41
 8041b36:	b2c9      	uxtb	r1, r1
 8041b38:	2033      	movs	r0, #51	; 0x33
 8041b3a:	f7ff fd6b 	bl	8041614 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8041b3e:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8041b40:	203b      	movs	r0, #59	; 0x3b
 8041b42:	f7ff fd67 	bl	8041614 <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8041b46:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8041b48:	2b08      	cmp	r3, #8
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8041b4a:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8041b4e:	d876      	bhi.n	8041c3e <SX1276SetRx+0x1b6>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8041b50:	f7ff fdb0 	bl	80416b4 <SX1276Read>
 8041b54:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8041b58:	2031      	movs	r0, #49	; 0x31
 8041b5a:	f7ff fd5b 	bl	8041614 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 8041b5e:	2100      	movs	r1, #0
 8041b60:	2030      	movs	r0, #48	; 0x30
 8041b62:	f7ff fd57 	bl	8041614 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 8041b66:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8041b68:	2b08      	cmp	r3, #8
 8041b6a:	d81b      	bhi.n	8041ba4 <SX1276SetRx+0x11c>
 8041b6c:	e8df f003 	tbb	[pc, r3]
 8041b70:	473e3510 	.word	0x473e3510
 8041b74:	62625950 	.word	0x62625950
 8041b78:	62          	.byte	0x62
 8041b79:	00          	.byte	0x00
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8041b7a:	f7ff fd9b 	bl	80416b4 <SX1276Read>
 8041b7e:	f000 01be 	and.w	r1, r0, #190	; 0xbe
 8041b82:	f041 0101 	orr.w	r1, r1, #1
 8041b86:	2033      	movs	r0, #51	; 0x33
 8041b88:	f7ff fd44 	bl	8041614 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8041b8c:	211d      	movs	r1, #29
 8041b8e:	e7d7      	b.n	8041b40 <SX1276SetRx+0xb8>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 8041b90:	202f      	movs	r0, #47	; 0x2f
 8041b92:	2148      	movs	r1, #72	; 0x48
 8041b94:	f7ff fd3e 	bl	8041614 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 8041b98:	68a0      	ldr	r0, [r4, #8]
 8041b9a:	f500 50f4 	add.w	r0, r0, #7808	; 0x1e80
 8041b9e:	3002      	adds	r0, #2
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8041ba0:	f7ff fd44 	bl	804162c <SX1276SetChannel>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8041ba4:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 8041ba8:	f894 6056 	ldrb.w	r6, [r4, #86]	; 0x56
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8041bac:	2b00      	cmp	r3, #0
 8041bae:	d04d      	beq.n	8041c4c <SX1276SetRx+0x1c4>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8041bb0:	211d      	movs	r1, #29
 8041bb2:	2011      	movs	r0, #17
 8041bb4:	f7ff fd2e 	bl	8041614 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8041bb8:	2040      	movs	r0, #64	; 0x40
 8041bba:	f7ff fd7b 	bl	80416b4 <SX1276Read>
 8041bbe:	f000 0133 	and.w	r1, r0, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8041bc2:	2040      	movs	r0, #64	; 0x40
 8041bc4:	f7ff fd26 	bl	8041614 <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8041bc8:	2100      	movs	r1, #0
 8041bca:	200f      	movs	r0, #15
 8041bcc:	f7ff fd22 	bl	8041614 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8041bd0:	2100      	movs	r1, #0
 8041bd2:	200d      	movs	r0, #13
 8041bd4:	f7ff fd1e 	bl	8041614 <SX1276Write>
        break;
 8041bd8:	e785      	b.n	8041ae6 <SX1276SetRx+0x5e>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8041bda:	202f      	movs	r0, #47	; 0x2f
 8041bdc:	2144      	movs	r1, #68	; 0x44
 8041bde:	f7ff fd19 	bl	8041614 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 8041be2:	68a0      	ldr	r0, [r4, #8]
 8041be4:	f500 5022 	add.w	r0, r0, #10368	; 0x2880
 8041be8:	3034      	adds	r0, #52	; 0x34
 8041bea:	e7d9      	b.n	8041ba0 <SX1276SetRx+0x118>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8041bec:	202f      	movs	r0, #47	; 0x2f
 8041bee:	2144      	movs	r1, #68	; 0x44
 8041bf0:	f7ff fd10 	bl	8041614 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 8041bf4:	68a0      	ldr	r0, [r4, #8]
 8041bf6:	f500 5074 	add.w	r0, r0, #15616	; 0x3d00
 8041bfa:	3004      	adds	r0, #4
 8041bfc:	e7d0      	b.n	8041ba0 <SX1276SetRx+0x118>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8041bfe:	202f      	movs	r0, #47	; 0x2f
 8041c00:	2144      	movs	r1, #68	; 0x44
 8041c02:	f7ff fd07 	bl	8041614 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 8041c06:	68a0      	ldr	r0, [r4, #8]
 8041c08:	f500 40a2 	add.w	r0, r0, #20736	; 0x5100
 8041c0c:	305e      	adds	r0, #94	; 0x5e
 8041c0e:	e7c7      	b.n	8041ba0 <SX1276SetRx+0x118>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8041c10:	202f      	movs	r0, #47	; 0x2f
 8041c12:	2144      	movs	r1, #68	; 0x44
 8041c14:	f7ff fcfe 	bl	8041614 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 8041c18:	68a0      	ldr	r0, [r4, #8]
 8041c1a:	f500 40f4 	add.w	r0, r0, #31232	; 0x7a00
 8041c1e:	3012      	adds	r0, #18
 8041c20:	e7be      	b.n	8041ba0 <SX1276SetRx+0x118>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8041c22:	202f      	movs	r0, #47	; 0x2f
 8041c24:	2144      	movs	r1, #68	; 0x44
 8041c26:	f7ff fcf5 	bl	8041614 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8041c2a:	68a0      	ldr	r0, [r4, #8]
 8041c2c:	f500 4022 	add.w	r0, r0, #41472	; 0xa200
 8041c30:	30c6      	adds	r0, #198	; 0xc6
 8041c32:	e7b5      	b.n	8041ba0 <SX1276SetRx+0x118>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8041c34:	2140      	movs	r1, #64	; 0x40
 8041c36:	202f      	movs	r0, #47	; 0x2f
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 8041c38:	f7ff fcec 	bl	8041614 <SX1276Write>
 8041c3c:	e7b2      	b.n	8041ba4 <SX1276SetRx+0x11c>
 8041c3e:	f7ff fd39 	bl	80416b4 <SX1276Read>
 8041c42:	f060 017f 	orn	r1, r0, #127	; 0x7f
 8041c46:	b2c9      	uxtb	r1, r1
 8041c48:	2031      	movs	r0, #49	; 0x31
 8041c4a:	e7f5      	b.n	8041c38 <SX1276SetRx+0x1b0>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8041c4c:	211f      	movs	r1, #31
 8041c4e:	2011      	movs	r0, #17
 8041c50:	f7ff fce0 	bl	8041614 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8041c54:	2040      	movs	r0, #64	; 0x40
 8041c56:	f7ff fd2d 	bl	80416b4 <SX1276Read>
 8041c5a:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 8041c5e:	e7b0      	b.n	8041bc2 <SX1276SetRx+0x13a>
        if( rxContinuous == true )
 8041c60:	b126      	cbz	r6, 8041c6c <SX1276SetRx+0x1e4>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 8041c62:	2005      	movs	r0, #5
}
 8041c64:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8041c68:	f7ff bed2 	b.w	8041a10 <SX1276SetOpMode>
 8041c6c:	2006      	movs	r0, #6
 8041c6e:	e7f9      	b.n	8041c64 <SX1276SetRx+0x1dc>
 8041c70:	2000b5f4 	.word	0x2000b5f4
 8041c74:	2000b5c4 	.word	0x2000b5c4
 8041c78:	20009c38 	.word	0x20009c38
 8041c7c:	2000b65c 	.word	0x2000b65c
 8041c80:	2000b5dc 	.word	0x2000b5dc

08041c84 <SX1276SetTx>:
{
 8041c84:	b510      	push	{r4, lr}
 8041c86:	4604      	mov	r4, r0
    TimerStop( &RxTimeoutTimer );
 8041c88:	4825      	ldr	r0, [pc, #148]	; (8041d20 <SX1276SetTx+0x9c>)
 8041c8a:	f009 fdb5 	bl	804b7f8 <TimerStop>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8041c8e:	4621      	mov	r1, r4
    switch( SX1276.Settings.Modem )
 8041c90:	4c24      	ldr	r4, [pc, #144]	; (8041d24 <SX1276SetTx+0xa0>)
    TimerSetValue( &TxTimeoutTimer, timeout );
 8041c92:	4825      	ldr	r0, [pc, #148]	; (8041d28 <SX1276SetTx+0xa4>)
 8041c94:	f009 fdd8 	bl	804b848 <TimerSetValue>
    switch( SX1276.Settings.Modem )
 8041c98:	7963      	ldrb	r3, [r4, #5]
 8041c9a:	b15b      	cbz	r3, 8041cb4 <SX1276SetTx+0x30>
 8041c9c:	2b01      	cmp	r3, #1
 8041c9e:	d023      	beq.n	8041ce8 <SX1276SetTx+0x64>
    SX1276.Settings.State = RF_TX_RUNNING;
 8041ca0:	2302      	movs	r3, #2
    TimerStart( &TxTimeoutTimer );
 8041ca2:	4821      	ldr	r0, [pc, #132]	; (8041d28 <SX1276SetTx+0xa4>)
    SX1276.Settings.State = RF_TX_RUNNING;
 8041ca4:	7123      	strb	r3, [r4, #4]
    TimerStart( &TxTimeoutTimer );
 8041ca6:	f009 fd35 	bl	804b714 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8041caa:	2003      	movs	r0, #3
}
 8041cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8041cb0:	f7ff beae 	b.w	8041a10 <SX1276SetOpMode>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8041cb4:	2040      	movs	r0, #64	; 0x40
 8041cb6:	f7ff fcfd 	bl	80416b4 <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 8041cba:	f000 0103 	and.w	r1, r0, #3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8041cbe:	f041 0110 	orr.w	r1, r1, #16
 8041cc2:	2040      	movs	r0, #64	; 0x40
 8041cc4:	f7ff fca6 	bl	8041614 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8041cc8:	2041      	movs	r0, #65	; 0x41
 8041cca:	f7ff fcf3 	bl	80416b4 <SX1276Read>
 8041cce:	f000 013e 	and.w	r1, r0, #62	; 0x3e
 8041cd2:	2041      	movs	r0, #65	; 0x41
 8041cd4:	f7ff fc9e 	bl	8041614 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8041cd8:	2035      	movs	r0, #53	; 0x35
 8041cda:	f7ff fceb 	bl	80416b4 <SX1276Read>
 8041cde:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8041ce2:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
        break;
 8041ce6:	e7db      	b.n	8041ca0 <SX1276SetTx+0x1c>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8041ce8:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 8041cec:	b173      	cbz	r3, 8041d0c <SX1276SetTx+0x88>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8041cee:	21f5      	movs	r1, #245	; 0xf5
 8041cf0:	2011      	movs	r0, #17
 8041cf2:	f7ff fc8f 	bl	8041614 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8041cf6:	2040      	movs	r0, #64	; 0x40
 8041cf8:	f7ff fcdc 	bl	80416b4 <SX1276Read>
 8041cfc:	f000 0133 	and.w	r1, r0, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8041d00:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8041d04:	2040      	movs	r0, #64	; 0x40
 8041d06:	f7ff fc85 	bl	8041614 <SX1276Write>
 8041d0a:	e7c9      	b.n	8041ca0 <SX1276SetTx+0x1c>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8041d0c:	21f7      	movs	r1, #247	; 0xf7
 8041d0e:	2011      	movs	r0, #17
 8041d10:	f7ff fc80 	bl	8041614 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8041d14:	2040      	movs	r0, #64	; 0x40
 8041d16:	f7ff fccd 	bl	80416b4 <SX1276Read>
 8041d1a:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 8041d1e:	e7ef      	b.n	8041d00 <SX1276SetTx+0x7c>
 8041d20:	2000b65c 	.word	0x2000b65c
 8041d24:	2000b5f4 	.word	0x2000b5f4
 8041d28:	2000b5c4 	.word	0x2000b5c4

08041d2c <SX1276StartCad>:
{
 8041d2c:	b510      	push	{r4, lr}
    switch( SX1276.Settings.Modem )
 8041d2e:	4c0c      	ldr	r4, [pc, #48]	; (8041d60 <SX1276StartCad+0x34>)
 8041d30:	7963      	ldrb	r3, [r4, #5]
 8041d32:	2b01      	cmp	r3, #1
 8041d34:	d112      	bne.n	8041d5c <SX1276StartCad+0x30>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8041d36:	21fa      	movs	r1, #250	; 0xfa
 8041d38:	2011      	movs	r0, #17
 8041d3a:	f7ff fc6b 	bl	8041614 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 8041d3e:	2040      	movs	r0, #64	; 0x40
 8041d40:	f7ff fcb8 	bl	80416b4 <SX1276Read>
 8041d44:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
 8041d48:	2040      	movs	r0, #64	; 0x40
 8041d4a:	f7ff fc63 	bl	8041614 <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 8041d4e:	2303      	movs	r3, #3
 8041d50:	7123      	strb	r3, [r4, #4]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 8041d52:	2007      	movs	r0, #7
}
 8041d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 8041d58:	f7ff be5a 	b.w	8041a10 <SX1276SetOpMode>
}
 8041d5c:	bd10      	pop	{r4, pc}
 8041d5e:	bf00      	nop
 8041d60:	2000b5f4 	.word	0x2000b5f4

08041d64 <SX1276SetModem>:
{
 8041d64:	b510      	push	{r4, lr}
 8041d66:	4604      	mov	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 8041d68:	2001      	movs	r0, #1
 8041d6a:	f7ff fca3 	bl	80416b4 <SX1276Read>
 8041d6e:	4b19      	ldr	r3, [pc, #100]	; (8041dd4 <SX1276SetModem+0x70>)
 8041d70:	f010 0f80 	tst.w	r0, #128	; 0x80
        SX1276.Settings.Modem = MODEM_LORA;
 8041d74:	bf14      	ite	ne
 8041d76:	2201      	movne	r2, #1
        SX1276.Settings.Modem = MODEM_FSK;
 8041d78:	2200      	moveq	r2, #0
 8041d7a:	715a      	strb	r2, [r3, #5]
    if( SX1276.Settings.Modem == modem )
 8041d7c:	795a      	ldrb	r2, [r3, #5]
 8041d7e:	42a2      	cmp	r2, r4
 8041d80:	d027      	beq.n	8041dd2 <SX1276SetModem+0x6e>
    switch( SX1276.Settings.Modem )
 8041d82:	2c01      	cmp	r4, #1
    SX1276.Settings.Modem = modem;
 8041d84:	715c      	strb	r4, [r3, #5]
    switch( SX1276.Settings.Modem )
 8041d86:	d013      	beq.n	8041db0 <SX1276SetModem+0x4c>
 8041d88:	f7ff fe0c 	bl	80419a4 <SX1276SetOpMode.part.2>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8041d8c:	2001      	movs	r0, #1
 8041d8e:	f7ff fc91 	bl	80416b4 <SX1276Read>
 8041d92:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8041d96:	2001      	movs	r0, #1
 8041d98:	f7ff fc3c 	bl	8041614 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8041d9c:	2100      	movs	r1, #0
 8041d9e:	2040      	movs	r0, #64	; 0x40
 8041da0:	f7ff fc38 	bl	8041614 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8041da4:	2130      	movs	r1, #48	; 0x30
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8041da6:	2041      	movs	r0, #65	; 0x41
}
 8041da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8041dac:	f7ff bc32 	b.w	8041614 <SX1276Write>
 8041db0:	f7ff fdf8 	bl	80419a4 <SX1276SetOpMode.part.2>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8041db4:	4620      	mov	r0, r4
 8041db6:	f7ff fc7d 	bl	80416b4 <SX1276Read>
 8041dba:	f060 017f 	orn	r1, r0, #127	; 0x7f
 8041dbe:	b2c9      	uxtb	r1, r1
 8041dc0:	4620      	mov	r0, r4
 8041dc2:	f7ff fc27 	bl	8041614 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8041dc6:	2100      	movs	r1, #0
 8041dc8:	2040      	movs	r0, #64	; 0x40
 8041dca:	f7ff fc23 	bl	8041614 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8041dce:	2100      	movs	r1, #0
 8041dd0:	e7e9      	b.n	8041da6 <SX1276SetModem+0x42>
}
 8041dd2:	bd10      	pop	{r4, pc}
 8041dd4:	2000b5f4 	.word	0x2000b5f4

08041dd8 <SX1276Init>:
{
 8041dd8:	b570      	push	{r4, r5, r6, lr}
    RadioEvents = events;
 8041dda:	4d1b      	ldr	r5, [pc, #108]	; (8041e48 <SX1276Init+0x70>)
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8041ddc:	491b      	ldr	r1, [pc, #108]	; (8041e4c <SX1276Init+0x74>)
    RadioEvents = events;
 8041dde:	f8c5 0104 	str.w	r0, [r5, #260]	; 0x104
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8041de2:	481b      	ldr	r0, [pc, #108]	; (8041e50 <SX1276Init+0x78>)
 8041de4:	4c1b      	ldr	r4, [pc, #108]	; (8041e54 <SX1276Init+0x7c>)
 8041de6:	f009 fc8b 	bl	804b700 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 8041dea:	4918      	ldr	r1, [pc, #96]	; (8041e4c <SX1276Init+0x74>)
 8041dec:	481a      	ldr	r0, [pc, #104]	; (8041e58 <SX1276Init+0x80>)
 8041dee:	f009 fc87 	bl	804b700 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 8041df2:	4916      	ldr	r1, [pc, #88]	; (8041e4c <SX1276Init+0x74>)
 8041df4:	4819      	ldr	r0, [pc, #100]	; (8041e5c <SX1276Init+0x84>)
 8041df6:	f009 fc83 	bl	804b700 <TimerInit>
    LoRaBoardCallbacks->SX1276BoardSetXO( SET );
 8041dfa:	682b      	ldr	r3, [r5, #0]
 8041dfc:	2001      	movs	r0, #1
 8041dfe:	681b      	ldr	r3, [r3, #0]
 8041e00:	4798      	blx	r3
    SX1276Reset( );
 8041e02:	f7ff fbbf 	bl	8041584 <SX1276Reset>
    RxChainCalibration( );
 8041e06:	f7ff fc61 	bl	80416cc <RxChainCalibration>
 8041e0a:	f7ff fdcb 	bl	80419a4 <SX1276SetOpMode.part.2>
    LoRaBoardCallbacks->SX1276BoardIoIrqInit( DioIrq );
 8041e0e:	682b      	ldr	r3, [r5, #0]
 8041e10:	4813      	ldr	r0, [pc, #76]	; (8041e60 <SX1276Init+0x88>)
 8041e12:	689b      	ldr	r3, [r3, #8]
 8041e14:	4798      	blx	r3
 8041e16:	f104 0630 	add.w	r6, r4, #48	; 0x30
        SX1276SetModem( RadioRegsInit[i].Modem );
 8041e1a:	7820      	ldrb	r0, [r4, #0]
 8041e1c:	f7ff ffa2 	bl	8041d64 <SX1276SetModem>
 8041e20:	3403      	adds	r4, #3
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8041e22:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8041e26:	f814 0c02 	ldrb.w	r0, [r4, #-2]
 8041e2a:	f7ff fbf3 	bl	8041614 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8041e2e:	42b4      	cmp	r4, r6
 8041e30:	d1f3      	bne.n	8041e1a <SX1276Init+0x42>
    SX1276SetModem( MODEM_FSK );
 8041e32:	2000      	movs	r0, #0
 8041e34:	f7ff ff96 	bl	8041d64 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 8041e38:	4b0a      	ldr	r3, [pc, #40]	; (8041e64 <SX1276Init+0x8c>)
 8041e3a:	2200      	movs	r2, #0
 8041e3c:	711a      	strb	r2, [r3, #4]
    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 8041e3e:	682b      	ldr	r3, [r5, #0]
 8041e40:	685b      	ldr	r3, [r3, #4]
 8041e42:	4798      	blx	r3
}
 8041e44:	3002      	adds	r0, #2
 8041e46:	bd70      	pop	{r4, r5, r6, pc}
 8041e48:	20009c34 	.word	0x20009c34
 8041e4c:	08042a71 	.word	0x08042a71
 8041e50:	2000b5c4 	.word	0x2000b5c4
 8041e54:	0804ef88 	.word	0x0804ef88
 8041e58:	2000b65c 	.word	0x2000b65c
 8041e5c:	2000b5dc 	.word	0x2000b5dc
 8041e60:	2000105c 	.word	0x2000105c
 8041e64:	2000b5f4 	.word	0x2000b5f4

08041e68 <SX1276IsChannelFree>:
{
 8041e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8041e6a:	461c      	mov	r4, r3
    return SX1276.Settings.State;
 8041e6c:	4b13      	ldr	r3, [pc, #76]	; (8041ebc <SX1276IsChannelFree+0x54>)
    if( SX1276GetStatus( ) != RF_IDLE )
 8041e6e:	791b      	ldrb	r3, [r3, #4]
{
 8041e70:	4606      	mov	r6, r0
 8041e72:	460d      	mov	r5, r1
 8041e74:	4617      	mov	r7, r2
    if( SX1276GetStatus( ) != RF_IDLE )
 8041e76:	b9f3      	cbnz	r3, 8041eb6 <SX1276IsChannelFree+0x4e>
    SX1276SetModem( modem );
 8041e78:	f7ff ff74 	bl	8041d64 <SX1276SetModem>
    SX1276SetChannel( freq );
 8041e7c:	4628      	mov	r0, r5
 8041e7e:	f7ff fbd5 	bl	804162c <SX1276SetChannel>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8041e82:	2005      	movs	r0, #5
 8041e84:	f7ff fdc4 	bl	8041a10 <SX1276SetOpMode>
    DelayMs( 1 );
 8041e88:	2001      	movs	r0, #1
 8041e8a:	f00a fe73 	bl	804cb74 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 8041e8e:	f009 fcec 	bl	804b86a <TimerGetCurrentTime>
 8041e92:	4605      	mov	r5, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8041e94:	4628      	mov	r0, r5
 8041e96:	f009 fcef 	bl	804b878 <TimerGetElapsedTime>
 8041e9a:	42a0      	cmp	r0, r4
 8041e9c:	d304      	bcc.n	8041ea8 <SX1276IsChannelFree+0x40>
    bool status = true;
 8041e9e:	2401      	movs	r4, #1
    SX1276SetSleep( );
 8041ea0:	f7ff fd96 	bl	80419d0 <SX1276SetSleep>
}
 8041ea4:	4620      	mov	r0, r4
 8041ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rssi = SX1276ReadRssi( modem );
 8041ea8:	4630      	mov	r0, r6
 8041eaa:	f7ff fd59 	bl	8041960 <SX1276ReadRssi>
        if( rssi > rssiThresh )
 8041eae:	42b8      	cmp	r0, r7
 8041eb0:	ddf0      	ble.n	8041e94 <SX1276IsChannelFree+0x2c>
            status = false;
 8041eb2:	2400      	movs	r4, #0
 8041eb4:	e7f4      	b.n	8041ea0 <SX1276IsChannelFree+0x38>
        return false;
 8041eb6:	2400      	movs	r4, #0
 8041eb8:	e7f4      	b.n	8041ea4 <SX1276IsChannelFree+0x3c>
 8041eba:	bf00      	nop
 8041ebc:	2000b5f4 	.word	0x2000b5f4

08041ec0 <SX1276Random>:
{
 8041ec0:	b538      	push	{r3, r4, r5, lr}
    SX1276SetModem( MODEM_LORA );
 8041ec2:	2001      	movs	r0, #1
 8041ec4:	f7ff ff4e 	bl	8041d64 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8041ec8:	21ff      	movs	r1, #255	; 0xff
 8041eca:	2011      	movs	r0, #17
 8041ecc:	f7ff fba2 	bl	8041614 <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8041ed0:	2005      	movs	r0, #5
 8041ed2:	f7ff fd9d 	bl	8041a10 <SX1276SetOpMode>
 8041ed6:	2400      	movs	r4, #0
    uint32_t rnd = 0;
 8041ed8:	4625      	mov	r5, r4
        DelayMs( 1 );
 8041eda:	2001      	movs	r0, #1
 8041edc:	f00a fe4a 	bl	804cb74 <HAL_Delay>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8041ee0:	202c      	movs	r0, #44	; 0x2c
 8041ee2:	f7ff fbe7 	bl	80416b4 <SX1276Read>
 8041ee6:	f000 0001 	and.w	r0, r0, #1
 8041eea:	40a0      	lsls	r0, r4
 8041eec:	3401      	adds	r4, #1
    for( i = 0; i < 32; i++ )
 8041eee:	2c20      	cmp	r4, #32
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8041ef0:	ea45 0500 	orr.w	r5, r5, r0
    for( i = 0; i < 32; i++ )
 8041ef4:	d1f1      	bne.n	8041eda <SX1276Random+0x1a>
    SX1276SetSleep( );
 8041ef6:	f7ff fd6b 	bl	80419d0 <SX1276SetSleep>
}
 8041efa:	4628      	mov	r0, r5
 8041efc:	bd38      	pop	{r3, r4, r5, pc}
	...

08041f00 <SX1276SetRxConfig>:
{
 8041f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8041f04:	b089      	sub	sp, #36	; 0x24
 8041f06:	4604      	mov	r4, r0
 8041f08:	9300      	str	r3, [sp, #0]
 8041f0a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8041f0e:	9304      	str	r3, [sp, #16]
 8041f10:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8041f14:	9302      	str	r3, [sp, #8]
 8041f16:	468a      	mov	sl, r1
 8041f18:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8041f1c:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
 8041f20:	9305      	str	r3, [sp, #20]
 8041f22:	4615      	mov	r5, r2
 8041f24:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 8041f28:	9206      	str	r2, [sp, #24]
 8041f2a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 8041f2e:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8041f32:	f89d 8054 	ldrb.w	r8, [sp, #84]	; 0x54
 8041f36:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
 8041f3a:	f89d 605c 	ldrb.w	r6, [sp, #92]	; 0x5c
 8041f3e:	9107      	str	r1, [sp, #28]
    SX1276SetModem( modem );
 8041f40:	f7ff ff10 	bl	8041d64 <SX1276SetModem>
    switch( modem )
 8041f44:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8041f48:	b134      	cbz	r4, 8041f58 <SX1276SetRxConfig+0x58>
 8041f4a:	2c01      	cmp	r4, #1
 8041f4c:	9907      	ldr	r1, [sp, #28]
 8041f4e:	f000 8083 	beq.w	8042058 <SX1276SetRxConfig+0x158>
}
 8041f52:	b009      	add	sp, #36	; 0x24
 8041f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8041f58:	4ca1      	ldr	r4, [pc, #644]	; (80421e0 <SX1276SetRxConfig+0x2e0>)
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 8041f5a:	4628      	mov	r0, r5
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8041f5c:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8041f60:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8041f64:	f8c4 a014 	str.w	sl, [r4, #20]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8041f68:	e9c4 9506 	strd	r9, r5, [r4, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8041f6c:	f884 8022 	strb.w	r8, [r4, #34]	; 0x22
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8041f70:	f884 b023 	strb.w	fp, [r4, #35]	; 0x23
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8041f74:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8041f78:	8427      	strh	r7, [r4, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 8041f7a:	f7fe fbf3 	bl	8040764 <__aeabi_ui2d>
 8041f7e:	e9cd 0100 	strd	r0, r1, [sp]
 8041f82:	4602      	mov	r2, r0
 8041f84:	460b      	mov	r3, r1
 8041f86:	2000      	movs	r0, #0
 8041f88:	4996      	ldr	r1, [pc, #600]	; (80421e4 <SX1276SetRxConfig+0x2e4>)
 8041f8a:	f7fe fd8f 	bl	8040aac <__aeabi_ddiv>
 8041f8e:	2200      	movs	r2, #0
 8041f90:	4b95      	ldr	r3, [pc, #596]	; (80421e8 <SX1276SetRxConfig+0x2e8>)
 8041f92:	f7fe fc61 	bl	8040858 <__aeabi_dmul>
 8041f96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8041f9a:	9804      	ldr	r0, [sp, #16]
 8041f9c:	f7fe fbf2 	bl	8040784 <__aeabi_i2d>
 8041fa0:	4602      	mov	r2, r0
 8041fa2:	460b      	mov	r3, r1
 8041fa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8041fa8:	f7fe fc56 	bl	8040858 <__aeabi_dmul>
 8041fac:	2200      	movs	r2, #0
 8041fae:	4b8f      	ldr	r3, [pc, #572]	; (80421ec <SX1276SetRxConfig+0x2ec>)
 8041fb0:	f7fe fc52 	bl	8040858 <__aeabi_dmul>
 8041fb4:	f7fe ff12 	bl	8040ddc <__aeabi_d2uiz>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8041fb8:	e9dd 2300 	ldrd	r2, r3, [sp]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 8041fbc:	62e0      	str	r0, [r4, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8041fbe:	a186      	add	r1, pc, #536	; (adr r1, 80421d8 <SX1276SetRxConfig+0x2d8>)
 8041fc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8041fc4:	f7fe fd72 	bl	8040aac <__aeabi_ddiv>
 8041fc8:	f7fe ff08 	bl	8040ddc <__aeabi_d2uiz>
 8041fcc:	b284      	uxth	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8041fce:	0a21      	lsrs	r1, r4, #8
 8041fd0:	2002      	movs	r0, #2
 8041fd2:	f7ff fb1f 	bl	8041614 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8041fd6:	b2e1      	uxtb	r1, r4
 8041fd8:	2003      	movs	r0, #3
 8041fda:	f7ff fb1b 	bl	8041614 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8041fde:	4650      	mov	r0, sl
 8041fe0:	f7ff faa2 	bl	8041528 <GetFskBandwidthRegValue>
 8041fe4:	4601      	mov	r1, r0
 8041fe6:	2012      	movs	r0, #18
 8041fe8:	f7ff fb14 	bl	8041614 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8041fec:	4648      	mov	r0, r9
 8041fee:	f7ff fa9b 	bl	8041528 <GetFskBandwidthRegValue>
 8041ff2:	4601      	mov	r1, r0
 8041ff4:	2013      	movs	r0, #19
 8041ff6:	f7ff fb0d 	bl	8041614 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8041ffa:	0a39      	lsrs	r1, r7, #8
 8041ffc:	2025      	movs	r0, #37	; 0x25
 8041ffe:	f7ff fb09 	bl	8041614 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8042002:	b2f9      	uxtb	r1, r7
 8042004:	2026      	movs	r0, #38	; 0x26
 8042006:	f7ff fb05 	bl	8041614 <SX1276Write>
            if( fixLen == 1 )
 804200a:	f1b8 0f00 	cmp.w	r8, #0
 804200e:	d021      	beq.n	8042054 <SX1276SetRxConfig+0x154>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8042010:	4659      	mov	r1, fp
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8042012:	2032      	movs	r0, #50	; 0x32
 8042014:	f7ff fafe 	bl	8041614 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8042018:	2030      	movs	r0, #48	; 0x30
 804201a:	f7ff fb4b 	bl	80416b4 <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 804201e:	f1b8 0f00 	cmp.w	r8, #0
                           RF_PACKETCONFIG1_CRC_MASK &
 8042022:	f000 006f 	and.w	r0, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8042026:	bf14      	ite	ne
 8042028:	2100      	movne	r1, #0
 804202a:	f06f 017f 	mvneq.w	r1, #127	; 0x7f
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 804202e:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
 8042032:	4301      	orrs	r1, r0
            SX1276Write( REG_PACKETCONFIG1,
 8042034:	b2c9      	uxtb	r1, r1
 8042036:	2030      	movs	r0, #48	; 0x30
 8042038:	f7ff faec 	bl	8041614 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 804203c:	2031      	movs	r0, #49	; 0x31
 804203e:	f7ff fb39 	bl	80416b4 <SX1276Read>
 8042042:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8042046:	b2c9      	uxtb	r1, r1
 8042048:	2031      	movs	r0, #49	; 0x31
}
 804204a:	b009      	add	sp, #36	; 0x24
 804204c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8042050:	f7ff bae0 	b.w	8041614 <SX1276Write>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8042054:	21ff      	movs	r1, #255	; 0xff
 8042056:	e7dc      	b.n	8042012 <SX1276SetRxConfig+0x112>
            if( bandwidth > 2 )
 8042058:	f1ba 0f02 	cmp.w	sl, #2
 804205c:	d900      	bls.n	8042060 <SX1276SetRxConfig+0x160>
 804205e:	e7fe      	b.n	804205e <SX1276SetRxConfig+0x15e>
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8042060:	4c5f      	ldr	r4, [pc, #380]	; (80421e0 <SX1276SetRxConfig+0x2e0>)
            SX1276.Settings.LoRa.Coderate = coderate;
 8042062:	9800      	ldr	r0, [sp, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8042064:	f884 1053 	strb.w	r1, [r4, #83]	; 0x53
            bandwidth += 7;
 8042068:	f10a 0907 	add.w	r9, sl, #7
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 804206c:	9902      	ldr	r1, [sp, #8]
            SX1276.Settings.LoRa.Coderate = coderate;
 804206e:	f884 004d 	strb.w	r0, [r4, #77]	; 0x4d
            if( datarate > 12 )
 8042072:	2d0c      	cmp	r5, #12
            SX1276.Settings.LoRa.Datarate = datarate;
 8042074:	e9c4 9511 	strd	r9, r5, [r4, #68]	; 0x44
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8042078:	f8a4 704e 	strh.w	r7, [r4, #78]	; 0x4e
            SX1276.Settings.LoRa.FixLen = fixLen;
 804207c:	f884 8050 	strb.w	r8, [r4, #80]	; 0x50
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8042080:	f884 b051 	strb.w	fp, [r4, #81]	; 0x51
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8042084:	f884 6052 	strb.w	r6, [r4, #82]	; 0x52
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8042088:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 804208c:	f884 2055 	strb.w	r2, [r4, #85]	; 0x55
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8042090:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
            if( datarate > 12 )
 8042094:	f200 8098 	bhi.w	80421c8 <SX1276SetRxConfig+0x2c8>
            else if( datarate < 6 )
 8042098:	2d05      	cmp	r5, #5
 804209a:	f240 8081 	bls.w	80421a0 <SX1276SetRxConfig+0x2a0>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 804209e:	f1b9 0f07 	cmp.w	r9, #7
 80420a2:	d176      	bne.n	8042192 <SX1276SetRxConfig+0x292>
 80420a4:	f1a5 030b 	sub.w	r3, r5, #11
 80420a8:	2b01      	cmp	r3, #1
 80420aa:	d877      	bhi.n	804219c <SX1276SetRxConfig+0x29c>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 80420ac:	2301      	movs	r3, #1
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 80420ae:	201d      	movs	r0, #29
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80420b0:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 80420b4:	f7ff fafe 	bl	80416b4 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80420b8:	9b00      	ldr	r3, [sp, #0]
 80420ba:	ea48 0143 	orr.w	r1, r8, r3, lsl #1
 80420be:	ea41 1109 	orr.w	r1, r1, r9, lsl #4
            SX1276Write( REG_LR_MODEMCONFIG1,
 80420c2:	b2c9      	uxtb	r1, r1
 80420c4:	201d      	movs	r0, #29
 80420c6:	f7ff faa5 	bl	8041614 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 80420ca:	201e      	movs	r0, #30
 80420cc:	f7ff faf2 	bl	80416b4 <SX1276Read>
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 80420d0:	9b04      	ldr	r3, [sp, #16]
 80420d2:	f3c3 2101 	ubfx	r1, r3, #8, #2
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 80420d6:	f000 0008 	and.w	r0, r0, #8
            SX1276Write( REG_LR_MODEMCONFIG2,
 80420da:	ea41 0186 	orr.w	r1, r1, r6, lsl #2
 80420de:	4301      	orrs	r1, r0
 80420e0:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 80420e4:	b2c9      	uxtb	r1, r1
 80420e6:	201e      	movs	r0, #30
 80420e8:	f7ff fa94 	bl	8041614 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 80420ec:	2026      	movs	r0, #38	; 0x26
 80420ee:	f7ff fae1 	bl	80416b4 <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 80420f2:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 80420f6:	f020 0008 	bic.w	r0, r0, #8
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 80420fa:	ea40 01c1 	orr.w	r1, r0, r1, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
 80420fe:	b2c9      	uxtb	r1, r1
 8042100:	2026      	movs	r0, #38	; 0x26
 8042102:	f7ff fa87 	bl	8041614 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8042106:	f89d 1010 	ldrb.w	r1, [sp, #16]
 804210a:	201f      	movs	r0, #31
 804210c:	f7ff fa82 	bl	8041614 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8042110:	0a39      	lsrs	r1, r7, #8
 8042112:	2020      	movs	r0, #32
 8042114:	f7ff fa7e 	bl	8041614 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8042118:	b2f9      	uxtb	r1, r7
 804211a:	2021      	movs	r0, #33	; 0x21
 804211c:	f7ff fa7a 	bl	8041614 <SX1276Write>
            if( fixLen == 1 )
 8042120:	f1b8 0f00 	cmp.w	r8, #0
 8042124:	d003      	beq.n	804212e <SX1276SetRxConfig+0x22e>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8042126:	4659      	mov	r1, fp
 8042128:	2022      	movs	r0, #34	; 0x22
 804212a:	f7ff fa73 	bl	8041614 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 804212e:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 8042132:	b16b      	cbz	r3, 8042150 <SX1276SetRxConfig+0x250>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8042134:	2044      	movs	r0, #68	; 0x44
 8042136:	f7ff fabd 	bl	80416b4 <SX1276Read>
 804213a:	f060 017f 	orn	r1, r0, #127	; 0x7f
 804213e:	b2c9      	uxtb	r1, r1
 8042140:	2044      	movs	r0, #68	; 0x44
 8042142:	f7ff fa67 	bl	8041614 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8042146:	f894 1054 	ldrb.w	r1, [r4, #84]	; 0x54
 804214a:	2024      	movs	r0, #36	; 0x24
 804214c:	f7ff fa62 	bl	8041614 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8042150:	f1b9 0f09 	cmp.w	r9, #9
 8042154:	d12a      	bne.n	80421ac <SX1276SetRxConfig+0x2ac>
 8042156:	68a2      	ldr	r2, [r4, #8]
 8042158:	4b25      	ldr	r3, [pc, #148]	; (80421f0 <SX1276SetRxConfig+0x2f0>)
 804215a:	429a      	cmp	r2, r3
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 804215c:	f04f 0102 	mov.w	r1, #2
 8042160:	f04f 0036 	mov.w	r0, #54	; 0x36
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8042164:	d91e      	bls.n	80421a4 <SX1276SetRxConfig+0x2a4>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8042166:	f7ff fa55 	bl	8041614 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 804216a:	2164      	movs	r1, #100	; 0x64
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 804216c:	203a      	movs	r0, #58	; 0x3a
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 804216e:	f7ff fa51 	bl	8041614 <SX1276Write>
            if( datarate == 6 )
 8042172:	2d06      	cmp	r5, #6
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8042174:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( datarate == 6 )
 8042178:	d11b      	bne.n	80421b2 <SX1276SetRxConfig+0x2b2>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 804217a:	f7ff fa9b 	bl	80416b4 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 804217e:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8042182:	f041 0105 	orr.w	r1, r1, #5
 8042186:	2031      	movs	r0, #49	; 0x31
 8042188:	f7ff fa44 	bl	8041614 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 804218c:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 804218e:	2037      	movs	r0, #55	; 0x37
 8042190:	e75b      	b.n	804204a <SX1276SetRxConfig+0x14a>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8042192:	f1b9 0f08 	cmp.w	r9, #8
 8042196:	d101      	bne.n	804219c <SX1276SetRxConfig+0x29c>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8042198:	2d0c      	cmp	r5, #12
 804219a:	d087      	beq.n	80420ac <SX1276SetRxConfig+0x1ac>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 804219c:	2300      	movs	r3, #0
 804219e:	e786      	b.n	80420ae <SX1276SetRxConfig+0x1ae>
                datarate = 6;
 80421a0:	2506      	movs	r5, #6
 80421a2:	e7fb      	b.n	804219c <SX1276SetRxConfig+0x29c>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 80421a4:	f7ff fa36 	bl	8041614 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 80421a8:	217f      	movs	r1, #127	; 0x7f
 80421aa:	e7df      	b.n	804216c <SX1276SetRxConfig+0x26c>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 80421ac:	2103      	movs	r1, #3
 80421ae:	2036      	movs	r0, #54	; 0x36
 80421b0:	e7dd      	b.n	804216e <SX1276SetRxConfig+0x26e>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80421b2:	f7ff fa7f 	bl	80416b4 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80421b6:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80421ba:	f041 0103 	orr.w	r1, r1, #3
 80421be:	2031      	movs	r0, #49	; 0x31
 80421c0:	f7ff fa28 	bl	8041614 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80421c4:	210a      	movs	r1, #10
 80421c6:	e7e2      	b.n	804218e <SX1276SetRxConfig+0x28e>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80421c8:	f1ba 0f02 	cmp.w	sl, #2
 80421cc:	f04f 050c 	mov.w	r5, #12
 80421d0:	d0e4      	beq.n	804219c <SX1276SetRxConfig+0x29c>
 80421d2:	e76b      	b.n	80420ac <SX1276SetRxConfig+0x1ac>
 80421d4:	f3af 8000 	nop.w
 80421d8:	00000000 	.word	0x00000000
 80421dc:	417e8480 	.word	0x417e8480
 80421e0:	2000b5f4 	.word	0x2000b5f4
 80421e4:	3ff00000 	.word	0x3ff00000
 80421e8:	40200000 	.word	0x40200000
 80421ec:	408f4000 	.word	0x408f4000
 80421f0:	1f4add40 	.word	0x1f4add40
 80421f4:	00000000 	.word	0x00000000

080421f8 <SX1276SetTxConfig>:
{
 80421f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80421fc:	b087      	sub	sp, #28
 80421fe:	4698      	mov	r8, r3
 8042200:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8042204:	9301      	str	r3, [sp, #4]
 8042206:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 804220a:	9303      	str	r3, [sp, #12]
 804220c:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 8042210:	9304      	str	r3, [sp, #16]
 8042212:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8042214:	9205      	str	r2, [sp, #20]
 8042216:	4689      	mov	r9, r1
 8042218:	9302      	str	r3, [sp, #8]
 804221a:	4683      	mov	fp, r0
 804221c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 804221e:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
 8042222:	f8bd 7048 	ldrh.w	r7, [sp, #72]	; 0x48
 8042226:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 804222a:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
    SX1276SetModem( modem );
 804222e:	f7ff fd99 	bl	8041d64 <SX1276SetModem>
    LoRaBoardCallbacks->SX1276BoardSetRfTxPower( power );
 8042232:	4985      	ldr	r1, [pc, #532]	; (8042448 <SX1276SetTxConfig+0x250>)
 8042234:	6809      	ldr	r1, [r1, #0]
 8042236:	4648      	mov	r0, r9
 8042238:	68c9      	ldr	r1, [r1, #12]
 804223a:	4788      	blx	r1
    switch( modem )
 804223c:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8042240:	f1bb 0f00 	cmp.w	fp, #0
 8042244:	d005      	beq.n	8042252 <SX1276SetTxConfig+0x5a>
 8042246:	f1bb 0f01 	cmp.w	fp, #1
 804224a:	d061      	beq.n	8042310 <SX1276SetTxConfig+0x118>
}
 804224c:	b007      	add	sp, #28
 804224e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Power = power;
 8042252:	497e      	ldr	r1, [pc, #504]	; (804244c <SX1276SetTxConfig+0x254>)
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8042254:	f881 3025 	strb.w	r3, [r1, #37]	; 0x25
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8042258:	9b02      	ldr	r3, [sp, #8]
            SX1276.Settings.Fsk.Datarate = datarate;
 804225a:	61cc      	str	r4, [r1, #28]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 804225c:	e9c1 2804 	strd	r2, r8, [r1, #16]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8042260:	f881 5024 	strb.w	r5, [r1, #36]	; 0x24
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8042264:	628b      	str	r3, [r1, #40]	; 0x28
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 8042266:	4610      	mov	r0, r2
            SX1276.Settings.Fsk.Power = power;
 8042268:	f881 900c 	strb.w	r9, [r1, #12]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 804226c:	840f      	strh	r7, [r1, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 804226e:	f881 6022 	strb.w	r6, [r1, #34]	; 0x22
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 8042272:	f7fe fa77 	bl	8040764 <__aeabi_ui2d>
 8042276:	a370      	add	r3, pc, #448	; (adr r3, 8042438 <SX1276SetTxConfig+0x240>)
 8042278:	e9d3 2300 	ldrd	r2, r3, [r3]
 804227c:	f7fe fc16 	bl	8040aac <__aeabi_ddiv>
 8042280:	f7fe fdac 	bl	8040ddc <__aeabi_d2uiz>
 8042284:	fa1f f880 	uxth.w	r8, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 8042288:	ea4f 2118 	mov.w	r1, r8, lsr #8
 804228c:	2004      	movs	r0, #4
 804228e:	f7ff f9c1 	bl	8041614 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 8042292:	fa5f f188 	uxtb.w	r1, r8
 8042296:	2005      	movs	r0, #5
 8042298:	f7ff f9bc 	bl	8041614 <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 804229c:	4620      	mov	r0, r4
 804229e:	f7fe fa61 	bl	8040764 <__aeabi_ui2d>
 80422a2:	4602      	mov	r2, r0
 80422a4:	460b      	mov	r3, r1
 80422a6:	a166      	add	r1, pc, #408	; (adr r1, 8042440 <SX1276SetTxConfig+0x248>)
 80422a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80422ac:	f7fe fbfe 	bl	8040aac <__aeabi_ddiv>
 80422b0:	f7fe fd94 	bl	8040ddc <__aeabi_d2uiz>
 80422b4:	b284      	uxth	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 80422b6:	0a21      	lsrs	r1, r4, #8
 80422b8:	2002      	movs	r0, #2
 80422ba:	f7ff f9ab 	bl	8041614 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 80422be:	b2e1      	uxtb	r1, r4
 80422c0:	2003      	movs	r0, #3
 80422c2:	f7ff f9a7 	bl	8041614 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 80422c6:	0a39      	lsrs	r1, r7, #8
 80422c8:	2025      	movs	r0, #37	; 0x25
 80422ca:	f7ff f9a3 	bl	8041614 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 80422ce:	b2f9      	uxtb	r1, r7
 80422d0:	2026      	movs	r0, #38	; 0x26
 80422d2:	f7ff f99f 	bl	8041614 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 80422d6:	2030      	movs	r0, #48	; 0x30
 80422d8:	f7ff f9ec 	bl	80416b4 <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 80422dc:	2e00      	cmp	r6, #0
                           RF_PACKETCONFIG1_CRC_MASK &
 80422de:	f000 006f 	and.w	r0, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 80422e2:	bf14      	ite	ne
 80422e4:	2100      	movne	r1, #0
 80422e6:	f06f 017f 	mvneq.w	r1, #127	; 0x7f
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 80422ea:	ea40 1505 	orr.w	r5, r0, r5, lsl #4
 80422ee:	4329      	orrs	r1, r5
            SX1276Write( REG_PACKETCONFIG1,
 80422f0:	b2c9      	uxtb	r1, r1
 80422f2:	2030      	movs	r0, #48	; 0x30
 80422f4:	f7ff f98e 	bl	8041614 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 80422f8:	2031      	movs	r0, #49	; 0x31
 80422fa:	f7ff f9db 	bl	80416b4 <SX1276Read>
 80422fe:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8042302:	b2c9      	uxtb	r1, r1
 8042304:	2031      	movs	r0, #49	; 0x31
}
 8042306:	b007      	add	sp, #28
 8042308:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 804230c:	f7ff b982 	b.w	8041614 <SX1276Write>
            SX1276.Settings.LoRa.Power = power;
 8042310:	4a4e      	ldr	r2, [pc, #312]	; (804244c <SX1276SetTxConfig+0x254>)
            if( bandwidth > 2 )
 8042312:	f1b8 0f02 	cmp.w	r8, #2
            SX1276.Settings.LoRa.Power = power;
 8042316:	f882 9040 	strb.w	r9, [r2, #64]	; 0x40
 804231a:	4691      	mov	r9, r2
            if( bandwidth > 2 )
 804231c:	d900      	bls.n	8042320 <SX1276SetTxConfig+0x128>
 804231e:	e7fe      	b.n	804231e <SX1276SetTxConfig+0x126>
            bandwidth += 7;
 8042320:	f108 0b07 	add.w	fp, r8, #7
            SX1276.Settings.LoRa.Datarate = datarate;
 8042324:	e9c2 b411 	strd	fp, r4, [r2, #68]	; 0x44
            SX1276.Settings.LoRa.Coderate = coderate;
 8042328:	f882 a04d 	strb.w	sl, [r2, #77]	; 0x4d
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 804232c:	f8a2 704e 	strh.w	r7, [r2, #78]	; 0x4e
            SX1276.Settings.LoRa.FixLen = fixLen;
 8042330:	f882 6050 	strb.w	r6, [r2, #80]	; 0x50
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8042334:	9a01      	ldr	r2, [sp, #4]
 8042336:	f889 2053 	strb.w	r2, [r9, #83]	; 0x53
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 804233a:	f889 3055 	strb.w	r3, [r9, #85]	; 0x55
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 804233e:	9a03      	ldr	r2, [sp, #12]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8042340:	9b02      	ldr	r3, [sp, #8]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8042342:	f889 2054 	strb.w	r2, [r9, #84]	; 0x54
            if( datarate > 12 )
 8042346:	2c0c      	cmp	r4, #12
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8042348:	f889 5052 	strb.w	r5, [r9, #82]	; 0x52
            SX1276.Settings.LoRa.TxTimeout = timeout;
 804234c:	f8c9 3058 	str.w	r3, [r9, #88]	; 0x58
            if( datarate > 12 )
 8042350:	d86c      	bhi.n	804242c <SX1276SetTxConfig+0x234>
            else if( datarate < 6 )
 8042352:	2c05      	cmp	r4, #5
 8042354:	d95d      	bls.n	8042412 <SX1276SetTxConfig+0x21a>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8042356:	f1bb 0f07 	cmp.w	fp, #7
 804235a:	d153      	bne.n	8042404 <SX1276SetTxConfig+0x20c>
 804235c:	f1a4 030b 	sub.w	r3, r4, #11
 8042360:	2b01      	cmp	r3, #1
 8042362:	d854      	bhi.n	804240e <SX1276SetTxConfig+0x216>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8042364:	2301      	movs	r3, #1
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8042366:	f889 304c 	strb.w	r3, [r9, #76]	; 0x4c
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 804236a:	9b01      	ldr	r3, [sp, #4]
 804236c:	b16b      	cbz	r3, 804238a <SX1276SetTxConfig+0x192>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 804236e:	2044      	movs	r0, #68	; 0x44
 8042370:	f7ff f9a0 	bl	80416b4 <SX1276Read>
 8042374:	f060 017f 	orn	r1, r0, #127	; 0x7f
 8042378:	b2c9      	uxtb	r1, r1
 804237a:	2044      	movs	r0, #68	; 0x44
 804237c:	f7ff f94a 	bl	8041614 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8042380:	f899 1054 	ldrb.w	r1, [r9, #84]	; 0x54
 8042384:	2024      	movs	r0, #36	; 0x24
 8042386:	f7ff f945 	bl	8041614 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 804238a:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 804238c:	ea46 064a 	orr.w	r6, r6, sl, lsl #1
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8042390:	f7ff f990 	bl	80416b4 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8042394:	ea46 110b 	orr.w	r1, r6, fp, lsl #4
            SX1276Write( REG_LR_MODEMCONFIG1,
 8042398:	b2c9      	uxtb	r1, r1
 804239a:	201d      	movs	r0, #29
 804239c:	f7ff f93a 	bl	8041614 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 80423a0:	201e      	movs	r0, #30
 80423a2:	f7ff f987 	bl	80416b4 <SX1276Read>
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 80423a6:	00ad      	lsls	r5, r5, #2
                           RFLR_MODEMCONFIG2_SF_MASK &
 80423a8:	f000 000b 	and.w	r0, r0, #11
            SX1276Write( REG_LR_MODEMCONFIG2,
 80423ac:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
 80423b0:	4305      	orrs	r5, r0
 80423b2:	b2e9      	uxtb	r1, r5
 80423b4:	201e      	movs	r0, #30
 80423b6:	f7ff f92d 	bl	8041614 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 80423ba:	2026      	movs	r0, #38	; 0x26
 80423bc:	f7ff f97a 	bl	80416b4 <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 80423c0:	f899 104c 	ldrb.w	r1, [r9, #76]	; 0x4c
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 80423c4:	f020 0008 	bic.w	r0, r0, #8
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 80423c8:	ea40 01c1 	orr.w	r1, r0, r1, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
 80423cc:	b2c9      	uxtb	r1, r1
 80423ce:	2026      	movs	r0, #38	; 0x26
 80423d0:	f7ff f920 	bl	8041614 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 80423d4:	0a39      	lsrs	r1, r7, #8
 80423d6:	2020      	movs	r0, #32
 80423d8:	f7ff f91c 	bl	8041614 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 80423dc:	2021      	movs	r0, #33	; 0x21
 80423de:	b2f9      	uxtb	r1, r7
 80423e0:	f7ff f918 	bl	8041614 <SX1276Write>
            if( datarate == 6 )
 80423e4:	2c06      	cmp	r4, #6
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80423e6:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( datarate == 6 )
 80423ea:	d114      	bne.n	8042416 <SX1276SetTxConfig+0x21e>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80423ec:	f7ff f962 	bl	80416b4 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80423f0:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80423f4:	f041 0105 	orr.w	r1, r1, #5
 80423f8:	2031      	movs	r0, #49	; 0x31
 80423fa:	f7ff f90b 	bl	8041614 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80423fe:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8042400:	2037      	movs	r0, #55	; 0x37
 8042402:	e780      	b.n	8042306 <SX1276SetTxConfig+0x10e>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8042404:	f1bb 0f08 	cmp.w	fp, #8
 8042408:	d101      	bne.n	804240e <SX1276SetTxConfig+0x216>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 804240a:	2c0c      	cmp	r4, #12
 804240c:	d0aa      	beq.n	8042364 <SX1276SetTxConfig+0x16c>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 804240e:	2300      	movs	r3, #0
 8042410:	e7a9      	b.n	8042366 <SX1276SetTxConfig+0x16e>
                datarate = 6;
 8042412:	2406      	movs	r4, #6
 8042414:	e7fb      	b.n	804240e <SX1276SetTxConfig+0x216>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8042416:	f7ff f94d 	bl	80416b4 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 804241a:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 804241e:	f041 0103 	orr.w	r1, r1, #3
 8042422:	2031      	movs	r0, #49	; 0x31
 8042424:	f7ff f8f6 	bl	8041614 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8042428:	210a      	movs	r1, #10
 804242a:	e7e9      	b.n	8042400 <SX1276SetTxConfig+0x208>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 804242c:	f1b8 0f02 	cmp.w	r8, #2
 8042430:	f04f 040c 	mov.w	r4, #12
 8042434:	d0eb      	beq.n	804240e <SX1276SetTxConfig+0x216>
 8042436:	e795      	b.n	8042364 <SX1276SetTxConfig+0x16c>
 8042438:	00000000 	.word	0x00000000
 804243c:	404e8480 	.word	0x404e8480
 8042440:	00000000 	.word	0x00000000
 8042444:	417e8480 	.word	0x417e8480
 8042448:	20009c34 	.word	0x20009c34
 804244c:	2000b5f4 	.word	0x2000b5f4

08042450 <SX1276SetTxContinuousWave>:
{
 8042450:	b530      	push	{r4, r5, lr}
    uint32_t timeout = ( uint32_t )( time * 1000 );
 8042452:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
 8042456:	b08b      	sub	sp, #44	; 0x2c
    uint32_t timeout = ( uint32_t )( time * 1000 );
 8042458:	4354      	muls	r4, r2
{
 804245a:	460d      	mov	r5, r1
    SX1276SetChannel( freq );
 804245c:	f7ff f8e6 	bl	804162c <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 8042460:	2300      	movs	r3, #0
 8042462:	2205      	movs	r2, #5
 8042464:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8042468:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 804246c:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8042470:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8042474:	9303      	str	r3, [sp, #12]
 8042476:	4618      	mov	r0, r3
 8042478:	4629      	mov	r1, r5
 804247a:	9200      	str	r2, [sp, #0]
 804247c:	9408      	str	r4, [sp, #32]
 804247e:	461a      	mov	r2, r3
 8042480:	f7ff feba 	bl	80421f8 <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 8042484:	2031      	movs	r0, #49	; 0x31
 8042486:	f7ff f915 	bl	80416b4 <SX1276Read>
 804248a:	f000 01bf 	and.w	r1, r0, #191	; 0xbf
 804248e:	2031      	movs	r0, #49	; 0x31
 8042490:	f7ff f8c0 	bl	8041614 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8042494:	4d0c      	ldr	r5, [pc, #48]	; (80424c8 <SX1276SetTxContinuousWave+0x78>)
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 8042496:	21f0      	movs	r1, #240	; 0xf0
 8042498:	2040      	movs	r0, #64	; 0x40
 804249a:	f7ff f8bb 	bl	8041614 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 804249e:	21a0      	movs	r1, #160	; 0xa0
 80424a0:	2041      	movs	r0, #65	; 0x41
 80424a2:	f7ff f8b7 	bl	8041614 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 80424a6:	4621      	mov	r1, r4
 80424a8:	4628      	mov	r0, r5
 80424aa:	f009 f9cd 	bl	804b848 <TimerSetValue>
    SX1276.Settings.State = RF_TX_RUNNING;
 80424ae:	4b07      	ldr	r3, [pc, #28]	; (80424cc <SX1276SetTxContinuousWave+0x7c>)
 80424b0:	2202      	movs	r2, #2
    TimerStart( &TxTimeoutTimer );
 80424b2:	4628      	mov	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 80424b4:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 80424b6:	f009 f92d 	bl	804b714 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 80424ba:	2003      	movs	r0, #3
}
 80424bc:	b00b      	add	sp, #44	; 0x2c
 80424be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 80424c2:	f7ff baa5 	b.w	8041a10 <SX1276SetOpMode>
 80424c6:	bf00      	nop
 80424c8:	2000b5c4 	.word	0x2000b5c4
 80424cc:	2000b5f4 	.word	0x2000b5f4

080424d0 <SX1276OnDio2Irq>:
{
 80424d0:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 80424d2:	4c2b      	ldr	r4, [pc, #172]	; (8042580 <SX1276OnDio2Irq+0xb0>)
 80424d4:	7921      	ldrb	r1, [r4, #4]
 80424d6:	2901      	cmp	r1, #1
 80424d8:	d002      	beq.n	80424e0 <SX1276OnDio2Irq+0x10>
 80424da:	2902      	cmp	r1, #2
 80424dc:	d048      	beq.n	8042570 <SX1276OnDio2Irq+0xa0>
}
 80424de:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 80424e0:	7963      	ldrb	r3, [r4, #5]
 80424e2:	b1d3      	cbz	r3, 804251a <SX1276OnDio2Irq+0x4a>
 80424e4:	2b01      	cmp	r3, #1
 80424e6:	d1fa      	bne.n	80424de <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 80424e8:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 80424ec:	2b00      	cmp	r3, #0
 80424ee:	d0f6      	beq.n	80424de <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 80424f0:	2102      	movs	r1, #2
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 80424f2:	2012      	movs	r0, #18
 80424f4:	f7ff f88e 	bl	8041614 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 80424f8:	4b22      	ldr	r3, [pc, #136]	; (8042584 <SX1276OnDio2Irq+0xb4>)
 80424fa:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80424fe:	2b00      	cmp	r3, #0
 8042500:	d0ed      	beq.n	80424de <SX1276OnDio2Irq+0xe>
 8042502:	695c      	ldr	r4, [r3, #20]
 8042504:	2c00      	cmp	r4, #0
 8042506:	d0ea      	beq.n	80424de <SX1276OnDio2Irq+0xe>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8042508:	201c      	movs	r0, #28
 804250a:	f7ff f8d3 	bl	80416b4 <SX1276Read>
 804250e:	4623      	mov	r3, r4
 8042510:	f000 003f 	and.w	r0, r0, #63	; 0x3f
}
 8042514:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8042518:	4718      	bx	r3
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 804251a:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
 804251e:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 8042520:	2d01      	cmp	r5, #1
 8042522:	d1dc      	bne.n	80424de <SX1276OnDio2Irq+0xe>
                    TimerStop( &RxTimeoutSyncWord );
 8042524:	4818      	ldr	r0, [pc, #96]	; (8042588 <SX1276OnDio2Irq+0xb8>)
 8042526:	f009 f967 	bl	804b7f8 <TimerStop>
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 804252a:	2011      	movs	r0, #17
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 804252c:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8042530:	f7ff f8c0 	bl	80416b4 <SX1276Read>
 8042534:	0840      	lsrs	r0, r0, #1
 8042536:	4240      	negs	r0, r0
 8042538:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 804253c:	201b      	movs	r0, #27
 804253e:	f7ff f8b9 	bl	80416b4 <SX1276Read>
 8042542:	4605      	mov	r5, r0
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 8042544:	201c      	movs	r0, #28
 8042546:	f7ff f8b5 	bl	80416b4 <SX1276Read>
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 804254a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 804254e:	b2c2      	uxtb	r2, r0
 8042550:	f643 5309 	movw	r3, #15625	; 0x3d09
 8042554:	435a      	muls	r2, r3
 8042556:	0a00      	lsrs	r0, r0, #8
 8042558:	3280      	adds	r2, #128	; 0x80
 804255a:	4343      	muls	r3, r0
 804255c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 8042560:	200c      	movs	r0, #12
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 8042562:	6363      	str	r3, [r4, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 8042564:	f7ff f8a6 	bl	80416b4 <SX1276Read>
 8042568:	0940      	lsrs	r0, r0, #5
 804256a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
 804256e:	e7b6      	b.n	80424de <SX1276OnDio2Irq+0xe>
            switch( SX1276.Settings.Modem )
 8042570:	7963      	ldrb	r3, [r4, #5]
 8042572:	2b01      	cmp	r3, #1
 8042574:	d1b3      	bne.n	80424de <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8042576:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 804257a:	2b00      	cmp	r3, #0
 804257c:	d0af      	beq.n	80424de <SX1276OnDio2Irq+0xe>
 804257e:	e7b8      	b.n	80424f2 <SX1276OnDio2Irq+0x22>
 8042580:	2000b5f4 	.word	0x2000b5f4
 8042584:	20009c34 	.word	0x20009c34
 8042588:	2000b5dc 	.word	0x2000b5dc

0804258c <SX1276OnDio3Irq>:
    switch( SX1276.Settings.Modem )
 804258c:	4b12      	ldr	r3, [pc, #72]	; (80425d8 <SX1276OnDio3Irq+0x4c>)
{
 804258e:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 8042590:	795d      	ldrb	r5, [r3, #5]
 8042592:	2d01      	cmp	r5, #1
 8042594:	d11e      	bne.n	80425d4 <SX1276OnDio3Irq+0x48>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8042596:	2012      	movs	r0, #18
 8042598:	f7ff f88c 	bl	80416b4 <SX1276Read>
 804259c:	f010 0601 	ands.w	r6, r0, #1
 80425a0:	4c0e      	ldr	r4, [pc, #56]	; (80425dc <SX1276OnDio3Irq+0x50>)
 80425a2:	d00c      	beq.n	80425be <SX1276OnDio3Irq+0x32>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 80425a4:	2105      	movs	r1, #5
 80425a6:	2012      	movs	r0, #18
 80425a8:	f7ff f834 	bl	8041614 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80425ac:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 80425b0:	b183      	cbz	r3, 80425d4 <SX1276OnDio3Irq+0x48>
 80425b2:	699b      	ldr	r3, [r3, #24]
 80425b4:	b173      	cbz	r3, 80425d4 <SX1276OnDio3Irq+0x48>
                RadioEvents->CadDone( true );
 80425b6:	4628      	mov	r0, r5
}
 80425b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                RadioEvents->CadDone( false );
 80425bc:	4718      	bx	r3
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 80425be:	2104      	movs	r1, #4
 80425c0:	2012      	movs	r0, #18
 80425c2:	f7ff f827 	bl	8041614 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80425c6:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 80425ca:	b11b      	cbz	r3, 80425d4 <SX1276OnDio3Irq+0x48>
 80425cc:	699b      	ldr	r3, [r3, #24]
 80425ce:	b10b      	cbz	r3, 80425d4 <SX1276OnDio3Irq+0x48>
                RadioEvents->CadDone( false );
 80425d0:	4630      	mov	r0, r6
 80425d2:	e7f1      	b.n	80425b8 <SX1276OnDio3Irq+0x2c>
}
 80425d4:	bd70      	pop	{r4, r5, r6, pc}
 80425d6:	bf00      	nop
 80425d8:	2000b5f4 	.word	0x2000b5f4
 80425dc:	20009c34 	.word	0x20009c34

080425e0 <SX1276WriteFifo>:
    SX1276WriteBuffer( 0, buffer, size );
 80425e0:	460a      	mov	r2, r1
 80425e2:	4601      	mov	r1, r0
 80425e4:	2000      	movs	r0, #0
 80425e6:	f7fe bff5 	b.w	80415d4 <SX1276WriteBuffer>
	...

080425ec <SX1276Send>:
{
 80425ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch( SX1276.Settings.Modem )
 80425ee:	4c39      	ldr	r4, [pc, #228]	; (80426d4 <SX1276Send+0xe8>)
{
 80425f0:	f88d 1007 	strb.w	r1, [sp, #7]
    switch( SX1276.Settings.Modem )
 80425f4:	7963      	ldrb	r3, [r4, #5]
{
 80425f6:	4605      	mov	r5, r0
    switch( SX1276.Settings.Modem )
 80425f8:	b11b      	cbz	r3, 8042602 <SX1276Send+0x16>
 80425fa:	2b01      	cmp	r3, #1
 80425fc:	d02f      	beq.n	804265e <SX1276Send+0x72>
    uint32_t txTimeout = 0;
 80425fe:	2000      	movs	r0, #0
 8042600:	e01d      	b.n	804263e <SX1276Send+0x52>
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8042602:	87a3      	strh	r3, [r4, #60]	; 0x3c
            if( SX1276.Settings.Fsk.FixLen == false )
 8042604:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
            SX1276.Settings.FskPacketHandler.Size = size;
 8042608:	f89d 1007 	ldrb.w	r1, [sp, #7]
 804260c:	8761      	strh	r1, [r4, #58]	; 0x3a
            if( SX1276.Settings.Fsk.FixLen == false )
 804260e:	b9d3      	cbnz	r3, 8042646 <SX1276Send+0x5a>
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 8042610:	2101      	movs	r1, #1
 8042612:	f10d 0007 	add.w	r0, sp, #7
 8042616:	f7ff ffe3 	bl	80425e0 <SX1276WriteFifo>
            if( ( size > 0 ) && ( size <= 64 ) )
 804261a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 804261e:	1e53      	subs	r3, r2, #1
 8042620:	2b3f      	cmp	r3, #63	; 0x3f
 8042622:	d814      	bhi.n	804264e <SX1276Send+0x62>
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8042624:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 8042628:	4628      	mov	r0, r5
 804262a:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
 804262e:	f7ff ffd7 	bl	80425e0 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8042632:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8042634:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 8042638:	6aa0      	ldr	r0, [r4, #40]	; 0x28
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 804263a:	4413      	add	r3, r2
 804263c:	87a3      	strh	r3, [r4, #60]	; 0x3c
    SX1276SetTx( txTimeout );
 804263e:	f7ff fb21 	bl	8041c84 <SX1276SetTx>
}
 8042642:	b003      	add	sp, #12
 8042644:	bd30      	pop	{r4, r5, pc}
                SX1276Write( REG_PAYLOADLENGTH, size );
 8042646:	2032      	movs	r0, #50	; 0x32
 8042648:	f7fe ffe4 	bl	8041614 <SX1276Write>
 804264c:	e7e5      	b.n	804261a <SX1276Send+0x2e>
                memcpy1( RxTxBuffer, buffer, size );
 804264e:	4629      	mov	r1, r5
 8042650:	4821      	ldr	r0, [pc, #132]	; (80426d8 <SX1276Send+0xec>)
 8042652:	f009 f9ba 	bl	804b9ca <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8042656:	2320      	movs	r3, #32
 8042658:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 804265c:	e7e4      	b.n	8042628 <SX1276Send+0x3c>
            if( SX1276.Settings.LoRa.IqInverted == true )
 804265e:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8042662:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 8042664:	b35b      	cbz	r3, 80426be <SX1276Send+0xd2>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8042666:	f7ff f825 	bl	80416b4 <SX1276Read>
 804266a:	f000 01be 	and.w	r1, r0, #190	; 0xbe
 804266e:	2033      	movs	r0, #51	; 0x33
 8042670:	f7fe ffd0 	bl	8041614 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8042674:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8042676:	203b      	movs	r0, #59	; 0x3b
 8042678:	f7fe ffcc 	bl	8041614 <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 804267c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8042680:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8042684:	2022      	movs	r0, #34	; 0x22
 8042686:	f7fe ffc5 	bl	8041614 <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 804268a:	2100      	movs	r1, #0
 804268c:	200e      	movs	r0, #14
 804268e:	f7fe ffc1 	bl	8041614 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8042692:	2100      	movs	r1, #0
 8042694:	200d      	movs	r0, #13
 8042696:	f7fe ffbd 	bl	8041614 <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 804269a:	2001      	movs	r0, #1
 804269c:	f7ff f80a 	bl	80416b4 <SX1276Read>
 80426a0:	f030 03f8 	bics.w	r3, r0, #248	; 0xf8
 80426a4:	d104      	bne.n	80426b0 <SX1276Send+0xc4>
                SX1276SetStby( );
 80426a6:	f7ff f9d5 	bl	8041a54 <SX1276SetStby>
                DelayMs( 1 );
 80426aa:	2001      	movs	r0, #1
 80426ac:	f00a fa62 	bl	804cb74 <HAL_Delay>
            SX1276WriteFifo( buffer, size );
 80426b0:	4628      	mov	r0, r5
 80426b2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80426b6:	f7ff ff93 	bl	80425e0 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 80426ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
        break;
 80426bc:	e7bf      	b.n	804263e <SX1276Send+0x52>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 80426be:	f7fe fff9 	bl	80416b4 <SX1276Read>
 80426c2:	f000 01be 	and.w	r1, r0, #190	; 0xbe
 80426c6:	f041 0101 	orr.w	r1, r1, #1
 80426ca:	2033      	movs	r0, #51	; 0x33
 80426cc:	f7fe ffa2 	bl	8041614 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80426d0:	211d      	movs	r1, #29
 80426d2:	e7d0      	b.n	8042676 <SX1276Send+0x8a>
 80426d4:	2000b5f4 	.word	0x2000b5f4
 80426d8:	20009c38 	.word	0x20009c38

080426dc <SX1276ReadFifo>:
    SX1276ReadBuffer( 0, buffer, size );
 80426dc:	460a      	mov	r2, r1
 80426de:	4601      	mov	r1, r0
 80426e0:	2000      	movs	r0, #0
 80426e2:	f7fe bfc7 	b.w	8041674 <SX1276ReadBuffer>
	...

080426e8 <SX1276OnDio0Irq>:
{
 80426e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 80426ea:	4e89      	ldr	r6, [pc, #548]	; (8042910 <SX1276OnDio0Irq+0x228>)
    volatile uint8_t irqFlags = 0;
 80426ec:	2300      	movs	r3, #0
 80426ee:	f88d 3007 	strb.w	r3, [sp, #7]
    switch( SX1276.Settings.State )
 80426f2:	7933      	ldrb	r3, [r6, #4]
 80426f4:	2b01      	cmp	r3, #1
 80426f6:	4634      	mov	r4, r6
 80426f8:	d004      	beq.n	8042704 <SX1276OnDio0Irq+0x1c>
 80426fa:	2b02      	cmp	r3, #2
 80426fc:	f000 80f4 	beq.w	80428e8 <SX1276OnDio0Irq+0x200>
}
 8042700:	b002      	add	sp, #8
 8042702:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 8042704:	7973      	ldrb	r3, [r6, #5]
 8042706:	b33b      	cbz	r3, 8042758 <SX1276OnDio0Irq+0x70>
 8042708:	2b01      	cmp	r3, #1
 804270a:	d1f9      	bne.n	8042700 <SX1276OnDio0Irq+0x18>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 804270c:	2140      	movs	r1, #64	; 0x40
 804270e:	2012      	movs	r0, #18
 8042710:	f7fe ff80 	bl	8041614 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8042714:	2012      	movs	r0, #18
 8042716:	f7fe ffcd 	bl	80416b4 <SX1276Read>
 804271a:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 804271e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8042722:	4d7c      	ldr	r5, [pc, #496]	; (8042914 <SX1276OnDio0Irq+0x22c>)
 8042724:	f013 0f20 	tst.w	r3, #32
 8042728:	f000 808d 	beq.w	8042846 <SX1276OnDio0Irq+0x15e>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 804272c:	2120      	movs	r1, #32
 804272e:	2012      	movs	r0, #18
 8042730:	f7fe ff70 	bl	8041614 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 8042734:	f896 3056 	ldrb.w	r3, [r6, #86]	; 0x56
 8042738:	b903      	cbnz	r3, 804273c <SX1276OnDio0Irq+0x54>
                            SX1276.Settings.State = RF_IDLE;
 804273a:	7133      	strb	r3, [r6, #4]
                        TimerStop( &RxTimeoutTimer );
 804273c:	4876      	ldr	r0, [pc, #472]	; (8042918 <SX1276OnDio0Irq+0x230>)
 804273e:	f009 f85b 	bl	804b7f8 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8042742:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
 8042746:	2b00      	cmp	r3, #0
 8042748:	d0da      	beq.n	8042700 <SX1276OnDio0Irq+0x18>
 804274a:	691b      	ldr	r3, [r3, #16]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 804274c:	2b00      	cmp	r3, #0
 804274e:	d0d7      	beq.n	8042700 <SX1276OnDio0Irq+0x18>
}
 8042750:	b002      	add	sp, #8
 8042752:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    RadioEvents->TxDone( );
 8042756:	4718      	bx	r3
                if( SX1276.Settings.Fsk.CrcOn == true )
 8042758:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
 804275c:	4d6d      	ldr	r5, [pc, #436]	; (8042914 <SX1276OnDio0Irq+0x22c>)
 804275e:	b393      	cbz	r3, 80427c6 <SX1276OnDio0Irq+0xde>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 8042760:	203f      	movs	r0, #63	; 0x3f
 8042762:	f7fe ffa7 	bl	80416b4 <SX1276Read>
 8042766:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 804276a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 804276e:	079b      	lsls	r3, r3, #30
 8042770:	d429      	bmi.n	80427c6 <SX1276OnDio0Irq+0xde>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8042772:	210b      	movs	r1, #11
 8042774:	203e      	movs	r0, #62	; 0x3e
 8042776:	f7fe ff4d 	bl	8041614 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 804277a:	2110      	movs	r1, #16
 804277c:	203f      	movs	r0, #63	; 0x3f
 804277e:	f7fe ff49 	bl	8041614 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 8042782:	4865      	ldr	r0, [pc, #404]	; (8042918 <SX1276OnDio0Irq+0x230>)
 8042784:	f009 f838 	bl	804b7f8 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 8042788:	f896 6026 	ldrb.w	r6, [r6, #38]	; 0x26
 804278c:	b976      	cbnz	r6, 80427ac <SX1276OnDio0Irq+0xc4>
                            TimerStop( &RxTimeoutSyncWord );
 804278e:	4863      	ldr	r0, [pc, #396]	; (804291c <SX1276OnDio0Irq+0x234>)
 8042790:	f009 f832 	bl	804b7f8 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 8042794:	7126      	strb	r6, [r4, #4]
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8042796:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
 804279a:	b113      	cbz	r3, 80427a2 <SX1276OnDio0Irq+0xba>
 804279c:	691b      	ldr	r3, [r3, #16]
 804279e:	b103      	cbz	r3, 80427a2 <SX1276OnDio0Irq+0xba>
                            RadioEvents->RxError( );
 80427a0:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80427a2:	2300      	movs	r3, #0
 80427a4:	8623      	strh	r3, [r4, #48]	; 0x30
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80427a6:	87a3      	strh	r3, [r4, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 80427a8:	8763      	strh	r3, [r4, #58]	; 0x3a
                        break;
 80427aa:	e7a9      	b.n	8042700 <SX1276OnDio0Irq+0x18>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80427ac:	200d      	movs	r0, #13
 80427ae:	f7fe ff81 	bl	80416b4 <SX1276Read>
 80427b2:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 80427b6:	b2c9      	uxtb	r1, r1
 80427b8:	200d      	movs	r0, #13
 80427ba:	f7fe ff2b 	bl	8041614 <SX1276Write>
                            TimerStart( &RxTimeoutSyncWord );
 80427be:	4857      	ldr	r0, [pc, #348]	; (804291c <SX1276OnDio0Irq+0x234>)
 80427c0:	f008 ffa8 	bl	804b714 <TimerStart>
 80427c4:	e7e7      	b.n	8042796 <SX1276OnDio0Irq+0xae>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 80427c6:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 80427c8:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 80427ca:	4e55      	ldr	r6, [pc, #340]	; (8042920 <SX1276OnDio0Irq+0x238>)
 80427cc:	b951      	cbnz	r1, 80427e4 <SX1276OnDio0Irq+0xfc>
 80427ce:	b948      	cbnz	r0, 80427e4 <SX1276OnDio0Irq+0xfc>
                    if( SX1276.Settings.Fsk.FixLen == false )
 80427d0:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80427d4:	bb2b      	cbnz	r3, 8042822 <SX1276OnDio0Irq+0x13a>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 80427d6:	2101      	movs	r1, #1
 80427d8:	4852      	ldr	r0, [pc, #328]	; (8042924 <SX1276OnDio0Irq+0x23c>)
 80427da:	f7ff ff7f 	bl	80426dc <SX1276ReadFifo>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80427de:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 80427e0:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80427e4:	1a09      	subs	r1, r1, r0
 80427e6:	b2c9      	uxtb	r1, r1
 80427e8:	4430      	add	r0, r6
 80427ea:	f7ff ff77 	bl	80426dc <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80427ee:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
                TimerStop( &RxTimeoutTimer );
 80427f0:	4849      	ldr	r0, [pc, #292]	; (8042918 <SX1276OnDio0Irq+0x230>)
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80427f2:	87a3      	strh	r3, [r4, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 80427f4:	f009 f800 	bl	804b7f8 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 80427f8:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80427fc:	b9b3      	cbnz	r3, 804282c <SX1276OnDio0Irq+0x144>
                    TimerStop( &RxTimeoutSyncWord );
 80427fe:	4847      	ldr	r0, [pc, #284]	; (804291c <SX1276OnDio0Irq+0x234>)
                    SX1276.Settings.State = RF_IDLE;
 8042800:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutSyncWord );
 8042802:	f008 fff9 	bl	804b7f8 <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8042806:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
 804280a:	2b00      	cmp	r3, #0
 804280c:	d0c9      	beq.n	80427a2 <SX1276OnDio0Irq+0xba>
 804280e:	689d      	ldr	r5, [r3, #8]
 8042810:	2d00      	cmp	r5, #0
 8042812:	d0c6      	beq.n	80427a2 <SX1276OnDio0Irq+0xba>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 8042814:	2300      	movs	r3, #0
 8042816:	f994 2032 	ldrsb.w	r2, [r4, #50]	; 0x32
 804281a:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 804281c:	4840      	ldr	r0, [pc, #256]	; (8042920 <SX1276OnDio0Irq+0x238>)
 804281e:	47a8      	blx	r5
 8042820:	e7bf      	b.n	80427a2 <SX1276OnDio0Irq+0xba>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8042822:	2032      	movs	r0, #50	; 0x32
 8042824:	f7fe ff46 	bl	80416b4 <SX1276Read>
 8042828:	8760      	strh	r0, [r4, #58]	; 0x3a
 804282a:	e7d8      	b.n	80427de <SX1276OnDio0Irq+0xf6>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 804282c:	200d      	movs	r0, #13
 804282e:	f7fe ff41 	bl	80416b4 <SX1276Read>
 8042832:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8042836:	b2c9      	uxtb	r1, r1
 8042838:	200d      	movs	r0, #13
 804283a:	f7fe feeb 	bl	8041614 <SX1276Write>
                    TimerStart( &RxTimeoutSyncWord );
 804283e:	4837      	ldr	r0, [pc, #220]	; (804291c <SX1276OnDio0Irq+0x234>)
 8042840:	f008 ff68 	bl	804b714 <TimerStart>
 8042844:	e7df      	b.n	8042806 <SX1276OnDio0Irq+0x11e>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 8042846:	2019      	movs	r0, #25
 8042848:	f7fe ff34 	bl	80416b4 <SX1276Read>
 804284c:	b240      	sxtb	r0, r0
 804284e:	3002      	adds	r0, #2
 8042850:	1080      	asrs	r0, r0, #2
 8042852:	f886 0060 	strb.w	r0, [r6, #96]	; 0x60
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 8042856:	201a      	movs	r0, #26
 8042858:	f7fe ff2c 	bl	80416b4 <SX1276Read>
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 804285c:	f996 3060 	ldrsb.w	r3, [r6, #96]	; 0x60
 8042860:	4931      	ldr	r1, [pc, #196]	; (8042928 <SX1276OnDio0Irq+0x240>)
 8042862:	f340 120b 	sbfx	r2, r0, #4, #12
 8042866:	2b00      	cmp	r3, #0
 8042868:	b292      	uxth	r2, r2
 804286a:	b280      	uxth	r0, r0
 804286c:	da36      	bge.n	80428dc <SX1276OnDio0Irq+0x1f4>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 804286e:	68b6      	ldr	r6, [r6, #8]
 8042870:	b29b      	uxth	r3, r3
 8042872:	428e      	cmp	r6, r1
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8042874:	bf8c      	ite	hi
 8042876:	3b9d      	subhi	r3, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8042878:	3ba4      	subls	r3, #164	; 0xa4
 804287a:	4418      	add	r0, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 804287c:	4410      	add	r0, r2
 804287e:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 8042882:	2013      	movs	r0, #19
 8042884:	f7fe ff16 	bl	80416b4 <SX1276Read>
 8042888:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 804288c:	2010      	movs	r0, #16
 804288e:	f7fe ff11 	bl	80416b4 <SX1276Read>
 8042892:	4601      	mov	r1, r0
 8042894:	200d      	movs	r0, #13
 8042896:	f7fe febd 	bl	8041614 <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 804289a:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
 804289e:	4820      	ldr	r0, [pc, #128]	; (8042920 <SX1276OnDio0Irq+0x238>)
 80428a0:	f7ff ff1c 	bl	80426dc <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 80428a4:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
 80428a8:	b903      	cbnz	r3, 80428ac <SX1276OnDio0Irq+0x1c4>
                        SX1276.Settings.State = RF_IDLE;
 80428aa:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutTimer );
 80428ac:	481a      	ldr	r0, [pc, #104]	; (8042918 <SX1276OnDio0Irq+0x230>)
 80428ae:	f008 ffa3 	bl	804b7f8 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80428b2:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
 80428b6:	2b00      	cmp	r3, #0
 80428b8:	f43f af22 	beq.w	8042700 <SX1276OnDio0Irq+0x18>
 80428bc:	689d      	ldr	r5, [r3, #8]
 80428be:	2d00      	cmp	r5, #0
 80428c0:	f43f af1e 	beq.w	8042700 <SX1276OnDio0Irq+0x18>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 80428c4:	f994 3060 	ldrsb.w	r3, [r4, #96]	; 0x60
 80428c8:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	; 0x62
 80428cc:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
 80428d0:	4813      	ldr	r0, [pc, #76]	; (8042920 <SX1276OnDio0Irq+0x238>)
 80428d2:	46ac      	mov	ip, r5
}
 80428d4:	b002      	add	sp, #8
 80428d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 80428da:	4760      	bx	ip
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80428dc:	68b3      	ldr	r3, [r6, #8]
 80428de:	428b      	cmp	r3, r1
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 80428e0:	bf8c      	ite	hi
 80428e2:	389d      	subhi	r0, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 80428e4:	38a4      	subls	r0, #164	; 0xa4
 80428e6:	e7c9      	b.n	804287c <SX1276OnDio0Irq+0x194>
            TimerStop( &TxTimeoutTimer );
 80428e8:	4810      	ldr	r0, [pc, #64]	; (804292c <SX1276OnDio0Irq+0x244>)
 80428ea:	f008 ff85 	bl	804b7f8 <TimerStop>
            switch( SX1276.Settings.Modem )
 80428ee:	7973      	ldrb	r3, [r6, #5]
 80428f0:	2b01      	cmp	r3, #1
 80428f2:	d103      	bne.n	80428fc <SX1276OnDio0Irq+0x214>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 80428f4:	2108      	movs	r1, #8
 80428f6:	2012      	movs	r0, #18
 80428f8:	f7fe fe8c 	bl	8041614 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 80428fc:	2300      	movs	r3, #0
 80428fe:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8042900:	4b04      	ldr	r3, [pc, #16]	; (8042914 <SX1276OnDio0Irq+0x22c>)
 8042902:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8042906:	2b00      	cmp	r3, #0
 8042908:	f43f aefa 	beq.w	8042700 <SX1276OnDio0Irq+0x18>
 804290c:	681b      	ldr	r3, [r3, #0]
 804290e:	e71d      	b.n	804274c <SX1276OnDio0Irq+0x64>
 8042910:	2000b5f4 	.word	0x2000b5f4
 8042914:	20009c34 	.word	0x20009c34
 8042918:	2000b65c 	.word	0x2000b65c
 804291c:	2000b5dc 	.word	0x2000b5dc
 8042920:	20009c38 	.word	0x20009c38
 8042924:	2000b62e 	.word	0x2000b62e
 8042928:	1f4add40 	.word	0x1f4add40
 804292c:	2000b5c4 	.word	0x2000b5c4

08042930 <SX1276OnDio1Irq>:
{
 8042930:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8042932:	4c33      	ldr	r4, [pc, #204]	; (8042a00 <SX1276OnDio1Irq+0xd0>)
 8042934:	7926      	ldrb	r6, [r4, #4]
 8042936:	2e01      	cmp	r6, #1
 8042938:	4625      	mov	r5, r4
 804293a:	d002      	beq.n	8042942 <SX1276OnDio1Irq+0x12>
 804293c:	2e02      	cmp	r6, #2
 804293e:	d045      	beq.n	80429cc <SX1276OnDio1Irq+0x9c>
}
 8042940:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 8042942:	7963      	ldrb	r3, [r4, #5]
 8042944:	b1ab      	cbz	r3, 8042972 <SX1276OnDio1Irq+0x42>
 8042946:	2b01      	cmp	r3, #1
 8042948:	d1fa      	bne.n	8042940 <SX1276OnDio1Irq+0x10>
                TimerStop( &RxTimeoutTimer );
 804294a:	482e      	ldr	r0, [pc, #184]	; (8042a04 <SX1276OnDio1Irq+0xd4>)
 804294c:	f008 ff54 	bl	804b7f8 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8042950:	2180      	movs	r1, #128	; 0x80
 8042952:	2012      	movs	r0, #18
 8042954:	f7fe fe5e 	bl	8041614 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8042958:	2300      	movs	r3, #0
 804295a:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 804295c:	4b2a      	ldr	r3, [pc, #168]	; (8042a08 <SX1276OnDio1Irq+0xd8>)
 804295e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8042962:	2b00      	cmp	r3, #0
 8042964:	d0ec      	beq.n	8042940 <SX1276OnDio1Irq+0x10>
 8042966:	68db      	ldr	r3, [r3, #12]
 8042968:	2b00      	cmp	r3, #0
 804296a:	d0e9      	beq.n	8042940 <SX1276OnDio1Irq+0x10>
}
 804296c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    RadioEvents->RxTimeout( );
 8042970:	4718      	bx	r3
                TimerStop( &RxTimeoutSyncWord );
 8042972:	4826      	ldr	r0, [pc, #152]	; (8042a0c <SX1276OnDio1Irq+0xdc>)
 8042974:	f008 ff40 	bl	804b7f8 <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8042978:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 804297a:	b94b      	cbnz	r3, 8042990 <SX1276OnDio1Irq+0x60>
 804297c:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 804297e:	b93b      	cbnz	r3, 8042990 <SX1276OnDio1Irq+0x60>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8042980:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8042984:	b9c3      	cbnz	r3, 80429b8 <SX1276OnDio1Irq+0x88>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8042986:	4631      	mov	r1, r6
 8042988:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 804298c:	f7ff fea6 	bl	80426dc <SX1276ReadFifo>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8042990:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
 8042992:	8f69      	ldrh	r1, [r5, #58]	; 0x3a
 8042994:	f895 303e 	ldrb.w	r3, [r5, #62]	; 0x3e
 8042998:	481d      	ldr	r0, [pc, #116]	; (8042a10 <SX1276OnDio1Irq+0xe0>)
 804299a:	1a89      	subs	r1, r1, r2
 804299c:	4299      	cmp	r1, r3
 804299e:	4410      	add	r0, r2
 80429a0:	db0f      	blt.n	80429c2 <SX1276OnDio1Irq+0x92>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 80429a2:	1e59      	subs	r1, r3, #1
 80429a4:	b2c9      	uxtb	r1, r1
 80429a6:	f7ff fe99 	bl	80426dc <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 80429aa:	8fab      	ldrh	r3, [r5, #60]	; 0x3c
 80429ac:	1e5a      	subs	r2, r3, #1
 80429ae:	f895 303e 	ldrb.w	r3, [r5, #62]	; 0x3e
 80429b2:	4413      	add	r3, r2
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80429b4:	87ab      	strh	r3, [r5, #60]	; 0x3c
 80429b6:	e7c3      	b.n	8042940 <SX1276OnDio1Irq+0x10>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 80429b8:	2032      	movs	r0, #50	; 0x32
 80429ba:	f7fe fe7b 	bl	80416b4 <SX1276Read>
 80429be:	8760      	strh	r0, [r4, #58]	; 0x3a
 80429c0:	e7e6      	b.n	8042990 <SX1276OnDio1Irq+0x60>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80429c2:	b2c9      	uxtb	r1, r1
 80429c4:	f7ff fe8a 	bl	80426dc <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80429c8:	8f6b      	ldrh	r3, [r5, #58]	; 0x3a
 80429ca:	e7f3      	b.n	80429b4 <SX1276OnDio1Irq+0x84>
            switch( SX1276.Settings.Modem )
 80429cc:	7963      	ldrb	r3, [r4, #5]
 80429ce:	2b00      	cmp	r3, #0
 80429d0:	d1b6      	bne.n	8042940 <SX1276OnDio1Irq+0x10>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 80429d2:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 80429d4:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 80429d6:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
 80429da:	480d      	ldr	r0, [pc, #52]	; (8042a10 <SX1276OnDio1Irq+0xe0>)
 80429dc:	1a9b      	subs	r3, r3, r2
 80429de:	428b      	cmp	r3, r1
 80429e0:	4410      	add	r0, r2
 80429e2:	dd07      	ble.n	80429f4 <SX1276OnDio1Irq+0xc4>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 80429e4:	f7ff fdfc 	bl	80425e0 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 80429e8:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 80429ec:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 80429ee:	4413      	add	r3, r2
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 80429f0:	87a3      	strh	r3, [r4, #60]	; 0x3c
}
 80429f2:	e7a5      	b.n	8042940 <SX1276OnDio1Irq+0x10>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80429f4:	b2d9      	uxtb	r1, r3
 80429f6:	f7ff fdf3 	bl	80425e0 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 80429fa:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 80429fc:	e7f8      	b.n	80429f0 <SX1276OnDio1Irq+0xc0>
 80429fe:	bf00      	nop
 8042a00:	2000b5f4 	.word	0x2000b5f4
 8042a04:	2000b65c 	.word	0x2000b65c
 8042a08:	20009c34 	.word	0x20009c34
 8042a0c:	2000b5dc 	.word	0x2000b5dc
 8042a10:	20009c38 	.word	0x20009c38

08042a14 <SX1276SetMaxPayloadLength>:
{
 8042a14:	b538      	push	{r3, r4, r5, lr}
 8042a16:	4605      	mov	r5, r0
 8042a18:	460c      	mov	r4, r1
    SX1276SetModem( modem );
 8042a1a:	f7ff f9a3 	bl	8041d64 <SX1276SetModem>
    switch( modem )
 8042a1e:	b115      	cbz	r5, 8042a26 <SX1276SetMaxPayloadLength+0x12>
 8042a20:	2d01      	cmp	r5, #1
 8042a22:	d00b      	beq.n	8042a3c <SX1276SetMaxPayloadLength+0x28>
}
 8042a24:	bd38      	pop	{r3, r4, r5, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
 8042a26:	4b07      	ldr	r3, [pc, #28]	; (8042a44 <SX1276SetMaxPayloadLength+0x30>)
 8042a28:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8042a2c:	2b00      	cmp	r3, #0
 8042a2e:	d1f9      	bne.n	8042a24 <SX1276SetMaxPayloadLength+0x10>
            SX1276Write( REG_PAYLOADLENGTH, max );
 8042a30:	4621      	mov	r1, r4
 8042a32:	2032      	movs	r0, #50	; 0x32
}
 8042a34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8042a38:	f7fe bdec 	b.w	8041614 <SX1276Write>
 8042a3c:	4621      	mov	r1, r4
 8042a3e:	2023      	movs	r0, #35	; 0x23
 8042a40:	e7f8      	b.n	8042a34 <SX1276SetMaxPayloadLength+0x20>
 8042a42:	bf00      	nop
 8042a44:	2000b5f4 	.word	0x2000b5f4

08042a48 <SX1276SetPublicNetwork>:
{
 8042a48:	b510      	push	{r4, lr}
 8042a4a:	4604      	mov	r4, r0
    SX1276SetModem( MODEM_LORA );
 8042a4c:	2001      	movs	r0, #1
 8042a4e:	f7ff f989 	bl	8041d64 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 8042a52:	4b06      	ldr	r3, [pc, #24]	; (8042a6c <SX1276SetPublicNetwork+0x24>)
 8042a54:	f883 405c 	strb.w	r4, [r3, #92]	; 0x5c
    if( enable == true )
 8042a58:	b12c      	cbz	r4, 8042a66 <SX1276SetPublicNetwork+0x1e>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 8042a5a:	2134      	movs	r1, #52	; 0x34
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 8042a5c:	2039      	movs	r0, #57	; 0x39
}
 8042a5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 8042a62:	f7fe bdd7 	b.w	8041614 <SX1276Write>
 8042a66:	2112      	movs	r1, #18
 8042a68:	e7f8      	b.n	8042a5c <SX1276SetPublicNetwork+0x14>
 8042a6a:	bf00      	nop
 8042a6c:	2000b5f4 	.word	0x2000b5f4

08042a70 <SX1276OnTimeoutIrq>:
{
 8042a70:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8042a72:	4c2c      	ldr	r4, [pc, #176]	; (8042b24 <SX1276OnTimeoutIrq+0xb4>)
 8042a74:	7923      	ldrb	r3, [r4, #4]
 8042a76:	2b01      	cmp	r3, #1
 8042a78:	4625      	mov	r5, r4
 8042a7a:	d002      	beq.n	8042a82 <SX1276OnTimeoutIrq+0x12>
 8042a7c:	2b02      	cmp	r3, #2
 8042a7e:	d02c      	beq.n	8042ada <SX1276OnTimeoutIrq+0x6a>
}
 8042a80:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
 8042a82:	7963      	ldrb	r3, [r4, #5]
 8042a84:	b9cb      	cbnz	r3, 8042aba <SX1276OnTimeoutIrq+0x4a>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8042a86:	8623      	strh	r3, [r4, #48]	; 0x30
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8042a88:	210b      	movs	r1, #11
 8042a8a:	203e      	movs	r0, #62	; 0x3e
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8042a8c:	87a3      	strh	r3, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8042a8e:	8763      	strh	r3, [r4, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8042a90:	f7fe fdc0 	bl	8041614 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8042a94:	2110      	movs	r1, #16
 8042a96:	203f      	movs	r0, #63	; 0x3f
 8042a98:	f7fe fdbc 	bl	8041614 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 8042a9c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8042aa0:	b1b3      	cbz	r3, 8042ad0 <SX1276OnTimeoutIrq+0x60>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8042aa2:	200d      	movs	r0, #13
 8042aa4:	f7fe fe06 	bl	80416b4 <SX1276Read>
 8042aa8:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8042aac:	b2c9      	uxtb	r1, r1
 8042aae:	200d      	movs	r0, #13
 8042ab0:	f7fe fdb0 	bl	8041614 <SX1276Write>
                TimerStart( &RxTimeoutSyncWord );
 8042ab4:	481c      	ldr	r0, [pc, #112]	; (8042b28 <SX1276OnTimeoutIrq+0xb8>)
 8042ab6:	f008 fe2d 	bl	804b714 <TimerStart>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8042aba:	4b1c      	ldr	r3, [pc, #112]	; (8042b2c <SX1276OnTimeoutIrq+0xbc>)
 8042abc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8042ac0:	2b00      	cmp	r3, #0
 8042ac2:	d0dd      	beq.n	8042a80 <SX1276OnTimeoutIrq+0x10>
 8042ac4:	68db      	ldr	r3, [r3, #12]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8042ac6:	2b00      	cmp	r3, #0
 8042ac8:	d0da      	beq.n	8042a80 <SX1276OnTimeoutIrq+0x10>
}
 8042aca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            RadioEvents->TxTimeout( );
 8042ace:	4718      	bx	r3
                TimerStop( &RxTimeoutSyncWord );
 8042ad0:	4815      	ldr	r0, [pc, #84]	; (8042b28 <SX1276OnTimeoutIrq+0xb8>)
                SX1276.Settings.State = RF_IDLE;
 8042ad2:	7123      	strb	r3, [r4, #4]
                TimerStop( &RxTimeoutSyncWord );
 8042ad4:	f008 fe90 	bl	804b7f8 <TimerStop>
 8042ad8:	e7ef      	b.n	8042aba <SX1276OnTimeoutIrq+0x4a>
        SX1276Reset( );
 8042ada:	f7fe fd53 	bl	8041584 <SX1276Reset>
 8042ade:	4c14      	ldr	r4, [pc, #80]	; (8042b30 <SX1276OnTimeoutIrq+0xc0>)
        RxChainCalibration( );
 8042ae0:	f7fe fdf4 	bl	80416cc <RxChainCalibration>
 8042ae4:	f7fe ff5e 	bl	80419a4 <SX1276SetOpMode.part.2>
 8042ae8:	f104 0630 	add.w	r6, r4, #48	; 0x30
            SX1276SetModem( RadioRegsInit[i].Modem );
 8042aec:	7820      	ldrb	r0, [r4, #0]
 8042aee:	f7ff f939 	bl	8041d64 <SX1276SetModem>
 8042af2:	3403      	adds	r4, #3
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8042af4:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8042af8:	f814 0c02 	ldrb.w	r0, [r4, #-2]
 8042afc:	f7fe fd8a 	bl	8041614 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8042b00:	42b4      	cmp	r4, r6
 8042b02:	d1f3      	bne.n	8042aec <SX1276OnTimeoutIrq+0x7c>
        SX1276SetModem( MODEM_FSK );
 8042b04:	2000      	movs	r0, #0
 8042b06:	f7ff f92d 	bl	8041d64 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 8042b0a:	f895 005c 	ldrb.w	r0, [r5, #92]	; 0x5c
 8042b0e:	f7ff ff9b 	bl	8042a48 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 8042b12:	2300      	movs	r3, #0
 8042b14:	712b      	strb	r3, [r5, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8042b16:	4b05      	ldr	r3, [pc, #20]	; (8042b2c <SX1276OnTimeoutIrq+0xbc>)
 8042b18:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8042b1c:	2b00      	cmp	r3, #0
 8042b1e:	d0af      	beq.n	8042a80 <SX1276OnTimeoutIrq+0x10>
 8042b20:	685b      	ldr	r3, [r3, #4]
 8042b22:	e7d0      	b.n	8042ac6 <SX1276OnTimeoutIrq+0x56>
 8042b24:	2000b5f4 	.word	0x2000b5f4
 8042b28:	2000b5dc 	.word	0x2000b5dc
 8042b2c:	20009c34 	.word	0x20009c34
 8042b30:	0804ef88 	.word	0x0804ef88

08042b34 <SX1276GetWakeupTime>:
{
 8042b34:	b508      	push	{r3, lr}
    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 8042b36:	4b03      	ldr	r3, [pc, #12]	; (8042b44 <SX1276GetWakeupTime+0x10>)
 8042b38:	681b      	ldr	r3, [r3, #0]
 8042b3a:	685b      	ldr	r3, [r3, #4]
 8042b3c:	4798      	blx	r3
}
 8042b3e:	3002      	adds	r0, #2
 8042b40:	bd08      	pop	{r3, pc}
 8042b42:	bf00      	nop
 8042b44:	20009c34 	.word	0x20009c34

08042b48 <SX1276GetWakeTime>:
};

uint32_t SX1276GetWakeTime( void )
{
  return  BOARD_WAKEUP_TIME;
}
 8042b48:	2000      	movs	r0, #0
 8042b4a:	4770      	bx	lr

08042b4c <SX1276SetXO>:

void SX1276SetXO( uint8_t state )
{
}
 8042b4c:	4770      	bx	lr

08042b4e <SX1276CheckRfFrequency>:

bool SX1276CheckRfFrequency( uint32_t frequency )
{
    // Implement check. Currently all frequencies are supported
    return true;
}
 8042b4e:	2001      	movs	r0, #1
 8042b50:	4770      	bx	lr
	...

08042b54 <SX1276IoInit>:
{
 8042b54:	b510      	push	{r4, lr}
 8042b56:	b086      	sub	sp, #24
  GPIO_InitTypeDef initStruct={0};
 8042b58:	2214      	movs	r2, #20
 8042b5a:	2100      	movs	r1, #0
 8042b5c:	a801      	add	r0, sp, #4
 8042b5e:	f00a fe3b 	bl	804d7d8 <memset>
  SX1276BoardInit( &BoardCallbacks );
 8042b62:	4811      	ldr	r0, [pc, #68]	; (8042ba8 <SX1276IoInit+0x54>)
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8042b64:	4c11      	ldr	r4, [pc, #68]	; (8042bac <SX1276IoInit+0x58>)
  SX1276BoardInit( &BoardCallbacks );
 8042b66:	f7fe fd01 	bl	804156c <SX1276BoardInit>
  initStruct.Pull = GPIO_PULLDOWN;
 8042b6a:	4a11      	ldr	r2, [pc, #68]	; (8042bb0 <SX1276IoInit+0x5c>)
 8042b6c:	2302      	movs	r3, #2
 8042b6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8042b72:	4620      	mov	r0, r4
  initStruct.Speed = GPIO_SPEED_HIGH;
 8042b74:	2303      	movs	r3, #3
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8042b76:	aa01      	add	r2, sp, #4
 8042b78:	f44f 7100 	mov.w	r1, #512	; 0x200
  initStruct.Speed = GPIO_SPEED_HIGH;
 8042b7c:	9304      	str	r3, [sp, #16]
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8042b7e:	f009 f9a1 	bl	804bec4 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 8042b82:	aa01      	add	r2, sp, #4
 8042b84:	4620      	mov	r0, r4
 8042b86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8042b8a:	f009 f99b 	bl	804bec4 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 8042b8e:	aa01      	add	r2, sp, #4
 8042b90:	4620      	mov	r0, r4
 8042b92:	2180      	movs	r1, #128	; 0x80
 8042b94:	f009 f996 	bl	804bec4 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 8042b98:	aa01      	add	r2, sp, #4
 8042b9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8042b9e:	4620      	mov	r0, r4
 8042ba0:	f009 f990 	bl	804bec4 <HW_GPIO_Init>
}
 8042ba4:	b006      	add	sp, #24
 8042ba6:	bd10      	pop	{r4, pc}
 8042ba8:	20001074 	.word	0x20001074
 8042bac:	40021000 	.word	0x40021000
 8042bb0:	10110000 	.word	0x10110000

08042bb4 <SX1276IoDeInit>:
{
 8042bb4:	b510      	push	{r4, lr}
 8042bb6:	b086      	sub	sp, #24
  GPIO_InitTypeDef initStruct={0};
 8042bb8:	2214      	movs	r2, #20
 8042bba:	2100      	movs	r1, #0
 8042bbc:	a801      	add	r0, sp, #4
 8042bbe:	f00a fe0b 	bl	804d7d8 <memset>
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8042bc2:	4c0f      	ldr	r4, [pc, #60]	; (8042c00 <SX1276IoDeInit+0x4c>)
  initStruct.Pull = GPIO_PULLDOWN;
 8042bc4:	4a0f      	ldr	r2, [pc, #60]	; (8042c04 <SX1276IoDeInit+0x50>)
 8042bc6:	2302      	movs	r3, #2
 8042bc8:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8042bcc:	4620      	mov	r0, r4
 8042bce:	aa01      	add	r2, sp, #4
 8042bd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8042bd4:	f009 f976 	bl	804bec4 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 8042bd8:	aa01      	add	r2, sp, #4
 8042bda:	4620      	mov	r0, r4
 8042bdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8042be0:	f009 f970 	bl	804bec4 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 8042be4:	aa01      	add	r2, sp, #4
 8042be6:	4620      	mov	r0, r4
 8042be8:	2180      	movs	r1, #128	; 0x80
 8042bea:	f009 f96b 	bl	804bec4 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 8042bee:	aa01      	add	r2, sp, #4
 8042bf0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8042bf4:	4620      	mov	r0, r4
 8042bf6:	f009 f965 	bl	804bec4 <HW_GPIO_Init>
}
 8042bfa:	b006      	add	sp, #24
 8042bfc:	bd10      	pop	{r4, pc}
 8042bfe:	bf00      	nop
 8042c00:	40021000 	.word	0x40021000
 8042c04:	10110000 	.word	0x10110000

08042c08 <SX1276IoIrqInit>:
{
 8042c08:	b570      	push	{r4, r5, r6, lr}
  HW_GPIO_SetIrq( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 8042c0a:	4c0f      	ldr	r4, [pc, #60]	; (8042c48 <SX1276IoIrqInit+0x40>)
 8042c0c:	6803      	ldr	r3, [r0, #0]
{
 8042c0e:	4605      	mov	r5, r0
  HW_GPIO_SetIrq( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 8042c10:	2200      	movs	r2, #0
 8042c12:	4620      	mov	r0, r4
 8042c14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8042c18:	f009 f9ae 	bl	804bf78 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, IRQ_HIGH_PRIORITY, irqHandlers[1] );
 8042c1c:	686b      	ldr	r3, [r5, #4]
 8042c1e:	4620      	mov	r0, r4
 8042c20:	2200      	movs	r2, #0
 8042c22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8042c26:	f009 f9a7 	bl	804bf78 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, IRQ_HIGH_PRIORITY, irqHandlers[2] );
 8042c2a:	68ab      	ldr	r3, [r5, #8]
 8042c2c:	4620      	mov	r0, r4
 8042c2e:	2200      	movs	r2, #0
 8042c30:	2180      	movs	r1, #128	; 0x80
 8042c32:	f009 f9a1 	bl	804bf78 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, IRQ_HIGH_PRIORITY, irqHandlers[3] );
 8042c36:	68eb      	ldr	r3, [r5, #12]
 8042c38:	4620      	mov	r0, r4
 8042c3a:	2200      	movs	r2, #0
 8042c3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
}
 8042c40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HW_GPIO_SetIrq( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, IRQ_HIGH_PRIORITY, irqHandlers[3] );
 8042c44:	f009 b998 	b.w	804bf78 <HW_GPIO_SetIrq>
 8042c48:	40021000 	.word	0x40021000

08042c4c <SX1276SetRfTxPower>:
{
 8042c4c:	b570      	push	{r4, r5, r6, lr}
 8042c4e:	4606      	mov	r6, r0
    paConfig = SX1276Read( REG_PACONFIG );
 8042c50:	2009      	movs	r0, #9
 8042c52:	f7fe fd2f 	bl	80416b4 <SX1276Read>
 8042c56:	4604      	mov	r4, r0
    paDac = SX1276Read( REG_PADAC );
 8042c58:	204d      	movs	r0, #77	; 0x4d
 8042c5a:	f7fe fd2b 	bl	80416b4 <SX1276Read>
        if( power > 17 )
 8042c5e:	2e11      	cmp	r6, #17
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 8042c60:	bfcb      	itete	gt
 8042c62:	f040 0507 	orrgt.w	r5, r0, #7
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 8042c66:	f000 05f8 	andle.w	r5, r0, #248	; 0xf8
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 8042c6a:	b2ed      	uxtbgt	r5, r5
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 8042c6c:	f045 0504 	orrle.w	r5, r5, #4
    paConfig |= RF_PACONFIG_PASELECT_PABOOST;
 8042c70:	f064 047f 	orn	r4, r4, #127	; 0x7f
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 8042c74:	f005 0307 	and.w	r3, r5, #7
    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8042c78:	b264      	sxtb	r4, r4
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 8042c7a:	2b07      	cmp	r3, #7
 8042c7c:	f024 040f 	bic.w	r4, r4, #15
 8042c80:	d115      	bne.n	8042cae <SX1276SetRfTxPower+0x62>
            if( power < 5 )
 8042c82:	2e04      	cmp	r6, #4
 8042c84:	dd11      	ble.n	8042caa <SX1276SetRfTxPower+0x5e>
            if( power > 20 )
 8042c86:	2e14      	cmp	r6, #20
 8042c88:	dd03      	ble.n	8042c92 <SX1276SetRfTxPower+0x46>
            	PRINTF("Full Power 20\r\n");
 8042c8a:	480d      	ldr	r0, [pc, #52]	; (8042cc0 <SX1276SetRfTxPower+0x74>)
 8042c8c:	f008 fe3e 	bl	804b90c <TraceSend>
                power = 20;
 8042c90:	2614      	movs	r6, #20
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 8042c92:	1f71      	subs	r1, r6, #5
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 8042c94:	430c      	orrs	r4, r1
 8042c96:	b2e1      	uxtb	r1, r4
    SX1276Write( REG_PACONFIG, paConfig );
 8042c98:	2009      	movs	r0, #9
 8042c9a:	f7fe fcbb 	bl	8041614 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 8042c9e:	4629      	mov	r1, r5
 8042ca0:	204d      	movs	r0, #77	; 0x4d
}
 8042ca2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    SX1276Write( REG_PADAC, paDac );
 8042ca6:	f7fe bcb5 	b.w	8041614 <SX1276Write>
                power = 5;
 8042caa:	2605      	movs	r6, #5
 8042cac:	e7f1      	b.n	8042c92 <SX1276SetRfTxPower+0x46>
 8042cae:	2e11      	cmp	r6, #17
 8042cb0:	bfa8      	it	ge
 8042cb2:	2611      	movge	r6, #17
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 8042cb4:	2e02      	cmp	r6, #2
 8042cb6:	bfb8      	it	lt
 8042cb8:	2602      	movlt	r6, #2
 8042cba:	1eb1      	subs	r1, r6, #2
 8042cbc:	e7ea      	b.n	8042c94 <SX1276SetRfTxPower+0x48>
 8042cbe:	bf00      	nop
 8042cc0:	0804f521 	.word	0x0804f521

08042cc4 <SX1276SetAntSwLowPower>:
{
 8042cc4:	b510      	push	{r4, lr}
    if( RadioIsActive != status )
 8042cc6:	4b14      	ldr	r3, [pc, #80]	; (8042d18 <SX1276SetAntSwLowPower+0x54>)
 8042cc8:	781a      	ldrb	r2, [r3, #0]
 8042cca:	4282      	cmp	r2, r0
{
 8042ccc:	b086      	sub	sp, #24
    if( RadioIsActive != status )
 8042cce:	d017      	beq.n	8042d00 <SX1276SetAntSwLowPower+0x3c>
        RadioIsActive = status;
 8042cd0:	7018      	strb	r0, [r3, #0]
  GPIO_InitTypeDef initStruct={0};
 8042cd2:	2214      	movs	r2, #20
        if( status == false )
 8042cd4:	b9b0      	cbnz	r0, 8042d04 <SX1276SetAntSwLowPower+0x40>
  GPIO_InitTypeDef initStruct={0};
 8042cd6:	4601      	mov	r1, r0
 8042cd8:	a801      	add	r0, sp, #4
 8042cda:	f00a fd7d 	bl	804d7d8 <memset>
  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8042cde:	2301      	movs	r3, #1
 8042ce0:	9302      	str	r3, [sp, #8]
  PRINTF("Antenna Init\r\n");
 8042ce2:	480e      	ldr	r0, [pc, #56]	; (8042d1c <SX1276SetAntSwLowPower+0x58>)
  initStruct.Speed = GPIO_SPEED_HIGH;
 8042ce4:	2303      	movs	r3, #3
 8042ce6:	9304      	str	r3, [sp, #16]
  PRINTF("Antenna Init\r\n");
 8042ce8:	f008 fe10 	bl	804b90c <TraceSend>
  HW_GPIO_Init(  RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, &initStruct ); 
 8042cec:	aa01      	add	r2, sp, #4
 8042cee:	2102      	movs	r1, #2
 8042cf0:	480b      	ldr	r0, [pc, #44]	; (8042d20 <SX1276SetAntSwLowPower+0x5c>)
 8042cf2:	f009 f8e7 	bl	804bec4 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, 0);
 8042cf6:	2200      	movs	r2, #0
 8042cf8:	2102      	movs	r1, #2
 8042cfa:	4809      	ldr	r0, [pc, #36]	; (8042d20 <SX1276SetAntSwLowPower+0x5c>)
 8042cfc:	f009 f964 	bl	804bfc8 <HW_GPIO_Write>
}
 8042d00:	b006      	add	sp, #24
 8042d02:	bd10      	pop	{r4, pc}
  GPIO_InitTypeDef initStruct={0};
 8042d04:	2100      	movs	r1, #0
 8042d06:	a801      	add	r0, sp, #4
 8042d08:	f00a fd66 	bl	804d7d8 <memset>
  initStruct.Mode = GPIO_MODE_OUTPUT_PP ;
 8042d0c:	2301      	movs	r3, #1
 8042d0e:	9302      	str	r3, [sp, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8042d10:	2303      	movs	r3, #3
 8042d12:	9304      	str	r3, [sp, #16]
 8042d14:	e7ea      	b.n	8042cec <SX1276SetAntSwLowPower+0x28>
 8042d16:	bf00      	nop
 8042d18:	20009d3c 	.word	0x20009d3c
 8042d1c:	0804f531 	.word	0x0804f531
 8042d20:	40020800 	.word	0x40020800

08042d24 <SX1276SetAntSw>:
{
 8042d24:	b510      	push	{r4, lr}
	PRINTF("opMode = %d\r\n", opMode);
 8042d26:	4601      	mov	r1, r0
{
 8042d28:	4604      	mov	r4, r0
	PRINTF("opMode = %d\r\n", opMode);
 8042d2a:	4806      	ldr	r0, [pc, #24]	; (8042d44 <SX1276SetAntSw+0x20>)
 8042d2c:	f008 fdee 	bl	804b90c <TraceSend>
    switch( opMode )
 8042d30:	2c03      	cmp	r4, #3
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, RADIO_ANT_SWITCH_SET_TX);
 8042d32:	bf0c      	ite	eq
 8042d34:	2201      	moveq	r2, #1
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, RADIO_ANT_SWITCH_SET_RX);
 8042d36:	2200      	movne	r2, #0
 8042d38:	2102      	movs	r1, #2
 8042d3a:	4803      	ldr	r0, [pc, #12]	; (8042d48 <SX1276SetAntSw+0x24>)
}
 8042d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, RADIO_ANT_SWITCH_SET_RX);
 8042d40:	f009 b942 	b.w	804bfc8 <HW_GPIO_Write>
 8042d44:	0804f540 	.word	0x0804f540
 8042d48:	40020800 	.word	0x40020800

08042d4c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8042d4c:	490e      	ldr	r1, [pc, #56]	; (8042d88 <SystemInit+0x3c>)
 8042d4e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8042d52:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8042d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8042d5a:	4b0c      	ldr	r3, [pc, #48]	; (8042d8c <SystemInit+0x40>)
 8042d5c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8042d5e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8042d60:	f042 0201 	orr.w	r2, r2, #1
 8042d64:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8042d66:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8042d68:	681a      	ldr	r2, [r3, #0]
 8042d6a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8042d6e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8042d72:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8042d74:	4a06      	ldr	r2, [pc, #24]	; (8042d90 <SystemInit+0x44>)
 8042d76:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8042d78:	681a      	ldr	r2, [r3, #0]
 8042d7a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8042d7e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8042d80:	60d8      	str	r0, [r3, #12]
#if defined (DATA_IN_ExtSRAM) || defined (DATA_IN_ExtSDRAM)
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location  ------------------*/
  SCB->VTOR = INTVECT_START;
 8042d82:	4b04      	ldr	r3, [pc, #16]	; (8042d94 <SystemInit+0x48>)
 8042d84:	608b      	str	r3, [r1, #8]
}
 8042d86:	4770      	bx	lr
 8042d88:	e000ed00 	.word	0xe000ed00
 8042d8c:	40023800 	.word	0x40023800
 8042d90:	24003010 	.word	0x24003010
 8042d94:	08040200 	.word	0x08040200

08042d98 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8042d98:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8042d9a:	4613      	mov	r3, r2
 8042d9c:	460a      	mov	r2, r1
 8042d9e:	4601      	mov	r1, r0
 8042da0:	4803      	ldr	r0, [pc, #12]	; (8042db0 <BSP_SD_ReadBlocks_DMA+0x18>)
 8042da2:	f001 fd57 	bl	8044854 <HAL_SD_ReadBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8042da6:	3000      	adds	r0, #0
 8042da8:	bf18      	it	ne
 8042daa:	2001      	movne	r0, #1
 8042dac:	bd08      	pop	{r3, pc}
 8042dae:	bf00      	nop
 8042db0:	20014f5c 	.word	0x20014f5c

08042db4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8042db4:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8042db6:	4613      	mov	r3, r2
 8042db8:	460a      	mov	r2, r1
 8042dba:	4601      	mov	r1, r0
 8042dbc:	4803      	ldr	r0, [pc, #12]	; (8042dcc <BSP_SD_WriteBlocks_DMA+0x18>)
 8042dbe:	f001 fddf 	bl	8044980 <HAL_SD_WriteBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8042dc2:	3000      	adds	r0, #0
 8042dc4:	bf18      	it	ne
 8042dc6:	2001      	movne	r0, #1
 8042dc8:	bd08      	pop	{r3, pc}
 8042dca:	bf00      	nop
 8042dcc:	20014f5c 	.word	0x20014f5c

08042dd0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8042dd0:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8042dd2:	4803      	ldr	r0, [pc, #12]	; (8042de0 <BSP_SD_GetCardState+0x10>)
 8042dd4:	f002 f8ea 	bl	8044fac <HAL_SD_GetCardState>
}
 8042dd8:	3804      	subs	r0, #4
 8042dda:	bf18      	it	ne
 8042ddc:	2001      	movne	r0, #1
 8042dde:	bd08      	pop	{r3, pc}
 8042de0:	20014f5c 	.word	0x20014f5c

08042de4 <BSP_SD_GetCardInfo>:
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8042de4:	4601      	mov	r1, r0
 8042de6:	4801      	ldr	r0, [pc, #4]	; (8042dec <BSP_SD_GetCardInfo+0x8>)
 8042de8:	f002 b849 	b.w	8044e7e <HAL_SD_GetCardInfo>
 8042dec:	20014f5c 	.word	0x20014f5c

08042df0 <BSP_SD_AbortCallback>:
 8042df0:	4770      	bx	lr

08042df2 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8042df2:	b508      	push	{r3, lr}
  BSP_SD_AbortCallback();
 8042df4:	f7ff fffc 	bl	8042df0 <BSP_SD_AbortCallback>
}
 8042df8:	bd08      	pop	{r3, pc}

08042dfa <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8042dfa:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 8042dfc:	f000 f90a 	bl	8043014 <BSP_SD_WriteCpltCallback>
}
 8042e00:	bd08      	pop	{r3, pc}

08042e02 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8042e02:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 8042e04:	f000 f90c 	bl	8043020 <BSP_SD_ReadCpltCallback>
}
 8042e08:	bd08      	pop	{r3, pc}

08042e0a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8042e0a:	b507      	push	{r0, r1, r2, lr}
  __IO uint8_t status = SD_PRESENT;
 8042e0c:	2301      	movs	r3, #1
 8042e0e:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8042e12:	f000 f82d 	bl	8042e70 <BSP_PlatformIsDetected>
 8042e16:	b908      	cbnz	r0, 8042e1c <BSP_SD_IsDetected+0x12>
  {
    status = SD_NOT_PRESENT;
 8042e18:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 8042e1c:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8042e20:	b003      	add	sp, #12
 8042e22:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08042e28 <BSP_SD_Init>:
{
 8042e28:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8042e2a:	f7ff ffee 	bl	8042e0a <BSP_SD_IsDetected>
 8042e2e:	2801      	cmp	r0, #1
 8042e30:	d10c      	bne.n	8042e4c <BSP_SD_Init+0x24>
  sd_state = HAL_SD_Init(&hsd);
 8042e32:	4807      	ldr	r0, [pc, #28]	; (8042e50 <BSP_SD_Init+0x28>)
 8042e34:	f002 f808 	bl	8044e48 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8042e38:	b938      	cbnz	r0, 8042e4a <BSP_SD_Init+0x22>
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8042e3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8042e3e:	4804      	ldr	r0, [pc, #16]	; (8042e50 <BSP_SD_Init+0x28>)
 8042e40:	f002 f830 	bl	8044ea4 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR;
 8042e44:	3000      	adds	r0, #0
 8042e46:	bf18      	it	ne
 8042e48:	2001      	movne	r0, #1
}
 8042e4a:	bd08      	pop	{r3, pc}
    return MSD_ERROR;
 8042e4c:	2001      	movs	r0, #1
 8042e4e:	e7fc      	b.n	8042e4a <BSP_SD_Init+0x22>
 8042e50:	20014f5c 	.word	0x20014f5c

08042e54 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8042e54:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8042e56:	4903      	ldr	r1, [pc, #12]	; (8042e64 <MX_FATFS_Init+0x10>)
 8042e58:	4803      	ldr	r0, [pc, #12]	; (8042e68 <MX_FATFS_Init+0x14>)
 8042e5a:	f003 fd23 	bl	80468a4 <FATFS_LinkDriver>
 8042e5e:	4b03      	ldr	r3, [pc, #12]	; (8042e6c <MX_FATFS_Init+0x18>)
 8042e60:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8042e62:	bd08      	pop	{r3, pc}
 8042e64:	2000b675 	.word	0x2000b675
 8042e68:	0804f044 	.word	0x0804f044
 8042e6c:	2000b674 	.word	0x2000b674

08042e70 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8042e70:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8042e72:	2180      	movs	r1, #128	; 0x80
 8042e74:	4803      	ldr	r0, [pc, #12]	; (8042e84 <BSP_PlatformIsDetected+0x14>)
 8042e76:	f000 fe7f 	bl	8043b78 <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 8042e7a:	fab0 f080 	clz	r0, r0
 8042e7e:	0940      	lsrs	r0, r0, #5
 8042e80:	bd08      	pop	{r3, pc}
 8042e82:	bf00      	nop
 8042e84:	40020800 	.word	0x40020800

08042e88 <SD_CheckStatus.isra.0>:
  }

  return -1;
}

static DSTATUS SD_CheckStatus(BYTE lun)
 8042e88:	b510      	push	{r4, lr}
{
  Stat = STA_NOINIT;
 8042e8a:	4c06      	ldr	r4, [pc, #24]	; (8042ea4 <SD_CheckStatus.isra.0+0x1c>)
 8042e8c:	2301      	movs	r3, #1
 8042e8e:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8042e90:	f7ff ff9e 	bl	8042dd0 <BSP_SD_GetCardState>
 8042e94:	4623      	mov	r3, r4
 8042e96:	b918      	cbnz	r0, 8042ea0 <SD_CheckStatus.isra.0+0x18>
  {
    Stat &= ~STA_NOINIT;
 8042e98:	7822      	ldrb	r2, [r4, #0]
 8042e9a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8042e9e:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 8042ea0:	7818      	ldrb	r0, [r3, #0]
}
 8042ea2:	bd10      	pop	{r4, pc}
 8042ea4:	20001090 	.word	0x20001090

08042ea8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8042ea8:	b510      	push	{r4, lr}

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8042eaa:	f7ff ffbd 	bl	8042e28 <BSP_SD_Init>
 8042eae:	4c03      	ldr	r4, [pc, #12]	; (8042ebc <SD_initialize+0x14>)
 8042eb0:	b910      	cbnz	r0, 8042eb8 <SD_initialize+0x10>
  {
    Stat = SD_CheckStatus(lun);
 8042eb2:	f7ff ffe9 	bl	8042e88 <SD_CheckStatus.isra.0>
 8042eb6:	7020      	strb	r0, [r4, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8042eb8:	7820      	ldrb	r0, [r4, #0]
}
 8042eba:	bd10      	pop	{r4, pc}
 8042ebc:	20001090 	.word	0x20001090

08042ec0 <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  return SD_CheckStatus(lun);
 8042ec0:	f7ff bfe2 	b.w	8042e88 <SD_CheckStatus.isra.0>

08042ec4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8042ec4:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8042ec6:	4b12      	ldr	r3, [pc, #72]	; (8042f10 <SD_ioctl+0x4c>)
 8042ec8:	781b      	ldrb	r3, [r3, #0]
 8042eca:	07db      	lsls	r3, r3, #31
{
 8042ecc:	b088      	sub	sp, #32
 8042ece:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8042ed0:	d41b      	bmi.n	8042f0a <SD_ioctl+0x46>

  switch (cmd)
 8042ed2:	2903      	cmp	r1, #3
 8042ed4:	d803      	bhi.n	8042ede <SD_ioctl+0x1a>
 8042ed6:	e8df f001 	tbb	[pc, r1]
 8042eda:	0510      	.short	0x0510
 8042edc:	120b      	.short	0x120b
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
    res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 8042ede:	2004      	movs	r0, #4
  }

  return res;
}
 8042ee0:	b008      	add	sp, #32
 8042ee2:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8042ee4:	4668      	mov	r0, sp
 8042ee6:	f7ff ff7d 	bl	8042de4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8042eea:	9b06      	ldr	r3, [sp, #24]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8042eec:	6023      	str	r3, [r4, #0]
 8042eee:	e004      	b.n	8042efa <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 8042ef0:	4668      	mov	r0, sp
 8042ef2:	f7ff ff77 	bl	8042de4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8042ef6:	9b07      	ldr	r3, [sp, #28]
 8042ef8:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 8042efa:	2000      	movs	r0, #0
 8042efc:	e7f0      	b.n	8042ee0 <SD_ioctl+0x1c>
    BSP_SD_GetCardInfo(&CardInfo);
 8042efe:	4668      	mov	r0, sp
 8042f00:	f7ff ff70 	bl	8042de4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8042f04:	9b07      	ldr	r3, [sp, #28]
 8042f06:	0a5b      	lsrs	r3, r3, #9
 8042f08:	e7f0      	b.n	8042eec <SD_ioctl+0x28>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8042f0a:	2003      	movs	r0, #3
 8042f0c:	e7e8      	b.n	8042ee0 <SD_ioctl+0x1c>
 8042f0e:	bf00      	nop
 8042f10:	20001090 	.word	0x20001090

08042f14 <SD_CheckStatusWithTimeout.constprop.4>:
static int SD_CheckStatusWithTimeout(uint32_t timeout)
 8042f14:	b538      	push	{r3, r4, r5, lr}
  uint32_t timer = HAL_GetTick();
 8042f16:	f000 f8af 	bl	8043078 <HAL_GetTick>
  while(HAL_GetTick() - timer < timeout)
 8042f1a:	f247 542f 	movw	r4, #29999	; 0x752f
  uint32_t timer = HAL_GetTick();
 8042f1e:	4605      	mov	r5, r0
  while(HAL_GetTick() - timer < timeout)
 8042f20:	f000 f8aa 	bl	8043078 <HAL_GetTick>
 8042f24:	1b40      	subs	r0, r0, r5
 8042f26:	42a0      	cmp	r0, r4
 8042f28:	d902      	bls.n	8042f30 <SD_CheckStatusWithTimeout.constprop.4+0x1c>
  return -1;
 8042f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8042f2e:	e003      	b.n	8042f38 <SD_CheckStatusWithTimeout.constprop.4+0x24>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8042f30:	f7ff ff4e 	bl	8042dd0 <BSP_SD_GetCardState>
 8042f34:	2800      	cmp	r0, #0
 8042f36:	d1f3      	bne.n	8042f20 <SD_CheckStatusWithTimeout.constprop.4+0xc>
}
 8042f38:	bd38      	pop	{r3, r4, r5, pc}
	...

08042f3c <SD_write>:
{
 8042f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   WriteStatus = 0;
 8042f3e:	4c19      	ldr	r4, [pc, #100]	; (8042fa4 <SD_write+0x68>)
{
 8042f40:	461f      	mov	r7, r3
   WriteStatus = 0;
 8042f42:	2300      	movs	r3, #0
{
 8042f44:	460d      	mov	r5, r1
 8042f46:	4616      	mov	r6, r2
   WriteStatus = 0;
 8042f48:	6023      	str	r3, [r4, #0]
  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8042f4a:	f7ff ffe3 	bl	8042f14 <SD_CheckStatusWithTimeout.constprop.4>
 8042f4e:	2800      	cmp	r0, #0
 8042f50:	da01      	bge.n	8042f56 <SD_write+0x1a>
    return res;
 8042f52:	2001      	movs	r0, #1
}
 8042f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8042f56:	463a      	mov	r2, r7
 8042f58:	4631      	mov	r1, r6
 8042f5a:	4628      	mov	r0, r5
 8042f5c:	f7ff ff2a 	bl	8042db4 <BSP_SD_WriteBlocks_DMA>
 8042f60:	2800      	cmp	r0, #0
 8042f62:	d1f6      	bne.n	8042f52 <SD_write+0x16>
      timeout = HAL_GetTick();
 8042f64:	f000 f888 	bl	8043078 <HAL_GetTick>
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8042f68:	f247 552f 	movw	r5, #29999	; 0x752f
      timeout = HAL_GetTick();
 8042f6c:	4606      	mov	r6, r0
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8042f6e:	6823      	ldr	r3, [r4, #0]
 8042f70:	b923      	cbnz	r3, 8042f7c <SD_write+0x40>
 8042f72:	f000 f881 	bl	8043078 <HAL_GetTick>
 8042f76:	1b80      	subs	r0, r0, r6
 8042f78:	42a8      	cmp	r0, r5
 8042f7a:	d9f8      	bls.n	8042f6e <SD_write+0x32>
      if (WriteStatus == 0)
 8042f7c:	6823      	ldr	r3, [r4, #0]
 8042f7e:	2b00      	cmp	r3, #0
 8042f80:	d0e7      	beq.n	8042f52 <SD_write+0x16>
        WriteStatus = 0;
 8042f82:	2300      	movs	r3, #0
 8042f84:	6023      	str	r3, [r4, #0]
        timeout = HAL_GetTick();
 8042f86:	f000 f877 	bl	8043078 <HAL_GetTick>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8042f8a:	f247 542f 	movw	r4, #29999	; 0x752f
        timeout = HAL_GetTick();
 8042f8e:	4605      	mov	r5, r0
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8042f90:	f000 f872 	bl	8043078 <HAL_GetTick>
 8042f94:	1b40      	subs	r0, r0, r5
 8042f96:	42a0      	cmp	r0, r4
 8042f98:	d8db      	bhi.n	8042f52 <SD_write+0x16>
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8042f9a:	f7ff ff19 	bl	8042dd0 <BSP_SD_GetCardState>
 8042f9e:	2800      	cmp	r0, #0
 8042fa0:	d1f6      	bne.n	8042f90 <SD_write+0x54>
 8042fa2:	e7d7      	b.n	8042f54 <SD_write+0x18>
 8042fa4:	20009d40 	.word	0x20009d40

08042fa8 <SD_read>:
{
 8042fa8:	b570      	push	{r4, r5, r6, lr}
 8042faa:	460c      	mov	r4, r1
 8042fac:	4615      	mov	r5, r2
 8042fae:	461e      	mov	r6, r3
  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8042fb0:	f7ff ffb0 	bl	8042f14 <SD_CheckStatusWithTimeout.constprop.4>
 8042fb4:	2800      	cmp	r0, #0
 8042fb6:	da01      	bge.n	8042fbc <SD_read+0x14>
    return res;
 8042fb8:	2001      	movs	r0, #1
}
 8042fba:	bd70      	pop	{r4, r5, r6, pc}
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8042fbc:	4632      	mov	r2, r6
 8042fbe:	4629      	mov	r1, r5
 8042fc0:	4620      	mov	r0, r4
 8042fc2:	f7ff fee9 	bl	8042d98 <BSP_SD_ReadBlocks_DMA>
 8042fc6:	2800      	cmp	r0, #0
 8042fc8:	d1f6      	bne.n	8042fb8 <SD_read+0x10>
      ReadStatus = 0;
 8042fca:	4c11      	ldr	r4, [pc, #68]	; (8043010 <SD_read+0x68>)
 8042fcc:	6060      	str	r0, [r4, #4]
      timeout = HAL_GetTick();
 8042fce:	f000 f853 	bl	8043078 <HAL_GetTick>
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8042fd2:	f247 552f 	movw	r5, #29999	; 0x752f
      timeout = HAL_GetTick();
 8042fd6:	4606      	mov	r6, r0
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8042fd8:	6863      	ldr	r3, [r4, #4]
 8042fda:	b923      	cbnz	r3, 8042fe6 <SD_read+0x3e>
 8042fdc:	f000 f84c 	bl	8043078 <HAL_GetTick>
 8042fe0:	1b80      	subs	r0, r0, r6
 8042fe2:	42a8      	cmp	r0, r5
 8042fe4:	d9f8      	bls.n	8042fd8 <SD_read+0x30>
      if (ReadStatus == 0)
 8042fe6:	6863      	ldr	r3, [r4, #4]
 8042fe8:	2b00      	cmp	r3, #0
 8042fea:	d0e5      	beq.n	8042fb8 <SD_read+0x10>
        ReadStatus = 0;
 8042fec:	2300      	movs	r3, #0
 8042fee:	6063      	str	r3, [r4, #4]
        timeout = HAL_GetTick();
 8042ff0:	f000 f842 	bl	8043078 <HAL_GetTick>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8042ff4:	f247 542f 	movw	r4, #29999	; 0x752f
        timeout = HAL_GetTick();
 8042ff8:	4605      	mov	r5, r0
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8042ffa:	f000 f83d 	bl	8043078 <HAL_GetTick>
 8042ffe:	1b40      	subs	r0, r0, r5
 8043000:	42a0      	cmp	r0, r4
 8043002:	d8d9      	bhi.n	8042fb8 <SD_read+0x10>
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8043004:	f7ff fee4 	bl	8042dd0 <BSP_SD_GetCardState>
 8043008:	2800      	cmp	r0, #0
 804300a:	d1f6      	bne.n	8042ffa <SD_read+0x52>
 804300c:	e7d5      	b.n	8042fba <SD_read+0x12>
 804300e:	bf00      	nop
 8043010:	20009d40 	.word	0x20009d40

08043014 <BSP_SD_WriteCpltCallback>:
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{

  WriteStatus = 1;
 8043014:	4b01      	ldr	r3, [pc, #4]	; (804301c <BSP_SD_WriteCpltCallback+0x8>)
 8043016:	2201      	movs	r2, #1
 8043018:	601a      	str	r2, [r3, #0]
}
 804301a:	4770      	bx	lr
 804301c:	20009d40 	.word	0x20009d40

08043020 <BSP_SD_ReadCpltCallback>:
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
  ReadStatus = 1;
 8043020:	4b01      	ldr	r3, [pc, #4]	; (8043028 <BSP_SD_ReadCpltCallback+0x8>)
 8043022:	2201      	movs	r2, #1
 8043024:	605a      	str	r2, [r3, #4]
}
 8043026:	4770      	bx	lr
 8043028:	20009d40 	.word	0x20009d40

0804302c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 804302c:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 804302e:	4b0b      	ldr	r3, [pc, #44]	; (804305c <HAL_Init+0x30>)
 8043030:	681a      	ldr	r2, [r3, #0]
 8043032:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8043036:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8043038:	681a      	ldr	r2, [r3, #0]
 804303a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 804303e:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8043040:	681a      	ldr	r2, [r3, #0]
 8043042:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8043046:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8043048:	2003      	movs	r0, #3
 804304a:	f000 f81b 	bl	8043084 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 804304e:	2000      	movs	r0, #0
 8043050:	f009 fd8e 	bl	804cb70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8043054:	f009 fd94 	bl	804cb80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8043058:	2000      	movs	r0, #0
 804305a:	bd08      	pop	{r3, pc}
 804305c:	40023c00 	.word	0x40023c00

08043060 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8043060:	4a03      	ldr	r2, [pc, #12]	; (8043070 <HAL_IncTick+0x10>)
 8043062:	4b04      	ldr	r3, [pc, #16]	; (8043074 <HAL_IncTick+0x14>)
 8043064:	6811      	ldr	r1, [r2, #0]
 8043066:	781b      	ldrb	r3, [r3, #0]
 8043068:	440b      	add	r3, r1
 804306a:	6013      	str	r3, [r2, #0]
}
 804306c:	4770      	bx	lr
 804306e:	bf00      	nop
 8043070:	2000d6e4 	.word	0x2000d6e4
 8043074:	20001094 	.word	0x20001094

08043078 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8043078:	4b01      	ldr	r3, [pc, #4]	; (8043080 <HAL_GetTick+0x8>)
 804307a:	6818      	ldr	r0, [r3, #0]
}
 804307c:	4770      	bx	lr
 804307e:	bf00      	nop
 8043080:	2000d6e4 	.word	0x2000d6e4

08043084 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8043084:	4a07      	ldr	r2, [pc, #28]	; (80430a4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8043086:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8043088:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 804308c:	041b      	lsls	r3, r3, #16
 804308e:	0c1b      	lsrs	r3, r3, #16
 8043090:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8043094:	0200      	lsls	r0, r0, #8
 8043096:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 804309a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 804309e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80430a0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80430a2:	4770      	bx	lr
 80430a4:	e000ed00 	.word	0xe000ed00

080430a8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80430a8:	4b17      	ldr	r3, [pc, #92]	; (8043108 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80430aa:	b570      	push	{r4, r5, r6, lr}
 80430ac:	68dc      	ldr	r4, [r3, #12]
 80430ae:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80430b2:	f1c4 0507 	rsb	r5, r4, #7
 80430b6:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80430b8:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80430bc:	bf28      	it	cs
 80430be:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80430c0:	f04f 36ff 	mov.w	r6, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80430c4:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80430c6:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80430ca:	bf8c      	ite	hi
 80430cc:	3c03      	subhi	r4, #3
 80430ce:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80430d0:	ea21 0303 	bic.w	r3, r1, r3
 80430d4:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80430d6:	fa06 f404 	lsl.w	r4, r6, r4
 80430da:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 80430de:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80430e0:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80430e4:	bfa8      	it	ge
 80430e6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 80430ea:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80430ee:	bfbc      	itt	lt
 80430f0:	f000 000f 	andlt.w	r0, r0, #15
 80430f4:	4a05      	ldrlt	r2, [pc, #20]	; (804310c <HAL_NVIC_SetPriority+0x64>)
 80430f6:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80430f8:	bfaa      	itet	ge
 80430fa:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80430fe:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8043100:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8043104:	bd70      	pop	{r4, r5, r6, pc}
 8043106:	bf00      	nop
 8043108:	e000ed00 	.word	0xe000ed00
 804310c:	e000ed14 	.word	0xe000ed14

08043110 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8043110:	2800      	cmp	r0, #0
 8043112:	db08      	blt.n	8043126 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8043114:	0942      	lsrs	r2, r0, #5
 8043116:	2301      	movs	r3, #1
 8043118:	f000 001f 	and.w	r0, r0, #31
 804311c:	fa03 f000 	lsl.w	r0, r3, r0
 8043120:	4b01      	ldr	r3, [pc, #4]	; (8043128 <HAL_NVIC_EnableIRQ+0x18>)
 8043122:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8043126:	4770      	bx	lr
 8043128:	e000e100 	.word	0xe000e100

0804312c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 804312c:	2800      	cmp	r0, #0
 804312e:	db0d      	blt.n	804314c <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8043130:	0943      	lsrs	r3, r0, #5
 8043132:	2201      	movs	r2, #1
 8043134:	f000 001f 	and.w	r0, r0, #31
 8043138:	fa02 f000 	lsl.w	r0, r2, r0
 804313c:	3320      	adds	r3, #32
 804313e:	4a04      	ldr	r2, [pc, #16]	; (8043150 <HAL_NVIC_DisableIRQ+0x24>)
 8043140:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8043144:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8043148:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 804314c:	4770      	bx	lr
 804314e:	bf00      	nop
 8043150:	e000e100 	.word	0xe000e100

08043154 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8043154:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8043158:	4905      	ldr	r1, [pc, #20]	; (8043170 <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 804315a:	4b06      	ldr	r3, [pc, #24]	; (8043174 <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 804315c:	68ca      	ldr	r2, [r1, #12]
 804315e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8043162:	4313      	orrs	r3, r2
 8043164:	60cb      	str	r3, [r1, #12]
 8043166:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 804316a:	bf00      	nop
 804316c:	e7fd      	b.n	804316a <HAL_NVIC_SystemReset+0x16>
 804316e:	bf00      	nop
 8043170:	e000ed00 	.word	0xe000ed00
 8043174:	05fa0004 	.word	0x05fa0004

08043178 <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8043178:	2800      	cmp	r0, #0
 804317a:	db09      	blt.n	8043190 <HAL_NVIC_ClearPendingIRQ+0x18>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 804317c:	0943      	lsrs	r3, r0, #5
 804317e:	2201      	movs	r2, #1
 8043180:	f000 001f 	and.w	r0, r0, #31
 8043184:	fa02 f000 	lsl.w	r0, r2, r0
 8043188:	3360      	adds	r3, #96	; 0x60
 804318a:	4a02      	ldr	r2, [pc, #8]	; (8043194 <HAL_NVIC_ClearPendingIRQ+0x1c>)
 804318c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 8043190:	4770      	bx	lr
 8043192:	bf00      	nop
 8043194:	e000e100 	.word	0xe000e100

08043198 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8043198:	6803      	ldr	r3, [r0, #0]
 804319a:	b2da      	uxtb	r2, r3
 804319c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80431a0:	f023 0303 	bic.w	r3, r3, #3
 80431a4:	2118      	movs	r1, #24
 80431a6:	3a10      	subs	r2, #16
 80431a8:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80431ac:	4904      	ldr	r1, [pc, #16]	; (80431c0 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 80431ae:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80431b0:	bf88      	it	hi
 80431b2:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80431b4:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80431b6:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80431b8:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 80431ba:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80431bc:	4770      	bx	lr
 80431be:	bf00      	nop
 80431c0:	0804f058 	.word	0x0804f058

080431c4 <HAL_DMA_Init>:
{
 80431c4:	b570      	push	{r4, r5, r6, lr}
 80431c6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80431c8:	f7ff ff56 	bl	8043078 <HAL_GetTick>
 80431cc:	4605      	mov	r5, r0
  if(hdma == NULL)
 80431ce:	2c00      	cmp	r4, #0
 80431d0:	d071      	beq.n	80432b6 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 80431d2:	2300      	movs	r3, #0
 80431d4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80431d8:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80431da:	2302      	movs	r3, #2
 80431dc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80431e0:	6813      	ldr	r3, [r2, #0]
 80431e2:	f023 0301 	bic.w	r3, r3, #1
 80431e6:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80431e8:	6821      	ldr	r1, [r4, #0]
 80431ea:	680b      	ldr	r3, [r1, #0]
 80431ec:	07d8      	lsls	r0, r3, #31
 80431ee:	d43c      	bmi.n	804326a <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 80431f0:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80431f2:	4d32      	ldr	r5, [pc, #200]	; (80432bc <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80431f4:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80431f6:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80431f8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80431fc:	4313      	orrs	r3, r2
 80431fe:	68e2      	ldr	r2, [r4, #12]
 8043200:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8043202:	6922      	ldr	r2, [r4, #16]
 8043204:	4313      	orrs	r3, r2
 8043206:	6962      	ldr	r2, [r4, #20]
 8043208:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 804320a:	69e2      	ldr	r2, [r4, #28]
 804320c:	4303      	orrs	r3, r0
 804320e:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8043210:	6a22      	ldr	r2, [r4, #32]
 8043212:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8043214:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8043216:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8043218:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 804321c:	bf02      	ittt	eq
 804321e:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8043222:	4335      	orreq	r5, r6
 8043224:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8043226:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8043228:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 804322a:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 804322c:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8043230:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8043234:	d10b      	bne.n	804324e <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8043236:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8043238:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 804323a:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 804323c:	b13d      	cbz	r5, 804324e <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 804323e:	b9f8      	cbnz	r0, 8043280 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8043240:	2a01      	cmp	r2, #1
 8043242:	d02d      	beq.n	80432a0 <HAL_DMA_Init+0xdc>
 8043244:	d301      	bcc.n	804324a <HAL_DMA_Init+0x86>
 8043246:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8043248:	d101      	bne.n	804324e <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 804324a:	01ea      	lsls	r2, r5, #7
 804324c:	d42b      	bmi.n	80432a6 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 804324e:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8043250:	4620      	mov	r0, r4
 8043252:	f7ff ffa1 	bl	8043198 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8043256:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8043258:	233f      	movs	r3, #63	; 0x3f
 804325a:	4093      	lsls	r3, r2
 804325c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 804325e:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8043260:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8043262:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8043264:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8043268:	e009      	b.n	804327e <HAL_DMA_Init+0xba>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 804326a:	f7ff ff05 	bl	8043078 <HAL_GetTick>
 804326e:	1b40      	subs	r0, r0, r5
 8043270:	2805      	cmp	r0, #5
 8043272:	d9b9      	bls.n	80431e8 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8043274:	2320      	movs	r3, #32
 8043276:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8043278:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 804327a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 804327e:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8043280:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8043284:	d113      	bne.n	80432ae <HAL_DMA_Init+0xea>
    switch (tmp)
 8043286:	2a03      	cmp	r2, #3
 8043288:	d8e1      	bhi.n	804324e <HAL_DMA_Init+0x8a>
 804328a:	a001      	add	r0, pc, #4	; (adr r0, 8043290 <HAL_DMA_Init+0xcc>)
 804328c:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8043290:	080432a7 	.word	0x080432a7
 8043294:	0804324b 	.word	0x0804324b
 8043298:	080432a7 	.word	0x080432a7
 804329c:	080432a1 	.word	0x080432a1
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80432a0:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80432a4:	d1d3      	bne.n	804324e <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80432a6:	2340      	movs	r3, #64	; 0x40
 80432a8:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80432aa:	2001      	movs	r0, #1
 80432ac:	e7e5      	b.n	804327a <HAL_DMA_Init+0xb6>
    switch (tmp)
 80432ae:	2a02      	cmp	r2, #2
 80432b0:	d9f9      	bls.n	80432a6 <HAL_DMA_Init+0xe2>
 80432b2:	2a03      	cmp	r2, #3
 80432b4:	e7c8      	b.n	8043248 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 80432b6:	2001      	movs	r0, #1
 80432b8:	e7e1      	b.n	804327e <HAL_DMA_Init+0xba>
 80432ba:	bf00      	nop
 80432bc:	f010803f 	.word	0xf010803f

080432c0 <HAL_DMA_DeInit>:
{
 80432c0:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 80432c2:	4605      	mov	r5, r0
 80432c4:	b320      	cbz	r0, 8043310 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80432c6:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 80432ca:	b2e4      	uxtb	r4, r4
 80432cc:	2c02      	cmp	r4, #2
 80432ce:	d01d      	beq.n	804330c <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 80432d0:	6803      	ldr	r3, [r0, #0]
 80432d2:	681a      	ldr	r2, [r3, #0]
 80432d4:	f022 0201 	bic.w	r2, r2, #1
  hdma->Instance->CR   = 0U;
 80432d8:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 80432da:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = 0x00000021U;
 80432dc:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 80432de:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 80432e0:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 80432e2:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 80432e4:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 80432e6:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 80432e8:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80432ea:	f7ff ff55 	bl	8043198 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80432ee:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80432f0:	233f      	movs	r3, #63	; 0x3f
 80432f2:	4093      	lsls	r3, r2
  hdma->XferHalfCpltCallback = NULL;
 80432f4:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 80432f8:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;
 80432fc:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8043300:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8043302:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8043304:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8043308:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
    return HAL_BUSY;
 804330c:	4620      	mov	r0, r4
 804330e:	e000      	b.n	8043312 <HAL_DMA_DeInit+0x52>
    return HAL_ERROR;
 8043310:	2001      	movs	r0, #1
}
 8043312:	bd38      	pop	{r3, r4, r5, pc}

08043314 <HAL_DMA_Start_IT>:
{
 8043314:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8043316:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 804331a:	2c01      	cmp	r4, #1
 804331c:	d032      	beq.n	8043384 <HAL_DMA_Start_IT+0x70>
 804331e:	2401      	movs	r4, #1
 8043320:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8043324:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8043328:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 804332a:	2c01      	cmp	r4, #1
 804332c:	f04f 0500 	mov.w	r5, #0
 8043330:	f04f 0402 	mov.w	r4, #2
 8043334:	d124      	bne.n	8043380 <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8043336:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 804333a:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 804333c:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 804333e:	6825      	ldr	r5, [r4, #0]
 8043340:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8043344:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8043346:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8043348:	6883      	ldr	r3, [r0, #8]
 804334a:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 804334c:	bf0e      	itee	eq
 804334e:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8043350:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8043352:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8043354:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8043356:	bf08      	it	eq
 8043358:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 804335a:	233f      	movs	r3, #63	; 0x3f
 804335c:	4093      	lsls	r3, r2
 804335e:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8043360:	6823      	ldr	r3, [r4, #0]
 8043362:	f043 0316 	orr.w	r3, r3, #22
 8043366:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8043368:	6c03      	ldr	r3, [r0, #64]	; 0x40
 804336a:	b11b      	cbz	r3, 8043374 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 804336c:	6823      	ldr	r3, [r4, #0]
 804336e:	f043 0308 	orr.w	r3, r3, #8
 8043372:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8043374:	6823      	ldr	r3, [r4, #0]
 8043376:	f043 0301 	orr.w	r3, r3, #1
 804337a:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 804337c:	2000      	movs	r0, #0
}
 804337e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8043380:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8043384:	2002      	movs	r0, #2
 8043386:	e7fa      	b.n	804337e <HAL_DMA_Start_IT+0x6a>

08043388 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8043388:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 804338c:	2b02      	cmp	r3, #2
 804338e:	d003      	beq.n	8043398 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8043390:	2380      	movs	r3, #128	; 0x80
 8043392:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8043394:	2001      	movs	r0, #1
 8043396:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8043398:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 804339a:	2305      	movs	r3, #5
 804339c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80433a0:	6813      	ldr	r3, [r2, #0]
 80433a2:	f023 0301 	bic.w	r3, r3, #1
 80433a6:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80433a8:	2000      	movs	r0, #0
}
 80433aa:	4770      	bx	lr

080433ac <HAL_DMA_IRQHandler>:
{
 80433ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 80433ae:	2300      	movs	r3, #0
 80433b0:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80433b2:	4b5c      	ldr	r3, [pc, #368]	; (8043524 <HAL_DMA_IRQHandler+0x178>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80433b4:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80433b6:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80433b8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80433ba:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80433bc:	2208      	movs	r2, #8
 80433be:	409a      	lsls	r2, r3
 80433c0:	4232      	tst	r2, r6
{
 80433c2:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80433c4:	d00c      	beq.n	80433e0 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80433c6:	6801      	ldr	r1, [r0, #0]
 80433c8:	6808      	ldr	r0, [r1, #0]
 80433ca:	0740      	lsls	r0, r0, #29
 80433cc:	d508      	bpl.n	80433e0 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80433ce:	6808      	ldr	r0, [r1, #0]
 80433d0:	f020 0004 	bic.w	r0, r0, #4
 80433d4:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80433d6:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80433d8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80433da:	f042 0201 	orr.w	r2, r2, #1
 80433de:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80433e0:	2201      	movs	r2, #1
 80433e2:	409a      	lsls	r2, r3
 80433e4:	4232      	tst	r2, r6
 80433e6:	d008      	beq.n	80433fa <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80433e8:	6821      	ldr	r1, [r4, #0]
 80433ea:	6949      	ldr	r1, [r1, #20]
 80433ec:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80433ee:	bf41      	itttt	mi
 80433f0:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80433f2:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80433f4:	f042 0202 	orrmi.w	r2, r2, #2
 80433f8:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80433fa:	2204      	movs	r2, #4
 80433fc:	409a      	lsls	r2, r3
 80433fe:	4232      	tst	r2, r6
 8043400:	d008      	beq.n	8043414 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8043402:	6821      	ldr	r1, [r4, #0]
 8043404:	6809      	ldr	r1, [r1, #0]
 8043406:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8043408:	bf41      	itttt	mi
 804340a:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 804340c:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 804340e:	f042 0204 	orrmi.w	r2, r2, #4
 8043412:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8043414:	2210      	movs	r2, #16
 8043416:	409a      	lsls	r2, r3
 8043418:	4232      	tst	r2, r6
 804341a:	d010      	beq.n	804343e <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 804341c:	6823      	ldr	r3, [r4, #0]
 804341e:	6819      	ldr	r1, [r3, #0]
 8043420:	0709      	lsls	r1, r1, #28
 8043422:	d50c      	bpl.n	804343e <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8043424:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8043426:	681a      	ldr	r2, [r3, #0]
 8043428:	0350      	lsls	r0, r2, #13
 804342a:	d537      	bpl.n	804349c <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 804342c:	681b      	ldr	r3, [r3, #0]
 804342e:	0319      	lsls	r1, r3, #12
 8043430:	d401      	bmi.n	8043436 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8043432:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8043434:	e000      	b.n	8043438 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8043436:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8043438:	b10b      	cbz	r3, 804343e <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 804343a:	4620      	mov	r0, r4
 804343c:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 804343e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8043440:	2220      	movs	r2, #32
 8043442:	408a      	lsls	r2, r1
 8043444:	4232      	tst	r2, r6
 8043446:	d03a      	beq.n	80434be <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8043448:	6823      	ldr	r3, [r4, #0]
 804344a:	6818      	ldr	r0, [r3, #0]
 804344c:	06c6      	lsls	r6, r0, #27
 804344e:	d536      	bpl.n	80434be <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8043450:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8043452:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8043456:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8043458:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 804345a:	d127      	bne.n	80434ac <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 804345c:	f022 0216 	bic.w	r2, r2, #22
 8043460:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8043462:	695a      	ldr	r2, [r3, #20]
 8043464:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8043468:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 804346a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 804346c:	b90a      	cbnz	r2, 8043472 <HAL_DMA_IRQHandler+0xc6>
 804346e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8043470:	b11a      	cbz	r2, 804347a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8043472:	681a      	ldr	r2, [r3, #0]
 8043474:	f022 0208 	bic.w	r2, r2, #8
 8043478:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 804347a:	233f      	movs	r3, #63	; 0x3f
 804347c:	408b      	lsls	r3, r1
 804347e:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8043480:	2300      	movs	r3, #0
 8043482:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8043486:	2301      	movs	r3, #1
 8043488:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 804348c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 804348e:	2b00      	cmp	r3, #0
 8043490:	d045      	beq.n	804351e <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8043492:	4620      	mov	r0, r4
}
 8043494:	b003      	add	sp, #12
 8043496:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 804349a:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 804349c:	681a      	ldr	r2, [r3, #0]
 804349e:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80434a0:	bf5e      	ittt	pl
 80434a2:	681a      	ldrpl	r2, [r3, #0]
 80434a4:	f022 0208 	bicpl.w	r2, r2, #8
 80434a8:	601a      	strpl	r2, [r3, #0]
 80434aa:	e7c2      	b.n	8043432 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80434ac:	0350      	lsls	r0, r2, #13
 80434ae:	d527      	bpl.n	8043500 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80434b0:	681b      	ldr	r3, [r3, #0]
 80434b2:	0319      	lsls	r1, r3, #12
 80434b4:	d431      	bmi.n	804351a <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 80434b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 80434b8:	b10b      	cbz	r3, 80434be <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 80434ba:	4620      	mov	r0, r4
 80434bc:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80434be:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80434c0:	b36b      	cbz	r3, 804351e <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80434c2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80434c4:	07da      	lsls	r2, r3, #31
 80434c6:	d519      	bpl.n	80434fc <HAL_DMA_IRQHandler+0x150>
      hdma->State = HAL_DMA_STATE_ABORT;
 80434c8:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 80434ca:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 80434cc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80434d0:	6813      	ldr	r3, [r2, #0]
 80434d2:	f023 0301 	bic.w	r3, r3, #1
 80434d6:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80434d8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80434dc:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 80434e0:	9b01      	ldr	r3, [sp, #4]
 80434e2:	3301      	adds	r3, #1
 80434e4:	42bb      	cmp	r3, r7
 80434e6:	9301      	str	r3, [sp, #4]
 80434e8:	d802      	bhi.n	80434f0 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80434ea:	6813      	ldr	r3, [r2, #0]
 80434ec:	07db      	lsls	r3, r3, #31
 80434ee:	d4f7      	bmi.n	80434e0 <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 80434f0:	2300      	movs	r3, #0
 80434f2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80434f6:	2301      	movs	r3, #1
 80434f8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80434fc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80434fe:	e7c6      	b.n	804348e <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8043500:	681a      	ldr	r2, [r3, #0]
 8043502:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8043506:	d108      	bne.n	804351a <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8043508:	6819      	ldr	r1, [r3, #0]
 804350a:	f021 0110 	bic.w	r1, r1, #16
 804350e:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8043510:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8043512:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8043516:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 804351a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 804351c:	e7cc      	b.n	80434b8 <HAL_DMA_IRQHandler+0x10c>
}
 804351e:	b003      	add	sp, #12
 8043520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8043522:	bf00      	nop
 8043524:	2000108c 	.word	0x2000108c

08043528 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8043528:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 804352a:	4770      	bx	lr

0804352c <FLASH_Program_DoubleWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 804352c:	4909      	ldr	r1, [pc, #36]	; (8043554 <FLASH_Program_DoubleWord+0x28>)
{
 804352e:	b510      	push	{r4, lr}
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8043530:	690c      	ldr	r4, [r1, #16]
 8043532:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8043536:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8043538:	690c      	ldr	r4, [r1, #16]
 804353a:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 804353e:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 8043540:	690c      	ldr	r4, [r1, #16]
 8043542:	f044 0401 	orr.w	r4, r4, #1
 8043546:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8043548:	6002      	str	r2, [r0, #0]
  __ASM volatile ("isb 0xF":::"memory");
 804354a:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 804354e:	6043      	str	r3, [r0, #4]
}
 8043550:	bd10      	pop	{r4, pc}
 8043552:	bf00      	nop
 8043554:	40023c00 	.word	0x40023c00

08043558 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8043558:	4b07      	ldr	r3, [pc, #28]	; (8043578 <FLASH_Program_Word+0x20>)
 804355a:	691a      	ldr	r2, [r3, #16]
 804355c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8043560:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8043562:	691a      	ldr	r2, [r3, #16]
 8043564:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8043568:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 804356a:	691a      	ldr	r2, [r3, #16]
 804356c:	f042 0201 	orr.w	r2, r2, #1
 8043570:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 8043572:	6001      	str	r1, [r0, #0]
}
 8043574:	4770      	bx	lr
 8043576:	bf00      	nop
 8043578:	40023c00 	.word	0x40023c00

0804357c <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 804357c:	4b07      	ldr	r3, [pc, #28]	; (804359c <FLASH_Program_HalfWord+0x20>)
 804357e:	691a      	ldr	r2, [r3, #16]
 8043580:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8043584:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8043586:	691a      	ldr	r2, [r3, #16]
 8043588:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 804358c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 804358e:	691a      	ldr	r2, [r3, #16]
 8043590:	f042 0201 	orr.w	r2, r2, #1
 8043594:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 8043596:	8001      	strh	r1, [r0, #0]
}
 8043598:	4770      	bx	lr
 804359a:	bf00      	nop
 804359c:	40023c00 	.word	0x40023c00

080435a0 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80435a0:	4b1a      	ldr	r3, [pc, #104]	; (804360c <FLASH_SetErrorCode+0x6c>)
 80435a2:	68da      	ldr	r2, [r3, #12]
 80435a4:	06d2      	lsls	r2, r2, #27
 80435a6:	d506      	bpl.n	80435b6 <FLASH_SetErrorCode+0x16>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80435a8:	4919      	ldr	r1, [pc, #100]	; (8043610 <FLASH_SetErrorCode+0x70>)
 80435aa:	69ca      	ldr	r2, [r1, #28]
 80435ac:	f042 0210 	orr.w	r2, r2, #16
 80435b0:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80435b2:	2210      	movs	r2, #16
 80435b4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80435b6:	68da      	ldr	r2, [r3, #12]
 80435b8:	0690      	lsls	r0, r2, #26
 80435ba:	d506      	bpl.n	80435ca <FLASH_SetErrorCode+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80435bc:	4914      	ldr	r1, [pc, #80]	; (8043610 <FLASH_SetErrorCode+0x70>)
 80435be:	69ca      	ldr	r2, [r1, #28]
 80435c0:	f042 0208 	orr.w	r2, r2, #8
 80435c4:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80435c6:	2220      	movs	r2, #32
 80435c8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80435ca:	4b10      	ldr	r3, [pc, #64]	; (804360c <FLASH_SetErrorCode+0x6c>)
 80435cc:	68da      	ldr	r2, [r3, #12]
 80435ce:	0651      	lsls	r1, r2, #25
 80435d0:	d506      	bpl.n	80435e0 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80435d2:	490f      	ldr	r1, [pc, #60]	; (8043610 <FLASH_SetErrorCode+0x70>)
 80435d4:	69ca      	ldr	r2, [r1, #28]
 80435d6:	f042 0204 	orr.w	r2, r2, #4
 80435da:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80435dc:	2240      	movs	r2, #64	; 0x40
 80435de:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80435e0:	68da      	ldr	r2, [r3, #12]
 80435e2:	0612      	lsls	r2, r2, #24
 80435e4:	d506      	bpl.n	80435f4 <FLASH_SetErrorCode+0x54>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80435e6:	490a      	ldr	r1, [pc, #40]	; (8043610 <FLASH_SetErrorCode+0x70>)
 80435e8:	69ca      	ldr	r2, [r1, #28]
 80435ea:	f042 0202 	orr.w	r2, r2, #2
 80435ee:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80435f0:	2280      	movs	r2, #128	; 0x80
 80435f2:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80435f4:	4a05      	ldr	r2, [pc, #20]	; (804360c <FLASH_SetErrorCode+0x6c>)
 80435f6:	68d3      	ldr	r3, [r2, #12]
 80435f8:	079b      	lsls	r3, r3, #30
 80435fa:	d506      	bpl.n	804360a <FLASH_SetErrorCode+0x6a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80435fc:	4904      	ldr	r1, [pc, #16]	; (8043610 <FLASH_SetErrorCode+0x70>)
 80435fe:	69cb      	ldr	r3, [r1, #28]
 8043600:	f043 0320 	orr.w	r3, r3, #32
 8043604:	61cb      	str	r3, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8043606:	2302      	movs	r3, #2
 8043608:	60d3      	str	r3, [r2, #12]
  }
}
 804360a:	4770      	bx	lr
 804360c:	40023c00 	.word	0x40023c00
 8043610:	2000d6e8 	.word	0x2000d6e8

08043614 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8043614:	4b06      	ldr	r3, [pc, #24]	; (8043630 <HAL_FLASH_Unlock+0x1c>)
 8043616:	691a      	ldr	r2, [r3, #16]
 8043618:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 804361a:	bfbf      	itttt	lt
 804361c:	4a05      	ldrlt	r2, [pc, #20]	; (8043634 <HAL_FLASH_Unlock+0x20>)
 804361e:	605a      	strlt	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8043620:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 8043624:	605a      	strlt	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8043626:	bfba      	itte	lt
 8043628:	6918      	ldrlt	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 804362a:	0fc0      	lsrlt	r0, r0, #31
 804362c:	2000      	movge	r0, #0
}
 804362e:	4770      	bx	lr
 8043630:	40023c00 	.word	0x40023c00
 8043634:	45670123 	.word	0x45670123

08043638 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 8043638:	4a03      	ldr	r2, [pc, #12]	; (8043648 <HAL_FLASH_Lock+0x10>)
 804363a:	6913      	ldr	r3, [r2, #16]
 804363c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8043640:	6113      	str	r3, [r2, #16]
}
 8043642:	2000      	movs	r0, #0
 8043644:	4770      	bx	lr
 8043646:	bf00      	nop
 8043648:	40023c00 	.word	0x40023c00

0804364c <HAL_FLASH_GetError>:
   return pFlash.ErrorCode;
 804364c:	4b01      	ldr	r3, [pc, #4]	; (8043654 <HAL_FLASH_GetError+0x8>)
 804364e:	69d8      	ldr	r0, [r3, #28]
}  
 8043650:	4770      	bx	lr
 8043652:	bf00      	nop
 8043654:	2000d6e8 	.word	0x2000d6e8

08043658 <FLASH_WaitForLastOperation>:
{ 
 8043658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 804365a:	4b12      	ldr	r3, [pc, #72]	; (80436a4 <FLASH_WaitForLastOperation+0x4c>)
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 804365c:	4c12      	ldr	r4, [pc, #72]	; (80436a8 <FLASH_WaitForLastOperation+0x50>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 804365e:	2200      	movs	r2, #0
{ 
 8043660:	4605      	mov	r5, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8043662:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 8043664:	f7ff fd08 	bl	8043078 <HAL_GetTick>
 8043668:	4626      	mov	r6, r4
 804366a:	4607      	mov	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 804366c:	68e3      	ldr	r3, [r4, #12]
 804366e:	03da      	lsls	r2, r3, #15
 8043670:	d40c      	bmi.n	804368c <FLASH_WaitForLastOperation+0x34>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8043672:	68e3      	ldr	r3, [r4, #12]
 8043674:	07db      	lsls	r3, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8043676:	bf44      	itt	mi
 8043678:	2301      	movmi	r3, #1
 804367a:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 804367c:	68f0      	ldr	r0, [r6, #12]
 804367e:	f010 00f2 	ands.w	r0, r0, #242	; 0xf2
 8043682:	d007      	beq.n	8043694 <FLASH_WaitForLastOperation+0x3c>
    FLASH_SetErrorCode();
 8043684:	f7ff ff8c 	bl	80435a0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8043688:	2001      	movs	r0, #1
 804368a:	e003      	b.n	8043694 <FLASH_WaitForLastOperation+0x3c>
    if(Timeout != HAL_MAX_DELAY)
 804368c:	1c69      	adds	r1, r5, #1
 804368e:	d0ed      	beq.n	804366c <FLASH_WaitForLastOperation+0x14>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8043690:	b90d      	cbnz	r5, 8043696 <FLASH_WaitForLastOperation+0x3e>
        return HAL_TIMEOUT;
 8043692:	2003      	movs	r0, #3
}  
 8043694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8043696:	f7ff fcef 	bl	8043078 <HAL_GetTick>
 804369a:	1bc0      	subs	r0, r0, r7
 804369c:	42a8      	cmp	r0, r5
 804369e:	d9e5      	bls.n	804366c <FLASH_WaitForLastOperation+0x14>
 80436a0:	e7f7      	b.n	8043692 <FLASH_WaitForLastOperation+0x3a>
 80436a2:	bf00      	nop
 80436a4:	2000d6e8 	.word	0x2000d6e8
 80436a8:	40023c00 	.word	0x40023c00

080436ac <HAL_FLASH_Program>:
{
 80436ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 80436b0:	4d1f      	ldr	r5, [pc, #124]	; (8043730 <HAL_FLASH_Program+0x84>)
{
 80436b2:	4698      	mov	r8, r3
  __HAL_LOCK(&pFlash);
 80436b4:	7e2b      	ldrb	r3, [r5, #24]
 80436b6:	2b01      	cmp	r3, #1
{
 80436b8:	4607      	mov	r7, r0
 80436ba:	460e      	mov	r6, r1
 80436bc:	4614      	mov	r4, r2
  __HAL_LOCK(&pFlash);
 80436be:	d035      	beq.n	804372c <HAL_FLASH_Program+0x80>
 80436c0:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80436c2:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80436c6:	762b      	strb	r3, [r5, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80436c8:	f7ff ffc6 	bl	8043658 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80436cc:	b9b0      	cbnz	r0, 80436fc <HAL_FLASH_Program+0x50>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80436ce:	b9cf      	cbnz	r7, 8043704 <HAL_FLASH_Program+0x58>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80436d0:	4b18      	ldr	r3, [pc, #96]	; (8043734 <HAL_FLASH_Program+0x88>)
 80436d2:	691a      	ldr	r2, [r3, #16]
 80436d4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80436d8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80436da:	691a      	ldr	r2, [r3, #16]
 80436dc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80436de:	691a      	ldr	r2, [r3, #16]
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80436e0:	b2e4      	uxtb	r4, r4
  FLASH->CR |= FLASH_CR_PG;
 80436e2:	f042 0201 	orr.w	r2, r2, #1
 80436e6:	611a      	str	r2, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 80436e8:	7034      	strb	r4, [r6, #0]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80436ea:	f24c 3050 	movw	r0, #50000	; 0xc350
 80436ee:	f7ff ffb3 	bl	8043658 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 80436f2:	4a10      	ldr	r2, [pc, #64]	; (8043734 <HAL_FLASH_Program+0x88>)
 80436f4:	6913      	ldr	r3, [r2, #16]
 80436f6:	f023 0301 	bic.w	r3, r3, #1
 80436fa:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 80436fc:	2300      	movs	r3, #0
 80436fe:	762b      	strb	r3, [r5, #24]
}
 8043700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8043704:	2f01      	cmp	r7, #1
 8043706:	d104      	bne.n	8043712 <HAL_FLASH_Program+0x66>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8043708:	b2a1      	uxth	r1, r4
 804370a:	4630      	mov	r0, r6
 804370c:	f7ff ff36 	bl	804357c <FLASH_Program_HalfWord>
 8043710:	e7eb      	b.n	80436ea <HAL_FLASH_Program+0x3e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8043712:	2f02      	cmp	r7, #2
 8043714:	d104      	bne.n	8043720 <HAL_FLASH_Program+0x74>
      FLASH_Program_Word(Address, (uint32_t) Data);
 8043716:	4621      	mov	r1, r4
 8043718:	4630      	mov	r0, r6
 804371a:	f7ff ff1d 	bl	8043558 <FLASH_Program_Word>
 804371e:	e7e4      	b.n	80436ea <HAL_FLASH_Program+0x3e>
      FLASH_Program_DoubleWord(Address, Data);
 8043720:	4622      	mov	r2, r4
 8043722:	4643      	mov	r3, r8
 8043724:	4630      	mov	r0, r6
 8043726:	f7ff ff01 	bl	804352c <FLASH_Program_DoubleWord>
 804372a:	e7de      	b.n	80436ea <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
 804372c:	2002      	movs	r0, #2
 804372e:	e7e7      	b.n	8043700 <HAL_FLASH_Program+0x54>
 8043730:	2000d6e8 	.word	0x2000d6e8
 8043734:	40023c00 	.word	0x40023c00

08043738 <FLASH_MassErase.isra.0>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8043738:	4b07      	ldr	r3, [pc, #28]	; (8043758 <FLASH_MassErase.isra.0+0x20>)
 804373a:	691a      	ldr	r2, [r3, #16]
 804373c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8043740:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 8043742:	691a      	ldr	r2, [r3, #16]
 8043744:	f042 0204 	orr.w	r2, r2, #4
 8043748:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 804374a:	691a      	ldr	r2, [r3, #16]
 804374c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8043750:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8043754:	6118      	str	r0, [r3, #16]
}
 8043756:	4770      	bx	lr
 8043758:	40023c00 	.word	0x40023c00

0804375c <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 804375c:	b139      	cbz	r1, 804376e <FLASH_Erase_Sector+0x12>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 804375e:	2901      	cmp	r1, #1
 8043760:	d01c      	beq.n	804379c <FLASH_Erase_Sector+0x40>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8043762:	2902      	cmp	r1, #2
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8043764:	bf0c      	ite	eq
 8043766:	f44f 7100 	moveq.w	r1, #512	; 0x200
 804376a:	f44f 7140 	movne.w	r1, #768	; 0x300
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 804376e:	4b0d      	ldr	r3, [pc, #52]	; (80437a4 <FLASH_Erase_Sector+0x48>)
 8043770:	691a      	ldr	r2, [r3, #16]
 8043772:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8043776:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8043778:	691a      	ldr	r2, [r3, #16]
 804377a:	4311      	orrs	r1, r2
 804377c:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 804377e:	691a      	ldr	r2, [r3, #16]
 8043780:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8043784:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8043786:	691a      	ldr	r2, [r3, #16]
 8043788:	f042 0202 	orr.w	r2, r2, #2
 804378c:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8043790:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8043792:	691a      	ldr	r2, [r3, #16]
 8043794:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8043798:	611a      	str	r2, [r3, #16]
}
 804379a:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 804379c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80437a0:	e7e5      	b.n	804376e <FLASH_Erase_Sector+0x12>
 80437a2:	bf00      	nop
 80437a4:	40023c00 	.word	0x40023c00

080437a8 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 80437a8:	4b14      	ldr	r3, [pc, #80]	; (80437fc <FLASH_FlushCaches+0x54>)
 80437aa:	681a      	ldr	r2, [r3, #0]
 80437ac:	0591      	lsls	r1, r2, #22
 80437ae:	d50f      	bpl.n	80437d0 <FLASH_FlushCaches+0x28>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80437b0:	681a      	ldr	r2, [r3, #0]
 80437b2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80437b6:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80437b8:	681a      	ldr	r2, [r3, #0]
 80437ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80437be:	601a      	str	r2, [r3, #0]
 80437c0:	681a      	ldr	r2, [r3, #0]
 80437c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80437c6:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80437c8:	681a      	ldr	r2, [r3, #0]
 80437ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80437ce:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80437d0:	4b0a      	ldr	r3, [pc, #40]	; (80437fc <FLASH_FlushCaches+0x54>)
 80437d2:	681a      	ldr	r2, [r3, #0]
 80437d4:	0552      	lsls	r2, r2, #21
 80437d6:	d50f      	bpl.n	80437f8 <FLASH_FlushCaches+0x50>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80437d8:	681a      	ldr	r2, [r3, #0]
 80437da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80437de:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80437e0:	681a      	ldr	r2, [r3, #0]
 80437e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80437e6:	601a      	str	r2, [r3, #0]
 80437e8:	681a      	ldr	r2, [r3, #0]
 80437ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80437ee:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80437f0:	681a      	ldr	r2, [r3, #0]
 80437f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80437f6:	601a      	str	r2, [r3, #0]
  }
}
 80437f8:	4770      	bx	lr
 80437fa:	bf00      	nop
 80437fc:	40023c00 	.word	0x40023c00

08043800 <HAL_FLASHEx_Erase>:
{
 8043800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8043804:	4e23      	ldr	r6, [pc, #140]	; (8043894 <HAL_FLASHEx_Erase+0x94>)
 8043806:	7e33      	ldrb	r3, [r6, #24]
 8043808:	2b01      	cmp	r3, #1
{
 804380a:	4604      	mov	r4, r0
 804380c:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 804380e:	d03f      	beq.n	8043890 <HAL_FLASHEx_Erase+0x90>
 8043810:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8043812:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8043816:	7633      	strb	r3, [r6, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8043818:	f7ff ff1e 	bl	8043658 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 804381c:	4605      	mov	r5, r0
 804381e:	b9a8      	cbnz	r0, 804384c <HAL_FLASHEx_Erase+0x4c>
    *SectorError = 0xFFFFFFFFU;
 8043820:	f04f 33ff 	mov.w	r3, #4294967295
 8043824:	f8c8 3000 	str.w	r3, [r8]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8043828:	6823      	ldr	r3, [r4, #0]
 804382a:	2b01      	cmp	r3, #1
 804382c:	d113      	bne.n	8043856 <HAL_FLASHEx_Erase+0x56>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 804382e:	7c20      	ldrb	r0, [r4, #16]
 8043830:	f7ff ff82 	bl	8043738 <FLASH_MassErase.isra.0>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8043834:	f24c 3050 	movw	r0, #50000	; 0xc350
 8043838:	f7ff ff0e 	bl	8043658 <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 804383c:	4a16      	ldr	r2, [pc, #88]	; (8043898 <HAL_FLASHEx_Erase+0x98>)
 804383e:	6913      	ldr	r3, [r2, #16]
 8043840:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8043844:	4605      	mov	r5, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 8043846:	6113      	str	r3, [r2, #16]
    FLASH_FlushCaches();    
 8043848:	f7ff ffae 	bl	80437a8 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 804384c:	2300      	movs	r3, #0
 804384e:	7633      	strb	r3, [r6, #24]
}
 8043850:	4628      	mov	r0, r5
 8043852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8043856:	68a7      	ldr	r7, [r4, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8043858:	f8df 903c 	ldr.w	r9, [pc, #60]	; 8043898 <HAL_FLASHEx_Erase+0x98>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 804385c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8043860:	4413      	add	r3, r2
 8043862:	42bb      	cmp	r3, r7
 8043864:	d9f0      	bls.n	8043848 <HAL_FLASHEx_Erase+0x48>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8043866:	7c21      	ldrb	r1, [r4, #16]
 8043868:	4638      	mov	r0, r7
 804386a:	f7ff ff77 	bl	804375c <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 804386e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8043872:	f7ff fef1 	bl	8043658 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8043876:	f8d9 3010 	ldr.w	r3, [r9, #16]
 804387a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 804387e:	f8c9 3010 	str.w	r3, [r9, #16]
        if(status != HAL_OK) 
 8043882:	b118      	cbz	r0, 804388c <HAL_FLASHEx_Erase+0x8c>
          *SectorError = index;
 8043884:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8043888:	4605      	mov	r5, r0
          break;
 804388a:	e7dd      	b.n	8043848 <HAL_FLASHEx_Erase+0x48>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 804388c:	3701      	adds	r7, #1
 804388e:	e7e5      	b.n	804385c <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 8043890:	2502      	movs	r5, #2
 8043892:	e7dd      	b.n	8043850 <HAL_FLASHEx_Erase+0x50>
 8043894:	2000d6e8 	.word	0x2000d6e8
 8043898:	40023c00 	.word	0x40023c00

0804389c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 804389c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80438a0:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80438a2:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80438a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8043a54 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80438a8:	4a68      	ldr	r2, [pc, #416]	; (8043a4c <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80438aa:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8043a58 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80438ae:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80438b0:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80438b2:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80438b4:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 80438b6:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80438b8:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 80438ba:	42ac      	cmp	r4, r5
 80438bc:	f040 80b0 	bne.w	8043a20 <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80438c0:	684c      	ldr	r4, [r1, #4]
 80438c2:	f024 0c10 	bic.w	ip, r4, #16
 80438c6:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80438ca:	2603      	movs	r6, #3
 80438cc:	f10c 37ff 	add.w	r7, ip, #4294967295
 80438d0:	fa06 f60e 	lsl.w	r6, r6, lr
 80438d4:	2f01      	cmp	r7, #1
 80438d6:	ea6f 0606 	mvn.w	r6, r6
 80438da:	d811      	bhi.n	8043900 <HAL_GPIO_Init+0x64>
        temp = GPIOx->OSPEEDR; 
 80438dc:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80438de:	ea07 0a06 	and.w	sl, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80438e2:	68cf      	ldr	r7, [r1, #12]
 80438e4:	fa07 f70e 	lsl.w	r7, r7, lr
 80438e8:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80438ec:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80438ee:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80438f0:	ea27 0a05 	bic.w	sl, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80438f4:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80438f8:	409f      	lsls	r7, r3
 80438fa:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 80438fe:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8043900:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8043902:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8043906:	688f      	ldr	r7, [r1, #8]
 8043908:	fa07 f70e 	lsl.w	r7, r7, lr
 804390c:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8043910:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8043914:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8043916:	d116      	bne.n	8043946 <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8043918:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 804391c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8043920:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8043924:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8043928:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 804392c:	f04f 0c0f 	mov.w	ip, #15
 8043930:	fa0c fc0b 	lsl.w	ip, ip, fp
 8043934:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8043938:	690f      	ldr	r7, [r1, #16]
 804393a:	fa07 f70b 	lsl.w	r7, r7, fp
 804393e:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8043942:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8043946:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8043948:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 804394a:	f004 0703 	and.w	r7, r4, #3
 804394e:	fa07 fe0e 	lsl.w	lr, r7, lr
 8043952:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8043956:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8043958:	00e6      	lsls	r6, r4, #3
 804395a:	d561      	bpl.n	8043a20 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 804395c:	f04f 0b00 	mov.w	fp, #0
 8043960:	f8cd b00c 	str.w	fp, [sp, #12]
 8043964:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8043968:	4e39      	ldr	r6, [pc, #228]	; (8043a50 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 804396a:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 804396e:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8043972:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8043976:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 804397a:	9703      	str	r7, [sp, #12]
 804397c:	9f03      	ldr	r7, [sp, #12]
 804397e:	f023 0703 	bic.w	r7, r3, #3
 8043982:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8043986:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 804398a:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 804398e:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8043992:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8043996:	f04f 0c0f 	mov.w	ip, #15
 804399a:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 804399e:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80439a0:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80439a4:	d043      	beq.n	8043a2e <HAL_GPIO_Init+0x192>
 80439a6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80439aa:	42b0      	cmp	r0, r6
 80439ac:	d041      	beq.n	8043a32 <HAL_GPIO_Init+0x196>
 80439ae:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80439b2:	42b0      	cmp	r0, r6
 80439b4:	d03f      	beq.n	8043a36 <HAL_GPIO_Init+0x19a>
 80439b6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80439ba:	42b0      	cmp	r0, r6
 80439bc:	d03d      	beq.n	8043a3a <HAL_GPIO_Init+0x19e>
 80439be:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80439c2:	42b0      	cmp	r0, r6
 80439c4:	d03b      	beq.n	8043a3e <HAL_GPIO_Init+0x1a2>
 80439c6:	4548      	cmp	r0, r9
 80439c8:	d03b      	beq.n	8043a42 <HAL_GPIO_Init+0x1a6>
 80439ca:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80439ce:	42b0      	cmp	r0, r6
 80439d0:	d039      	beq.n	8043a46 <HAL_GPIO_Init+0x1aa>
 80439d2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80439d6:	42b0      	cmp	r0, r6
 80439d8:	bf14      	ite	ne
 80439da:	2608      	movne	r6, #8
 80439dc:	2607      	moveq	r6, #7
 80439de:	fa06 f60e 	lsl.w	r6, r6, lr
 80439e2:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 80439e6:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 80439e8:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80439ea:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80439ec:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80439f0:	bf0c      	ite	eq
 80439f2:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80439f4:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 80439f6:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 80439f8:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80439fa:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80439fe:	bf0c      	ite	eq
 8043a00:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8043a02:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8043a04:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8043a06:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8043a08:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8043a0c:	bf0c      	ite	eq
 8043a0e:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8043a10:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8043a12:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8043a14:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8043a16:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8043a18:	bf54      	ite	pl
 8043a1a:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8043a1c:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8043a1e:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8043a20:	3301      	adds	r3, #1
 8043a22:	2b10      	cmp	r3, #16
 8043a24:	f47f af45 	bne.w	80438b2 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8043a28:	b005      	add	sp, #20
 8043a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8043a2e:	465e      	mov	r6, fp
 8043a30:	e7d5      	b.n	80439de <HAL_GPIO_Init+0x142>
 8043a32:	2601      	movs	r6, #1
 8043a34:	e7d3      	b.n	80439de <HAL_GPIO_Init+0x142>
 8043a36:	2602      	movs	r6, #2
 8043a38:	e7d1      	b.n	80439de <HAL_GPIO_Init+0x142>
 8043a3a:	2603      	movs	r6, #3
 8043a3c:	e7cf      	b.n	80439de <HAL_GPIO_Init+0x142>
 8043a3e:	2604      	movs	r6, #4
 8043a40:	e7cd      	b.n	80439de <HAL_GPIO_Init+0x142>
 8043a42:	2605      	movs	r6, #5
 8043a44:	e7cb      	b.n	80439de <HAL_GPIO_Init+0x142>
 8043a46:	2606      	movs	r6, #6
 8043a48:	e7c9      	b.n	80439de <HAL_GPIO_Init+0x142>
 8043a4a:	bf00      	nop
 8043a4c:	40013c00 	.word	0x40013c00
 8043a50:	40020000 	.word	0x40020000
 8043a54:	40023800 	.word	0x40023800
 8043a58:	40021400 	.word	0x40021400

08043a5c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8043a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8043a60:	4d40      	ldr	r5, [pc, #256]	; (8043b64 <HAL_GPIO_DeInit+0x108>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8043a62:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8043b6c <HAL_GPIO_DeInit+0x110>
 8043a66:	f8df a108 	ldr.w	sl, [pc, #264]	; 8043b70 <HAL_GPIO_DeInit+0x114>
 8043a6a:	f8df b108 	ldr.w	fp, [pc, #264]	; 8043b74 <HAL_GPIO_DeInit+0x118>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8043a6e:	2200      	movs	r2, #0
    ioposition = 0x01U << position;
 8043a70:	2301      	movs	r3, #1
 8043a72:	fa03 fe02 	lsl.w	lr, r3, r2
    iocurrent = (GPIO_Pin) & ioposition;
 8043a76:	ea0e 0401 	and.w	r4, lr, r1
    if(iocurrent == ioposition)
 8043a7a:	45a6      	cmp	lr, r4
 8043a7c:	d15f      	bne.n	8043b3e <HAL_GPIO_DeInit+0xe2>
 8043a7e:	f022 0603 	bic.w	r6, r2, #3
 8043a82:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8043a86:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8043a8a:	f002 0c03 	and.w	ip, r2, #3
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8043a8e:	4b36      	ldr	r3, [pc, #216]	; (8043b68 <HAL_GPIO_DeInit+0x10c>)
      tmp = SYSCFG->EXTICR[position >> 2U];
 8043a90:	f8d6 8008 	ldr.w	r8, [r6, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8043a94:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8043a98:	270f      	movs	r7, #15
 8043a9a:	fa07 f70c 	lsl.w	r7, r7, ip
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8043a9e:	4298      	cmp	r0, r3
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8043aa0:	ea07 0808 	and.w	r8, r7, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8043aa4:	d050      	beq.n	8043b48 <HAL_GPIO_DeInit+0xec>
 8043aa6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8043aaa:	4298      	cmp	r0, r3
 8043aac:	d04e      	beq.n	8043b4c <HAL_GPIO_DeInit+0xf0>
 8043aae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8043ab2:	4298      	cmp	r0, r3
 8043ab4:	d04c      	beq.n	8043b50 <HAL_GPIO_DeInit+0xf4>
 8043ab6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8043aba:	4298      	cmp	r0, r3
 8043abc:	d04a      	beq.n	8043b54 <HAL_GPIO_DeInit+0xf8>
 8043abe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8043ac2:	4298      	cmp	r0, r3
 8043ac4:	d048      	beq.n	8043b58 <HAL_GPIO_DeInit+0xfc>
 8043ac6:	4548      	cmp	r0, r9
 8043ac8:	d048      	beq.n	8043b5c <HAL_GPIO_DeInit+0x100>
 8043aca:	4550      	cmp	r0, sl
 8043acc:	d048      	beq.n	8043b60 <HAL_GPIO_DeInit+0x104>
 8043ace:	4558      	cmp	r0, fp
 8043ad0:	bf0c      	ite	eq
 8043ad2:	2307      	moveq	r3, #7
 8043ad4:	2308      	movne	r3, #8
 8043ad6:	fa03 f30c 	lsl.w	r3, r3, ip
 8043ada:	4543      	cmp	r3, r8
 8043adc:	d110      	bne.n	8043b00 <HAL_GPIO_DeInit+0xa4>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8043ade:	682b      	ldr	r3, [r5, #0]
 8043ae0:	43e4      	mvns	r4, r4
 8043ae2:	4023      	ands	r3, r4
 8043ae4:	602b      	str	r3, [r5, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8043ae6:	686b      	ldr	r3, [r5, #4]
 8043ae8:	4023      	ands	r3, r4
 8043aea:	606b      	str	r3, [r5, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8043aec:	68ab      	ldr	r3, [r5, #8]
 8043aee:	4023      	ands	r3, r4
 8043af0:	60ab      	str	r3, [r5, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8043af2:	68eb      	ldr	r3, [r5, #12]
 8043af4:	401c      	ands	r4, r3
 8043af6:	60ec      	str	r4, [r5, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8043af8:	68b3      	ldr	r3, [r6, #8]
 8043afa:	ea23 0707 	bic.w	r7, r3, r7
 8043afe:	60b7      	str	r7, [r6, #8]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8043b00:	0056      	lsls	r6, r2, #1
 8043b02:	2303      	movs	r3, #3
 8043b04:	6804      	ldr	r4, [r0, #0]
 8043b06:	40b3      	lsls	r3, r6
 8043b08:	43db      	mvns	r3, r3
 8043b0a:	401c      	ands	r4, r3
 8043b0c:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8043b0e:	08d4      	lsrs	r4, r2, #3
 8043b10:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8043b14:	f002 0c07 	and.w	ip, r2, #7
 8043b18:	6a26      	ldr	r6, [r4, #32]
 8043b1a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8043b1e:	270f      	movs	r7, #15
 8043b20:	fa07 f70c 	lsl.w	r7, r7, ip
 8043b24:	ea26 0707 	bic.w	r7, r6, r7
 8043b28:	6227      	str	r7, [r4, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8043b2a:	68c4      	ldr	r4, [r0, #12]
 8043b2c:	401c      	ands	r4, r3
 8043b2e:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8043b30:	6844      	ldr	r4, [r0, #4]
 8043b32:	ea24 040e 	bic.w	r4, r4, lr
 8043b36:	6044      	str	r4, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8043b38:	6884      	ldr	r4, [r0, #8]
 8043b3a:	4023      	ands	r3, r4
 8043b3c:	6083      	str	r3, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8043b3e:	3201      	adds	r2, #1
 8043b40:	2a10      	cmp	r2, #16
 8043b42:	d195      	bne.n	8043a70 <HAL_GPIO_DeInit+0x14>
    }
  }
}
 8043b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8043b48:	2300      	movs	r3, #0
 8043b4a:	e7c4      	b.n	8043ad6 <HAL_GPIO_DeInit+0x7a>
 8043b4c:	2301      	movs	r3, #1
 8043b4e:	e7c2      	b.n	8043ad6 <HAL_GPIO_DeInit+0x7a>
 8043b50:	2302      	movs	r3, #2
 8043b52:	e7c0      	b.n	8043ad6 <HAL_GPIO_DeInit+0x7a>
 8043b54:	2303      	movs	r3, #3
 8043b56:	e7be      	b.n	8043ad6 <HAL_GPIO_DeInit+0x7a>
 8043b58:	2304      	movs	r3, #4
 8043b5a:	e7bc      	b.n	8043ad6 <HAL_GPIO_DeInit+0x7a>
 8043b5c:	2305      	movs	r3, #5
 8043b5e:	e7ba      	b.n	8043ad6 <HAL_GPIO_DeInit+0x7a>
 8043b60:	2306      	movs	r3, #6
 8043b62:	e7b8      	b.n	8043ad6 <HAL_GPIO_DeInit+0x7a>
 8043b64:	40013c00 	.word	0x40013c00
 8043b68:	40020000 	.word	0x40020000
 8043b6c:	40021400 	.word	0x40021400
 8043b70:	40021800 	.word	0x40021800
 8043b74:	40021c00 	.word	0x40021c00

08043b78 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8043b78:	6903      	ldr	r3, [r0, #16]
 8043b7a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8043b7c:	bf14      	ite	ne
 8043b7e:	2001      	movne	r0, #1
 8043b80:	2000      	moveq	r0, #0
 8043b82:	4770      	bx	lr

08043b84 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8043b84:	b10a      	cbz	r2, 8043b8a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8043b86:	6181      	str	r1, [r0, #24]
  }
}
 8043b88:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8043b8a:	0409      	lsls	r1, r1, #16
 8043b8c:	e7fb      	b.n	8043b86 <HAL_GPIO_WritePin+0x2>
	...

08043b90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8043b90:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8043b92:	4b04      	ldr	r3, [pc, #16]	; (8043ba4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8043b94:	6959      	ldr	r1, [r3, #20]
 8043b96:	4201      	tst	r1, r0
 8043b98:	d002      	beq.n	8043ba0 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8043b9a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8043b9c:	f009 f836 	bl	804cc0c <HAL_GPIO_EXTI_Callback>
  }
}
 8043ba0:	bd08      	pop	{r3, pc}
 8043ba2:	bf00      	nop
 8043ba4:	40013c00 	.word	0x40013c00

08043ba8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8043ba8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8043bac:	4604      	mov	r4, r0
 8043bae:	b908      	cbnz	r0, 8043bb4 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8043bb0:	2001      	movs	r0, #1
 8043bb2:	e03f      	b.n	8043c34 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8043bb4:	6803      	ldr	r3, [r0, #0]
 8043bb6:	07dd      	lsls	r5, r3, #31
 8043bb8:	d410      	bmi.n	8043bdc <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8043bba:	6823      	ldr	r3, [r4, #0]
 8043bbc:	0798      	lsls	r0, r3, #30
 8043bbe:	d45a      	bmi.n	8043c76 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8043bc0:	6823      	ldr	r3, [r4, #0]
 8043bc2:	071a      	lsls	r2, r3, #28
 8043bc4:	f100 809c 	bmi.w	8043d00 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8043bc8:	6823      	ldr	r3, [r4, #0]
 8043bca:	075b      	lsls	r3, r3, #29
 8043bcc:	f100 80ba 	bmi.w	8043d44 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8043bd0:	69a0      	ldr	r0, [r4, #24]
 8043bd2:	2800      	cmp	r0, #0
 8043bd4:	f040 811b 	bne.w	8043e0e <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8043bd8:	2000      	movs	r0, #0
 8043bda:	e02b      	b.n	8043c34 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8043bdc:	4ba7      	ldr	r3, [pc, #668]	; (8043e7c <HAL_RCC_OscConfig+0x2d4>)
 8043bde:	689a      	ldr	r2, [r3, #8]
 8043be0:	f002 020c 	and.w	r2, r2, #12
 8043be4:	2a04      	cmp	r2, #4
 8043be6:	d007      	beq.n	8043bf8 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8043be8:	689a      	ldr	r2, [r3, #8]
 8043bea:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8043bee:	2a08      	cmp	r2, #8
 8043bf0:	d10a      	bne.n	8043c08 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8043bf2:	685b      	ldr	r3, [r3, #4]
 8043bf4:	0259      	lsls	r1, r3, #9
 8043bf6:	d507      	bpl.n	8043c08 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8043bf8:	4ba0      	ldr	r3, [pc, #640]	; (8043e7c <HAL_RCC_OscConfig+0x2d4>)
 8043bfa:	681b      	ldr	r3, [r3, #0]
 8043bfc:	039a      	lsls	r2, r3, #14
 8043bfe:	d5dc      	bpl.n	8043bba <HAL_RCC_OscConfig+0x12>
 8043c00:	6863      	ldr	r3, [r4, #4]
 8043c02:	2b00      	cmp	r3, #0
 8043c04:	d1d9      	bne.n	8043bba <HAL_RCC_OscConfig+0x12>
 8043c06:	e7d3      	b.n	8043bb0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8043c08:	6863      	ldr	r3, [r4, #4]
 8043c0a:	4d9c      	ldr	r5, [pc, #624]	; (8043e7c <HAL_RCC_OscConfig+0x2d4>)
 8043c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8043c10:	d113      	bne.n	8043c3a <HAL_RCC_OscConfig+0x92>
 8043c12:	682b      	ldr	r3, [r5, #0]
 8043c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8043c18:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8043c1a:	f7ff fa2d 	bl	8043078 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8043c1e:	4d97      	ldr	r5, [pc, #604]	; (8043e7c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8043c20:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8043c22:	682b      	ldr	r3, [r5, #0]
 8043c24:	039b      	lsls	r3, r3, #14
 8043c26:	d4c8      	bmi.n	8043bba <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8043c28:	f7ff fa26 	bl	8043078 <HAL_GetTick>
 8043c2c:	1b80      	subs	r0, r0, r6
 8043c2e:	2864      	cmp	r0, #100	; 0x64
 8043c30:	d9f7      	bls.n	8043c22 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8043c32:	2003      	movs	r0, #3
}
 8043c34:	b002      	add	sp, #8
 8043c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8043c3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8043c3e:	d104      	bne.n	8043c4a <HAL_RCC_OscConfig+0xa2>
 8043c40:	682b      	ldr	r3, [r5, #0]
 8043c42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8043c46:	602b      	str	r3, [r5, #0]
 8043c48:	e7e3      	b.n	8043c12 <HAL_RCC_OscConfig+0x6a>
 8043c4a:	682a      	ldr	r2, [r5, #0]
 8043c4c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8043c50:	602a      	str	r2, [r5, #0]
 8043c52:	682a      	ldr	r2, [r5, #0]
 8043c54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8043c58:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8043c5a:	2b00      	cmp	r3, #0
 8043c5c:	d1dd      	bne.n	8043c1a <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8043c5e:	f7ff fa0b 	bl	8043078 <HAL_GetTick>
 8043c62:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8043c64:	682b      	ldr	r3, [r5, #0]
 8043c66:	039f      	lsls	r7, r3, #14
 8043c68:	d5a7      	bpl.n	8043bba <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8043c6a:	f7ff fa05 	bl	8043078 <HAL_GetTick>
 8043c6e:	1b80      	subs	r0, r0, r6
 8043c70:	2864      	cmp	r0, #100	; 0x64
 8043c72:	d9f7      	bls.n	8043c64 <HAL_RCC_OscConfig+0xbc>
 8043c74:	e7dd      	b.n	8043c32 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8043c76:	4b81      	ldr	r3, [pc, #516]	; (8043e7c <HAL_RCC_OscConfig+0x2d4>)
 8043c78:	689a      	ldr	r2, [r3, #8]
 8043c7a:	f012 0f0c 	tst.w	r2, #12
 8043c7e:	d007      	beq.n	8043c90 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8043c80:	689a      	ldr	r2, [r3, #8]
 8043c82:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8043c86:	2a08      	cmp	r2, #8
 8043c88:	d111      	bne.n	8043cae <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8043c8a:	685b      	ldr	r3, [r3, #4]
 8043c8c:	025e      	lsls	r6, r3, #9
 8043c8e:	d40e      	bmi.n	8043cae <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8043c90:	4b7a      	ldr	r3, [pc, #488]	; (8043e7c <HAL_RCC_OscConfig+0x2d4>)
 8043c92:	681a      	ldr	r2, [r3, #0]
 8043c94:	0795      	lsls	r5, r2, #30
 8043c96:	d502      	bpl.n	8043c9e <HAL_RCC_OscConfig+0xf6>
 8043c98:	68e2      	ldr	r2, [r4, #12]
 8043c9a:	2a01      	cmp	r2, #1
 8043c9c:	d188      	bne.n	8043bb0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8043c9e:	681a      	ldr	r2, [r3, #0]
 8043ca0:	6921      	ldr	r1, [r4, #16]
 8043ca2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8043ca6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8043caa:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8043cac:	e788      	b.n	8043bc0 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8043cae:	68e2      	ldr	r2, [r4, #12]
 8043cb0:	4b73      	ldr	r3, [pc, #460]	; (8043e80 <HAL_RCC_OscConfig+0x2d8>)
 8043cb2:	b1b2      	cbz	r2, 8043ce2 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8043cb4:	2201      	movs	r2, #1
 8043cb6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8043cb8:	f7ff f9de 	bl	8043078 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8043cbc:	4d6f      	ldr	r5, [pc, #444]	; (8043e7c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8043cbe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8043cc0:	682b      	ldr	r3, [r5, #0]
 8043cc2:	0798      	lsls	r0, r3, #30
 8043cc4:	d507      	bpl.n	8043cd6 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8043cc6:	682b      	ldr	r3, [r5, #0]
 8043cc8:	6922      	ldr	r2, [r4, #16]
 8043cca:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8043cce:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8043cd2:	602b      	str	r3, [r5, #0]
 8043cd4:	e774      	b.n	8043bc0 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8043cd6:	f7ff f9cf 	bl	8043078 <HAL_GetTick>
 8043cda:	1b80      	subs	r0, r0, r6
 8043cdc:	2802      	cmp	r0, #2
 8043cde:	d9ef      	bls.n	8043cc0 <HAL_RCC_OscConfig+0x118>
 8043ce0:	e7a7      	b.n	8043c32 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8043ce2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8043ce4:	f7ff f9c8 	bl	8043078 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8043ce8:	4d64      	ldr	r5, [pc, #400]	; (8043e7c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8043cea:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8043cec:	682b      	ldr	r3, [r5, #0]
 8043cee:	0799      	lsls	r1, r3, #30
 8043cf0:	f57f af66 	bpl.w	8043bc0 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8043cf4:	f7ff f9c0 	bl	8043078 <HAL_GetTick>
 8043cf8:	1b80      	subs	r0, r0, r6
 8043cfa:	2802      	cmp	r0, #2
 8043cfc:	d9f6      	bls.n	8043cec <HAL_RCC_OscConfig+0x144>
 8043cfe:	e798      	b.n	8043c32 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8043d00:	6962      	ldr	r2, [r4, #20]
 8043d02:	4b60      	ldr	r3, [pc, #384]	; (8043e84 <HAL_RCC_OscConfig+0x2dc>)
 8043d04:	b17a      	cbz	r2, 8043d26 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8043d06:	2201      	movs	r2, #1
 8043d08:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8043d0a:	f7ff f9b5 	bl	8043078 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8043d0e:	4d5b      	ldr	r5, [pc, #364]	; (8043e7c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8043d10:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8043d12:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8043d14:	079f      	lsls	r7, r3, #30
 8043d16:	f53f af57 	bmi.w	8043bc8 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8043d1a:	f7ff f9ad 	bl	8043078 <HAL_GetTick>
 8043d1e:	1b80      	subs	r0, r0, r6
 8043d20:	2802      	cmp	r0, #2
 8043d22:	d9f6      	bls.n	8043d12 <HAL_RCC_OscConfig+0x16a>
 8043d24:	e785      	b.n	8043c32 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8043d26:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8043d28:	f7ff f9a6 	bl	8043078 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8043d2c:	4d53      	ldr	r5, [pc, #332]	; (8043e7c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8043d2e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8043d30:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8043d32:	0798      	lsls	r0, r3, #30
 8043d34:	f57f af48 	bpl.w	8043bc8 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8043d38:	f7ff f99e 	bl	8043078 <HAL_GetTick>
 8043d3c:	1b80      	subs	r0, r0, r6
 8043d3e:	2802      	cmp	r0, #2
 8043d40:	d9f6      	bls.n	8043d30 <HAL_RCC_OscConfig+0x188>
 8043d42:	e776      	b.n	8043c32 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8043d44:	4b4d      	ldr	r3, [pc, #308]	; (8043e7c <HAL_RCC_OscConfig+0x2d4>)
 8043d46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8043d48:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8043d4c:	d128      	bne.n	8043da0 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8043d4e:	9201      	str	r2, [sp, #4]
 8043d50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8043d52:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8043d56:	641a      	str	r2, [r3, #64]	; 0x40
 8043d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8043d5e:	9301      	str	r3, [sp, #4]
 8043d60:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8043d62:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8043d64:	4d48      	ldr	r5, [pc, #288]	; (8043e88 <HAL_RCC_OscConfig+0x2e0>)
 8043d66:	682b      	ldr	r3, [r5, #0]
 8043d68:	05d9      	lsls	r1, r3, #23
 8043d6a:	d51b      	bpl.n	8043da4 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8043d6c:	68a3      	ldr	r3, [r4, #8]
 8043d6e:	4d43      	ldr	r5, [pc, #268]	; (8043e7c <HAL_RCC_OscConfig+0x2d4>)
 8043d70:	2b01      	cmp	r3, #1
 8043d72:	d127      	bne.n	8043dc4 <HAL_RCC_OscConfig+0x21c>
 8043d74:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8043d76:	f043 0301 	orr.w	r3, r3, #1
 8043d7a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8043d7c:	f7ff f97c 	bl	8043078 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8043d80:	4d3e      	ldr	r5, [pc, #248]	; (8043e7c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8043d82:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8043d84:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8043d88:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8043d8a:	079b      	lsls	r3, r3, #30
 8043d8c:	d539      	bpl.n	8043e02 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8043d8e:	2e00      	cmp	r6, #0
 8043d90:	f43f af1e 	beq.w	8043bd0 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8043d94:	4a39      	ldr	r2, [pc, #228]	; (8043e7c <HAL_RCC_OscConfig+0x2d4>)
 8043d96:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8043d98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8043d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8043d9e:	e717      	b.n	8043bd0 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8043da0:	2600      	movs	r6, #0
 8043da2:	e7df      	b.n	8043d64 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8043da4:	682b      	ldr	r3, [r5, #0]
 8043da6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8043daa:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8043dac:	f7ff f964 	bl	8043078 <HAL_GetTick>
 8043db0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8043db2:	682b      	ldr	r3, [r5, #0]
 8043db4:	05da      	lsls	r2, r3, #23
 8043db6:	d4d9      	bmi.n	8043d6c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8043db8:	f7ff f95e 	bl	8043078 <HAL_GetTick>
 8043dbc:	1bc0      	subs	r0, r0, r7
 8043dbe:	2802      	cmp	r0, #2
 8043dc0:	d9f7      	bls.n	8043db2 <HAL_RCC_OscConfig+0x20a>
 8043dc2:	e736      	b.n	8043c32 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8043dc4:	2b05      	cmp	r3, #5
 8043dc6:	d104      	bne.n	8043dd2 <HAL_RCC_OscConfig+0x22a>
 8043dc8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8043dca:	f043 0304 	orr.w	r3, r3, #4
 8043dce:	672b      	str	r3, [r5, #112]	; 0x70
 8043dd0:	e7d0      	b.n	8043d74 <HAL_RCC_OscConfig+0x1cc>
 8043dd2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8043dd4:	f022 0201 	bic.w	r2, r2, #1
 8043dd8:	672a      	str	r2, [r5, #112]	; 0x70
 8043dda:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8043ddc:	f022 0204 	bic.w	r2, r2, #4
 8043de0:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8043de2:	2b00      	cmp	r3, #0
 8043de4:	d1ca      	bne.n	8043d7c <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8043de6:	f7ff f947 	bl	8043078 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8043dea:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8043dee:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8043df0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8043df2:	0798      	lsls	r0, r3, #30
 8043df4:	d5cb      	bpl.n	8043d8e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8043df6:	f7ff f93f 	bl	8043078 <HAL_GetTick>
 8043dfa:	1bc0      	subs	r0, r0, r7
 8043dfc:	4540      	cmp	r0, r8
 8043dfe:	d9f7      	bls.n	8043df0 <HAL_RCC_OscConfig+0x248>
 8043e00:	e717      	b.n	8043c32 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8043e02:	f7ff f939 	bl	8043078 <HAL_GetTick>
 8043e06:	1bc0      	subs	r0, r0, r7
 8043e08:	4540      	cmp	r0, r8
 8043e0a:	d9bd      	bls.n	8043d88 <HAL_RCC_OscConfig+0x1e0>
 8043e0c:	e711      	b.n	8043c32 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8043e0e:	4d1b      	ldr	r5, [pc, #108]	; (8043e7c <HAL_RCC_OscConfig+0x2d4>)
 8043e10:	68ab      	ldr	r3, [r5, #8]
 8043e12:	f003 030c 	and.w	r3, r3, #12
 8043e16:	2b08      	cmp	r3, #8
 8043e18:	d047      	beq.n	8043eaa <HAL_RCC_OscConfig+0x302>
 8043e1a:	4e1c      	ldr	r6, [pc, #112]	; (8043e8c <HAL_RCC_OscConfig+0x2e4>)
 8043e1c:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8043e1e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8043e20:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8043e22:	d135      	bne.n	8043e90 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8043e24:	f7ff f928 	bl	8043078 <HAL_GetTick>
 8043e28:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8043e2a:	682b      	ldr	r3, [r5, #0]
 8043e2c:	0199      	lsls	r1, r3, #6
 8043e2e:	d41e      	bmi.n	8043e6e <HAL_RCC_OscConfig+0x2c6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8043e30:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8043e34:	4313      	orrs	r3, r2
 8043e36:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8043e38:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8043e3c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8043e3e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8043e42:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8043e44:	4c0d      	ldr	r4, [pc, #52]	; (8043e7c <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8043e46:	0852      	lsrs	r2, r2, #1
 8043e48:	3a01      	subs	r2, #1
 8043e4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8043e4e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8043e50:	2301      	movs	r3, #1
 8043e52:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8043e54:	f7ff f910 	bl	8043078 <HAL_GetTick>
 8043e58:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8043e5a:	6823      	ldr	r3, [r4, #0]
 8043e5c:	019a      	lsls	r2, r3, #6
 8043e5e:	f53f aebb 	bmi.w	8043bd8 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8043e62:	f7ff f909 	bl	8043078 <HAL_GetTick>
 8043e66:	1b40      	subs	r0, r0, r5
 8043e68:	2802      	cmp	r0, #2
 8043e6a:	d9f6      	bls.n	8043e5a <HAL_RCC_OscConfig+0x2b2>
 8043e6c:	e6e1      	b.n	8043c32 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8043e6e:	f7ff f903 	bl	8043078 <HAL_GetTick>
 8043e72:	1bc0      	subs	r0, r0, r7
 8043e74:	2802      	cmp	r0, #2
 8043e76:	d9d8      	bls.n	8043e2a <HAL_RCC_OscConfig+0x282>
 8043e78:	e6db      	b.n	8043c32 <HAL_RCC_OscConfig+0x8a>
 8043e7a:	bf00      	nop
 8043e7c:	40023800 	.word	0x40023800
 8043e80:	42470000 	.word	0x42470000
 8043e84:	42470e80 	.word	0x42470e80
 8043e88:	40007000 	.word	0x40007000
 8043e8c:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8043e90:	f7ff f8f2 	bl	8043078 <HAL_GetTick>
 8043e94:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8043e96:	682b      	ldr	r3, [r5, #0]
 8043e98:	019b      	lsls	r3, r3, #6
 8043e9a:	f57f ae9d 	bpl.w	8043bd8 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8043e9e:	f7ff f8eb 	bl	8043078 <HAL_GetTick>
 8043ea2:	1b00      	subs	r0, r0, r4
 8043ea4:	2802      	cmp	r0, #2
 8043ea6:	d9f6      	bls.n	8043e96 <HAL_RCC_OscConfig+0x2ee>
 8043ea8:	e6c3      	b.n	8043c32 <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8043eaa:	2801      	cmp	r0, #1
 8043eac:	f43f aec2 	beq.w	8043c34 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->PLLCFGR;
 8043eb0:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8043eb2:	69e3      	ldr	r3, [r4, #28]
 8043eb4:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8043eb8:	429a      	cmp	r2, r3
 8043eba:	f47f ae79 	bne.w	8043bb0 <HAL_RCC_OscConfig+0x8>
 8043ebe:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8043ec0:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8043ec4:	4293      	cmp	r3, r2
 8043ec6:	f47f ae73 	bne.w	8043bb0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8043eca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8043ecc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8043ed0:	4003      	ands	r3, r0
 8043ed2:	4293      	cmp	r3, r2
 8043ed4:	f47f ae6c 	bne.w	8043bb0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8043ed8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8043eda:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8043ede:	4293      	cmp	r3, r2
 8043ee0:	f47f ae66 	bne.w	8043bb0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8043ee4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8043ee6:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8043eea:	1ac0      	subs	r0, r0, r3
 8043eec:	bf18      	it	ne
 8043eee:	2001      	movne	r0, #1
 8043ef0:	e6a0      	b.n	8043c34 <HAL_RCC_OscConfig+0x8c>
 8043ef2:	bf00      	nop

08043ef4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8043ef4:	4913      	ldr	r1, [pc, #76]	; (8043f44 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8043ef6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8043ef8:	688b      	ldr	r3, [r1, #8]
 8043efa:	f003 030c 	and.w	r3, r3, #12
 8043efe:	2b04      	cmp	r3, #4
 8043f00:	d003      	beq.n	8043f0a <HAL_RCC_GetSysClockFreq+0x16>
 8043f02:	2b08      	cmp	r3, #8
 8043f04:	d003      	beq.n	8043f0e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8043f06:	4810      	ldr	r0, [pc, #64]	; (8043f48 <HAL_RCC_GetSysClockFreq+0x54>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 8043f08:	e000      	b.n	8043f0c <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 8043f0a:	4810      	ldr	r0, [pc, #64]	; (8043f4c <HAL_RCC_GetSysClockFreq+0x58>)
}
 8043f0c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8043f0e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8043f10:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8043f12:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8043f14:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8043f18:	bf14      	ite	ne
 8043f1a:	480c      	ldrne	r0, [pc, #48]	; (8043f4c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8043f1c:	480a      	ldreq	r0, [pc, #40]	; (8043f48 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8043f1e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8043f22:	bf18      	it	ne
 8043f24:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8043f26:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8043f2a:	fba1 0100 	umull	r0, r1, r1, r0
 8043f2e:	f7fc ff75 	bl	8040e1c <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8043f32:	4b04      	ldr	r3, [pc, #16]	; (8043f44 <HAL_RCC_GetSysClockFreq+0x50>)
 8043f34:	685b      	ldr	r3, [r3, #4]
 8043f36:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8043f3a:	3301      	adds	r3, #1
 8043f3c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8043f3e:	fbb0 f0f3 	udiv	r0, r0, r3
 8043f42:	e7e3      	b.n	8043f0c <HAL_RCC_GetSysClockFreq+0x18>
 8043f44:	40023800 	.word	0x40023800
 8043f48:	00f42400 	.word	0x00f42400
 8043f4c:	007a1200 	.word	0x007a1200

08043f50 <HAL_RCC_ClockConfig>:
{
 8043f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8043f54:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8043f56:	4604      	mov	r4, r0
 8043f58:	b910      	cbnz	r0, 8043f60 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8043f5a:	2001      	movs	r0, #1
}
 8043f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8043f60:	4b43      	ldr	r3, [pc, #268]	; (8044070 <HAL_RCC_ClockConfig+0x120>)
 8043f62:	681a      	ldr	r2, [r3, #0]
 8043f64:	f002 020f 	and.w	r2, r2, #15
 8043f68:	428a      	cmp	r2, r1
 8043f6a:	d328      	bcc.n	8043fbe <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8043f6c:	6821      	ldr	r1, [r4, #0]
 8043f6e:	078f      	lsls	r7, r1, #30
 8043f70:	d42d      	bmi.n	8043fce <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8043f72:	07c8      	lsls	r0, r1, #31
 8043f74:	d440      	bmi.n	8043ff8 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8043f76:	4b3e      	ldr	r3, [pc, #248]	; (8044070 <HAL_RCC_ClockConfig+0x120>)
 8043f78:	681a      	ldr	r2, [r3, #0]
 8043f7a:	f002 020f 	and.w	r2, r2, #15
 8043f7e:	42aa      	cmp	r2, r5
 8043f80:	d865      	bhi.n	804404e <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8043f82:	6822      	ldr	r2, [r4, #0]
 8043f84:	0751      	lsls	r1, r2, #29
 8043f86:	d46b      	bmi.n	8044060 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8043f88:	0713      	lsls	r3, r2, #28
 8043f8a:	d507      	bpl.n	8043f9c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8043f8c:	4a39      	ldr	r2, [pc, #228]	; (8044074 <HAL_RCC_ClockConfig+0x124>)
 8043f8e:	6921      	ldr	r1, [r4, #16]
 8043f90:	6893      	ldr	r3, [r2, #8]
 8043f92:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8043f96:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8043f9a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8043f9c:	f7ff ffaa 	bl	8043ef4 <HAL_RCC_GetSysClockFreq>
 8043fa0:	4b34      	ldr	r3, [pc, #208]	; (8044074 <HAL_RCC_ClockConfig+0x124>)
 8043fa2:	4a35      	ldr	r2, [pc, #212]	; (8044078 <HAL_RCC_ClockConfig+0x128>)
 8043fa4:	689b      	ldr	r3, [r3, #8]
 8043fa6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8043faa:	5cd3      	ldrb	r3, [r2, r3]
 8043fac:	40d8      	lsrs	r0, r3
 8043fae:	4b33      	ldr	r3, [pc, #204]	; (804407c <HAL_RCC_ClockConfig+0x12c>)
 8043fb0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8043fb2:	4b33      	ldr	r3, [pc, #204]	; (8044080 <HAL_RCC_ClockConfig+0x130>)
 8043fb4:	6818      	ldr	r0, [r3, #0]
 8043fb6:	f008 fddb 	bl	804cb70 <HAL_InitTick>
  return HAL_OK;
 8043fba:	2000      	movs	r0, #0
 8043fbc:	e7ce      	b.n	8043f5c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8043fbe:	b2ca      	uxtb	r2, r1
 8043fc0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8043fc2:	681b      	ldr	r3, [r3, #0]
 8043fc4:	f003 030f 	and.w	r3, r3, #15
 8043fc8:	428b      	cmp	r3, r1
 8043fca:	d1c6      	bne.n	8043f5a <HAL_RCC_ClockConfig+0xa>
 8043fcc:	e7ce      	b.n	8043f6c <HAL_RCC_ClockConfig+0x1c>
 8043fce:	4b29      	ldr	r3, [pc, #164]	; (8044074 <HAL_RCC_ClockConfig+0x124>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8043fd0:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8043fd4:	bf1e      	ittt	ne
 8043fd6:	689a      	ldrne	r2, [r3, #8]
 8043fd8:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8043fdc:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8043fde:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8043fe0:	bf42      	ittt	mi
 8043fe2:	689a      	ldrmi	r2, [r3, #8]
 8043fe4:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8043fe8:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8043fea:	689a      	ldr	r2, [r3, #8]
 8043fec:	68a0      	ldr	r0, [r4, #8]
 8043fee:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8043ff2:	4302      	orrs	r2, r0
 8043ff4:	609a      	str	r2, [r3, #8]
 8043ff6:	e7bc      	b.n	8043f72 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8043ff8:	6862      	ldr	r2, [r4, #4]
 8043ffa:	4b1e      	ldr	r3, [pc, #120]	; (8044074 <HAL_RCC_ClockConfig+0x124>)
 8043ffc:	2a01      	cmp	r2, #1
 8043ffe:	d11c      	bne.n	804403a <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8044000:	681b      	ldr	r3, [r3, #0]
 8044002:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8044006:	d0a8      	beq.n	8043f5a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8044008:	4e1a      	ldr	r6, [pc, #104]	; (8044074 <HAL_RCC_ClockConfig+0x124>)
 804400a:	68b3      	ldr	r3, [r6, #8]
 804400c:	f023 0303 	bic.w	r3, r3, #3
 8044010:	4313      	orrs	r3, r2
 8044012:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8044014:	f7ff f830 	bl	8043078 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8044018:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 804401c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 804401e:	68b3      	ldr	r3, [r6, #8]
 8044020:	6862      	ldr	r2, [r4, #4]
 8044022:	f003 030c 	and.w	r3, r3, #12
 8044026:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 804402a:	d0a4      	beq.n	8043f76 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 804402c:	f7ff f824 	bl	8043078 <HAL_GetTick>
 8044030:	1bc0      	subs	r0, r0, r7
 8044032:	4540      	cmp	r0, r8
 8044034:	d9f3      	bls.n	804401e <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8044036:	2003      	movs	r0, #3
 8044038:	e790      	b.n	8043f5c <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 804403a:	1e91      	subs	r1, r2, #2
 804403c:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 804403e:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8044040:	d802      	bhi.n	8044048 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8044042:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8044046:	e7de      	b.n	8044006 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8044048:	f013 0f02 	tst.w	r3, #2
 804404c:	e7db      	b.n	8044006 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 804404e:	b2ea      	uxtb	r2, r5
 8044050:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8044052:	681b      	ldr	r3, [r3, #0]
 8044054:	f003 030f 	and.w	r3, r3, #15
 8044058:	42ab      	cmp	r3, r5
 804405a:	f47f af7e 	bne.w	8043f5a <HAL_RCC_ClockConfig+0xa>
 804405e:	e790      	b.n	8043f82 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8044060:	4904      	ldr	r1, [pc, #16]	; (8044074 <HAL_RCC_ClockConfig+0x124>)
 8044062:	68e0      	ldr	r0, [r4, #12]
 8044064:	688b      	ldr	r3, [r1, #8]
 8044066:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 804406a:	4303      	orrs	r3, r0
 804406c:	608b      	str	r3, [r1, #8]
 804406e:	e78b      	b.n	8043f88 <HAL_RCC_ClockConfig+0x38>
 8044070:	40023c00 	.word	0x40023c00
 8044074:	40023800 	.word	0x40023800
 8044078:	0804f02c 	.word	0x0804f02c
 804407c:	2000108c 	.word	0x2000108c
 8044080:	20001098 	.word	0x20001098

08044084 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8044084:	4b04      	ldr	r3, [pc, #16]	; (8044098 <HAL_RCC_GetPCLK1Freq+0x14>)
 8044086:	4a05      	ldr	r2, [pc, #20]	; (804409c <HAL_RCC_GetPCLK1Freq+0x18>)
 8044088:	689b      	ldr	r3, [r3, #8]
 804408a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 804408e:	5cd3      	ldrb	r3, [r2, r3]
 8044090:	4a03      	ldr	r2, [pc, #12]	; (80440a0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8044092:	6810      	ldr	r0, [r2, #0]
}
 8044094:	40d8      	lsrs	r0, r3
 8044096:	4770      	bx	lr
 8044098:	40023800 	.word	0x40023800
 804409c:	0804f03c 	.word	0x0804f03c
 80440a0:	2000108c 	.word	0x2000108c

080440a4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80440a4:	4b04      	ldr	r3, [pc, #16]	; (80440b8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80440a6:	4a05      	ldr	r2, [pc, #20]	; (80440bc <HAL_RCC_GetPCLK2Freq+0x18>)
 80440a8:	689b      	ldr	r3, [r3, #8]
 80440aa:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80440ae:	5cd3      	ldrb	r3, [r2, r3]
 80440b0:	4a03      	ldr	r2, [pc, #12]	; (80440c0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80440b2:	6810      	ldr	r0, [r2, #0]
}
 80440b4:	40d8      	lsrs	r0, r3
 80440b6:	4770      	bx	lr
 80440b8:	40023800 	.word	0x40023800
 80440bc:	0804f03c 	.word	0x0804f03c
 80440c0:	2000108c 	.word	0x2000108c

080440c4 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80440c4:	6803      	ldr	r3, [r0, #0]
 80440c6:	f013 0f05 	tst.w	r3, #5
{
 80440ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80440cc:	4605      	mov	r5, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80440ce:	d105      	bne.n	80440dc <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80440d0:	6828      	ldr	r0, [r5, #0]
 80440d2:	f010 0002 	ands.w	r0, r0, #2
 80440d6:	d128      	bne.n	804412a <HAL_RCCEx_PeriphCLKConfig+0x66>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
}
 80440d8:	b003      	add	sp, #12
 80440da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 80440dc:	4c41      	ldr	r4, [pc, #260]	; (80441e4 <HAL_RCCEx_PeriphCLKConfig+0x120>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80440de:	4e42      	ldr	r6, [pc, #264]	; (80441e8 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    __HAL_RCC_PLLI2S_DISABLE();
 80440e0:	2300      	movs	r3, #0
 80440e2:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80440e4:	f7fe ffc8 	bl	8043078 <HAL_GetTick>
 80440e8:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80440ea:	6833      	ldr	r3, [r6, #0]
 80440ec:	011b      	lsls	r3, r3, #4
 80440ee:	d415      	bmi.n	804411c <HAL_RCCEx_PeriphCLKConfig+0x58>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80440f0:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 80440f4:	071b      	lsls	r3, r3, #28
 80440f6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80440fa:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80440fe:	2301      	movs	r3, #1
 8044100:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8044102:	f7fe ffb9 	bl	8043078 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8044106:	4c38      	ldr	r4, [pc, #224]	; (80441e8 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    tickstart = HAL_GetTick();
 8044108:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 804410a:	6823      	ldr	r3, [r4, #0]
 804410c:	0118      	lsls	r0, r3, #4
 804410e:	d4df      	bmi.n	80440d0 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8044110:	f7fe ffb2 	bl	8043078 <HAL_GetTick>
 8044114:	1b80      	subs	r0, r0, r6
 8044116:	2802      	cmp	r0, #2
 8044118:	d9f7      	bls.n	804410a <HAL_RCCEx_PeriphCLKConfig+0x46>
 804411a:	e004      	b.n	8044126 <HAL_RCCEx_PeriphCLKConfig+0x62>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 804411c:	f7fe ffac 	bl	8043078 <HAL_GetTick>
 8044120:	1bc0      	subs	r0, r0, r7
 8044122:	2802      	cmp	r0, #2
 8044124:	d9e1      	bls.n	80440ea <HAL_RCCEx_PeriphCLKConfig+0x26>
        return HAL_TIMEOUT;
 8044126:	2003      	movs	r0, #3
 8044128:	e7d6      	b.n	80440d8 <HAL_RCCEx_PeriphCLKConfig+0x14>
    __HAL_RCC_PWR_CLK_ENABLE();
 804412a:	2300      	movs	r3, #0
 804412c:	9301      	str	r3, [sp, #4]
 804412e:	4b2e      	ldr	r3, [pc, #184]	; (80441e8 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    PWR->CR |= PWR_CR_DBP;
 8044130:	4c2e      	ldr	r4, [pc, #184]	; (80441ec <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8044132:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8044134:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8044138:	641a      	str	r2, [r3, #64]	; 0x40
 804413a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804413c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8044140:	9301      	str	r3, [sp, #4]
 8044142:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8044144:	6823      	ldr	r3, [r4, #0]
 8044146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 804414a:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 804414c:	f7fe ff94 	bl	8043078 <HAL_GetTick>
 8044150:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8044152:	6823      	ldr	r3, [r4, #0]
 8044154:	05d9      	lsls	r1, r3, #23
 8044156:	d51b      	bpl.n	8044190 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8044158:	4c23      	ldr	r4, [pc, #140]	; (80441e8 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 804415a:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 804415c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8044160:	d11c      	bne.n	804419c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8044162:	68eb      	ldr	r3, [r5, #12]
 8044164:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8044168:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 804416c:	4a1e      	ldr	r2, [pc, #120]	; (80441e8 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 804416e:	d134      	bne.n	80441da <HAL_RCCEx_PeriphCLKConfig+0x116>
 8044170:	6891      	ldr	r1, [r2, #8]
 8044172:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8044176:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 804417a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 804417e:	4301      	orrs	r1, r0
 8044180:	6091      	str	r1, [r2, #8]
 8044182:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8044184:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8044188:	430b      	orrs	r3, r1
 804418a:	6713      	str	r3, [r2, #112]	; 0x70
  return HAL_OK;
 804418c:	2000      	movs	r0, #0
 804418e:	e7a3      	b.n	80440d8 <HAL_RCCEx_PeriphCLKConfig+0x14>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8044190:	f7fe ff72 	bl	8043078 <HAL_GetTick>
 8044194:	1b80      	subs	r0, r0, r6
 8044196:	2802      	cmp	r0, #2
 8044198:	d9db      	bls.n	8044152 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 804419a:	e7c4      	b.n	8044126 <HAL_RCCEx_PeriphCLKConfig+0x62>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 804419c:	68ea      	ldr	r2, [r5, #12]
 804419e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80441a2:	4293      	cmp	r3, r2
 80441a4:	d0dd      	beq.n	8044162 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80441a6:	6f23      	ldr	r3, [r4, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80441a8:	4a11      	ldr	r2, [pc, #68]	; (80441f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80441aa:	2101      	movs	r1, #1
 80441ac:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80441ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80441b2:	2100      	movs	r1, #0
 80441b4:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 80441b6:	6723      	str	r3, [r4, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80441b8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80441ba:	07da      	lsls	r2, r3, #31
 80441bc:	d5d1      	bpl.n	8044162 <HAL_RCCEx_PeriphCLKConfig+0x9e>
        tickstart = HAL_GetTick();
 80441be:	f7fe ff5b 	bl	8043078 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80441c2:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80441c6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80441c8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80441ca:	079b      	lsls	r3, r3, #30
 80441cc:	d4c9      	bmi.n	8044162 <HAL_RCCEx_PeriphCLKConfig+0x9e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80441ce:	f7fe ff53 	bl	8043078 <HAL_GetTick>
 80441d2:	1b80      	subs	r0, r0, r6
 80441d4:	42b8      	cmp	r0, r7
 80441d6:	d9f7      	bls.n	80441c8 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80441d8:	e7a5      	b.n	8044126 <HAL_RCCEx_PeriphCLKConfig+0x62>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80441da:	6891      	ldr	r1, [r2, #8]
 80441dc:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80441e0:	e7ce      	b.n	8044180 <HAL_RCCEx_PeriphCLKConfig+0xbc>
 80441e2:	bf00      	nop
 80441e4:	42470068 	.word	0x42470068
 80441e8:	40023800 	.word	0x40023800
 80441ec:	40007000 	.word	0x40007000
 80441f0:	42470e40 	.word	0x42470e40

080441f4 <HAL_RTC_DeactivateAlarm>:

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80441f4:	7f03      	ldrb	r3, [r0, #28]
 80441f6:	2b01      	cmp	r3, #1
{
 80441f8:	b570      	push	{r4, r5, r6, lr}
 80441fa:	4604      	mov	r4, r0
 80441fc:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8044200:	d021      	beq.n	8044246 <HAL_RTC_DeactivateAlarm+0x52>
 8044202:	2301      	movs	r3, #1
 8044204:	7723      	strb	r3, [r4, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8044206:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8044208:	7760      	strb	r0, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 804420a:	22ca      	movs	r2, #202	; 0xca
 804420c:	625a      	str	r2, [r3, #36]	; 0x24
 804420e:	2253      	movs	r2, #83	; 0x53
 8044210:	625a      	str	r2, [r3, #36]	; 0x24

  if(Alarm == RTC_ALARM_A)
 8044212:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8044216:	689a      	ldr	r2, [r3, #8]
  if(Alarm == RTC_ALARM_A)
 8044218:	d123      	bne.n	8044262 <HAL_RTC_DeactivateAlarm+0x6e>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 804421a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 804421e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8044220:	689a      	ldr	r2, [r3, #8]
 8044222:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8044226:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8044228:	f7fe ff26 	bl	8043078 <HAL_GetTick>
 804422c:	4606      	mov	r6, r0

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 804422e:	6823      	ldr	r3, [r4, #0]
 8044230:	68dd      	ldr	r5, [r3, #12]
 8044232:	f015 0501 	ands.w	r5, r5, #1
 8044236:	d007      	beq.n	8044248 <HAL_RTC_DeactivateAlarm+0x54>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8044238:	6823      	ldr	r3, [r4, #0]
 804423a:	22ff      	movs	r2, #255	; 0xff
 804423c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 804423e:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY;
 8044240:	2301      	movs	r3, #1
 8044242:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hrtc);
 8044244:	7720      	strb	r0, [r4, #28]

  return HAL_OK;
}
 8044246:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8044248:	f7fe ff16 	bl	8043078 <HAL_GetTick>
 804424c:	1b80      	subs	r0, r0, r6
 804424e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8044252:	d9ec      	bls.n	804422e <HAL_RTC_DeactivateAlarm+0x3a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8044254:	6823      	ldr	r3, [r4, #0]
 8044256:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8044258:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 804425a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 804425c:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 804425e:	7725      	strb	r5, [r4, #28]
        return HAL_TIMEOUT;
 8044260:	e7f1      	b.n	8044246 <HAL_RTC_DeactivateAlarm+0x52>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8044262:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8044266:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc,RTC_IT_ALRB);
 8044268:	689a      	ldr	r2, [r3, #8]
 804426a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 804426e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8044270:	f7fe ff02 	bl	8043078 <HAL_GetTick>
 8044274:	4606      	mov	r6, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8044276:	6823      	ldr	r3, [r4, #0]
 8044278:	68dd      	ldr	r5, [r3, #12]
 804427a:	f015 0502 	ands.w	r5, r5, #2
 804427e:	d1db      	bne.n	8044238 <HAL_RTC_DeactivateAlarm+0x44>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8044280:	f7fe fefa 	bl	8043078 <HAL_GetTick>
 8044284:	1b80      	subs	r0, r0, r6
 8044286:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 804428a:	d9f4      	bls.n	8044276 <HAL_RTC_DeactivateAlarm+0x82>
 804428c:	e7e2      	b.n	8044254 <HAL_RTC_DeactivateAlarm+0x60>

0804428e <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 804428e:	6802      	ldr	r2, [r0, #0]
{
 8044290:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8044292:	68d3      	ldr	r3, [r2, #12]
 8044294:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8044298:	60d3      	str	r3, [r2, #12]
{
 804429a:	4604      	mov	r4, r0

    /* Get tick */
    tickstart = HAL_GetTick();
 804429c:	f7fe feec 	bl	8043078 <HAL_GetTick>
 80442a0:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80442a2:	6823      	ldr	r3, [r4, #0]
 80442a4:	68db      	ldr	r3, [r3, #12]
 80442a6:	069b      	lsls	r3, r3, #26
 80442a8:	d501      	bpl.n	80442ae <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80442aa:	2000      	movs	r0, #0
}
 80442ac:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80442ae:	f7fe fee3 	bl	8043078 <HAL_GetTick>
 80442b2:	1b40      	subs	r0, r0, r5
 80442b4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80442b8:	d9f3      	bls.n	80442a2 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 80442ba:	2003      	movs	r0, #3
 80442bc:	e7f6      	b.n	80442ac <HAL_RTC_WaitForSynchro+0x1e>

080442be <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80442be:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80442c0:	6803      	ldr	r3, [r0, #0]
 80442c2:	68da      	ldr	r2, [r3, #12]
 80442c4:	0652      	lsls	r2, r2, #25
{
 80442c6:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80442c8:	d501      	bpl.n	80442ce <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80442ca:	2000      	movs	r0, #0
}
 80442cc:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80442ce:	f04f 32ff 	mov.w	r2, #4294967295
 80442d2:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80442d4:	f7fe fed0 	bl	8043078 <HAL_GetTick>
 80442d8:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80442da:	6823      	ldr	r3, [r4, #0]
 80442dc:	68db      	ldr	r3, [r3, #12]
 80442de:	065b      	lsls	r3, r3, #25
 80442e0:	d4f3      	bmi.n	80442ca <RTC_EnterInitMode+0xc>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80442e2:	f7fe fec9 	bl	8043078 <HAL_GetTick>
 80442e6:	1b40      	subs	r0, r0, r5
 80442e8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80442ec:	d9f5      	bls.n	80442da <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 80442ee:	2003      	movs	r0, #3
 80442f0:	e7ec      	b.n	80442cc <RTC_EnterInitMode+0xe>

080442f2 <HAL_RTC_Init>:
{
 80442f2:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 80442f4:	4604      	mov	r4, r0
 80442f6:	b1b8      	cbz	r0, 8044328 <HAL_RTC_Init+0x36>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80442f8:	7f43      	ldrb	r3, [r0, #29]
 80442fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80442fe:	b913      	cbnz	r3, 8044306 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8044300:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8044302:	f008 fc4f 	bl	804cba4 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8044306:	2302      	movs	r3, #2
 8044308:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 804430a:	6823      	ldr	r3, [r4, #0]
 804430c:	22ca      	movs	r2, #202	; 0xca
 804430e:	625a      	str	r2, [r3, #36]	; 0x24
 8044310:	2253      	movs	r2, #83	; 0x53
 8044312:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8044314:	4620      	mov	r0, r4
 8044316:	f7ff ffd2 	bl	80442be <RTC_EnterInitMode>
 804431a:	6823      	ldr	r3, [r4, #0]
 804431c:	4605      	mov	r5, r0
 804431e:	b128      	cbz	r0, 804432c <HAL_RTC_Init+0x3a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8044320:	22ff      	movs	r2, #255	; 0xff
 8044322:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8044324:	2304      	movs	r3, #4
 8044326:	7763      	strb	r3, [r4, #29]
     return HAL_ERROR;
 8044328:	2501      	movs	r5, #1
 804432a:	e02e      	b.n	804438a <HAL_RTC_Init+0x98>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 804432c:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 804432e:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8044330:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8044334:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8044338:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 804433a:	6862      	ldr	r2, [r4, #4]
 804433c:	6899      	ldr	r1, [r3, #8]
 804433e:	4302      	orrs	r2, r0
 8044340:	6960      	ldr	r0, [r4, #20]
 8044342:	4302      	orrs	r2, r0
 8044344:	430a      	orrs	r2, r1
 8044346:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8044348:	68e2      	ldr	r2, [r4, #12]
 804434a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 804434c:	691a      	ldr	r2, [r3, #16]
 804434e:	68a1      	ldr	r1, [r4, #8]
 8044350:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8044354:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8044356:	68da      	ldr	r2, [r3, #12]
 8044358:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 804435c:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 804435e:	689b      	ldr	r3, [r3, #8]
 8044360:	069b      	lsls	r3, r3, #26
 8044362:	d405      	bmi.n	8044370 <HAL_RTC_Init+0x7e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8044364:	4620      	mov	r0, r4
 8044366:	f7ff ff92 	bl	804428e <HAL_RTC_WaitForSynchro>
 804436a:	b108      	cbz	r0, 8044370 <HAL_RTC_Init+0x7e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 804436c:	6823      	ldr	r3, [r4, #0]
 804436e:	e7d7      	b.n	8044320 <HAL_RTC_Init+0x2e>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8044370:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8044372:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8044374:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8044376:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 804437a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 804437c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804437e:	430a      	orrs	r2, r1
 8044380:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8044382:	22ff      	movs	r2, #255	; 0xff
 8044384:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8044386:	2301      	movs	r3, #1
 8044388:	7763      	strb	r3, [r4, #29]
}
 804438a:	4628      	mov	r0, r5
 804438c:	bd38      	pop	{r3, r4, r5, pc}

0804438e <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 804438e:	2300      	movs	r3, #0

  while(Value >= 10U)
 8044390:	2809      	cmp	r0, #9
 8044392:	d803      	bhi.n	804439c <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8044394:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8044398:	b2c0      	uxtb	r0, r0
 804439a:	4770      	bx	lr
    Value -= 10U;
 804439c:	380a      	subs	r0, #10
    bcdhigh++;
 804439e:	3301      	adds	r3, #1
    Value -= 10U;
 80443a0:	b2c0      	uxtb	r0, r0
 80443a2:	e7f5      	b.n	8044390 <RTC_ByteToBcd2+0x2>

080443a4 <HAL_RTC_SetTime>:
  __HAL_LOCK(hrtc);
 80443a4:	7f03      	ldrb	r3, [r0, #28]
 80443a6:	2b01      	cmp	r3, #1
{
 80443a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80443ac:	4606      	mov	r6, r0
 80443ae:	460f      	mov	r7, r1
 80443b0:	f04f 0502 	mov.w	r5, #2
  __HAL_LOCK(hrtc);
 80443b4:	d02e      	beq.n	8044414 <HAL_RTC_SetTime+0x70>
 80443b6:	2301      	movs	r3, #1
 80443b8:	6801      	ldr	r1, [r0, #0]
 80443ba:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80443bc:	7745      	strb	r5, [r0, #29]
 80443be:	7838      	ldrb	r0, [r7, #0]
 80443c0:	787d      	ldrb	r5, [r7, #1]
 80443c2:	78bc      	ldrb	r4, [r7, #2]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80443c4:	688b      	ldr	r3, [r1, #8]
  if(Format == RTC_FORMAT_BIN)
 80443c6:	bb42      	cbnz	r2, 804441a <HAL_RTC_SetTime+0x76>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80443c8:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sTime->TimeFormat = 0x00U;
 80443cc:	bf08      	it	eq
 80443ce:	70fb      	strbeq	r3, [r7, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80443d0:	f7ff ffdd 	bl	804438e <RTC_ByteToBcd2>
 80443d4:	4680      	mov	r8, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80443d6:	4628      	mov	r0, r5
 80443d8:	f7ff ffd9 	bl	804438e <RTC_ByteToBcd2>
 80443dc:	4602      	mov	r2, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80443de:	4620      	mov	r0, r4
 80443e0:	f7ff ffd5 	bl	804438e <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80443e4:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80443e6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80443ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80443ee:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80443f2:	23ca      	movs	r3, #202	; 0xca
 80443f4:	624b      	str	r3, [r1, #36]	; 0x24
 80443f6:	2353      	movs	r3, #83	; 0x53
 80443f8:	624b      	str	r3, [r1, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80443fa:	4630      	mov	r0, r6
 80443fc:	f7ff ff5f 	bl	80442be <RTC_EnterInitMode>
 8044400:	6833      	ldr	r3, [r6, #0]
 8044402:	4605      	mov	r5, r0
 8044404:	b1b0      	cbz	r0, 8044434 <HAL_RTC_SetTime+0x90>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8044406:	22ff      	movs	r2, #255	; 0xff
 8044408:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 804440a:	2304      	movs	r3, #4
 804440c:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 804440e:	2300      	movs	r3, #0
 8044410:	7733      	strb	r3, [r6, #28]
        return HAL_ERROR;
 8044412:	2501      	movs	r5, #1
}
 8044414:	4628      	mov	r0, r5
 8044416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 804441a:	f013 0340 	ands.w	r3, r3, #64	; 0x40
              ((uint32_t)(sTime->Minutes) << 8U) | \
 804441e:	ea4f 2505 	mov.w	r5, r5, lsl #8
      sTime->TimeFormat = 0x00U;
 8044422:	bf08      	it	eq
 8044424:	70fb      	strbeq	r3, [r7, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8044426:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 804442a:	4320      	orrs	r0, r4
              ((uint32_t)(sTime->TimeFormat) << 16U));
 804442c:	78fc      	ldrb	r4, [r7, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 804442e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8044432:	e7de      	b.n	80443f2 <HAL_RTC_SetTime+0x4e>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8044434:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 8044438:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 804443c:	601c      	str	r4, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 804443e:	689a      	ldr	r2, [r3, #8]
 8044440:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8044444:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8044446:	e9d7 2003 	ldrd	r2, r0, [r7, #12]
 804444a:	6899      	ldr	r1, [r3, #8]
 804444c:	4302      	orrs	r2, r0
 804444e:	430a      	orrs	r2, r1
 8044450:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8044452:	68da      	ldr	r2, [r3, #12]
 8044454:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8044458:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 804445a:	689b      	ldr	r3, [r3, #8]
 804445c:	069b      	lsls	r3, r3, #26
 804445e:	d40a      	bmi.n	8044476 <HAL_RTC_SetTime+0xd2>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8044460:	4630      	mov	r0, r6
 8044462:	f7ff ff14 	bl	804428e <HAL_RTC_WaitForSynchro>
 8044466:	b130      	cbz	r0, 8044476 <HAL_RTC_SetTime+0xd2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8044468:	6833      	ldr	r3, [r6, #0]
 804446a:	22ff      	movs	r2, #255	; 0xff
 804446c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 804446e:	2304      	movs	r3, #4
 8044470:	7773      	strb	r3, [r6, #29]
        __HAL_UNLOCK(hrtc);
 8044472:	7735      	strb	r5, [r6, #28]
 8044474:	e7cd      	b.n	8044412 <HAL_RTC_SetTime+0x6e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8044476:	6833      	ldr	r3, [r6, #0]
 8044478:	22ff      	movs	r2, #255	; 0xff
 804447a:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 804447c:	2301      	movs	r3, #1
 804447e:	7773      	strb	r3, [r6, #29]
   __HAL_UNLOCK(hrtc);
 8044480:	2300      	movs	r3, #0
 8044482:	7733      	strb	r3, [r6, #28]
   return HAL_OK;
 8044484:	e7c6      	b.n	8044414 <HAL_RTC_SetTime+0x70>

08044486 <HAL_RTC_SetDate>:
{
 8044486:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 8044488:	7f03      	ldrb	r3, [r0, #28]
 804448a:	2b01      	cmp	r3, #1
{
 804448c:	4606      	mov	r6, r0
 804448e:	f04f 0502 	mov.w	r5, #2
 __HAL_LOCK(hrtc);
 8044492:	d030      	beq.n	80444f6 <HAL_RTC_SetDate+0x70>
 8044494:	2301      	movs	r3, #1
 8044496:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8044498:	7745      	strb	r5, [r0, #29]
 804449a:	780d      	ldrb	r5, [r1, #0]
 804449c:	78c8      	ldrb	r0, [r1, #3]
 804449e:	784c      	ldrb	r4, [r1, #1]
 80444a0:	788f      	ldrb	r7, [r1, #2]
 80444a2:	036d      	lsls	r5, r5, #13
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80444a4:	2a00      	cmp	r2, #0
 80444a6:	d147      	bne.n	8044538 <HAL_RTC_SetDate+0xb2>
 80444a8:	06e2      	lsls	r2, r4, #27
 80444aa:	d503      	bpl.n	80444b4 <HAL_RTC_SetDate+0x2e>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80444ac:	f024 0410 	bic.w	r4, r4, #16
 80444b0:	340a      	adds	r4, #10
 80444b2:	704c      	strb	r4, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80444b4:	f7ff ff6b 	bl	804438e <RTC_ByteToBcd2>
 80444b8:	4602      	mov	r2, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80444ba:	7848      	ldrb	r0, [r1, #1]
 80444bc:	f7ff ff67 	bl	804438e <RTC_ByteToBcd2>
 80444c0:	4604      	mov	r4, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80444c2:	4638      	mov	r0, r7
 80444c4:	f7ff ff63 	bl	804438e <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80444c8:	4328      	orrs	r0, r5
 80444ca:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80444ce:	6833      	ldr	r3, [r6, #0]
 80444d0:	22ca      	movs	r2, #202	; 0xca
 80444d2:	625a      	str	r2, [r3, #36]	; 0x24
 80444d4:	2253      	movs	r2, #83	; 0x53
 80444d6:	625a      	str	r2, [r3, #36]	; 0x24
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80444d8:	ea40 2404 	orr.w	r4, r0, r4, lsl #8
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80444dc:	4630      	mov	r0, r6
 80444de:	f7ff feee 	bl	80442be <RTC_EnterInitMode>
 80444e2:	6833      	ldr	r3, [r6, #0]
 80444e4:	4605      	mov	r5, r0
 80444e6:	b140      	cbz	r0, 80444fa <HAL_RTC_SetDate+0x74>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80444e8:	22ff      	movs	r2, #255	; 0xff
 80444ea:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80444ec:	2304      	movs	r3, #4
 80444ee:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 80444f0:	2300      	movs	r3, #0
 80444f2:	7733      	strb	r3, [r6, #28]
        return HAL_ERROR;
 80444f4:	2501      	movs	r5, #1
}
 80444f6:	4628      	mov	r0, r5
 80444f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80444fa:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 80444fe:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 8044502:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8044504:	68da      	ldr	r2, [r3, #12]
 8044506:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 804450a:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 804450c:	689b      	ldr	r3, [r3, #8]
 804450e:	069b      	lsls	r3, r3, #26
 8044510:	d40a      	bmi.n	8044528 <HAL_RTC_SetDate+0xa2>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8044512:	4630      	mov	r0, r6
 8044514:	f7ff febb 	bl	804428e <HAL_RTC_WaitForSynchro>
 8044518:	b130      	cbz	r0, 8044528 <HAL_RTC_SetDate+0xa2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 804451a:	6833      	ldr	r3, [r6, #0]
 804451c:	22ff      	movs	r2, #255	; 0xff
 804451e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8044520:	2304      	movs	r3, #4
 8044522:	7773      	strb	r3, [r6, #29]
        __HAL_UNLOCK(hrtc);
 8044524:	7735      	strb	r5, [r6, #28]
 8044526:	e7e5      	b.n	80444f4 <HAL_RTC_SetDate+0x6e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8044528:	6833      	ldr	r3, [r6, #0]
 804452a:	22ff      	movs	r2, #255	; 0xff
 804452c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 804452e:	2301      	movs	r3, #1
 8044530:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 8044532:	2300      	movs	r3, #0
 8044534:	7733      	strb	r3, [r6, #28]
    return HAL_OK;
 8044536:	e7de      	b.n	80444f6 <HAL_RTC_SetDate+0x70>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8044538:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
 804453c:	4338      	orrs	r0, r7
 804453e:	e7c6      	b.n	80444ce <HAL_RTC_SetDate+0x48>

08044540 <HAL_RTC_SetAlarm_IT>:
{
 8044540:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8044544:	4b53      	ldr	r3, [pc, #332]	; (8044694 <HAL_RTC_SetAlarm_IT+0x154>)
{
 8044546:	4606      	mov	r6, r0
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8044548:	681b      	ldr	r3, [r3, #0]
 804454a:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 804454e:	fbb3 f0f0 	udiv	r0, r3, r0
 8044552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8044556:	4343      	muls	r3, r0
 8044558:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hrtc);
 804455a:	7f33      	ldrb	r3, [r6, #28]
 804455c:	2b01      	cmp	r3, #1
 804455e:	f04f 0002 	mov.w	r0, #2
 8044562:	d04a      	beq.n	80445fa <HAL_RTC_SetAlarm_IT+0xba>
 8044564:	2301      	movs	r3, #1
 8044566:	6834      	ldr	r4, [r6, #0]
 8044568:	7733      	strb	r3, [r6, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 804456a:	7770      	strb	r0, [r6, #29]
 804456c:	7808      	ldrb	r0, [r1, #0]
 804456e:	f891 9001 	ldrb.w	r9, [r1, #1]
 8044572:	f891 a002 	ldrb.w	sl, [r1, #2]
 8044576:	f891 7020 	ldrb.w	r7, [r1, #32]
 804457a:	69cd      	ldr	r5, [r1, #28]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 804457c:	68a3      	ldr	r3, [r4, #8]
  if(Format == RTC_FORMAT_BIN)
 804457e:	2a00      	cmp	r2, #0
 8044580:	d13e      	bne.n	8044600 <HAL_RTC_SetAlarm_IT+0xc0>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8044582:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8044586:	bf08      	it	eq
 8044588:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 804458a:	f7ff ff00 	bl	804438e <RTC_ByteToBcd2>
 804458e:	4680      	mov	r8, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8044590:	4648      	mov	r0, r9
 8044592:	f7ff fefc 	bl	804438e <RTC_ByteToBcd2>
 8044596:	4602      	mov	r2, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8044598:	4650      	mov	r0, sl
 804459a:	f7ff fef8 	bl	804438e <RTC_ByteToBcd2>
 804459e:	4681      	mov	r9, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80445a0:	4638      	mov	r0, r7
 80445a2:	f7ff fef4 	bl	804438e <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80445a6:	694b      	ldr	r3, [r1, #20]
 80445a8:	432b      	orrs	r3, r5
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80445aa:	78cd      	ldrb	r5, [r1, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80445ac:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80445b0:	ea43 0309 	orr.w	r3, r3, r9
 80445b4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80445b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80445bc:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80445c0:	698b      	ldr	r3, [r1, #24]
 80445c2:	684a      	ldr	r2, [r1, #4]
 80445c4:	431a      	orrs	r2, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80445c6:	23ca      	movs	r3, #202	; 0xca
 80445c8:	6263      	str	r3, [r4, #36]	; 0x24
 80445ca:	2353      	movs	r3, #83	; 0x53
 80445cc:	6263      	str	r3, [r4, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 80445ce:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80445d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80445d4:	68a3      	ldr	r3, [r4, #8]
  if(sAlarm->Alarm == RTC_ALARM_A)
 80445d6:	d142      	bne.n	804465e <HAL_RTC_SetAlarm_IT+0x11e>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80445d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80445dc:	60a3      	str	r3, [r4, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80445de:	68e3      	ldr	r3, [r4, #12]
 80445e0:	b2db      	uxtb	r3, r3
 80445e2:	f463 73c0 	orn	r3, r3, #384	; 0x180
 80445e6:	60e3      	str	r3, [r4, #12]
      if (count-- == 0U)
 80445e8:	9b01      	ldr	r3, [sp, #4]
 80445ea:	1e59      	subs	r1, r3, #1
 80445ec:	9101      	str	r1, [sp, #4]
 80445ee:	b9cb      	cbnz	r3, 8044624 <HAL_RTC_SetAlarm_IT+0xe4>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80445f0:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80445f2:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80445f4:	6262      	str	r2, [r4, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80445f6:	7770      	strb	r0, [r6, #29]
        __HAL_UNLOCK(hrtc);
 80445f8:	7733      	strb	r3, [r6, #28]
}
 80445fa:	b002      	add	sp, #8
 80445fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8044600:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8044604:	bf08      	it	eq
 8044606:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8044608:	694b      	ldr	r3, [r1, #20]
 804460a:	431d      	orrs	r5, r3
 804460c:	ea45 050a 	orr.w	r5, r5, sl
 8044610:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8044614:	78cb      	ldrb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8044616:	ea40 2009 	orr.w	r0, r0, r9, lsl #8
 804461a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 804461e:	ea40 6007 	orr.w	r0, r0, r7, lsl #24
 8044622:	e7cd      	b.n	80445c0 <HAL_RTC_SetAlarm_IT+0x80>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8044624:	68e3      	ldr	r3, [r4, #12]
 8044626:	07d9      	lsls	r1, r3, #31
 8044628:	d5de      	bpl.n	80445e8 <HAL_RTC_SetAlarm_IT+0xa8>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 804462a:	61e0      	str	r0, [r4, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 804462c:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 804462e:	68a3      	ldr	r3, [r4, #8]
 8044630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8044634:	60a3      	str	r3, [r4, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8044636:	68a3      	ldr	r3, [r4, #8]
 8044638:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 804463c:	60a3      	str	r3, [r4, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 804463e:	4b16      	ldr	r3, [pc, #88]	; (8044698 <HAL_RTC_SetAlarm_IT+0x158>)
 8044640:	681a      	ldr	r2, [r3, #0]
 8044642:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8044646:	601a      	str	r2, [r3, #0]
  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8044648:	689a      	ldr	r2, [r3, #8]
 804464a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 804464e:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8044650:	23ff      	movs	r3, #255	; 0xff
 8044652:	6263      	str	r3, [r4, #36]	; 0x24
  __HAL_UNLOCK(hrtc);
 8044654:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY;
 8044656:	2301      	movs	r3, #1
 8044658:	7773      	strb	r3, [r6, #29]
  __HAL_UNLOCK(hrtc);
 804465a:	7730      	strb	r0, [r6, #28]
  return HAL_OK;
 804465c:	e7cd      	b.n	80445fa <HAL_RTC_SetAlarm_IT+0xba>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 804465e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8044662:	60a3      	str	r3, [r4, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8044664:	68e3      	ldr	r3, [r4, #12]
 8044666:	b2db      	uxtb	r3, r3
 8044668:	f463 7320 	orn	r3, r3, #640	; 0x280
 804466c:	60e3      	str	r3, [r4, #12]
      if (count-- == 0U)
 804466e:	9b01      	ldr	r3, [sp, #4]
 8044670:	1e59      	subs	r1, r3, #1
 8044672:	9101      	str	r1, [sp, #4]
 8044674:	2b00      	cmp	r3, #0
 8044676:	d0bb      	beq.n	80445f0 <HAL_RTC_SetAlarm_IT+0xb0>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8044678:	68e3      	ldr	r3, [r4, #12]
 804467a:	079b      	lsls	r3, r3, #30
 804467c:	d5f7      	bpl.n	804466e <HAL_RTC_SetAlarm_IT+0x12e>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 804467e:	6220      	str	r0, [r4, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8044680:	64a2      	str	r2, [r4, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8044682:	68a3      	ldr	r3, [r4, #8]
 8044684:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8044688:	60a3      	str	r3, [r4, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 804468a:	68a3      	ldr	r3, [r4, #8]
 804468c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8044690:	e7d4      	b.n	804463c <HAL_RTC_SetAlarm_IT+0xfc>
 8044692:	bf00      	nop
 8044694:	2000108c 	.word	0x2000108c
 8044698:	40013c00 	.word	0x40013c00

0804469c <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 804469c:	0903      	lsrs	r3, r0, #4
 804469e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 80446a2:	f000 000f 	and.w	r0, r0, #15
 80446a6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 80446aa:	b2c0      	uxtb	r0, r0
 80446ac:	4770      	bx	lr

080446ae <HAL_RTC_GetTime>:
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80446ae:	6803      	ldr	r3, [r0, #0]
 80446b0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80446b2:	6048      	str	r0, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80446b4:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80446b6:	681b      	ldr	r3, [r3, #0]
 80446b8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80446bc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
{
 80446c0:	b570      	push	{r4, r5, r6, lr}
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80446c2:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80446c6:	0c1d      	lsrs	r5, r3, #16
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80446c8:	6088      	str	r0, [r1, #8]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80446ca:	f3c3 2606 	ubfx	r6, r3, #8, #7
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80446ce:	f005 003f 	and.w	r0, r5, #63	; 0x3f
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80446d2:	b2dc      	uxtb	r4, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80446d4:	f005 0540 	and.w	r5, r5, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80446d8:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80446da:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80446dc:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80446de:	70cd      	strb	r5, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 80446e0:	b952      	cbnz	r2, 80446f8 <HAL_RTC_GetTime+0x4a>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80446e2:	f7ff ffdb 	bl	804469c <RTC_Bcd2ToByte>
 80446e6:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80446e8:	4630      	mov	r0, r6
 80446ea:	f7ff ffd7 	bl	804469c <RTC_Bcd2ToByte>
 80446ee:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80446f0:	4620      	mov	r0, r4
 80446f2:	f7ff ffd3 	bl	804469c <RTC_Bcd2ToByte>
 80446f6:	7088      	strb	r0, [r1, #2]
}
 80446f8:	2000      	movs	r0, #0
 80446fa:	bd70      	pop	{r4, r5, r6, pc}

080446fc <HAL_RTC_GetDate>:
{
 80446fc:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80446fe:	6803      	ldr	r3, [r0, #0]
 8044700:	685b      	ldr	r3, [r3, #4]
 8044702:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8044706:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 804470a:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 804470c:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8044710:	b2dc      	uxtb	r4, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8044712:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8044716:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8044718:	704d      	strb	r5, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 804471a:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 804471c:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 804471e:	b952      	cbnz	r2, 8044736 <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8044720:	f7ff ffbc 	bl	804469c <RTC_Bcd2ToByte>
 8044724:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8044726:	4628      	mov	r0, r5
 8044728:	f7ff ffb8 	bl	804469c <RTC_Bcd2ToByte>
 804472c:	7048      	strb	r0, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 804472e:	4620      	mov	r0, r4
 8044730:	f7ff ffb4 	bl	804469c <RTC_Bcd2ToByte>
 8044734:	7088      	strb	r0, [r1, #2]
}
 8044736:	2000      	movs	r0, #0
 8044738:	bd38      	pop	{r3, r4, r5, pc}

0804473a <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 804473a:	6803      	ldr	r3, [r0, #0]
 804473c:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 804473e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8044742:	4770      	bx	lr

08044744 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8044744:	6803      	ldr	r3, [r0, #0]
 8044746:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8044748:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 804474c:	4770      	bx	lr

0804474e <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 804474e:	7f03      	ldrb	r3, [r0, #28]
 8044750:	2b01      	cmp	r3, #1
 8044752:	f04f 0302 	mov.w	r3, #2
 8044756:	d00f      	beq.n	8044778 <HAL_RTCEx_EnableBypassShadow+0x2a>

  hrtc->State = HAL_RTC_STATE_BUSY;
 8044758:	7743      	strb	r3, [r0, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 804475a:	6803      	ldr	r3, [r0, #0]
 804475c:	22ca      	movs	r2, #202	; 0xca
 804475e:	625a      	str	r2, [r3, #36]	; 0x24
 8044760:	2253      	movs	r2, #83	; 0x53
 8044762:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8044764:	689a      	ldr	r2, [r3, #8]
 8044766:	f042 0220 	orr.w	r2, r2, #32
 804476a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 804476c:	22ff      	movs	r2, #255	; 0xff
 804476e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8044770:	2301      	movs	r3, #1
 8044772:	7743      	strb	r3, [r0, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8044774:	2300      	movs	r3, #0
 8044776:	7703      	strb	r3, [r0, #28]
  __HAL_LOCK(hrtc);
 8044778:	4618      	mov	r0, r3

  return HAL_OK;
}
 804477a:	4770      	bx	lr

0804477c <SD_DMATransmitCplt>:
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 804477c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 804477e:	681a      	ldr	r2, [r3, #0]
 8044780:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8044782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8044786:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8044788:	4770      	bx	lr

0804478a <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 804478a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 804478e:	b089      	sub	sp, #36	; 0x24
 8044790:	4605      	mov	r5, r0
 8044792:	460e      	mov	r6, r1
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8044794:	f7fe fc70 	bl	8043078 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 8044798:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 804479a:	4681      	mov	r9, r0
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 804479c:	2108      	movs	r1, #8
 804479e:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2U] = {0U, 0U};
 80447a0:	e9cd 3300 	strd	r3, r3, [sp]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80447a4:	f001 fe55 	bl	8046452 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80447a8:	4604      	mov	r4, r0
 80447aa:	bb40      	cbnz	r0, 80447fe <SD_FindSCR+0x74>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80447ac:	6d29      	ldr	r1, [r5, #80]	; 0x50
 80447ae:	6828      	ldr	r0, [r5, #0]
 80447b0:	0409      	lsls	r1, r1, #16
 80447b2:	f001 ff61 	bl	8046678 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 80447b6:	4604      	mov	r4, r0
 80447b8:	bb08      	cbnz	r0, 80447fe <SD_FindSCR+0x74>
  {
    return errorstate;
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
  config.DataLength    = 8U;
 80447ba:	f04f 32ff 	mov.w	r2, #4294967295
 80447be:	2308      	movs	r3, #8
 80447c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80447c4:	2130      	movs	r1, #48	; 0x30
 80447c6:	2302      	movs	r3, #2
 80447c8:	e9cd 1304 	strd	r1, r3, [sp, #16]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80447cc:	9006      	str	r0, [sp, #24]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80447ce:	2301      	movs	r3, #1
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80447d0:	a902      	add	r1, sp, #8
 80447d2:	6828      	ldr	r0, [r5, #0]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80447d4:	9307      	str	r3, [sp, #28]
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80447d6:	f001 fe29 	bl	804642c <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80447da:	6828      	ldr	r0, [r5, #0]
 80447dc:	f001 ff95 	bl	804670a <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80447e0:	4604      	mov	r4, r0
 80447e2:	b960      	cbnz	r0, 80447fe <SD_FindSCR+0x74>
  uint32_t index = 0U;
 80447e4:	4607      	mov	r7, r0
  {
    return errorstate;
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 80447e6:	f240 482a 	movw	r8, #1066	; 0x42a
 80447ea:	6828      	ldr	r0, [r5, #0]
 80447ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80447ee:	ea13 0f08 	tst.w	r3, r8
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80447f2:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 80447f4:	d007      	beq.n	8044806 <SD_FindSCR+0x7c>
    {
      return HAL_SD_ERROR_TIMEOUT;
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80447f6:	0719      	lsls	r1, r3, #28
 80447f8:	d518      	bpl.n	804482c <SD_FindSCR+0xa2>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80447fa:	2408      	movs	r4, #8

    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80447fc:	6384      	str	r4, [r0, #56]	; 0x38
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 80447fe:	4620      	mov	r0, r4
 8044800:	b009      	add	sp, #36	; 0x24
 8044802:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8044806:	029b      	lsls	r3, r3, #10
 8044808:	d507      	bpl.n	804481a <SD_FindSCR+0x90>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 804480a:	f001 fde5 	bl	80463d8 <SDIO_ReadFIFO>
 804480e:	ab08      	add	r3, sp, #32
 8044810:	eb03 0387 	add.w	r3, r3, r7, lsl #2
      index++;
 8044814:	3701      	adds	r7, #1
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8044816:	f843 0c20 	str.w	r0, [r3, #-32]
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 804481a:	f7fe fc2d 	bl	8043078 <HAL_GetTick>
 804481e:	eba0 0009 	sub.w	r0, r0, r9
 8044822:	3001      	adds	r0, #1
 8044824:	d1e1      	bne.n	80447ea <SD_FindSCR+0x60>
      return HAL_SD_ERROR_TIMEOUT;
 8044826:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 804482a:	e7e8      	b.n	80447fe <SD_FindSCR+0x74>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 804482c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 804482e:	079a      	lsls	r2, r3, #30
 8044830:	d501      	bpl.n	8044836 <SD_FindSCR+0xac>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8044832:	2402      	movs	r4, #2
 8044834:	e7e2      	b.n	80447fc <SD_FindSCR+0x72>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8044836:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8044838:	069b      	lsls	r3, r3, #26
 804483a:	d501      	bpl.n	8044840 <SD_FindSCR+0xb6>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 804483c:	2420      	movs	r4, #32
 804483e:	e7dd      	b.n	80447fc <SD_FindSCR+0x72>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8044840:	f240 533a 	movw	r3, #1338	; 0x53a
 8044844:	6383      	str	r3, [r0, #56]	; 0x38
 8044846:	9b01      	ldr	r3, [sp, #4]
 8044848:	ba1b      	rev	r3, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 804484a:	6033      	str	r3, [r6, #0]
 804484c:	9b00      	ldr	r3, [sp, #0]
 804484e:	ba1b      	rev	r3, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8044850:	6073      	str	r3, [r6, #4]
  return HAL_SD_ERROR_NONE;
 8044852:	e7d4      	b.n	80447fe <SD_FindSCR+0x74>

08044854 <HAL_SD_ReadBlocks_DMA>:
{
 8044854:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8044858:	4604      	mov	r4, r0
 804485a:	b087      	sub	sp, #28
 804485c:	4617      	mov	r7, r2
 804485e:	4698      	mov	r8, r3
  if(NULL == pData)
 8044860:	b941      	cbnz	r1, 8044874 <HAL_SD_ReadBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8044862:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8044864:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8044868:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 804486a:	2501      	movs	r5, #1
}
 804486c:	4628      	mov	r0, r5
 804486e:	b007      	add	sp, #28
 8044870:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 8044874:	f890 6034 	ldrb.w	r6, [r0, #52]	; 0x34
 8044878:	b2f6      	uxtb	r6, r6
 804487a:	2e01      	cmp	r6, #1
 804487c:	d176      	bne.n	804496c <HAL_SD_ReadBlocks_DMA+0x118>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 804487e:	2200      	movs	r2, #0
 8044880:	6382      	str	r2, [r0, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8044882:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8044884:	18fb      	adds	r3, r7, r3
 8044886:	4283      	cmp	r3, r0
 8044888:	d903      	bls.n	8044892 <HAL_SD_ReadBlocks_DMA+0x3e>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 804488a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 804488c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8044890:	e7ea      	b.n	8044868 <HAL_SD_ReadBlocks_DMA+0x14>
    hsd->Instance->DCTRL = 0U;
 8044892:	6825      	ldr	r5, [r4, #0]
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8044894:	6c20      	ldr	r0, [r4, #64]	; 0x40
    hsd->State = HAL_SD_STATE_BUSY;
 8044896:	2303      	movs	r3, #3
 8044898:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 804489c:	62ea      	str	r2, [r5, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 804489e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80448a0:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 80448a4:	f043 0302 	orr.w	r3, r3, #2
 80448a8:	63eb      	str	r3, [r5, #60]	; 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80448aa:	4b31      	ldr	r3, [pc, #196]	; (8044970 <HAL_SD_ReadBlocks_DMA+0x11c>)
 80448ac:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80448ae:	4b31      	ldr	r3, [pc, #196]	; (8044974 <HAL_SD_ReadBlocks_DMA+0x120>)
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80448b0:	ea4f 2948 	mov.w	r9, r8, lsl #9
    hsd->hdmarx->XferAbortCallback = NULL;
 80448b4:	e9c0 3213 	strd	r3, r2, [r0, #76]	; 0x4c
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80448b8:	460a      	mov	r2, r1
 80448ba:	ea4f 0399 	mov.w	r3, r9, lsr #2
 80448be:	f105 0180 	add.w	r1, r5, #128	; 0x80
 80448c2:	f7fe fd27 	bl	8043314 <HAL_DMA_Start_IT>
 80448c6:	4605      	mov	r5, r0
 80448c8:	b168      	cbz	r0, 80448e6 <HAL_SD_ReadBlocks_DMA+0x92>
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80448ca:	6823      	ldr	r3, [r4, #0]
 80448cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80448ce:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80448d2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80448d4:	4a28      	ldr	r2, [pc, #160]	; (8044978 <HAL_SD_ReadBlocks_DMA+0x124>)
 80448d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80448d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80448da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80448de:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80448e0:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
 80448e4:	e7c1      	b.n	804486a <HAL_SD_ReadBlocks_DMA+0x16>
      __HAL_SD_DMA_ENABLE(hsd);
 80448e6:	4b25      	ldr	r3, [pc, #148]	; (804497c <HAL_SD_ReadBlocks_DMA+0x128>)
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80448e8:	6820      	ldr	r0, [r4, #0]
      __HAL_SD_DMA_ENABLE(hsd);
 80448ea:	601e      	str	r6, [r3, #0]
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80448ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80448ee:	f44f 7100 	mov.w	r1, #512	; 0x200
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80448f2:	2b01      	cmp	r3, #1
        add *= 512U;
 80448f4:	bf18      	it	ne
 80448f6:	027f      	lslne	r7, r7, #9
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80448f8:	f001 fdab 	bl	8046452 <SDMMC_CmdBlockLength>
      if(errorstate != HAL_SD_ERROR_NONE)
 80448fc:	b148      	cbz	r0, 8044912 <HAL_SD_ReadBlocks_DMA+0xbe>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80448fe:	6823      	ldr	r3, [r4, #0]
 8044900:	4a1d      	ldr	r2, [pc, #116]	; (8044978 <HAL_SD_ReadBlocks_DMA+0x124>)
 8044902:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8044904:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8044906:	2501      	movs	r5, #1
        hsd->ErrorCode |= errorstate;
 8044908:	4318      	orrs	r0, r3
 804490a:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 804490c:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
        return HAL_ERROR;
 8044910:	e7ac      	b.n	804486c <HAL_SD_ReadBlocks_DMA+0x18>
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8044912:	f04f 33ff 	mov.w	r3, #4294967295
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8044916:	e9cd 3900 	strd	r3, r9, [sp]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 804491a:	2290      	movs	r2, #144	; 0x90
 804491c:	2302      	movs	r3, #2
 804491e:	e9cd 2302 	strd	r2, r3, [sp, #8]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8044922:	9004      	str	r0, [sp, #16]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8044924:	2301      	movs	r3, #1
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8044926:	4669      	mov	r1, sp
 8044928:	6820      	ldr	r0, [r4, #0]
      config.DPSM          = SDIO_DPSM_ENABLE;
 804492a:	9305      	str	r3, [sp, #20]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 804492c:	f001 fd7e 	bl	804642c <SDIO_ConfigData>
      if(NumberOfBlocks > 1U)
 8044930:	f1b8 0f01 	cmp.w	r8, #1
 8044934:	d913      	bls.n	804495e <HAL_SD_ReadBlocks_DMA+0x10a>
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8044936:	2382      	movs	r3, #130	; 0x82
 8044938:	6323      	str	r3, [r4, #48]	; 0x30
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 804493a:	4639      	mov	r1, r7
 804493c:	6820      	ldr	r0, [r4, #0]
 804493e:	f001 fdb8 	bl	80464b2 <SDMMC_CmdReadMultiBlock>
      if(errorstate != HAL_SD_ERROR_NONE)
 8044942:	2800      	cmp	r0, #0
 8044944:	d092      	beq.n	804486c <HAL_SD_ReadBlocks_DMA+0x18>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8044946:	6823      	ldr	r3, [r4, #0]
 8044948:	4a0b      	ldr	r2, [pc, #44]	; (8044978 <HAL_SD_ReadBlocks_DMA+0x124>)
 804494a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 804494c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 804494e:	2501      	movs	r5, #1
        hsd->ErrorCode |= errorstate;
 8044950:	4318      	orrs	r0, r3
        hsd->Context = SD_CONTEXT_NONE;
 8044952:	2300      	movs	r3, #0
        hsd->ErrorCode |= errorstate;
 8044954:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8044956:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 804495a:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_ERROR;
 804495c:	e786      	b.n	804486c <HAL_SD_ReadBlocks_DMA+0x18>
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 804495e:	2381      	movs	r3, #129	; 0x81
 8044960:	6323      	str	r3, [r4, #48]	; 0x30
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8044962:	4639      	mov	r1, r7
 8044964:	6820      	ldr	r0, [r4, #0]
 8044966:	f001 fd8c 	bl	8046482 <SDMMC_CmdReadSingleBlock>
 804496a:	e7ea      	b.n	8044942 <HAL_SD_ReadBlocks_DMA+0xee>
    return HAL_BUSY;
 804496c:	2502      	movs	r5, #2
 804496e:	e77d      	b.n	804486c <HAL_SD_ReadBlocks_DMA+0x18>
 8044970:	08044ab3 	.word	0x08044ab3
 8044974:	08044fd5 	.word	0x08044fd5
 8044978:	004005ff 	.word	0x004005ff
 804497c:	4225858c 	.word	0x4225858c

08044980 <HAL_SD_WriteBlocks_DMA>:
{
 8044980:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8044984:	4604      	mov	r4, r0
 8044986:	b087      	sub	sp, #28
 8044988:	4616      	mov	r6, r2
 804498a:	461f      	mov	r7, r3
  if(NULL == pData)
 804498c:	4689      	mov	r9, r1
 804498e:	b941      	cbnz	r1, 80449a2 <HAL_SD_WriteBlocks_DMA+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8044990:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8044992:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8044996:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8044998:	2501      	movs	r5, #1
}
 804499a:	4628      	mov	r0, r5
 804499c:	b007      	add	sp, #28
 804499e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 80449a2:	f890 5034 	ldrb.w	r5, [r0, #52]	; 0x34
 80449a6:	b2ed      	uxtb	r5, r5
 80449a8:	2d01      	cmp	r5, #1
 80449aa:	d177      	bne.n	8044a9c <HAL_SD_WriteBlocks_DMA+0x11c>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80449ac:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 80449ae:	18f3      	adds	r3, r6, r3
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80449b0:	2200      	movs	r2, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80449b2:	428b      	cmp	r3, r1
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80449b4:	6382      	str	r2, [r0, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80449b6:	d904      	bls.n	80449c2 <HAL_SD_WriteBlocks_DMA+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80449b8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80449ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80449be:	6383      	str	r3, [r0, #56]	; 0x38
      return HAL_ERROR;
 80449c0:	e7eb      	b.n	804499a <HAL_SD_WriteBlocks_DMA+0x1a>
    hsd->State = HAL_SD_STATE_BUSY;
 80449c2:	2303      	movs	r3, #3
 80449c4:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 80449c8:	6800      	ldr	r0, [r0, #0]
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80449ca:	4935      	ldr	r1, [pc, #212]	; (8044aa0 <HAL_SD_WriteBlocks_DMA+0x120>)
    hsd->Instance->DCTRL = 0U;
 80449cc:	62c2      	str	r2, [r0, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80449ce:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80449d0:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80449d4:	f043 0302 	orr.w	r3, r3, #2
 80449d8:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80449da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80449dc:	63d9      	str	r1, [r3, #60]	; 0x3c
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80449de:	4931      	ldr	r1, [pc, #196]	; (8044aa4 <HAL_SD_WriteBlocks_DMA+0x124>)
    hsd->hdmatx->XferAbortCallback = NULL;
 80449e0:	e9c3 1213 	strd	r1, r2, [r3, #76]	; 0x4c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80449e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80449e6:	f44f 7100 	mov.w	r1, #512	; 0x200
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80449ea:	2b01      	cmp	r3, #1
      add *= 512U;
 80449ec:	bf18      	it	ne
 80449ee:	0276      	lslne	r6, r6, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80449f0:	f001 fd2f 	bl	8046452 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 80449f4:	4602      	mov	r2, r0
 80449f6:	6820      	ldr	r0, [r4, #0]
 80449f8:	b142      	cbz	r2, 8044a0c <HAL_SD_WriteBlocks_DMA+0x8c>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80449fa:	4b2b      	ldr	r3, [pc, #172]	; (8044aa8 <HAL_SD_WriteBlocks_DMA+0x128>)
 80449fc:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80449fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8044a00:	2501      	movs	r5, #1
      hsd->ErrorCode |= errorstate;
 8044a02:	4313      	orrs	r3, r2
 8044a04:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8044a06:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
      return HAL_ERROR;
 8044a0a:	e7c6      	b.n	804499a <HAL_SD_WriteBlocks_DMA+0x1a>
    if(NumberOfBlocks > 1U)
 8044a0c:	2f01      	cmp	r7, #1
 8044a0e:	d912      	bls.n	8044a36 <HAL_SD_WriteBlocks_DMA+0xb6>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8044a10:	23a0      	movs	r3, #160	; 0xa0
 8044a12:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8044a14:	4631      	mov	r1, r6
 8044a16:	f001 fd7c 	bl	8046512 <SDMMC_CmdWriteMultiBlock>
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8044a1a:	4606      	mov	r6, r0
 8044a1c:	6822      	ldr	r2, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 8044a1e:	b180      	cbz	r0, 8044a42 <HAL_SD_WriteBlocks_DMA+0xc2>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8044a20:	4b21      	ldr	r3, [pc, #132]	; (8044aa8 <HAL_SD_WriteBlocks_DMA+0x128>)
 8044a22:	6393      	str	r3, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8044a24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8044a26:	2501      	movs	r5, #1
      hsd->ErrorCode |= errorstate;
 8044a28:	431e      	orrs	r6, r3
      hsd->Context = SD_CONTEXT_NONE;
 8044a2a:	2300      	movs	r3, #0
      hsd->ErrorCode |= errorstate;
 8044a2c:	63a6      	str	r6, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8044a2e:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8044a32:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8044a34:	e7b1      	b.n	804499a <HAL_SD_WriteBlocks_DMA+0x1a>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8044a36:	2390      	movs	r3, #144	; 0x90
 8044a38:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8044a3a:	4631      	mov	r1, r6
 8044a3c:	f001 fd51 	bl	80464e2 <SDMMC_CmdWriteSingleBlock>
 8044a40:	e7eb      	b.n	8044a1a <HAL_SD_WriteBlocks_DMA+0x9a>
    __HAL_SD_DMA_ENABLE(hsd);
 8044a42:	4b1a      	ldr	r3, [pc, #104]	; (8044aac <HAL_SD_WriteBlocks_DMA+0x12c>)
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8044a44:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    __HAL_SD_DMA_ENABLE(hsd);
 8044a46:	f04f 0801 	mov.w	r8, #1
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8044a4a:	027f      	lsls	r7, r7, #9
    __HAL_SD_DMA_ENABLE(hsd);
 8044a4c:	f8c3 8000 	str.w	r8, [r3]
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8044a50:	3280      	adds	r2, #128	; 0x80
 8044a52:	08bb      	lsrs	r3, r7, #2
 8044a54:	4649      	mov	r1, r9
 8044a56:	f7fe fc5d 	bl	8043314 <HAL_DMA_Start_IT>
 8044a5a:	4605      	mov	r5, r0
 8044a5c:	b180      	cbz	r0, 8044a80 <HAL_SD_WriteBlocks_DMA+0x100>
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8044a5e:	6822      	ldr	r2, [r4, #0]
 8044a60:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8044a62:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8044a66:	f023 0302 	bic.w	r3, r3, #2
 8044a6a:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8044a6c:	4b0e      	ldr	r3, [pc, #56]	; (8044aa8 <HAL_SD_WriteBlocks_DMA+0x128>)
 8044a6e:	6393      	str	r3, [r2, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8044a70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8044a72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8044a76:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8044a78:	f884 8034 	strb.w	r8, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8044a7c:	6326      	str	r6, [r4, #48]	; 0x30
 8044a7e:	e78b      	b.n	8044998 <HAL_SD_WriteBlocks_DMA+0x18>
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8044a80:	f04f 33ff 	mov.w	r3, #4294967295
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8044a84:	e9cd 3700 	strd	r3, r7, [sp]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8044a88:	4669      	mov	r1, sp
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8044a8a:	2390      	movs	r3, #144	; 0x90
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8044a8c:	6820      	ldr	r0, [r4, #0]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8044a8e:	e9cd 3602 	strd	r3, r6, [sp, #8]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8044a92:	e9cd 6804 	strd	r6, r8, [sp, #16]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8044a96:	f001 fcc9 	bl	804642c <SDIO_ConfigData>
      return HAL_OK;
 8044a9a:	e77e      	b.n	804499a <HAL_SD_WriteBlocks_DMA+0x1a>
    return HAL_BUSY;
 8044a9c:	2502      	movs	r5, #2
 8044a9e:	e77c      	b.n	804499a <HAL_SD_WriteBlocks_DMA+0x1a>
 8044aa0:	0804477d 	.word	0x0804477d
 8044aa4:	08044fd5 	.word	0x08044fd5
 8044aa8:	004005ff 	.word	0x004005ff
 8044aac:	4225858c 	.word	0x4225858c

08044ab0 <HAL_SD_ErrorCallback>:
 8044ab0:	4770      	bx	lr

08044ab2 <SD_DMAReceiveCplt>:
{
 8044ab2:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8044ab4:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8044ab6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8044ab8:	2b82      	cmp	r3, #130	; 0x82
 8044aba:	d109      	bne.n	8044ad0 <SD_DMAReceiveCplt+0x1e>
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8044abc:	6820      	ldr	r0, [r4, #0]
 8044abe:	f001 fd41 	bl	8046544 <SDMMC_CmdStopTransfer>
    if(errorstate != HAL_SD_ERROR_NONE)
 8044ac2:	b128      	cbz	r0, 8044ad0 <SD_DMAReceiveCplt+0x1e>
      hsd->ErrorCode |= errorstate;
 8044ac4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8044ac6:	4318      	orrs	r0, r3
 8044ac8:	63a0      	str	r0, [r4, #56]	; 0x38
      HAL_SD_ErrorCallback(hsd);
 8044aca:	4620      	mov	r0, r4
 8044acc:	f7ff fff0 	bl	8044ab0 <HAL_SD_ErrorCallback>
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8044ad0:	6823      	ldr	r3, [r4, #0]
 8044ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8044ad4:	f022 0208 	bic.w	r2, r2, #8
 8044ad8:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8044ada:	f240 523a 	movw	r2, #1338	; 0x53a
 8044ade:	639a      	str	r2, [r3, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 8044ae0:	2301      	movs	r3, #1
 8044ae2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8044ae6:	2300      	movs	r3, #0
 8044ae8:	6323      	str	r3, [r4, #48]	; 0x30
  HAL_SD_RxCpltCallback(hsd);
 8044aea:	4620      	mov	r0, r4
 8044aec:	f7fe f989 	bl	8042e02 <HAL_SD_RxCpltCallback>
}
 8044af0:	bd10      	pop	{r4, pc}
	...

08044af4 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8044af4:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8044af6:	0f9a      	lsrs	r2, r3, #30
 8044af8:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8044afa:	f3c3 6283 	ubfx	r2, r3, #26, #4
 8044afe:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8044b00:	f3c3 6201 	ubfx	r2, r3, #24, #2
 8044b04:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8044b06:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8044b0a:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8044b0c:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8044b10:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8044b12:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8044b14:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8044b16:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8044b18:	0d1a      	lsrs	r2, r3, #20
 8044b1a:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8044b1c:	f3c3 4203 	ubfx	r2, r3, #16, #4
 8044b20:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8044b22:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8044b26:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8044b28:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8044b2c:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8044b2e:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8044b32:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8044b34:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8044b38:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8044b3a:	2200      	movs	r2, #0
 8044b3c:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8044b3e:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 8044b40:	b510      	push	{r4, lr}
  if(hsd->SdCard.CardType == CARD_SDSC)
 8044b42:	2a00      	cmp	r2, #0
 8044b44:	d16b      	bne.n	8044c1e <HAL_SD_GetCardCSD+0x12a>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8044b46:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8044b48:	f640 74fc 	movw	r4, #4092	; 0xffc
 8044b4c:	ea04 0383 	and.w	r3, r4, r3, lsl #2
 8044b50:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8044b54:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8044b56:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 8044b5a:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8044b5c:	f3c2 6302 	ubfx	r3, r2, #24, #3
 8044b60:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8044b62:	f3c2 5342 	ubfx	r3, r2, #21, #3
 8044b66:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8044b68:	f3c2 4382 	ubfx	r3, r2, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8044b6c:	f3c2 32c2 	ubfx	r2, r2, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8044b70:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8044b72:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8044b74:	690b      	ldr	r3, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8044b76:	7e0a      	ldrb	r2, [r1, #24]
 8044b78:	f002 0207 	and.w	r2, r2, #7
 8044b7c:	3202      	adds	r2, #2
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8044b7e:	3301      	adds	r3, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8044b80:	4093      	lsls	r3, r2
 8044b82:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8044b84:	7a0a      	ldrb	r2, [r1, #8]
 8044b86:	f002 040f 	and.w	r4, r2, #15
 8044b8a:	2201      	movs	r2, #1
 8044b8c:	40a2      	lsls	r2, r4
 8044b8e:	6582      	str	r2, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8044b90:	0a52      	lsrs	r2, r2, #9
 8044b92:	4353      	muls	r3, r2
 8044b94:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8044b96:	f44f 7300 	mov.w	r3, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8044b9a:	6603      	str	r3, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8044b9c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8044b9e:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8044ba2:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8044ba4:	f3c3 12c6 	ubfx	r2, r3, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8044ba8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8044bac:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8044bae:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8044bb0:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8044bb2:	0fda      	lsrs	r2, r3, #31
 8044bb4:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8044bb6:	f3c3 7241 	ubfx	r2, r3, #29, #2
 8044bba:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8044bbc:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8044bc0:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8044bc2:	f3c3 5283 	ubfx	r2, r3, #22, #4
 8044bc6:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8044bc8:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8044bcc:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 8044bd0:	2000      	movs	r0, #0
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8044bd2:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3 = 0;
 8044bd6:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8044bda:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8044bde:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8044be2:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8044be6:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8044bea:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8044bee:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8044bf2:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8044bf6:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8044bfa:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8044bfe:	f3c3 2281 	ubfx	r2, r3, #10, #2
 8044c02:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8044c06:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8044c0a:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8044c0e:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8044c12:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8044c16:	2301      	movs	r3, #1
 8044c18:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 8044c1c:	bd10      	pop	{r4, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8044c1e:	2a01      	cmp	r2, #1
 8044c20:	d10f      	bne.n	8044c42 <HAL_SD_GetCardCSD+0x14e>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8044c22:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 8044c26:	041b      	lsls	r3, r3, #16
 8044c28:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8044c2c:	4313      	orrs	r3, r2
 8044c2e:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8044c30:	690b      	ldr	r3, [r1, #16]
 8044c32:	3301      	adds	r3, #1
 8044c34:	029b      	lsls	r3, r3, #10
 8044c36:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8044c38:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8044c3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8044c3e:	6583      	str	r3, [r0, #88]	; 0x58
 8044c40:	e7ab      	b.n	8044b9a <HAL_SD_GetCardCSD+0xa6>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8044c42:	6803      	ldr	r3, [r0, #0]
 8044c44:	4a05      	ldr	r2, [pc, #20]	; (8044c5c <HAL_SD_GetCardCSD+0x168>)
 8044c46:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8044c48:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8044c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8044c4e:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8044c50:	2301      	movs	r3, #1
 8044c52:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8044c56:	4618      	mov	r0, r3
 8044c58:	e7e0      	b.n	8044c1c <HAL_SD_GetCardCSD+0x128>
 8044c5a:	bf00      	nop
 8044c5c:	004005ff 	.word	0x004005ff

08044c60 <HAL_SD_InitCard>:
{
 8044c60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8044c64:	2300      	movs	r3, #0
{
 8044c66:	b099      	sub	sp, #100	; 0x64
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8044c68:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8044c6c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8044c70:	930b      	str	r3, [sp, #44]	; 0x2c
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8044c72:	2376      	movs	r3, #118	; 0x76
 8044c74:	930c      	str	r3, [sp, #48]	; 0x30
  status = SDIO_Init(hsd->Instance, Init);
 8044c76:	ab0a      	add	r3, sp, #40	; 0x28
{
 8044c78:	4604      	mov	r4, r0
  status = SDIO_Init(hsd->Instance, Init);
 8044c7a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8044c7e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8044c82:	ab07      	add	r3, sp, #28
 8044c84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8044c86:	6820      	ldr	r0, [r4, #0]
 8044c88:	f001 fb8a 	bl	80463a0 <SDIO_Init>
  if(status != HAL_OK)
 8044c8c:	4605      	mov	r5, r0
 8044c8e:	2800      	cmp	r0, #0
 8044c90:	f040 80d4 	bne.w	8044e3c <HAL_SD_InitCard+0x1dc>
  __HAL_SD_DISABLE(hsd);
 8044c94:	4f6a      	ldr	r7, [pc, #424]	; (8044e40 <HAL_SD_InitCard+0x1e0>)
  __HAL_SD_ENABLE(hsd);
 8044c96:	2601      	movs	r6, #1
  __HAL_SD_DISABLE(hsd);
 8044c98:	6038      	str	r0, [r7, #0]
  (void)SDIO_PowerState_ON(hsd->Instance);
 8044c9a:	6820      	ldr	r0, [r4, #0]
 8044c9c:	f001 fba4 	bl	80463e8 <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8044ca0:	603e      	str	r6, [r7, #0]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8044ca2:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 8044ca4:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8044ca6:	f001 fc7f 	bl	80465a8 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8044caa:	4605      	mov	r5, r0
 8044cac:	b940      	cbnz	r0, 8044cc0 <HAL_SD_InitCard+0x60>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8044cae:	6820      	ldr	r0, [r4, #0]
 8044cb0:	f001 fca2 	bl	80465f8 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8044cb4:	b158      	cbz	r0, 8044cce <HAL_SD_InitCard+0x6e>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8044cb6:	64a5      	str	r5, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8044cb8:	6820      	ldr	r0, [r4, #0]
 8044cba:	f001 fc75 	bl	80465a8 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8044cbe:	b138      	cbz	r0, 8044cd0 <HAL_SD_InitCard+0x70>
    hsd->State = HAL_SD_STATE_READY;
 8044cc0:	2501      	movs	r5, #1
 8044cc2:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8044cc6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8044cc8:	4318      	orrs	r0, r3
    hsd->ErrorCode |= errorstate;
 8044cca:	63a0      	str	r0, [r4, #56]	; 0x38
 8044ccc:	e084      	b.n	8044dd8 <HAL_SD_InitCard+0x178>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8044cce:	64a6      	str	r6, [r4, #72]	; 0x48
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8044cd0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8044cd2:	2b01      	cmp	r3, #1
 8044cd4:	d134      	bne.n	8044d40 <HAL_SD_InitCard+0xe0>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8044cd6:	2100      	movs	r1, #0
 8044cd8:	6820      	ldr	r0, [r4, #0]
 8044cda:	f001 fccd 	bl	8046678 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8044cde:	b378      	cbz	r0, 8044d40 <HAL_SD_InitCard+0xe0>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8044ce0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8044ce4:	e7ec      	b.n	8044cc0 <HAL_SD_InitCard+0x60>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8044ce6:	4631      	mov	r1, r6
 8044ce8:	6820      	ldr	r0, [r4, #0]
 8044cea:	f001 fcc5 	bl	8046678 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8044cee:	2800      	cmp	r0, #0
 8044cf0:	d1e6      	bne.n	8044cc0 <HAL_SD_InitCard+0x60>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8044cf2:	4649      	mov	r1, r9
 8044cf4:	6820      	ldr	r0, [r4, #0]
 8044cf6:	f001 fcd7 	bl	80466a8 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8044cfa:	2800      	cmp	r0, #0
 8044cfc:	d1f0      	bne.n	8044ce0 <HAL_SD_InitCard+0x80>
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8044cfe:	4631      	mov	r1, r6
 8044d00:	6820      	ldr	r0, [r4, #0]
 8044d02:	f001 fb90 	bl	8046426 <SDIO_GetResponse>
    count++;
 8044d06:	9b06      	ldr	r3, [sp, #24]
 8044d08:	3301      	adds	r3, #1
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8044d0a:	4605      	mov	r5, r0
    count++;
 8044d0c:	9306      	str	r3, [sp, #24]
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8044d0e:	0fc6      	lsrs	r6, r0, #31
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8044d10:	9b06      	ldr	r3, [sp, #24]
 8044d12:	42bb      	cmp	r3, r7
 8044d14:	d801      	bhi.n	8044d1a <HAL_SD_InitCard+0xba>
 8044d16:	2e00      	cmp	r6, #0
 8044d18:	d0e5      	beq.n	8044ce6 <HAL_SD_InitCard+0x86>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8044d1a:	9b06      	ldr	r3, [sp, #24]
 8044d1c:	4543      	cmp	r3, r8
 8044d1e:	d816      	bhi.n	8044d4e <HAL_SD_InitCard+0xee>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8044d20:	f015 4580 	ands.w	r5, r5, #1073741824	; 0x40000000
 8044d24:	f04f 0301 	mov.w	r3, #1
 8044d28:	bf18      	it	ne
 8044d2a:	461d      	movne	r5, r3
 8044d2c:	6465      	str	r5, [r4, #68]	; 0x44
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8044d2e:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1U;
 8044d30:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8044d34:	f001 fb60 	bl	80463f8 <SDIO_GetPowerState>
 8044d38:	b960      	cbnz	r0, 8044d54 <HAL_SD_InitCard+0xf4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8044d3a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8044d3e:	e056      	b.n	8044dee <HAL_SD_InitCard+0x18e>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8044d40:	f64f 77fe 	movw	r7, #65534	; 0xfffe
{
 8044d44:	2600      	movs	r6, #0
 8044d46:	46b8      	mov	r8, r7
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8044d48:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8044e44 <HAL_SD_InitCard+0x1e4>
 8044d4c:	e7e0      	b.n	8044d10 <HAL_SD_InitCard+0xb0>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8044d4e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8044d52:	e7b5      	b.n	8044cc0 <HAL_SD_InitCard+0x60>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8044d54:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8044d56:	2b03      	cmp	r3, #3
 8044d58:	d019      	beq.n	8044d8e <HAL_SD_InitCard+0x12e>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8044d5a:	6820      	ldr	r0, [r4, #0]
 8044d5c:	f001 fced 	bl	804673a <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8044d60:	2800      	cmp	r0, #0
 8044d62:	d144      	bne.n	8044dee <HAL_SD_InitCard+0x18e>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8044d64:	4601      	mov	r1, r0
 8044d66:	6820      	ldr	r0, [r4, #0]
 8044d68:	f001 fb5d 	bl	8046426 <SDIO_GetResponse>
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8044d6c:	2104      	movs	r1, #4
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8044d6e:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8044d70:	6820      	ldr	r0, [r4, #0]
 8044d72:	f001 fb58 	bl	8046426 <SDIO_GetResponse>
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8044d76:	2108      	movs	r1, #8
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8044d78:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8044d7a:	6820      	ldr	r0, [r4, #0]
 8044d7c:	f001 fb53 	bl	8046426 <SDIO_GetResponse>
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8044d80:	210c      	movs	r1, #12
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8044d82:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8044d84:	6820      	ldr	r0, [r4, #0]
 8044d86:	f001 fb4e 	bl	8046426 <SDIO_GetResponse>
 8044d8a:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED)
 8044d8e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8044d90:	2b03      	cmp	r3, #3
 8044d92:	d125      	bne.n	8044de0 <HAL_SD_InitCard+0x180>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8044d94:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8044d96:	2b03      	cmp	r3, #3
 8044d98:	d12f      	bne.n	8044dfa <HAL_SD_InitCard+0x19a>
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8044d9a:	2104      	movs	r1, #4
 8044d9c:	6820      	ldr	r0, [r4, #0]
 8044d9e:	f001 fb42 	bl	8046426 <SDIO_GetResponse>
 8044da2:	0d00      	lsrs	r0, r0, #20
 8044da4:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8044da6:	a90d      	add	r1, sp, #52	; 0x34
 8044da8:	4620      	mov	r0, r4
 8044daa:	f7ff fea3 	bl	8044af4 <HAL_SD_GetCardCSD>
 8044dae:	4605      	mov	r5, r0
 8044db0:	2800      	cmp	r0, #0
 8044db2:	d140      	bne.n	8044e36 <HAL_SD_InitCard+0x1d6>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8044db4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8044db6:	4603      	mov	r3, r0
 8044db8:	0412      	lsls	r2, r2, #16
 8044dba:	6820      	ldr	r0, [r4, #0]
 8044dbc:	f001 fbdc 	bl	8046578 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8044dc0:	b9a8      	cbnz	r0, 8044dee <HAL_SD_InitCard+0x18e>
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8044dc2:	f104 0310 	add.w	r3, r4, #16
 8044dc6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8044dca:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8044dce:	1d23      	adds	r3, r4, #4
 8044dd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8044dd2:	6820      	ldr	r0, [r4, #0]
 8044dd4:	f001 fae4 	bl	80463a0 <SDIO_Init>
}
 8044dd8:	4628      	mov	r0, r5
 8044dda:	b019      	add	sp, #100	; 0x64
 8044ddc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8044de0:	f10d 0116 	add.w	r1, sp, #22
 8044de4:	6820      	ldr	r0, [r4, #0]
 8044de6:	f001 fcd3 	bl	8046790 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8044dea:	2800      	cmp	r0, #0
 8044dec:	d0d2      	beq.n	8044d94 <HAL_SD_InitCard+0x134>
    hsd->State = HAL_SD_STATE_READY;
 8044dee:	2501      	movs	r5, #1
 8044df0:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8044df4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8044df6:	4308      	orrs	r0, r1
 8044df8:	e767      	b.n	8044cca <HAL_SD_InitCard+0x6a>
    hsd->SdCard.RelCardAdd = sd_rca;
 8044dfa:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8044dfe:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8044e00:	6820      	ldr	r0, [r4, #0]
 8044e02:	0409      	lsls	r1, r1, #16
 8044e04:	f001 fcae 	bl	8046764 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8044e08:	2800      	cmp	r0, #0
 8044e0a:	d1f0      	bne.n	8044dee <HAL_SD_InitCard+0x18e>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8044e0c:	4601      	mov	r1, r0
 8044e0e:	6820      	ldr	r0, [r4, #0]
 8044e10:	f001 fb09 	bl	8046426 <SDIO_GetResponse>
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8044e14:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8044e16:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8044e18:	6820      	ldr	r0, [r4, #0]
 8044e1a:	f001 fb04 	bl	8046426 <SDIO_GetResponse>
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8044e1e:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8044e20:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8044e22:	6820      	ldr	r0, [r4, #0]
 8044e24:	f001 faff 	bl	8046426 <SDIO_GetResponse>
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8044e28:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8044e2a:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8044e2c:	6820      	ldr	r0, [r4, #0]
 8044e2e:	f001 fafa 	bl	8046426 <SDIO_GetResponse>
 8044e32:	6720      	str	r0, [r4, #112]	; 0x70
 8044e34:	e7b1      	b.n	8044d9a <HAL_SD_InitCard+0x13a>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8044e36:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8044e3a:	e7d8      	b.n	8044dee <HAL_SD_InitCard+0x18e>
    return HAL_ERROR;
 8044e3c:	2501      	movs	r5, #1
 8044e3e:	e7cb      	b.n	8044dd8 <HAL_SD_InitCard+0x178>
 8044e40:	422580a0 	.word	0x422580a0
 8044e44:	c1100000 	.word	0xc1100000

08044e48 <HAL_SD_Init>:
{
 8044e48:	b510      	push	{r4, lr}
  if(hsd == NULL)
 8044e4a:	4604      	mov	r4, r0
 8044e4c:	b908      	cbnz	r0, 8044e52 <HAL_SD_Init+0xa>
    return HAL_ERROR;
 8044e4e:	2001      	movs	r0, #1
}
 8044e50:	bd10      	pop	{r4, pc}
  if(hsd->State == HAL_SD_STATE_RESET)
 8044e52:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8044e56:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8044e5a:	b913      	cbnz	r3, 8044e62 <HAL_SD_Init+0x1a>
    hsd->Lock = HAL_UNLOCKED;
 8044e5c:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8044e5e:	f007 fd57 	bl	804c910 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 8044e62:	2303      	movs	r3, #3
 8044e64:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8044e68:	4620      	mov	r0, r4
 8044e6a:	f7ff fef9 	bl	8044c60 <HAL_SD_InitCard>
 8044e6e:	2800      	cmp	r0, #0
 8044e70:	d1ed      	bne.n	8044e4e <HAL_SD_Init+0x6>
  hsd->State = HAL_SD_STATE_READY;
 8044e72:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8044e74:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8044e76:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8044e78:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8044e7c:	e7e8      	b.n	8044e50 <HAL_SD_Init+0x8>

08044e7e <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8044e7e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8044e80:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8044e82:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8044e84:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8044e86:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8044e88:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8044e8a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8044e8c:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8044e8e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8044e90:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8044e92:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8044e94:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8044e96:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8044e98:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8044e9a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8044e9c:	61cb      	str	r3, [r1, #28]
}
 8044e9e:	2000      	movs	r0, #0
 8044ea0:	4770      	bx	lr
	...

08044ea4 <HAL_SD_ConfigWideBusOperation>:
{
 8044ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 8044ea6:	2303      	movs	r3, #3
 8044ea8:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 8044eac:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8044eae:	2b03      	cmp	r3, #3
{
 8044eb0:	b08b      	sub	sp, #44	; 0x2c
 8044eb2:	4604      	mov	r4, r0
 8044eb4:	460e      	mov	r6, r1
  if(hsd->SdCard.CardType != CARD_SECURED)
 8044eb6:	d002      	beq.n	8044ebe <HAL_SD_ConfigWideBusOperation+0x1a>
    if(WideMode == SDIO_BUS_WIDE_8B)
 8044eb8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8044ebc:	d103      	bne.n	8044ec6 <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8044ebe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8044ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8044ec4:	e053      	b.n	8044f6e <HAL_SD_ConfigWideBusOperation+0xca>
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8044ec6:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8044eca:	6800      	ldr	r0, [r0, #0]
 8044ecc:	d12a      	bne.n	8044f24 <HAL_SD_ConfigWideBusOperation+0x80>
  uint32_t scr[2U] = {0U, 0U};
 8044ece:	2100      	movs	r1, #0
 8044ed0:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8044ed4:	f001 faa7 	bl	8046426 <SDIO_GetResponse>
 8044ed8:	0180      	lsls	r0, r0, #6
 8044eda:	d41e      	bmi.n	8044f1a <HAL_SD_ConfigWideBusOperation+0x76>
  errorstate = SD_FindSCR(hsd, scr);
 8044edc:	a904      	add	r1, sp, #16
 8044ede:	4620      	mov	r0, r4
 8044ee0:	f7ff fc53 	bl	804478a <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8044ee4:	b960      	cbnz	r0, 8044f00 <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8044ee6:	9b05      	ldr	r3, [sp, #20]
 8044ee8:	0359      	lsls	r1, r3, #13
 8044eea:	d518      	bpl.n	8044f1e <HAL_SD_ConfigWideBusOperation+0x7a>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8044eec:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8044eee:	6820      	ldr	r0, [r4, #0]
 8044ef0:	0409      	lsls	r1, r1, #16
 8044ef2:	f001 fbc1 	bl	8046678 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8044ef6:	b918      	cbnz	r0, 8044f00 <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8044ef8:	2102      	movs	r1, #2
 8044efa:	6820      	ldr	r0, [r4, #0]
 8044efc:	f001 fbed 	bl	80466da <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8044f00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8044f02:	4318      	orrs	r0, r3
      hsd->ErrorCode |= errorstate;
 8044f04:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8044f06:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8044f08:	6827      	ldr	r7, [r4, #0]
 8044f0a:	b395      	cbz	r5, 8044f72 <HAL_SD_ConfigWideBusOperation+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8044f0c:	4b26      	ldr	r3, [pc, #152]	; (8044fa8 <HAL_SD_ConfigWideBusOperation+0x104>)
 8044f0e:	63bb      	str	r3, [r7, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8044f10:	2001      	movs	r0, #1
 8044f12:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 8044f16:	b00b      	add	sp, #44	; 0x2c
 8044f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8044f1a:	4630      	mov	r0, r6
 8044f1c:	e7f0      	b.n	8044f00 <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8044f1e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8044f22:	e7ed      	b.n	8044f00 <HAL_SD_ConfigWideBusOperation+0x5c>
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8044f24:	bb01      	cbnz	r1, 8044f68 <HAL_SD_ConfigWideBusOperation+0xc4>
  uint32_t scr[2U] = {0U, 0U};
 8044f26:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8044f2a:	f001 fa7c 	bl	8046426 <SDIO_GetResponse>
 8044f2e:	0182      	lsls	r2, r0, #6
 8044f30:	d414      	bmi.n	8044f5c <HAL_SD_ConfigWideBusOperation+0xb8>
  errorstate = SD_FindSCR(hsd, scr);
 8044f32:	a904      	add	r1, sp, #16
 8044f34:	4620      	mov	r0, r4
 8044f36:	f7ff fc28 	bl	804478a <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8044f3a:	b960      	cbnz	r0, 8044f56 <HAL_SD_ConfigWideBusOperation+0xb2>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8044f3c:	9b05      	ldr	r3, [sp, #20]
 8044f3e:	03db      	lsls	r3, r3, #15
 8044f40:	d50f      	bpl.n	8044f62 <HAL_SD_ConfigWideBusOperation+0xbe>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8044f42:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8044f44:	6820      	ldr	r0, [r4, #0]
 8044f46:	0409      	lsls	r1, r1, #16
 8044f48:	f001 fb96 	bl	8046678 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8044f4c:	b918      	cbnz	r0, 8044f56 <HAL_SD_ConfigWideBusOperation+0xb2>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8044f4e:	4601      	mov	r1, r0
 8044f50:	6820      	ldr	r0, [r4, #0]
 8044f52:	f001 fbc2 	bl	80466da <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8044f56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8044f58:	4308      	orrs	r0, r1
 8044f5a:	e7d3      	b.n	8044f04 <HAL_SD_ConfigWideBusOperation+0x60>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8044f5c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8044f60:	e7f9      	b.n	8044f56 <HAL_SD_ConfigWideBusOperation+0xb2>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8044f62:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8044f66:	e7f6      	b.n	8044f56 <HAL_SD_ConfigWideBusOperation+0xb2>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8044f68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8044f6a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8044f6e:	63a3      	str	r3, [r4, #56]	; 0x38
 8044f70:	e7c9      	b.n	8044f06 <HAL_SD_ConfigWideBusOperation+0x62>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8044f72:	6863      	ldr	r3, [r4, #4]
 8044f74:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8044f76:	68a3      	ldr	r3, [r4, #8]
 8044f78:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8044f7a:	68e3      	ldr	r3, [r4, #12]
    Init.BusWide             = WideMode;
 8044f7c:	e9cd 3606 	strd	r3, r6, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8044f80:	6963      	ldr	r3, [r4, #20]
 8044f82:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8044f84:	69a3      	ldr	r3, [r4, #24]
 8044f86:	9309      	str	r3, [sp, #36]	; 0x24
    (void)SDIO_Init(hsd->Instance, Init);
 8044f88:	ab0a      	add	r3, sp, #40	; 0x28
 8044f8a:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8044f8e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8044f92:	ab04      	add	r3, sp, #16
 8044f94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8044f96:	4638      	mov	r0, r7
 8044f98:	f001 fa02 	bl	80463a0 <SDIO_Init>
  hsd->State = HAL_SD_STATE_READY;
 8044f9c:	2301      	movs	r3, #1
 8044f9e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8044fa2:	4628      	mov	r0, r5
 8044fa4:	e7b7      	b.n	8044f16 <HAL_SD_ConfigWideBusOperation+0x72>
 8044fa6:	bf00      	nop
 8044fa8:	004005ff 	.word	0x004005ff

08044fac <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8044fac:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 8044fae:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8044fb0:	0409      	lsls	r1, r1, #16
{
 8044fb2:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8044fb4:	6800      	ldr	r0, [r0, #0]
 8044fb6:	f001 fc3b 	bl	8046830 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8044fba:	4601      	mov	r1, r0
 8044fbc:	b928      	cbnz	r0, 8044fca <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8044fbe:	6820      	ldr	r0, [r4, #0]
 8044fc0:	f001 fa31 	bl	8046426 <SDIO_GetResponse>
}
 8044fc4:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8044fc8:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 8044fca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8044fcc:	4319      	orrs	r1, r3
 8044fce:	63a1      	str	r1, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 8044fd0:	2000      	movs	r0, #0
 8044fd2:	e7f7      	b.n	8044fc4 <HAL_SD_GetCardState+0x18>

08044fd4 <SD_DMAError>:
{
 8044fd4:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8044fd6:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8044fd8:	f7fe faa6 	bl	8043528 <HAL_DMA_GetError>
 8044fdc:	2802      	cmp	r0, #2
 8044fde:	d026      	beq.n	804502e <SD_DMAError+0x5a>
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8044fe0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8044fe2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8044fe4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8044fe6:	2a01      	cmp	r2, #1
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8044fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8044fea:	d001      	beq.n	8044ff0 <SD_DMAError+0x1c>
 8044fec:	2b01      	cmp	r3, #1
 8044fee:	d11b      	bne.n	8045028 <SD_DMAError+0x54>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8044ff0:	6823      	ldr	r3, [r4, #0]
 8044ff2:	4a0f      	ldr	r2, [pc, #60]	; (8045030 <SD_DMAError+0x5c>)
 8044ff4:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8044ff6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8044ff8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8044ffc:	63da      	str	r2, [r3, #60]	; 0x3c
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8044ffe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8045000:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8045004:	63a3      	str	r3, [r4, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8045006:	4620      	mov	r0, r4
 8045008:	f7ff ffd0 	bl	8044fac <HAL_SD_GetCardState>
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 804500c:	3805      	subs	r0, #5
 804500e:	2801      	cmp	r0, #1
 8045010:	d805      	bhi.n	804501e <SD_DMAError+0x4a>
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8045012:	6820      	ldr	r0, [r4, #0]
 8045014:	f001 fa96 	bl	8046544 <SDMMC_CmdStopTransfer>
 8045018:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 804501a:	4318      	orrs	r0, r3
 804501c:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 804501e:	2301      	movs	r3, #1
 8045020:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8045024:	2300      	movs	r3, #0
 8045026:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_SD_ErrorCallback(hsd);
 8045028:	4620      	mov	r0, r4
 804502a:	f7ff fd41 	bl	8044ab0 <HAL_SD_ErrorCallback>
}
 804502e:	bd10      	pop	{r4, pc}
 8045030:	004005ff 	.word	0x004005ff

08045034 <SD_DMATxAbort>:
{
 8045034:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8045036:	6b84      	ldr	r4, [r0, #56]	; 0x38
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8045038:	6823      	ldr	r3, [r4, #0]
 804503a:	f240 523a 	movw	r2, #1338	; 0x53a
 804503e:	639a      	str	r2, [r3, #56]	; 0x38
  CardState = HAL_SD_GetCardState(hsd);
 8045040:	4620      	mov	r0, r4
 8045042:	f7ff ffb3 	bl	8044fac <HAL_SD_GetCardState>
  hsd->State = HAL_SD_STATE_READY;
 8045046:	2301      	movs	r3, #1
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8045048:	3805      	subs	r0, #5
  hsd->State = HAL_SD_STATE_READY;
 804504a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 804504e:	2801      	cmp	r0, #1
  hsd->Context = SD_CONTEXT_NONE;
 8045050:	f04f 0300 	mov.w	r3, #0
 8045054:	6323      	str	r3, [r4, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8045056:	d805      	bhi.n	8045064 <SD_DMATxAbort+0x30>
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8045058:	6820      	ldr	r0, [r4, #0]
 804505a:	f001 fa73 	bl	8046544 <SDMMC_CmdStopTransfer>
 804505e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8045060:	4318      	orrs	r0, r3
 8045062:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8045064:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    HAL_SD_AbortCallback(hsd);
 8045066:	4620      	mov	r0, r4
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8045068:	b913      	cbnz	r3, 8045070 <SD_DMATxAbort+0x3c>
    HAL_SD_AbortCallback(hsd);
 804506a:	f7fd fec2 	bl	8042df2 <HAL_SD_AbortCallback>
}
 804506e:	bd10      	pop	{r4, pc}
    HAL_SD_ErrorCallback(hsd);
 8045070:	f7ff fd1e 	bl	8044ab0 <HAL_SD_ErrorCallback>
}
 8045074:	e7fb      	b.n	804506e <SD_DMATxAbort+0x3a>
	...

08045078 <HAL_SD_IRQHandler>:
{
 8045078:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t context = hsd->Context;
 804507c:	6b05      	ldr	r5, [r0, #48]	; 0x30
{
 804507e:	4604      	mov	r4, r0
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8045080:	6800      	ldr	r0, [r0, #0]
 8045082:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8045084:	041a      	lsls	r2, r3, #16
 8045086:	d51f      	bpl.n	80450c8 <HAL_SD_IRQHandler+0x50>
 8045088:	072b      	lsls	r3, r5, #28
 804508a:	d51d      	bpl.n	80450c8 <HAL_SD_IRQHandler+0x50>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
  dataremaining = hsd->RxXferSize;
 804508c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c

  if (dataremaining > 0U)
 804508e:	b1c7      	cbz	r7, 80450c2 <HAL_SD_IRQHandler+0x4a>
  tmp = hsd->pRxBuffPtr;
 8045090:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8045092:	1d35      	adds	r5, r6, #4
 8045094:	f106 0824 	add.w	r8, r6, #36	; 0x24
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8045098:	6820      	ldr	r0, [r4, #0]
 804509a:	f001 f99d 	bl	80463d8 <SDIO_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 804509e:	0a03      	lsrs	r3, r0, #8
      *tmp = (uint8_t)(data & 0xFFU);
 80450a0:	f805 0c04 	strb.w	r0, [r5, #-4]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80450a4:	f805 3c03 	strb.w	r3, [r5, #-3]
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80450a8:	0c03      	lsrs	r3, r0, #16
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80450aa:	0e00      	lsrs	r0, r0, #24
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80450ac:	f805 3c02 	strb.w	r3, [r5, #-2]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80450b0:	f805 0c01 	strb.w	r0, [r5, #-1]
 80450b4:	3504      	adds	r5, #4
    for(count = 0U; count < 8U; count++)
 80450b6:	4545      	cmp	r5, r8
 80450b8:	d1ee      	bne.n	8045098 <HAL_SD_IRQHandler+0x20>
      tmp++;
      dataremaining--;
    }

    hsd->pRxBuffPtr = tmp;
 80450ba:	3620      	adds	r6, #32
    hsd->RxXferSize = dataremaining;
 80450bc:	3f20      	subs	r7, #32
    hsd->pRxBuffPtr = tmp;
 80450be:	62a6      	str	r6, [r4, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80450c0:	62e7      	str	r7, [r4, #44]	; 0x2c
}
 80450c2:	b002      	add	sp, #8
 80450c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80450c8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80450ca:	05df      	lsls	r7, r3, #23
 80450cc:	d545      	bpl.n	804515a <HAL_SD_IRQHandler+0xe2>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80450ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80450d2:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80450d4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80450d6:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80450da:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80450de:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80450e0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 80450e2:	072e      	lsls	r6, r5, #28
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80450e4:	f023 0301 	bic.w	r3, r3, #1
 80450e8:	62c3      	str	r3, [r0, #44]	; 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 80450ea:	d51b      	bpl.n	8045124 <HAL_SD_IRQHandler+0xac>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80450ec:	f015 0f22 	tst.w	r5, #34	; 0x22
 80450f0:	d008      	beq.n	8045104 <HAL_SD_IRQHandler+0x8c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80450f2:	f001 fa27 	bl	8046544 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80450f6:	b128      	cbz	r0, 8045104 <HAL_SD_IRQHandler+0x8c>
          hsd->ErrorCode |= errorstate;
 80450f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80450fa:	4318      	orrs	r0, r3
 80450fc:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80450fe:	4620      	mov	r0, r4
 8045100:	f7ff fcd6 	bl	8044ab0 <HAL_SD_ErrorCallback>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8045104:	6823      	ldr	r3, [r4, #0]
 8045106:	f240 523a 	movw	r2, #1338	; 0x53a
 804510a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 804510c:	2301      	movs	r3, #1
 804510e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8045112:	07a9      	lsls	r1, r5, #30
      hsd->Context = SD_CONTEXT_NONE;
 8045114:	f04f 0300 	mov.w	r3, #0
 8045118:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_SD_RxCpltCallback(hsd);
 804511a:	4620      	mov	r0, r4
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 804511c:	d01a      	beq.n	8045154 <HAL_SD_IRQHandler+0xdc>
        HAL_SD_RxCpltCallback(hsd);
 804511e:	f7fd fe70 	bl	8042e02 <HAL_SD_RxCpltCallback>
 8045122:	e7ce      	b.n	80450c2 <HAL_SD_IRQHandler+0x4a>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8045124:	062a      	lsls	r2, r5, #24
 8045126:	d5cc      	bpl.n	80450c2 <HAL_SD_IRQHandler+0x4a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8045128:	06ab      	lsls	r3, r5, #26
 804512a:	d508      	bpl.n	804513e <HAL_SD_IRQHandler+0xc6>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 804512c:	f001 fa0a 	bl	8046544 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8045130:	b128      	cbz	r0, 804513e <HAL_SD_IRQHandler+0xc6>
          hsd->ErrorCode |= errorstate;
 8045132:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8045134:	4318      	orrs	r0, r3
 8045136:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8045138:	4620      	mov	r0, r4
 804513a:	f7ff fcb9 	bl	8044ab0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 804513e:	07af      	lsls	r7, r5, #30
 8045140:	d1bf      	bne.n	80450c2 <HAL_SD_IRQHandler+0x4a>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8045142:	6822      	ldr	r2, [r4, #0]
 8045144:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8045146:	f023 0308 	bic.w	r3, r3, #8
 804514a:	62d3      	str	r3, [r2, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 804514c:	2301      	movs	r3, #1
 804514e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8045152:	4620      	mov	r0, r4
 8045154:	f7fd fe51 	bl	8042dfa <HAL_SD_TxCpltCallback>
 8045158:	e7b3      	b.n	80450c2 <HAL_SD_IRQHandler+0x4a>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 804515a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 804515c:	045e      	lsls	r6, r3, #17
 804515e:	d526      	bpl.n	80451ae <HAL_SD_IRQHandler+0x136>
 8045160:	0729      	lsls	r1, r5, #28
 8045162:	d524      	bpl.n	80451ae <HAL_SD_IRQHandler+0x136>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
  dataremaining = hsd->TxXferSize;
 8045164:	6a67      	ldr	r7, [r4, #36]	; 0x24

  if (dataremaining > 0U)
 8045166:	2f00      	cmp	r7, #0
 8045168:	d0ab      	beq.n	80450c2 <HAL_SD_IRQHandler+0x4a>
  tmp = hsd->pTxBuffPtr;
 804516a:	6a26      	ldr	r6, [r4, #32]
 804516c:	1d35      	adds	r5, r6, #4
 804516e:	f106 0824 	add.w	r8, r6, #36	; 0x24
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
    {
      data = (uint32_t)(*tmp);
 8045172:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 8045176:	9301      	str	r3, [sp, #4]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 8U);
 8045178:	f815 2c03 	ldrb.w	r2, [r5, #-3]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 24U);
      tmp++;
      dataremaining--;
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 804517c:	6820      	ldr	r0, [r4, #0]
      data |= ((uint32_t)(*tmp) << 8U);
 804517e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8045182:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 8045184:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 8045188:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 804518c:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 804518e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8045192:	a901      	add	r1, sp, #4
      data |= ((uint32_t)(*tmp) << 24U);
 8045194:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8045198:	3504      	adds	r5, #4
 804519a:	9301      	str	r3, [sp, #4]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 804519c:	f001 f91f 	bl	80463de <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80451a0:	4545      	cmp	r5, r8
 80451a2:	d1e6      	bne.n	8045172 <HAL_SD_IRQHandler+0xfa>
    }

    hsd->pTxBuffPtr = tmp;
 80451a4:	3620      	adds	r6, #32
    hsd->TxXferSize = dataremaining;
 80451a6:	3f20      	subs	r7, #32
    hsd->pTxBuffPtr = tmp;
 80451a8:	6226      	str	r6, [r4, #32]
    hsd->TxXferSize = dataremaining;
 80451aa:	6267      	str	r7, [r4, #36]	; 0x24
 80451ac:	e789      	b.n	80450c2 <HAL_SD_IRQHandler+0x4a>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80451ae:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80451b0:	f240 233a 	movw	r3, #570	; 0x23a
 80451b4:	421a      	tst	r2, r3
 80451b6:	d084      	beq.n	80450c2 <HAL_SD_IRQHandler+0x4a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80451b8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80451ba:	079a      	lsls	r2, r3, #30
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80451bc:	bf42      	ittt	mi
 80451be:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 80451c0:	f043 0302 	orrmi.w	r3, r3, #2
 80451c4:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80451c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80451c8:	071b      	lsls	r3, r3, #28
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80451ca:	bf42      	ittt	mi
 80451cc:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 80451ce:	f043 0308 	orrmi.w	r3, r3, #8
 80451d2:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80451d4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80451d6:	069f      	lsls	r7, r3, #26
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80451d8:	bf42      	ittt	mi
 80451da:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 80451dc:	f043 0320 	orrmi.w	r3, r3, #32
 80451e0:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80451e2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80451e4:	06de      	lsls	r6, r3, #27
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80451e6:	bf42      	ittt	mi
 80451e8:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 80451ea:	f043 0310 	orrmi.w	r3, r3, #16
 80451ee:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80451f0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80451f2:	0599      	lsls	r1, r3, #22
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80451f4:	bf42      	ittt	mi
 80451f6:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 80451f8:	f043 0308 	orrmi.w	r3, r3, #8
 80451fc:	63a3      	strmi	r3, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80451fe:	f240 733a 	movw	r3, #1850	; 0x73a
 8045202:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8045204:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8045206:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 804520a:	f023 0302 	bic.w	r3, r3, #2
 804520e:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8045210:	f001 f998 	bl	8046544 <SDMMC_CmdStopTransfer>
 8045214:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8045216:	072a      	lsls	r2, r5, #28
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8045218:	ea40 0003 	orr.w	r0, r0, r3
 804521c:	63a0      	str	r0, [r4, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 804521e:	d508      	bpl.n	8045232 <HAL_SD_IRQHandler+0x1ba>
      hsd->State = HAL_SD_STATE_READY;
 8045220:	2301      	movs	r3, #1
 8045222:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8045226:	2300      	movs	r3, #0
 8045228:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 804522a:	4620      	mov	r0, r4
 804522c:	f7ff fc40 	bl	8044ab0 <HAL_SD_ErrorCallback>
 8045230:	e747      	b.n	80450c2 <HAL_SD_IRQHandler+0x4a>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8045232:	062b      	lsls	r3, r5, #24
 8045234:	f57f af45 	bpl.w	80450c2 <HAL_SD_IRQHandler+0x4a>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8045238:	f015 0f30 	tst.w	r5, #48	; 0x30
 804523c:	d00b      	beq.n	8045256 <HAL_SD_IRQHandler+0x1de>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 804523e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8045240:	4b10      	ldr	r3, [pc, #64]	; (8045284 <HAL_SD_IRQHandler+0x20c>)
 8045242:	6503      	str	r3, [r0, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8045244:	f7fe f8a0 	bl	8043388 <HAL_DMA_Abort_IT>
 8045248:	2800      	cmp	r0, #0
 804524a:	f43f af3a 	beq.w	80450c2 <HAL_SD_IRQHandler+0x4a>
          SD_DMATxAbort(hsd->hdmatx);
 804524e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
          SD_DMARxAbort(hsd->hdmarx);
 8045250:	f7ff fef0 	bl	8045034 <SD_DMATxAbort>
 8045254:	e735      	b.n	80450c2 <HAL_SD_IRQHandler+0x4a>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8045256:	f015 0503 	ands.w	r5, r5, #3
 804525a:	d009      	beq.n	8045270 <HAL_SD_IRQHandler+0x1f8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 804525c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 804525e:	4b0a      	ldr	r3, [pc, #40]	; (8045288 <HAL_SD_IRQHandler+0x210>)
 8045260:	6503      	str	r3, [r0, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8045262:	f7fe f891 	bl	8043388 <HAL_DMA_Abort_IT>
 8045266:	2800      	cmp	r0, #0
 8045268:	f43f af2b 	beq.w	80450c2 <HAL_SD_IRQHandler+0x4a>
          SD_DMARxAbort(hsd->hdmarx);
 804526c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 804526e:	e7ef      	b.n	8045250 <HAL_SD_IRQHandler+0x1d8>
        hsd->State = HAL_SD_STATE_READY;
 8045270:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8045272:	63a5      	str	r5, [r4, #56]	; 0x38
        HAL_SD_AbortCallback(hsd);
 8045274:	4620      	mov	r0, r4
        hsd->State = HAL_SD_STATE_READY;
 8045276:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 804527a:	6325      	str	r5, [r4, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 804527c:	f7fd fdb9 	bl	8042df2 <HAL_SD_AbortCallback>
}
 8045280:	e71f      	b.n	80450c2 <HAL_SD_IRQHandler+0x4a>
 8045282:	bf00      	nop
 8045284:	08045035 	.word	0x08045035
 8045288:	0804528d 	.word	0x0804528d

0804528c <SD_DMARxAbort>:
 804528c:	f7ff bed2 	b.w	8045034 <SD_DMATxAbort>

08045290 <SPI_WaitFlagStateUntilTimeout.constprop.7>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8045290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8045292:	4604      	mov	r4, r0
 8045294:	460e      	mov	r6, r1
 8045296:	4615      	mov	r5, r2
 8045298:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 804529a:	6821      	ldr	r1, [r4, #0]
 804529c:	688a      	ldr	r2, [r1, #8]
 804529e:	ea36 0302 	bics.w	r3, r6, r2
 80452a2:	d001      	beq.n	80452a8 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80452a4:	2000      	movs	r0, #0
 80452a6:	e02d      	b.n	8045304 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x74>
    if (Timeout != HAL_MAX_DELAY)
 80452a8:	1c6b      	adds	r3, r5, #1
 80452aa:	d0f7      	beq.n	804529c <SPI_WaitFlagStateUntilTimeout.constprop.7+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80452ac:	f7fd fee4 	bl	8043078 <HAL_GetTick>
 80452b0:	1bc0      	subs	r0, r0, r7
 80452b2:	4285      	cmp	r5, r0
 80452b4:	d8f1      	bhi.n	804529a <SPI_WaitFlagStateUntilTimeout.constprop.7+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80452b6:	6823      	ldr	r3, [r4, #0]
 80452b8:	685a      	ldr	r2, [r3, #4]
 80452ba:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80452be:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80452c0:	6862      	ldr	r2, [r4, #4]
 80452c2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80452c6:	d10a      	bne.n	80452de <SPI_WaitFlagStateUntilTimeout.constprop.7+0x4e>
 80452c8:	68a2      	ldr	r2, [r4, #8]
 80452ca:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80452ce:	d002      	beq.n	80452d6 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80452d0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80452d4:	d103      	bne.n	80452de <SPI_WaitFlagStateUntilTimeout.constprop.7+0x4e>
          __HAL_SPI_DISABLE(hspi);
 80452d6:	681a      	ldr	r2, [r3, #0]
 80452d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80452dc:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80452de:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80452e0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80452e4:	d107      	bne.n	80452f6 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x66>
          SPI_RESET_CRC(hspi);
 80452e6:	681a      	ldr	r2, [r3, #0]
 80452e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80452ec:	601a      	str	r2, [r3, #0]
 80452ee:	681a      	ldr	r2, [r3, #0]
 80452f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80452f4:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80452f6:	2301      	movs	r3, #1
 80452f8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80452fc:	2300      	movs	r3, #0
 80452fe:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8045302:	2003      	movs	r0, #3
}
 8045304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08045308 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8045308:	b573      	push	{r0, r1, r4, r5, r6, lr}
 804530a:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 804530c:	4a12      	ldr	r2, [pc, #72]	; (8045358 <SPI_EndRxTxTransaction+0x50>)
 804530e:	4e13      	ldr	r6, [pc, #76]	; (804535c <SPI_EndRxTxTransaction+0x54>)
 8045310:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8045312:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8045314:	fbb5 f6f6 	udiv	r6, r5, r6
 8045318:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 804531c:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 804531e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8045322:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8045324:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8045326:	d10b      	bne.n	8045340 <SPI_EndRxTxTransaction+0x38>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8045328:	460a      	mov	r2, r1
 804532a:	2180      	movs	r1, #128	; 0x80
 804532c:	f7ff ffb0 	bl	8045290 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 8045330:	b178      	cbz	r0, 8045352 <SPI_EndRxTxTransaction+0x4a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8045332:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8045334:	f043 0320 	orr.w	r3, r3, #32
 8045338:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 804533a:	2003      	movs	r0, #3
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 804533c:	b002      	add	sp, #8
 804533e:	bd70      	pop	{r4, r5, r6, pc}
      if (count == 0U)
 8045340:	9b01      	ldr	r3, [sp, #4]
 8045342:	b133      	cbz	r3, 8045352 <SPI_EndRxTxTransaction+0x4a>
      count--;
 8045344:	9b01      	ldr	r3, [sp, #4]
 8045346:	3b01      	subs	r3, #1
 8045348:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 804534a:	6823      	ldr	r3, [r4, #0]
 804534c:	689b      	ldr	r3, [r3, #8]
 804534e:	061b      	lsls	r3, r3, #24
 8045350:	d4f6      	bmi.n	8045340 <SPI_EndRxTxTransaction+0x38>
  return HAL_OK;
 8045352:	2000      	movs	r0, #0
 8045354:	e7f2      	b.n	804533c <SPI_EndRxTxTransaction+0x34>
 8045356:	bf00      	nop
 8045358:	2000108c 	.word	0x2000108c
 804535c:	016e3600 	.word	0x016e3600

08045360 <HAL_SPI_Init>:
{
 8045360:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8045362:	4604      	mov	r4, r0
 8045364:	2800      	cmp	r0, #0
 8045366:	d036      	beq.n	80453d6 <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8045368:	2300      	movs	r3, #0
 804536a:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 804536c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8045370:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8045374:	b91b      	cbnz	r3, 804537e <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8045376:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 804537a:	f007 fbab 	bl	804cad4 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 804537e:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8045380:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8045382:	2302      	movs	r3, #2
 8045384:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8045388:	680b      	ldr	r3, [r1, #0]
 804538a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 804538e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8045390:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8045394:	4303      	orrs	r3, r0
 8045396:	68e0      	ldr	r0, [r4, #12]
 8045398:	4303      	orrs	r3, r0
 804539a:	6920      	ldr	r0, [r4, #16]
 804539c:	4303      	orrs	r3, r0
 804539e:	6960      	ldr	r0, [r4, #20]
 80453a0:	4303      	orrs	r3, r0
 80453a2:	69e0      	ldr	r0, [r4, #28]
 80453a4:	4303      	orrs	r3, r0
 80453a6:	6a20      	ldr	r0, [r4, #32]
 80453a8:	4303      	orrs	r3, r0
 80453aa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80453ac:	4303      	orrs	r3, r0
 80453ae:	f402 7000 	and.w	r0, r2, #512	; 0x200
 80453b2:	4303      	orrs	r3, r0
 80453b4:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80453b6:	0c12      	lsrs	r2, r2, #16
 80453b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80453ba:	f002 0204 	and.w	r2, r2, #4
 80453be:	431a      	orrs	r2, r3
 80453c0:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80453c2:	69cb      	ldr	r3, [r1, #28]
 80453c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80453c8:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80453ca:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80453cc:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80453ce:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80453d0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80453d4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80453d6:	2001      	movs	r0, #1
 80453d8:	e7fc      	b.n	80453d4 <HAL_SPI_Init+0x74>

080453da <HAL_SPI_TransmitReceive>:
{
 80453da:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80453de:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80453e0:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 80453e4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 80453e6:	2b01      	cmp	r3, #1
{
 80453e8:	4604      	mov	r4, r0
 80453ea:	460d      	mov	r5, r1
 80453ec:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 80453ee:	f000 80e2 	beq.w	80455b6 <HAL_SPI_TransmitReceive+0x1dc>
 80453f2:	2301      	movs	r3, #1
 80453f4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80453f8:	f7fd fe3e 	bl	8043078 <HAL_GetTick>
  tmp_state           = hspi->State;
 80453fc:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8045400:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8045402:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8045404:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8045406:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8045408:	d00a      	beq.n	8045420 <HAL_SPI_TransmitReceive+0x46>
 804540a:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 804540e:	f040 80d0 	bne.w	80455b2 <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8045412:	68a0      	ldr	r0, [r4, #8]
 8045414:	2800      	cmp	r0, #0
 8045416:	f040 80cc 	bne.w	80455b2 <HAL_SPI_TransmitReceive+0x1d8>
 804541a:	2b04      	cmp	r3, #4
 804541c:	f040 80c9 	bne.w	80455b2 <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8045420:	2d00      	cmp	r5, #0
 8045422:	f000 80c4 	beq.w	80455ae <HAL_SPI_TransmitReceive+0x1d4>
 8045426:	f1b9 0f00 	cmp.w	r9, #0
 804542a:	f000 80c0 	beq.w	80455ae <HAL_SPI_TransmitReceive+0x1d4>
 804542e:	2e00      	cmp	r6, #0
 8045430:	f000 80bd 	beq.w	80455ae <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8045434:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8045438:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 804543c:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 804543e:	bf1c      	itt	ne
 8045440:	2305      	movne	r3, #5
 8045442:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8045446:	2300      	movs	r3, #0
 8045448:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 804544a:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 804544e:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8045450:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8045452:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8045454:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8045456:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8045458:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 804545a:	bf58      	it	pl
 804545c:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 804545e:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8045460:	bf58      	it	pl
 8045462:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8045466:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8045468:	bf58      	it	pl
 804546a:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 804546c:	68e2      	ldr	r2, [r4, #12]
 804546e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8045472:	d158      	bne.n	8045526 <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8045474:	b109      	cbz	r1, 804547a <HAL_SPI_TransmitReceive+0xa0>
 8045476:	2e01      	cmp	r6, #1
 8045478:	d107      	bne.n	804548a <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 804547a:	f835 2b02 	ldrh.w	r2, [r5], #2
 804547e:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8045480:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8045482:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8045484:	3b01      	subs	r3, #1
 8045486:	b29b      	uxth	r3, r3
 8045488:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 804548a:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 804548c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 804548e:	b29b      	uxth	r3, r3
 8045490:	b9ab      	cbnz	r3, 80454be <HAL_SPI_TransmitReceive+0xe4>
 8045492:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8045494:	b29b      	uxth	r3, r3
 8045496:	b993      	cbnz	r3, 80454be <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8045498:	4642      	mov	r2, r8
 804549a:	4639      	mov	r1, r7
 804549c:	4620      	mov	r0, r4
 804549e:	f7ff ff33 	bl	8045308 <SPI_EndRxTxTransaction>
 80454a2:	2800      	cmp	r0, #0
 80454a4:	f040 8081 	bne.w	80455aa <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80454a8:	68a3      	ldr	r3, [r4, #8]
 80454aa:	2b00      	cmp	r3, #0
 80454ac:	d132      	bne.n	8045514 <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80454ae:	6823      	ldr	r3, [r4, #0]
 80454b0:	9001      	str	r0, [sp, #4]
 80454b2:	68da      	ldr	r2, [r3, #12]
 80454b4:	9201      	str	r2, [sp, #4]
 80454b6:	689b      	ldr	r3, [r3, #8]
 80454b8:	9301      	str	r3, [sp, #4]
 80454ba:	9b01      	ldr	r3, [sp, #4]
 80454bc:	e02a      	b.n	8045514 <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80454be:	6822      	ldr	r2, [r4, #0]
 80454c0:	6893      	ldr	r3, [r2, #8]
 80454c2:	0799      	lsls	r1, r3, #30
 80454c4:	d50d      	bpl.n	80454e2 <HAL_SPI_TransmitReceive+0x108>
 80454c6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80454c8:	b29b      	uxth	r3, r3
 80454ca:	b153      	cbz	r3, 80454e2 <HAL_SPI_TransmitReceive+0x108>
 80454cc:	b14d      	cbz	r5, 80454e2 <HAL_SPI_TransmitReceive+0x108>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80454ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80454d0:	f833 1b02 	ldrh.w	r1, [r3], #2
 80454d4:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80454d6:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80454d8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80454da:	3b01      	subs	r3, #1
 80454dc:	b29b      	uxth	r3, r3
 80454de:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80454e0:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80454e2:	6893      	ldr	r3, [r2, #8]
 80454e4:	07db      	lsls	r3, r3, #31
 80454e6:	d50c      	bpl.n	8045502 <HAL_SPI_TransmitReceive+0x128>
 80454e8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80454ea:	b29b      	uxth	r3, r3
 80454ec:	b14b      	cbz	r3, 8045502 <HAL_SPI_TransmitReceive+0x128>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80454ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80454f0:	68d2      	ldr	r2, [r2, #12]
 80454f2:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80454f6:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80454f8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80454fa:	3b01      	subs	r3, #1
 80454fc:	b29b      	uxth	r3, r3
 80454fe:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8045500:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8045502:	f7fd fdb9 	bl	8043078 <HAL_GetTick>
 8045506:	eba0 0008 	sub.w	r0, r0, r8
 804550a:	4287      	cmp	r7, r0
 804550c:	d8be      	bhi.n	804548c <HAL_SPI_TransmitReceive+0xb2>
 804550e:	1c7e      	adds	r6, r7, #1
 8045510:	d0bc      	beq.n	804548c <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 8045512:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8045514:	2301      	movs	r3, #1
 8045516:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 804551a:	2300      	movs	r3, #0
 804551c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8045520:	b003      	add	sp, #12
 8045522:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8045526:	b109      	cbz	r1, 804552c <HAL_SPI_TransmitReceive+0x152>
 8045528:	2e01      	cmp	r6, #1
 804552a:	d108      	bne.n	804553e <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 804552c:	782a      	ldrb	r2, [r5, #0]
 804552e:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8045530:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8045532:	3301      	adds	r3, #1
 8045534:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8045536:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8045538:	3b01      	subs	r3, #1
 804553a:	b29b      	uxth	r3, r3
 804553c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 804553e:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8045540:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8045542:	b29b      	uxth	r3, r3
 8045544:	b91b      	cbnz	r3, 804554e <HAL_SPI_TransmitReceive+0x174>
 8045546:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8045548:	b29b      	uxth	r3, r3
 804554a:	2b00      	cmp	r3, #0
 804554c:	d0a4      	beq.n	8045498 <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 804554e:	6822      	ldr	r2, [r4, #0]
 8045550:	6893      	ldr	r3, [r2, #8]
 8045552:	0798      	lsls	r0, r3, #30
 8045554:	d50e      	bpl.n	8045574 <HAL_SPI_TransmitReceive+0x19a>
 8045556:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8045558:	b29b      	uxth	r3, r3
 804555a:	b15b      	cbz	r3, 8045574 <HAL_SPI_TransmitReceive+0x19a>
 804555c:	b155      	cbz	r5, 8045574 <HAL_SPI_TransmitReceive+0x19a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 804555e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8045560:	781b      	ldrb	r3, [r3, #0]
 8045562:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8045564:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8045566:	3301      	adds	r3, #1
 8045568:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 804556a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 804556c:	3b01      	subs	r3, #1
 804556e:	b29b      	uxth	r3, r3
 8045570:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8045572:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8045574:	6822      	ldr	r2, [r4, #0]
 8045576:	6893      	ldr	r3, [r2, #8]
 8045578:	07d9      	lsls	r1, r3, #31
 804557a:	d50d      	bpl.n	8045598 <HAL_SPI_TransmitReceive+0x1be>
 804557c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 804557e:	b29b      	uxth	r3, r3
 8045580:	b153      	cbz	r3, 8045598 <HAL_SPI_TransmitReceive+0x1be>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8045582:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8045584:	68d2      	ldr	r2, [r2, #12]
 8045586:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8045588:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 804558a:	3301      	adds	r3, #1
 804558c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 804558e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8045590:	3b01      	subs	r3, #1
 8045592:	b29b      	uxth	r3, r3
 8045594:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8045596:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8045598:	f7fd fd6e 	bl	8043078 <HAL_GetTick>
 804559c:	eba0 0008 	sub.w	r0, r0, r8
 80455a0:	4287      	cmp	r7, r0
 80455a2:	d8cd      	bhi.n	8045540 <HAL_SPI_TransmitReceive+0x166>
 80455a4:	1c7b      	adds	r3, r7, #1
 80455a6:	d0cb      	beq.n	8045540 <HAL_SPI_TransmitReceive+0x166>
 80455a8:	e7b3      	b.n	8045512 <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80455aa:	2320      	movs	r3, #32
 80455ac:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80455ae:	2001      	movs	r0, #1
 80455b0:	e7b0      	b.n	8045514 <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 80455b2:	2002      	movs	r0, #2
 80455b4:	e7ae      	b.n	8045514 <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 80455b6:	2002      	movs	r0, #2
 80455b8:	e7b2      	b.n	8045520 <HAL_SPI_TransmitReceive+0x146>

080455ba <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80455ba:	6803      	ldr	r3, [r0, #0]
 80455bc:	68da      	ldr	r2, [r3, #12]
 80455be:	f042 0201 	orr.w	r2, r2, #1
 80455c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80455c4:	689a      	ldr	r2, [r3, #8]
 80455c6:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80455ca:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 80455cc:	bf1e      	ittt	ne
 80455ce:	681a      	ldrne	r2, [r3, #0]
 80455d0:	f042 0201 	orrne.w	r2, r2, #1
 80455d4:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 80455d6:	2000      	movs	r0, #0
 80455d8:	4770      	bx	lr

080455da <HAL_TIM_Base_Stop_IT>:
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80455da:	6803      	ldr	r3, [r0, #0]
 80455dc:	68da      	ldr	r2, [r3, #12]
 80455de:	f022 0201 	bic.w	r2, r2, #1
 80455e2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80455e4:	6a19      	ldr	r1, [r3, #32]
 80455e6:	f241 1211 	movw	r2, #4369	; 0x1111
 80455ea:	4211      	tst	r1, r2
 80455ec:	d108      	bne.n	8045600 <HAL_TIM_Base_Stop_IT+0x26>
 80455ee:	6a19      	ldr	r1, [r3, #32]
 80455f0:	f240 4244 	movw	r2, #1092	; 0x444
 80455f4:	4211      	tst	r1, r2
 80455f6:	bf02      	ittt	eq
 80455f8:	681a      	ldreq	r2, [r3, #0]
 80455fa:	f022 0201 	biceq.w	r2, r2, #1
 80455fe:	601a      	streq	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8045600:	2000      	movs	r0, #0
 8045602:	4770      	bx	lr

08045604 <HAL_TIM_PeriodElapsedCallback>:
 8045604:	4770      	bx	lr

08045606 <HAL_TIM_OC_DelayElapsedCallback>:
 8045606:	4770      	bx	lr

08045608 <HAL_TIM_IC_CaptureCallback>:
 8045608:	4770      	bx	lr

0804560a <HAL_TIM_PWM_PulseFinishedCallback>:
 804560a:	4770      	bx	lr

0804560c <HAL_TIM_TriggerCallback>:
 804560c:	4770      	bx	lr

0804560e <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 804560e:	6803      	ldr	r3, [r0, #0]
 8045610:	691a      	ldr	r2, [r3, #16]
 8045612:	0791      	lsls	r1, r2, #30
{
 8045614:	b510      	push	{r4, lr}
 8045616:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8045618:	d50e      	bpl.n	8045638 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 804561a:	68da      	ldr	r2, [r3, #12]
 804561c:	0792      	lsls	r2, r2, #30
 804561e:	d50b      	bpl.n	8045638 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8045620:	f06f 0202 	mvn.w	r2, #2
 8045624:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8045626:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8045628:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 804562a:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 804562c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 804562e:	d077      	beq.n	8045720 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8045630:	f7ff ffea 	bl	8045608 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8045634:	2300      	movs	r3, #0
 8045636:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8045638:	6823      	ldr	r3, [r4, #0]
 804563a:	691a      	ldr	r2, [r3, #16]
 804563c:	0750      	lsls	r0, r2, #29
 804563e:	d510      	bpl.n	8045662 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8045640:	68da      	ldr	r2, [r3, #12]
 8045642:	0751      	lsls	r1, r2, #29
 8045644:	d50d      	bpl.n	8045662 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8045646:	f06f 0204 	mvn.w	r2, #4
 804564a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 804564c:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 804564e:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8045650:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8045654:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8045656:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8045658:	d068      	beq.n	804572c <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 804565a:	f7ff ffd5 	bl	8045608 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 804565e:	2300      	movs	r3, #0
 8045660:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8045662:	6823      	ldr	r3, [r4, #0]
 8045664:	691a      	ldr	r2, [r3, #16]
 8045666:	0712      	lsls	r2, r2, #28
 8045668:	d50f      	bpl.n	804568a <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 804566a:	68da      	ldr	r2, [r3, #12]
 804566c:	0710      	lsls	r0, r2, #28
 804566e:	d50c      	bpl.n	804568a <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8045670:	f06f 0208 	mvn.w	r2, #8
 8045674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8045676:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8045678:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 804567a:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 804567c:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 804567e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8045680:	d05a      	beq.n	8045738 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8045682:	f7ff ffc1 	bl	8045608 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8045686:	2300      	movs	r3, #0
 8045688:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 804568a:	6823      	ldr	r3, [r4, #0]
 804568c:	691a      	ldr	r2, [r3, #16]
 804568e:	06d2      	lsls	r2, r2, #27
 8045690:	d510      	bpl.n	80456b4 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8045692:	68da      	ldr	r2, [r3, #12]
 8045694:	06d0      	lsls	r0, r2, #27
 8045696:	d50d      	bpl.n	80456b4 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8045698:	f06f 0210 	mvn.w	r2, #16
 804569c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 804569e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80456a0:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80456a2:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80456a6:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80456a8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80456aa:	d04b      	beq.n	8045744 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80456ac:	f7ff ffac 	bl	8045608 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80456b0:	2300      	movs	r3, #0
 80456b2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80456b4:	6823      	ldr	r3, [r4, #0]
 80456b6:	691a      	ldr	r2, [r3, #16]
 80456b8:	07d1      	lsls	r1, r2, #31
 80456ba:	d508      	bpl.n	80456ce <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80456bc:	68da      	ldr	r2, [r3, #12]
 80456be:	07d2      	lsls	r2, r2, #31
 80456c0:	d505      	bpl.n	80456ce <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80456c2:	f06f 0201 	mvn.w	r2, #1
 80456c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80456c8:	4620      	mov	r0, r4
 80456ca:	f7ff ff9b 	bl	8045604 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80456ce:	6823      	ldr	r3, [r4, #0]
 80456d0:	691a      	ldr	r2, [r3, #16]
 80456d2:	0610      	lsls	r0, r2, #24
 80456d4:	d508      	bpl.n	80456e8 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80456d6:	68da      	ldr	r2, [r3, #12]
 80456d8:	0611      	lsls	r1, r2, #24
 80456da:	d505      	bpl.n	80456e8 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80456dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80456e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80456e2:	4620      	mov	r0, r4
 80456e4:	f000 f997 	bl	8045a16 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80456e8:	6823      	ldr	r3, [r4, #0]
 80456ea:	691a      	ldr	r2, [r3, #16]
 80456ec:	0652      	lsls	r2, r2, #25
 80456ee:	d508      	bpl.n	8045702 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80456f0:	68da      	ldr	r2, [r3, #12]
 80456f2:	0650      	lsls	r0, r2, #25
 80456f4:	d505      	bpl.n	8045702 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80456f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80456fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80456fc:	4620      	mov	r0, r4
 80456fe:	f7ff ff85 	bl	804560c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8045702:	6823      	ldr	r3, [r4, #0]
 8045704:	691a      	ldr	r2, [r3, #16]
 8045706:	0691      	lsls	r1, r2, #26
 8045708:	d522      	bpl.n	8045750 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 804570a:	68da      	ldr	r2, [r3, #12]
 804570c:	0692      	lsls	r2, r2, #26
 804570e:	d51f      	bpl.n	8045750 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8045710:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8045714:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8045716:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8045718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 804571c:	f000 b97a 	b.w	8045a14 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8045720:	f7ff ff71 	bl	8045606 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8045724:	4620      	mov	r0, r4
 8045726:	f7ff ff70 	bl	804560a <HAL_TIM_PWM_PulseFinishedCallback>
 804572a:	e783      	b.n	8045634 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 804572c:	f7ff ff6b 	bl	8045606 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8045730:	4620      	mov	r0, r4
 8045732:	f7ff ff6a 	bl	804560a <HAL_TIM_PWM_PulseFinishedCallback>
 8045736:	e792      	b.n	804565e <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8045738:	f7ff ff65 	bl	8045606 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 804573c:	4620      	mov	r0, r4
 804573e:	f7ff ff64 	bl	804560a <HAL_TIM_PWM_PulseFinishedCallback>
 8045742:	e7a0      	b.n	8045686 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8045744:	f7ff ff5f 	bl	8045606 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8045748:	4620      	mov	r0, r4
 804574a:	f7ff ff5e 	bl	804560a <HAL_TIM_PWM_PulseFinishedCallback>
 804574e:	e7af      	b.n	80456b0 <HAL_TIM_IRQHandler+0xa2>
}
 8045750:	bd10      	pop	{r4, pc}
	...

08045754 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8045754:	4a30      	ldr	r2, [pc, #192]	; (8045818 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8045756:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8045758:	4290      	cmp	r0, r2
 804575a:	d012      	beq.n	8045782 <TIM_Base_SetConfig+0x2e>
 804575c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8045760:	d00f      	beq.n	8045782 <TIM_Base_SetConfig+0x2e>
 8045762:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8045766:	4290      	cmp	r0, r2
 8045768:	d00b      	beq.n	8045782 <TIM_Base_SetConfig+0x2e>
 804576a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 804576e:	4290      	cmp	r0, r2
 8045770:	d007      	beq.n	8045782 <TIM_Base_SetConfig+0x2e>
 8045772:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8045776:	4290      	cmp	r0, r2
 8045778:	d003      	beq.n	8045782 <TIM_Base_SetConfig+0x2e>
 804577a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 804577e:	4290      	cmp	r0, r2
 8045780:	d119      	bne.n	80457b6 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8045782:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8045784:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8045788:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 804578a:	4a23      	ldr	r2, [pc, #140]	; (8045818 <TIM_Base_SetConfig+0xc4>)
 804578c:	4290      	cmp	r0, r2
 804578e:	d029      	beq.n	80457e4 <TIM_Base_SetConfig+0x90>
 8045790:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8045794:	d026      	beq.n	80457e4 <TIM_Base_SetConfig+0x90>
 8045796:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 804579a:	4290      	cmp	r0, r2
 804579c:	d022      	beq.n	80457e4 <TIM_Base_SetConfig+0x90>
 804579e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80457a2:	4290      	cmp	r0, r2
 80457a4:	d01e      	beq.n	80457e4 <TIM_Base_SetConfig+0x90>
 80457a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80457aa:	4290      	cmp	r0, r2
 80457ac:	d01a      	beq.n	80457e4 <TIM_Base_SetConfig+0x90>
 80457ae:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80457b2:	4290      	cmp	r0, r2
 80457b4:	d016      	beq.n	80457e4 <TIM_Base_SetConfig+0x90>
 80457b6:	4a19      	ldr	r2, [pc, #100]	; (804581c <TIM_Base_SetConfig+0xc8>)
 80457b8:	4290      	cmp	r0, r2
 80457ba:	d013      	beq.n	80457e4 <TIM_Base_SetConfig+0x90>
 80457bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80457c0:	4290      	cmp	r0, r2
 80457c2:	d00f      	beq.n	80457e4 <TIM_Base_SetConfig+0x90>
 80457c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80457c8:	4290      	cmp	r0, r2
 80457ca:	d00b      	beq.n	80457e4 <TIM_Base_SetConfig+0x90>
 80457cc:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80457d0:	4290      	cmp	r0, r2
 80457d2:	d007      	beq.n	80457e4 <TIM_Base_SetConfig+0x90>
 80457d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80457d8:	4290      	cmp	r0, r2
 80457da:	d003      	beq.n	80457e4 <TIM_Base_SetConfig+0x90>
 80457dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80457e0:	4290      	cmp	r0, r2
 80457e2:	d103      	bne.n	80457ec <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80457e4:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80457e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80457ea:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80457ec:	694a      	ldr	r2, [r1, #20]
 80457ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80457f2:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80457f4:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80457f6:	688b      	ldr	r3, [r1, #8]
 80457f8:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80457fa:	680b      	ldr	r3, [r1, #0]
 80457fc:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80457fe:	4b06      	ldr	r3, [pc, #24]	; (8045818 <TIM_Base_SetConfig+0xc4>)
 8045800:	4298      	cmp	r0, r3
 8045802:	d003      	beq.n	804580c <TIM_Base_SetConfig+0xb8>
 8045804:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8045808:	4298      	cmp	r0, r3
 804580a:	d101      	bne.n	8045810 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 804580c:	690b      	ldr	r3, [r1, #16]
 804580e:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8045810:	2301      	movs	r3, #1
 8045812:	6143      	str	r3, [r0, #20]
}
 8045814:	4770      	bx	lr
 8045816:	bf00      	nop
 8045818:	40010000 	.word	0x40010000
 804581c:	40014000 	.word	0x40014000

08045820 <HAL_TIM_Base_Init>:
{
 8045820:	b510      	push	{r4, lr}
  if (htim == NULL)
 8045822:	4604      	mov	r4, r0
 8045824:	b1a0      	cbz	r0, 8045850 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8045826:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 804582a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 804582e:	b91b      	cbnz	r3, 8045838 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8045830:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8045834:	f006 feea 	bl	804c60c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8045838:	2302      	movs	r3, #2
 804583a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 804583e:	6820      	ldr	r0, [r4, #0]
 8045840:	1d21      	adds	r1, r4, #4
 8045842:	f7ff ff87 	bl	8045754 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8045846:	2301      	movs	r3, #1
 8045848:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 804584c:	2000      	movs	r0, #0
}
 804584e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8045850:	2001      	movs	r0, #1
 8045852:	e7fc      	b.n	804584e <HAL_TIM_Base_Init+0x2e>

08045854 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8045854:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8045856:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8045858:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 804585a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 804585e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8045862:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8045864:	6083      	str	r3, [r0, #8]
}
 8045866:	bd10      	pop	{r4, pc}

08045868 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8045868:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 804586c:	2b01      	cmp	r3, #1
{
 804586e:	b570      	push	{r4, r5, r6, lr}
 8045870:	4604      	mov	r4, r0
 8045872:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8045876:	d019      	beq.n	80458ac <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 8045878:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 804587c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 804587e:	2301      	movs	r3, #1
 8045880:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8045884:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8045886:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 804588a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 804588e:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8045890:	680b      	ldr	r3, [r1, #0]
 8045892:	2b40      	cmp	r3, #64	; 0x40
 8045894:	d065      	beq.n	8045962 <HAL_TIM_ConfigClockSource+0xfa>
 8045896:	d815      	bhi.n	80458c4 <HAL_TIM_ConfigClockSource+0x5c>
 8045898:	2b10      	cmp	r3, #16
 804589a:	d00c      	beq.n	80458b6 <HAL_TIM_ConfigClockSource+0x4e>
 804589c:	d807      	bhi.n	80458ae <HAL_TIM_ConfigClockSource+0x46>
 804589e:	b153      	cbz	r3, 80458b6 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 80458a0:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80458a2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80458a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80458a8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80458ac:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80458ae:	2b20      	cmp	r3, #32
 80458b0:	d001      	beq.n	80458b6 <HAL_TIM_ConfigClockSource+0x4e>
 80458b2:	2b30      	cmp	r3, #48	; 0x30
 80458b4:	d1f4      	bne.n	80458a0 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 80458b6:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80458b8:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80458bc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80458c0:	4313      	orrs	r3, r2
 80458c2:	e01a      	b.n	80458fa <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 80458c4:	2b60      	cmp	r3, #96	; 0x60
 80458c6:	d034      	beq.n	8045932 <HAL_TIM_ConfigClockSource+0xca>
 80458c8:	d819      	bhi.n	80458fe <HAL_TIM_ConfigClockSource+0x96>
 80458ca:	2b50      	cmp	r3, #80	; 0x50
 80458cc:	d1e8      	bne.n	80458a0 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80458ce:	684a      	ldr	r2, [r1, #4]
 80458d0:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80458d2:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80458d4:	6a05      	ldr	r5, [r0, #32]
 80458d6:	f025 0501 	bic.w	r5, r5, #1
 80458da:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80458dc:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80458de:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80458e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80458e6:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80458ea:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80458ec:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80458ee:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80458f0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80458f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80458f6:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80458fa:	6083      	str	r3, [r0, #8]
 80458fc:	e7d0      	b.n	80458a0 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 80458fe:	2b70      	cmp	r3, #112	; 0x70
 8045900:	d00c      	beq.n	804591c <HAL_TIM_ConfigClockSource+0xb4>
 8045902:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8045906:	d1cb      	bne.n	80458a0 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8045908:	68cb      	ldr	r3, [r1, #12]
 804590a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 804590e:	f7ff ffa1 	bl	8045854 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8045912:	6822      	ldr	r2, [r4, #0]
 8045914:	6893      	ldr	r3, [r2, #8]
 8045916:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 804591a:	e008      	b.n	804592e <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 804591c:	68cb      	ldr	r3, [r1, #12]
 804591e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8045922:	f7ff ff97 	bl	8045854 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8045926:	6822      	ldr	r2, [r4, #0]
 8045928:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 804592a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 804592e:	6093      	str	r3, [r2, #8]
      break;
 8045930:	e7b6      	b.n	80458a0 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8045932:	684d      	ldr	r5, [r1, #4]
 8045934:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8045936:	6a01      	ldr	r1, [r0, #32]
 8045938:	f021 0110 	bic.w	r1, r1, #16
 804593c:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 804593e:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8045940:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8045942:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8045946:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 804594a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 804594e:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8045952:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8045954:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8045956:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8045958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 804595c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8045960:	e7cb      	b.n	80458fa <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8045962:	684a      	ldr	r2, [r1, #4]
 8045964:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8045966:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8045968:	6a05      	ldr	r5, [r0, #32]
 804596a:	f025 0501 	bic.w	r5, r5, #1
 804596e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8045970:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8045972:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8045976:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 804597a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 804597e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8045980:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8045982:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8045984:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8045986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 804598a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 804598e:	e7b4      	b.n	80458fa <HAL_TIM_ConfigClockSource+0x92>

08045990 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8045990:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8045994:	2b01      	cmp	r3, #1
{
 8045996:	b530      	push	{r4, r5, lr}
 8045998:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 804599c:	d035      	beq.n	8045a0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 804599e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80459a2:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80459a4:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 80459a6:	685c      	ldr	r4, [r3, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 80459a8:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  __HAL_LOCK(htim);
 80459ac:	2201      	movs	r2, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80459ae:	432c      	orrs	r4, r5
  __HAL_LOCK(htim);
 80459b0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80459b4:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80459b6:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80459b8:	4c15      	ldr	r4, [pc, #84]	; (8045a10 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 80459ba:	42a3      	cmp	r3, r4
 80459bc:	d01a      	beq.n	80459f4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80459be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80459c2:	d017      	beq.n	80459f4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80459c4:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 80459c8:	42a3      	cmp	r3, r4
 80459ca:	d013      	beq.n	80459f4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80459cc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80459d0:	42a3      	cmp	r3, r4
 80459d2:	d00f      	beq.n	80459f4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80459d4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80459d8:	42a3      	cmp	r3, r4
 80459da:	d00b      	beq.n	80459f4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80459dc:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 80459e0:	42a3      	cmp	r3, r4
 80459e2:	d007      	beq.n	80459f4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80459e4:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 80459e8:	42a3      	cmp	r3, r4
 80459ea:	d003      	beq.n	80459f4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80459ec:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 80459f0:	42a3      	cmp	r3, r4
 80459f2:	d104      	bne.n	80459fe <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80459f4:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80459f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80459fa:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80459fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80459fe:	2301      	movs	r3, #1
 8045a00:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8045a04:	2300      	movs	r3, #0
 8045a06:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8045a0a:	4618      	mov	r0, r3

  return HAL_OK;
}
 8045a0c:	bd30      	pop	{r4, r5, pc}
 8045a0e:	bf00      	nop
 8045a10:	40010000 	.word	0x40010000

08045a14 <HAL_TIMEx_CommutCallback>:
 8045a14:	4770      	bx	lr

08045a16 <HAL_TIMEx_BreakCallback>:
 8045a16:	4770      	bx	lr

08045a18 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8045a18:	6803      	ldr	r3, [r0, #0]
 8045a1a:	68da      	ldr	r2, [r3, #12]
 8045a1c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8045a20:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8045a22:	695a      	ldr	r2, [r3, #20]
 8045a24:	f022 0201 	bic.w	r2, r2, #1
 8045a28:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8045a2a:	2320      	movs	r3, #32
 8045a2c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8045a30:	4770      	bx	lr
	...

08045a34 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8045a34:	6803      	ldr	r3, [r0, #0]
 8045a36:	68c1      	ldr	r1, [r0, #12]
 8045a38:	691a      	ldr	r2, [r3, #16]
{
 8045a3a:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8045a3c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
{
 8045a40:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8045a42:	430a      	orrs	r2, r1
 8045a44:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8045a46:	6925      	ldr	r5, [r4, #16]
 8045a48:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 8045a4a:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8045a4c:	69c0      	ldr	r0, [r0, #28]
 8045a4e:	432a      	orrs	r2, r5
 8045a50:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8045a52:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8045a56:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8045a58:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8045a5c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8045a5e:	430a      	orrs	r2, r1
 8045a60:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8045a62:	695a      	ldr	r2, [r3, #20]
 8045a64:	69a1      	ldr	r1, [r4, #24]
 8045a66:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8045a6a:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8045a6c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8045a70:	615a      	str	r2, [r3, #20]
 8045a72:	4a26      	ldr	r2, [pc, #152]	; (8045b0c <UART_SetConfig+0xd8>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8045a74:	d129      	bne.n	8045aca <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8045a76:	4293      	cmp	r3, r2
 8045a78:	d003      	beq.n	8045a82 <UART_SetConfig+0x4e>
 8045a7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8045a7e:	4293      	cmp	r3, r2
 8045a80:	d120      	bne.n	8045ac4 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8045a82:	f7fe fb0f 	bl	80440a4 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8045a86:	6862      	ldr	r2, [r4, #4]
 8045a88:	2600      	movs	r6, #0
 8045a8a:	1892      	adds	r2, r2, r2
 8045a8c:	f04f 0119 	mov.w	r1, #25
 8045a90:	eb46 0306 	adc.w	r3, r6, r6
 8045a94:	fba0 0101 	umull	r0, r1, r0, r1
 8045a98:	f7fb f9c0 	bl	8040e1c <__aeabi_uldivmod>
 8045a9c:	2164      	movs	r1, #100	; 0x64
 8045a9e:	fbb0 f5f1 	udiv	r5, r0, r1
 8045aa2:	fb01 0315 	mls	r3, r1, r5, r0
 8045aa6:	00db      	lsls	r3, r3, #3
 8045aa8:	3332      	adds	r3, #50	; 0x32
 8045aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8045aae:	f003 0207 	and.w	r2, r3, #7
 8045ab2:	005b      	lsls	r3, r3, #1
 8045ab4:	6821      	ldr	r1, [r4, #0]
 8045ab6:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8045aba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8045abe:	4413      	add	r3, r2
 8045ac0:	608b      	str	r3, [r1, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8045ac2:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8045ac4:	f7fe fade 	bl	8044084 <HAL_RCC_GetPCLK1Freq>
 8045ac8:	e7dd      	b.n	8045a86 <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8045aca:	4293      	cmp	r3, r2
 8045acc:	d002      	beq.n	8045ad4 <UART_SetConfig+0xa0>
 8045ace:	4a10      	ldr	r2, [pc, #64]	; (8045b10 <UART_SetConfig+0xdc>)
 8045ad0:	4293      	cmp	r3, r2
 8045ad2:	d117      	bne.n	8045b04 <UART_SetConfig+0xd0>
      pclk = HAL_RCC_GetPCLK2Freq();
 8045ad4:	f7fe fae6 	bl	80440a4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8045ad8:	6863      	ldr	r3, [r4, #4]
 8045ada:	2119      	movs	r1, #25
 8045adc:	009a      	lsls	r2, r3, #2
 8045ade:	fba0 0101 	umull	r0, r1, r0, r1
 8045ae2:	0f9b      	lsrs	r3, r3, #30
 8045ae4:	f7fb f99a 	bl	8040e1c <__aeabi_uldivmod>
 8045ae8:	2264      	movs	r2, #100	; 0x64
 8045aea:	fbb0 f1f2 	udiv	r1, r0, r2
 8045aee:	fb02 0311 	mls	r3, r2, r1, r0
 8045af2:	6824      	ldr	r4, [r4, #0]
 8045af4:	011b      	lsls	r3, r3, #4
 8045af6:	3332      	adds	r3, #50	; 0x32
 8045af8:	fbb3 f3f2 	udiv	r3, r3, r2
 8045afc:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8045b00:	60a3      	str	r3, [r4, #8]
}
 8045b02:	e7de      	b.n	8045ac2 <UART_SetConfig+0x8e>
      pclk = HAL_RCC_GetPCLK1Freq();
 8045b04:	f7fe fabe 	bl	8044084 <HAL_RCC_GetPCLK1Freq>
 8045b08:	e7e6      	b.n	8045ad8 <UART_SetConfig+0xa4>
 8045b0a:	bf00      	nop
 8045b0c:	40011000 	.word	0x40011000
 8045b10:	40011400 	.word	0x40011400

08045b14 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8045b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8045b16:	4604      	mov	r4, r0
 8045b18:	460e      	mov	r6, r1
 8045b1a:	4617      	mov	r7, r2
 8045b1c:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8045b1e:	6821      	ldr	r1, [r4, #0]
 8045b20:	680b      	ldr	r3, [r1, #0]
 8045b22:	ea36 0303 	bics.w	r3, r6, r3
 8045b26:	d101      	bne.n	8045b2c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8045b28:	2000      	movs	r0, #0
 8045b2a:	e014      	b.n	8045b56 <UART_WaitOnFlagUntilTimeout.constprop.3+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8045b2c:	1c6b      	adds	r3, r5, #1
 8045b2e:	d0f7      	beq.n	8045b20 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8045b30:	b995      	cbnz	r5, 8045b58 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8045b32:	6823      	ldr	r3, [r4, #0]
 8045b34:	68da      	ldr	r2, [r3, #12]
 8045b36:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8045b3a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8045b3c:	695a      	ldr	r2, [r3, #20]
 8045b3e:	f022 0201 	bic.w	r2, r2, #1
 8045b42:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8045b44:	2320      	movs	r3, #32
 8045b46:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8045b4a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8045b4e:	2300      	movs	r3, #0
 8045b50:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8045b54:	2003      	movs	r0, #3
}
 8045b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8045b58:	f7fd fa8e 	bl	8043078 <HAL_GetTick>
 8045b5c:	1bc0      	subs	r0, r0, r7
 8045b5e:	4285      	cmp	r5, r0
 8045b60:	d2dd      	bcs.n	8045b1e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8045b62:	e7e6      	b.n	8045b32 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08045b64 <HAL_UART_Init>:
{
 8045b64:	b510      	push	{r4, lr}
  if (huart == NULL)
 8045b66:	4604      	mov	r4, r0
 8045b68:	b340      	cbz	r0, 8045bbc <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8045b6a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8045b6e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8045b72:	b91b      	cbnz	r3, 8045b7c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8045b74:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8045b78:	f007 fb32 	bl	804d1e0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8045b7c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8045b7e:	2324      	movs	r3, #36	; 0x24
 8045b80:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8045b84:	68d3      	ldr	r3, [r2, #12]
 8045b86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8045b8a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8045b8c:	4620      	mov	r0, r4
 8045b8e:	f7ff ff51 	bl	8045a34 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8045b92:	6823      	ldr	r3, [r4, #0]
 8045b94:	691a      	ldr	r2, [r3, #16]
 8045b96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8045b9a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8045b9c:	695a      	ldr	r2, [r3, #20]
 8045b9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8045ba2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8045ba4:	68da      	ldr	r2, [r3, #12]
 8045ba6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8045baa:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8045bac:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8045bae:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8045bb0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8045bb2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8045bb6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8045bba:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8045bbc:	2001      	movs	r0, #1
 8045bbe:	e7fc      	b.n	8045bba <HAL_UART_Init+0x56>

08045bc0 <HAL_UART_DeInit>:
{
 8045bc0:	b510      	push	{r4, lr}
  if (huart == NULL)
 8045bc2:	4604      	mov	r4, r0
 8045bc4:	b190      	cbz	r0, 8045bec <HAL_UART_DeInit+0x2c>
  __HAL_UART_DISABLE(huart);
 8045bc6:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8045bc8:	2324      	movs	r3, #36	; 0x24
 8045bca:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8045bce:	68d3      	ldr	r3, [r2, #12]
 8045bd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8045bd4:	60d3      	str	r3, [r2, #12]
  HAL_UART_MspDeInit(huart);
 8045bd6:	f007 fbf5 	bl	804d3c4 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8045bda:	2000      	movs	r0, #0
 8045bdc:	63e0      	str	r0, [r4, #60]	; 0x3c
  __HAL_UNLOCK(huart);
 8045bde:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  huart->gState = HAL_UART_STATE_RESET;
 8045be2:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 8045be6:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
}
 8045bea:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8045bec:	2001      	movs	r0, #1
 8045bee:	e7fc      	b.n	8045bea <HAL_UART_DeInit+0x2a>

08045bf0 <HAL_UART_Transmit>:
{
 8045bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8045bf4:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8045bf6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8045bfa:	2b20      	cmp	r3, #32
{
 8045bfc:	4604      	mov	r4, r0
 8045bfe:	460d      	mov	r5, r1
 8045c00:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8045c02:	d14f      	bne.n	8045ca4 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 8045c04:	2900      	cmp	r1, #0
 8045c06:	d04b      	beq.n	8045ca0 <HAL_UART_Transmit+0xb0>
 8045c08:	2a00      	cmp	r2, #0
 8045c0a:	d049      	beq.n	8045ca0 <HAL_UART_Transmit+0xb0>
    __HAL_LOCK(huart);
 8045c0c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8045c10:	2b01      	cmp	r3, #1
 8045c12:	d047      	beq.n	8045ca4 <HAL_UART_Transmit+0xb4>
 8045c14:	2301      	movs	r3, #1
 8045c16:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8045c1a:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8045c1e:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8045c20:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8045c24:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8045c28:	f7fd fa26 	bl	8043078 <HAL_GetTick>
    huart->TxXferSize = Size;
 8045c2c:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8045c30:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8045c32:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8045c36:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 8045c3a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8045c3c:	b29b      	uxth	r3, r3
 8045c3e:	b953      	cbnz	r3, 8045c56 <HAL_UART_Transmit+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8045c40:	463b      	mov	r3, r7
 8045c42:	4632      	mov	r2, r6
 8045c44:	2140      	movs	r1, #64	; 0x40
 8045c46:	4620      	mov	r0, r4
 8045c48:	f7ff ff64 	bl	8045b14 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8045c4c:	b998      	cbnz	r0, 8045c76 <HAL_UART_Transmit+0x86>
    huart->gState = HAL_UART_STATE_READY;
 8045c4e:	2320      	movs	r3, #32
 8045c50:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8045c54:	e010      	b.n	8045c78 <HAL_UART_Transmit+0x88>
      huart->TxXferCount--;
 8045c56:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8045c58:	3b01      	subs	r3, #1
 8045c5a:	b29b      	uxth	r3, r3
 8045c5c:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8045c5e:	68a3      	ldr	r3, [r4, #8]
 8045c60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8045c64:	4632      	mov	r2, r6
 8045c66:	463b      	mov	r3, r7
 8045c68:	f04f 0180 	mov.w	r1, #128	; 0x80
 8045c6c:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8045c6e:	d10e      	bne.n	8045c8e <HAL_UART_Transmit+0x9e>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8045c70:	f7ff ff50 	bl	8045b14 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8045c74:	b110      	cbz	r0, 8045c7c <HAL_UART_Transmit+0x8c>
          return HAL_TIMEOUT;
 8045c76:	2003      	movs	r0, #3
}
 8045c78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8045c7c:	882b      	ldrh	r3, [r5, #0]
 8045c7e:	6822      	ldr	r2, [r4, #0]
 8045c80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8045c84:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8045c86:	6923      	ldr	r3, [r4, #16]
 8045c88:	b943      	cbnz	r3, 8045c9c <HAL_UART_Transmit+0xac>
          pData += 2U;
 8045c8a:	3502      	adds	r5, #2
 8045c8c:	e7d5      	b.n	8045c3a <HAL_UART_Transmit+0x4a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8045c8e:	f7ff ff41 	bl	8045b14 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8045c92:	2800      	cmp	r0, #0
 8045c94:	d1ef      	bne.n	8045c76 <HAL_UART_Transmit+0x86>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8045c96:	6823      	ldr	r3, [r4, #0]
 8045c98:	782a      	ldrb	r2, [r5, #0]
 8045c9a:	605a      	str	r2, [r3, #4]
 8045c9c:	3501      	adds	r5, #1
 8045c9e:	e7cc      	b.n	8045c3a <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 8045ca0:	2001      	movs	r0, #1
 8045ca2:	e7e9      	b.n	8045c78 <HAL_UART_Transmit+0x88>
    return HAL_BUSY;
 8045ca4:	2002      	movs	r0, #2
 8045ca6:	e7e7      	b.n	8045c78 <HAL_UART_Transmit+0x88>

08045ca8 <HAL_UART_Receive>:
{
 8045ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8045cac:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8045cae:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8045cb2:	2b20      	cmp	r3, #32
{
 8045cb4:	4604      	mov	r4, r0
 8045cb6:	460d      	mov	r5, r1
 8045cb8:	4690      	mov	r8, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8045cba:	d155      	bne.n	8045d68 <HAL_UART_Receive+0xc0>
    if ((pData == NULL) || (Size == 0U))
 8045cbc:	2900      	cmp	r1, #0
 8045cbe:	d051      	beq.n	8045d64 <HAL_UART_Receive+0xbc>
 8045cc0:	2a00      	cmp	r2, #0
 8045cc2:	d04f      	beq.n	8045d64 <HAL_UART_Receive+0xbc>
    __HAL_LOCK(huart);
 8045cc4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8045cc8:	2b01      	cmp	r3, #1
 8045cca:	d04d      	beq.n	8045d68 <HAL_UART_Receive+0xc0>
 8045ccc:	2301      	movs	r3, #1
 8045cce:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8045cd2:	f04f 0900 	mov.w	r9, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8045cd6:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8045cd8:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8045cdc:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8045ce0:	f7fd f9ca 	bl	8043078 <HAL_GetTick>
    huart->RxXferSize = Size;
 8045ce4:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    tickstart = HAL_GetTick();
 8045ce8:	4606      	mov	r6, r0
    huart->RxXferCount = Size;
 8045cea:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    __HAL_UNLOCK(huart);
 8045cee:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->RxXferCount > 0U)
 8045cf2:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8045cf4:	b280      	uxth	r0, r0
 8045cf6:	b918      	cbnz	r0, 8045d00 <HAL_UART_Receive+0x58>
    huart->RxState = HAL_UART_STATE_READY;
 8045cf8:	2320      	movs	r3, #32
 8045cfa:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    return HAL_OK;
 8045cfe:	e010      	b.n	8045d22 <HAL_UART_Receive+0x7a>
      huart->RxXferCount--;
 8045d00:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8045d02:	3b01      	subs	r3, #1
 8045d04:	b29b      	uxth	r3, r3
 8045d06:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8045d08:	68a3      	ldr	r3, [r4, #8]
 8045d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8045d0e:	4632      	mov	r2, r6
 8045d10:	463b      	mov	r3, r7
 8045d12:	f04f 0120 	mov.w	r1, #32
 8045d16:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8045d18:	d116      	bne.n	8045d48 <HAL_UART_Receive+0xa0>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8045d1a:	f7ff fefb 	bl	8045b14 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8045d1e:	b110      	cbz	r0, 8045d26 <HAL_UART_Receive+0x7e>
          return HAL_TIMEOUT;
 8045d20:	2003      	movs	r0, #3
}
 8045d22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (huart->Init.Parity == UART_PARITY_NONE)
 8045d26:	6922      	ldr	r2, [r4, #16]
 8045d28:	6823      	ldr	r3, [r4, #0]
 8045d2a:	b93a      	cbnz	r2, 8045d3c <HAL_UART_Receive+0x94>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8045d2c:	685a      	ldr	r2, [r3, #4]
 8045d2e:	462b      	mov	r3, r5
 8045d30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8045d34:	f823 2b02 	strh.w	r2, [r3], #2
{
 8045d38:	461d      	mov	r5, r3
 8045d3a:	e7da      	b.n	8045cf2 <HAL_UART_Receive+0x4a>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8045d3c:	685a      	ldr	r2, [r3, #4]
 8045d3e:	462b      	mov	r3, r5
 8045d40:	b2d2      	uxtb	r2, r2
 8045d42:	f823 2b01 	strh.w	r2, [r3], #1
 8045d46:	e7f7      	b.n	8045d38 <HAL_UART_Receive+0x90>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8045d48:	f7ff fee4 	bl	8045b14 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8045d4c:	2800      	cmp	r0, #0
 8045d4e:	d1e7      	bne.n	8045d20 <HAL_UART_Receive+0x78>
 8045d50:	6822      	ldr	r2, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8045d52:	6921      	ldr	r1, [r4, #16]
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8045d54:	6852      	ldr	r2, [r2, #4]
 8045d56:	1c6b      	adds	r3, r5, #1
        if (huart->Init.Parity == UART_PARITY_NONE)
 8045d58:	b909      	cbnz	r1, 8045d5e <HAL_UART_Receive+0xb6>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8045d5a:	702a      	strb	r2, [r5, #0]
 8045d5c:	e7ec      	b.n	8045d38 <HAL_UART_Receive+0x90>
 8045d5e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8045d62:	e7fa      	b.n	8045d5a <HAL_UART_Receive+0xb2>
      return  HAL_ERROR;
 8045d64:	2001      	movs	r0, #1
 8045d66:	e7dc      	b.n	8045d22 <HAL_UART_Receive+0x7a>
    return HAL_BUSY;
 8045d68:	2002      	movs	r0, #2
 8045d6a:	e7da      	b.n	8045d22 <HAL_UART_Receive+0x7a>

08045d6c <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8045d6c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8045d70:	2b20      	cmp	r3, #32
 8045d72:	d120      	bne.n	8045db6 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 8045d74:	b1e9      	cbz	r1, 8045db2 <HAL_UART_Receive_IT+0x46>
 8045d76:	b1e2      	cbz	r2, 8045db2 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 8045d78:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8045d7c:	2b01      	cmp	r3, #1
 8045d7e:	d01a      	beq.n	8045db6 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 8045d80:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8045d82:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8045d84:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8045d86:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8045d88:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8045d8a:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8045d8e:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8045d90:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8045d92:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 8045d94:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8045d98:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8045d9c:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8045d9e:	6951      	ldr	r1, [r2, #20]
 8045da0:	f041 0101 	orr.w	r1, r1, #1
 8045da4:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8045da6:	68d1      	ldr	r1, [r2, #12]
 8045da8:	f041 0120 	orr.w	r1, r1, #32
 8045dac:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8045dae:	4618      	mov	r0, r3
 8045db0:	4770      	bx	lr
      return HAL_ERROR;
 8045db2:	2001      	movs	r0, #1
 8045db4:	4770      	bx	lr
    return HAL_BUSY;
 8045db6:	2002      	movs	r0, #2
}
 8045db8:	4770      	bx	lr
	...

08045dbc <HAL_UART_Transmit_DMA>:
{
 8045dbc:	b538      	push	{r3, r4, r5, lr}
 8045dbe:	4604      	mov	r4, r0
 8045dc0:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8045dc2:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8045dc6:	2a20      	cmp	r2, #32
 8045dc8:	d12a      	bne.n	8045e20 <HAL_UART_Transmit_DMA+0x64>
    if ((pData == NULL) || (Size == 0U))
 8045dca:	b339      	cbz	r1, 8045e1c <HAL_UART_Transmit_DMA+0x60>
 8045dcc:	b333      	cbz	r3, 8045e1c <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 8045dce:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8045dd2:	2a01      	cmp	r2, #1
 8045dd4:	d024      	beq.n	8045e20 <HAL_UART_Transmit_DMA+0x64>
 8045dd6:	2201      	movs	r2, #1
 8045dd8:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8045ddc:	2500      	movs	r5, #0
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8045dde:	6b20      	ldr	r0, [r4, #48]	; 0x30
    huart->TxXferCount = Size;
 8045de0:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8045de2:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8045de4:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8045de6:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8045dea:	4a0e      	ldr	r2, [pc, #56]	; (8045e24 <HAL_UART_Transmit_DMA+0x68>)
    huart->TxXferSize = Size;
 8045dec:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->pTxBuffPtr = pData;
 8045dee:	6221      	str	r1, [r4, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8045df0:	63c2      	str	r2, [r0, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8045df2:	4a0d      	ldr	r2, [pc, #52]	; (8045e28 <HAL_UART_Transmit_DMA+0x6c>)
 8045df4:	6402      	str	r2, [r0, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8045df6:	4a0d      	ldr	r2, [pc, #52]	; (8045e2c <HAL_UART_Transmit_DMA+0x70>)
    huart->hdmatx->XferAbortCallback = NULL;
 8045df8:	e9c0 2513 	strd	r2, r5, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8045dfc:	6822      	ldr	r2, [r4, #0]
 8045dfe:	3204      	adds	r2, #4
 8045e00:	f7fd fa88 	bl	8043314 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8045e04:	6823      	ldr	r3, [r4, #0]
 8045e06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8045e0a:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8045e0c:	695a      	ldr	r2, [r3, #20]
    __HAL_UNLOCK(huart);
 8045e0e:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8045e12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8045e16:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 8045e18:	4628      	mov	r0, r5
}
 8045e1a:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8045e1c:	2001      	movs	r0, #1
 8045e1e:	e7fc      	b.n	8045e1a <HAL_UART_Transmit_DMA+0x5e>
    return HAL_BUSY;
 8045e20:	2002      	movs	r0, #2
 8045e22:	e7fa      	b.n	8045e1a <HAL_UART_Transmit_DMA+0x5e>
 8045e24:	08045e31 	.word	0x08045e31
 8045e28:	08045e5f 	.word	0x08045e5f
 8045e2c:	08045ee3 	.word	0x08045ee3

08045e30 <UART_DMATransmitCplt>:
{
 8045e30:	b508      	push	{r3, lr}
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8045e32:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8045e34:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8045e36:	681b      	ldr	r3, [r3, #0]
 8045e38:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8045e3c:	d10a      	bne.n	8045e54 <UART_DMATransmitCplt+0x24>
    huart->TxXferCount = 0x00U;
 8045e3e:	84d3      	strh	r3, [r2, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8045e40:	6813      	ldr	r3, [r2, #0]
 8045e42:	695a      	ldr	r2, [r3, #20]
 8045e44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8045e48:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8045e4a:	68da      	ldr	r2, [r3, #12]
 8045e4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8045e50:	60da      	str	r2, [r3, #12]
}
 8045e52:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8045e54:	4610      	mov	r0, r2
 8045e56:	f007 f97b 	bl	804d150 <HAL_UART_TxCpltCallback>
}
 8045e5a:	e7fa      	b.n	8045e52 <UART_DMATransmitCplt+0x22>

08045e5c <HAL_UART_TxHalfCpltCallback>:
 8045e5c:	4770      	bx	lr

08045e5e <UART_DMATxHalfCplt>:
{
 8045e5e:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8045e60:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8045e62:	f7ff fffb 	bl	8045e5c <HAL_UART_TxHalfCpltCallback>
}
 8045e66:	bd08      	pop	{r3, pc}

08045e68 <HAL_UART_RxCpltCallback>:
 8045e68:	4770      	bx	lr

08045e6a <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8045e6a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8045e6e:	2b22      	cmp	r3, #34	; 0x22
{
 8045e70:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8045e72:	d133      	bne.n	8045edc <UART_Receive_IT+0x72>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8045e74:	6881      	ldr	r1, [r0, #8]
 8045e76:	6904      	ldr	r4, [r0, #16]
 8045e78:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8045e7a:	6802      	ldr	r2, [r0, #0]
 8045e7c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8045e80:	d123      	bne.n	8045eca <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8045e82:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8045e84:	b9ec      	cbnz	r4, 8045ec2 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8045e86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8045e8a:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8045e8e:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8045e90:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8045e92:	3c01      	subs	r4, #1
 8045e94:	b2a4      	uxth	r4, r4
 8045e96:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8045e98:	b98c      	cbnz	r4, 8045ebe <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8045e9a:	6803      	ldr	r3, [r0, #0]
 8045e9c:	68da      	ldr	r2, [r3, #12]
 8045e9e:	f022 0220 	bic.w	r2, r2, #32
 8045ea2:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8045ea4:	68da      	ldr	r2, [r3, #12]
 8045ea6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8045eaa:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8045eac:	695a      	ldr	r2, [r3, #20]
 8045eae:	f022 0201 	bic.w	r2, r2, #1
 8045eb2:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8045eb4:	2320      	movs	r3, #32
 8045eb6:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8045eba:	f7ff ffd5 	bl	8045e68 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8045ebe:	2000      	movs	r0, #0
 8045ec0:	e00d      	b.n	8045ede <UART_Receive_IT+0x74>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8045ec2:	b2d2      	uxtb	r2, r2
 8045ec4:	f823 2b01 	strh.w	r2, [r3], #1
 8045ec8:	e7e1      	b.n	8045e8e <UART_Receive_IT+0x24>
 8045eca:	1c59      	adds	r1, r3, #1
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8045ecc:	6852      	ldr	r2, [r2, #4]
 8045ece:	6281      	str	r1, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8045ed0:	b90c      	cbnz	r4, 8045ed6 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8045ed2:	701a      	strb	r2, [r3, #0]
 8045ed4:	e7dc      	b.n	8045e90 <UART_Receive_IT+0x26>
 8045ed6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8045eda:	e7fa      	b.n	8045ed2 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8045edc:	2002      	movs	r0, #2
}
 8045ede:	bd10      	pop	{r4, pc}

08045ee0 <HAL_UART_ErrorCallback>:
 8045ee0:	4770      	bx	lr

08045ee2 <UART_DMAError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8045ee2:	6b81      	ldr	r1, [r0, #56]	; 0x38
{
 8045ee4:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8045ee6:	680b      	ldr	r3, [r1, #0]
 8045ee8:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8045eea:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8045eee:	2821      	cmp	r0, #33	; 0x21
 8045ef0:	d10a      	bne.n	8045f08 <UART_DMAError+0x26>
 8045ef2:	0612      	lsls	r2, r2, #24
 8045ef4:	d508      	bpl.n	8045f08 <UART_DMAError+0x26>
    huart->TxXferCount = 0x00U;
 8045ef6:	2200      	movs	r2, #0
 8045ef8:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8045efa:	68da      	ldr	r2, [r3, #12]
 8045efc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8045f00:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8045f02:	2220      	movs	r2, #32
 8045f04:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8045f08:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8045f0a:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8045f0e:	2a22      	cmp	r2, #34	; 0x22
 8045f10:	d106      	bne.n	8045f20 <UART_DMAError+0x3e>
 8045f12:	065b      	lsls	r3, r3, #25
 8045f14:	d504      	bpl.n	8045f20 <UART_DMAError+0x3e>
    huart->RxXferCount = 0x00U;
 8045f16:	2300      	movs	r3, #0
 8045f18:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8045f1a:	4608      	mov	r0, r1
 8045f1c:	f7ff fd7c 	bl	8045a18 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8045f20:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8045f22:	f043 0310 	orr.w	r3, r3, #16
 8045f26:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8045f28:	4608      	mov	r0, r1
 8045f2a:	f7ff ffd9 	bl	8045ee0 <HAL_UART_ErrorCallback>
}
 8045f2e:	bd08      	pop	{r3, pc}

08045f30 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8045f30:	6803      	ldr	r3, [r0, #0]
 8045f32:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8045f34:	68d9      	ldr	r1, [r3, #12]
{
 8045f36:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8045f38:	0716      	lsls	r6, r2, #28
{
 8045f3a:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8045f3c:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8045f3e:	d107      	bne.n	8045f50 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8045f40:	0696      	lsls	r6, r2, #26
 8045f42:	d55a      	bpl.n	8045ffa <HAL_UART_IRQHandler+0xca>
 8045f44:	068d      	lsls	r5, r1, #26
 8045f46:	d558      	bpl.n	8045ffa <HAL_UART_IRQHandler+0xca>
}
 8045f48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8045f4c:	f7ff bf8d 	b.w	8045e6a <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8045f50:	f015 0501 	ands.w	r5, r5, #1
 8045f54:	d102      	bne.n	8045f5c <HAL_UART_IRQHandler+0x2c>
 8045f56:	f411 7f90 	tst.w	r1, #288	; 0x120
 8045f5a:	d04e      	beq.n	8045ffa <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8045f5c:	07d0      	lsls	r0, r2, #31
 8045f5e:	d505      	bpl.n	8045f6c <HAL_UART_IRQHandler+0x3c>
 8045f60:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8045f62:	bf42      	ittt	mi
 8045f64:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8045f66:	f043 0301 	orrmi.w	r3, r3, #1
 8045f6a:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8045f6c:	0756      	lsls	r6, r2, #29
 8045f6e:	d504      	bpl.n	8045f7a <HAL_UART_IRQHandler+0x4a>
 8045f70:	b11d      	cbz	r5, 8045f7a <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8045f72:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8045f74:	f043 0302 	orr.w	r3, r3, #2
 8045f78:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8045f7a:	0790      	lsls	r0, r2, #30
 8045f7c:	d504      	bpl.n	8045f88 <HAL_UART_IRQHandler+0x58>
 8045f7e:	b11d      	cbz	r5, 8045f88 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8045f80:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8045f82:	f043 0304 	orr.w	r3, r3, #4
 8045f86:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8045f88:	0713      	lsls	r3, r2, #28
 8045f8a:	d506      	bpl.n	8045f9a <HAL_UART_IRQHandler+0x6a>
 8045f8c:	068e      	lsls	r6, r1, #26
 8045f8e:	d400      	bmi.n	8045f92 <HAL_UART_IRQHandler+0x62>
 8045f90:	b11d      	cbz	r5, 8045f9a <HAL_UART_IRQHandler+0x6a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8045f92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8045f94:	f043 0308 	orr.w	r3, r3, #8
 8045f98:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8045f9a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8045f9c:	b343      	cbz	r3, 8045ff0 <HAL_UART_IRQHandler+0xc0>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8045f9e:	0695      	lsls	r5, r2, #26
 8045fa0:	d504      	bpl.n	8045fac <HAL_UART_IRQHandler+0x7c>
 8045fa2:	0688      	lsls	r0, r1, #26
 8045fa4:	d502      	bpl.n	8045fac <HAL_UART_IRQHandler+0x7c>
        UART_Receive_IT(huart);
 8045fa6:	4620      	mov	r0, r4
 8045fa8:	f7ff ff5f 	bl	8045e6a <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8045fac:	6823      	ldr	r3, [r4, #0]
 8045fae:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8045fb0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8045fb2:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 8045fb4:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8045fb6:	d402      	bmi.n	8045fbe <HAL_UART_IRQHandler+0x8e>
 8045fb8:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8045fbc:	d019      	beq.n	8045ff2 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8045fbe:	f7ff fd2b 	bl	8045a18 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8045fc2:	6823      	ldr	r3, [r4, #0]
 8045fc4:	695a      	ldr	r2, [r3, #20]
 8045fc6:	0652      	lsls	r2, r2, #25
 8045fc8:	d50f      	bpl.n	8045fea <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8045fca:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8045fcc:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8045fce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8045fd2:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8045fd4:	b148      	cbz	r0, 8045fea <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8045fd6:	4b26      	ldr	r3, [pc, #152]	; (8046070 <HAL_UART_IRQHandler+0x140>)
 8045fd8:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8045fda:	f7fd f9d5 	bl	8043388 <HAL_DMA_Abort_IT>
 8045fde:	b138      	cbz	r0, 8045ff0 <HAL_UART_IRQHandler+0xc0>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8045fe0:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8045fe2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8045fe6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8045fe8:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8045fea:	4620      	mov	r0, r4
 8045fec:	f7ff ff78 	bl	8045ee0 <HAL_UART_ErrorCallback>
}
 8045ff0:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8045ff2:	f7ff ff75 	bl	8045ee0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8045ff6:	63e5      	str	r5, [r4, #60]	; 0x3c
 8045ff8:	e7fa      	b.n	8045ff0 <HAL_UART_IRQHandler+0xc0>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8045ffa:	0616      	lsls	r6, r2, #24
 8045ffc:	d528      	bpl.n	8046050 <HAL_UART_IRQHandler+0x120>
 8045ffe:	060d      	lsls	r5, r1, #24
 8046000:	d526      	bpl.n	8046050 <HAL_UART_IRQHandler+0x120>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8046002:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8046006:	2a21      	cmp	r2, #33	; 0x21
 8046008:	d1f2      	bne.n	8045ff0 <HAL_UART_IRQHandler+0xc0>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 804600a:	68a1      	ldr	r1, [r4, #8]
 804600c:	6a22      	ldr	r2, [r4, #32]
 804600e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8046012:	d118      	bne.n	8046046 <HAL_UART_IRQHandler+0x116>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8046014:	8811      	ldrh	r1, [r2, #0]
 8046016:	f3c1 0108 	ubfx	r1, r1, #0, #9
 804601a:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 804601c:	6921      	ldr	r1, [r4, #16]
 804601e:	b981      	cbnz	r1, 8046042 <HAL_UART_IRQHandler+0x112>
        huart->pTxBuffPtr += 2U;
 8046020:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8046022:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8046024:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8046026:	3a01      	subs	r2, #1
 8046028:	b292      	uxth	r2, r2
 804602a:	84e2      	strh	r2, [r4, #38]	; 0x26
 804602c:	2a00      	cmp	r2, #0
 804602e:	d1df      	bne.n	8045ff0 <HAL_UART_IRQHandler+0xc0>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8046030:	68da      	ldr	r2, [r3, #12]
 8046032:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8046036:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8046038:	68da      	ldr	r2, [r3, #12]
 804603a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 804603e:	60da      	str	r2, [r3, #12]
 8046040:	e7d6      	b.n	8045ff0 <HAL_UART_IRQHandler+0xc0>
        huart->pTxBuffPtr += 1U;
 8046042:	3201      	adds	r2, #1
 8046044:	e7ed      	b.n	8046022 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8046046:	1c51      	adds	r1, r2, #1
 8046048:	6221      	str	r1, [r4, #32]
 804604a:	7812      	ldrb	r2, [r2, #0]
 804604c:	605a      	str	r2, [r3, #4]
 804604e:	e7e9      	b.n	8046024 <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8046050:	0650      	lsls	r0, r2, #25
 8046052:	d5cd      	bpl.n	8045ff0 <HAL_UART_IRQHandler+0xc0>
 8046054:	064a      	lsls	r2, r1, #25
 8046056:	d5cb      	bpl.n	8045ff0 <HAL_UART_IRQHandler+0xc0>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8046058:	68da      	ldr	r2, [r3, #12]
 804605a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 804605e:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8046060:	2320      	movs	r3, #32
 8046062:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8046066:	4620      	mov	r0, r4
 8046068:	f007 f872 	bl	804d150 <HAL_UART_TxCpltCallback>
 804606c:	e7c0      	b.n	8045ff0 <HAL_UART_IRQHandler+0xc0>
 804606e:	bf00      	nop
 8046070:	08046075 	.word	0x08046075

08046074 <UART_DMAAbortOnError>:
{
 8046074:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8046076:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8046078:	2300      	movs	r3, #0
 804607a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 804607c:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 804607e:	f7ff ff2f 	bl	8045ee0 <HAL_UART_ErrorCallback>
}
 8046082:	bd08      	pop	{r3, pc}

08046084 <HAL_UART_AbortCpltCallback>:
 8046084:	4770      	bx	lr
	...

08046088 <HAL_UART_Abort_IT>:
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8046088:	6803      	ldr	r3, [r0, #0]
 804608a:	68da      	ldr	r2, [r3, #12]
 804608c:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
{
 8046090:	b510      	push	{r4, lr}
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8046092:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8046094:	695a      	ldr	r2, [r3, #20]
{
 8046096:	4604      	mov	r4, r0
  if (huart->hdmatx != NULL)
 8046098:	6b00      	ldr	r0, [r0, #48]	; 0x30
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 804609a:	f022 0201 	bic.w	r2, r2, #1
 804609e:	615a      	str	r2, [r3, #20]
  if (huart->hdmatx != NULL)
 80460a0:	b128      	cbz	r0, 80460ae <HAL_UART_Abort_IT+0x26>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80460a2:	695a      	ldr	r2, [r3, #20]
 80460a4:	f012 0280 	ands.w	r2, r2, #128	; 0x80
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 80460a8:	bf18      	it	ne
 80460aa:	4a1f      	ldrne	r2, [pc, #124]	; (8046128 <HAL_UART_Abort_IT+0xa0>)
      huart->hdmatx->XferAbortCallback = NULL;
 80460ac:	6502      	str	r2, [r0, #80]	; 0x50
  if (huart->hdmarx != NULL)
 80460ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80460b0:	b129      	cbz	r1, 80460be <HAL_UART_Abort_IT+0x36>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80460b2:	695a      	ldr	r2, [r3, #20]
 80460b4:	f012 0240 	ands.w	r2, r2, #64	; 0x40
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 80460b8:	bf18      	it	ne
 80460ba:	4a1c      	ldrne	r2, [pc, #112]	; (804612c <HAL_UART_Abort_IT+0xa4>)
      huart->hdmarx->XferAbortCallback = NULL;
 80460bc:	650a      	str	r2, [r1, #80]	; 0x50
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80460be:	695a      	ldr	r2, [r3, #20]
 80460c0:	0612      	lsls	r2, r2, #24
 80460c2:	d41d      	bmi.n	8046100 <HAL_UART_Abort_IT+0x78>
  uint32_t AbortCplt = 0x01U;
 80460c4:	2301      	movs	r3, #1
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80460c6:	6822      	ldr	r2, [r4, #0]
 80460c8:	6951      	ldr	r1, [r2, #20]
 80460ca:	0649      	lsls	r1, r1, #25
 80460cc:	d527      	bpl.n	804611e <HAL_UART_Abort_IT+0x96>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80460ce:	6951      	ldr	r1, [r2, #20]
    if (huart->hdmarx != NULL)
 80460d0:	6b60      	ldr	r0, [r4, #52]	; 0x34
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80460d2:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80460d6:	6151      	str	r1, [r2, #20]
    if (huart->hdmarx != NULL)
 80460d8:	b308      	cbz	r0, 804611e <HAL_UART_Abort_IT+0x96>
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80460da:	f7fd f955 	bl	8043388 <HAL_DMA_Abort_IT>
 80460de:	b300      	cbz	r0, 8046122 <HAL_UART_Abort_IT+0x9a>
        huart->hdmarx->XferAbortCallback = NULL;
 80460e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80460e2:	2200      	movs	r2, #0
 80460e4:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferCount = 0x00U;
 80460e6:	2300      	movs	r3, #0
 80460e8:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 80460ea:	85e3      	strh	r3, [r4, #46]	; 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80460ec:	63e3      	str	r3, [r4, #60]	; 0x3c
    huart->gState  = HAL_UART_STATE_READY;
 80460ee:	2320      	movs	r3, #32
 80460f0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    HAL_UART_AbortCpltCallback(huart);
 80460f4:	4620      	mov	r0, r4
    huart->RxState = HAL_UART_STATE_READY;
 80460f6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    HAL_UART_AbortCpltCallback(huart);
 80460fa:	f7ff ffc3 	bl	8046084 <HAL_UART_AbortCpltCallback>
 80460fe:	e010      	b.n	8046122 <HAL_UART_Abort_IT+0x9a>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8046100:	695a      	ldr	r2, [r3, #20]
 8046102:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8046106:	615a      	str	r2, [r3, #20]
    if (huart->hdmatx != NULL)
 8046108:	2800      	cmp	r0, #0
 804610a:	d0db      	beq.n	80460c4 <HAL_UART_Abort_IT+0x3c>
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 804610c:	f7fd f93c 	bl	8043388 <HAL_DMA_Abort_IT>
 8046110:	b118      	cbz	r0, 804611a <HAL_UART_Abort_IT+0x92>
        huart->hdmatx->XferAbortCallback = NULL;
 8046112:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8046114:	2200      	movs	r2, #0
 8046116:	651a      	str	r2, [r3, #80]	; 0x50
 8046118:	e7d4      	b.n	80460c4 <HAL_UART_Abort_IT+0x3c>
        AbortCplt = 0x00U;
 804611a:	4603      	mov	r3, r0
 804611c:	e7d3      	b.n	80460c6 <HAL_UART_Abort_IT+0x3e>
  if (AbortCplt == 0x01U)
 804611e:	2b00      	cmp	r3, #0
 8046120:	d1e1      	bne.n	80460e6 <HAL_UART_Abort_IT+0x5e>
}
 8046122:	2000      	movs	r0, #0
 8046124:	bd10      	pop	{r4, pc}
 8046126:	bf00      	nop
 8046128:	08046159 	.word	0x08046159
 804612c:	08046131 	.word	0x08046131

08046130 <UART_DMARxAbortCallback>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8046130:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->hdmarx->XferAbortCallback = NULL;
 8046132:	6b42      	ldr	r2, [r0, #52]	; 0x34
{
 8046134:	b508      	push	{r3, lr}
  huart->hdmarx->XferAbortCallback = NULL;
 8046136:	2300      	movs	r3, #0
 8046138:	6513      	str	r3, [r2, #80]	; 0x50
  if (huart->hdmatx != NULL)
 804613a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 804613c:	b10a      	cbz	r2, 8046142 <UART_DMARxAbortCallback+0x12>
    if (huart->hdmatx->XferAbortCallback != NULL)
 804613e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8046140:	b94a      	cbnz	r2, 8046156 <UART_DMARxAbortCallback+0x26>
  huart->TxXferCount = 0x00U;
 8046142:	84c3      	strh	r3, [r0, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8046144:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8046146:	63c3      	str	r3, [r0, #60]	; 0x3c
  huart->gState  = HAL_UART_STATE_READY;
 8046148:	2320      	movs	r3, #32
 804614a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 804614e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  HAL_UART_AbortCpltCallback(huart);
 8046152:	f7ff ff97 	bl	8046084 <HAL_UART_AbortCpltCallback>
}
 8046156:	bd08      	pop	{r3, pc}

08046158 <UART_DMATxAbortCallback>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8046158:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->hdmatx->XferAbortCallback = NULL;
 804615a:	6b02      	ldr	r2, [r0, #48]	; 0x30
{
 804615c:	b508      	push	{r3, lr}
  huart->hdmatx->XferAbortCallback = NULL;
 804615e:	2300      	movs	r3, #0
 8046160:	6513      	str	r3, [r2, #80]	; 0x50
  if (huart->hdmarx != NULL)
 8046162:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8046164:	b10a      	cbz	r2, 804616a <UART_DMATxAbortCallback+0x12>
    if (huart->hdmarx->XferAbortCallback != NULL)
 8046166:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8046168:	b94a      	cbnz	r2, 804617e <UART_DMATxAbortCallback+0x26>
  huart->TxXferCount = 0x00U;
 804616a:	84c3      	strh	r3, [r0, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 804616c:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 804616e:	63c3      	str	r3, [r0, #60]	; 0x3c
  huart->gState  = HAL_UART_STATE_READY;
 8046170:	2320      	movs	r3, #32
 8046172:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8046176:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  HAL_UART_AbortCpltCallback(huart);
 804617a:	f7ff ff83 	bl	8046084 <HAL_UART_AbortCpltCallback>
}
 804617e:	bd08      	pop	{r3, pc}

08046180 <HAL_UART_AbortReceiveCpltCallback>:
 8046180:	4770      	bx	lr
	...

08046184 <HAL_UART_AbortReceive_IT>:
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8046184:	6803      	ldr	r3, [r0, #0]
 8046186:	68da      	ldr	r2, [r3, #12]
 8046188:	f422 7290 	bic.w	r2, r2, #288	; 0x120
{
 804618c:	b510      	push	{r4, lr}
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 804618e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8046190:	695a      	ldr	r2, [r3, #20]
 8046192:	f022 0201 	bic.w	r2, r2, #1
 8046196:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8046198:	695a      	ldr	r2, [r3, #20]
 804619a:	f012 0240 	ands.w	r2, r2, #64	; 0x40
{
 804619e:	4604      	mov	r4, r0
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80461a0:	d017      	beq.n	80461d2 <HAL_UART_AbortReceive_IT+0x4e>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80461a2:	695a      	ldr	r2, [r3, #20]
 80461a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80461a8:	615a      	str	r2, [r3, #20]
    if (huart->hdmarx != NULL)
 80461aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80461ac:	b153      	cbz	r3, 80461c4 <HAL_UART_AbortReceive_IT+0x40>
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 80461ae:	4a0a      	ldr	r2, [pc, #40]	; (80461d8 <HAL_UART_AbortReceive_IT+0x54>)
 80461b0:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80461b2:	4618      	mov	r0, r3
 80461b4:	f7fd f8e8 	bl	8043388 <HAL_DMA_Abort_IT>
 80461b8:	b110      	cbz	r0, 80461c0 <HAL_UART_AbortReceive_IT+0x3c>
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80461ba:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80461bc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80461be:	4798      	blx	r3
}
 80461c0:	2000      	movs	r0, #0
 80461c2:	bd10      	pop	{r4, pc}
      huart->RxXferCount = 0x00U;
 80461c4:	85c3      	strh	r3, [r0, #46]	; 0x2e
    huart->RxState = HAL_UART_STATE_READY;
 80461c6:	2320      	movs	r3, #32
 80461c8:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    HAL_UART_AbortReceiveCpltCallback(huart);
 80461cc:	f7ff ffd8 	bl	8046180 <HAL_UART_AbortReceiveCpltCallback>
 80461d0:	e7f6      	b.n	80461c0 <HAL_UART_AbortReceive_IT+0x3c>
    huart->RxXferCount = 0x00U;
 80461d2:	85c2      	strh	r2, [r0, #46]	; 0x2e
 80461d4:	e7f7      	b.n	80461c6 <HAL_UART_AbortReceive_IT+0x42>
 80461d6:	bf00      	nop
 80461d8:	080461dd 	.word	0x080461dd

080461dc <UART_DMARxOnlyAbortCallback>:
{
 80461dc:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80461de:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80461e0:	2300      	movs	r3, #0
 80461e2:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->RxState = HAL_UART_STATE_READY;
 80461e4:	2320      	movs	r3, #32
 80461e6:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  HAL_UART_AbortReceiveCpltCallback(huart);
 80461ea:	f7ff ffc9 	bl	8046180 <HAL_UART_AbortReceiveCpltCallback>
}
 80461ee:	bd08      	pop	{r3, pc}

080461f0 <SDMMC_GetCmdResp2>:
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80461f0:	4b12      	ldr	r3, [pc, #72]	; (804623c <SDMMC_GetCmdResp2+0x4c>)
 80461f2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80461f6:	681b      	ldr	r3, [r3, #0]
 80461f8:	fbb3 f2f2 	udiv	r2, r3, r2
 80461fc:	f241 3388 	movw	r3, #5000	; 0x1388
 8046200:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8046202:	f113 33ff 	adds.w	r3, r3, #4294967295
 8046206:	d315      	bcc.n	8046234 <SDMMC_GetCmdResp2+0x44>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 8046208:	6b42      	ldr	r2, [r0, #52]	; 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 804620a:	f012 0f45 	tst.w	r2, #69	; 0x45
 804620e:	d0f8      	beq.n	8046202 <SDMMC_GetCmdResp2+0x12>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8046210:	0512      	lsls	r2, r2, #20
 8046212:	d4f6      	bmi.n	8046202 <SDMMC_GetCmdResp2+0x12>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8046214:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8046216:	075b      	lsls	r3, r3, #29
 8046218:	d503      	bpl.n	8046222 <SDMMC_GetCmdResp2+0x32>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 804621a:	2304      	movs	r3, #4
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 804621c:	6383      	str	r3, [r0, #56]	; 0x38
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 804621e:	4618      	mov	r0, r3
 8046220:	4770      	bx	lr
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8046222:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8046224:	f013 0301 	ands.w	r3, r3, #1
 8046228:	d001      	beq.n	804622e <SDMMC_GetCmdResp2+0x3e>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 804622a:	2301      	movs	r3, #1
 804622c:	e7f6      	b.n	804621c <SDMMC_GetCmdResp2+0x2c>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 804622e:	22c5      	movs	r2, #197	; 0xc5
 8046230:	6382      	str	r2, [r0, #56]	; 0x38
 8046232:	e7f4      	b.n	804621e <SDMMC_GetCmdResp2+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8046234:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8046238:	e7f1      	b.n	804621e <SDMMC_GetCmdResp2+0x2e>
 804623a:	bf00      	nop
 804623c:	2000108c 	.word	0x2000108c

08046240 <SDMMC_GetCmdResp3>:
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8046240:	4b0f      	ldr	r3, [pc, #60]	; (8046280 <SDMMC_GetCmdResp3+0x40>)
 8046242:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8046246:	681b      	ldr	r3, [r3, #0]
 8046248:	fbb3 f2f2 	udiv	r2, r3, r2
 804624c:	f241 3388 	movw	r3, #5000	; 0x1388
 8046250:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8046252:	f113 33ff 	adds.w	r3, r3, #4294967295
 8046256:	d30f      	bcc.n	8046278 <SDMMC_GetCmdResp3+0x38>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 8046258:	6b42      	ldr	r2, [r0, #52]	; 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 804625a:	f012 0f45 	tst.w	r2, #69	; 0x45
 804625e:	d0f8      	beq.n	8046252 <SDMMC_GetCmdResp3+0x12>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8046260:	0512      	lsls	r2, r2, #20
 8046262:	d4f6      	bmi.n	8046252 <SDMMC_GetCmdResp3+0x12>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8046264:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8046266:	f013 0304 	ands.w	r3, r3, #4
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 804626a:	bf15      	itete	ne
 804626c:	2304      	movne	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 804626e:	22c5      	moveq	r2, #197	; 0xc5
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8046270:	6383      	strne	r3, [r0, #56]	; 0x38
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8046272:	6382      	streq	r2, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8046274:	4618      	mov	r0, r3
 8046276:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8046278:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 804627c:	4770      	bx	lr
 804627e:	bf00      	nop
 8046280:	2000108c 	.word	0x2000108c

08046284 <SDMMC_GetCmdResp1>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8046284:	4b44      	ldr	r3, [pc, #272]	; (8046398 <SDMMC_GetCmdResp1+0x114>)
{
 8046286:	b510      	push	{r4, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8046288:	681b      	ldr	r3, [r3, #0]
 804628a:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 804628e:	fbb3 f3f4 	udiv	r3, r3, r4
 8046292:	435a      	muls	r2, r3
    if (count-- == 0U)
 8046294:	2a00      	cmp	r2, #0
 8046296:	d04a      	beq.n	804632e <SDMMC_GetCmdResp1+0xaa>
    sta_reg = SDIOx->STA;
 8046298:	6b43      	ldr	r3, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 804629a:	f013 0f45 	tst.w	r3, #69	; 0x45
 804629e:	d008      	beq.n	80462b2 <SDMMC_GetCmdResp1+0x2e>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80462a0:	051c      	lsls	r4, r3, #20
 80462a2:	d406      	bmi.n	80462b2 <SDMMC_GetCmdResp1+0x2e>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80462a4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80462a6:	075b      	lsls	r3, r3, #29
 80462a8:	d505      	bpl.n	80462b6 <SDMMC_GetCmdResp1+0x32>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80462aa:	2304      	movs	r3, #4
 80462ac:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80462ae:	4618      	mov	r0, r3
}
 80462b0:	bd10      	pop	{r4, pc}
 80462b2:	3a01      	subs	r2, #1
 80462b4:	e7ee      	b.n	8046294 <SDMMC_GetCmdResp1+0x10>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80462b6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80462b8:	07dc      	lsls	r4, r3, #31
 80462ba:	d503      	bpl.n	80462c4 <SDMMC_GetCmdResp1+0x40>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80462bc:	2301      	movs	r3, #1
 80462be:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80462c0:	2001      	movs	r0, #1
 80462c2:	e7f5      	b.n	80462b0 <SDMMC_GetCmdResp1+0x2c>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80462c4:	23c5      	movs	r3, #197	; 0xc5
 80462c6:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 80462c8:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80462ca:	b2db      	uxtb	r3, r3
 80462cc:	4299      	cmp	r1, r3
 80462ce:	d1f7      	bne.n	80462c0 <SDMMC_GetCmdResp1+0x3c>
  return (*(__IO uint32_t *) tmp);
 80462d0:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80462d2:	4832      	ldr	r0, [pc, #200]	; (804639c <SDMMC_GetCmdResp1+0x118>)
 80462d4:	4018      	ands	r0, r3
 80462d6:	2800      	cmp	r0, #0
 80462d8:	d0ea      	beq.n	80462b0 <SDMMC_GetCmdResp1+0x2c>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80462da:	2b00      	cmp	r3, #0
 80462dc:	db2a      	blt.n	8046334 <SDMMC_GetCmdResp1+0xb0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80462de:	005a      	lsls	r2, r3, #1
 80462e0:	d42b      	bmi.n	804633a <SDMMC_GetCmdResp1+0xb6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80462e2:	009c      	lsls	r4, r3, #2
 80462e4:	d42b      	bmi.n	804633e <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80462e6:	00d9      	lsls	r1, r3, #3
 80462e8:	d42b      	bmi.n	8046342 <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80462ea:	011a      	lsls	r2, r3, #4
 80462ec:	d42c      	bmi.n	8046348 <SDMMC_GetCmdResp1+0xc4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80462ee:	015c      	lsls	r4, r3, #5
 80462f0:	d42d      	bmi.n	804634e <SDMMC_GetCmdResp1+0xca>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80462f2:	01d9      	lsls	r1, r3, #7
 80462f4:	d42e      	bmi.n	8046354 <SDMMC_GetCmdResp1+0xd0>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80462f6:	021a      	lsls	r2, r3, #8
 80462f8:	d42f      	bmi.n	804635a <SDMMC_GetCmdResp1+0xd6>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80462fa:	025c      	lsls	r4, r3, #9
 80462fc:	d430      	bmi.n	8046360 <SDMMC_GetCmdResp1+0xdc>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80462fe:	0299      	lsls	r1, r3, #10
 8046300:	d431      	bmi.n	8046366 <SDMMC_GetCmdResp1+0xe2>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8046302:	02da      	lsls	r2, r3, #11
 8046304:	d432      	bmi.n	804636c <SDMMC_GetCmdResp1+0xe8>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8046306:	035c      	lsls	r4, r3, #13
 8046308:	d433      	bmi.n	8046372 <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 804630a:	0399      	lsls	r1, r3, #14
 804630c:	d434      	bmi.n	8046378 <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 804630e:	03da      	lsls	r2, r3, #15
 8046310:	d435      	bmi.n	804637e <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8046312:	041c      	lsls	r4, r3, #16
 8046314:	d436      	bmi.n	8046384 <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8046316:	0459      	lsls	r1, r3, #17
 8046318:	d437      	bmi.n	804638a <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 804631a:	049a      	lsls	r2, r3, #18
 804631c:	d438      	bmi.n	8046390 <SDMMC_GetCmdResp1+0x10c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 804631e:	f013 0f08 	tst.w	r3, #8
 8046322:	bf0c      	ite	eq
 8046324:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8046328:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 804632c:	e7c0      	b.n	80462b0 <SDMMC_GetCmdResp1+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 804632e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8046332:	e7bd      	b.n	80462b0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8046334:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8046338:	e7ba      	b.n	80462b0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 804633a:	2040      	movs	r0, #64	; 0x40
 804633c:	e7b8      	b.n	80462b0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 804633e:	2080      	movs	r0, #128	; 0x80
 8046340:	e7b6      	b.n	80462b0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8046342:	f44f 7080 	mov.w	r0, #256	; 0x100
 8046346:	e7b3      	b.n	80462b0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8046348:	f44f 7000 	mov.w	r0, #512	; 0x200
 804634c:	e7b0      	b.n	80462b0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 804634e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8046352:	e7ad      	b.n	80462b0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8046354:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8046358:	e7aa      	b.n	80462b0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_COM_CRC_FAILED;
 804635a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 804635e:	e7a7      	b.n	80462b0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8046360:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8046364:	e7a4      	b.n	80462b0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8046366:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 804636a:	e7a1      	b.n	80462b0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CC_ERR;
 804636c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8046370:	e79e      	b.n	80462b0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8046372:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8046376:	e79b      	b.n	80462b0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8046378:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 804637c:	e798      	b.n	80462b0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 804637e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8046382:	e795      	b.n	80462b0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8046384:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8046388:	e792      	b.n	80462b0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 804638a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 804638e:	e78f      	b.n	80462b0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_RESET;
 8046390:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8046394:	e78c      	b.n	80462b0 <SDMMC_GetCmdResp1+0x2c>
 8046396:	bf00      	nop
 8046398:	2000108c 	.word	0x2000108c
 804639c:	fdffe008 	.word	0xfdffe008

080463a0 <SDIO_Init>:
{
 80463a0:	b084      	sub	sp, #16
 80463a2:	b510      	push	{r4, lr}
 80463a4:	ac03      	add	r4, sp, #12
 80463a6:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 80463aa:	460b      	mov	r3, r1
 80463ac:	9904      	ldr	r1, [sp, #16]
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80463ae:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 80463b0:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 80463b2:	9905      	ldr	r1, [sp, #20]
 80463b4:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 80463b6:	9906      	ldr	r1, [sp, #24]
 80463b8:	430b      	orrs	r3, r1
             Init.BusWide             |\
 80463ba:	9907      	ldr	r1, [sp, #28]
 80463bc:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 80463be:	9908      	ldr	r1, [sp, #32]
}
 80463c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80463c4:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.HardwareFlowControl |\
 80463c8:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80463ca:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80463ce:	4313      	orrs	r3, r2
 80463d0:	6043      	str	r3, [r0, #4]
}
 80463d2:	b004      	add	sp, #16
 80463d4:	2000      	movs	r0, #0
 80463d6:	4770      	bx	lr

080463d8 <SDIO_ReadFIFO>:
  return (SDIOx->FIFO);
 80463d8:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 80463dc:	4770      	bx	lr

080463de <SDIO_WriteFIFO>:
  SDIOx->FIFO = *pWriteData;
 80463de:	680b      	ldr	r3, [r1, #0]
 80463e0:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 80463e4:	2000      	movs	r0, #0
 80463e6:	4770      	bx	lr

080463e8 <SDIO_PowerState_ON>:
{  
 80463e8:	b508      	push	{r3, lr}
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80463ea:	2303      	movs	r3, #3
 80463ec:	6003      	str	r3, [r0, #0]
  HAL_Delay(2);
 80463ee:	2002      	movs	r0, #2
 80463f0:	f006 fbc0 	bl	804cb74 <HAL_Delay>
}
 80463f4:	2000      	movs	r0, #0
 80463f6:	bd08      	pop	{r3, pc}

080463f8 <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80463f8:	6800      	ldr	r0, [r0, #0]
}
 80463fa:	f000 0003 	and.w	r0, r0, #3
 80463fe:	4770      	bx	lr

08046400 <SDIO_SendCommand>:
  SDIOx->ARG = Command->Argument;
 8046400:	680b      	ldr	r3, [r1, #0]
{
 8046402:	b510      	push	{r4, lr}
  SDIOx->ARG = Command->Argument;
 8046404:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8046406:	e9d1 3401 	ldrd	r3, r4, [r1, #4]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 804640a:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 804640c:	4323      	orrs	r3, r4
                       Command->Response         |\
 804640e:	68cc      	ldr	r4, [r1, #12]
                       Command->WaitForInterrupt |\
 8046410:	6909      	ldr	r1, [r1, #16]
                       Command->Response         |\
 8046412:	4323      	orrs	r3, r4
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8046414:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
                       Command->WaitForInterrupt |\
 8046418:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 804641a:	f022 020f 	bic.w	r2, r2, #15
 804641e:	4313      	orrs	r3, r2
 8046420:	60c3      	str	r3, [r0, #12]
}
 8046422:	2000      	movs	r0, #0
 8046424:	bd10      	pop	{r4, pc}

08046426 <SDIO_GetResponse>:
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8046426:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 8046428:	5840      	ldr	r0, [r0, r1]
}  
 804642a:	4770      	bx	lr

0804642c <SDIO_ConfigData>:
  SDIOx->DTIMER = Data->DataTimeOut;
 804642c:	680b      	ldr	r3, [r1, #0]
{
 804642e:	b510      	push	{r4, lr}
  SDIOx->DTIMER = Data->DataTimeOut;
 8046430:	6243      	str	r3, [r0, #36]	; 0x24
  SDIOx->DLEN = Data->DataLength;
 8046432:	684b      	ldr	r3, [r1, #4]
 8046434:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8046436:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
 804643a:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 804643c:	690c      	ldr	r4, [r1, #16]
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 804643e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
                       Data->TransferMode  |\
 8046440:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 8046442:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 8046444:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8046446:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 804644a:	4313      	orrs	r3, r2
 804644c:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 804644e:	2000      	movs	r0, #0
 8046450:	bd10      	pop	{r4, pc}

08046452 <SDMMC_CmdBlockLength>:
{
 8046452:	b530      	push	{r4, r5, lr}
 8046454:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8046456:	2410      	movs	r4, #16
 8046458:	2340      	movs	r3, #64	; 0x40
{
 804645a:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 804645c:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 804645e:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8046462:	2200      	movs	r2, #0
 8046464:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8046468:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 804646a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 804646e:	f7ff ffc7 	bl	8046400 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8046472:	f241 3288 	movw	r2, #5000	; 0x1388
 8046476:	4621      	mov	r1, r4
 8046478:	4628      	mov	r0, r5
 804647a:	f7ff ff03 	bl	8046284 <SDMMC_GetCmdResp1>
}
 804647e:	b007      	add	sp, #28
 8046480:	bd30      	pop	{r4, r5, pc}

08046482 <SDMMC_CmdReadSingleBlock>:
{
 8046482:	b530      	push	{r4, r5, lr}
 8046484:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8046486:	2411      	movs	r4, #17
 8046488:	2340      	movs	r3, #64	; 0x40
{
 804648a:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 804648c:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 804648e:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8046492:	2200      	movs	r2, #0
 8046494:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8046498:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 804649a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 804649e:	f7ff ffaf 	bl	8046400 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80464a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80464a6:	4621      	mov	r1, r4
 80464a8:	4628      	mov	r0, r5
 80464aa:	f7ff feeb 	bl	8046284 <SDMMC_GetCmdResp1>
}
 80464ae:	b007      	add	sp, #28
 80464b0:	bd30      	pop	{r4, r5, pc}

080464b2 <SDMMC_CmdReadMultiBlock>:
{
 80464b2:	b530      	push	{r4, r5, lr}
 80464b4:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80464b6:	2412      	movs	r4, #18
 80464b8:	2340      	movs	r3, #64	; 0x40
{
 80464ba:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80464bc:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80464be:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80464c2:	2200      	movs	r2, #0
 80464c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80464c8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80464ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80464ce:	f7ff ff97 	bl	8046400 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80464d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80464d6:	4621      	mov	r1, r4
 80464d8:	4628      	mov	r0, r5
 80464da:	f7ff fed3 	bl	8046284 <SDMMC_GetCmdResp1>
}
 80464de:	b007      	add	sp, #28
 80464e0:	bd30      	pop	{r4, r5, pc}

080464e2 <SDMMC_CmdWriteSingleBlock>:
{
 80464e2:	b530      	push	{r4, r5, lr}
 80464e4:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80464e6:	2418      	movs	r4, #24
 80464e8:	2340      	movs	r3, #64	; 0x40
{
 80464ea:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80464ec:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80464ee:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80464f2:	2200      	movs	r2, #0
 80464f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80464f8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80464fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80464fe:	f7ff ff7f 	bl	8046400 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8046502:	f241 3288 	movw	r2, #5000	; 0x1388
 8046506:	4621      	mov	r1, r4
 8046508:	4628      	mov	r0, r5
 804650a:	f7ff febb 	bl	8046284 <SDMMC_GetCmdResp1>
}
 804650e:	b007      	add	sp, #28
 8046510:	bd30      	pop	{r4, r5, pc}

08046512 <SDMMC_CmdWriteMultiBlock>:
{
 8046512:	b530      	push	{r4, r5, lr}
 8046514:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8046516:	2419      	movs	r4, #25
 8046518:	2340      	movs	r3, #64	; 0x40
{
 804651a:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 804651c:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 804651e:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8046522:	2200      	movs	r2, #0
 8046524:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8046528:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 804652a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 804652e:	f7ff ff67 	bl	8046400 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8046532:	f241 3288 	movw	r2, #5000	; 0x1388
 8046536:	4621      	mov	r1, r4
 8046538:	4628      	mov	r0, r5
 804653a:	f7ff fea3 	bl	8046284 <SDMMC_GetCmdResp1>
}
 804653e:	b007      	add	sp, #28
 8046540:	bd30      	pop	{r4, r5, pc}
	...

08046544 <SDMMC_CmdStopTransfer>:
{
 8046544:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8046546:	2300      	movs	r3, #0
{
 8046548:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 804654a:	240c      	movs	r4, #12
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 804654c:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 804654e:	e9cd 2303 	strd	r2, r3, [sp, #12]
{
 8046552:	4605      	mov	r5, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8046554:	e9cd 3401 	strd	r3, r4, [sp, #4]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8046558:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 804655a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 804655e:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8046560:	f7ff ff4e 	bl	8046400 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8046564:	4a03      	ldr	r2, [pc, #12]	; (8046574 <SDMMC_CmdStopTransfer+0x30>)
 8046566:	4621      	mov	r1, r4
 8046568:	4628      	mov	r0, r5
 804656a:	f7ff fe8b 	bl	8046284 <SDMMC_GetCmdResp1>
}
 804656e:	b007      	add	sp, #28
 8046570:	bd30      	pop	{r4, r5, pc}
 8046572:	bf00      	nop
 8046574:	05f5e100 	.word	0x05f5e100

08046578 <SDMMC_CmdSelDesel>:
{
 8046578:	b530      	push	{r4, r5, lr}
 804657a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 804657c:	2407      	movs	r4, #7
 804657e:	2340      	movs	r3, #64	; 0x40
{
 8046580:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8046582:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8046584:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8046588:	2200      	movs	r2, #0
 804658a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 804658e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8046590:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8046594:	f7ff ff34 	bl	8046400 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8046598:	f241 3288 	movw	r2, #5000	; 0x1388
 804659c:	4621      	mov	r1, r4
 804659e:	4628      	mov	r0, r5
 80465a0:	f7ff fe70 	bl	8046284 <SDMMC_GetCmdResp1>
}
 80465a4:	b007      	add	sp, #28
 80465a6:	bd30      	pop	{r4, r5, pc}

080465a8 <SDMMC_CmdGoIdleState>:
{
 80465a8:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = 0U;
 80465aa:	2300      	movs	r3, #0
{
 80465ac:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80465ae:	e9cd 3301 	strd	r3, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80465b2:	e9cd 3303 	strd	r3, r3, [sp, #12]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80465b6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80465b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80465bc:	9305      	str	r3, [sp, #20]
{
 80465be:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80465c0:	f7ff ff1e 	bl	8046400 <SDIO_SendCommand>
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80465c4:	4b0b      	ldr	r3, [pc, #44]	; (80465f4 <SDMMC_CmdGoIdleState+0x4c>)
 80465c6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80465ca:	681b      	ldr	r3, [r3, #0]
 80465cc:	fbb3 f2f2 	udiv	r2, r3, r2
 80465d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80465d4:	4353      	muls	r3, r2
    if (count-- == 0U)
 80465d6:	f113 33ff 	adds.w	r3, r3, #4294967295
 80465da:	d307      	bcc.n	80465ec <SDMMC_CmdGoIdleState+0x44>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80465dc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80465de:	0612      	lsls	r2, r2, #24
 80465e0:	d5f9      	bpl.n	80465d6 <SDMMC_CmdGoIdleState+0x2e>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80465e2:	23c5      	movs	r3, #197	; 0xc5
 80465e4:	63a3      	str	r3, [r4, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 80465e6:	2000      	movs	r0, #0
}
 80465e8:	b006      	add	sp, #24
 80465ea:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 80465ec:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 80465f0:	e7fa      	b.n	80465e8 <SDMMC_CmdGoIdleState+0x40>
 80465f2:	bf00      	nop
 80465f4:	2000108c 	.word	0x2000108c

080465f8 <SDMMC_CmdOperCond>:
{
 80465f8:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80465fa:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
{
 80465fe:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8046600:	2308      	movs	r3, #8
 8046602:	e9cd 1301 	strd	r1, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8046606:	f04f 0c40 	mov.w	ip, #64	; 0x40
 804660a:	2300      	movs	r3, #0
 804660c:	e9cd c303 	strd	ip, r3, [sp, #12]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8046610:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8046612:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8046616:	9305      	str	r3, [sp, #20]
{
 8046618:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 804661a:	f7ff fef1 	bl	8046400 <SDIO_SendCommand>
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 804661e:	4b15      	ldr	r3, [pc, #84]	; (8046674 <SDMMC_CmdOperCond+0x7c>)
 8046620:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8046624:	681b      	ldr	r3, [r3, #0]
 8046626:	fbb3 f2f2 	udiv	r2, r3, r2
 804662a:	f241 3388 	movw	r3, #5000	; 0x1388
 804662e:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8046630:	f113 33ff 	adds.w	r3, r3, #4294967295
 8046634:	d31a      	bcc.n	804666c <SDMMC_CmdOperCond+0x74>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 8046636:	6b62      	ldr	r2, [r4, #52]	; 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8046638:	f012 0f45 	tst.w	r2, #69	; 0x45
 804663c:	d0f8      	beq.n	8046630 <SDMMC_CmdOperCond+0x38>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 804663e:	0512      	lsls	r2, r2, #20
 8046640:	d4f6      	bmi.n	8046630 <SDMMC_CmdOperCond+0x38>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8046642:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8046644:	075b      	lsls	r3, r3, #29
 8046646:	d503      	bpl.n	8046650 <SDMMC_CmdOperCond+0x58>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8046648:	2004      	movs	r0, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 804664a:	63a0      	str	r0, [r4, #56]	; 0x38
}
 804664c:	b006      	add	sp, #24
 804664e:	bd10      	pop	{r4, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8046650:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8046652:	f012 0201 	ands.w	r2, r2, #1
 8046656:	d001      	beq.n	804665c <SDMMC_CmdOperCond+0x64>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8046658:	2001      	movs	r0, #1
 804665a:	e7f6      	b.n	804664a <SDMMC_CmdOperCond+0x52>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 804665c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 804665e:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8046662:	d0f3      	beq.n	804664c <SDMMC_CmdOperCond+0x54>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8046664:	2340      	movs	r3, #64	; 0x40
 8046666:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8046668:	4610      	mov	r0, r2
 804666a:	e7ef      	b.n	804664c <SDMMC_CmdOperCond+0x54>
      return SDMMC_ERROR_TIMEOUT;
 804666c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8046670:	e7ec      	b.n	804664c <SDMMC_CmdOperCond+0x54>
 8046672:	bf00      	nop
 8046674:	2000108c 	.word	0x2000108c

08046678 <SDMMC_CmdAppCommand>:
{
 8046678:	b530      	push	{r4, r5, lr}
 804667a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 804667c:	2437      	movs	r4, #55	; 0x37
 804667e:	2340      	movs	r3, #64	; 0x40
{
 8046680:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8046682:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8046684:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8046688:	2200      	movs	r2, #0
 804668a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 804668e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8046690:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8046694:	f7ff feb4 	bl	8046400 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8046698:	f241 3288 	movw	r2, #5000	; 0x1388
 804669c:	4621      	mov	r1, r4
 804669e:	4628      	mov	r0, r5
 80466a0:	f7ff fdf0 	bl	8046284 <SDMMC_GetCmdResp1>
}
 80466a4:	b007      	add	sp, #28
 80466a6:	bd30      	pop	{r4, r5, pc}

080466a8 <SDMMC_CmdAppOperCommand>:
{
 80466a8:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80466aa:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
{
 80466ae:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80466b0:	2229      	movs	r2, #41	; 0x29
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80466b2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80466b6:	2340      	movs	r3, #64	; 0x40
 80466b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80466bc:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80466be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80466c2:	2100      	movs	r1, #0
 80466c4:	e9cd 1304 	strd	r1, r3, [sp, #16]
{
 80466c8:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80466ca:	a901      	add	r1, sp, #4
 80466cc:	f7ff fe98 	bl	8046400 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80466d0:	4620      	mov	r0, r4
 80466d2:	f7ff fdb5 	bl	8046240 <SDMMC_GetCmdResp3>
}
 80466d6:	b006      	add	sp, #24
 80466d8:	bd10      	pop	{r4, pc}

080466da <SDMMC_CmdBusWidth>:
{
 80466da:	b530      	push	{r4, r5, lr}
 80466dc:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80466de:	2406      	movs	r4, #6
 80466e0:	2340      	movs	r3, #64	; 0x40
{
 80466e2:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80466e4:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80466e6:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80466ea:	2200      	movs	r2, #0
 80466ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80466f0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80466f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80466f6:	f7ff fe83 	bl	8046400 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80466fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80466fe:	4621      	mov	r1, r4
 8046700:	4628      	mov	r0, r5
 8046702:	f7ff fdbf 	bl	8046284 <SDMMC_GetCmdResp1>
}
 8046706:	b007      	add	sp, #28
 8046708:	bd30      	pop	{r4, r5, pc}

0804670a <SDMMC_CmdSendSCR>:
{
 804670a:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 804670c:	2300      	movs	r3, #0
{
 804670e:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8046710:	2433      	movs	r4, #51	; 0x33
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8046712:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8046714:	e9cd 2303 	strd	r2, r3, [sp, #12]
{
 8046718:	4605      	mov	r5, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 804671a:	e9cd 3401 	strd	r3, r4, [sp, #4]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 804671e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8046720:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8046724:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8046726:	f7ff fe6b 	bl	8046400 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 804672a:	f241 3288 	movw	r2, #5000	; 0x1388
 804672e:	4621      	mov	r1, r4
 8046730:	4628      	mov	r0, r5
 8046732:	f7ff fda7 	bl	8046284 <SDMMC_GetCmdResp1>
}
 8046736:	b007      	add	sp, #28
 8046738:	bd30      	pop	{r4, r5, pc}

0804673a <SDMMC_CmdSendCID>:
{
 804673a:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 804673c:	2300      	movs	r3, #0
{
 804673e:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8046740:	2202      	movs	r2, #2
 8046742:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8046746:	22c0      	movs	r2, #192	; 0xc0
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8046748:	e9cd 2303 	strd	r2, r3, [sp, #12]
{
 804674c:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 804674e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8046752:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8046754:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8046756:	f7ff fe53 	bl	8046400 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 804675a:	4620      	mov	r0, r4
 804675c:	f7ff fd48 	bl	80461f0 <SDMMC_GetCmdResp2>
}
 8046760:	b006      	add	sp, #24
 8046762:	bd10      	pop	{r4, pc}

08046764 <SDMMC_CmdSendCSD>:
{
 8046764:	b510      	push	{r4, lr}
 8046766:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8046768:	2209      	movs	r2, #9
 804676a:	23c0      	movs	r3, #192	; 0xc0
 804676c:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.Argument         = Argument;
 8046770:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8046772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8046776:	2100      	movs	r1, #0
 8046778:	e9cd 1304 	strd	r1, r3, [sp, #16]
{
 804677c:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 804677e:	a901      	add	r1, sp, #4
 8046780:	f7ff fe3e 	bl	8046400 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8046784:	4620      	mov	r0, r4
 8046786:	f7ff fd33 	bl	80461f0 <SDMMC_GetCmdResp2>
}
 804678a:	b006      	add	sp, #24
 804678c:	bd10      	pop	{r4, pc}
	...

08046790 <SDMMC_CmdSetRelAdd>:
{
 8046790:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8046792:	2300      	movs	r3, #0
{
 8046794:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8046796:	2203      	movs	r2, #3
 8046798:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 804679c:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 804679e:	e9cd 2303 	strd	r2, r3, [sp, #12]
{
 80467a2:	460d      	mov	r5, r1
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80467a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80467a8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80467aa:	9305      	str	r3, [sp, #20]
{
 80467ac:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80467ae:	f7ff fe27 	bl	8046400 <SDIO_SendCommand>
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80467b2:	4b1e      	ldr	r3, [pc, #120]	; (804682c <SDMMC_CmdSetRelAdd+0x9c>)
 80467b4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80467b8:	681b      	ldr	r3, [r3, #0]
 80467ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80467be:	f241 3388 	movw	r3, #5000	; 0x1388
 80467c2:	4353      	muls	r3, r2
    if (count-- == 0U)
 80467c4:	f113 33ff 	adds.w	r3, r3, #4294967295
 80467c8:	d328      	bcc.n	804681c <SDMMC_CmdSetRelAdd+0x8c>
    sta_reg = SDIOx->STA;
 80467ca:	6b62      	ldr	r2, [r4, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80467cc:	f012 0f45 	tst.w	r2, #69	; 0x45
 80467d0:	d0f8      	beq.n	80467c4 <SDMMC_CmdSetRelAdd+0x34>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80467d2:	0512      	lsls	r2, r2, #20
 80467d4:	d4f6      	bmi.n	80467c4 <SDMMC_CmdSetRelAdd+0x34>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80467d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80467d8:	0758      	lsls	r0, r3, #29
 80467da:	d503      	bpl.n	80467e4 <SDMMC_CmdSetRelAdd+0x54>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80467dc:	2004      	movs	r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80467de:	63a0      	str	r0, [r4, #56]	; 0x38
}
 80467e0:	b007      	add	sp, #28
 80467e2:	bd30      	pop	{r4, r5, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80467e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80467e6:	07d9      	lsls	r1, r3, #31
 80467e8:	d501      	bpl.n	80467ee <SDMMC_CmdSetRelAdd+0x5e>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80467ea:	2001      	movs	r0, #1
 80467ec:	e7f7      	b.n	80467de <SDMMC_CmdSetRelAdd+0x4e>
  return (uint8_t)(SDIOx->RESPCMD);
 80467ee:	6923      	ldr	r3, [r4, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80467f0:	b2db      	uxtb	r3, r3
 80467f2:	2b03      	cmp	r3, #3
 80467f4:	d115      	bne.n	8046822 <SDMMC_CmdSetRelAdd+0x92>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80467f6:	23c5      	movs	r3, #197	; 0xc5
 80467f8:	63a3      	str	r3, [r4, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 80467fa:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80467fc:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 8046800:	d102      	bne.n	8046808 <SDMMC_CmdSetRelAdd+0x78>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8046802:	0c1b      	lsrs	r3, r3, #16
 8046804:	802b      	strh	r3, [r5, #0]
 8046806:	e7eb      	b.n	80467e0 <SDMMC_CmdSetRelAdd+0x50>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8046808:	045a      	lsls	r2, r3, #17
 804680a:	d40c      	bmi.n	8046826 <SDMMC_CmdSetRelAdd+0x96>
    return SDMMC_ERROR_COM_CRC_FAILED;
 804680c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8046810:	bf0c      	ite	eq
 8046812:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8046816:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 804681a:	e7e1      	b.n	80467e0 <SDMMC_CmdSetRelAdd+0x50>
      return SDMMC_ERROR_TIMEOUT;
 804681c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8046820:	e7de      	b.n	80467e0 <SDMMC_CmdSetRelAdd+0x50>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8046822:	2001      	movs	r0, #1
 8046824:	e7dc      	b.n	80467e0 <SDMMC_CmdSetRelAdd+0x50>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8046826:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 804682a:	e7d9      	b.n	80467e0 <SDMMC_CmdSetRelAdd+0x50>
 804682c:	2000108c 	.word	0x2000108c

08046830 <SDMMC_CmdSendStatus>:
{
 8046830:	b530      	push	{r4, r5, lr}
 8046832:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8046834:	240d      	movs	r4, #13
 8046836:	2340      	movs	r3, #64	; 0x40
{
 8046838:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 804683a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 804683c:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8046840:	2200      	movs	r2, #0
 8046842:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8046846:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8046848:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 804684c:	f7ff fdd8 	bl	8046400 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8046850:	f241 3288 	movw	r2, #5000	; 0x1388
 8046854:	4621      	mov	r1, r4
 8046856:	4628      	mov	r0, r5
 8046858:	f7ff fd14 	bl	8046284 <SDMMC_GetCmdResp1>
}
 804685c:	b007      	add	sp, #28
 804685e:	bd30      	pop	{r4, r5, pc}

08046860 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8046860:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8046862:	4b0f      	ldr	r3, [pc, #60]	; (80468a0 <FATFS_LinkDriverEx+0x40>)
 8046864:	7a5d      	ldrb	r5, [r3, #9]
 8046866:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 804686a:	b9b5      	cbnz	r5, 804689a <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 804686c:	7a5d      	ldrb	r5, [r3, #9]
 804686e:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8046870:	7a5d      	ldrb	r5, [r3, #9]
 8046872:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8046876:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8046878:	7a58      	ldrb	r0, [r3, #9]
 804687a:	4418      	add	r0, r3
 804687c:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 804687e:	7a5a      	ldrb	r2, [r3, #9]
 8046880:	b2d2      	uxtb	r2, r2
 8046882:	1c50      	adds	r0, r2, #1
 8046884:	b2c0      	uxtb	r0, r0
 8046886:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8046888:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 804688a:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 804688c:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 804688e:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8046890:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8046892:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8046894:	70cc      	strb	r4, [r1, #3]
 8046896:	4620      	mov	r0, r4
    ret = 0;
  }

  return ret;
}
 8046898:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 804689a:	2001      	movs	r0, #1
 804689c:	e7fc      	b.n	8046898 <FATFS_LinkDriverEx+0x38>
 804689e:	bf00      	nop
 80468a0:	20009d48 	.word	0x20009d48

080468a4 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 80468a4:	2200      	movs	r2, #0
 80468a6:	f7ff bfdb 	b.w	8046860 <FATFS_LinkDriverEx>

080468aa <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 80468aa:	780a      	ldrb	r2, [r1, #0]
 80468ac:	7803      	ldrb	r3, [r0, #0]
 80468ae:	4053      	eors	r3, r2
 80468b0:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 80468b2:	784a      	ldrb	r2, [r1, #1]
 80468b4:	7843      	ldrb	r3, [r0, #1]
 80468b6:	4053      	eors	r3, r2
 80468b8:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 80468ba:	788a      	ldrb	r2, [r1, #2]
 80468bc:	7883      	ldrb	r3, [r0, #2]
 80468be:	4053      	eors	r3, r2
 80468c0:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 80468c2:	78ca      	ldrb	r2, [r1, #3]
 80468c4:	78c3      	ldrb	r3, [r0, #3]
 80468c6:	4053      	eors	r3, r2
 80468c8:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 80468ca:	790a      	ldrb	r2, [r1, #4]
 80468cc:	7903      	ldrb	r3, [r0, #4]
 80468ce:	4053      	eors	r3, r2
 80468d0:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 80468d2:	794a      	ldrb	r2, [r1, #5]
 80468d4:	7943      	ldrb	r3, [r0, #5]
 80468d6:	4053      	eors	r3, r2
 80468d8:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 80468da:	798a      	ldrb	r2, [r1, #6]
 80468dc:	7983      	ldrb	r3, [r0, #6]
 80468de:	4053      	eors	r3, r2
 80468e0:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 80468e2:	79ca      	ldrb	r2, [r1, #7]
 80468e4:	79c3      	ldrb	r3, [r0, #7]
 80468e6:	4053      	eors	r3, r2
 80468e8:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 80468ea:	7a0a      	ldrb	r2, [r1, #8]
 80468ec:	7a03      	ldrb	r3, [r0, #8]
 80468ee:	4053      	eors	r3, r2
 80468f0:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 80468f2:	7a4a      	ldrb	r2, [r1, #9]
 80468f4:	7a43      	ldrb	r3, [r0, #9]
 80468f6:	4053      	eors	r3, r2
 80468f8:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 80468fa:	7a8a      	ldrb	r2, [r1, #10]
 80468fc:	7a83      	ldrb	r3, [r0, #10]
 80468fe:	4053      	eors	r3, r2
 8046900:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8046902:	7aca      	ldrb	r2, [r1, #11]
 8046904:	7ac3      	ldrb	r3, [r0, #11]
 8046906:	4053      	eors	r3, r2
 8046908:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 804690a:	7b0a      	ldrb	r2, [r1, #12]
 804690c:	7b03      	ldrb	r3, [r0, #12]
 804690e:	4053      	eors	r3, r2
 8046910:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 8046912:	7b4a      	ldrb	r2, [r1, #13]
 8046914:	7b43      	ldrb	r3, [r0, #13]
 8046916:	4053      	eors	r3, r2
 8046918:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 804691a:	7b8a      	ldrb	r2, [r1, #14]
 804691c:	7b83      	ldrb	r3, [r0, #14]
 804691e:	4053      	eors	r3, r2
 8046920:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8046922:	7bca      	ldrb	r2, [r1, #15]
 8046924:	7bc3      	ldrb	r3, [r0, #15]
 8046926:	4053      	eors	r3, r2
 8046928:	73c3      	strb	r3, [r0, #15]
#endif
}
 804692a:	4770      	bx	lr

0804692c <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 804692c:	b510      	push	{r4, lr}
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 804692e:	780b      	ldrb	r3, [r1, #0]
 8046930:	7814      	ldrb	r4, [r2, #0]
 8046932:	4063      	eors	r3, r4
 8046934:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8046936:	7854      	ldrb	r4, [r2, #1]
 8046938:	784b      	ldrb	r3, [r1, #1]
 804693a:	4063      	eors	r3, r4
 804693c:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 804693e:	7894      	ldrb	r4, [r2, #2]
 8046940:	788b      	ldrb	r3, [r1, #2]
 8046942:	4063      	eors	r3, r4
 8046944:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8046946:	78d4      	ldrb	r4, [r2, #3]
 8046948:	78cb      	ldrb	r3, [r1, #3]
 804694a:	4063      	eors	r3, r4
 804694c:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 804694e:	7914      	ldrb	r4, [r2, #4]
 8046950:	790b      	ldrb	r3, [r1, #4]
 8046952:	4063      	eors	r3, r4
 8046954:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 8046956:	7954      	ldrb	r4, [r2, #5]
 8046958:	794b      	ldrb	r3, [r1, #5]
 804695a:	4063      	eors	r3, r4
 804695c:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 804695e:	7994      	ldrb	r4, [r2, #6]
 8046960:	798b      	ldrb	r3, [r1, #6]
 8046962:	4063      	eors	r3, r4
 8046964:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8046966:	79d4      	ldrb	r4, [r2, #7]
 8046968:	79cb      	ldrb	r3, [r1, #7]
 804696a:	4063      	eors	r3, r4
 804696c:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 804696e:	7a14      	ldrb	r4, [r2, #8]
 8046970:	7a0b      	ldrb	r3, [r1, #8]
 8046972:	4063      	eors	r3, r4
 8046974:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8046976:	7a54      	ldrb	r4, [r2, #9]
 8046978:	7a4b      	ldrb	r3, [r1, #9]
 804697a:	4063      	eors	r3, r4
 804697c:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 804697e:	7a8b      	ldrb	r3, [r1, #10]
 8046980:	7a94      	ldrb	r4, [r2, #10]
 8046982:	4063      	eors	r3, r4
 8046984:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 8046986:	7ad4      	ldrb	r4, [r2, #11]
 8046988:	7acb      	ldrb	r3, [r1, #11]
 804698a:	4063      	eors	r3, r4
 804698c:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 804698e:	7b14      	ldrb	r4, [r2, #12]
 8046990:	7b0b      	ldrb	r3, [r1, #12]
 8046992:	4063      	eors	r3, r4
 8046994:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 8046996:	7b54      	ldrb	r4, [r2, #13]
 8046998:	7b4b      	ldrb	r3, [r1, #13]
 804699a:	4063      	eors	r3, r4
 804699c:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 804699e:	7b94      	ldrb	r4, [r2, #14]
 80469a0:	7b8b      	ldrb	r3, [r1, #14]
 80469a2:	4063      	eors	r3, r4
 80469a4:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 80469a6:	7bcb      	ldrb	r3, [r1, #15]
 80469a8:	7bd2      	ldrb	r2, [r2, #15]
 80469aa:	4053      	eors	r3, r2
 80469ac:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 80469ae:	bd10      	pop	{r4, pc}

080469b0 <aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type aes_set_key( const uint8_t key[], length_type keylen, aes_context ctx[1] )
{
 80469b0:	f1a1 0310 	sub.w	r3, r1, #16
 80469b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80469b8:	b2dc      	uxtb	r4, r3
 80469ba:	2c10      	cmp	r4, #16
 80469bc:	d806      	bhi.n	80469cc <aes_set_key+0x1c>
 80469be:	2301      	movs	r3, #1
 80469c0:	40a3      	lsls	r3, r4
 80469c2:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80469c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80469ca:	b92b      	cbnz	r3, 80469d8 <aes_set_key+0x28>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 80469cc:	2300      	movs	r3, #0
 80469ce:	f882 30f0 	strb.w	r3, [r2, #240]	; 0xf0
        return ( uint8_t )-1;
 80469d2:	20ff      	movs	r0, #255	; 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 80469d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80469d8:	1e53      	subs	r3, r2, #1
 80469da:	1844      	adds	r4, r0, r1
    while( nn-- )
 80469dc:	42a0      	cmp	r0, r4
 80469de:	d150      	bne.n	8046a82 <aes_set_key+0xd2>
    hi = (keylen + 28) << 2;
 80469e0:	f101 0e1c 	add.w	lr, r1, #28
 80469e4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80469e8:	fa5f fe8e 	uxtb.w	lr, lr
    ctx->rnd = (hi >> 4) - 1;
 80469ec:	ea4f 131e 	mov.w	r3, lr, lsr #4
 80469f0:	3b01      	subs	r3, #1
            t0 = s_box(t0);
 80469f2:	4c2c      	ldr	r4, [pc, #176]	; (8046aa4 <aes_set_key+0xf4>)
    ctx->rnd = (hi >> 4) - 1;
 80469f4:	f882 30f0 	strb.w	r3, [r2, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80469f8:	f04f 0901 	mov.w	r9, #1
    ctx->rnd = (hi >> 4) - 1;
 80469fc:	460b      	mov	r3, r1
        t0 = ctx->ksch[cc - 4];
 80469fe:	18d5      	adds	r5, r2, r3
        if( cc % keylen == 0 )
 8046a00:	fbb3 f0f1 	udiv	r0, r3, r1
 8046a04:	fb01 3010 	mls	r0, r1, r0, r3
 8046a08:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
        t0 = ctx->ksch[cc - 4];
 8046a0c:	f815 ac04 	ldrb.w	sl, [r5, #-4]
        t1 = ctx->ksch[cc - 3];
 8046a10:	f815 cc03 	ldrb.w	ip, [r5, #-3]
        t2 = ctx->ksch[cc - 2];
 8046a14:	f815 7c02 	ldrb.w	r7, [r5, #-2]
        t3 = ctx->ksch[cc - 1];
 8046a18:	f815 6c01 	ldrb.w	r6, [r5, #-1]
        if( cc % keylen == 0 )
 8046a1c:	d136      	bne.n	8046a8c <aes_set_key+0xdc>
            rc = f2(rc);
 8046a1e:	ea4f 10d9 	mov.w	r0, r9, lsr #7
            t0 = s_box(t1) ^ rc;
 8046a22:	f814 800c 	ldrb.w	r8, [r4, ip]
            t1 = s_box(t2);
 8046a26:	f814 c007 	ldrb.w	ip, [r4, r7]
            t2 = s_box(t3);
 8046a2a:	5da7      	ldrb	r7, [r4, r6]
            t3 = s_box(tt);
 8046a2c:	f814 600a 	ldrb.w	r6, [r4, sl]
            rc = f2(rc);
 8046a30:	ea4f 0a40 	mov.w	sl, r0, lsl #1
 8046a34:	4450      	add	r0, sl
 8046a36:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
            t0 = s_box(t1) ^ rc;
 8046a3a:	ea89 0808 	eor.w	r8, r9, r8
            rc = f2(rc);
 8046a3e:	ea80 0049 	eor.w	r0, r0, r9, lsl #1
 8046a42:	fa5f f980 	uxtb.w	r9, r0
            t0 = s_box(t1) ^ rc;
 8046a46:	46c2      	mov	sl, r8
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8046a48:	1a58      	subs	r0, r3, r1
 8046a4a:	b2c0      	uxtb	r0, r0
 8046a4c:	f812 8000 	ldrb.w	r8, [r2, r0]
 8046a50:	ea8a 0a08 	eor.w	sl, sl, r8
 8046a54:	f802 a003 	strb.w	sl, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8046a58:	4410      	add	r0, r2
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8046a5a:	3304      	adds	r3, #4
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8046a5c:	f890 8001 	ldrb.w	r8, [r0, #1]
 8046a60:	ea8c 0c08 	eor.w	ip, ip, r8
 8046a64:	f885 c001 	strb.w	ip, [r5, #1]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8046a68:	f890 c002 	ldrb.w	ip, [r0, #2]
 8046a6c:	ea87 070c 	eor.w	r7, r7, ip
 8046a70:	70af      	strb	r7, [r5, #2]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8046a72:	78c0      	ldrb	r0, [r0, #3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8046a74:	b2db      	uxtb	r3, r3
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8046a76:	4046      	eors	r6, r0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8046a78:	459e      	cmp	lr, r3
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8046a7a:	70ee      	strb	r6, [r5, #3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8046a7c:	d8bf      	bhi.n	80469fe <aes_set_key+0x4e>
    return 0;
 8046a7e:	2000      	movs	r0, #0
 8046a80:	e7a8      	b.n	80469d4 <aes_set_key+0x24>
        *d++ = *s++;
 8046a82:	f810 5b01 	ldrb.w	r5, [r0], #1
 8046a86:	f803 5f01 	strb.w	r5, [r3, #1]!
 8046a8a:	e7a7      	b.n	80469dc <aes_set_key+0x2c>
        else if( keylen > 24 && cc % keylen == 16 )
 8046a8c:	2918      	cmp	r1, #24
 8046a8e:	d9db      	bls.n	8046a48 <aes_set_key+0x98>
 8046a90:	2810      	cmp	r0, #16
            t0 = s_box(t0);
 8046a92:	bf01      	itttt	eq
 8046a94:	f814 a00a 	ldrbeq.w	sl, [r4, sl]
            t1 = s_box(t1);
 8046a98:	f814 c00c 	ldrbeq.w	ip, [r4, ip]
            t2 = s_box(t2);
 8046a9c:	5de7      	ldrbeq	r7, [r4, r7]
            t3 = s_box(t3);
 8046a9e:	5da6      	ldrbeq	r6, [r4, r6]
 8046aa0:	e7d2      	b.n	8046a48 <aes_set_key+0x98>
 8046aa2:	bf00      	nop
 8046aa4:	0804f060 	.word	0x0804f060

08046aa8 <aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const aes_context ctx[1] )
{
 8046aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8046aac:	b09f      	sub	sp, #124	; 0x7c
    if( ctx->rnd )
 8046aae:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
{
 8046ab2:	9118      	str	r1, [sp, #96]	; 0x60
 8046ab4:	920a      	str	r2, [sp, #40]	; 0x28
    if( ctx->rnd )
 8046ab6:	2b00      	cmp	r3, #0
 8046ab8:	f000 8168 	beq.w	8046d8c <aes_encrypt+0x2e4>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 8046abc:	ad1a      	add	r5, sp, #104	; 0x68
 8046abe:	4601      	mov	r1, r0
 8046ac0:	4cb3      	ldr	r4, [pc, #716]	; (8046d90 <aes_encrypt+0x2e8>)
 8046ac2:	4628      	mov	r0, r5
 8046ac4:	f7ff ff32 	bl	804692c <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 8046ac8:	f04f 0b01 	mov.w	fp, #1
    xor_block(d, k);
 8046acc:	9519      	str	r5, [sp, #100]	; 0x64
 8046ace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8046ad0:	f89d c068 	ldrb.w	ip, [sp, #104]	; 0x68
 8046ad4:	f89d 706d 	ldrb.w	r7, [sp, #109]	; 0x6d
 8046ad8:	f89d 8072 	ldrb.w	r8, [sp, #114]	; 0x72
 8046adc:	f89d e077 	ldrb.w	lr, [sp, #119]	; 0x77
 8046ae0:	f814 5008 	ldrb.w	r5, [r4, r8]
 8046ae4:	f814 100e 	ldrb.w	r1, [r4, lr]
 8046ae8:	f814 200c 	ldrb.w	r2, [r4, ip]
 8046aec:	f814 a007 	ldrb.w	sl, [r4, r7]
 8046af0:	eb03 130b 	add.w	r3, r3, fp, lsl #4
 8046af4:	930b      	str	r3, [sp, #44]	; 0x2c
 8046af6:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8046afa:	930c      	str	r3, [sp, #48]	; 0x30
 8046afc:	f89d 3071 	ldrb.w	r3, [sp, #113]	; 0x71
 8046b00:	930d      	str	r3, [sp, #52]	; 0x34
 8046b02:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8046b04:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8046b08:	5da6      	ldrb	r6, [r4, r6]
 8046b0a:	930e      	str	r3, [sp, #56]	; 0x38
 8046b0c:	5ce3      	ldrb	r3, [r4, r3]
 8046b0e:	9300      	str	r3, [sp, #0]
 8046b10:	9601      	str	r6, [sp, #4]
 8046b12:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8046b16:	f89d 6070 	ldrb.w	r6, [sp, #112]	; 0x70
 8046b1a:	9610      	str	r6, [sp, #64]	; 0x40
 8046b1c:	f89d 6075 	ldrb.w	r6, [sp, #117]	; 0x75
 8046b20:	930f      	str	r3, [sp, #60]	; 0x3c
 8046b22:	5ce0      	ldrb	r0, [r4, r3]
 8046b24:	9611      	str	r6, [sp, #68]	; 0x44
 8046b26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8046b28:	f89d 606a 	ldrb.w	r6, [sp, #106]	; 0x6a
 8046b2c:	5ce3      	ldrb	r3, [r4, r3]
 8046b2e:	9612      	str	r6, [sp, #72]	; 0x48
 8046b30:	5da6      	ldrb	r6, [r4, r6]
 8046b32:	9602      	str	r6, [sp, #8]
 8046b34:	f89d 606f 	ldrb.w	r6, [sp, #111]	; 0x6f
 8046b38:	9613      	str	r6, [sp, #76]	; 0x4c
 8046b3a:	5da6      	ldrb	r6, [r4, r6]
 8046b3c:	9603      	str	r6, [sp, #12]
 8046b3e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8046b40:	5da6      	ldrb	r6, [r4, r6]
 8046b42:	9604      	str	r6, [sp, #16]
 8046b44:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8046b46:	5da6      	ldrb	r6, [r4, r6]
 8046b48:	9605      	str	r6, [sp, #20]
 8046b4a:	f89d 6074 	ldrb.w	r6, [sp, #116]	; 0x74
 8046b4e:	9614      	str	r6, [sp, #80]	; 0x50
 8046b50:	f89d 6069 	ldrb.w	r6, [sp, #105]	; 0x69
 8046b54:	9615      	str	r6, [sp, #84]	; 0x54
 8046b56:	f89d 606e 	ldrb.w	r6, [sp, #110]	; 0x6e
 8046b5a:	9616      	str	r6, [sp, #88]	; 0x58
 8046b5c:	5da6      	ldrb	r6, [r4, r6]
 8046b5e:	9606      	str	r6, [sp, #24]
 8046b60:	f89d 6073 	ldrb.w	r6, [sp, #115]	; 0x73
 8046b64:	9617      	str	r6, [sp, #92]	; 0x5c
 8046b66:	5da6      	ldrb	r6, [r4, r6]
 8046b68:	9607      	str	r6, [sp, #28]
 8046b6a:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8046b6c:	5da6      	ldrb	r6, [r4, r6]
 8046b6e:	9608      	str	r6, [sp, #32]
 8046b70:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8046b72:	5da6      	ldrb	r6, [r4, r6]
 8046b74:	9609      	str	r6, [sp, #36]	; 0x24
        for( r = 1 ; r < ctx->rnd ; ++r )
 8046b76:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8046b78:	f896 90f0 	ldrb.w	r9, [r6, #240]	; 0xf0
 8046b7c:	45d9      	cmp	r9, fp
 8046b7e:	d832      	bhi.n	8046be6 <aes_encrypt+0x13e>
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8046b80:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8046b84:	9b04      	ldr	r3, [sp, #16]
 8046b86:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8046b8a:	9b08      	ldr	r3, [sp, #32]
 8046b8c:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8046b90:	9b01      	ldr	r3, [sp, #4]
 8046b92:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8046b96:	9b05      	ldr	r3, [sp, #20]
 8046b98:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
 8046b9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8046b9e:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 8046ba2:	9b02      	ldr	r3, [sp, #8]
 8046ba4:	f88d 3072 	strb.w	r3, [sp, #114]	; 0x72
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8046ba8:	9b00      	ldr	r3, [sp, #0]
 8046baa:	f88d 306e 	strb.w	r3, [sp, #110]	; 0x6e
 8046bae:	9b06      	ldr	r3, [sp, #24]
 8046bb0:	f88d 3076 	strb.w	r3, [sp, #118]	; 0x76
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8046bb4:	9b07      	ldr	r3, [sp, #28]
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8046bb6:	f88d 2068 	strb.w	r2, [sp, #104]	; 0x68
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8046bba:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8046bbe:	f88d 006f 	strb.w	r0, [sp, #111]	; 0x6f
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8046bc2:	9b03      	ldr	r3, [sp, #12]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8046bc4:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8046bc8:	9818      	ldr	r0, [sp, #96]	; 0x60
 8046bca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8046bcc:	f88d a069 	strb.w	sl, [sp, #105]	; 0x69
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8046bd0:	a91a      	add	r1, sp, #104	; 0x68
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 8046bd2:	f88d 506a 	strb.w	r5, [sp, #106]	; 0x6a
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8046bd6:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8046bda:	f7ff fea7 	bl	804692c <copy_and_key>
 8046bde:	2000      	movs	r0, #0
    }
    else
        return ( uint8_t )-1;
    return 0;
}
 8046be0:	b01f      	add	sp, #124	; 0x7c
 8046be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8046be6:	44a4      	add	ip, r4
 8046be8:	4427      	add	r7, r4
 8046bea:	f89c 6100 	ldrb.w	r6, [ip, #256]	; 0x100
 8046bee:	ea85 0901 	eor.w	r9, r5, r1
 8046bf2:	ea86 0909 	eor.w	r9, r6, r9
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8046bf6:	44a0      	add	r8, r4
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8046bf8:	f897 6200 	ldrb.w	r6, [r7, #512]	; 0x200
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8046bfc:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
 8046c00:	4051      	eors	r1, r2
 8046c02:	4079      	eors	r1, r7
 8046c04:	f898 7200 	ldrb.w	r7, [r8, #512]	; 0x200
 8046c08:	4079      	eors	r1, r7
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8046c0a:	44a6      	add	lr, r4
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8046c0c:	f88d 1069 	strb.w	r1, [sp, #105]	; 0x69
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8046c10:	f898 1100 	ldrb.w	r1, [r8, #256]	; 0x100
 8046c14:	ea82 020a 	eor.w	r2, r2, sl
 8046c18:	404a      	eors	r2, r1
 8046c1a:	f89e 1200 	ldrb.w	r1, [lr, #512]	; 0x200
 8046c1e:	404a      	eors	r2, r1
 8046c20:	f88d 206a 	strb.w	r2, [sp, #106]	; 0x6a
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8046c24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8046c26:	4422      	add	r2, r4
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8046c28:	ea89 0906 	eor.w	r9, r9, r6
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8046c2c:	4616      	mov	r6, r2
 8046c2e:	9a00      	ldr	r2, [sp, #0]
 8046c30:	f896 1100 	ldrb.w	r1, [r6, #256]	; 0x100
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8046c34:	f88d 9068 	strb.w	r9, [sp, #104]	; 0x68
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8046c38:	ea85 050a 	eor.w	r5, r5, sl
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8046c3c:	4042      	eors	r2, r0
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8046c3e:	f89c a200 	ldrb.w	sl, [ip, #512]	; 0x200
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8046c42:	404a      	eors	r2, r1
 8046c44:	990d      	ldr	r1, [sp, #52]	; 0x34
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8046c46:	ea8a 0505 	eor.w	r5, sl, r5
 8046c4a:	f89e a100 	ldrb.w	sl, [lr, #256]	; 0x100
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8046c4e:	4421      	add	r1, r4
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8046c50:	ea85 050a 	eor.w	r5, r5, sl
 8046c54:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8046c58:	f891 5200 	ldrb.w	r5, [r1, #512]	; 0x200
 8046c5c:	406a      	eors	r2, r5
 8046c5e:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8046c62:	f891 2100 	ldrb.w	r2, [r1, #256]	; 0x100
 8046c66:	4058      	eors	r0, r3
 8046c68:	4050      	eors	r0, r2
 8046c6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8046c6c:	4422      	add	r2, r4
 8046c6e:	f892 1200 	ldrb.w	r1, [r2, #512]	; 0x200
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8046c72:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8046c76:	4048      	eors	r0, r1
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8046c78:	9901      	ldr	r1, [sp, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8046c7a:	f88d 006d 	strb.w	r0, [sp, #109]	; 0x6d
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8046c7e:	404b      	eors	r3, r1
 8046c80:	4053      	eors	r3, r2
 8046c82:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8046c84:	4422      	add	r2, r4
 8046c86:	f892 1200 	ldrb.w	r1, [r2, #512]	; 0x200
 8046c8a:	404b      	eors	r3, r1
 8046c8c:	f88d 306e 	strb.w	r3, [sp, #110]	; 0x6e
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8046c90:	e9dd 3100 	ldrd	r3, r1, [sp]
 8046c94:	404b      	eors	r3, r1
 8046c96:	f896 1200 	ldrb.w	r1, [r6, #512]	; 0x200
 8046c9a:	404b      	eors	r3, r1
 8046c9c:	f892 1100 	ldrb.w	r1, [r2, #256]	; 0x100
 8046ca0:	404b      	eors	r3, r1
 8046ca2:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8046ca6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8046ca8:	4423      	add	r3, r4
 8046caa:	461a      	mov	r2, r3
 8046cac:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
 8046cb0:	404b      	eors	r3, r1
 8046cb2:	f892 1100 	ldrb.w	r1, [r2, #256]	; 0x100
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8046cb6:	f892 2200 	ldrb.w	r2, [r2, #512]	; 0x200
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8046cba:	404b      	eors	r3, r1
 8046cbc:	9911      	ldr	r1, [sp, #68]	; 0x44
 8046cbe:	4421      	add	r1, r4
 8046cc0:	f891 0200 	ldrb.w	r0, [r1, #512]	; 0x200
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8046cc4:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8046cc8:	4043      	eors	r3, r0
 8046cca:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8046cce:	e9dd 3003 	ldrd	r3, r0, [sp, #12]
 8046cd2:	4043      	eors	r3, r0
 8046cd4:	404b      	eors	r3, r1
 8046cd6:	9912      	ldr	r1, [sp, #72]	; 0x48
 8046cd8:	4421      	add	r1, r4
 8046cda:	f891 0200 	ldrb.w	r0, [r1, #512]	; 0x200
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8046cde:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8046ce2:	4043      	eors	r3, r0
 8046ce4:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8046ce8:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
 8046cec:	4043      	eors	r3, r0
 8046cee:	404b      	eors	r3, r1
 8046cf0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8046cf2:	4421      	add	r1, r4
 8046cf4:	f891 0200 	ldrb.w	r0, [r1, #512]	; 0x200
 8046cf8:	4043      	eors	r3, r0
 8046cfa:	f88d 3072 	strb.w	r3, [sp, #114]	; 0x72
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8046cfe:	9805      	ldr	r0, [sp, #20]
 8046d00:	9b02      	ldr	r3, [sp, #8]
 8046d02:	4043      	eors	r3, r0
 8046d04:	4053      	eors	r3, r2
 8046d06:	f891 2100 	ldrb.w	r2, [r1, #256]	; 0x100
 8046d0a:	4053      	eors	r3, r2
 8046d0c:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8046d10:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8046d12:	4423      	add	r3, r4
 8046d14:	461a      	mov	r2, r3
 8046d16:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
 8046d1a:	404b      	eors	r3, r1
 8046d1c:	f892 1100 	ldrb.w	r1, [r2, #256]	; 0x100
 8046d20:	404b      	eors	r3, r1
 8046d22:	9915      	ldr	r1, [sp, #84]	; 0x54
 8046d24:	4421      	add	r1, r4
 8046d26:	f891 0200 	ldrb.w	r0, [r1, #512]	; 0x200
 8046d2a:	4043      	eors	r3, r0
 8046d2c:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8046d30:	e9dd 3007 	ldrd	r3, r0, [sp, #28]
 8046d34:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8046d38:	f892 2200 	ldrb.w	r2, [r2, #512]	; 0x200
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8046d3c:	4043      	eors	r3, r0
 8046d3e:	404b      	eors	r3, r1
 8046d40:	9916      	ldr	r1, [sp, #88]	; 0x58
 8046d42:	4421      	add	r1, r4
 8046d44:	f891 0200 	ldrb.w	r0, [r1, #512]	; 0x200
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8046d48:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8046d4c:	4043      	eors	r3, r0
 8046d4e:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8046d52:	e9dd 3008 	ldrd	r3, r0, [sp, #32]
 8046d56:	4043      	eors	r3, r0
 8046d58:	404b      	eors	r3, r1
 8046d5a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8046d5c:	4421      	add	r1, r4
 8046d5e:	f891 0200 	ldrb.w	r0, [r1, #512]	; 0x200
 8046d62:	4043      	eors	r3, r0
 8046d64:	f88d 3076 	strb.w	r3, [sp, #118]	; 0x76
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8046d68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8046d6a:	9b06      	ldr	r3, [sp, #24]
 8046d6c:	4043      	eors	r3, r0
 8046d6e:	4053      	eors	r3, r2
 8046d70:	f891 2100 	ldrb.w	r2, [r1, #256]	; 0x100
    xor_block(d, k);
 8046d74:	9819      	ldr	r0, [sp, #100]	; 0x64
 8046d76:	990b      	ldr	r1, [sp, #44]	; 0x2c
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8046d78:	4053      	eors	r3, r2
 8046d7a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
    xor_block(d, k);
 8046d7e:	f7ff fd94 	bl	80468aa <xor_block>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8046d82:	f10b 0301 	add.w	r3, fp, #1
 8046d86:	fa5f fb83 	uxtb.w	fp, r3
 8046d8a:	e6a0      	b.n	8046ace <aes_encrypt+0x26>
        return ( uint8_t )-1;
 8046d8c:	20ff      	movs	r0, #255	; 0xff
 8046d8e:	e727      	b.n	8046be0 <aes_encrypt+0x138>
 8046d90:	0804f060 	.word	0x0804f060

08046d94 <AES_CMAC_Init>:
        }                          \
    } while (0) \


void AES_CMAC_Init(AES_CMAC_CTX *ctx)
{
 8046d94:	b510      	push	{r4, lr}
            memset1(ctx->X, 0, sizeof ctx->X);
 8046d96:	2210      	movs	r2, #16
{
 8046d98:	4604      	mov	r4, r0
            memset1(ctx->X, 0, sizeof ctx->X);
 8046d9a:	2100      	movs	r1, #0
 8046d9c:	30f1      	adds	r0, #241	; 0xf1
 8046d9e:	f004 fe28 	bl	804b9f2 <memset1>
            ctx->M_n = 0;
 8046da2:	2100      	movs	r1, #0
 8046da4:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
        memset1(ctx->rijndael.ksch, '\0', 240);
 8046da8:	4620      	mov	r0, r4
 8046daa:	22f0      	movs	r2, #240	; 0xf0
}
 8046dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        memset1(ctx->rijndael.ksch, '\0', 240);
 8046db0:	f004 be1f 	b.w	804b9f2 <memset1>

08046db4 <AES_CMAC_SetKey>:
    
void AES_CMAC_SetKey(AES_CMAC_CTX *ctx, const uint8_t key[AES_CMAC_KEY_LENGTH])
{
 8046db4:	460b      	mov	r3, r1
           //rijndael_set_key_enc_only(&ctx->rijndael, key, 128);
       aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael);
 8046db6:	4602      	mov	r2, r0
 8046db8:	2110      	movs	r1, #16
 8046dba:	4618      	mov	r0, r3
 8046dbc:	f7ff bdf8 	b.w	80469b0 <aes_set_key>

08046dc0 <AES_CMAC_Update>:
}
    
void AES_CMAC_Update(AES_CMAC_CTX *ctx, const uint8_t *data, uint32_t len)
{
 8046dc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8046dc4:	4604      	mov	r4, r0
            uint32_t mlen;
        uint8_t in[16];
    
            if (ctx->M_n > 0) {
 8046dc6:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
{
 8046dca:	b085      	sub	sp, #20
 8046dcc:	460e      	mov	r6, r1
 8046dce:	4615      	mov	r5, r2
 8046dd0:	f204 1801 	addw	r8, r4, #257	; 0x101
            if (ctx->M_n > 0) {
 8046dd4:	b310      	cbz	r0, 8046e1c <AES_CMAC_Update+0x5c>
                  mlen = MIN(16 - ctx->M_n, len);
 8046dd6:	f1c0 0910 	rsb	r9, r0, #16
 8046dda:	4591      	cmp	r9, r2
 8046ddc:	464f      	mov	r7, r9
 8046dde:	bf28      	it	cs
 8046de0:	4617      	movcs	r7, r2
                    memcpy1(ctx->M_last + ctx->M_n, data, mlen);
 8046de2:	b2ba      	uxth	r2, r7
 8046de4:	4440      	add	r0, r8
 8046de6:	f004 fdf0 	bl	804b9ca <memcpy1>
                    ctx->M_n += mlen;
 8046dea:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8046dee:	443b      	add	r3, r7
                    if (ctx->M_n < 16 || len == mlen)
 8046df0:	2b0f      	cmp	r3, #15
                    ctx->M_n += mlen;
 8046df2:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
                    if (ctx->M_n < 16 || len == mlen)
 8046df6:	d91c      	bls.n	8046e32 <AES_CMAC_Update+0x72>
 8046df8:	45a9      	cmp	r9, r5
 8046dfa:	d21a      	bcs.n	8046e32 <AES_CMAC_Update+0x72>
 8046dfc:	f104 03f1 	add.w	r3, r4, #241	; 0xf1
 8046e00:	4619      	mov	r1, r3
                            return;
                   XOR(ctx->M_last, ctx->X);
 8046e02:	781a      	ldrb	r2, [r3, #0]
 8046e04:	7c18      	ldrb	r0, [r3, #16]
 8046e06:	4042      	eors	r2, r0
 8046e08:	f803 2b01 	strb.w	r2, [r3], #1
 8046e0c:	4543      	cmp	r3, r8
 8046e0e:	d1f8      	bne.n	8046e02 <AES_CMAC_Update+0x42>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);
            aes_encrypt( ctx->X, ctx->X, &ctx->rijndael);
 8046e10:	4622      	mov	r2, r4
 8046e12:	4608      	mov	r0, r1
 8046e14:	f7ff fe48 	bl	8046aa8 <aes_encrypt>
                    data += mlen;
 8046e18:	443e      	add	r6, r7
                    len -= mlen;
 8046e1a:	1bed      	subs	r5, r5, r7
            while (len > 16) {      /* not last block */

                    XOR(data, ctx->X);
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);

                    memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 8046e1c:	f104 07f1 	add.w	r7, r4, #241	; 0xf1
            while (len > 16) {      /* not last block */
 8046e20:	2d10      	cmp	r5, #16
 8046e22:	d809      	bhi.n	8046e38 <AES_CMAC_Update+0x78>

                    data += 16;
                    len -= 16;
            }
            /* potential last block, save it */
            memcpy1(ctx->M_last, data, len);
 8046e24:	b2aa      	uxth	r2, r5
 8046e26:	4631      	mov	r1, r6
 8046e28:	4640      	mov	r0, r8
 8046e2a:	f004 fdce 	bl	804b9ca <memcpy1>
            ctx->M_n = len;
 8046e2e:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
}
 8046e32:	b005      	add	sp, #20
 8046e34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8046e38:	f104 02f0 	add.w	r2, r4, #240	; 0xf0
 8046e3c:	1e73      	subs	r3, r6, #1
 8046e3e:	f106 000f 	add.w	r0, r6, #15
                    XOR(data, ctx->X);
 8046e42:	f813 cf01 	ldrb.w	ip, [r3, #1]!
 8046e46:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8046e4a:	4283      	cmp	r3, r0
 8046e4c:	ea81 010c 	eor.w	r1, r1, ip
 8046e50:	7011      	strb	r1, [r2, #0]
 8046e52:	d1f6      	bne.n	8046e42 <AES_CMAC_Update+0x82>
                    memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 8046e54:	2210      	movs	r2, #16
 8046e56:	4639      	mov	r1, r7
 8046e58:	4668      	mov	r0, sp
 8046e5a:	f004 fdb6 	bl	804b9ca <memcpy1>
            aes_encrypt( in, in, &ctx->rijndael);
 8046e5e:	4622      	mov	r2, r4
 8046e60:	4669      	mov	r1, sp
 8046e62:	4668      	mov	r0, sp
 8046e64:	f7ff fe20 	bl	8046aa8 <aes_encrypt>
                    memcpy1(&ctx->X[0], in, 16);
 8046e68:	2210      	movs	r2, #16
 8046e6a:	4669      	mov	r1, sp
 8046e6c:	4638      	mov	r0, r7
 8046e6e:	f004 fdac 	bl	804b9ca <memcpy1>
                    data += 16;
 8046e72:	3610      	adds	r6, #16
                    len -= 16;
 8046e74:	3d10      	subs	r5, #16
 8046e76:	e7d3      	b.n	8046e20 <AES_CMAC_Update+0x60>

08046e78 <AES_CMAC_Final>:
   
void AES_CMAC_Final(uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX *ctx)
{
 8046e78:	b570      	push	{r4, r5, r6, lr}
 8046e7a:	b088      	sub	sp, #32
 8046e7c:	460c      	mov	r4, r1
            uint8_t K[16];
        uint8_t in[16];
            /* generate subkey K1 */
            memset1(K, '\0', 16);
 8046e7e:	2210      	movs	r2, #16
 8046e80:	2100      	movs	r1, #0
{
 8046e82:	4605      	mov	r5, r0
            memset1(K, '\0', 16);
 8046e84:	4668      	mov	r0, sp
 8046e86:	f004 fdb4 	bl	804b9f2 <memset1>

            //rijndael_encrypt(&ctx->rijndael, K, K);

            aes_encrypt( K, K, &ctx->rijndael);
 8046e8a:	4622      	mov	r2, r4
 8046e8c:	4669      	mov	r1, sp
 8046e8e:	4668      	mov	r0, sp
 8046e90:	f7ff fe0a 	bl	8046aa8 <aes_encrypt>

            if (K[0] & 0x80) {
 8046e94:	f99d 3000 	ldrsb.w	r3, [sp]
 8046e98:	2b00      	cmp	r3, #0
 8046e9a:	466a      	mov	r2, sp
 8046e9c:	f10d 010f 	add.w	r1, sp, #15
 8046ea0:	da3e      	bge.n	8046f20 <AES_CMAC_Final+0xa8>
                    LSHIFT(K, K);
 8046ea2:	7813      	ldrb	r3, [r2, #0]
 8046ea4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8046ea8:	005b      	lsls	r3, r3, #1
 8046eaa:	b25b      	sxtb	r3, r3
 8046eac:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
 8046eb0:	4291      	cmp	r1, r2
 8046eb2:	f802 3c01 	strb.w	r3, [r2, #-1]
 8046eb6:	d1f4      	bne.n	8046ea2 <AES_CMAC_Final+0x2a>
 8046eb8:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8046ebc:	005b      	lsls	r3, r3, #1
                   K[15] ^= 0x87;
 8046ebe:	f083 0387 	eor.w	r3, r3, #135	; 0x87
            } else
                    LSHIFT(K, K);
 8046ec2:	f88d 300f 	strb.w	r3, [sp, #15]


            if (ctx->M_n == 16) {
 8046ec6:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8046eca:	2b10      	cmp	r3, #16
 8046ecc:	d137      	bne.n	8046f3e <AES_CMAC_Final+0xc6>
 8046ece:	f204 1201 	addw	r2, r4, #257	; 0x101
                    /* last block was a complete block */
                    XOR(K, ctx->M_last);
 8046ed2:	2300      	movs	r3, #0
 8046ed4:	7811      	ldrb	r1, [r2, #0]
 8046ed6:	f81d 0003 	ldrb.w	r0, [sp, r3]
 8046eda:	3301      	adds	r3, #1
 8046edc:	4041      	eors	r1, r0
 8046ede:	2b10      	cmp	r3, #16
 8046ee0:	f802 1b01 	strb.w	r1, [r2], #1
 8046ee4:	d1f6      	bne.n	8046ed4 <AES_CMAC_Final+0x5c>
 8046ee6:	f104 03f1 	add.w	r3, r4, #241	; 0xf1
 8046eea:	f204 1001 	addw	r0, r4, #257	; 0x101
 8046eee:	4619      	mov	r1, r3
   
                  XOR(K, ctx->M_last);


           }
           XOR(ctx->M_last, ctx->X);
 8046ef0:	781a      	ldrb	r2, [r3, #0]
 8046ef2:	7c1e      	ldrb	r6, [r3, #16]
 8046ef4:	4072      	eors	r2, r6
 8046ef6:	f803 2b01 	strb.w	r2, [r3], #1
 8046efa:	4298      	cmp	r0, r3
 8046efc:	d1f8      	bne.n	8046ef0 <AES_CMAC_Final+0x78>

           //rijndael_encrypt(&ctx->rijndael, ctx->X, digest);

       memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 8046efe:	2210      	movs	r2, #16
 8046f00:	eb0d 0002 	add.w	r0, sp, r2
 8046f04:	f004 fd61 	bl	804b9ca <memcpy1>
       aes_encrypt(in, digest, &ctx->rijndael);
 8046f08:	4622      	mov	r2, r4
 8046f0a:	4629      	mov	r1, r5
 8046f0c:	a804      	add	r0, sp, #16
 8046f0e:	f7ff fdcb 	bl	8046aa8 <aes_encrypt>
           memset1(K, 0, sizeof K);
 8046f12:	2210      	movs	r2, #16
 8046f14:	2100      	movs	r1, #0
 8046f16:	4668      	mov	r0, sp
 8046f18:	f004 fd6b 	bl	804b9f2 <memset1>

}
 8046f1c:	b008      	add	sp, #32
 8046f1e:	bd70      	pop	{r4, r5, r6, pc}
                    LSHIFT(K, K);
 8046f20:	7813      	ldrb	r3, [r2, #0]
 8046f22:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8046f26:	005b      	lsls	r3, r3, #1
 8046f28:	b25b      	sxtb	r3, r3
 8046f2a:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
 8046f2e:	428a      	cmp	r2, r1
 8046f30:	f802 3c01 	strb.w	r3, [r2, #-1]
 8046f34:	d1f4      	bne.n	8046f20 <AES_CMAC_Final+0xa8>
 8046f36:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8046f3a:	005b      	lsls	r3, r3, #1
 8046f3c:	e7c1      	b.n	8046ec2 <AES_CMAC_Final+0x4a>
                  if (K[0] & 0x80) {
 8046f3e:	f99d 2000 	ldrsb.w	r2, [sp]
 8046f42:	2a00      	cmp	r2, #0
 8046f44:	4668      	mov	r0, sp
 8046f46:	da28      	bge.n	8046f9a <AES_CMAC_Final+0x122>
                          LSHIFT(K, K);
 8046f48:	7802      	ldrb	r2, [r0, #0]
 8046f4a:	f810 6f01 	ldrb.w	r6, [r0, #1]!
 8046f4e:	0052      	lsls	r2, r2, #1
 8046f50:	b252      	sxtb	r2, r2
 8046f52:	ea42 12d6 	orr.w	r2, r2, r6, lsr #7
 8046f56:	4281      	cmp	r1, r0
 8046f58:	f800 2c01 	strb.w	r2, [r0, #-1]
 8046f5c:	d1f4      	bne.n	8046f48 <AES_CMAC_Final+0xd0>
 8046f5e:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8046f62:	0052      	lsls	r2, r2, #1
                          K[15] ^= 0x87;
 8046f64:	f082 0287 	eor.w	r2, r2, #135	; 0x87
                           LSHIFT(K, K);
 8046f68:	f88d 200f 	strb.w	r2, [sp, #15]
                   ctx->M_last[ctx->M_n] = 0x80;
 8046f6c:	18e2      	adds	r2, r4, r3
 8046f6e:	2180      	movs	r1, #128	; 0x80
 8046f70:	f882 1101 	strb.w	r1, [r2, #257]	; 0x101
 8046f74:	2200      	movs	r2, #0
                   while (++ctx->M_n < 16)
 8046f76:	3301      	adds	r3, #1
 8046f78:	2b0f      	cmp	r3, #15
 8046f7a:	d91d      	bls.n	8046fb8 <AES_CMAC_Final+0x140>
 8046f7c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8046f80:	f204 1201 	addw	r2, r4, #257	; 0x101
                  XOR(K, ctx->M_last);
 8046f84:	2300      	movs	r3, #0
 8046f86:	7811      	ldrb	r1, [r2, #0]
 8046f88:	f81d 0003 	ldrb.w	r0, [sp, r3]
 8046f8c:	3301      	adds	r3, #1
 8046f8e:	4041      	eors	r1, r0
 8046f90:	2b10      	cmp	r3, #16
 8046f92:	f802 1b01 	strb.w	r1, [r2], #1
 8046f96:	d1f6      	bne.n	8046f86 <AES_CMAC_Final+0x10e>
 8046f98:	e7a5      	b.n	8046ee6 <AES_CMAC_Final+0x6e>
                           LSHIFT(K, K);
 8046f9a:	7802      	ldrb	r2, [r0, #0]
 8046f9c:	f810 6f01 	ldrb.w	r6, [r0, #1]!
 8046fa0:	0052      	lsls	r2, r2, #1
 8046fa2:	b252      	sxtb	r2, r2
 8046fa4:	ea42 12d6 	orr.w	r2, r2, r6, lsr #7
 8046fa8:	4281      	cmp	r1, r0
 8046faa:	f800 2c01 	strb.w	r2, [r0, #-1]
 8046fae:	d1f4      	bne.n	8046f9a <AES_CMAC_Final+0x122>
 8046fb0:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8046fb4:	0052      	lsls	r2, r2, #1
 8046fb6:	e7d7      	b.n	8046f68 <AES_CMAC_Final+0xf0>
                         ctx->M_last[ctx->M_n] = 0;
 8046fb8:	18e1      	adds	r1, r4, r3
 8046fba:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 8046fbe:	e7da      	b.n	8046f76 <AES_CMAC_Final+0xfe>

08046fc0 <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 8046fc0:	b530      	push	{r4, r5, lr}
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
    {
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 8046fc2:	4a0a      	ldr	r2, [pc, #40]	; (8046fec <GetKeyByID+0x2c>)
{
 8046fc4:	2300      	movs	r3, #0
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 8046fc6:	eb03 1403 	add.w	r4, r3, r3, lsl #4
 8046fca:	1915      	adds	r5, r2, r4
 8046fcc:	f895 522c 	ldrb.w	r5, [r5, #556]	; 0x22c
 8046fd0:	4285      	cmp	r5, r0
 8046fd2:	d105      	bne.n	8046fe0 <GetKeyByID+0x20>
        {
            *keyItem = &( SeNvmCtx.KeyList[i] );
 8046fd4:	f504 740b 	add.w	r4, r4, #556	; 0x22c
 8046fd8:	4422      	add	r2, r4
 8046fda:	600a      	str	r2, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 8046fdc:	2000      	movs	r0, #0
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
}
 8046fde:	bd30      	pop	{r4, r5, pc}
 8046fe0:	3301      	adds	r3, #1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8046fe2:	2b18      	cmp	r3, #24
 8046fe4:	d1ef      	bne.n	8046fc6 <GetKeyByID+0x6>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8046fe6:	2003      	movs	r0, #3
 8046fe8:	e7f9      	b.n	8046fde <GetKeyByID+0x1e>
 8046fea:	bf00      	nop
 8046fec:	20009d54 	.word	0x20009d54

08046ff0 <ComputeCmac.part.0>:
 * \param[IN]  size           - Data buffer size
 * \param[IN]  keyID          - Key identifier to determine the AES key to be used
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
 8046ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8046ff2:	461c      	mov	r4, r3
 8046ff4:	b087      	sub	sp, #28
 8046ff6:	4605      	mov	r5, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    uint8_t Cmac[16];

    AES_CMAC_Init( SeNvmCtx.AesCmacCtx );
 8046ff8:	4812      	ldr	r0, [pc, #72]	; (8047044 <ComputeCmac.part.0+0x54>)
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
 8046ffa:	460e      	mov	r6, r1
 8046ffc:	4617      	mov	r7, r2
    AES_CMAC_Init( SeNvmCtx.AesCmacCtx );
 8046ffe:	f7ff fec9 	bl	8046d94 <AES_CMAC_Init>

    Key_t* keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 8047002:	4620      	mov	r0, r4
 8047004:	a901      	add	r1, sp, #4
 8047006:	f7ff ffdb 	bl	8046fc0 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 804700a:	4604      	mov	r4, r0
 804700c:	b9b0      	cbnz	r0, 804703c <ComputeCmac.part.0+0x4c>
    {
        AES_CMAC_SetKey( SeNvmCtx.AesCmacCtx, keyItem->KeyValue );
 804700e:	9901      	ldr	r1, [sp, #4]
 8047010:	480c      	ldr	r0, [pc, #48]	; (8047044 <ComputeCmac.part.0+0x54>)
 8047012:	3101      	adds	r1, #1
 8047014:	f7ff fece 	bl	8046db4 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 8047018:	b125      	cbz	r5, 8047024 <ComputeCmac.part.0+0x34>
        {
            AES_CMAC_Update( SeNvmCtx.AesCmacCtx, micBxBuffer, 16 );
 804701a:	2210      	movs	r2, #16
 804701c:	4629      	mov	r1, r5
 804701e:	4809      	ldr	r0, [pc, #36]	; (8047044 <ComputeCmac.part.0+0x54>)
 8047020:	f7ff fece 	bl	8046dc0 <AES_CMAC_Update>
        }

        AES_CMAC_Update( SeNvmCtx.AesCmacCtx, buffer, size );
 8047024:	463a      	mov	r2, r7
 8047026:	4631      	mov	r1, r6
 8047028:	4806      	ldr	r0, [pc, #24]	; (8047044 <ComputeCmac.part.0+0x54>)
 804702a:	f7ff fec9 	bl	8046dc0 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, SeNvmCtx.AesCmacCtx );
 804702e:	4905      	ldr	r1, [pc, #20]	; (8047044 <ComputeCmac.part.0+0x54>)
 8047030:	a802      	add	r0, sp, #8
 8047032:	f7ff ff21 	bl	8046e78 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 | ( uint32_t ) Cmac[0] );
 8047036:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8047038:	9a02      	ldr	r2, [sp, #8]
 804703a:	601a      	str	r2, [r3, #0]
    }

    return retval;
}
 804703c:	4620      	mov	r0, r4
 804703e:	b007      	add	sp, #28
 8047040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8047042:	bf00      	nop
 8047044:	20009e68 	.word	0x20009e68

08047048 <SecureElementRestoreNvmCtx>:

    return SECURE_ELEMENT_SUCCESS;
}

SecureElementStatus_t SecureElementRestoreNvmCtx( void* seNvmCtx )
{
 8047048:	b508      	push	{r3, lr}
    // Restore nvm context
    if( seNvmCtx != 0 )
 804704a:	4601      	mov	r1, r0
 804704c:	b130      	cbz	r0, 804705c <SecureElementRestoreNvmCtx+0x14>
    {
        memcpy1( ( uint8_t* ) &SeNvmCtx, ( uint8_t* ) seNvmCtx, sizeof( SeNvmCtx ) );
 804704e:	4804      	ldr	r0, [pc, #16]	; (8047060 <SecureElementRestoreNvmCtx+0x18>)
 8047050:	f44f 7271 	mov.w	r2, #964	; 0x3c4
 8047054:	f004 fcb9 	bl	804b9ca <memcpy1>
        return SECURE_ELEMENT_SUCCESS;
 8047058:	2000      	movs	r0, #0
    }
    else
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
}
 804705a:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 804705c:	2002      	movs	r0, #2
 804705e:	e7fc      	b.n	804705a <SecureElementRestoreNvmCtx+0x12>
 8047060:	20009d54 	.word	0x20009d54

08047064 <SecureElementGetNvmCtx>:

void* SecureElementGetNvmCtx( size_t* seNvmCtxSize )
{
    *seNvmCtxSize = sizeof( SeNvmCtx );
 8047064:	f44f 7371 	mov.w	r3, #964	; 0x3c4
 8047068:	6003      	str	r3, [r0, #0]
    return &SeNvmCtx;
}
 804706a:	4801      	ldr	r0, [pc, #4]	; (8047070 <SecureElementGetNvmCtx+0xc>)
 804706c:	4770      	bx	lr
 804706e:	bf00      	nop
 8047070:	20009d54 	.word	0x20009d54

08047074 <SecureElementComputeAesCmac>:

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
{
 8047074:	b430      	push	{r4, r5}
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 8047076:	2b7e      	cmp	r3, #126	; 0x7e
{
 8047078:	9c02      	ldr	r4, [sp, #8]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 804707a:	d804      	bhi.n	8047086 <SecureElementComputeAesCmac+0x12>
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 804707c:	b131      	cbz	r1, 804708c <SecureElementComputeAesCmac+0x18>
 804707e:	b12c      	cbz	r4, 804708c <SecureElementComputeAesCmac+0x18>
        //Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
}
 8047080:	bc30      	pop	{r4, r5}
 8047082:	f7ff bfb5 	b.w	8046ff0 <ComputeCmac.part.0>
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8047086:	2003      	movs	r0, #3
}
 8047088:	bc30      	pop	{r4, r5}
 804708a:	4770      	bx	lr
        return SECURE_ELEMENT_ERROR_NPE;
 804708c:	2002      	movs	r0, #2
 804708e:	e7fb      	b.n	8047088 <SecureElementComputeAesCmac+0x14>

08047090 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac, KeyIdentifier_t keyID )
{
 8047090:	b530      	push	{r4, r5, lr}
 8047092:	460d      	mov	r5, r1
 8047094:	b085      	sub	sp, #20
 8047096:	4614      	mov	r4, r2
    if( buffer == NULL )
 8047098:	4601      	mov	r1, r0
 804709a:	b170      	cbz	r0, 80470ba <SecureElementVerifyAesCmac+0x2a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
    uint32_t compCmac = 0;
 804709c:	aa04      	add	r2, sp, #16
 804709e:	2000      	movs	r0, #0
 80470a0:	f842 0d04 	str.w	r0, [r2, #-4]!
 80470a4:	9200      	str	r2, [sp, #0]
 80470a6:	462a      	mov	r2, r5
 80470a8:	f7ff ffa2 	bl	8046ff0 <ComputeCmac.part.0>
    retval = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
    if( retval != SECURE_ELEMENT_SUCCESS )
 80470ac:	b918      	cbnz	r0, 80470b6 <SecureElementVerifyAesCmac+0x26>
        return SECURE_ELEMENT_ERROR_NPE;
 80470ae:	9803      	ldr	r0, [sp, #12]
 80470b0:	1b00      	subs	r0, r0, r4
 80470b2:	bf18      	it	ne
 80470b4:	2001      	movne	r0, #1
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
    }

    return retval;
}
 80470b6:	b005      	add	sp, #20
 80470b8:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80470ba:	2002      	movs	r0, #2
 80470bc:	e7fb      	b.n	80470b6 <SecureElementVerifyAesCmac+0x26>
	...

080470c0 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint8_t* encBuffer )
{
 80470c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80470c4:	460e      	mov	r6, r1
 80470c6:	4614      	mov	r4, r2
 80470c8:	4698      	mov	r8, r3
    if( buffer == NULL || encBuffer == NULL )
 80470ca:	4607      	mov	r7, r0
 80470cc:	b330      	cbz	r0, 804711c <SecureElementAesEncrypt+0x5c>
 80470ce:	b32b      	cbz	r3, 804711c <SecureElementAesEncrypt+0x5c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 80470d0:	f011 010f 	ands.w	r1, r1, #15
 80470d4:	d124      	bne.n	8047120 <SecureElementAesEncrypt+0x60>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

    memset1( SeNvmCtx.AesContext.ksch, '\0', 240 );
 80470d6:	22f0      	movs	r2, #240	; 0xf0
 80470d8:	4812      	ldr	r0, [pc, #72]	; (8047124 <SecureElementAesEncrypt+0x64>)
 80470da:	f004 fc8a 	bl	804b9f2 <memset1>

    Key_t* pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 80470de:	a901      	add	r1, sp, #4
 80470e0:	4620      	mov	r0, r4
 80470e2:	f7ff ff6d 	bl	8046fc0 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 80470e6:	4605      	mov	r5, r0
 80470e8:	b958      	cbnz	r0, 8047102 <SecureElementAesEncrypt+0x42>
    {
        aes_set_key( pItem->KeyValue, 16, &SeNvmCtx.AesContext );
 80470ea:	9801      	ldr	r0, [sp, #4]
 80470ec:	4a0d      	ldr	r2, [pc, #52]	; (8047124 <SecureElementAesEncrypt+0x64>)

        uint8_t block = 0;

        while( size != 0 )
        {
            aes_encrypt( &buffer[block], &encBuffer[block], &SeNvmCtx.AesContext );
 80470ee:	f8df 9034 	ldr.w	r9, [pc, #52]	; 8047124 <SecureElementAesEncrypt+0x64>
        aes_set_key( pItem->KeyValue, 16, &SeNvmCtx.AesContext );
 80470f2:	2110      	movs	r1, #16
 80470f4:	3001      	adds	r0, #1
 80470f6:	f7ff fc5b 	bl	80469b0 <aes_set_key>
 80470fa:	4634      	mov	r4, r6
 80470fc:	1b30      	subs	r0, r6, r4
 80470fe:	b2c0      	uxtb	r0, r0
        while( size != 0 )
 8047100:	b91c      	cbnz	r4, 804710a <SecureElementAesEncrypt+0x4a>
            block = block + 16;
            size = size - 16;
        }
    }
    return retval;
}
 8047102:	4628      	mov	r0, r5
 8047104:	b003      	add	sp, #12
 8047106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            aes_encrypt( &buffer[block], &encBuffer[block], &SeNvmCtx.AesContext );
 804710a:	eb08 0100 	add.w	r1, r8, r0
 804710e:	464a      	mov	r2, r9
 8047110:	4438      	add	r0, r7
            size = size - 16;
 8047112:	3c10      	subs	r4, #16
            aes_encrypt( &buffer[block], &encBuffer[block], &SeNvmCtx.AesContext );
 8047114:	f7ff fcc8 	bl	8046aa8 <aes_encrypt>
            size = size - 16;
 8047118:	b2a4      	uxth	r4, r4
 804711a:	e7ef      	b.n	80470fc <SecureElementAesEncrypt+0x3c>
        return SECURE_ELEMENT_ERROR_NPE;
 804711c:	2502      	movs	r5, #2
 804711e:	e7f0      	b.n	8047102 <SecureElementAesEncrypt+0x42>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8047120:	2505      	movs	r5, #5
 8047122:	e7ee      	b.n	8047102 <SecureElementAesEncrypt+0x42>
 8047124:	20009d74 	.word	0x20009d74

08047128 <SecureElementSetKey.part.2>:
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
 8047128:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 804712a:	460e      	mov	r6, r1
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 804712c:	491f      	ldr	r1, [pc, #124]	; (80471ac <SecureElementSetKey.part.2+0x84>)
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
 804712e:	2300      	movs	r3, #0
 8047130:	460d      	mov	r5, r1
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 8047132:	011c      	lsls	r4, r3, #4
 8047134:	18e2      	adds	r2, r4, r3
 8047136:	440a      	add	r2, r1
 8047138:	f892 222c 	ldrb.w	r2, [r2, #556]	; 0x22c
 804713c:	4282      	cmp	r2, r0
 804713e:	d12f      	bne.n	80471a0 <SecureElementSetKey.part.2+0x78>
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
 8047140:	f080 0080 	eor.w	r0, r0, #128	; 0x80
 8047144:	2809      	cmp	r0, #9
 8047146:	bf9e      	ittt	ls
 8047148:	f240 2149 	movwls	r1, #585	; 0x249
 804714c:	40c1      	lsrls	r1, r0
 804714e:	43c9      	mvnls	r1, r1
 8047150:	441c      	add	r4, r3
 8047152:	f204 242d 	addw	r4, r4, #557	; 0x22d
 8047156:	bf94      	ite	ls
 8047158:	f001 0101 	andls.w	r1, r1, #1
 804715c:	2101      	movhi	r1, #1
 804715e:	442c      	add	r4, r5
                uint8_t decryptedKey[16] = { 0 };
 8047160:	2210      	movs	r2, #16
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
 8047162:	b9a1      	cbnz	r1, 804718e <SecureElementSetKey.part.2+0x66>
                uint8_t decryptedKey[16] = { 0 };
 8047164:	4668      	mov	r0, sp
 8047166:	f006 fb37 	bl	804d7d8 <memset>
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 804716a:	466b      	mov	r3, sp
 804716c:	227f      	movs	r2, #127	; 0x7f
 804716e:	2110      	movs	r1, #16
 8047170:	4630      	mov	r0, r6
 8047172:	f7ff ffa5 	bl	80470c0 <SecureElementAesEncrypt>
                memcpy1( SeNvmCtx.KeyList[i].KeyValue, decryptedKey, KEY_SIZE );
 8047176:	2210      	movs	r2, #16
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 8047178:	4606      	mov	r6, r0
                memcpy1( SeNvmCtx.KeyList[i].KeyValue, decryptedKey, KEY_SIZE );
 804717a:	4669      	mov	r1, sp
 804717c:	4620      	mov	r0, r4
 804717e:	f004 fc24 	bl	804b9ca <memcpy1>
                SeNvmCtxChanged( );
 8047182:	f8d5 33c4 	ldr.w	r3, [r5, #964]	; 0x3c4
 8047186:	4798      	blx	r3
}
 8047188:	4630      	mov	r0, r6
 804718a:	b004      	add	sp, #16
 804718c:	bd70      	pop	{r4, r5, r6, pc}
                memcpy1( SeNvmCtx.KeyList[i].KeyValue, key, KEY_SIZE );
 804718e:	4631      	mov	r1, r6
 8047190:	4620      	mov	r0, r4
 8047192:	f004 fc1a 	bl	804b9ca <memcpy1>
                SeNvmCtxChanged( );
 8047196:	f8d5 33c4 	ldr.w	r3, [r5, #964]	; 0x3c4
 804719a:	4798      	blx	r3
                return SECURE_ELEMENT_SUCCESS;
 804719c:	2600      	movs	r6, #0
 804719e:	e7f3      	b.n	8047188 <SecureElementSetKey.part.2+0x60>
 80471a0:	3301      	adds	r3, #1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80471a2:	2b18      	cmp	r3, #24
 80471a4:	d1c5      	bne.n	8047132 <SecureElementSetKey.part.2+0xa>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80471a6:	2603      	movs	r6, #3
 80471a8:	e7ee      	b.n	8047188 <SecureElementSetKey.part.2+0x60>
 80471aa:	bf00      	nop
 80471ac:	20009d54 	.word	0x20009d54

080471b0 <SecureElementSetKey>:
    if( key == NULL )
 80471b0:	b109      	cbz	r1, 80471b6 <SecureElementSetKey+0x6>
 80471b2:	f7ff bfb9 	b.w	8047128 <SecureElementSetKey.part.2>
}
 80471b6:	2002      	movs	r0, #2
 80471b8:	4770      	bx	lr

080471ba <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( Version_t version, uint8_t* input, KeyIdentifier_t rootKeyID, KeyIdentifier_t targetKeyID )
{
 80471ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80471bc:	4607      	mov	r7, r0
 80471be:	b085      	sub	sp, #20
 80471c0:	4614      	mov	r4, r2
 80471c2:	461d      	mov	r5, r3
    if( input == NULL )
 80471c4:	460e      	mov	r6, r1
 80471c6:	b1d9      	cbz	r1, 8047200 <SecureElementDeriveAndStoreKey+0x46>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
    uint8_t key[16] = { 0 };
 80471c8:	2210      	movs	r2, #16
 80471ca:	2100      	movs	r1, #0
 80471cc:	4668      	mov	r0, sp
 80471ce:	f006 fb03 	bl	804d7d8 <memset>

    // In case of MC_KE_KEY, prevent other keys than NwkKey or AppKey for LoRaWAN 1.1 or later
    if( targetKeyID == MC_KE_KEY )
 80471d2:	2d7f      	cmp	r5, #127	; 0x7f
 80471d4:	d107      	bne.n	80471e6 <SecureElementDeriveAndStoreKey+0x2c>
    {
        if( ( ( rootKeyID == APP_KEY ) && ( version.Fields.Minor == 0 ) ) || ( rootKeyID == NWK_KEY ) )
 80471d6:	b924      	cbnz	r4, 80471e2 <SecureElementDeriveAndStoreKey+0x28>
 80471d8:	f417 0f7f 	tst.w	r7, #16711680	; 0xff0000
 80471dc:	d103      	bne.n	80471e6 <SecureElementDeriveAndStoreKey+0x2c>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80471de:	2003      	movs	r0, #3
 80471e0:	e00c      	b.n	80471fc <SecureElementDeriveAndStoreKey+0x42>
        if( ( ( rootKeyID == APP_KEY ) && ( version.Fields.Minor == 0 ) ) || ( rootKeyID == NWK_KEY ) )
 80471e2:	2c02      	cmp	r4, #2
 80471e4:	d0fb      	beq.n	80471de <SecureElementDeriveAndStoreKey+0x24>
        }
    }

    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 80471e6:	466b      	mov	r3, sp
 80471e8:	4622      	mov	r2, r4
 80471ea:	2110      	movs	r1, #16
 80471ec:	4630      	mov	r0, r6
 80471ee:	f7ff ff67 	bl	80470c0 <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 80471f2:	b918      	cbnz	r0, 80471fc <SecureElementDeriveAndStoreKey+0x42>
 80471f4:	4669      	mov	r1, sp
 80471f6:	4628      	mov	r0, r5
 80471f8:	f7ff ff96 	bl	8047128 <SecureElementSetKey.part.2>
    {
        return retval;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 80471fc:	b005      	add	sp, #20
 80471fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8047200:	2002      	movs	r0, #2
 8047202:	e7fb      	b.n	80471fc <SecureElementDeriveAndStoreKey+0x42>

08047204 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 8047204:	b510      	push	{r4, lr}
    if( randomNum == NULL )
 8047206:	4604      	mov	r4, r0
 8047208:	b128      	cbz	r0, 8047216 <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    *randomNum = Radio.Random( );
 804720a:	4b04      	ldr	r3, [pc, #16]	; (804721c <SecureElementRandomNumber+0x18>)
 804720c:	69db      	ldr	r3, [r3, #28]
 804720e:	4798      	blx	r3
 8047210:	6020      	str	r0, [r4, #0]
    return SECURE_ELEMENT_SUCCESS;
 8047212:	2000      	movs	r0, #0
}
 8047214:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8047216:	2002      	movs	r0, #2
 8047218:	e7fc      	b.n	8047214 <SecureElementRandomNumber+0x10>
 804721a:	bf00      	nop
 804721c:	0804efb8 	.word	0x0804efb8

08047220 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 8047220:	b510      	push	{r4, lr}
    if( devEui == NULL )
 8047222:	4601      	mov	r1, r0
 8047224:	b148      	cbz	r0, 804723a <SecureElementSetDevEui+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvmCtx.DevEui, devEui, SE_EUI_SIZE );
 8047226:	4c06      	ldr	r4, [pc, #24]	; (8047240 <SecureElementSetDevEui+0x20>)
 8047228:	2210      	movs	r2, #16
 804722a:	4620      	mov	r0, r4
 804722c:	f004 fbcd 	bl	804b9ca <memcpy1>
    SeNvmCtxChanged( );
 8047230:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8047234:	4798      	blx	r3
    return SECURE_ELEMENT_SUCCESS;
 8047236:	2000      	movs	r0, #0
}
 8047238:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 804723a:	2002      	movs	r0, #2
 804723c:	e7fc      	b.n	8047238 <SecureElementSetDevEui+0x18>
 804723e:	bf00      	nop
 8047240:	20009d54 	.word	0x20009d54

08047244 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
    return SeNvmCtx.DevEui;
}
 8047244:	4800      	ldr	r0, [pc, #0]	; (8047248 <SecureElementGetDevEui+0x4>)
 8047246:	4770      	bx	lr
 8047248:	20009d54 	.word	0x20009d54

0804724c <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 804724c:	b510      	push	{r4, lr}
    if( joinEui == NULL )
 804724e:	4601      	mov	r1, r0
 8047250:	b148      	cbz	r0, 8047266 <SecureElementSetJoinEui+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvmCtx.JoinEui, joinEui, SE_EUI_SIZE );
 8047252:	4c06      	ldr	r4, [pc, #24]	; (804726c <SecureElementSetJoinEui+0x20>)
 8047254:	2210      	movs	r2, #16
 8047256:	18a0      	adds	r0, r4, r2
 8047258:	f004 fbb7 	bl	804b9ca <memcpy1>
    SeNvmCtxChanged( );
 804725c:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8047260:	4798      	blx	r3
    return SECURE_ELEMENT_SUCCESS;
 8047262:	2000      	movs	r0, #0
}
 8047264:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8047266:	2002      	movs	r0, #2
 8047268:	e7fc      	b.n	8047264 <SecureElementSetJoinEui+0x18>
 804726a:	bf00      	nop
 804726c:	20009d54 	.word	0x20009d54

08047270 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvmCtx.JoinEui;
}
 8047270:	4800      	ldr	r0, [pc, #0]	; (8047274 <SecureElementGetJoinEui+0x4>)
 8047272:	4770      	bx	lr
 8047274:	20009d64 	.word	0x20009d64

08047278 <UpdateRxSlotIdleState>:
#endif
}

static void UpdateRxSlotIdleState( void )
{
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8047278:	4b05      	ldr	r3, [pc, #20]	; (8047290 <UpdateRxSlotIdleState+0x18>)
 804727a:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 804727e:	f892 20f0 	ldrb.w	r2, [r2, #240]	; 0xf0
 8047282:	2a02      	cmp	r2, #2
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8047284:	bf18      	it	ne
 8047286:	2206      	movne	r2, #6
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 8047288:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
}
 804728c:	4770      	bx	lr
 804728e:	bf00      	nop
 8047290:	2000a11c 	.word	0x2000a11c

08047294 <StopRetransmission>:
    return false;
}

static bool StopRetransmission( void )
{
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8047294:	4b10      	ldr	r3, [pc, #64]	; (80472d8 <StopRetransmission+0x44>)
 8047296:	f893 2485 	ldrb.w	r2, [r3, #1157]	; 0x485
 804729a:	0792      	lsls	r2, r2, #30
 804729c:	d503      	bpl.n	80472a6 <StopRetransmission+0x12>
 804729e:	f893 2431 	ldrb.w	r2, [r3, #1073]	; 0x431
 80472a2:	2a01      	cmp	r2, #1
 80472a4:	d909      	bls.n	80472ba <StopRetransmission+0x26>
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
          ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( MacCtx.NvmCtx->AdrCtrlOn == true )
 80472a6:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 80472aa:	f892 10f2 	ldrb.w	r1, [r2, #242]	; 0xf2
 80472ae:	b121      	cbz	r1, 80472ba <StopRetransmission+0x26>
        {
            MacCtx.NvmCtx->AdrAckCounter++;
 80472b0:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
 80472b4:	3101      	adds	r1, #1
 80472b6:	f8c2 10f4 	str.w	r1, [r2, #244]	; 0xf4
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 80472ba:	2200      	movs	r2, #0
 80472bc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    MacCtx.NodeAckRequested = false;
 80472c0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.AckTimeoutRetry = false;
 80472c4:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80472c8:	f8d3 2344 	ldr.w	r2, [r3, #836]	; 0x344
 80472cc:	f022 0202 	bic.w	r2, r2, #2
 80472d0:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344

    return true;
}
 80472d4:	2001      	movs	r0, #1
 80472d6:	4770      	bx	lr
 80472d8:	2000a11c 	.word	0x2000a11c

080472dc <CallNvmCtxCallback>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}

static void CallNvmCtxCallback( LoRaMacNvmCtxModule_t module )
{
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 80472dc:	4b03      	ldr	r3, [pc, #12]	; (80472ec <CallNvmCtxCallback+0x10>)
 80472de:	f8d3 334c 	ldr.w	r3, [r3, #844]	; 0x34c
 80472e2:	b113      	cbz	r3, 80472ea <CallNvmCtxCallback+0xe>
 80472e4:	689b      	ldr	r3, [r3, #8]
 80472e6:	b103      	cbz	r3, 80472ea <CallNvmCtxCallback+0xe>
    {
        MacCtx.MacCallbacks->NvmContextChange( module );
 80472e8:	4718      	bx	r3
    }
}
 80472ea:	4770      	bx	lr
 80472ec:	2000a11c 	.word	0x2000a11c

080472f0 <EventMacNvmCtxChanged>:

static void EventMacNvmCtxChanged( void )
{
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_MAC );
 80472f0:	2000      	movs	r0, #0
 80472f2:	f7ff bff3 	b.w	80472dc <CallNvmCtxCallback>

080472f6 <EventRegionNvmCtxChanged>:
}

static void EventRegionNvmCtxChanged( void )
{
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_REGION );
 80472f6:	2001      	movs	r0, #1
 80472f8:	f7ff bff0 	b.w	80472dc <CallNvmCtxCallback>

080472fc <GetMaxAppPayloadWithoutFOptsLength>:
{
 80472fc:	b507      	push	{r0, r1, r2, lr}
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80472fe:	4b0d      	ldr	r3, [pc, #52]	; (8047334 <GetMaxAppPayloadWithoutFOptsLength+0x38>)
    getPhy.Datarate = datarate;
 8047300:	f88d 0001 	strb.w	r0, [sp, #1]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8047304:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8047308:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 804730c:	f88d 2002 	strb.w	r2, [sp, #2]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8047310:	220d      	movs	r2, #13
 8047312:	f88d 2000 	strb.w	r2, [sp]
    if( MacCtx.NvmCtx->RepeaterSupport == true )
 8047316:	f893 213f 	ldrb.w	r2, [r3, #319]	; 0x13f
 804731a:	b112      	cbz	r2, 8047322 <GetMaxAppPayloadWithoutFOptsLength+0x26>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 804731c:	220e      	movs	r2, #14
 804731e:	f88d 2000 	strb.w	r2, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8047322:	4669      	mov	r1, sp
 8047324:	7818      	ldrb	r0, [r3, #0]
 8047326:	f002 ffec 	bl	804a302 <RegionGetPhyParam>
}
 804732a:	b2c0      	uxtb	r0, r0
 804732c:	b003      	add	sp, #12
 804732e:	f85d fb04 	ldr.w	pc, [sp], #4
 8047332:	bf00      	nop
 8047334:	2000a11c 	.word	0x2000a11c

08047338 <OnAckTimeoutTimerEvent>:
{
 8047338:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.AckTimeoutTimer );
 804733a:	4c10      	ldr	r4, [pc, #64]	; (804737c <OnAckTimeoutTimerEvent+0x44>)
 804733c:	f504 707f 	add.w	r0, r4, #1020	; 0x3fc
 8047340:	f004 fa5a 	bl	804b7f8 <TimerStop>
    if( MacCtx.NodeAckRequested == true )
 8047344:	f894 2418 	ldrb.w	r2, [r4, #1048]	; 0x418
 8047348:	4623      	mov	r3, r4
 804734a:	b112      	cbz	r2, 8047352 <OnAckTimeoutTimerEvent+0x1a>
        MacCtx.AckTimeoutRetry = true;
 804734c:	2201      	movs	r2, #1
 804734e:	f884 2417 	strb.w	r2, [r4, #1047]	; 0x417
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 8047352:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 8047356:	f892 20f0 	ldrb.w	r2, [r2, #240]	; 0xf0
 804735a:	2a02      	cmp	r2, #2
        MacCtx.MacFlags.Bits.MacDone = 1;
 804735c:	bf02      	ittt	eq
 804735e:	f893 2485 	ldrbeq.w	r2, [r3, #1157]	; 0x485
 8047362:	f042 0220 	orreq.w	r2, r2, #32
 8047366:	f883 2485 	strbeq.w	r2, [r3, #1157]	; 0x485
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 804736a:	f8d3 334c 	ldr.w	r3, [r3, #844]	; 0x34c
 804736e:	b123      	cbz	r3, 804737a <OnAckTimeoutTimerEvent+0x42>
 8047370:	68db      	ldr	r3, [r3, #12]
 8047372:	b113      	cbz	r3, 804737a <OnAckTimeoutTimerEvent+0x42>
}
 8047374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MacCtx.MacCallbacks->MacProcessNotify( );
 8047378:	4718      	bx	r3
}
 804737a:	bd10      	pop	{r4, pc}
 804737c:	2000a11c 	.word	0x2000a11c

08047380 <PrepareRxDoneAbort>:
{
 8047380:	b510      	push	{r4, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8047382:	4c0d      	ldr	r4, [pc, #52]	; (80473b8 <PrepareRxDoneAbort+0x38>)
	PRINTF("AbortRX\r\n");
 8047384:	480d      	ldr	r0, [pc, #52]	; (80473bc <PrepareRxDoneAbort+0x3c>)
 8047386:	f004 fac1 	bl	804b90c <TraceSend>
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 804738a:	f8d4 2344 	ldr.w	r2, [r4, #836]	; 0x344
 804738e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8047392:	f8c4 2344 	str.w	r2, [r4, #836]	; 0x344
    if( MacCtx.NodeAckRequested == true )
 8047396:	f894 2418 	ldrb.w	r2, [r4, #1048]	; 0x418
 804739a:	b112      	cbz	r2, 80473a2 <PrepareRxDoneAbort+0x22>
        OnAckTimeoutTimerEvent( NULL );
 804739c:	2000      	movs	r0, #0
 804739e:	f7ff ffcb 	bl	8047338 <OnAckTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 80473a2:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
    MacCtx.MacFlags.Bits.MacDone = 1;
 80473a6:	f043 0322 	orr.w	r3, r3, #34	; 0x22
 80473aa:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
}
 80473ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    UpdateRxSlotIdleState( );
 80473b2:	f7ff bf61 	b.w	8047278 <UpdateRxSlotIdleState>
 80473b6:	bf00      	nop
 80473b8:	2000a11c 	.word	0x2000a11c
 80473bc:	0804f54e 	.word	0x0804f54e

080473c0 <HandleRadioRxErrorTimeout>:
{
 80473c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 80473c4:	4c2a      	ldr	r4, [pc, #168]	; (8047470 <HandleRadioRxErrorTimeout+0xb0>)
 80473c6:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 80473ca:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80473ce:	2b02      	cmp	r3, #2
{
 80473d0:	4607      	mov	r7, r0
 80473d2:	460e      	mov	r6, r1
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 80473d4:	d002      	beq.n	80473dc <HandleRadioRxErrorTimeout+0x1c>
        Radio.Sleep( );
 80473d6:	4b27      	ldr	r3, [pc, #156]	; (8047474 <HandleRadioRxErrorTimeout+0xb4>)
 80473d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80473da:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80473dc:	f002 f87d 	bl	80494da <LoRaMacClassBIsBeaconExpected>
 80473e0:	4605      	mov	r5, r0
 80473e2:	b128      	cbz	r0, 80473f0 <HandleRadioRxErrorTimeout+0x30>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 80473e4:	2002      	movs	r0, #2
 80473e6:	f002 f870 	bl	80494ca <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 80473ea:	2000      	movs	r0, #0
 80473ec:	f002 f870 	bl	80494d0 <LoRaMacClassBBeaconTimerEvent>
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 80473f0:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 80473f4:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80473f8:	2b01      	cmp	r3, #1
 80473fa:	d117      	bne.n	804742c <HandleRadioRxErrorTimeout+0x6c>
        if( LoRaMacClassBIsPingExpected( ) == true )
 80473fc:	f002 f86f 	bl	80494de <LoRaMacClassBIsPingExpected>
 8047400:	4680      	mov	r8, r0
 8047402:	b130      	cbz	r0, 8047412 <HandleRadioRxErrorTimeout+0x52>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8047404:	2000      	movs	r0, #0
 8047406:	f002 f861 	bl	80494cc <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 804740a:	2000      	movs	r0, #0
 804740c:	f002 f861 	bl	80494d2 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8047410:	4645      	mov	r5, r8
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8047412:	f002 f866 	bl	80494e2 <LoRaMacClassBIsMulticastExpected>
 8047416:	b148      	cbz	r0, 804742c <HandleRadioRxErrorTimeout+0x6c>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8047418:	2000      	movs	r0, #0
 804741a:	f002 f858 	bl	80494ce <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 804741e:	2000      	movs	r0, #0
 8047420:	f002 f858 	bl	80494d4 <LoRaMacClassBMulticastSlotTimerEvent>
}
 8047424:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    UpdateRxSlotIdleState( );
 8047428:	f7ff bf26 	b.w	8047278 <UpdateRxSlotIdleState>
    if( classBRx == false )
 804742c:	2d00      	cmp	r5, #0
 804742e:	d1f9      	bne.n	8047424 <HandleRadioRxErrorTimeout+0x64>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8047430:	f894 2484 	ldrb.w	r2, [r4, #1156]	; 0x484
 8047434:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 8047438:	b932      	cbnz	r2, 8047448 <HandleRadioRxErrorTimeout+0x88>
            if( MacCtx.NodeAckRequested == true )
 804743a:	b10b      	cbz	r3, 8047440 <HandleRadioRxErrorTimeout+0x80>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 804743c:	f884 7441 	strb.w	r7, [r4, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8047440:	4638      	mov	r0, r7
 8047442:	f002 f9e5 	bl	8049810 <LoRaMacConfirmQueueSetStatusCmn>
 8047446:	e7ed      	b.n	8047424 <HandleRadioRxErrorTimeout+0x64>
            if( MacCtx.NodeAckRequested == true )
 8047448:	b10b      	cbz	r3, 804744e <HandleRadioRxErrorTimeout+0x8e>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 804744a:	f884 6441 	strb.w	r6, [r4, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 804744e:	4630      	mov	r0, r6
 8047450:	f002 f9de 	bl	8049810 <LoRaMacConfirmQueueSetStatusCmn>
            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8047454:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8047458:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 804745c:	2b02      	cmp	r3, #2
                MacCtx.MacFlags.Bits.MacDone = 1;
 804745e:	bf1e      	ittt	ne
 8047460:	f894 3485 	ldrbne.w	r3, [r4, #1157]	; 0x485
 8047464:	f043 0320 	orrne.w	r3, r3, #32
 8047468:	f884 3485 	strbne.w	r3, [r4, #1157]	; 0x485
 804746c:	e7da      	b.n	8047424 <HandleRadioRxErrorTimeout+0x64>
 804746e:	bf00      	nop
 8047470:	2000a11c 	.word	0x2000a11c
 8047474:	0804efb8 	.word	0x0804efb8

08047478 <OpenContinuousRxCWindow>:
{
 8047478:	b510      	push	{r4, lr}
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 804747a:	4c0d      	ldr	r4, [pc, #52]	; (80474b0 <OpenContinuousRxCWindow+0x38>)
 804747c:	2302      	movs	r3, #2
 804747e:	f884 33f7 	strb.w	r3, [r4, #1015]	; 0x3f7
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8047482:	2301      	movs	r3, #1
 8047484:	f884 33f6 	strb.w	r3, [r4, #1014]	; 0x3f6
    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8047488:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 804748c:	f204 4224 	addw	r2, r4, #1060	; 0x424
 8047490:	f504 7179 	add.w	r1, r4, #996	; 0x3e4
 8047494:	7818      	ldrb	r0, [r3, #0]
 8047496:	f002 ff76 	bl	804a386 <RegionRxConfig>
 804749a:	b138      	cbz	r0, 80474ac <OpenContinuousRxCWindow+0x34>
        Radio.Rx( 0 ); // Continuous mode
 804749c:	4b05      	ldr	r3, [pc, #20]	; (80474b4 <OpenContinuousRxCWindow+0x3c>)
 804749e:	2000      	movs	r0, #0
 80474a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80474a2:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 80474a4:	f894 33f7 	ldrb.w	r3, [r4, #1015]	; 0x3f7
 80474a8:	f884 3484 	strb.w	r3, [r4, #1156]	; 0x484
}
 80474ac:	bd10      	pop	{r4, pc}
 80474ae:	bf00      	nop
 80474b0:	2000a11c 	.word	0x2000a11c
 80474b4:	0804efb8 	.word	0x0804efb8

080474b8 <SwitchClass>:
{
 80474b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch( MacCtx.NvmCtx->DeviceClass )
 80474ba:	4e3d      	ldr	r6, [pc, #244]	; (80475b0 <SwitchClass+0xf8>)
 80474bc:	f8d6 4488 	ldr.w	r4, [r6, #1160]	; 0x488
 80474c0:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
 80474c4:	2b01      	cmp	r3, #1
{
 80474c6:	4607      	mov	r7, r0
 80474c8:	4635      	mov	r5, r6
    switch( MacCtx.NvmCtx->DeviceClass )
 80474ca:	d010      	beq.n	80474ee <SwitchClass+0x36>
 80474cc:	d303      	bcc.n	80474d6 <SwitchClass+0x1e>
 80474ce:	2b02      	cmp	r3, #2
 80474d0:	d064      	beq.n	804759c <SwitchClass+0xe4>
 80474d2:	2003      	movs	r0, #3
 80474d4:	e05c      	b.n	8047590 <SwitchClass+0xd8>
            if( deviceClass == CLASS_A )
 80474d6:	b940      	cbnz	r0, 80474ea <SwitchClass+0x32>
                MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 80474d8:	f504 7392 	add.w	r3, r4, #292	; 0x124
 80474dc:	f504 748e 	add.w	r4, r4, #284	; 0x11c
 80474e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80474e4:	e883 0003 	stmia.w	r3, {r0, r1}
 80474e8:	e7f3      	b.n	80474d2 <SwitchClass+0x1a>
            if( deviceClass == CLASS_B )
 80474ea:	2801      	cmp	r0, #1
 80474ec:	d108      	bne.n	8047500 <SwitchClass+0x48>
            status = LoRaMacClassBSwitchClass( deviceClass );
 80474ee:	f001 fffe 	bl	80494ee <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 80474f2:	2800      	cmp	r0, #0
 80474f4:	d14c      	bne.n	8047590 <SwitchClass+0xd8>
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 80474f6:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
 80474fa:	f883 70f0 	strb.w	r7, [r3, #240]	; 0xf0
 80474fe:	e047      	b.n	8047590 <SwitchClass+0xd8>
            if( deviceClass == CLASS_C )
 8047500:	2802      	cmp	r0, #2
 8047502:	d1e6      	bne.n	80474d2 <SwitchClass+0x1a>
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8047504:	f505 7c74 	add.w	ip, r5, #976	; 0x3d0
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 8047508:	f884 00f0 	strb.w	r0, [r4, #240]	; 0xf0
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 804750c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8047510:	f506 7679 	add.w	r6, r6, #996	; 0x3e4
 8047514:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8047516:	f8dc 3000 	ldr.w	r3, [ip]
 804751a:	f846 3910 	str.w	r3, [r6], #-16
                    if( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true )
 804751e:	2128      	movs	r1, #40	; 0x28
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8047520:	f885 73f7 	strb.w	r7, [r5, #1015]	; 0x3f7
 8047524:	2300      	movs	r3, #0
                    if( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true )
 8047526:	fb01 4203 	mla	r2, r1, r3, r4
 804752a:	f892 0051 	ldrb.w	r0, [r2, #81]	; 0x51
 804752e:	b388      	cbz	r0, 8047594 <SwitchClass+0xdc>
                        MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8047530:	6e53      	ldr	r3, [r2, #100]	; 0x64
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8047532:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
                        MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8047536:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 804753a:	f884 2128 	strb.w	r2, [r4, #296]	; 0x128
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 804753e:	f895 2419 	ldrb.w	r2, [r5, #1049]	; 0x419
 8047542:	f885 23e4 	strb.w	r2, [r5, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 8047546:	f8c5 33e8 	str.w	r3, [r5, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 804754a:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 804754e:	f885 33f4 	strb.w	r3, [r5, #1012]	; 0x3f4
                        MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8047552:	f894 313f 	ldrb.w	r3, [r4, #319]	; 0x13f
 8047556:	f885 33f5 	strb.w	r3, [r5, #1013]	; 0x3f5
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 804755a:	2303      	movs	r3, #3
 804755c:	f885 33f7 	strb.w	r3, [r5, #1015]	; 0x3f7
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8047560:	2301      	movs	r3, #1
 8047562:	f885 33f6 	strb.w	r3, [r5, #1014]	; 0x3f6
                Radio.Sleep( );
 8047566:	4b13      	ldr	r3, [pc, #76]	; (80475b4 <SwitchClass+0xfc>)
                MacCtx.NodeAckRequested = false;
 8047568:	2400      	movs	r4, #0
                Radio.Sleep( );
 804756a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                MacCtx.NodeAckRequested = false;
 804756c:	f885 4418 	strb.w	r4, [r5, #1048]	; 0x418
                Radio.Sleep( );
 8047570:	4798      	blx	r3
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8047572:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 8047576:	7818      	ldrb	r0, [r3, #0]
 8047578:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
 804757c:	f993 1128 	ldrsb.w	r1, [r3, #296]	; 0x128
 8047580:	9600      	str	r6, [sp, #0]
 8047582:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8047586:	f002 feef 	bl	804a368 <RegionComputeRxWindowParameters>
                OpenContinuousRxCWindow( );
 804758a:	f7ff ff75 	bl	8047478 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 804758e:	4620      	mov	r0, r4
}
 8047590:	b003      	add	sp, #12
 8047592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8047594:	3301      	adds	r3, #1
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8047596:	2b04      	cmp	r3, #4
 8047598:	d1c5      	bne.n	8047526 <SwitchClass+0x6e>
 804759a:	e7e4      	b.n	8047566 <SwitchClass+0xae>
            if( deviceClass == CLASS_A )
 804759c:	2800      	cmp	r0, #0
 804759e:	d198      	bne.n	80474d2 <SwitchClass+0x1a>
                Radio.Sleep( );
 80475a0:	4b04      	ldr	r3, [pc, #16]	; (80475b4 <SwitchClass+0xfc>)
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 80475a2:	f884 00f0 	strb.w	r0, [r4, #240]	; 0xf0
                Radio.Sleep( );
 80475a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80475a8:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 80475aa:	4638      	mov	r0, r7
 80475ac:	e7f0      	b.n	8047590 <SwitchClass+0xd8>
 80475ae:	bf00      	nop
 80475b0:	2000a11c 	.word	0x2000a11c
 80475b4:	0804efb8 	.word	0x0804efb8

080475b8 <ProcessMacCommands.isra.1.constprop.7>:
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 80475b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80475bc:	b091      	sub	sp, #68	; 0x44
    uint8_t status = 0;
 80475be:	2700      	movs	r7, #0
                if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 80475c0:	4ec4      	ldr	r6, [pc, #784]	; (80478d4 <ProcessMacCommands.isra.1.constprop.7+0x31c>)
    uint8_t status = 0;
 80475c2:	f88d 7015 	strb.w	r7, [sp, #21]
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 80475c6:	4605      	mov	r5, r0
 80475c8:	468a      	mov	sl, r1
 80475ca:	4693      	mov	fp, r2
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80475cc:	f8ad 7018 	strh.w	r7, [sp, #24]
 80475d0:	46b8      	mov	r8, r7
    while( macIndex < commandsSize )
 80475d2:	45d0      	cmp	r8, sl
 80475d4:	d302      	bcc.n	80475dc <ProcessMacCommands.isra.1.constprop.7+0x24>
}
 80475d6:	b011      	add	sp, #68	; 0x44
 80475d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch( payload[macIndex++] )
 80475dc:	f815 3008 	ldrb.w	r3, [r5, r8]
 80475e0:	f108 0401 	add.w	r4, r8, #1
 80475e4:	3b02      	subs	r3, #2
 80475e6:	b2e4      	uxtb	r4, r4
 80475e8:	2b11      	cmp	r3, #17
 80475ea:	d8f4      	bhi.n	80475d6 <ProcessMacCommands.isra.1.constprop.7+0x1e>
 80475ec:	a201      	add	r2, pc, #4	; (adr r2, 80475f4 <ProcessMacCommands.isra.1.constprop.7+0x3c>)
 80475ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80475f2:	bf00      	nop
 80475f4:	0804763d 	.word	0x0804763d
 80475f8:	0804766d 	.word	0x0804766d
 80475fc:	08047733 	.word	0x08047733
 8047600:	0804775f 	.word	0x0804775f
 8047604:	080477fd 	.word	0x080477fd
 8047608:	08047825 	.word	0x08047825
 804760c:	08047891 	.word	0x08047891
 8047610:	080478d9 	.word	0x080478d9
 8047614:	08047971 	.word	0x08047971
 8047618:	080475d7 	.word	0x080475d7
 804761c:	080475d7 	.word	0x080475d7
 8047620:	080479c9 	.word	0x080479c9
 8047624:	080475d7 	.word	0x080475d7
 8047628:	080475d7 	.word	0x080475d7
 804762c:	08047a6b 	.word	0x08047a6b
 8047630:	08047a7d 	.word	0x08047a7d
 8047634:	08047ac1 	.word	0x08047ac1
 8047638:	08047aeb 	.word	0x08047aeb
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 804763c:	2003      	movs	r0, #3
 804763e:	f002 f8ff 	bl	8049840 <LoRaMacConfirmQueueIsCmdActive>
 8047642:	b188      	cbz	r0, 8047668 <ProcessMacCommands.isra.1.constprop.7+0xb0>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8047644:	2103      	movs	r1, #3
 8047646:	2000      	movs	r0, #0
 8047648:	f002 f8ae 	bl	80497a8 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 804764c:	5d2b      	ldrb	r3, [r5, r4]
 804764e:	f886 345c 	strb.w	r3, [r6, #1116]	; 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8047652:	f108 0403 	add.w	r4, r8, #3
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8047656:	f108 0802 	add.w	r8, r8, #2
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 804765a:	fa5f f888 	uxtb.w	r8, r8
 804765e:	b2e4      	uxtb	r4, r4
 8047660:	f815 3008 	ldrb.w	r3, [r5, r8]
 8047664:	f886 345d 	strb.w	r3, [r6, #1117]	; 0x45d
                uint8_t eirpDwellTime = payload[macIndex++];
 8047668:	46a0      	mov	r8, r4
 804766a:	e7b2      	b.n	80475d2 <ProcessMacCommands.isra.1.constprop.7+0x1a>
                int8_t linkAdrDatarate = DR_0;
 804766c:	2300      	movs	r3, #0
 804766e:	f88d 3016 	strb.w	r3, [sp, #22]
                int8_t linkAdrTxPower = TX_POWER_0;
 8047672:	f88d 3017 	strb.w	r3, [sp, #23]
                uint8_t linkAdrNbRep = 0;
 8047676:	f88d 301c 	strb.w	r3, [sp, #28]
                uint8_t linkAdrNbBytesParsed = 0;
 804767a:	f88d 3020 	strb.w	r3, [sp, #32]
                if( adrBlockFound == false )
 804767e:	2f00      	cmp	r7, #0
 8047680:	d14e      	bne.n	8047720 <ProcessMacCommands.isra.1.constprop.7+0x168>
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8047682:	1e63      	subs	r3, r4, #1
 8047684:	442b      	add	r3, r5
 8047686:	930d      	str	r3, [sp, #52]	; 0x34
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8047688:	f10a 0301 	add.w	r3, sl, #1
 804768c:	1b1c      	subs	r4, r3, r4
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 804768e:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8047692:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 8047696:	f893 20f2 	ldrb.w	r2, [r3, #242]	; 0xf2
 804769a:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
                    linkAdrReq.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 804769e:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 80476a2:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
                    linkAdrReq.CurrentDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80476a6:	f893 20f9 	ldrb.w	r2, [r3, #249]	; 0xf9
 80476aa:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
                    linkAdrReq.CurrentTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 80476ae:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
 80476b2:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
                    linkAdrReq.CurrentNbRep = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 80476b6:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 80476ba:	f88d 203d 	strb.w	r2, [sp, #61]	; 0x3d
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 80476be:	f8d3 21d0 	ldr.w	r2, [r3, #464]	; 0x1d0
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 80476c2:	7818      	ldrb	r0, [r3, #0]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 80476c4:	920c      	str	r2, [sp, #48]	; 0x30
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 80476c6:	ab08      	add	r3, sp, #32
 80476c8:	9301      	str	r3, [sp, #4]
 80476ca:	ab07      	add	r3, sp, #28
 80476cc:	9300      	str	r3, [sp, #0]
 80476ce:	f10d 0216 	add.w	r2, sp, #22
 80476d2:	f10d 0317 	add.w	r3, sp, #23
 80476d6:	a90c      	add	r1, sp, #48	; 0x30
 80476d8:	f002 fe6d 	bl	804a3b6 <RegionLinkAdrReq>
 80476dc:	f88d 0015 	strb.w	r0, [sp, #21]
                    if( ( status & 0x07 ) == 0x07 )
 80476e0:	f000 0007 	and.w	r0, r0, #7
 80476e4:	2807      	cmp	r0, #7
 80476e6:	d10d      	bne.n	8047704 <ProcessMacCommands.isra.1.constprop.7+0x14c>
                        MacCtx.NvmCtx->MacParams.ChannelsDatarate = linkAdrDatarate;
 80476e8:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
 80476ec:	f89d 2016 	ldrb.w	r2, [sp, #22]
 80476f0:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
                        MacCtx.NvmCtx->MacParams.ChannelsTxPower = linkAdrTxPower;
 80476f4:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80476f8:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
                        MacCtx.NvmCtx->MacParams.ChannelsNbTrans = linkAdrNbRep;
 80476fc:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8047700:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8047704:	2700      	movs	r7, #0
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8047706:	f04f 0905 	mov.w	r9, #5
 804770a:	b2fb      	uxtb	r3, r7
 804770c:	f89d 4020 	ldrb.w	r4, [sp, #32]
 8047710:	fbb4 f2f9 	udiv	r2, r4, r9
 8047714:	4293      	cmp	r3, r2
 8047716:	f107 0701 	add.w	r7, r7, #1
 804771a:	d303      	bcc.n	8047724 <ProcessMacCommands.isra.1.constprop.7+0x16c>
                    macIndex += linkAdrNbBytesParsed - 1;
 804771c:	4444      	add	r4, r8
 804771e:	b2e4      	uxtb	r4, r4
 8047720:	2701      	movs	r7, #1
 8047722:	e7a1      	b.n	8047668 <ProcessMacCommands.isra.1.constprop.7+0xb0>
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8047724:	2201      	movs	r2, #1
 8047726:	f10d 0115 	add.w	r1, sp, #21
 804772a:	2003      	movs	r0, #3
 804772c:	f001 ff0c 	bl	8049548 <LoRaMacCommandsAddCmd>
 8047730:	e7eb      	b.n	804770a <ProcessMacCommands.isra.1.constprop.7+0x152>
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 8047732:	5d2b      	ldrb	r3, [r5, r4]
 8047734:	f8d6 1488 	ldr.w	r1, [r6, #1160]	; 0x488
 8047738:	f003 030f 	and.w	r3, r3, #15
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 804773c:	2201      	movs	r2, #1
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 804773e:	f881 313c 	strb.w	r3, [r1, #316]	; 0x13c
 8047742:	f108 0802 	add.w	r8, r8, #2
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 8047746:	fa02 f303 	lsl.w	r3, r2, r3
 804774a:	f8a1 31c2 	strh.w	r3, [r1, #450]	; 0x1c2
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 804774e:	fa5f f888 	uxtb.w	r8, r8
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8047752:	2200      	movs	r2, #0
 8047754:	a906      	add	r1, sp, #24
 8047756:	2004      	movs	r0, #4
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8047758:	f001 fef6 	bl	8049548 <LoRaMacCommandsAddCmd>
 804775c:	e0b7      	b.n	80478ce <ProcessMacCommands.isra.1.constprop.7+0x316>
                status = 0x07;
 804775e:	2307      	movs	r3, #7
 8047760:	f88d 3015 	strb.w	r3, [sp, #21]
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8047764:	5d2b      	ldrb	r3, [r5, r4]
 8047766:	f3c3 1202 	ubfx	r2, r3, #4, #3
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 804776a:	f003 030f 	and.w	r3, r3, #15
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 804776e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8047772:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8047776:	f108 0204 	add.w	r2, r8, #4
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 804777a:	f108 0303 	add.w	r3, r8, #3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 804777e:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8047780:	b2d2      	uxtb	r2, r2
 8047782:	f108 0405 	add.w	r4, r8, #5
                macIndex++;
 8047786:	f108 0802 	add.w	r8, r8, #2
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 804778a:	5ce9      	ldrb	r1, [r5, r3]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 804778c:	5cab      	ldrb	r3, [r5, r2]
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 804778e:	fa5f f888 	uxtb.w	r8, r8
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8047792:	041b      	lsls	r3, r3, #16
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8047794:	f815 2008 	ldrb.w	r2, [r5, r8]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8047798:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 804779c:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency *= 100;
 804779e:	2264      	movs	r2, #100	; 0x64
 80477a0:	4353      	muls	r3, r2
 80477a2:	930d      	str	r3, [sp, #52]	; 0x34
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 80477a4:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
 80477a8:	a90c      	add	r1, sp, #48	; 0x30
 80477aa:	7818      	ldrb	r0, [r3, #0]
 80477ac:	f002 fe13 	bl	804a3d6 <RegionRxParamSetupReq>
                if( ( status & 0x07 ) == 0x07 )
 80477b0:	f000 0307 	and.w	r3, r0, #7
 80477b4:	2b07      	cmp	r3, #7
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80477b6:	b2e4      	uxtb	r4, r4
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 80477b8:	f88d 0015 	strb.w	r0, [sp, #21]
                if( ( status & 0x07 ) == 0x07 )
 80477bc:	d110      	bne.n	80477e0 <ProcessMacCommands.isra.1.constprop.7+0x228>
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 80477be:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
 80477c2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 80477c6:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
                    MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 80477ca:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 80477ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80477d0:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
                    MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 80477d4:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
                    MacCtx.NvmCtx->MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 80477d8:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 80477dc:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                macCmdPayload[0] = status;
 80477e0:	a910      	add	r1, sp, #64	; 0x40
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 80477e2:	2201      	movs	r2, #1
                macCmdPayload[0] = status;
 80477e4:	f801 0d28 	strb.w	r0, [r1, #-40]!
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 80477e8:	2005      	movs	r0, #5
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 80477ea:	f001 fead 	bl	8049548 <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 80477ee:	f896 3485 	ldrb.w	r3, [r6, #1157]	; 0x485
 80477f2:	f043 0310 	orr.w	r3, r3, #16
 80477f6:	f886 3485 	strb.w	r3, [r6, #1157]	; 0x485
 80477fa:	e735      	b.n	8047668 <ProcessMacCommands.isra.1.constprop.7+0xb0>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 80477fc:	f8d6 334c 	ldr.w	r3, [r6, #844]	; 0x34c
 8047800:	b173      	cbz	r3, 8047820 <ProcessMacCommands.isra.1.constprop.7+0x268>
 8047802:	681b      	ldr	r3, [r3, #0]
 8047804:	b163      	cbz	r3, 8047820 <ProcessMacCommands.isra.1.constprop.7+0x268>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8047806:	4798      	blx	r3
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8047808:	f00b 033f 	and.w	r3, fp, #63	; 0x3f
                macCmdPayload[0] = batteryLevel;
 804780c:	f88d 0018 	strb.w	r0, [sp, #24]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8047810:	f88d 3019 	strb.w	r3, [sp, #25]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8047814:	2202      	movs	r2, #2
 8047816:	a906      	add	r1, sp, #24
 8047818:	2006      	movs	r0, #6
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 804781a:	f001 fe95 	bl	8049548 <LoRaMacCommandsAddCmd>
 804781e:	e723      	b.n	8047668 <ProcessMacCommands.isra.1.constprop.7+0xb0>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8047820:	20ff      	movs	r0, #255	; 0xff
 8047822:	e7f1      	b.n	8047808 <ProcessMacCommands.isra.1.constprop.7+0x250>
                status = 0x03;
 8047824:	2303      	movs	r3, #3
 8047826:	f88d 3015 	strb.w	r3, [sp, #21]
                newChannelReq.ChannelId = payload[macIndex++];
 804782a:	5d2b      	ldrb	r3, [r5, r4]
 804782c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                newChannelReq.NewChannel = &chParam;
 8047830:	ab0c      	add	r3, sp, #48	; 0x30
 8047832:	9308      	str	r3, [sp, #32]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8047834:	f108 0204 	add.w	r2, r8, #4
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8047838:	f108 0303 	add.w	r3, r8, #3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 804783c:	b2db      	uxtb	r3, r3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 804783e:	b2d2      	uxtb	r2, r2
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8047840:	5ce9      	ldrb	r1, [r5, r3]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8047842:	5cab      	ldrb	r3, [r5, r2]
                newChannelReq.ChannelId = payload[macIndex++];
 8047844:	f108 0202 	add.w	r2, r8, #2
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8047848:	b2d2      	uxtb	r2, r2
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 804784a:	041b      	lsls	r3, r3, #16
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 804784c:	5caa      	ldrb	r2, [r5, r2]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 804784e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8047852:	4313      	orrs	r3, r2
                chParam.DrRange.Value = payload[macIndex++];
 8047854:	f108 0406 	add.w	r4, r8, #6
                chParam.Frequency *= 100;
 8047858:	2264      	movs	r2, #100	; 0x64
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 804785a:	f108 0805 	add.w	r8, r8, #5
                chParam.Frequency *= 100;
 804785e:	4353      	muls	r3, r2
                chParam.DrRange.Value = payload[macIndex++];
 8047860:	fa5f f888 	uxtb.w	r8, r8
                chParam.Frequency *= 100;
 8047864:	930c      	str	r3, [sp, #48]	; 0x30
                chParam.Rx1Frequency = 0;
 8047866:	2300      	movs	r3, #0
 8047868:	930d      	str	r3, [sp, #52]	; 0x34
                chParam.DrRange.Value = payload[macIndex++];
 804786a:	f815 3008 	ldrb.w	r3, [r5, r8]
 804786e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 8047872:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
 8047876:	a908      	add	r1, sp, #32
 8047878:	7818      	ldrb	r0, [r3, #0]
 804787a:	f002 fdb3 	bl	804a3e4 <RegionNewChannelReq>
                macCmdPayload[0] = status;
 804787e:	a910      	add	r1, sp, #64	; 0x40
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 8047880:	f88d 0015 	strb.w	r0, [sp, #21]
                macCmdPayload[0] = status;
 8047884:	f801 0d28 	strb.w	r0, [r1, #-40]!
                chParam.DrRange.Value = payload[macIndex++];
 8047888:	b2e4      	uxtb	r4, r4
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 804788a:	2201      	movs	r2, #1
 804788c:	2007      	movs	r0, #7
 804788e:	e7c4      	b.n	804781a <ProcessMacCommands.isra.1.constprop.7+0x262>
                uint8_t delay = payload[macIndex++] & 0x0F;
 8047890:	5d2b      	ldrb	r3, [r5, r4]
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 8047892:	f8d6 1488 	ldr.w	r1, [r6, #1160]	; 0x488
                    delay++;
 8047896:	f013 020f 	ands.w	r2, r3, #15
 804789a:	bf08      	it	eq
 804789c:	2201      	moveq	r2, #1
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 804789e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80478a2:	4353      	muls	r3, r2
 80478a4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 80478a8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80478ac:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 80478b0:	2200      	movs	r2, #0
 80478b2:	a906      	add	r1, sp, #24
 80478b4:	2008      	movs	r0, #8
 80478b6:	f001 fe47 	bl	8049548 <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 80478ba:	f896 3485 	ldrb.w	r3, [r6, #1157]	; 0x485
                uint8_t delay = payload[macIndex++] & 0x0F;
 80478be:	f108 0802 	add.w	r8, r8, #2
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 80478c2:	f043 0310 	orr.w	r3, r3, #16
                uint8_t delay = payload[macIndex++] & 0x0F;
 80478c6:	fa5f f888 	uxtb.w	r8, r8
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 80478ca:	f886 3485 	strb.w	r3, [r6, #1157]	; 0x485
                uint8_t delay = payload[macIndex++] & 0x0F;
 80478ce:	4644      	mov	r4, r8
 80478d0:	e6ca      	b.n	8047668 <ProcessMacCommands.isra.1.constprop.7+0xb0>
 80478d2:	bf00      	nop
 80478d4:	2000a11c 	.word	0x2000a11c
                uint8_t eirpDwellTime = payload[macIndex++];
 80478d8:	5d2b      	ldrb	r3, [r5, r4]
                txParamSetupReq.UplinkDwellTime = 0;
 80478da:	2200      	movs	r2, #0
 80478dc:	f88d 201c 	strb.w	r2, [sp, #28]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 80478e0:	f013 0220 	ands.w	r2, r3, #32
                    txParamSetupReq.DownlinkDwellTime = 1;
 80478e4:	bf18      	it	ne
 80478e6:	2201      	movne	r2, #1
 80478e8:	f88d 201d 	strb.w	r2, [sp, #29]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 80478ec:	06da      	lsls	r2, r3, #27
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 80478ee:	f003 030f 	and.w	r3, r3, #15
                    txParamSetupReq.UplinkDwellTime = 1;
 80478f2:	bf48      	it	mi
 80478f4:	2201      	movmi	r2, #1
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 80478f6:	f88d 301e 	strb.w	r3, [sp, #30]
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 80478fa:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
                    txParamSetupReq.UplinkDwellTime = 1;
 80478fe:	bf48      	it	mi
 8047900:	f88d 201c 	strbmi.w	r2, [sp, #28]
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 8047904:	a907      	add	r1, sp, #28
 8047906:	7818      	ldrb	r0, [r3, #0]
 8047908:	f002 fd73 	bl	804a3f2 <RegionTxParamSetupReq>
                uint8_t eirpDwellTime = payload[macIndex++];
 804790c:	f108 0802 	add.w	r8, r8, #2
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 8047910:	3001      	adds	r0, #1
                uint8_t eirpDwellTime = payload[macIndex++];
 8047912:	fa5f f888 	uxtb.w	r8, r8
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 8047916:	d0da      	beq.n	80478ce <ProcessMacCommands.isra.1.constprop.7+0x316>
                    MacCtx.NvmCtx->MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8047918:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
 804791c:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8047920:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
                    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8047924:	f89d 101d 	ldrb.w	r1, [sp, #29]
 8047928:	f883 112d 	strb.w	r1, [r3, #301]	; 0x12d
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 804792c:	f89d 101e 	ldrb.w	r1, [sp, #30]
 8047930:	487e      	ldr	r0, [pc, #504]	; (8047b2c <ProcessMacCommands.isra.1.constprop.7+0x574>)
 8047932:	5c41      	ldrb	r1, [r0, r1]
 8047934:	ee07 1a90 	vmov	s15, r1
 8047938:	eef8 7a67 	vcvt.f32.u32	s15, s15
                    getPhy.Attribute = PHY_MIN_TX_DR;
 804793c:	2102      	movs	r1, #2
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 804793e:	edc3 7a4c 	vstr	s15, [r3, #304]	; 0x130
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8047942:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8047946:	f88d 1020 	strb.w	r1, [sp, #32]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804794a:	7818      	ldrb	r0, [r3, #0]
 804794c:	a908      	add	r1, sp, #32
 804794e:	f002 fcd8 	bl	804a302 <RegionGetPhyParam>
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 8047952:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8047956:	900c      	str	r0, [sp, #48]	; 0x30
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 8047958:	f993 20f9 	ldrsb.w	r2, [r3, #249]	; 0xf9
 804795c:	b240      	sxtb	r0, r0
 804795e:	4290      	cmp	r0, r2
 8047960:	bfb8      	it	lt
 8047962:	4610      	movlt	r0, r2
 8047964:	f883 00f9 	strb.w	r0, [r3, #249]	; 0xf9
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8047968:	2200      	movs	r2, #0
 804796a:	a906      	add	r1, sp, #24
 804796c:	2009      	movs	r0, #9
 804796e:	e6f3      	b.n	8047758 <ProcessMacCommands.isra.1.constprop.7+0x1a0>
                status = 0x03;
 8047970:	2303      	movs	r3, #3
 8047972:	f88d 3015 	strb.w	r3, [sp, #21]
                dlChannelReq.ChannelId = payload[macIndex++];
 8047976:	5d2b      	ldrb	r3, [r5, r4]
 8047978:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 804797c:	f108 0204 	add.w	r2, r8, #4
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8047980:	f108 0303 	add.w	r3, r8, #3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8047984:	b2db      	uxtb	r3, r3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8047986:	b2d2      	uxtb	r2, r2
 8047988:	f108 0405 	add.w	r4, r8, #5
                dlChannelReq.ChannelId = payload[macIndex++];
 804798c:	f108 0802 	add.w	r8, r8, #2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8047990:	5ce9      	ldrb	r1, [r5, r3]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8047992:	5cab      	ldrb	r3, [r5, r2]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8047994:	fa5f f888 	uxtb.w	r8, r8
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8047998:	041b      	lsls	r3, r3, #16
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 804799a:	f815 2008 	ldrb.w	r2, [r5, r8]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 804799e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80479a2:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency *= 100;
 80479a4:	2264      	movs	r2, #100	; 0x64
 80479a6:	4353      	muls	r3, r2
 80479a8:	930d      	str	r3, [sp, #52]	; 0x34
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 80479aa:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
 80479ae:	a90c      	add	r1, sp, #48	; 0x30
 80479b0:	7818      	ldrb	r0, [r3, #0]
 80479b2:	f002 fd25 	bl	804a400 <RegionDlChannelReq>
                macCmdPayload[0] = status;
 80479b6:	a910      	add	r1, sp, #64	; 0x40
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 80479b8:	f88d 0015 	strb.w	r0, [sp, #21]
                macCmdPayload[0] = status;
 80479bc:	f801 0d28 	strb.w	r0, [r1, #-40]!
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80479c0:	b2e4      	uxtb	r4, r4
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 80479c2:	2201      	movs	r2, #1
 80479c4:	200a      	movs	r0, #10
 80479c6:	e710      	b.n	80477ea <ProcessMacCommands.isra.1.constprop.7+0x232>
                SysTime_t sysTime = { 0 };
 80479c8:	2300      	movs	r3, #0
 80479ca:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 80479ce:	f108 0203 	add.w	r2, r8, #3
                gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 80479d2:	f108 0302 	add.w	r3, r8, #2
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 80479d6:	b2db      	uxtb	r3, r3
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 80479d8:	b2d2      	uxtb	r2, r2
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 80479da:	5ce9      	ldrb	r1, [r5, r3]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 80479dc:	5cab      	ldrb	r3, [r5, r2]
                gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 80479de:	5d2a      	ldrb	r2, [r5, r4]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 80479e0:	041b      	lsls	r3, r3, #16
 80479e2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80479e6:	4313      	orrs	r3, r2
 80479e8:	f108 0204 	add.w	r2, r8, #4
                gpsEpochTime.SubSeconds = payload[macIndex++];
 80479ec:	f108 0406 	add.w	r4, r8, #6
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 80479f0:	b2d2      	uxtb	r2, r2
 80479f2:	f108 0805 	add.w	r8, r8, #5
                gpsEpochTime.SubSeconds = payload[macIndex++];
 80479f6:	fa5f f888 	uxtb.w	r8, r8
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 80479fa:	5caa      	ldrb	r2, [r5, r2]
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80479fc:	f815 1008 	ldrb.w	r1, [r5, r8]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8047a00:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8047a04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8047a08:	434a      	muls	r2, r1
                sysTimeCurrent = SysTimeGet( );
 8047a0a:	f10d 0930 	add.w	r9, sp, #48	; 0x30
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8047a0e:	1212      	asrs	r2, r2, #8
                sysTimeCurrent = SysTimeGet( );
 8047a10:	4648      	mov	r0, r9
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8047a12:	9303      	str	r3, [sp, #12]
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8047a14:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
                sysTimeCurrent = SysTimeGet( );
 8047a18:	f003 fe2b 	bl	804b672 <SysTimeGet>
                sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8047a1c:	9b03      	ldr	r3, [sp, #12]
 8047a1e:	f103 5396 	add.w	r3, r3, #314572800	; 0x12c00000
 8047a22:	f503 13a9 	add.w	r3, r3, #1384448	; 0x152000
 8047a26:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
                sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8047a2a:	9308      	str	r3, [sp, #32]
 8047a2c:	f8d6 3340 	ldr.w	r3, [r6, #832]	; 0x340
 8047a30:	9300      	str	r3, [sp, #0]
 8047a32:	f10d 0820 	add.w	r8, sp, #32
 8047a36:	f8d6 333c 	ldr.w	r3, [r6, #828]	; 0x33c
 8047a3a:	e898 0006 	ldmia.w	r8, {r1, r2}
 8047a3e:	a80a      	add	r0, sp, #40	; 0x28
 8047a40:	f003 fdda 	bl	804b5f8 <SysTimeSub>
 8047a44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8047a46:	9300      	str	r3, [sp, #0]
 8047a48:	e899 0006 	ldmia.w	r9, {r1, r2}
 8047a4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8047a4e:	4640      	mov	r0, r8
 8047a50:	f003 fdb6 	bl	804b5c0 <SysTimeAdd>
                SysTimeSet( sysTime );
 8047a54:	e898 0003 	ldmia.w	r8, {r0, r1}
 8047a58:	f003 fdea 	bl	804b630 <SysTimeSet>
                LoRaMacClassBDeviceTimeAns( );
 8047a5c:	f001 fd51 	bl	8049502 <LoRaMacClassBDeviceTimeAns>
                MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8047a60:	2301      	movs	r3, #1
                gpsEpochTime.SubSeconds = payload[macIndex++];
 8047a62:	b2e4      	uxtb	r4, r4
                MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8047a64:	f886 343c 	strb.w	r3, [r6, #1084]	; 0x43c
 8047a68:	e5fe      	b.n	8047668 <ProcessMacCommands.isra.1.constprop.7+0xb0>
                if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8047a6a:	f896 3484 	ldrb.w	r3, [r6, #1156]	; 0x484
 8047a6e:	3b04      	subs	r3, #4
 8047a70:	2b01      	cmp	r3, #1
 8047a72:	f67f adf9 	bls.w	8047668 <ProcessMacCommands.isra.1.constprop.7+0xb0>
                    LoRaMacClassBPingSlotInfoAns( );
 8047a76:	f001 fd40 	bl	80494fa <LoRaMacClassBPingSlotInfoAns>
 8047a7a:	e5f5      	b.n	8047668 <ProcessMacCommands.isra.1.constprop.7+0xb0>
                frequency = ( uint32_t )payload[macIndex++];
 8047a7c:	f108 0202 	add.w	r2, r8, #2
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8047a80:	b2d2      	uxtb	r2, r2
                frequency = ( uint32_t )payload[macIndex++];
 8047a82:	5d29      	ldrb	r1, [r5, r4]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8047a84:	5ca8      	ldrb	r0, [r5, r2]
 8047a86:	f108 0203 	add.w	r2, r8, #3
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8047a8a:	b2d2      	uxtb	r2, r2
                datarate = payload[macIndex++] & 0x0F;
 8047a8c:	f108 0405 	add.w	r4, r8, #5
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8047a90:	5cab      	ldrb	r3, [r5, r2]
 8047a92:	f108 0804 	add.w	r8, r8, #4
                datarate = payload[macIndex++] & 0x0F;
 8047a96:	fa5f f888 	uxtb.w	r8, r8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8047a9a:	041b      	lsls	r3, r3, #16
 8047a9c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                datarate = payload[macIndex++] & 0x0F;
 8047aa0:	f815 0008 	ldrb.w	r0, [r5, r8]
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8047aa4:	430b      	orrs	r3, r1
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8047aa6:	2164      	movs	r1, #100	; 0x64
 8047aa8:	4359      	muls	r1, r3
 8047aaa:	f000 000f 	and.w	r0, r0, #15
 8047aae:	f001 fd25 	bl	80494fc <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 8047ab2:	a910      	add	r1, sp, #64	; 0x40
                datarate = payload[macIndex++] & 0x0F;
 8047ab4:	b2e4      	uxtb	r4, r4
                macCmdPayload[0] = status;
 8047ab6:	f801 0d28 	strb.w	r0, [r1, #-40]!
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8047aba:	2201      	movs	r2, #1
 8047abc:	2011      	movs	r0, #17
 8047abe:	e6ac      	b.n	804781a <ProcessMacCommands.isra.1.constprop.7+0x262>
                beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8047ac0:	f108 0302 	add.w	r3, r8, #2
                beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8047ac4:	b2db      	uxtb	r3, r3
                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8047ac6:	4a1a      	ldr	r2, [pc, #104]	; (8047b30 <ProcessMacCommands.isra.1.constprop.7+0x578>)
                beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8047ac8:	5ce8      	ldrb	r0, [r5, r3]
 8047aca:	5d2b      	ldrb	r3, [r5, r4]
                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8047acc:	6812      	ldr	r2, [r2, #0]
                beaconTimingChannel = payload[macIndex++];
 8047ace:	f108 0404 	add.w	r4, r8, #4
                beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8047ad2:	f108 0803 	add.w	r8, r8, #3
                beaconTimingChannel = payload[macIndex++];
 8047ad6:	fa5f f888 	uxtb.w	r8, r8
                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8047ada:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8047ade:	f815 1008 	ldrb.w	r1, [r5, r8]
                beaconTimingChannel = payload[macIndex++];
 8047ae2:	b2e4      	uxtb	r4, r4
                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8047ae4:	f001 fd0c 	bl	8049500 <LoRaMacClassBBeaconTimingAns>
 8047ae8:	e5be      	b.n	8047668 <ProcessMacCommands.isra.1.constprop.7+0xb0>
                    frequency = ( uint32_t )payload[macIndex++];
 8047aea:	5d28      	ldrb	r0, [r5, r4]
 8047aec:	f108 0302 	add.w	r3, r8, #2
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8047af0:	f108 0404 	add.w	r4, r8, #4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8047af4:	f108 0803 	add.w	r8, r8, #3
 8047af8:	b2db      	uxtb	r3, r3
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8047afa:	fa5f f888 	uxtb.w	r8, r8
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8047afe:	5cea      	ldrb	r2, [r5, r3]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8047b00:	f815 3008 	ldrb.w	r3, [r5, r8]
 8047b04:	041b      	lsls	r3, r3, #16
 8047b06:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8047b0a:	4303      	orrs	r3, r0
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8047b0c:	2064      	movs	r0, #100	; 0x64
 8047b0e:	4358      	muls	r0, r3
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8047b10:	b2e4      	uxtb	r4, r4
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8047b12:	f001 fcf7 	bl	8049504 <LoRaMacClassBBeaconFreqReq>
 8047b16:	b130      	cbz	r0, 8047b26 <ProcessMacCommands.isra.1.constprop.7+0x56e>
                        macCmdPayload[0] = 1;
 8047b18:	2301      	movs	r3, #1
 8047b1a:	f88d 3018 	strb.w	r3, [sp, #24]
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8047b1e:	2201      	movs	r2, #1
 8047b20:	a906      	add	r1, sp, #24
 8047b22:	2013      	movs	r0, #19
 8047b24:	e679      	b.n	804781a <ProcessMacCommands.isra.1.constprop.7+0x262>
                        macCmdPayload[0] = 0;
 8047b26:	f88d 0018 	strb.w	r0, [sp, #24]
 8047b2a:	e7f8      	b.n	8047b1e <ProcessMacCommands.isra.1.constprop.7+0x566>
 8047b2c:	0804f360 	.word	0x0804f360
 8047b30:	2000d70c 	.word	0x2000d70c

08047b34 <LoRaMacIsBusy>:
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8047b34:	4b06      	ldr	r3, [pc, #24]	; (8047b50 <LoRaMacIsBusy+0x1c>)
 8047b36:	f8d3 2344 	ldr.w	r2, [r3, #836]	; 0x344
 8047b3a:	b932      	cbnz	r2, 8047b4a <LoRaMacIsBusy+0x16>
 8047b3c:	f893 0486 	ldrb.w	r0, [r3, #1158]	; 0x486
 8047b40:	f110 30ff 	adds.w	r0, r0, #4294967295
 8047b44:	bf18      	it	ne
 8047b46:	2001      	movne	r0, #1
 8047b48:	4770      	bx	lr
    return true;
 8047b4a:	2001      	movs	r0, #1
}
 8047b4c:	4770      	bx	lr
 8047b4e:	bf00      	nop
 8047b50:	2000a11c 	.word	0x2000a11c

08047b54 <PrepareFrame>:
{
 8047b54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8047b58:	f8bd b030 	ldrh.w	fp, [sp, #48]	; 0x30
    MacCtx.PktBufferLen = 0;
 8047b5c:	4e58      	ldr	r6, [pc, #352]	; (8047cc0 <PrepareFrame+0x16c>)
 8047b5e:	2500      	movs	r5, #0
        fBufferSize = 0;
 8047b60:	42ab      	cmp	r3, r5
 8047b62:	bf08      	it	eq
 8047b64:	46ab      	moveq	fp, r5
 8047b66:	469a      	mov	sl, r3
{
 8047b68:	4680      	mov	r8, r0
    PRINTF("PREPARE FRAME\r\n");
 8047b6a:	4856      	ldr	r0, [pc, #344]	; (8047cc4 <PrepareFrame+0x170>)
    MacCtx.PktBufferLen = 0;
 8047b6c:	80b5      	strh	r5, [r6, #4]
{
 8047b6e:	460f      	mov	r7, r1
 8047b70:	4691      	mov	r9, r2
    MacCtx.NodeAckRequested = false;
 8047b72:	f886 5418 	strb.w	r5, [r6, #1048]	; 0x418
    size_t macCmdsSize = 0;
 8047b76:	e9cd 5500 	strd	r5, r5, [sp]
    PRINTF("PREPARE FRAME\r\n");
 8047b7a:	f003 fec7 	bl	804b90c <TraceSend>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8047b7e:	465a      	mov	r2, fp
 8047b80:	4651      	mov	r1, sl
 8047b82:	f506 709e 	add.w	r0, r6, #316	; 0x13c
 8047b86:	f003 ff20 	bl	804b9ca <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8047b8a:	fa5f f28b 	uxtb.w	r2, fp
 8047b8e:	f886 223b 	strb.w	r2, [r6, #571]	; 0x23b
    MacCtx.PktBuffer[0] = macHdr->Value;
 8047b92:	f898 3000 	ldrb.w	r3, [r8]
 8047b96:	71b3      	strb	r3, [r6, #6]
    switch( macHdr->Bits.MType )
 8047b98:	f898 1000 	ldrb.w	r1, [r8]
 8047b9c:	0949      	lsrs	r1, r1, #5
 8047b9e:	2904      	cmp	r1, #4
 8047ba0:	4634      	mov	r4, r6
 8047ba2:	d037      	beq.n	8047c14 <PrepareFrame+0xc0>
 8047ba4:	2907      	cmp	r1, #7
 8047ba6:	d079      	beq.n	8047c9c <PrepareFrame+0x148>
 8047ba8:	2902      	cmp	r1, #2
 8047baa:	f040 8085 	bne.w	8047cb8 <PrepareFrame+0x164>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8047bae:	2304      	movs	r3, #4
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8047bb0:	4d45      	ldr	r5, [pc, #276]	; (8047cc8 <PrepareFrame+0x174>)
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8047bb2:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8047bb6:	23ff      	movs	r3, #255	; 0xff
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8047bb8:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8047bbc:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8047bc0:	f898 3000 	ldrb.w	r3, [r8]
 8047bc4:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 8047bc8:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8047bcc:	f884 912c 	strb.w	r9, [r4, #300]	; 0x12c
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 8047bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8047bd2:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8047bd6:	783b      	ldrb	r3, [r7, #0]
 8047bd8:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8047bdc:	4668      	mov	r0, sp
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8047bde:	f505 739b 	add.w	r3, r5, #310	; 0x136
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8047be2:	f884 2134 	strb.w	r2, [r4, #308]	; 0x134
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8047be6:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8047bea:	f001 ffdf 	bl	8049bac <LoRaMacCryptoGetFCntUp>
 8047bee:	2800      	cmp	r0, #0
 8047bf0:	d164      	bne.n	8047cbc <PrepareFrame+0x168>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8047bf2:	9b00      	ldr	r3, [sp, #0]
            MacCtx.McpsConfirm.NbRetries = 0;
 8047bf4:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
            MacCtx.McpsConfirm.AckReceived = false;
 8047bf8:	f884 0444 	strb.w	r0, [r4, #1092]	; 0x444
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8047bfc:	a801      	add	r0, sp, #4
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8047bfe:	f8a4 311a 	strh.w	r3, [r4, #282]	; 0x11a
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8047c02:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8047c06:	f001 fd4d 	bl	80496a4 <LoRaMacCommandsGetSizeSerializedCmds>
 8047c0a:	b138      	cbz	r0, 8047c1c <PrepareFrame+0xc8>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8047c0c:	2013      	movs	r0, #19
}
 8047c0e:	b003      	add	sp, #12
 8047c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MacCtx.NodeAckRequested = true;
 8047c14:	2301      	movs	r3, #1
 8047c16:	f886 3418 	strb.w	r3, [r6, #1048]	; 0x418
 8047c1a:	e7c8      	b.n	8047bae <PrepareFrame+0x5a>
            if( macCmdsSize > 0 )
 8047c1c:	9b01      	ldr	r3, [sp, #4]
 8047c1e:	b90b      	cbnz	r3, 8047c24 <PrepareFrame+0xd0>
    return LORAMAC_STATUS_OK;
 8047c20:	2000      	movs	r0, #0
 8047c22:	e7f4      	b.n	8047c0e <PrepareFrame+0xba>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( MacCtx.NvmCtx->MacParams.ChannelsDatarate );
 8047c24:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8047c28:	f993 00f9 	ldrsb.w	r0, [r3, #249]	; 0xf9
 8047c2c:	f7ff fb66 	bl	80472fc <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8047c30:	f894 323b 	ldrb.w	r3, [r4, #571]	; 0x23b
 8047c34:	b1eb      	cbz	r3, 8047c72 <PrepareFrame+0x11e>
 8047c36:	9b01      	ldr	r3, [sp, #4]
 8047c38:	2b0f      	cmp	r3, #15
 8047c3a:	d80f      	bhi.n	8047c5c <PrepareFrame+0x108>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8047c3c:	f505 728b 	add.w	r2, r5, #278	; 0x116
 8047c40:	a901      	add	r1, sp, #4
 8047c42:	200f      	movs	r0, #15
 8047c44:	f001 fd3a 	bl	80496bc <LoRaMacCommandsSerializeCmds>
 8047c48:	2800      	cmp	r0, #0
 8047c4a:	d1df      	bne.n	8047c0c <PrepareFrame+0xb8>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8047c4c:	783b      	ldrb	r3, [r7, #0]
 8047c4e:	9a01      	ldr	r2, [sp, #4]
 8047c50:	f362 0303 	bfi	r3, r2, #0, #4
 8047c54:	703b      	strb	r3, [r7, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8047c56:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
 8047c5a:	e7d8      	b.n	8047c0e <PrepareFrame+0xba>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8047c5c:	f8d4 2488 	ldr.w	r2, [r4, #1160]	; 0x488
 8047c60:	a901      	add	r1, sp, #4
 8047c62:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 8047c66:	f001 fd29 	bl	80496bc <LoRaMacCommandsSerializeCmds>
 8047c6a:	2800      	cmp	r0, #0
 8047c6c:	d1ce      	bne.n	8047c0c <PrepareFrame+0xb8>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8047c6e:	200a      	movs	r0, #10
 8047c70:	e7cd      	b.n	8047c0e <PrepareFrame+0xba>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8047c72:	f8d4 2488 	ldr.w	r2, [r4, #1160]	; 0x488
 8047c76:	a901      	add	r1, sp, #4
 8047c78:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 8047c7c:	f001 fd1e 	bl	80496bc <LoRaMacCommandsSerializeCmds>
 8047c80:	2800      	cmp	r0, #0
 8047c82:	d1c3      	bne.n	8047c0c <PrepareFrame+0xb8>
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 8047c84:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8047c88:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 8047c8c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8047c90:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8047c94:	9b01      	ldr	r3, [sp, #4]
 8047c96:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 8047c9a:	e7b8      	b.n	8047c0e <PrepareFrame+0xba>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8047c9c:	f1ba 0f00 	cmp.w	sl, #0
 8047ca0:	d0be      	beq.n	8047c20 <PrepareFrame+0xcc>
 8047ca2:	2a00      	cmp	r2, #0
 8047ca4:	d0bc      	beq.n	8047c20 <PrepareFrame+0xcc>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8047ca6:	4651      	mov	r1, sl
 8047ca8:	1df0      	adds	r0, r6, #7
 8047caa:	f003 fe8e 	bl	804b9ca <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8047cae:	f896 323b 	ldrb.w	r3, [r6, #571]	; 0x23b
 8047cb2:	3301      	adds	r3, #1
 8047cb4:	80b3      	strh	r3, [r6, #4]
 8047cb6:	e7b3      	b.n	8047c20 <PrepareFrame+0xcc>
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8047cb8:	2002      	movs	r0, #2
 8047cba:	e7a8      	b.n	8047c0e <PrepareFrame+0xba>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8047cbc:	2012      	movs	r0, #18
 8047cbe:	e7a6      	b.n	8047c0e <PrepareFrame+0xba>
 8047cc0:	2000a11c 	.word	0x2000a11c
 8047cc4:	0804f59d 	.word	0x0804f59d
 8047cc8:	2000a122 	.word	0x2000a122

08047ccc <SendFrameOnChannel>:
{
 8047ccc:	b530      	push	{r4, r5, lr}
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8047cce:	4c38      	ldr	r4, [pc, #224]	; (8047db0 <SendFrameOnChannel+0xe4>)
{
 8047cd0:	b087      	sub	sp, #28
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8047cd2:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    txConfig.Channel = channel;
 8047cd6:	f88d 0008 	strb.w	r0, [sp, #8]
    int8_t txPower = 0;
 8047cda:	2200      	movs	r2, #0
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8047cdc:	f893 10f9 	ldrb.w	r1, [r3, #249]	; 0xf9
    int8_t txPower = 0;
 8047ce0:	f88d 2007 	strb.w	r2, [sp, #7]
    txConfig.TxPower = TX_POWER_0/*MacCtx.NvmCtx->MacParams.ChannelsTxPower*/;
 8047ce4:	f88d 200a 	strb.w	r2, [sp, #10]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 8047ce8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8047cec:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8047cf0:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8047cf2:	88a3      	ldrh	r3, [r4, #4]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8047cf4:	f88d 1009 	strb.w	r1, [sp, #9]
{
 8047cf8:	4605      	mov	r5, r0
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 8047cfa:	9203      	str	r2, [sp, #12]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8047cfc:	f8ad 3014 	strh.w	r3, [sp, #20]
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8047d00:	f001 fbeb 	bl	80494da <LoRaMacClassBIsBeaconExpected>
 8047d04:	2800      	cmp	r0, #0
 8047d06:	d151      	bne.n	8047dac <SendFrameOnChannel+0xe0>
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8047d08:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8047d0c:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8047d10:	2b01      	cmp	r3, #1
 8047d12:	d10b      	bne.n	8047d2c <SendFrameOnChannel+0x60>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8047d14:	f001 fbe3 	bl	80494de <LoRaMacClassBIsPingExpected>
 8047d18:	b110      	cbz	r0, 8047d20 <SendFrameOnChannel+0x54>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8047d1a:	200f      	movs	r0, #15
}
 8047d1c:	b007      	add	sp, #28
 8047d1e:	bd30      	pop	{r4, r5, pc}
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8047d20:	f001 fbdf 	bl	80494e2 <LoRaMacClassBIsMulticastExpected>
 8047d24:	2800      	cmp	r0, #0
 8047d26:	d1f8      	bne.n	8047d1a <SendFrameOnChannel+0x4e>
            LoRaMacClassBStopRxSlots( );
 8047d28:	f001 fbf0 	bl	804950c <LoRaMacClassBStopRxSlots>
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8047d2c:	f8d4 0488 	ldr.w	r0, [r4, #1160]	; 0x488
 8047d30:	4b20      	ldr	r3, [pc, #128]	; (8047db4 <SendFrameOnChannel+0xe8>)
 8047d32:	7800      	ldrb	r0, [r0, #0]
 8047d34:	f10d 0207 	add.w	r2, sp, #7
 8047d38:	a902      	add	r1, sp, #8
 8047d3a:	f002 fb2d 	bl	804a398 <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8047d3e:	2301      	movs	r3, #1
 8047d40:	f884 3441 	strb.w	r3, [r4, #1089]	; 0x441
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8047d44:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8047d48:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 8047d4c:	f884 3442 	strb.w	r3, [r4, #1090]	; 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 8047d50:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8047d54:	f884 3443 	strb.w	r3, [r4, #1091]	; 0x443
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8047d58:	f8d4 341c 	ldr.w	r3, [r4, #1052]	; 0x41c
    MacCtx.McpsConfirm.Channel = channel;
 8047d5c:	f8c4 5450 	str.w	r5, [r4, #1104]	; 0x450
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8047d60:	f8c4 3448 	str.w	r3, [r4, #1096]	; 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8047d64:	f8c4 3458 	str.w	r3, [r4, #1112]	; 0x458
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8047d68:	f001 fbbd 	bl	80494e6 <LoRaMacClassBIsBeaconModeActive>
 8047d6c:	b9b0      	cbnz	r0, 8047d9c <SendFrameOnChannel+0xd0>
    LoRaMacClassBHaltBeaconing( );
 8047d6e:	f001 fbbc 	bl	80494ea <LoRaMacClassBHaltBeaconing>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8047d72:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 8047d76:	f043 0302 	orr.w	r3, r3, #2
 8047d7a:	f8c4 3344 	str.w	r3, [r4, #836]	; 0x344
    if( MacCtx.NodeAckRequested == false )
 8047d7e:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 8047d82:	b923      	cbnz	r3, 8047d8e <SendFrameOnChannel+0xc2>
        MacCtx.ChannelsNbTransCounter++;
 8047d84:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 8047d88:	3301      	adds	r3, #1
 8047d8a:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8047d8e:	4b0a      	ldr	r3, [pc, #40]	; (8047db8 <SendFrameOnChannel+0xec>)
 8047d90:	480a      	ldr	r0, [pc, #40]	; (8047dbc <SendFrameOnChannel+0xf0>)
 8047d92:	7921      	ldrb	r1, [r4, #4]
 8047d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047d96:	4798      	blx	r3
    return LORAMAC_STATUS_OK;
 8047d98:	2000      	movs	r0, #0
 8047d9a:	e7bf      	b.n	8047d1c <SendFrameOnChannel+0x50>
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8047d9c:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
 8047da0:	f001 fbb2 	bl	8049508 <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 8047da4:	2800      	cmp	r0, #0
 8047da6:	d0e2      	beq.n	8047d6e <SendFrameOnChannel+0xa2>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8047da8:	2010      	movs	r0, #16
 8047daa:	e7b7      	b.n	8047d1c <SendFrameOnChannel+0x50>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8047dac:	200e      	movs	r0, #14
 8047dae:	e7b5      	b.n	8047d1c <SendFrameOnChannel+0x50>
 8047db0:	2000a11c 	.word	0x2000a11c
 8047db4:	2000a538 	.word	0x2000a538
 8047db8:	0804efb8 	.word	0x0804efb8
 8047dbc:	2000a122 	.word	0x2000a122

08047dc0 <ScheduleTx>:
{
 8047dc0:	b570      	push	{r4, r5, r6, lr}
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
 8047dc2:	4c80      	ldr	r4, [pc, #512]	; (8047fc4 <ScheduleTx+0x204>)
    TimerTime_t dutyCycleTimeOff = 0;
 8047dc4:	2300      	movs	r3, #0
{
 8047dc6:	b088      	sub	sp, #32
 8047dc8:	4605      	mov	r5, r0
    PRINTF("ScheduleTx\r\n");
 8047dca:	487f      	ldr	r0, [pc, #508]	; (8047fc8 <ScheduleTx+0x208>)
    size_t macCmdsSize = 0;
 8047dcc:	e9cd 3302 	strd	r3, r3, [sp, #8]
    PRINTF("ScheduleTx\r\n");
 8047dd0:	f003 fd9c 	bl	804b90c <TraceSend>
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
 8047dd4:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8047dd8:	f893 21d4 	ldrb.w	r2, [r3, #468]	; 0x1d4
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
 8047ddc:	f893 113e 	ldrb.w	r1, [r3, #318]	; 0x13e
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8047de0:	2a00      	cmp	r2, #0
 8047de2:	d15c      	bne.n	8047e9e <ScheduleTx+0xde>
        calcBackOff.Joined = true;
 8047de4:	f88d 2014 	strb.w	r2, [sp, #20]
    calcBackOff.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 8047de8:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
    calcBackOff.Channel = channel;
 8047dec:	f88d 1017 	strb.w	r1, [sp, #23]
    calcBackOff.ElapsedTime = TimerGetElapsedTime( MacCtx.NvmCtx->InitializationTime );
 8047df0:	f8d3 01cc 	ldr.w	r0, [r3, #460]	; 0x1cc
    calcBackOff.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 8047df4:	f88d 2016 	strb.w	r2, [sp, #22]
    calcBackOff.ElapsedTime = TimerGetElapsedTime( MacCtx.NvmCtx->InitializationTime );
 8047df8:	f003 fd3e 	bl	804b878 <TimerGetElapsedTime>
    calcBackOff.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8047dfc:	f8d4 341c 	ldr.w	r3, [r4, #1052]	; 0x41c
 8047e00:	9307      	str	r3, [sp, #28]
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 8047e02:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
    calcBackOff.ElapsedTime = TimerGetElapsedTime( MacCtx.NvmCtx->InitializationTime );
 8047e06:	9006      	str	r0, [sp, #24]
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 8047e08:	075b      	lsls	r3, r3, #29
    calcBackOff.LastTxIsJoinRequest = false;
 8047e0a:	f04f 0000 	mov.w	r0, #0
 8047e0e:	f88d 0015 	strb.w	r0, [sp, #21]
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 8047e12:	d505      	bpl.n	8047e20 <ScheduleTx+0x60>
 8047e14:	f001 fd14 	bl	8049840 <LoRaMacConfirmQueueIsCmdActive>
 8047e18:	b110      	cbz	r0, 8047e20 <ScheduleTx+0x60>
        calcBackOff.LastTxIsJoinRequest = true;
 8047e1a:	2301      	movs	r3, #1
 8047e1c:	f88d 3015 	strb.w	r3, [sp, #21]
    RegionCalcBackOff( MacCtx.NvmCtx->Region, &calcBackOff );
 8047e20:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8047e24:	a905      	add	r1, sp, #20
 8047e26:	7818      	ldrb	r0, [r3, #0]
 8047e28:	f002 faf1 	bl	804a40e <RegionCalcBackOff>
    MacCtx.NvmCtx->AggregatedTimeOff = ( MacCtx.TxTimeOnAir * MacCtx.NvmCtx->AggregatedDCycle - MacCtx.TxTimeOnAir );
 8047e2c:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8047e30:	f8b3 21c2 	ldrh.w	r2, [r3, #450]	; 0x1c2
 8047e34:	1e51      	subs	r1, r2, #1
 8047e36:	f8d4 241c 	ldr.w	r2, [r4, #1052]	; 0x41c
 8047e3a:	434a      	muls	r2, r1
 8047e3c:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 8047e40:	9205      	str	r2, [sp, #20]
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8047e42:	f893 20f9 	ldrb.w	r2, [r3, #249]	; 0xf9
 8047e46:	f88d 201c 	strb.w	r2, [sp, #28]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 8047e4a:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
 8047e4e:	f88d 201e 	strb.w	r2, [sp, #30]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8047e52:	f893 21d4 	ldrb.w	r2, [r3, #468]	; 0x1d4
 8047e56:	bb22      	cbnz	r2, 8047ea2 <ScheduleTx+0xe2>
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &dutyCycleTimeOff, &MacCtx.NvmCtx->AggregatedTimeOff );
 8047e58:	7818      	ldrb	r0, [r3, #0]
        nextChan.Joined = true;
 8047e5a:	f88d 201d 	strb.w	r2, [sp, #29]
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &dutyCycleTimeOff, &MacCtx.NvmCtx->AggregatedTimeOff );
 8047e5e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 8047e62:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8047e66:	9206      	str	r2, [sp, #24]
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &dutyCycleTimeOff, &MacCtx.NvmCtx->AggregatedTimeOff );
 8047e68:	9300      	str	r3, [sp, #0]
 8047e6a:	4a58      	ldr	r2, [pc, #352]	; (8047fcc <ScheduleTx+0x20c>)
 8047e6c:	ab02      	add	r3, sp, #8
 8047e6e:	a905      	add	r1, sp, #20
 8047e70:	f002 fad3 	bl	804a41a <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 8047e74:	b1b8      	cbz	r0, 8047ea6 <ScheduleTx+0xe6>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8047e76:	280b      	cmp	r0, #11
 8047e78:	d10f      	bne.n	8047e9a <ScheduleTx+0xda>
 8047e7a:	b175      	cbz	r5, 8047e9a <ScheduleTx+0xda>
            if( dutyCycleTimeOff != 0 )
 8047e7c:	9902      	ldr	r1, [sp, #8]
 8047e7e:	b159      	cbz	r1, 8047e98 <ScheduleTx+0xd8>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8047e80:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
                TimerSetValue( &MacCtx.TxDelayedTimer, dutyCycleTimeOff );
 8047e84:	4852      	ldr	r0, [pc, #328]	; (8047fd0 <ScheduleTx+0x210>)
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8047e86:	f043 0320 	orr.w	r3, r3, #32
 8047e8a:	f8c4 3344 	str.w	r3, [r4, #836]	; 0x344
                TimerSetValue( &MacCtx.TxDelayedTimer, dutyCycleTimeOff );
 8047e8e:	f003 fcdb 	bl	804b848 <TimerSetValue>
                TimerStart( &MacCtx.TxDelayedTimer );
 8047e92:	484f      	ldr	r0, [pc, #316]	; (8047fd0 <ScheduleTx+0x210>)
 8047e94:	f003 fc3e 	bl	804b714 <TimerStart>
            return LORAMAC_STATUS_OK;
 8047e98:	2000      	movs	r0, #0
}
 8047e9a:	b008      	add	sp, #32
 8047e9c:	bd70      	pop	{r4, r5, r6, pc}
        calcBackOff.Joined = true;
 8047e9e:	2201      	movs	r2, #1
 8047ea0:	e7a0      	b.n	8047de4 <ScheduleTx+0x24>
        nextChan.Joined = true;
 8047ea2:	2201      	movs	r2, #1
 8047ea4:	e7d8      	b.n	8047e58 <ScheduleTx+0x98>
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8047ea6:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
 8047eaa:	4d4a      	ldr	r5, [pc, #296]	; (8047fd4 <ScheduleTx+0x214>)
 8047eac:	780e      	ldrb	r6, [r1, #0]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region, MacCtx.NvmCtx->MacParams.DownlinkDwellTime, MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 8047eae:	f991 3119 	ldrsb.w	r3, [r1, #281]	; 0x119
 8047eb2:	f991 20f9 	ldrsb.w	r2, [r1, #249]	; 0xf9
 8047eb6:	f891 112d 	ldrb.w	r1, [r1, #301]	; 0x12d
 8047eba:	4630      	mov	r0, r6
 8047ebc:	f002 fabd 	bl	804a43a <RegionApplyDrOffset>
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 8047ec0:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8047ec4:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
 8047ec8:	9500      	str	r5, [sp, #0]
 8047eca:	b241      	sxtb	r1, r0
 8047ecc:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8047ed0:	4630      	mov	r0, r6
 8047ed2:	f002 fa49 	bl	804a368 <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8047ed6:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8047eda:	3514      	adds	r5, #20
 8047edc:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
 8047ee0:	f993 1120 	ldrsb.w	r1, [r3, #288]	; 0x120
 8047ee4:	7818      	ldrb	r0, [r3, #0]
 8047ee6:	9500      	str	r5, [sp, #0]
 8047ee8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8047eec:	f002 fa3c 	bl	804a368 <RegionComputeRxWindowParameters>
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8047ef0:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8047ef4:	f893 21d4 	ldrb.w	r2, [r3, #468]	; 0x1d4
 8047ef8:	b9e2      	cbnz	r2, 8047f34 <ScheduleTx+0x174>
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8047efa:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8047efe:	f8d4 13c8 	ldr.w	r1, [r4, #968]	; 0x3c8
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8047f02:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8047f06:	440a      	add	r2, r1
 8047f08:	f8c4 23b4 	str.w	r2, [r4, #948]	; 0x3b4
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8047f0c:	f8d4 23dc 	ldr.w	r2, [r4, #988]	; 0x3dc
    LoRaMacStatus_t retval = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 8047f10:	f894 6419 	ldrb.w	r6, [r4, #1049]	; 0x419
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8047f14:	4413      	add	r3, r2
 8047f16:	f8c4 33b8 	str.w	r3, [r4, #952]	; 0x3b8
    LoRaMacStatus_t retval = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 8047f1a:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8047f1e:	f993 50f9 	ldrsb.w	r5, [r3, #249]	; 0xf9
    uint32_t fCntUp = 0;
 8047f22:	2300      	movs	r3, #0
 8047f24:	9304      	str	r3, [sp, #16]
    switch( MacCtx.TxMsg.Type )
 8047f26:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
 8047f2a:	b313      	cbz	r3, 8047f72 <ScheduleTx+0x1b2>
 8047f2c:	2b04      	cmp	r3, #4
 8047f2e:	d02b      	beq.n	8047f88 <ScheduleTx+0x1c8>
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8047f30:	2003      	movs	r0, #3
 8047f32:	e7b2      	b.n	8047e9a <ScheduleTx+0xda>
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8047f34:	a803      	add	r0, sp, #12
 8047f36:	f001 fbb5 	bl	80496a4 <LoRaMacCommandsGetSizeSerializedCmds>
 8047f3a:	2800      	cmp	r0, #0
 8047f3c:	d13d      	bne.n	8047fba <ScheduleTx+0x1fa>
        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 8047f3e:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8047f42:	f894 523b 	ldrb.w	r5, [r4, #571]	; 0x23b
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8047f46:	f993 00f9 	ldrsb.w	r0, [r3, #249]	; 0xf9
        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 8047f4a:	f89d 600c 	ldrb.w	r6, [sp, #12]
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8047f4e:	f7ff f9d5 	bl	80472fc <GetMaxAppPayloadWithoutFOptsLength>
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8047f52:	4435      	add	r5, r6
 8047f54:	b280      	uxth	r0, r0
 8047f56:	42a8      	cmp	r0, r5
 8047f58:	d331      	bcc.n	8047fbe <ScheduleTx+0x1fe>
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8047f5a:	f8d4 2488 	ldr.w	r2, [r4, #1160]	; 0x488
 8047f5e:	f8d4 13c8 	ldr.w	r1, [r4, #968]	; 0x3c8
 8047f62:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 8047f66:	440b      	add	r3, r1
 8047f68:	f8c4 33b4 	str.w	r3, [r4, #948]	; 0x3b4
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8047f6c:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
 8047f70:	e7cc      	b.n	8047f0c <ScheduleTx+0x14c>
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8047f72:	4819      	ldr	r0, [pc, #100]	; (8047fd8 <ScheduleTx+0x218>)
 8047f74:	f001 fe5c 	bl	8049c30 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8047f78:	b9d8      	cbnz	r0, 8047fb2 <ScheduleTx+0x1f2>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8047f7a:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
 8047f7e:	80a3      	strh	r3, [r4, #4]
    return SendFrameOnChannel( 0/*MacCtx.Channel  JP*/);
 8047f80:	2000      	movs	r0, #0
 8047f82:	f7ff fea3 	bl	8047ccc <SendFrameOnChannel>
 8047f86:	e788      	b.n	8047e9a <ScheduleTx+0xda>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8047f88:	a804      	add	r0, sp, #16
 8047f8a:	f001 fe0f 	bl	8049bac <LoRaMacCryptoGetFCntUp>
 8047f8e:	b990      	cbnz	r0, 8047fb6 <ScheduleTx+0x1f6>
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8047f90:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 8047f94:	b91b      	cbnz	r3, 8047f9e <ScheduleTx+0x1de>
 8047f96:	f894 3416 	ldrb.w	r3, [r4, #1046]	; 0x416
 8047f9a:	2b01      	cmp	r3, #1
 8047f9c:	d902      	bls.n	8047fa4 <ScheduleTx+0x1e4>
                fCntUp -= 1;
 8047f9e:	9b04      	ldr	r3, [sp, #16]
 8047fa0:	3b01      	subs	r3, #1
 8047fa2:	9304      	str	r3, [sp, #16]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8047fa4:	4b0c      	ldr	r3, [pc, #48]	; (8047fd8 <ScheduleTx+0x218>)
 8047fa6:	9804      	ldr	r0, [sp, #16]
 8047fa8:	4632      	mov	r2, r6
 8047faa:	b2e9      	uxtb	r1, r5
 8047fac:	f001 fe70 	bl	8049c90 <LoRaMacCryptoSecureMessage>
 8047fb0:	e7e2      	b.n	8047f78 <ScheduleTx+0x1b8>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8047fb2:	2011      	movs	r0, #17
 8047fb4:	e771      	b.n	8047e9a <ScheduleTx+0xda>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8047fb6:	2012      	movs	r0, #18
 8047fb8:	e76f      	b.n	8047e9a <ScheduleTx+0xda>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8047fba:	2013      	movs	r0, #19
 8047fbc:	e76d      	b.n	8047e9a <ScheduleTx+0xda>
            return LORAMAC_STATUS_LENGTH_ERROR;
 8047fbe:	2008      	movs	r0, #8
 8047fc0:	e76b      	b.n	8047e9a <ScheduleTx+0xda>
 8047fc2:	bf00      	nop
 8047fc4:	2000a11c 	.word	0x2000a11c
 8047fc8:	0804f5ad 	.word	0x0804f5ad
 8047fcc:	2000a535 	.word	0x2000a535
 8047fd0:	2000a488 	.word	0x2000a488
 8047fd4:	2000a4d8 	.word	0x2000a4d8
 8047fd8:	2000a228 	.word	0x2000a228

08047fdc <OnTxDelayedTimerEvent>:
{
 8047fdc:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 8047fde:	4c12      	ldr	r4, [pc, #72]	; (8048028 <OnTxDelayedTimerEvent+0x4c>)
 8047fe0:	f504 705b 	add.w	r0, r4, #876	; 0x36c
 8047fe4:	f003 fc08 	bl	804b7f8 <TimerStop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8047fe8:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
    switch( ScheduleTx( true ) )
 8047fec:	2001      	movs	r0, #1
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8047fee:	f023 0320 	bic.w	r3, r3, #32
 8047ff2:	f8c4 3344 	str.w	r3, [r4, #836]	; 0x344
    switch( ScheduleTx( true ) )
 8047ff6:	f7ff fee3 	bl	8047dc0 <ScheduleTx>
 8047ffa:	b1a0      	cbz	r0, 8048026 <OnTxDelayedTimerEvent+0x4a>
 8047ffc:	280b      	cmp	r0, #11
 8047ffe:	d012      	beq.n	8048026 <OnTxDelayedTimerEvent+0x4a>
            MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8048000:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8048004:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 8048008:	f884 3442 	strb.w	r3, [r4, #1090]	; 0x442
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 804800c:	2009      	movs	r0, #9
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 804800e:	f894 3416 	ldrb.w	r3, [r4, #1046]	; 0x416
 8048012:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8048016:	f884 0441 	strb.w	r0, [r4, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 804801a:	f001 fbf9 	bl	8049810 <LoRaMacConfirmQueueSetStatusCmn>
}
 804801e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            StopRetransmission( );
 8048022:	f7ff b937 	b.w	8047294 <StopRetransmission>
}
 8048026:	bd10      	pop	{r4, pc}
 8048028:	2000a11c 	.word	0x2000a11c

0804802c <Send>:
{
 804802c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8048030:	4d47      	ldr	r5, [pc, #284]	; (8048150 <Send+0x124>)
{
 8048032:	4699      	mov	r9, r3
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8048034:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
{
 8048038:	b08b      	sub	sp, #44	; 0x2c
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 804803a:	f993 60f9 	ldrsb.w	r6, [r3, #249]	; 0xf9
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 804803e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8048042:	9304      	str	r3, [sp, #16]
{
 8048044:	4604      	mov	r4, r0
    PRINTF("Send\r\n");
 8048046:	4843      	ldr	r0, [pc, #268]	; (8048154 <Send+0x128>)
{
 8048048:	460f      	mov	r7, r1
 804804a:	4690      	mov	r8, r2
    PRINTF("Send\r\n");
 804804c:	f003 fc5e 	bl	804b90c <TraceSend>
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8048050:	f8d5 1488 	ldr.w	r1, [r5, #1160]	; 0x488
 8048054:	f891 31d4 	ldrb.w	r3, [r1, #468]	; 0x1d4
 8048058:	b93b      	cbnz	r3, 804806a <Send+0x3e>
    	PRINTF("NO NETWORK\r\n");
 804805a:	483f      	ldr	r0, [pc, #252]	; (8048158 <Send+0x12c>)
 804805c:	f003 fc56 	bl	804b90c <TraceSend>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8048060:	2407      	movs	r4, #7
}
 8048062:	4620      	mov	r0, r4
 8048064:	b00b      	add	sp, #44	; 0x2c
 8048066:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( MacCtx.NvmCtx->MaxDCycle == 0 )
 804806a:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
 804806e:	b90b      	cbnz	r3, 8048074 <Send+0x48>
        MacCtx.NvmCtx->AggregatedTimeOff = 0;
 8048070:	f8c1 31c8 	str.w	r3, [r1, #456]	; 0x1c8
    fCtrl.Bits.Adr           = MacCtx.NvmCtx->AdrCtrlOn;
 8048074:	f891 20f2 	ldrb.w	r2, [r1, #242]	; 0xf2
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8048078:	f891 00f0 	ldrb.w	r0, [r1, #240]	; 0xf0
    fCtrl.Bits.Adr           = MacCtx.NvmCtx->AdrCtrlOn;
 804807c:	f04f 0300 	mov.w	r3, #0
 8048080:	f362 13c7 	bfi	r3, r2, #7, #1
 8048084:	f88d 300c 	strb.w	r3, [sp, #12]
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8048088:	2801      	cmp	r0, #1
 804808a:	b2db      	uxtb	r3, r3
        fCtrl.Bits.FPending      = 1;
 804808c:	bf08      	it	eq
 804808e:	f043 0310 	orreq.w	r3, r3, #16
        fCtrl.Bits.FPending      = 0;
 8048092:	f88d 300c 	strb.w	r3, [sp, #12]
    if( MacCtx.NvmCtx->SrvAckRequested == true )
 8048096:	f891 31c0 	ldrb.w	r3, [r1, #448]	; 0x1c0
 804809a:	b12b      	cbz	r3, 80480a8 <Send+0x7c>
        fCtrl.Bits.Ack = 1;
 804809c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80480a0:	f043 0320 	orr.w	r3, r3, #32
 80480a4:	f88d 300c 	strb.w	r3, [sp, #12]
    adrNext.Version = MacCtx.NvmCtx->Version;
 80480a8:	f8d1 31d0 	ldr.w	r3, [r1, #464]	; 0x1d0
 80480ac:	9305      	str	r3, [sp, #20]
    adrNext.UpdateChanMask = true;
 80480ae:	2301      	movs	r3, #1
 80480b0:	f88d 3018 	strb.w	r3, [sp, #24]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 80480b4:	f8d1 30f4 	ldr.w	r3, [r1, #244]	; 0xf4
 80480b8:	9307      	str	r3, [sp, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80480ba:	f8b5 33f8 	ldrh.w	r3, [r5, #1016]	; 0x3f8
 80480be:	f8ad 3020 	strh.w	r3, [sp, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 80480c2:	f8b5 33fa 	ldrh.w	r3, [r5, #1018]	; 0x3fa
 80480c6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80480ca:	f891 30f9 	ldrb.w	r3, [r1, #249]	; 0xf9
 80480ce:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    adrNext.TxPower = TX_POWER_0 /*MacCtx.NvmCtx->MacParams.ChannelsTxPower*/;
 80480d2:	2300      	movs	r3, #0
 80480d4:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 80480d8:	f88d 2019 	strb.w	r2, [sp, #25]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80480dc:	f891 312c 	ldrb.w	r3, [r1, #300]	; 0x12c
 80480e0:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    adrNext.Region = MacCtx.NvmCtx->Region;
 80480e4:	460a      	mov	r2, r1
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 80480e6:	a805      	add	r0, sp, #20
    adrNext.Region = MacCtx.NvmCtx->Region;
 80480e8:	f812 3bf8 	ldrb.w	r3, [r2], #248
 80480ec:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 80480f0:	31f9      	adds	r1, #249	; 0xf9
 80480f2:	ab04      	add	r3, sp, #16
 80480f4:	f001 f97c 	bl	80493f0 <LoRaMacAdrCalcNext>
 80480f8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80480fc:	a90a      	add	r1, sp, #40	; 0x28
 80480fe:	f360 1386 	bfi	r3, r0, #6, #1
 8048102:	f801 3d1c 	strb.w	r3, [r1, #-28]!
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8048106:	4620      	mov	r0, r4
 8048108:	f8cd 9000 	str.w	r9, [sp]
 804810c:	4643      	mov	r3, r8
 804810e:	463a      	mov	r2, r7
 8048110:	f7ff fd20 	bl	8047b54 <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8048114:	4604      	mov	r4, r0
 8048116:	b108      	cbz	r0, 804811c <Send+0xf0>
 8048118:	280a      	cmp	r0, #10
 804811a:	d104      	bne.n	8048126 <Send+0xfa>
        status = ScheduleTx( false );
 804811c:	2000      	movs	r0, #0
 804811e:	f7ff fe4f 	bl	8047dc0 <ScheduleTx>
    if( status != LORAMAC_STATUS_OK )
 8048122:	4604      	mov	r4, r0
 8048124:	b138      	cbz	r0, 8048136 <Send+0x10a>
        MacCtx.NvmCtx->MacParams.ChannelsDatarate = datarate;
 8048126:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
        MacCtx.NvmCtx->MacParams.ChannelsTxPower = txPower;
 804812a:	2200      	movs	r2, #0
        MacCtx.NvmCtx->MacParams.ChannelsDatarate = datarate;
 804812c:	f883 60f9 	strb.w	r6, [r3, #249]	; 0xf9
        MacCtx.NvmCtx->MacParams.ChannelsTxPower = txPower;
 8048130:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
 8048134:	e795      	b.n	8048062 <Send+0x36>
        MacCtx.NvmCtx->SrvAckRequested = false;
 8048136:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
        MacCtx.NvmCtx->AdrAckCounter = adrAckCounter;
 804813a:	9a04      	ldr	r2, [sp, #16]
        MacCtx.NvmCtx->SrvAckRequested = false;
 804813c:	f883 01c0 	strb.w	r0, [r3, #448]	; 0x1c0
        MacCtx.NvmCtx->AdrAckCounter = adrAckCounter;
 8048140:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8048144:	f001 fa82 	bl	804964c <LoRaMacCommandsRemoveNoneStickyCmds>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8048148:	2800      	cmp	r0, #0
 804814a:	bf18      	it	ne
 804814c:	2413      	movne	r4, #19
 804814e:	e788      	b.n	8048062 <Send+0x36>
 8048150:	2000a11c 	.word	0x2000a11c
 8048154:	0804f5ba 	.word	0x0804f5ba
 8048158:	0804f5c1 	.word	0x0804f5c1

0804815c <GetCtxs>:
{
 804815c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    Contexts.MacNvmCtx = &NvmMacCtx;
 804815e:	4d18      	ldr	r5, [pc, #96]	; (80481c0 <GetCtxs+0x64>)
 8048160:	4c18      	ldr	r4, [pc, #96]	; (80481c4 <GetCtxs+0x68>)
 8048162:	f205 438c 	addw	r3, r5, #1164	; 0x48c
 8048166:	6023      	str	r3, [r4, #0]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 8048168:	f104 0014 	add.w	r0, r4, #20
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
 804816c:	f44f 73ee 	mov.w	r3, #476	; 0x1dc
 8048170:	6063      	str	r3, [r4, #4]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 8048172:	f001 fd15 	bl	8049ba0 <LoRaMacCryptoGetNvmCtx>
    GetNvmCtxParams_t params ={ 0 };
 8048176:	a902      	add	r1, sp, #8
 8048178:	2300      	movs	r3, #0
 804817a:	f841 3d04 	str.w	r3, [r1, #-4]!
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 804817e:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 8048182:	6120      	str	r0, [r4, #16]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 8048184:	7818      	ldrb	r0, [r3, #0]
 8048186:	f002 f8d2 	bl	804a32e <RegionGetNvmCtx>
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 804818a:	9b01      	ldr	r3, [sp, #4]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 804818c:	60a0      	str	r0, [r4, #8]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 804818e:	f104 001c 	add.w	r0, r4, #28
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 8048192:	60e3      	str	r3, [r4, #12]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 8048194:	f7fe ff66 	bl	8047064 <SecureElementGetNvmCtx>
 8048198:	61a0      	str	r0, [r4, #24]
    Contexts.CommandsNvmCtx = LoRaMacCommandsGetNvmCtx( &Contexts.CommandsNvmCtxSize );
 804819a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 804819e:	f001 f9cd 	bl	804953c <LoRaMacCommandsGetNvmCtx>
 80481a2:	6220      	str	r0, [r4, #32]
    Contexts.ClassBNvmCtx = LoRaMacClassBGetNvmCtx( &Contexts.ClassBNvmCtxSize );
 80481a4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80481a8:	f001 f98b 	bl	80494c2 <LoRaMacClassBGetNvmCtx>
 80481ac:	62a0      	str	r0, [r4, #40]	; 0x28
    Contexts.ConfirmQueueNvmCtx = LoRaMacConfirmQueueGetNvmCtx( &Contexts.ConfirmQueueNvmCtxSize );
 80481ae:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80481b2:	f001 fac3 	bl	804973c <LoRaMacConfirmQueueGetNvmCtx>
 80481b6:	6320      	str	r0, [r4, #48]	; 0x30
}
 80481b8:	4620      	mov	r0, r4
 80481ba:	b003      	add	sp, #12
 80481bc:	bd30      	pop	{r4, r5, pc}
 80481be:	bf00      	nop
 80481c0:	2000a11c 	.word	0x2000a11c
 80481c4:	2000d71c 	.word	0x2000d71c

080481c8 <RestoreCtxs>:
{
 80481c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( contexts == NULL )
 80481ca:	4604      	mov	r4, r0
 80481cc:	2800      	cmp	r0, #0
 80481ce:	d033      	beq.n	8048238 <RestoreCtxs+0x70>
    if( MacCtx.MacState != LORAMAC_STOPPED )
 80481d0:	4d1d      	ldr	r5, [pc, #116]	; (8048248 <RestoreCtxs+0x80>)
 80481d2:	f8d5 3344 	ldr.w	r3, [r5, #836]	; 0x344
 80481d6:	2b01      	cmp	r3, #1
 80481d8:	d130      	bne.n	804823c <RestoreCtxs+0x74>
    if( contexts->MacNvmCtx != NULL )
 80481da:	6801      	ldr	r1, [r0, #0]
 80481dc:	b121      	cbz	r1, 80481e8 <RestoreCtxs+0x20>
        memcpy1( ( uint8_t* ) &NvmMacCtx, ( uint8_t* ) contexts->MacNvmCtx, contexts->MacNvmCtxSize );
 80481de:	8882      	ldrh	r2, [r0, #4]
 80481e0:	f205 408c 	addw	r0, r5, #1164	; 0x48c
 80481e4:	f003 fbf1 	bl	804b9ca <memcpy1>
    params.Type = INIT_TYPE_RESTORE_CTX;
 80481e8:	2302      	movs	r3, #2
    params.NvmCtx = contexts->RegionNvmCtx;
 80481ea:	a902      	add	r1, sp, #8
    params.Type = INIT_TYPE_RESTORE_CTX;
 80481ec:	f88d 3004 	strb.w	r3, [sp, #4]
    params.NvmCtx = contexts->RegionNvmCtx;
 80481f0:	68a3      	ldr	r3, [r4, #8]
 80481f2:	f841 3d08 	str.w	r3, [r1, #-8]!
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 80481f6:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 80481fa:	7818      	ldrb	r0, [r3, #0]
 80481fc:	f002 f891 	bl	804a322 <RegionInitDefaults>
    if( SecureElementRestoreNvmCtx( contexts->SecureElementNvmCtx ) != SECURE_ELEMENT_SUCCESS )
 8048200:	69a0      	ldr	r0, [r4, #24]
 8048202:	f7fe ff21 	bl	8047048 <SecureElementRestoreNvmCtx>
 8048206:	b110      	cbz	r0, 804820e <RestoreCtxs+0x46>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8048208:	2011      	movs	r0, #17
}
 804820a:	b003      	add	sp, #12
 804820c:	bd30      	pop	{r4, r5, pc}
    if( LoRaMacCryptoRestoreNvmCtx( contexts->CryptoNvmCtx ) != LORAMAC_CRYPTO_SUCCESS )
 804820e:	6920      	ldr	r0, [r4, #16]
 8048210:	f001 fcb8 	bl	8049b84 <LoRaMacCryptoRestoreNvmCtx>
 8048214:	2800      	cmp	r0, #0
 8048216:	d1f7      	bne.n	8048208 <RestoreCtxs+0x40>
    if( LoRaMacCommandsRestoreNvmCtx( contexts->CommandsNvmCtx ) != LORAMAC_COMMANDS_SUCCESS )
 8048218:	6a20      	ldr	r0, [r4, #32]
 804821a:	f001 f981 	bl	8049520 <LoRaMacCommandsRestoreNvmCtx>
 804821e:	b978      	cbnz	r0, 8048240 <RestoreCtxs+0x78>
    if( LoRaMacClassBRestoreNvmCtx( contexts->ClassBNvmCtx ) != true )
 8048220:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8048222:	f001 f94c 	bl	80494be <LoRaMacClassBRestoreNvmCtx>
 8048226:	b168      	cbz	r0, 8048244 <RestoreCtxs+0x7c>
    if( LoRaMacConfirmQueueRestoreNvmCtx( contexts->ConfirmQueueNvmCtx ) != true )
 8048228:	6b20      	ldr	r0, [r4, #48]	; 0x30
 804822a:	f001 fa7b 	bl	8049724 <LoRaMacConfirmQueueRestoreNvmCtx>
    return LORAMAC_STATUS_OK;
 804822e:	2800      	cmp	r0, #0
 8048230:	bf0c      	ite	eq
 8048232:	2015      	moveq	r0, #21
 8048234:	2000      	movne	r0, #0
 8048236:	e7e8      	b.n	804820a <RestoreCtxs+0x42>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8048238:	2003      	movs	r0, #3
 804823a:	e7e6      	b.n	804820a <RestoreCtxs+0x42>
        return LORAMAC_STATUS_BUSY;
 804823c:	2001      	movs	r0, #1
 804823e:	e7e4      	b.n	804820a <RestoreCtxs+0x42>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8048240:	2013      	movs	r0, #19
 8048242:	e7e2      	b.n	804820a <RestoreCtxs+0x42>
        return LORAMAC_STATUS_CLASS_B_ERROR;
 8048244:	2014      	movs	r0, #20
 8048246:	e7e0      	b.n	804820a <RestoreCtxs+0x42>
 8048248:	2000a11c 	.word	0x2000a11c

0804824c <DetermineFrameType>:
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 804824c:	4602      	mov	r2, r0
 804824e:	b1d0      	cbz	r0, 8048286 <DetermineFrameType+0x3a>
 8048250:	b1c9      	cbz	r1, 8048286 <DetermineFrameType+0x3a>
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8048252:	7b03      	ldrb	r3, [r0, #12]
 8048254:	f013 000f 	ands.w	r0, r3, #15
 8048258:	d005      	beq.n	8048266 <DetermineFrameType+0x1a>
 804825a:	f892 3020 	ldrb.w	r3, [r2, #32]
 804825e:	b113      	cbz	r3, 8048266 <DetermineFrameType+0x1a>
        *fType = FRAME_TYPE_A;
 8048260:	2000      	movs	r0, #0
 8048262:	7008      	strb	r0, [r1, #0]
 8048264:	4770      	bx	lr
    else if( macMsg->FRMPayloadSize == 0 )
 8048266:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 804826a:	b91b      	cbnz	r3, 8048274 <DetermineFrameType+0x28>
        *fType = FRAME_TYPE_B;
 804826c:	2201      	movs	r2, #1
 804826e:	700a      	strb	r2, [r1, #0]
    return LORAMAC_STATUS_OK;
 8048270:	4618      	mov	r0, r3
 8048272:	4770      	bx	lr
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8048274:	b948      	cbnz	r0, 804828a <DetermineFrameType+0x3e>
 8048276:	f892 3020 	ldrb.w	r3, [r2, #32]
 804827a:	b913      	cbnz	r3, 8048282 <DetermineFrameType+0x36>
        *fType = FRAME_TYPE_C;
 804827c:	2302      	movs	r3, #2
        *fType = FRAME_TYPE_D;
 804827e:	700b      	strb	r3, [r1, #0]
 8048280:	4770      	bx	lr
 8048282:	2303      	movs	r3, #3
 8048284:	e7fb      	b.n	804827e <DetermineFrameType+0x32>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8048286:	2003      	movs	r0, #3
 8048288:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 804828a:	2017      	movs	r0, #23
}
 804828c:	4770      	bx	lr
	...

08048290 <LoRaMacProcess>:
{
 8048290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8048294:	b0a1      	sub	sp, #132	; 0x84
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8048296:	f3ef 8310 	mrs	r3, PRIMASK
    events = LoRaMacRadioEvents;
 804829a:	4cbd      	ldr	r4, [pc, #756]	; (8048590 <LoRaMacProcess+0x300>)
    LoRaMacRadioEvents.Value = 0;
 804829c:	2200      	movs	r2, #0
    events = LoRaMacRadioEvents;
 804829e:	6825      	ldr	r5, [r4, #0]
    LoRaMacRadioEvents.Value = 0;
 80482a0:	6022      	str	r2, [r4, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80482a2:	f383 8810 	msr	PRIMASK, r3
    if( events.Value != 0 )
 80482a6:	2d00      	cmp	r5, #0
 80482a8:	f000 80c3 	beq.w	8048432 <LoRaMacProcess+0x1a2>
 80482ac:	b2ed      	uxtb	r5, r5
        if( events.Events.TxDone == 1 )
 80482ae:	06e9      	lsls	r1, r5, #27
 80482b0:	d552      	bpl.n	8048358 <LoRaMacProcess+0xc8>
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 80482b2:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 80482b6:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80482ba:	2b02      	cmp	r3, #2
 80482bc:	d002      	beq.n	80482c4 <LoRaMacProcess+0x34>
        Radio.Sleep( );
 80482be:	4bb5      	ldr	r3, [pc, #724]	; (8048594 <LoRaMacProcess+0x304>)
 80482c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80482c2:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 80482c4:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 80482c8:	48b3      	ldr	r0, [pc, #716]	; (8048598 <LoRaMacProcess+0x308>)
 80482ca:	f003 fabd 	bl	804b848 <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer1 );
 80482ce:	48b2      	ldr	r0, [pc, #712]	; (8048598 <LoRaMacProcess+0x308>)
 80482d0:	f003 fa20 	bl	804b714 <TimerStart>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 80482d4:	f8d4 13b8 	ldr.w	r1, [r4, #952]	; 0x3b8
 80482d8:	48b0      	ldr	r0, [pc, #704]	; (804859c <LoRaMacProcess+0x30c>)
 80482da:	f003 fab5 	bl	804b848 <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer2 );
 80482de:	48af      	ldr	r0, [pc, #700]	; (804859c <LoRaMacProcess+0x30c>)
 80482e0:	f003 fa18 	bl	804b714 <TimerStart>
    if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 80482e4:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 80482e8:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
 80482ec:	2a02      	cmp	r2, #2
 80482ee:	d002      	beq.n	80482f6 <LoRaMacProcess+0x66>
 80482f0:	f894 2418 	ldrb.w	r2, [r4, #1048]	; 0x418
 80482f4:	b182      	cbz	r2, 8048318 <LoRaMacProcess+0x88>
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 80482f6:	a920      	add	r1, sp, #128	; 0x80
 80482f8:	2216      	movs	r2, #22
 80482fa:	f801 2d60 	strb.w	r2, [r1, #-96]!
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80482fe:	7818      	ldrb	r0, [r3, #0]
 8048300:	f001 ffff 	bl	804a302 <RegionGetPhyParam>
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8048304:	f8d4 13b8 	ldr.w	r1, [r4, #952]	; 0x3b8
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8048308:	900a      	str	r0, [sp, #40]	; 0x28
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 804830a:	4401      	add	r1, r0
 804830c:	48a4      	ldr	r0, [pc, #656]	; (80485a0 <LoRaMacProcess+0x310>)
 804830e:	f003 fa9b 	bl	804b848 <TimerSetValue>
        TimerStart( &MacCtx.AckTimeoutTimer );
 8048312:	48a3      	ldr	r0, [pc, #652]	; (80485a0 <LoRaMacProcess+0x310>)
 8048314:	f003 f9fe 	bl	804b714 <TimerStart>
    MacCtx.NvmCtx->LastTxChannel = MacCtx.Channel;
 8048318:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 804831c:	f894 2419 	ldrb.w	r2, [r4, #1049]	; 0x419
 8048320:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
    txDone.Channel = MacCtx.Channel;
 8048324:	f88d 2050 	strb.w	r2, [sp, #80]	; 0x50
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8048328:	f893 21d4 	ldrb.w	r2, [r3, #468]	; 0x1d4
 804832c:	2a00      	cmp	r2, #0
 804832e:	f040 812c 	bne.w	804858a <LoRaMacProcess+0x2fa>
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8048332:	4e9c      	ldr	r6, [pc, #624]	; (80485a4 <LoRaMacProcess+0x314>)
        txDone.Joined  = true;
 8048334:	f88d 2051 	strb.w	r2, [sp, #81]	; 0x51
    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 8048338:	7818      	ldrb	r0, [r3, #0]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 804833a:	6832      	ldr	r2, [r6, #0]
 804833c:	9215      	str	r2, [sp, #84]	; 0x54
    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 804833e:	a914      	add	r1, sp, #80	; 0x50
 8048340:	f001 ffe9 	bl	804a316 <RegionSetBandTxDone>
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 8048344:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8048348:	6832      	ldr	r2, [r6, #0]
 804834a:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
    if( MacCtx.NodeAckRequested == false )
 804834e:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 8048352:	b90b      	cbnz	r3, 8048358 <LoRaMacProcess+0xc8>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8048354:	f884 3441 	strb.w	r3, [r4, #1089]	; 0x441
        if( events.Events.RxDone == 1 )
 8048358:	072a      	lsls	r2, r5, #28
 804835a:	d540      	bpl.n	80483de <LoRaMacProcess+0x14e>
    uint8_t *payload = RxDoneParams.Payload;
 804835c:	4b92      	ldr	r3, [pc, #584]	; (80485a8 <LoRaMacProcess+0x318>)
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 804835e:	f8d4 2488 	ldr.w	r2, [r4, #1160]	; 0x488
    uint8_t *payload = RxDoneParams.Payload;
 8048362:	f8d3 9004 	ldr.w	r9, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 8048366:	f8b3 8008 	ldrh.w	r8, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 804836a:	f9b3 a00a 	ldrsh.w	sl, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 804836e:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 8048372:	6cd6      	ldr	r6, [r2, #76]	; 0x4c
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 8048374:	f894 2484 	ldrb.w	r2, [r4, #1156]	; 0x484
 8048378:	f884 2431 	strb.w	r2, [r4, #1073]	; 0x431
    uint32_t downLinkCounter = 0;
 804837c:	2300      	movs	r3, #0
 804837e:	9307      	str	r3, [sp, #28]
    MacCtx.McpsConfirm.AckReceived = false;
 8048380:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
    MacCtx.McpsIndication.Multicast = 0;
 8048384:	f8a4 3422 	strh.w	r3, [r4, #1058]	; 0x422
    MacCtx.McpsIndication.FramePending = 0;
 8048388:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 804838c:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 8048390:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.RxData = false;
 8048394:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 8048398:	f884 3432 	strb.w	r3, [r4, #1074]	; 0x432
    MacCtx.McpsIndication.DownLinkCounter = 0;
 804839c:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 80483a0:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 80483a4:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 80483a8:	f884 343c 	strb.w	r3, [r4, #1084]	; 0x43c
    Radio.Sleep( );
 80483ac:	4b79      	ldr	r3, [pc, #484]	; (8048594 <LoRaMacProcess+0x304>)
    MacCtx.McpsIndication.Rssi = rssi;
 80483ae:	f8a4 a42e 	strh.w	sl, [r4, #1070]	; 0x42e
    Radio.Sleep( );
 80483b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    MacCtx.McpsIndication.Snr = snr;
 80483b4:	f884 7430 	strb.w	r7, [r4, #1072]	; 0x430
    Radio.Sleep( );
 80483b8:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 80483ba:	4878      	ldr	r0, [pc, #480]	; (804859c <LoRaMacProcess+0x30c>)
 80483bc:	f003 fa1c 	bl	804b7f8 <TimerStop>
    PRINTF("RxDone\r\n");
 80483c0:	487a      	ldr	r0, [pc, #488]	; (80485ac <LoRaMacProcess+0x31c>)
 80483c2:	f003 faa3 	bl	804b90c <TraceSend>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 80483c6:	4641      	mov	r1, r8
 80483c8:	4648      	mov	r0, r9
 80483ca:	f001 f884 	bl	80494d6 <LoRaMacClassBRxBeacon>
 80483ce:	4683      	mov	fp, r0
 80483d0:	2800      	cmp	r0, #0
 80483d2:	f000 80f7 	beq.w	80485c4 <LoRaMacProcess+0x334>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 80483d6:	f8a4 a47a 	strh.w	sl, [r4, #1146]	; 0x47a
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 80483da:	f884 747c 	strb.w	r7, [r4, #1148]	; 0x47c
        if( events.Events.TxTimeout == 1 )
 80483de:	076f      	lsls	r7, r5, #29
 80483e0:	d51b      	bpl.n	804841a <LoRaMacProcess+0x18a>
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 80483e2:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 80483e6:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80483ea:	2b02      	cmp	r3, #2
 80483ec:	d002      	beq.n	80483f4 <LoRaMacProcess+0x164>
        Radio.Sleep( );
 80483ee:	4b69      	ldr	r3, [pc, #420]	; (8048594 <LoRaMacProcess+0x304>)
 80483f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80483f2:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 80483f4:	f7fe ff40 	bl	8047278 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 80483f8:	2002      	movs	r0, #2
 80483fa:	f884 0441 	strb.w	r0, [r4, #1089]	; 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 80483fe:	f001 fa07 	bl	8049810 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8048402:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 8048406:	b113      	cbz	r3, 804840e <LoRaMacProcess+0x17e>
        MacCtx.AckTimeoutRetry = true;
 8048408:	2301      	movs	r3, #1
 804840a:	f884 3417 	strb.w	r3, [r4, #1047]	; 0x417
    MacCtx.MacFlags.Bits.MacDone = 1;
 804840e:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 8048412:	f043 0320 	orr.w	r3, r3, #32
 8048416:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
        if( events.Events.RxError == 1 )
 804841a:	07ae      	lsls	r6, r5, #30
 804841c:	d503      	bpl.n	8048426 <LoRaMacProcess+0x196>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 804841e:	2106      	movs	r1, #6
 8048420:	2005      	movs	r0, #5
 8048422:	f7fe ffcd 	bl	80473c0 <HandleRadioRxErrorTimeout>
        if( events.Events.RxTimeout == 1 )
 8048426:	07ed      	lsls	r5, r5, #31
 8048428:	d503      	bpl.n	8048432 <LoRaMacProcess+0x1a2>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 804842a:	2104      	movs	r1, #4
 804842c:	2003      	movs	r0, #3
 804842e:	f7fe ffc7 	bl	80473c0 <HandleRadioRxErrorTimeout>
    LoRaMacClassBProcess( );
 8048432:	f001 f86c 	bl	804950e <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8048436:	f894 2485 	ldrb.w	r2, [r4, #1157]	; 0x485
 804843a:	0690      	lsls	r0, r2, #26
 804843c:	d56a      	bpl.n	8048514 <LoRaMacProcess+0x284>
    MacCtx.AllowRequests = requestState;
 804843e:	2300      	movs	r3, #0
 8048440:	f884 3486 	strb.w	r3, [r4, #1158]	; 0x486
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8048444:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 8048448:	0619      	lsls	r1, r3, #24
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 804844a:	bf44      	itt	mi
 804844c:	f023 0382 	bicmi.w	r3, r3, #130	; 0x82
 8048450:	f8c4 3344 	strmi.w	r3, [r4, #836]	; 0x344
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CONFIRM_QUEUE );
}

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8048454:	f012 0f05 	tst.w	r2, #5
 8048458:	f000 82e0 	beq.w	8048a1c <LoRaMacProcess+0x78c>
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 804845c:	200b      	movs	r0, #11
 804845e:	f001 f9ef 	bl	8049840 <LoRaMacConfirmQueueIsCmdActive>
 8048462:	2800      	cmp	r0, #0
 8048464:	f000 82da 	beq.w	8048a1c <LoRaMacProcess+0x78c>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8048468:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 804846c:	07df      	lsls	r7, r3, #31
 804846e:	f100 82d5 	bmi.w	8048a1c <LoRaMacProcess+0x78c>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8048472:	075e      	lsls	r6, r3, #29
 8048474:	f140 82d2 	bpl.w	8048a1c <LoRaMacProcess+0x78c>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8048478:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 804847c:	f023 0302 	bic.w	r3, r3, #2
 8048480:	f8c4 3344 	str.w	r3, [r4, #836]	; 0x344
    if( MacCtx.MacState == LORAMAC_IDLE )
 8048484:	f8d4 2344 	ldr.w	r2, [r4, #836]	; 0x344
 8048488:	bb82      	cbnz	r2, 80484ec <LoRaMacProcess+0x25c>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 804848a:	f894 5485 	ldrb.w	r5, [r4, #1157]	; 0x485
 804848e:	f015 0101 	ands.w	r1, r5, #1
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8048492:	bf1e      	ittt	ne
 8048494:	462b      	movne	r3, r5
 8048496:	f362 0300 	bfine	r3, r2, #0, #1
 804849a:	f884 3485 	strbne.w	r3, [r4, #1157]	; 0x485
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 804849e:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 80484a2:	075e      	lsls	r6, r3, #29
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 80484a4:	bf44      	itt	mi
 80484a6:	f36f 0382 	bfcmi	r3, #2, #1
 80484aa:	f884 3485 	strbmi.w	r3, [r4, #1157]	; 0x485
    MacCtx.AllowRequests = requestState;
 80484ae:	2301      	movs	r3, #1
 80484b0:	f884 3486 	strb.w	r3, [r4, #1158]	; 0x486
        if( reqEvents.Bits.McpsReq == 1 )
 80484b4:	b121      	cbz	r1, 80484c0 <LoRaMacProcess+0x230>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 80484b6:	f8d4 3348 	ldr.w	r3, [r4, #840]	; 0x348
 80484ba:	483d      	ldr	r0, [pc, #244]	; (80485b0 <LoRaMacProcess+0x320>)
 80484bc:	681b      	ldr	r3, [r3, #0]
 80484be:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 80484c0:	076d      	lsls	r5, r5, #29
 80484c2:	d50b      	bpl.n	80484dc <LoRaMacProcess+0x24c>
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 80484c4:	483b      	ldr	r0, [pc, #236]	; (80485b4 <LoRaMacProcess+0x324>)
 80484c6:	f001 f9d3 	bl	8049870 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 80484ca:	f001 f9fd 	bl	80498c8 <LoRaMacConfirmQueueGetCnt>
 80484ce:	b128      	cbz	r0, 80484dc <LoRaMacProcess+0x24c>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 80484d0:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 80484d4:	f043 0304 	orr.w	r3, r3, #4
 80484d8:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
        LoRaMacClassBResumeBeaconing( );
 80484dc:	f001 f806 	bl	80494ec <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 80484e0:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 80484e4:	f36f 1345 	bfc	r3, #5, #1
 80484e8:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
    if( MacCtx.MacState == LORAMAC_IDLE )
 80484ec:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 80484f0:	b96b      	cbnz	r3, 804850e <LoRaMacProcess+0x27e>
        bool isStickyMacCommandPending = false;
 80484f2:	a820      	add	r0, sp, #128	; 0x80
 80484f4:	f800 3d30 	strb.w	r3, [r0, #-48]!
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 80484f8:	f001 f902 	bl	8049700 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 80484fc:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8048500:	b12b      	cbz	r3, 804850e <LoRaMacProcess+0x27e>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8048502:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 8048506:	f043 0310 	orr.w	r3, r3, #16
 804850a:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
    MacCtx.AllowRequests = requestState;
 804850e:	2301      	movs	r3, #1
 8048510:	f884 3486 	strb.w	r3, [r4, #1158]	; 0x486
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8048514:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 8048518:	0718      	lsls	r0, r3, #28
 804851a:	d508      	bpl.n	804852e <LoRaMacProcess+0x29e>
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 804851c:	f36f 03c3 	bfc	r3, #3, #1
 8048520:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 8048524:	f8d4 3348 	ldr.w	r3, [r4, #840]	; 0x348
 8048528:	4823      	ldr	r0, [pc, #140]	; (80485b8 <LoRaMacProcess+0x328>)
 804852a:	68db      	ldr	r3, [r3, #12]
 804852c:	4798      	blx	r3
    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 804852e:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 8048532:	06d9      	lsls	r1, r3, #27
 8048534:	d510      	bpl.n	8048558 <LoRaMacProcess+0x2c8>
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 8048536:	2306      	movs	r3, #6
 8048538:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 804853c:	f8d4 3348 	ldr.w	r3, [r4, #840]	; 0x348
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8048540:	2500      	movs	r5, #0
        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 8048542:	68db      	ldr	r3, [r3, #12]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8048544:	f88d 5051 	strb.w	r5, [sp, #81]	; 0x51
        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 8048548:	a814      	add	r0, sp, #80	; 0x50
 804854a:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 804854c:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 8048550:	f365 1304 	bfi	r3, r5, #4, #1
 8048554:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8048558:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 804855c:	079a      	lsls	r2, r3, #30
 804855e:	d508      	bpl.n	8048572 <LoRaMacProcess+0x2e2>
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8048560:	f36f 0341 	bfc	r3, #1, #1
 8048564:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 8048568:	f8d4 3348 	ldr.w	r3, [r4, #840]	; 0x348
 804856c:	4813      	ldr	r0, [pc, #76]	; (80485bc <LoRaMacProcess+0x32c>)
 804856e:	685b      	ldr	r3, [r3, #4]
 8048570:	4798      	blx	r3
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8048572:	f894 3484 	ldrb.w	r3, [r4, #1156]	; 0x484
 8048576:	2b02      	cmp	r3, #2
 8048578:	d104      	bne.n	8048584 <LoRaMacProcess+0x2f4>
    	PRINTF("Recebe em Classe C\r\n");
 804857a:	4811      	ldr	r0, [pc, #68]	; (80485c0 <LoRaMacProcess+0x330>)
 804857c:	f003 f9c6 	bl	804b90c <TraceSend>
        OpenContinuousRxCWindow( );
 8048580:	f7fe ff7a 	bl	8047478 <OpenContinuousRxCWindow>
}
 8048584:	b021      	add	sp, #132	; 0x84
 8048586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        txDone.Joined  = true;
 804858a:	2201      	movs	r2, #1
 804858c:	e6d1      	b.n	8048332 <LoRaMacProcess+0xa2>
 804858e:	bf00      	nop
 8048590:	2000a11c 	.word	0x2000a11c
 8048594:	0804efb8 	.word	0x0804efb8
 8048598:	2000a4a0 	.word	0x2000a4a0
 804859c:	2000a4b8 	.word	0x2000a4b8
 80485a0:	2000a518 	.word	0x2000a518
 80485a4:	2000d708 	.word	0x2000d708
 80485a8:	2000d70c 	.word	0x2000d70c
 80485ac:	0804f5ce 	.word	0x0804f5ce
 80485b0:	2000a55c 	.word	0x2000a55c
 80485b4:	2000a570 	.word	0x2000a570
 80485b8:	2000a584 	.word	0x2000a584
 80485bc:	2000a53c 	.word	0x2000a53c
 80485c0:	0804f5e8 	.word	0x0804f5e8
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 80485c4:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 80485c8:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80485cc:	2b01      	cmp	r3, #1
 80485ce:	d10c      	bne.n	80485ea <LoRaMacProcess+0x35a>
        if( LoRaMacClassBIsPingExpected( ) == true )
 80485d0:	f000 ff85 	bl	80494de <LoRaMacClassBIsPingExpected>
 80485d4:	4682      	mov	sl, r0
 80485d6:	b1c8      	cbz	r0, 804860c <LoRaMacProcess+0x37c>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80485d8:	4658      	mov	r0, fp
 80485da:	f000 ff77 	bl	80494cc <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 80485de:	4658      	mov	r0, fp
 80485e0:	f000 ff77 	bl	80494d2 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 80485e4:	2304      	movs	r3, #4
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 80485e6:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
    macHdr.Value = payload[pktHeaderLen++];
 80485ea:	f899 a000 	ldrb.w	sl, [r9]
    switch( macHdr.Bits.MType )
 80485ee:	ea4f 135a 	mov.w	r3, sl, lsr #5
 80485f2:	3b01      	subs	r3, #1
 80485f4:	2b06      	cmp	r3, #6
 80485f6:	f200 81fe 	bhi.w	80489f6 <LoRaMacProcess+0x766>
 80485fa:	e8df f013 	tbh	[pc, r3, lsl #1]
 80485fe:	0013      	.short	0x0013
 8048600:	009401fc 	.word	0x009401fc
 8048604:	009101fc 	.word	0x009101fc
 8048608:	01e701fc 	.word	0x01e701fc
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 804860c:	f000 ff69 	bl	80494e2 <LoRaMacClassBIsMulticastExpected>
 8048610:	2800      	cmp	r0, #0
 8048612:	d0ea      	beq.n	80485ea <LoRaMacProcess+0x35a>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8048614:	4650      	mov	r0, sl
 8048616:	f000 ff5a 	bl	80494ce <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 804861a:	4650      	mov	r0, sl
 804861c:	f000 ff5a 	bl	80494d4 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8048620:	2305      	movs	r3, #5
 8048622:	e7e0      	b.n	80485e6 <LoRaMacProcess+0x356>
            macMsgJoinAccept.BufSize = size;
 8048624:	fa5f f888 	uxtb.w	r8, r8
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 8048628:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
            macMsgJoinAccept.BufSize = size;
 804862c:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 8048630:	f893 61d4 	ldrb.w	r6, [r3, #468]	; 0x1d4
            macMsgJoinAccept.Buffer = payload;
 8048634:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 8048638:	b11e      	cbz	r6, 8048642 <LoRaMacProcess+0x3b2>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 804863a:	2301      	movs	r3, #1
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 804863c:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
 8048640:	e10e      	b.n	8048860 <LoRaMacProcess+0x5d0>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 8048642:	f7fe fe15 	bl	8047270 <SecureElementGetJoinEui>
 8048646:	aa0a      	add	r2, sp, #40	; 0x28
 8048648:	4601      	mov	r1, r0
 804864a:	20ff      	movs	r0, #255	; 0xff
 804864c:	f001 fc50 	bl	8049ef0 <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 8048650:	2800      	cmp	r0, #0
 8048652:	d15d      	bne.n	8048710 <LoRaMacProcess+0x480>
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8048654:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8048658:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 804865c:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8048660:	0412      	lsls	r2, r2, #16
 8048662:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8048666:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 804866a:	430a      	orrs	r2, r1
 804866c:	649a      	str	r2, [r3, #72]	; 0x48
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
 804866e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8048670:	64da      	str	r2, [r3, #76]	; 0x4c
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8048672:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8048676:	f3c2 1202 	ubfx	r2, r2, #4, #3
 804867a:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 804867e:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8048682:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8048686:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
                MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 804868a:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 804868e:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
                if( MacCtx.NvmCtx->MacParams.ReceiveDelay1 == 0 )
 8048692:	b3da      	cbz	r2, 804870c <LoRaMacProcess+0x47c>
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 8048694:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
 8048698:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 804869c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80486a0:	434a      	muls	r2, r1
 80486a2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                MacCtx.NvmCtx->Version.Fields.Minor = 0;
 80486a6:	2600      	movs	r6, #0
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 80486a8:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
                applyCFList.Size = size - 17;
 80486ac:	f1a8 0811 	sub.w	r8, r8, #17
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 80486b0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                MacCtx.NvmCtx->Version.Fields.Minor = 0;
 80486b4:	f883 61d2 	strb.w	r6, [r3, #466]	; 0x1d2
                applyCFList.Size = size - 17;
 80486b8:	f88d 8024 	strb.w	r8, [sp, #36]	; 0x24
                applyCFList.Payload = macMsgJoinAccept.CFList;
 80486bc:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 80486c0:	7818      	ldrb	r0, [r3, #0]
                applyCFList.Payload = macMsgJoinAccept.CFList;
 80486c2:	9208      	str	r2, [sp, #32]
                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 80486c4:	a908      	add	r1, sp, #32
 80486c6:	f001 fe42 	bl	804a34e <RegionApplyCFList>
                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;
 80486ca:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 80486ce:	2202      	movs	r2, #2
 80486d0:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80486d4:	4630      	mov	r0, r6
 80486d6:	f001 f8b3 	bl	8049840 <LoRaMacConfirmQueueIsCmdActive>
 80486da:	b118      	cbz	r0, 80486e4 <LoRaMacProcess+0x454>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 80486dc:	4631      	mov	r1, r6
 80486de:	4630      	mov	r0, r6
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 80486e0:	f001 f862 	bl	80497a8 <LoRaMacConfirmQueueSetStatus>
    if( MacCtx.NodeAckRequested == true )
 80486e4:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 80486e8:	2b00      	cmp	r3, #0
 80486ea:	f000 818a 	beq.w	8048a02 <LoRaMacProcess+0x772>
        if( MacCtx.McpsConfirm.AckReceived == true )
 80486ee:	f894 3444 	ldrb.w	r3, [r4, #1092]	; 0x444
 80486f2:	b113      	cbz	r3, 80486fa <LoRaMacProcess+0x46a>
            OnAckTimeoutTimerEvent( NULL );
 80486f4:	2000      	movs	r0, #0
 80486f6:	f7fe fe1f 	bl	8047338 <OnAckTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.MacDone = 1;
 80486fa:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 80486fe:	f043 0320 	orr.w	r3, r3, #32
 8048702:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
    UpdateRxSlotIdleState( );
 8048706:	f7fe fdb7 	bl	8047278 <UpdateRxSlotIdleState>
 804870a:	e668      	b.n	80483de <LoRaMacProcess+0x14e>
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 804870c:	2201      	movs	r2, #1
 804870e:	e7c1      	b.n	8048694 <LoRaMacProcess+0x404>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8048710:	4630      	mov	r0, r6
 8048712:	f001 f895 	bl	8049840 <LoRaMacConfirmQueueIsCmdActive>
 8048716:	2800      	cmp	r0, #0
 8048718:	d0e4      	beq.n	80486e4 <LoRaMacProcess+0x454>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 804871a:	4631      	mov	r1, r6
 804871c:	2007      	movs	r0, #7
 804871e:	e7df      	b.n	80486e0 <LoRaMacProcess+0x450>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8048720:	2301      	movs	r3, #1
 8048722:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8048726:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 804872a:	f893 212d 	ldrb.w	r2, [r3, #301]	; 0x12d
 804872e:	f88d 2016 	strb.w	r2, [sp, #22]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8048732:	f894 2424 	ldrb.w	r2, [r4, #1060]	; 0x424
 8048736:	f88d 2015 	strb.w	r2, [sp, #21]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 804873a:	220d      	movs	r2, #13
 804873c:	f88d 2014 	strb.w	r2, [sp, #20]
            if( MacCtx.NvmCtx->RepeaterSupport == true )
 8048740:	f893 213f 	ldrb.w	r2, [r3, #319]	; 0x13f
 8048744:	b112      	cbz	r2, 804874c <LoRaMacProcess+0x4bc>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8048746:	220e      	movs	r2, #14
 8048748:	f88d 2014 	strb.w	r2, [sp, #20]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804874c:	7818      	ldrb	r0, [r3, #0]
 804874e:	a905      	add	r1, sp, #20
 8048750:	f001 fdd7 	bl	804a302 <RegionGetPhyParam>
            if( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORA_MAC_FRMPAYLOAD_OVERHEAD ) ) > ( int16_t )phyParam.Value )
 8048754:	f1a8 030d 	sub.w	r3, r8, #13
 8048758:	b21b      	sxth	r3, r3
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804875a:	9006      	str	r0, [sp, #24]
            if( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORA_MAC_FRMPAYLOAD_OVERHEAD ) ) > ( int16_t )phyParam.Value )
 804875c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8048760:	b200      	sxth	r0, r0
 8048762:	4283      	cmp	r3, r0
 8048764:	f73f af69 	bgt.w	804863a <LoRaMacProcess+0x3aa>
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8048768:	4baa      	ldr	r3, [pc, #680]	; (8048a14 <LoRaMacProcess+0x784>)
 804876a:	931d      	str	r3, [sp, #116]	; 0x74
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 804876c:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8048770:	23ff      	movs	r3, #255	; 0xff
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8048772:	4658      	mov	r0, fp
            macMsgData.Buffer = payload;
 8048774:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
            macMsgData.BufSize = size;
 8048778:	f88d 8054 	strb.w	r8, [sp, #84]	; 0x54
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 804877c:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8048780:	f001 fcc4 	bl	804a10c <LoRaMacParserData>
 8048784:	2800      	cmp	r0, #0
 8048786:	f47f af58 	bne.w	804863a <LoRaMacProcess+0x3aa>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 804878a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 804878c:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8048790:	a908      	add	r1, sp, #32
 8048792:	4658      	mov	r0, fp
 8048794:	f7ff fd5a 	bl	804824c <DetermineFrameType>
 8048798:	2800      	cmp	r0, #0
 804879a:	f47f af4e 	bne.w	804863a <LoRaMacProcess+0x3aa>
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 804879e:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 80487a2:	9916      	ldr	r1, [sp, #88]	; 0x58
            downLinkCounter = 0;
 80487a4:	9007      	str	r0, [sp, #28]
 80487a6:	461a      	mov	r2, r3
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 80487a8:	4681      	mov	r9, r0
 80487aa:	6d50      	ldr	r0, [r2, #84]	; 0x54
 80487ac:	9003      	str	r0, [sp, #12]
 80487ae:	4288      	cmp	r0, r1
 80487b0:	d114      	bne.n	80487dc <LoRaMacProcess+0x54c>
 80487b2:	f892 0051 	ldrb.w	r0, [r2, #81]	; 0x51
 80487b6:	b188      	cbz	r0, 80487dc <LoRaMacProcess+0x54c>
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.GroupID;
 80487b8:	2028      	movs	r0, #40	; 0x28
 80487ba:	fb00 3009 	mla	r0, r0, r9, r3
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 80487be:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.GroupID;
 80487c0:	f890 9052 	ldrb.w	r9, [r0, #82]	; 0x52
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 80487c4:	6812      	ldr	r2, [r2, #0]
 80487c6:	9207      	str	r2, [sp, #28]
                    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 80487c8:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
 80487cc:	2a02      	cmp	r2, #2
 80487ce:	d102      	bne.n	80487d6 <LoRaMacProcess+0x546>
                        MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 80487d0:	2203      	movs	r2, #3
 80487d2:	f884 2431 	strb.w	r2, [r4, #1073]	; 0x431
                    multicast = 1;
 80487d6:	f04f 0801 	mov.w	r8, #1
 80487da:	e009      	b.n	80487f0 <LoRaMacProcess+0x560>
 80487dc:	f109 0901 	add.w	r9, r9, #1
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80487e0:	f1b9 0f04 	cmp.w	r9, #4
 80487e4:	f102 0228 	add.w	r2, r2, #40	; 0x28
 80487e8:	d1df      	bne.n	80487aa <LoRaMacProcess+0x51a>
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 80487ea:	9603      	str	r6, [sp, #12]
            multicast = 0;
 80487ec:	f04f 0800 	mov.w	r8, #0
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 80487f0:	2215      	movs	r2, #21
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80487f2:	a905      	add	r1, sp, #20
 80487f4:	7818      	ldrb	r0, [r3, #0]
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 80487f6:	f88d 2014 	strb.w	r2, [sp, #20]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80487fa:	f001 fd82 	bl	804a302 <RegionGetPhyParam>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 80487fe:	f8d4 2488 	ldr.w	r2, [r4, #1160]	; 0x488
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8048802:	9006      	str	r0, [sp, #24]
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 8048804:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8048808:	f892 21d2 	ldrb.w	r2, [r2, #466]	; 0x1d2
 804880c:	b281      	uxth	r1, r0
    switch( addrID )
 804880e:	f1b9 0f04 	cmp.w	r9, #4
 8048812:	d840      	bhi.n	8048896 <LoRaMacProcess+0x606>
 8048814:	e8df f009 	tbb	[pc, r9]
 8048818:	312f3303 	.word	0x312f3303
 804881c:	27          	.byte	0x27
 804881d:	00          	.byte	0x00
            *fCntID = MC_FCNT_DOWN_0;
 804881e:	2604      	movs	r6, #4
    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 8048820:	ab07      	add	r3, sp, #28
 8048822:	f8bd 205e 	ldrh.w	r2, [sp, #94]	; 0x5e
 8048826:	4630      	mov	r0, r6
 8048828:	f001 f9cc 	bl	8049bc4 <LoRaMacCryptoGetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 804882c:	b3a8      	cbz	r0, 804889a <LoRaMacProcess+0x60a>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 804882e:	2807      	cmp	r0, #7
 8048830:	d12b      	bne.n	804888a <LoRaMacProcess+0x5fa>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8048832:	2308      	movs	r3, #8
 8048834:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
                    if( ( MacCtx.NvmCtx->Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( MacCtx.NvmCtx->LastRxMic == macMsgData.MIC ) )
 8048838:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 804883c:	f893 21d2 	ldrb.w	r2, [r3, #466]	; 0x1d2
 8048840:	b95a      	cbnz	r2, 804885a <LoRaMacProcess+0x5ca>
 8048842:	f00a 02e0 	and.w	r2, sl, #224	; 0xe0
 8048846:	2aa0      	cmp	r2, #160	; 0xa0
 8048848:	d107      	bne.n	804885a <LoRaMacProcess+0x5ca>
 804884a:	f8d3 11d8 	ldr.w	r1, [r3, #472]	; 0x1d8
 804884e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8048850:	4291      	cmp	r1, r2
 8048852:	d102      	bne.n	804885a <LoRaMacProcess+0x5ca>
                        MacCtx.NvmCtx->SrvAckRequested = true;
 8048854:	2201      	movs	r2, #1
 8048856:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 804885a:	9b07      	ldr	r3, [sp, #28]
 804885c:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
                PrepareRxDoneAbort( );
 8048860:	f7fe fd8e 	bl	8047380 <PrepareRxDoneAbort>
 8048864:	e5bb      	b.n	80483de <LoRaMacProcess+0x14e>
            if( lrWanVersion.Fields.Minor == 1 )
 8048866:	2a01      	cmp	r2, #1
 8048868:	d10b      	bne.n	8048882 <LoRaMacProcess+0x5f2>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 804886a:	b163      	cbz	r3, 8048886 <LoRaMacProcess+0x5f6>
                    *fCntID = A_FCNT_DOWN;
 804886c:	2b03      	cmp	r3, #3
 804886e:	bf14      	ite	ne
 8048870:	2601      	movne	r6, #1
 8048872:	2602      	moveq	r6, #2
 8048874:	e7d4      	b.n	8048820 <LoRaMacProcess+0x590>
            *fCntID = MC_FCNT_DOWN_2;
 8048876:	2606      	movs	r6, #6
 8048878:	e7d2      	b.n	8048820 <LoRaMacProcess+0x590>
            *fCntID = MC_FCNT_DOWN_3;
 804887a:	2607      	movs	r6, #7
 804887c:	e7d0      	b.n	8048820 <LoRaMacProcess+0x590>
            *fCntID = MC_FCNT_DOWN_1;
 804887e:	2605      	movs	r6, #5
 8048880:	e7ce      	b.n	8048820 <LoRaMacProcess+0x590>
                *fCntID = FCNT_DOWN;
 8048882:	2603      	movs	r6, #3
 8048884:	e7cc      	b.n	8048820 <LoRaMacProcess+0x590>
                    *fCntID = A_FCNT_DOWN;
 8048886:	2602      	movs	r6, #2
 8048888:	e7ca      	b.n	8048820 <LoRaMacProcess+0x590>
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 804888a:	2808      	cmp	r0, #8
 804888c:	d103      	bne.n	8048896 <LoRaMacProcess+0x606>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 804888e:	230a      	movs	r3, #10
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8048890:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
 8048894:	e7e1      	b.n	804885a <LoRaMacProcess+0x5ca>
 8048896:	2301      	movs	r3, #1
 8048898:	e7fa      	b.n	8048890 <LoRaMacProcess+0x600>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 804889a:	f8cd b000 	str.w	fp, [sp]
 804889e:	9b07      	ldr	r3, [sp, #28]
 80488a0:	9903      	ldr	r1, [sp, #12]
 80488a2:	4632      	mov	r2, r6
 80488a4:	4648      	mov	r0, r9
 80488a6:	f001 fa5b 	bl	8049d60 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80488aa:	b120      	cbz	r0, 80488b6 <LoRaMacProcess+0x626>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 80488ac:	2802      	cmp	r0, #2
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 80488ae:	bf0c      	ite	eq
 80488b0:	230b      	moveq	r3, #11
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 80488b2:	230c      	movne	r3, #12
 80488b4:	e6c2      	b.n	804863c <LoRaMacProcess+0x3ac>
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 80488b6:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 80488ba:	f894 1431 	ldrb.w	r1, [r4, #1073]	; 0x431
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80488be:	f884 0421 	strb.w	r0, [r4, #1057]	; 0x421
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 80488c2:	f3c3 1200 	ubfx	r2, r3, #4, #1
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 80488c6:	2901      	cmp	r1, #1
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80488c8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80488cc:	f884 3432 	strb.w	r3, [r4, #1074]	; 0x432
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80488d0:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
                MacCtx.NvmCtx->AdrAckCounter = 0;
 80488d4:	bf98      	it	ls
 80488d6:	f8d4 3488 	ldrls.w	r3, [r4, #1160]	; 0x488
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 80488da:	f884 2425 	strb.w	r2, [r4, #1061]	; 0x425
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80488de:	9a07      	ldr	r2, [sp, #28]
            MacCtx.McpsIndication.Multicast = multicast;
 80488e0:	f884 8422 	strb.w	r8, [r4, #1058]	; 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 80488e4:	f8c4 0428 	str.w	r0, [r4, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 80488e8:	f884 042c 	strb.w	r0, [r4, #1068]	; 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80488ec:	f8c4 2434 	str.w	r2, [r4, #1076]	; 0x434
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80488f0:	f884 0441 	strb.w	r0, [r4, #1089]	; 0x441
                MacCtx.NvmCtx->AdrAckCounter = 0;
 80488f4:	bf98      	it	ls
 80488f6:	f8c3 00f4 	strls.w	r0, [r3, #244]	; 0xf4
            if( multicast == 1 )
 80488fa:	f1b8 0f00 	cmp.w	r8, #0
 80488fe:	d01b      	beq.n	8048938 <LoRaMacProcess+0x6a8>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8048900:	2302      	movs	r3, #2
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8048902:	2901      	cmp	r1, #1
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8048904:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8048908:	f894 2440 	ldrb.w	r2, [r4, #1088]	; 0x440
 804890c:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8048910:	d805      	bhi.n	804891e <LoRaMacProcess+0x68e>
        if( request == MCPS_CONFIRMED )
 8048912:	2a01      	cmp	r2, #1
 8048914:	d101      	bne.n	804891a <LoRaMacProcess+0x68a>
            if( fCtrl.Bits.Ack == 1 )
 8048916:	069b      	lsls	r3, r3, #26
 8048918:	d501      	bpl.n	804891e <LoRaMacProcess+0x68e>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 804891a:	f000 fea9 	bl	8049670 <LoRaMacCommandsRemoveStickyAnsCmds>
            PRINTF("FRame type: %d\r\n", fType);
 804891e:	f89d 1020 	ldrb.w	r1, [sp, #32]
 8048922:	483d      	ldr	r0, [pc, #244]	; (8048a18 <LoRaMacProcess+0x788>)
 8048924:	f002 fff2 	bl	804b90c <TraceSend>
            switch( fType )
 8048928:	f89d 3020 	ldrb.w	r3, [sp, #32]
 804892c:	2b03      	cmp	r3, #3
 804892e:	d847      	bhi.n	80489c0 <LoRaMacProcess+0x730>
 8048930:	e8df f003 	tbb	[pc, r3]
 8048934:	1f412e17 	.word	0x1f412e17
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8048938:	f00a 03e0 	and.w	r3, sl, #224	; 0xe0
 804893c:	2ba0      	cmp	r3, #160	; 0xa0
 804893e:	f8d4 2488 	ldr.w	r2, [r4, #1160]	; 0x488
 8048942:	d10a      	bne.n	804895a <LoRaMacProcess+0x6ca>
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 8048944:	f892 01d2 	ldrb.w	r0, [r2, #466]	; 0x1d2
                    MacCtx.NvmCtx->SrvAckRequested = true;
 8048948:	2301      	movs	r3, #1
 804894a:	f882 31c0 	strb.w	r3, [r2, #448]	; 0x1c0
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 804894e:	2800      	cmp	r0, #0
 8048950:	d1d7      	bne.n	8048902 <LoRaMacProcess+0x672>
                        MacCtx.NvmCtx->LastRxMic = macMsgData.MIC;
 8048952:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8048954:	f8c2 01d8 	str.w	r0, [r2, #472]	; 0x1d8
 8048958:	e7d3      	b.n	8048902 <LoRaMacProcess+0x672>
                    MacCtx.NvmCtx->SrvAckRequested = false;
 804895a:	2300      	movs	r3, #0
 804895c:	f882 31c0 	strb.w	r3, [r2, #448]	; 0x1c0
 8048960:	e7cf      	b.n	8048902 <LoRaMacProcess+0x672>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 8048962:	f89d 105c 	ldrb.w	r1, [sp, #92]	; 0x5c
 8048966:	463a      	mov	r2, r7
 8048968:	f001 010f 	and.w	r1, r1, #15
 804896c:	a818      	add	r0, sp, #96	; 0x60
 804896e:	f7fe fe23 	bl	80475b8 <ProcessMacCommands.isra.1.constprop.7>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8048972:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 8048976:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 804897a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 804897c:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8048980:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 8048984:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 8048988:	2301      	movs	r3, #1
 804898a:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
 804898e:	e00b      	b.n	80489a8 <LoRaMacProcess+0x718>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 8048990:	f89d 105c 	ldrb.w	r1, [sp, #92]	; 0x5c
 8048994:	463a      	mov	r2, r7
 8048996:	f001 010f 	and.w	r1, r1, #15
 804899a:	a818      	add	r0, sp, #96	; 0x60
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 804899c:	f7fe fe0c 	bl	80475b8 <ProcessMacCommands.isra.1.constprop.7>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80489a0:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 80489a4:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
            MacCtx.MacFlags.Bits.McpsInd = 1;
 80489a8:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 80489ac:	f043 0302 	orr.w	r3, r3, #2
 80489b0:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
 80489b4:	e696      	b.n	80486e4 <LoRaMacProcess+0x454>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 80489b6:	463a      	mov	r2, r7
 80489b8:	f89d 1078 	ldrb.w	r1, [sp, #120]	; 0x78
 80489bc:	981d      	ldr	r0, [sp, #116]	; 0x74
 80489be:	e7ed      	b.n	804899c <LoRaMacProcess+0x70c>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80489c0:	2301      	movs	r3, #1
 80489c2:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
                    PrepareRxDoneAbort( );
 80489c6:	f7fe fcdb 	bl	8047380 <PrepareRxDoneAbort>
 80489ca:	e7ed      	b.n	80489a8 <LoRaMacProcess+0x718>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 80489cc:	4e11      	ldr	r6, [pc, #68]	; (8048a14 <LoRaMacProcess+0x784>)
 80489ce:	f108 38ff 	add.w	r8, r8, #4294967295
 80489d2:	fa1f f288 	uxth.w	r2, r8
 80489d6:	f109 0101 	add.w	r1, r9, #1
 80489da:	4630      	mov	r0, r6
 80489dc:	f002 fff5 	bl	804b9ca <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 80489e0:	2303      	movs	r3, #3
 80489e2:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80489e6:	2300      	movs	r3, #0
 80489e8:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 80489ec:	f8c4 6428 	str.w	r6, [r4, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 80489f0:	f884 842c 	strb.w	r8, [r4, #1068]	; 0x42c
 80489f4:	e7d8      	b.n	80489a8 <LoRaMacProcess+0x718>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80489f6:	2301      	movs	r3, #1
 80489f8:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
            PrepareRxDoneAbort( );
 80489fc:	f7fe fcc0 	bl	8047380 <PrepareRxDoneAbort>
 8048a00:	e670      	b.n	80486e4 <LoRaMacProcess+0x454>
        if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 8048a02:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8048a06:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8048a0a:	2b02      	cmp	r3, #2
 8048a0c:	f47f ae75 	bne.w	80486fa <LoRaMacProcess+0x46a>
 8048a10:	e670      	b.n	80486f4 <LoRaMacProcess+0x464>
 8048a12:	bf00      	nop
 8048a14:	2000a358 	.word	0x2000a358
 8048a18:	0804f5d7 	.word	0x0804f5d7
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8048a1c:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 8048a20:	075d      	lsls	r5, r3, #29
 8048a22:	d50f      	bpl.n	8048a44 <LoRaMacProcess+0x7b4>
        if( ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 8048a24:	2000      	movs	r0, #0
 8048a26:	f000 ff0b 	bl	8049840 <LoRaMacConfirmQueueIsCmdActive>
 8048a2a:	b390      	cbz	r0, 8048a92 <LoRaMacProcess+0x802>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8048a2c:	2000      	movs	r0, #0
 8048a2e:	f000 fed5 	bl	80497dc <LoRaMacConfirmQueueGetStatus>
 8048a32:	b908      	cbnz	r0, 8048a38 <LoRaMacProcess+0x7a8>
                MacCtx.ChannelsNbTransCounter = 0;
 8048a34:	f884 0414 	strb.w	r0, [r4, #1044]	; 0x414
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8048a38:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 8048a3c:	f023 0302 	bic.w	r3, r3, #2
 8048a40:	f8c4 3344 	str.w	r3, [r4, #836]	; 0x344
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8048a44:	f894 1485 	ldrb.w	r1, [r4, #1157]	; 0x485
 8048a48:	07c8      	lsls	r0, r1, #31
 8048a4a:	f57f ad1b 	bpl.w	8048484 <LoRaMacProcess+0x1f4>
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8048a4e:	f894 3440 	ldrb.w	r3, [r4, #1088]	; 0x440
 8048a52:	b10b      	cbz	r3, 8048a58 <LoRaMacProcess+0x7c8>
 8048a54:	2b03      	cmp	r3, #3
 8048a56:	d127      	bne.n	8048aa8 <LoRaMacProcess+0x818>
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 8048a58:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    if( MacCtx.ChannelsNbTransCounter >=
 8048a5c:	f894 0414 	ldrb.w	r0, [r4, #1044]	; 0x414
 8048a60:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 8048a64:	4290      	cmp	r0, r2
 8048a66:	d208      	bcs.n	8048a7a <LoRaMacProcess+0x7ea>
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8048a68:	078a      	lsls	r2, r1, #30
 8048a6a:	d552      	bpl.n	8048b12 <LoRaMacProcess+0x882>
        if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 8048a6c:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8048a70:	b11b      	cbz	r3, 8048a7a <LoRaMacProcess+0x7ea>
            if( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 )
 8048a72:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
 8048a76:	2b00      	cmp	r3, #0
 8048a78:	d14b      	bne.n	8048b12 <LoRaMacProcess+0x882>
            TimerStop( &MacCtx.TxDelayedTimer );
 8048a7a:	4839      	ldr	r0, [pc, #228]	; (8048b60 <LoRaMacProcess+0x8d0>)
 8048a7c:	f002 febc 	bl	804b7f8 <TimerStop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8048a80:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 8048a84:	f023 0320 	bic.w	r3, r3, #32
 8048a88:	f8c4 3344 	str.w	r3, [r4, #836]	; 0x344
            StopRetransmission( );
 8048a8c:	f7fe fc02 	bl	8047294 <StopRetransmission>
 8048a90:	e4f8      	b.n	8048484 <LoRaMacProcess+0x1f4>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8048a92:	2004      	movs	r0, #4
 8048a94:	f000 fed4 	bl	8049840 <LoRaMacConfirmQueueIsCmdActive>
 8048a98:	2800      	cmp	r0, #0
 8048a9a:	d1cd      	bne.n	8048a38 <LoRaMacProcess+0x7a8>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 8048a9c:	2005      	movs	r0, #5
 8048a9e:	f000 fecf 	bl	8049840 <LoRaMacConfirmQueueIsCmdActive>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8048aa2:	2800      	cmp	r0, #0
 8048aa4:	d1c8      	bne.n	8048a38 <LoRaMacProcess+0x7a8>
 8048aa6:	e7cd      	b.n	8048a44 <LoRaMacProcess+0x7b4>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8048aa8:	2b01      	cmp	r3, #1
 8048aaa:	d132      	bne.n	8048b12 <LoRaMacProcess+0x882>
            if( MacCtx.AckTimeoutRetry == true )
 8048aac:	f894 2417 	ldrb.w	r2, [r4, #1047]	; 0x417
 8048ab0:	2a00      	cmp	r2, #0
 8048ab2:	f43f ace7 	beq.w	8048484 <LoRaMacProcess+0x1f4>
    if( MacCtx.AckTimeoutRetriesCounter >=
 8048ab6:	f894 3416 	ldrb.w	r3, [r4, #1046]	; 0x416
        MacCtx.AckTimeoutRetries )
 8048aba:	f894 5415 	ldrb.w	r5, [r4, #1045]	; 0x415
    if( MacCtx.AckTimeoutRetriesCounter >=
 8048abe:	42ab      	cmp	r3, r5
 8048ac0:	d204      	bcs.n	8048acc <LoRaMacProcess+0x83c>
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8048ac2:	f011 0202 	ands.w	r2, r1, #2
        if( MacCtx.McpsConfirm.AckReceived == true )
 8048ac6:	bf18      	it	ne
 8048ac8:	f894 2444 	ldrbne.w	r2, [r4, #1092]	; 0x444
                if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 8048acc:	f8d4 0488 	ldr.w	r0, [r4, #1160]	; 0x488
 8048ad0:	f890 11d2 	ldrb.w	r1, [r0, #466]	; 0x1d2
 8048ad4:	2900      	cmp	r1, #0
 8048ad6:	d13f      	bne.n	8048b58 <LoRaMacProcess+0x8c8>
                    if( stopRetransmission == false )
 8048ad8:	bb3a      	cbnz	r2, 8048b2a <LoRaMacProcess+0x89a>
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8048ada:	42ab      	cmp	r3, r5
 8048adc:	d219      	bcs.n	8048b12 <LoRaMacProcess+0x882>
        MacCtx.AckTimeoutRetriesCounter++;
 8048ade:	3301      	adds	r3, #1
 8048ae0:	b2db      	uxtb	r3, r3
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8048ae2:	07df      	lsls	r7, r3, #31
        MacCtx.AckTimeoutRetriesCounter++;
 8048ae4:	f884 3416 	strb.w	r3, [r4, #1046]	; 0x416
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8048ae8:	d513      	bpl.n	8048b12 <LoRaMacProcess+0x882>
            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8048aea:	2322      	movs	r3, #34	; 0x22
 8048aec:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8048af0:	f890 312c 	ldrb.w	r3, [r0, #300]	; 0x12c
 8048af4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
            getPhy.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8048af8:	f890 30f9 	ldrb.w	r3, [r0, #249]	; 0xf9
 8048afc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8048b00:	a90a      	add	r1, sp, #40	; 0x28
 8048b02:	7800      	ldrb	r0, [r0, #0]
 8048b04:	f001 fbfd 	bl	804a302 <RegionGetPhyParam>
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 8048b08:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8048b0c:	9014      	str	r0, [sp, #80]	; 0x50
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 8048b0e:	f883 00f9 	strb.w	r0, [r3, #249]	; 0xf9
            MacCtx.MacFlags.Bits.MacDone = 0;
 8048b12:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
            MacCtx.AckTimeoutRetry = false;
 8048b16:	2000      	movs	r0, #0
            MacCtx.MacFlags.Bits.MacDone = 0;
 8048b18:	f36f 1345 	bfc	r3, #5, #1
 8048b1c:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
            MacCtx.AckTimeoutRetry = false;
 8048b20:	f884 0417 	strb.w	r0, [r4, #1047]	; 0x417
            OnTxDelayedTimerEvent( NULL );
 8048b24:	f7ff fa5a 	bl	8047fdc <OnTxDelayedTimerEvent>
 8048b28:	e4ac      	b.n	8048484 <LoRaMacProcess+0x1f4>
    if( MacCtx.McpsConfirm.AckReceived == false )
 8048b2a:	f894 5444 	ldrb.w	r5, [r4, #1092]	; 0x444
 8048b2e:	b975      	cbnz	r5, 8048b4e <LoRaMacProcess+0x8be>
        params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 8048b30:	2301      	movs	r3, #1
 8048b32:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
        params.NvmCtx = Contexts.RegionNvmCtx;
 8048b36:	4b0b      	ldr	r3, [pc, #44]	; (8048b64 <LoRaMacProcess+0x8d4>)
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8048b38:	7800      	ldrb	r0, [r0, #0]
        params.NvmCtx = Contexts.RegionNvmCtx;
 8048b3a:	689b      	ldr	r3, [r3, #8]
 8048b3c:	a920      	add	r1, sp, #128	; 0x80
 8048b3e:	f841 3d30 	str.w	r3, [r1, #-48]!
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8048b42:	f001 fbee 	bl	804a322 <RegionInitDefaults>
        MacCtx.NodeAckRequested = false;
 8048b46:	f884 5418 	strb.w	r5, [r4, #1048]	; 0x418
        MacCtx.McpsConfirm.AckReceived = false;
 8048b4a:	f884 5444 	strb.w	r5, [r4, #1092]	; 0x444
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8048b4e:	f894 3416 	ldrb.w	r3, [r4, #1046]	; 0x416
 8048b52:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
 8048b56:	e790      	b.n	8048a7a <LoRaMacProcess+0x7ea>
        if( stopRetransmission == true )
 8048b58:	2a00      	cmp	r2, #0
 8048b5a:	d0da      	beq.n	8048b12 <LoRaMacProcess+0x882>
 8048b5c:	e78d      	b.n	8048a7a <LoRaMacProcess+0x7ea>
 8048b5e:	bf00      	nop
 8048b60:	2000a488 	.word	0x2000a488
 8048b64:	2000d71c 	.word	0x2000d71c

08048b68 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8048b68:	b570      	push	{r4, r5, r6, lr}
 8048b6a:	4605      	mov	r5, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8048b6c:	482c      	ldr	r0, [pc, #176]	; (8048c20 <LoRaMacQueryTxPossible+0xb8>)
 8048b6e:	f8d0 3488 	ldr.w	r3, [r0, #1160]	; 0x488
{
 8048b72:	b088      	sub	sp, #32
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 8048b74:	795a      	ldrb	r2, [r3, #5]
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8048b76:	f8d3 60f4 	ldr.w	r6, [r3, #244]	; 0xf4
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 8048b7a:	f88d 2002 	strb.w	r2, [sp, #2]
    int8_t txPower = TX_POWER_0/*MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower*/;
 8048b7e:	2200      	movs	r2, #0
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8048b80:	9601      	str	r6, [sp, #4]
    int8_t txPower = TX_POWER_0/*MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower*/;
 8048b82:	f88d 2003 	strb.w	r2, [sp, #3]
    size_t macCmdsSize = 0;
 8048b86:	9202      	str	r2, [sp, #8]

    if( txInfo == NULL )
 8048b88:	460c      	mov	r4, r1
 8048b8a:	b929      	cbnz	r1, 8048b98 <LoRaMacQueryTxPossible+0x30>
    {
    	PRINTF("Invalid");
 8048b8c:	4825      	ldr	r0, [pc, #148]	; (8048c24 <LoRaMacQueryTxPossible+0xbc>)
 8048b8e:	f002 febd 	bl	804b90c <TraceSend>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8048b92:	2003      	movs	r0, #3
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 8048b94:	b008      	add	sp, #32
 8048b96:	bd70      	pop	{r4, r5, r6, pc}
    adrNext.Version = MacCtx.NvmCtx->Version;
 8048b98:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
 8048b9c:	9103      	str	r1, [sp, #12]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 8048b9e:	f893 10f2 	ldrb.w	r1, [r3, #242]	; 0xf2
 8048ba2:	f88d 1011 	strb.w	r1, [sp, #17]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8048ba6:	f8b0 13f8 	ldrh.w	r1, [r0, #1016]	; 0x3f8
 8048baa:	f8ad 1018 	strh.w	r1, [sp, #24]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8048bae:	f8b0 13fa 	ldrh.w	r1, [r0, #1018]	; 0x3fa
    adrNext.TxPower = TX_POWER_0/*MacCtx.NvmCtx->MacParams.ChannelsTxPower*/;
 8048bb2:	f88d 201d 	strb.w	r2, [sp, #29]
    adrNext.UpdateChanMask = false;
 8048bb6:	f88d 2010 	strb.w	r2, [sp, #16]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8048bba:	f8ad 101a 	strh.w	r1, [sp, #26]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8048bbe:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8048bc2:	f893 10f9 	ldrb.w	r1, [r3, #249]	; 0xf9
 8048bc6:	f88d 101c 	strb.w	r1, [sp, #28]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8048bca:	f88d 201e 	strb.w	r2, [sp, #30]
    adrNext.Region = MacCtx.NvmCtx->Region;
 8048bce:	781b      	ldrb	r3, [r3, #0]
 8048bd0:	f88d 301f 	strb.w	r3, [sp, #31]
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8048bd4:	f10d 0203 	add.w	r2, sp, #3
 8048bd8:	ab01      	add	r3, sp, #4
 8048bda:	f10d 0102 	add.w	r1, sp, #2
 8048bde:	a803      	add	r0, sp, #12
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8048be0:	9605      	str	r6, [sp, #20]
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8048be2:	f000 fc05 	bl	80493f0 <LoRaMacAdrCalcNext>
    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8048be6:	f99d 0002 	ldrsb.w	r0, [sp, #2]
 8048bea:	f7fe fb87 	bl	80472fc <GetMaxAppPayloadWithoutFOptsLength>
 8048bee:	7060      	strb	r0, [r4, #1]
    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8048bf0:	a802      	add	r0, sp, #8
 8048bf2:	f000 fd57 	bl	80496a4 <LoRaMacCommandsGetSizeSerializedCmds>
 8048bf6:	b988      	cbnz	r0, 8048c1c <LoRaMacQueryTxPossible+0xb4>
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8048bf8:	9b02      	ldr	r3, [sp, #8]
 8048bfa:	2b0f      	cmp	r3, #15
 8048bfc:	d80a      	bhi.n	8048c14 <LoRaMacQueryTxPossible+0xac>
 8048bfe:	7860      	ldrb	r0, [r4, #1]
 8048c00:	4283      	cmp	r3, r0
 8048c02:	d807      	bhi.n	8048c14 <LoRaMacQueryTxPossible+0xac>
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8048c04:	1ac2      	subs	r2, r0, r3
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8048c06:	442b      	add	r3, r5
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8048c08:	7022      	strb	r2, [r4, #0]
           return LORAMAC_STATUS_LENGTH_ERROR;
 8048c0a:	4298      	cmp	r0, r3
 8048c0c:	bf34      	ite	cc
 8048c0e:	2008      	movcc	r0, #8
 8048c10:	2000      	movcs	r0, #0
 8048c12:	e7bf      	b.n	8048b94 <LoRaMacQueryTxPossible+0x2c>
        txInfo->MaxPossibleApplicationDataSize = 0;
 8048c14:	2300      	movs	r3, #0
 8048c16:	7023      	strb	r3, [r4, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8048c18:	2008      	movs	r0, #8
 8048c1a:	e7bb      	b.n	8048b94 <LoRaMacQueryTxPossible+0x2c>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8048c1c:	2013      	movs	r0, #19
 8048c1e:	e7b9      	b.n	8048b94 <LoRaMacQueryTxPossible+0x2c>
 8048c20:	2000a11c 	.word	0x2000a11c
 8048c24:	0804f5fd 	.word	0x0804f5fd

08048c28 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8048c28:	b513      	push	{r0, r1, r4, lr}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8048c2a:	4604      	mov	r4, r0
 8048c2c:	2800      	cmp	r0, #0
 8048c2e:	f000 80d3 	beq.w	8048dd8 <LoRaMacMibGetRequestConfirm+0x1b0>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 8048c32:	7803      	ldrb	r3, [r0, #0]
 8048c34:	2b34      	cmp	r3, #52	; 0x34
 8048c36:	f200 80cc 	bhi.w	8048dd2 <LoRaMacMibGetRequestConfirm+0x1aa>
 8048c3a:	e8df f003 	tbb	[pc, r3]
 8048c3e:	231b      	.short	0x231b
 8048c40:	36302d29 	.word	0x36302d29
 8048c44:	cacaca3c 	.word	0xcacaca3c
 8048c48:	cacacaca 	.word	0xcacacaca
 8048c4c:	cacacaca 	.word	0xcacacaca
 8048c50:	cacacaca 	.word	0xcacacaca
 8048c54:	cacacaca 	.word	0xcacacaca
 8048c58:	41cacaca 	.word	0x41cacaca
 8048c5c:	63584d47 	.word	0x63584d47
 8048c60:	76797069 	.word	0x76797069
 8048c64:	8e88827c 	.word	0x8e88827c
 8048c68:	a5a09a94 	.word	0xa5a09a94
 8048c6c:	b5afabab 	.word	0xb5afabab
 8048c70:	c5bb      	.short	0xc5bb
 8048c72:	c2          	.byte	0xc2
 8048c73:	00          	.byte	0x00
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = MacCtx.NvmCtx->DeviceClass;
 8048c74:	4b59      	ldr	r3, [pc, #356]	; (8048ddc <LoRaMacMibGetRequestConfirm+0x1b4>)
 8048c76:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8048c7a:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
            break;
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = MacCtx.NvmCtx->NetworkActivation;
 8048c7e:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8048c80:	2000      	movs	r0, #0
            break;
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
            break;
 8048c82:	e089      	b.n	8048d98 <LoRaMacMibGetRequestConfirm+0x170>
            mibGet->Param.NetworkActivation = MacCtx.NvmCtx->NetworkActivation;
 8048c84:	4b55      	ldr	r3, [pc, #340]	; (8048ddc <LoRaMacMibGetRequestConfirm+0x1b4>)
 8048c86:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8048c8a:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
 8048c8e:	e7f6      	b.n	8048c7e <LoRaMacMibGetRequestConfirm+0x56>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8048c90:	f7fe fad8 	bl	8047244 <SecureElementGetDevEui>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8048c94:	6060      	str	r0, [r4, #4]
 8048c96:	e7f3      	b.n	8048c80 <LoRaMacMibGetRequestConfirm+0x58>
 8048c98:	f7fe faea 	bl	8047270 <SecureElementGetJoinEui>
 8048c9c:	e7fa      	b.n	8048c94 <LoRaMacMibGetRequestConfirm+0x6c>
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 8048c9e:	4b4f      	ldr	r3, [pc, #316]	; (8048ddc <LoRaMacMibGetRequestConfirm+0x1b4>)
 8048ca0:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8048ca4:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
 8048ca8:	e7e9      	b.n	8048c7e <LoRaMacMibGetRequestConfirm+0x56>
            mibGet->Param.NetID = MacCtx.NvmCtx->NetID;
 8048caa:	4b4c      	ldr	r3, [pc, #304]	; (8048ddc <LoRaMacMibGetRequestConfirm+0x1b4>)
 8048cac:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8048cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 8048cb2:	6063      	str	r3, [r4, #4]
 8048cb4:	e7e4      	b.n	8048c80 <LoRaMacMibGetRequestConfirm+0x58>
            mibGet->Param.DevAddr = MacCtx.NvmCtx->DevAddr;
 8048cb6:	4b49      	ldr	r3, [pc, #292]	; (8048ddc <LoRaMacMibGetRequestConfirm+0x1b4>)
 8048cb8:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8048cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8048cbe:	e7f8      	b.n	8048cb2 <LoRaMacMibGetRequestConfirm+0x8a>
            mibGet->Param.EnablePublicNetwork = MacCtx.NvmCtx->PublicNetwork;
 8048cc0:	4b46      	ldr	r3, [pc, #280]	; (8048ddc <LoRaMacMibGetRequestConfirm+0x1b4>)
 8048cc2:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8048cc6:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
 8048cca:	e7d8      	b.n	8048c7e <LoRaMacMibGetRequestConfirm+0x56>
            mibGet->Param.EnableRepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8048ccc:	4b43      	ldr	r3, [pc, #268]	; (8048ddc <LoRaMacMibGetRequestConfirm+0x1b4>)
 8048cce:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8048cd2:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8048cd6:	e7d2      	b.n	8048c7e <LoRaMacMibGetRequestConfirm+0x56>
            getPhy.Attribute = PHY_CHANNELS;
 8048cd8:	a902      	add	r1, sp, #8
 8048cda:	231d      	movs	r3, #29
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8048cdc:	f801 3d08 	strb.w	r3, [r1, #-8]!
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8048ce0:	4b3e      	ldr	r3, [pc, #248]	; (8048ddc <LoRaMacMibGetRequestConfirm+0x1b4>)
 8048ce2:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8048ce6:	7818      	ldrb	r0, [r3, #0]
 8048ce8:	f001 fb0b 	bl	804a302 <RegionGetPhyParam>
 8048cec:	e7d2      	b.n	8048c94 <LoRaMacMibGetRequestConfirm+0x6c>
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 8048cee:	4b3b      	ldr	r3, [pc, #236]	; (8048ddc <LoRaMacMibGetRequestConfirm+0x1b4>)
 8048cf0:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8048cf4:	3404      	adds	r4, #4
 8048cf6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 8048cfa:	e893 0003 	ldmia.w	r3, {r0, r1}
 8048cfe:	e884 0003 	stmia.w	r4, {r0, r1}
 8048d02:	e7bd      	b.n	8048c80 <LoRaMacMibGetRequestConfirm+0x58>
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 8048d04:	4b35      	ldr	r3, [pc, #212]	; (8048ddc <LoRaMacMibGetRequestConfirm+0x1b4>)
 8048d06:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8048d0a:	3404      	adds	r4, #4
 8048d0c:	3328      	adds	r3, #40	; 0x28
 8048d0e:	e7f4      	b.n	8048cfa <LoRaMacMibGetRequestConfirm+0xd2>
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParams.RxCChannel;
 8048d10:	4b32      	ldr	r3, [pc, #200]	; (8048ddc <LoRaMacMibGetRequestConfirm+0x1b4>)
 8048d12:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8048d16:	3404      	adds	r4, #4
 8048d18:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8048d1c:	e7ed      	b.n	8048cfa <LoRaMacMibGetRequestConfirm+0xd2>
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 8048d1e:	4b2f      	ldr	r3, [pc, #188]	; (8048ddc <LoRaMacMibGetRequestConfirm+0x1b4>)
 8048d20:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8048d24:	3404      	adds	r4, #4
 8048d26:	3330      	adds	r3, #48	; 0x30
 8048d28:	e7e7      	b.n	8048cfa <LoRaMacMibGetRequestConfirm+0xd2>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8048d2a:	a902      	add	r1, sp, #8
 8048d2c:	231b      	movs	r3, #27
 8048d2e:	e7d5      	b.n	8048cdc <LoRaMacMibGetRequestConfirm+0xb4>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8048d30:	a902      	add	r1, sp, #8
 8048d32:	231a      	movs	r3, #26
 8048d34:	e7d2      	b.n	8048cdc <LoRaMacMibGetRequestConfirm+0xb4>
            mibGet->Param.ChannelsNbTrans = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 8048d36:	4b29      	ldr	r3, [pc, #164]	; (8048ddc <LoRaMacMibGetRequestConfirm+0x1b4>)
 8048d38:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8048d3c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8048d40:	e79d      	b.n	8048c7e <LoRaMacMibGetRequestConfirm+0x56>
            mibGet->Param.MaxRxWindow = MacCtx.NvmCtx->MacParams.MaxRxWindow;
 8048d42:	4b26      	ldr	r3, [pc, #152]	; (8048ddc <LoRaMacMibGetRequestConfirm+0x1b4>)
 8048d44:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8048d48:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8048d4c:	e7b1      	b.n	8048cb2 <LoRaMacMibGetRequestConfirm+0x8a>
            mibGet->Param.ReceiveDelay1 = MacCtx.NvmCtx->MacParams.ReceiveDelay1;
 8048d4e:	4b23      	ldr	r3, [pc, #140]	; (8048ddc <LoRaMacMibGetRequestConfirm+0x1b4>)
 8048d50:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8048d54:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8048d58:	e7ab      	b.n	8048cb2 <LoRaMacMibGetRequestConfirm+0x8a>
            mibGet->Param.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay2;
 8048d5a:	4b20      	ldr	r3, [pc, #128]	; (8048ddc <LoRaMacMibGetRequestConfirm+0x1b4>)
 8048d5c:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8048d60:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8048d64:	e7a5      	b.n	8048cb2 <LoRaMacMibGetRequestConfirm+0x8a>
            mibGet->Param.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1;
 8048d66:	4b1d      	ldr	r3, [pc, #116]	; (8048ddc <LoRaMacMibGetRequestConfirm+0x1b4>)
 8048d68:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8048d6c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8048d70:	e79f      	b.n	8048cb2 <LoRaMacMibGetRequestConfirm+0x8a>
            mibGet->Param.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2;
 8048d72:	4b1a      	ldr	r3, [pc, #104]	; (8048ddc <LoRaMacMibGetRequestConfirm+0x1b4>)
 8048d74:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8048d78:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8048d7c:	e799      	b.n	8048cb2 <LoRaMacMibGetRequestConfirm+0x8a>
            mibGet->Param.ChannelsDefaultDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 8048d7e:	4b17      	ldr	r3, [pc, #92]	; (8048ddc <LoRaMacMibGetRequestConfirm+0x1b4>)
 8048d80:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8048d84:	795b      	ldrb	r3, [r3, #5]
 8048d86:	e77a      	b.n	8048c7e <LoRaMacMibGetRequestConfirm+0x56>
            mibGet->Param.ChannelsDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8048d88:	4b14      	ldr	r3, [pc, #80]	; (8048ddc <LoRaMacMibGetRequestConfirm+0x1b4>)
 8048d8a:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8048d8e:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 8048d92:	e774      	b.n	8048c7e <LoRaMacMibGetRequestConfirm+0x56>
            mibGet->Param.ChannelsTxPower = TX_POWER_0/*MacCtx.NvmCtx->MacParams.ChannelsTxPower*/;
 8048d94:	2000      	movs	r0, #0
 8048d96:	7120      	strb	r0, [r4, #4]
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 8048d98:	b002      	add	sp, #8
 8048d9a:	bd10      	pop	{r4, pc}
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 8048d9c:	4b0f      	ldr	r3, [pc, #60]	; (8048ddc <LoRaMacMibGetRequestConfirm+0x1b4>)
 8048d9e:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8048da2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8048da6:	e784      	b.n	8048cb2 <LoRaMacMibGetRequestConfirm+0x8a>
            mibGet->Param.MinRxSymbols = MacCtx.NvmCtx->MacParams.MinRxSymbols;
 8048da8:	4b0c      	ldr	r3, [pc, #48]	; (8048ddc <LoRaMacMibGetRequestConfirm+0x1b4>)
 8048daa:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8048dae:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8048db2:	e764      	b.n	8048c7e <LoRaMacMibGetRequestConfirm+0x56>
            mibGet->Param.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8048db4:	4b09      	ldr	r3, [pc, #36]	; (8048ddc <LoRaMacMibGetRequestConfirm+0x1b4>)
 8048db6:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8048dba:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 8048dbe:	6063      	str	r3, [r4, #4]
 8048dc0:	e75e      	b.n	8048c80 <LoRaMacMibGetRequestConfirm+0x58>
            mibGet->Param.Contexts = GetCtxs( );
 8048dc2:	f7ff f9cb 	bl	804815c <GetCtxs>
 8048dc6:	e765      	b.n	8048c94 <LoRaMacMibGetRequestConfirm+0x6c>
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 8048dc8:	4b04      	ldr	r3, [pc, #16]	; (8048ddc <LoRaMacMibGetRequestConfirm+0x1b4>)
 8048dca:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8048dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8048dd0:	e7f5      	b.n	8048dbe <LoRaMacMibGetRequestConfirm+0x196>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8048dd2:	f000 fb8e 	bl	80494f2 <LoRaMacClassBMibGetRequestConfirm>
            break;
 8048dd6:	e7df      	b.n	8048d98 <LoRaMacMibGetRequestConfirm+0x170>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8048dd8:	2003      	movs	r0, #3
 8048dda:	e7dd      	b.n	8048d98 <LoRaMacMibGetRequestConfirm+0x170>
 8048ddc:	2000a11c 	.word	0x2000a11c

08048de0 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8048de0:	b530      	push	{r4, r5, lr}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8048de2:	4604      	mov	r4, r0
{
 8048de4:	b087      	sub	sp, #28
    if( mibSet == NULL )
 8048de6:	b930      	cbnz	r0, 8048df6 <LoRaMacMibSetRequestConfirm+0x16>
    {
    	PRINTF("LORAMAC_STATUS_PARAMETER_INVALID\r\n");
 8048de8:	4897      	ldr	r0, [pc, #604]	; (8049048 <LoRaMacMibSetRequestConfirm+0x268>)
 8048dea:	f002 fd8f 	bl	804b90c <TraceSend>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8048dee:	2403      	movs	r4, #3
        }
    }
    EventRegionNvmCtxChanged( );
    EventMacNvmCtxChanged( );
    return status;
}
 8048df0:	4620      	mov	r0, r4
 8048df2:	b007      	add	sp, #28
 8048df4:	bd30      	pop	{r4, r5, pc}
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8048df6:	4d95      	ldr	r5, [pc, #596]	; (804904c <LoRaMacMibSetRequestConfirm+0x26c>)
 8048df8:	f8d5 3344 	ldr.w	r3, [r5, #836]	; 0x344
 8048dfc:	079b      	lsls	r3, r3, #30
 8048dfe:	d504      	bpl.n	8048e0a <LoRaMacMibSetRequestConfirm+0x2a>
    	PRINTF("LORAMAC_STATUS_BUSY");
 8048e00:	4893      	ldr	r0, [pc, #588]	; (8049050 <LoRaMacMibSetRequestConfirm+0x270>)
 8048e02:	f002 fd83 	bl	804b90c <TraceSend>
        return LORAMAC_STATUS_BUSY;
 8048e06:	2401      	movs	r4, #1
 8048e08:	e7f2      	b.n	8048df0 <LoRaMacMibSetRequestConfirm+0x10>
    switch( mibSet->Type )
 8048e0a:	7803      	ldrb	r3, [r0, #0]
 8048e0c:	2b35      	cmp	r3, #53	; 0x35
 8048e0e:	f200 8233 	bhi.w	8049278 <LoRaMacMibSetRequestConfirm+0x498>
 8048e12:	e8df f013 	tbh	[pc, r3, lsl #1]
 8048e16:	0036      	.short	0x0036
 8048e18:	0044003b 	.word	0x0044003b
 8048e1c:	0053004f 	.word	0x0053004f
 8048e20:	005e0059 	.word	0x005e0059
 8048e24:	006d0063 	.word	0x006d0063
 8048e28:	00770072 	.word	0x00770072
 8048e2c:	0081007c 	.word	0x0081007c
 8048e30:	008b0086 	.word	0x008b0086
 8048e34:	00950090 	.word	0x00950090
 8048e38:	009f009a 	.word	0x009f009a
 8048e3c:	00a900a4 	.word	0x00a900a4
 8048e40:	00b300ae 	.word	0x00b300ae
 8048e44:	00bd00b8 	.word	0x00bd00b8
 8048e48:	00c700c2 	.word	0x00c700c2
 8048e4c:	00d300cd 	.word	0x00d300cd
 8048e50:	00e200d9 	.word	0x00e200d9
 8048e54:	00e80231 	.word	0x00e80231
 8048e58:	01210103 	.word	0x01210103
 8048e5c:	017c0158 	.word	0x017c0158
 8048e60:	0180016d 	.word	0x0180016d
 8048e64:	0190018a 	.word	0x0190018a
 8048e68:	019c0196 	.word	0x019c0196
 8048e6c:	01a801a2 	.word	0x01a801a2
 8048e70:	01eb01bb 	.word	0x01eb01bb
 8048e74:	020401d3 	.word	0x020401d3
 8048e78:	0212020b 	.word	0x0212020b
 8048e7c:	021d0218 	.word	0x021d0218
 8048e80:	0224      	.short	0x0224
            status = SwitchClass( mibSet->Param.Class );
 8048e82:	7900      	ldrb	r0, [r0, #4]
 8048e84:	f7fe fb18 	bl	80474b8 <SwitchClass>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8048e88:	4604      	mov	r4, r0
            break;
 8048e8a:	e00e      	b.n	8048eaa <LoRaMacMibSetRequestConfirm+0xca>
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8048e8c:	7903      	ldrb	r3, [r0, #4]
 8048e8e:	2b02      	cmp	r3, #2
 8048e90:	d00a      	beq.n	8048ea8 <LoRaMacMibSetRequestConfirm+0xc8>
                MacCtx.NvmCtx->NetworkActivation = mibSet->Param.NetworkActivation;
 8048e92:	f8d5 2488 	ldr.w	r2, [r5, #1160]	; 0x488
 8048e96:	f882 31d4 	strb.w	r3, [r2, #468]	; 0x1d4
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8048e9a:	2400      	movs	r4, #0
 8048e9c:	e005      	b.n	8048eaa <LoRaMacMibSetRequestConfirm+0xca>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8048e9e:	6840      	ldr	r0, [r0, #4]
 8048ea0:	f7fe f9be 	bl	8047220 <SecureElementSetDevEui>
 8048ea4:	2800      	cmp	r0, #0
 8048ea6:	d0f8      	beq.n	8048e9a <LoRaMacMibSetRequestConfirm+0xba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8048ea8:	2403      	movs	r4, #3
    EventRegionNvmCtxChanged( );
 8048eaa:	f7fe fa24 	bl	80472f6 <EventRegionNvmCtxChanged>
    EventMacNvmCtxChanged( );
 8048eae:	f7fe fa1f 	bl	80472f0 <EventMacNvmCtxChanged>
    return status;
 8048eb2:	e79d      	b.n	8048df0 <LoRaMacMibSetRequestConfirm+0x10>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8048eb4:	6840      	ldr	r0, [r0, #4]
 8048eb6:	f7fe f9c9 	bl	804724c <SecureElementSetJoinEui>
 8048eba:	e7f3      	b.n	8048ea4 <LoRaMacMibSetRequestConfirm+0xc4>
            MacCtx.NvmCtx->AdrCtrlOn = mibSet->Param.AdrEnable;
 8048ebc:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 8048ec0:	7902      	ldrb	r2, [r0, #4]
 8048ec2:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
 8048ec6:	e7e8      	b.n	8048e9a <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->NetID = mibSet->Param.NetID;
 8048ec8:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 8048ecc:	6842      	ldr	r2, [r0, #4]
 8048ece:	649a      	str	r2, [r3, #72]	; 0x48
 8048ed0:	e7e3      	b.n	8048e9a <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->DevAddr = mibSet->Param.DevAddr;
 8048ed2:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 8048ed6:	6842      	ldr	r2, [r0, #4]
 8048ed8:	64da      	str	r2, [r3, #76]	; 0x4c
 8048eda:	e7de      	b.n	8048e9a <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.GenAppKey != NULL )
 8048edc:	6841      	ldr	r1, [r0, #4]
 8048ede:	2900      	cmp	r1, #0
 8048ee0:	d0e2      	beq.n	8048ea8 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( GEN_APP_KEY, mibSet->Param.GenAppKey ) )
 8048ee2:	2001      	movs	r0, #1
 8048ee4:	f000 fff0 	bl	8049ec8 <LoRaMacCryptoSetKey>
 8048ee8:	2800      	cmp	r0, #0
 8048eea:	d0d6      	beq.n	8048e9a <LoRaMacMibSetRequestConfirm+0xba>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8048eec:	2411      	movs	r4, #17
 8048eee:	e77f      	b.n	8048df0 <LoRaMacMibSetRequestConfirm+0x10>
            if( mibSet->Param.AppKey != NULL )
 8048ef0:	6841      	ldr	r1, [r0, #4]
 8048ef2:	2900      	cmp	r1, #0
 8048ef4:	d0d8      	beq.n	8048ea8 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8048ef6:	2000      	movs	r0, #0
 8048ef8:	e7f4      	b.n	8048ee4 <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.NwkKey != NULL )
 8048efa:	6841      	ldr	r1, [r0, #4]
 8048efc:	2900      	cmp	r1, #0
 8048efe:	d0d3      	beq.n	8048ea8 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8048f00:	2002      	movs	r0, #2
 8048f02:	e7ef      	b.n	8048ee4 <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.JSIntKey != NULL )
 8048f04:	6841      	ldr	r1, [r0, #4]
 8048f06:	2900      	cmp	r1, #0
 8048f08:	d0ce      	beq.n	8048ea8 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_INT_KEY, mibSet->Param.JSIntKey ) )
 8048f0a:	2003      	movs	r0, #3
 8048f0c:	e7ea      	b.n	8048ee4 <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.JSEncKey != NULL )
 8048f0e:	6841      	ldr	r1, [r0, #4]
 8048f10:	2900      	cmp	r1, #0
 8048f12:	d0c9      	beq.n	8048ea8 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_ENC_KEY, mibSet->Param.JSEncKey ) )
 8048f14:	2004      	movs	r0, #4
 8048f16:	e7e5      	b.n	8048ee4 <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.FNwkSIntKey != NULL )
 8048f18:	6841      	ldr	r1, [r0, #4]
 8048f1a:	2900      	cmp	r1, #0
 8048f1c:	d0c4      	beq.n	8048ea8 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( F_NWK_S_INT_KEY, mibSet->Param.FNwkSIntKey ) )
 8048f1e:	2005      	movs	r0, #5
 8048f20:	e7e0      	b.n	8048ee4 <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.SNwkSIntKey != NULL )
 8048f22:	6841      	ldr	r1, [r0, #4]
 8048f24:	2900      	cmp	r1, #0
 8048f26:	d0bf      	beq.n	8048ea8 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( S_NWK_S_INT_KEY, mibSet->Param.SNwkSIntKey ) )
 8048f28:	2006      	movs	r0, #6
 8048f2a:	e7db      	b.n	8048ee4 <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.NwkSEncKey != NULL )
 8048f2c:	6841      	ldr	r1, [r0, #4]
 8048f2e:	2900      	cmp	r1, #0
 8048f30:	d0ba      	beq.n	8048ea8 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_ENC_KEY, mibSet->Param.NwkSEncKey ) )
 8048f32:	2007      	movs	r0, #7
 8048f34:	e7d6      	b.n	8048ee4 <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.AppSKey != NULL )
 8048f36:	6841      	ldr	r1, [r0, #4]
 8048f38:	2900      	cmp	r1, #0
 8048f3a:	d0b5      	beq.n	8048ea8 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8048f3c:	2008      	movs	r0, #8
 8048f3e:	e7d1      	b.n	8048ee4 <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McKEKey != NULL )
 8048f40:	6841      	ldr	r1, [r0, #4]
 8048f42:	2900      	cmp	r1, #0
 8048f44:	d0b0      	beq.n	8048ea8 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8048f46:	207f      	movs	r0, #127	; 0x7f
 8048f48:	e7cc      	b.n	8048ee4 <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McKey0 != NULL )
 8048f4a:	6841      	ldr	r1, [r0, #4]
 8048f4c:	2900      	cmp	r1, #0
 8048f4e:	d0ab      	beq.n	8048ea8 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8048f50:	2080      	movs	r0, #128	; 0x80
 8048f52:	e7c7      	b.n	8048ee4 <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McAppSKey0 != NULL )
 8048f54:	6841      	ldr	r1, [r0, #4]
 8048f56:	2900      	cmp	r1, #0
 8048f58:	d0a6      	beq.n	8048ea8 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8048f5a:	2081      	movs	r0, #129	; 0x81
 8048f5c:	e7c2      	b.n	8048ee4 <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McNwkSKey0 != NULL )
 8048f5e:	6841      	ldr	r1, [r0, #4]
 8048f60:	2900      	cmp	r1, #0
 8048f62:	d0a1      	beq.n	8048ea8 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8048f64:	2082      	movs	r0, #130	; 0x82
 8048f66:	e7bd      	b.n	8048ee4 <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McKey1 != NULL )
 8048f68:	6841      	ldr	r1, [r0, #4]
 8048f6a:	2900      	cmp	r1, #0
 8048f6c:	d09c      	beq.n	8048ea8 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_1, mibSet->Param.McKey1 ) )
 8048f6e:	2083      	movs	r0, #131	; 0x83
 8048f70:	e7b8      	b.n	8048ee4 <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McAppSKey1 != NULL )
 8048f72:	6841      	ldr	r1, [r0, #4]
 8048f74:	2900      	cmp	r1, #0
 8048f76:	d097      	beq.n	8048ea8 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_1, mibSet->Param.McAppSKey1 ) )
 8048f78:	2084      	movs	r0, #132	; 0x84
 8048f7a:	e7b3      	b.n	8048ee4 <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McNwkSKey1 != NULL )
 8048f7c:	6841      	ldr	r1, [r0, #4]
 8048f7e:	2900      	cmp	r1, #0
 8048f80:	d092      	beq.n	8048ea8 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_1, mibSet->Param.McNwkSKey1 ) )
 8048f82:	2085      	movs	r0, #133	; 0x85
 8048f84:	e7ae      	b.n	8048ee4 <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McKey2 != NULL )
 8048f86:	6841      	ldr	r1, [r0, #4]
 8048f88:	2900      	cmp	r1, #0
 8048f8a:	d08d      	beq.n	8048ea8 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_2, mibSet->Param.McKey2 ) )
 8048f8c:	2086      	movs	r0, #134	; 0x86
 8048f8e:	e7a9      	b.n	8048ee4 <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McAppSKey2 != NULL )
 8048f90:	6841      	ldr	r1, [r0, #4]
 8048f92:	2900      	cmp	r1, #0
 8048f94:	d088      	beq.n	8048ea8 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_2, mibSet->Param.McAppSKey2 ) )
 8048f96:	2087      	movs	r0, #135	; 0x87
 8048f98:	e7a4      	b.n	8048ee4 <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McNwkSKey2 != NULL )
 8048f9a:	6841      	ldr	r1, [r0, #4]
 8048f9c:	2900      	cmp	r1, #0
 8048f9e:	d083      	beq.n	8048ea8 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_2, mibSet->Param.McNwkSKey2 ) )
 8048fa0:	2088      	movs	r0, #136	; 0x88
 8048fa2:	e79f      	b.n	8048ee4 <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McKey3 != NULL )
 8048fa4:	6841      	ldr	r1, [r0, #4]
 8048fa6:	2900      	cmp	r1, #0
 8048fa8:	f43f af7e 	beq.w	8048ea8 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_3, mibSet->Param.McKey3 ) )
 8048fac:	2089      	movs	r0, #137	; 0x89
 8048fae:	e799      	b.n	8048ee4 <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McAppSKey3 != NULL )
 8048fb0:	6841      	ldr	r1, [r0, #4]
 8048fb2:	2900      	cmp	r1, #0
 8048fb4:	f43f af78 	beq.w	8048ea8 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_3, mibSet->Param.McAppSKey3 ) )
 8048fb8:	208a      	movs	r0, #138	; 0x8a
 8048fba:	e793      	b.n	8048ee4 <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McNwkSKey3 != NULL )
 8048fbc:	6841      	ldr	r1, [r0, #4]
 8048fbe:	2900      	cmp	r1, #0
 8048fc0:	f43f af72 	beq.w	8048ea8 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_3, mibSet->Param.McNwkSKey3 ) )
 8048fc4:	208b      	movs	r0, #139	; 0x8b
 8048fc6:	e78d      	b.n	8048ee4 <LoRaMacMibSetRequestConfirm+0x104>
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8048fc8:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 8048fcc:	7900      	ldrb	r0, [r0, #4]
 8048fce:	f883 00f1 	strb.w	r0, [r3, #241]	; 0xf1
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 8048fd2:	4b20      	ldr	r3, [pc, #128]	; (8049054 <LoRaMacMibSetRequestConfirm+0x274>)
 8048fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8048fd6:	4798      	blx	r3
 8048fd8:	e75f      	b.n	8048e9a <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8048fda:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 8048fde:	7902      	ldrb	r2, [r0, #4]
 8048fe0:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
 8048fe4:	e759      	b.n	8048e9a <LoRaMacMibSetRequestConfirm+0xba>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8048fe6:	7a03      	ldrb	r3, [r0, #8]
 8048fe8:	f88d 300c 	strb.w	r3, [sp, #12]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8048fec:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 8048ff0:	f893 212d 	ldrb.w	r2, [r3, #301]	; 0x12d
 8048ff4:	f88d 200d 	strb.w	r2, [sp, #13]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 8048ff8:	a903      	add	r1, sp, #12
 8048ffa:	2207      	movs	r2, #7
 8048ffc:	7818      	ldrb	r0, [r3, #0]
 8048ffe:	f001 f99d 	bl	804a33c <RegionVerify>
 8049002:	2800      	cmp	r0, #0
 8049004:	f43f af50 	beq.w	8048ea8 <LoRaMacMibSetRequestConfirm+0xc8>
                MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8049008:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804900c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8049010:	3404      	adds	r4, #4
 8049012:	e894 0003 	ldmia.w	r4, {r0, r1}
 8049016:	e883 0003 	stmia.w	r3, {r0, r1}
 804901a:	e73e      	b.n	8048e9a <LoRaMacMibSetRequestConfirm+0xba>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 804901c:	7a03      	ldrb	r3, [r0, #8]
 804901e:	f88d 300c 	strb.w	r3, [sp, #12]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8049022:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 8049026:	f893 212d 	ldrb.w	r2, [r3, #301]	; 0x12d
 804902a:	f88d 200d 	strb.w	r2, [sp, #13]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 804902e:	a903      	add	r1, sp, #12
 8049030:	2207      	movs	r2, #7
 8049032:	7818      	ldrb	r0, [r3, #0]
 8049034:	f001 f982 	bl	804a33c <RegionVerify>
 8049038:	2800      	cmp	r0, #0
 804903a:	f43f af35 	beq.w	8048ea8 <LoRaMacMibSetRequestConfirm+0xc8>
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 804903e:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 8049042:	3328      	adds	r3, #40	; 0x28
 8049044:	e7e4      	b.n	8049010 <LoRaMacMibSetRequestConfirm+0x230>
 8049046:	bf00      	nop
 8049048:	0804f605 	.word	0x0804f605
 804904c:	2000a11c 	.word	0x2000a11c
 8049050:	0804f628 	.word	0x0804f628
 8049054:	0804efb8 	.word	0x0804efb8
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8049058:	7a03      	ldrb	r3, [r0, #8]
 804905a:	f88d 300c 	strb.w	r3, [sp, #12]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 804905e:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 8049062:	f893 212d 	ldrb.w	r2, [r3, #301]	; 0x12d
 8049066:	f88d 200d 	strb.w	r2, [sp, #13]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 804906a:	a903      	add	r1, sp, #12
 804906c:	2207      	movs	r2, #7
 804906e:	7818      	ldrb	r0, [r3, #0]
 8049070:	f001 f964 	bl	804a33c <RegionVerify>
 8049074:	2800      	cmp	r0, #0
 8049076:	f43f af17 	beq.w	8048ea8 <LoRaMacMibSetRequestConfirm+0xc8>
                MacCtx.NvmCtx->MacParams.RxCChannel = mibSet->Param.RxCChannel;
 804907a:	3404      	adds	r4, #4
 804907c:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 8049080:	e894 0003 	ldmia.w	r4, {r0, r1}
 8049084:	f503 7292 	add.w	r2, r3, #292	; 0x124
 8049088:	e882 0003 	stmia.w	r2, {r0, r1}
                if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) && ( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE ) )
 804908c:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
 8049090:	2a02      	cmp	r2, #2
 8049092:	f47f af02 	bne.w	8048e9a <LoRaMacMibSetRequestConfirm+0xba>
 8049096:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
 804909a:	2b00      	cmp	r3, #0
 804909c:	f43f aefd 	beq.w	8048e9a <LoRaMacMibSetRequestConfirm+0xba>
                    Radio.Sleep( );
 80490a0:	4b77      	ldr	r3, [pc, #476]	; (8049280 <LoRaMacMibSetRequestConfirm+0x4a0>)
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80490a2:	4c78      	ldr	r4, [pc, #480]	; (8049284 <LoRaMacMibSetRequestConfirm+0x4a4>)
                    Radio.Sleep( );
 80490a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80490a6:	4798      	blx	r3
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80490a8:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 80490ac:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
 80490b0:	f993 1128 	ldrsb.w	r1, [r3, #296]	; 0x128
 80490b4:	7818      	ldrb	r0, [r3, #0]
 80490b6:	9400      	str	r4, [sp, #0]
 80490b8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80490bc:	f001 f954 	bl	804a368 <RegionComputeRxWindowParameters>
                    OpenContinuousRxCWindow( );
 80490c0:	f7fe f9da 	bl	8047478 <OpenContinuousRxCWindow>
 80490c4:	e6e9      	b.n	8048e9a <LoRaMacMibSetRequestConfirm+0xba>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80490c6:	7a03      	ldrb	r3, [r0, #8]
 80490c8:	f88d 300c 	strb.w	r3, [sp, #12]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80490cc:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 80490d0:	f893 212d 	ldrb.w	r2, [r3, #301]	; 0x12d
 80490d4:	f88d 200d 	strb.w	r2, [sp, #13]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 80490d8:	a903      	add	r1, sp, #12
 80490da:	2207      	movs	r2, #7
 80490dc:	7818      	ldrb	r0, [r3, #0]
 80490de:	f001 f92d 	bl	804a33c <RegionVerify>
 80490e2:	2800      	cmp	r0, #0
 80490e4:	f43f aee0 	beq.w	8048ea8 <LoRaMacMibSetRequestConfirm+0xc8>
                MacCtx.NvmCtx->MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 80490e8:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 80490ec:	3330      	adds	r3, #48	; 0x30
 80490ee:	e78f      	b.n	8049010 <LoRaMacMibSetRequestConfirm+0x230>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 80490f0:	6843      	ldr	r3, [r0, #4]
 80490f2:	9304      	str	r3, [sp, #16]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 80490f4:	2301      	movs	r3, #1
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 80490f6:	f88d 3014 	strb.w	r3, [sp, #20]
            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 80490fa:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 80490fe:	a904      	add	r1, sp, #16
 8049100:	7818      	ldrb	r0, [r3, #0]
 8049102:	f001 f92a 	bl	804a35a <RegionChanMaskSet>
 8049106:	2800      	cmp	r0, #0
 8049108:	f47f aec7 	bne.w	8048e9a <LoRaMacMibSetRequestConfirm+0xba>
 804910c:	e6cc      	b.n	8048ea8 <LoRaMacMibSetRequestConfirm+0xc8>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 804910e:	6843      	ldr	r3, [r0, #4]
 8049110:	9304      	str	r3, [sp, #16]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8049112:	2300      	movs	r3, #0
 8049114:	e7ef      	b.n	80490f6 <LoRaMacMibSetRequestConfirm+0x316>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8049116:	7903      	ldrb	r3, [r0, #4]
 8049118:	1e5a      	subs	r2, r3, #1
 804911a:	2a0e      	cmp	r2, #14
 804911c:	f63f aec4 	bhi.w	8048ea8 <LoRaMacMibSetRequestConfirm+0xc8>
                MacCtx.NvmCtx->MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8049120:	f8d5 2488 	ldr.w	r2, [r5, #1160]	; 0x488
 8049124:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
 8049128:	e6b7      	b.n	8048e9a <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 804912a:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804912e:	6842      	ldr	r2, [r0, #4]
 8049130:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8049134:	e6b1      	b.n	8048e9a <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8049136:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804913a:	6842      	ldr	r2, [r0, #4]
 804913c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 8049140:	e6ab      	b.n	8048e9a <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8049142:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 8049146:	6842      	ldr	r2, [r0, #4]
 8049148:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 804914c:	e6a5      	b.n	8048e9a <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 804914e:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 8049152:	6842      	ldr	r2, [r0, #4]
 8049154:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 8049158:	e69f      	b.n	8048e9a <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 804915a:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804915e:	6842      	ldr	r2, [r0, #4]
 8049160:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8049164:	e699      	b.n	8048e9a <LoRaMacMibSetRequestConfirm+0xba>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8049166:	a906      	add	r1, sp, #24
 8049168:	7903      	ldrb	r3, [r0, #4]
 804916a:	f801 3d0c 	strb.w	r3, [r1, #-12]!
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 804916e:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 8049172:	2206      	movs	r2, #6
 8049174:	7818      	ldrb	r0, [r3, #0]
 8049176:	f001 f8e1 	bl	804a33c <RegionVerify>
 804917a:	2800      	cmp	r0, #0
 804917c:	f43f ae94 	beq.w	8048ea8 <LoRaMacMibSetRequestConfirm+0xc8>
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = verify.DatarateParams.Datarate;
 8049180:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 8049184:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8049188:	715a      	strb	r2, [r3, #5]
 804918a:	e686      	b.n	8048e9a <LoRaMacMibSetRequestConfirm+0xba>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 804918c:	7903      	ldrb	r3, [r0, #4]
 804918e:	f88d 300c 	strb.w	r3, [sp, #12]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8049192:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 8049196:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 804919a:	f88d 200e 	strb.w	r2, [sp, #14]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 804919e:	a903      	add	r1, sp, #12
 80491a0:	2205      	movs	r2, #5
 80491a2:	7818      	ldrb	r0, [r3, #0]
 80491a4:	f001 f8ca 	bl	804a33c <RegionVerify>
 80491a8:	2800      	cmp	r0, #0
 80491aa:	f43f ae7d 	beq.w	8048ea8 <LoRaMacMibSetRequestConfirm+0xc8>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 80491ae:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 80491b2:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80491b6:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
 80491ba:	e66e      	b.n	8048e9a <LoRaMacMibSetRequestConfirm+0xba>
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 80491bc:	a906      	add	r1, sp, #24
 80491be:	7903      	ldrb	r3, [r0, #4]
 80491c0:	f801 3d0c 	strb.w	r3, [r1, #-12]!
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 80491c4:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 80491c8:	220a      	movs	r2, #10
 80491ca:	7818      	ldrb	r0, [r3, #0]
 80491cc:	f001 f8b6 	bl	804a33c <RegionVerify>
 80491d0:	b930      	cbnz	r0, 80491e0 <LoRaMacMibSetRequestConfirm+0x400>
            	PPRINTF("erro");
 80491d2:	4c2d      	ldr	r4, [pc, #180]	; (8049288 <LoRaMacMibSetRequestConfirm+0x4a8>)
 80491d4:	4620      	mov	r0, r4
 80491d6:	f002 fb99 	bl	804b90c <TraceSend>
 80491da:	2800      	cmp	r0, #0
 80491dc:	d1fa      	bne.n	80491d4 <LoRaMacMibSetRequestConfirm+0x3f4>
 80491de:	e663      	b.n	8048ea8 <LoRaMacMibSetRequestConfirm+0xc8>
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = verify.TxPower;
 80491e0:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 80491e4:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80491e8:	711a      	strb	r2, [r3, #4]
 80491ea:	e656      	b.n	8048e9a <LoRaMacMibSetRequestConfirm+0xba>
            verify.TxPower = TX_POWER_0/*mibSet->Param.ChannelsTxPower*/;
 80491ec:	a906      	add	r1, sp, #24
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 80491ee:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
            verify.TxPower = TX_POWER_0/*mibSet->Param.ChannelsTxPower*/;
 80491f2:	2400      	movs	r4, #0
 80491f4:	f801 4d0c 	strb.w	r4, [r1, #-12]!
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 80491f8:	2209      	movs	r2, #9
 80491fa:	7818      	ldrb	r0, [r3, #0]
 80491fc:	f001 f89e 	bl	804a33c <RegionVerify>
 8049200:	b930      	cbnz	r0, 8049210 <LoRaMacMibSetRequestConfirm+0x430>
            	PPRINTF("erro");
 8049202:	4c21      	ldr	r4, [pc, #132]	; (8049288 <LoRaMacMibSetRequestConfirm+0x4a8>)
 8049204:	4620      	mov	r0, r4
 8049206:	f002 fb81 	bl	804b90c <TraceSend>
 804920a:	2800      	cmp	r0, #0
 804920c:	d1fa      	bne.n	8049204 <LoRaMacMibSetRequestConfirm+0x424>
 804920e:	e64b      	b.n	8048ea8 <LoRaMacMibSetRequestConfirm+0xc8>
                MacCtx.NvmCtx->MacParams.ChannelsTxPower = verify.TxPower;
 8049210:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 8049214:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8049218:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
 804921c:	e645      	b.n	8048eaa <LoRaMacMibSetRequestConfirm+0xca>
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 804921e:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 8049222:	6842      	ldr	r2, [r0, #4]
 8049224:	609a      	str	r2, [r3, #8]
 8049226:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
 804922a:	e636      	b.n	8048e9a <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 804922c:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 8049230:	7902      	ldrb	r2, [r0, #4]
 8049232:	731a      	strb	r2, [r3, #12]
 8049234:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 8049238:	e62f      	b.n	8048e9a <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->MacParams.AntennaGain = mibSet->Param.AntennaGain;
 804923a:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804923e:	6842      	ldr	r2, [r0, #4]
 8049240:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 8049244:	e629      	b.n	8048e9a <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8049246:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804924a:	6842      	ldr	r2, [r0, #4]
 804924c:	641a      	str	r2, [r3, #64]	; 0x40
 804924e:	e624      	b.n	8048e9a <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.Contexts != 0 )
 8049250:	6840      	ldr	r0, [r0, #4]
 8049252:	2800      	cmp	r0, #0
 8049254:	f43f ae28 	beq.w	8048ea8 <LoRaMacMibSetRequestConfirm+0xc8>
                status = RestoreCtxs( mibSet->Param.Contexts );
 8049258:	f7fe ffb6 	bl	80481c8 <RestoreCtxs>
 804925c:	e614      	b.n	8048e88 <LoRaMacMibSetRequestConfirm+0xa8>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 804925e:	7983      	ldrb	r3, [r0, #6]
 8049260:	2b01      	cmp	r3, #1
 8049262:	f63f ae21 	bhi.w	8048ea8 <LoRaMacMibSetRequestConfirm+0xc8>
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
 8049266:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804926a:	6842      	ldr	r2, [r0, #4]
 804926c:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8049270:	6840      	ldr	r0, [r0, #4]
 8049272:	f000 fc7f 	bl	8049b74 <LoRaMacCryptoSetLrWanVersion>
 8049276:	e637      	b.n	8048ee8 <LoRaMacMibSetRequestConfirm+0x108>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8049278:	f000 f93d 	bl	80494f6 <LoRaMacMibClassBSetRequestConfirm>
 804927c:	e604      	b.n	8048e88 <LoRaMacMibSetRequestConfirm+0xa8>
 804927e:	bf00      	nop
 8049280:	0804efb8 	.word	0x0804efb8
 8049284:	2000a500 	.word	0x2000a500
 8049288:	0804f63c 	.word	0x0804f63c

0804928c <LoRaMacMcpsRequest>:
    }
    return status;
}

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest )
{
 804928c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    void* fBuffer;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 8049290:	4605      	mov	r5, r0
{
 8049292:	b085      	sub	sp, #20
    if( mcpsRequest == NULL )
 8049294:	2800      	cmp	r0, #0
 8049296:	f000 809e 	beq.w	80493d6 <LoRaMacMcpsRequest+0x14a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( LoRaMacIsBusy( ) == true )
 804929a:	f7fe fc4b 	bl	8047b34 <LoRaMacIsBusy>
 804929e:	4607      	mov	r7, r0
 80492a0:	2800      	cmp	r0, #0
 80492a2:	f040 809e 	bne.w	80493e2 <LoRaMacMcpsRequest+0x156>
    {
        return LORAMAC_STATUS_BUSY;
    }

    macHdr.Value = 0;
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 80492a6:	4c50      	ldr	r4, [pc, #320]	; (80493e8 <LoRaMacMcpsRequest+0x15c>)
    macHdr.Value = 0;
 80492a8:	f88d 0000 	strb.w	r0, [sp]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 80492ac:	2214      	movs	r2, #20
 80492ae:	4601      	mov	r1, r0
 80492b0:	f504 6088 	add.w	r0, r4, #1088	; 0x440
 80492b4:	f002 fb9d 	bl	804b9f2 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80492b8:	2301      	movs	r3, #1

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 80492ba:	f884 3416 	strb.w	r3, [r4, #1046]	; 0x416

    switch( mcpsRequest->Type )
 80492be:	782a      	ldrb	r2, [r5, #0]
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80492c0:	f884 3441 	strb.w	r3, [r4, #1089]	; 0x441
    switch( mcpsRequest->Type )
 80492c4:	429a      	cmp	r2, r3
 80492c6:	d05a      	beq.n	804937e <LoRaMacMcpsRequest+0xf2>
 80492c8:	d304      	bcc.n	80492d4 <LoRaMacMcpsRequest+0x48>
 80492ca:	2a03      	cmp	r2, #3
 80492cc:	d06e      	beq.n	80493ac <LoRaMacMcpsRequest+0x120>
    int8_t datarate = DR_0;
 80492ce:	46bb      	mov	fp, r7
    uint8_t fPort = 0;
 80492d0:	46b8      	mov	r8, r7
 80492d2:	e011      	b.n	80492f8 <LoRaMacMcpsRequest+0x6c>
        case MCPS_UNCONFIRMED:
        {
            readyToSend = true;
            MacCtx.AckTimeoutRetries = 1;

            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 80492d4:	f89d 2000 	ldrb.w	r2, [sp]
            MacCtx.AckTimeoutRetries = 1;
 80492d8:	f884 3415 	strb.w	r3, [r4, #1045]	; 0x415
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 80492dc:	2102      	movs	r1, #2
 80492de:	f361 1247 	bfi	r2, r1, #5, #3
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 80492e2:	f895 8004 	ldrb.w	r8, [r5, #4]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 80492e6:	f8d5 9008 	ldr.w	r9, [r5, #8]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 80492ea:	f8b5 a00c 	ldrh.w	sl, [r5, #12]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 80492ee:	f995 b00e 	ldrsb.w	fp, [r5, #14]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 80492f2:	f88d 2000 	strb.w	r2, [sp]
            readyToSend = true;
 80492f6:	461f      	mov	r7, r3
            break;
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80492f8:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 80492fc:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 8049300:	f88d 2006 	strb.w	r2, [sp, #6]
    getPhy.Attribute = PHY_MIN_TX_DR;
 8049304:	2602      	movs	r6, #2
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8049306:	a901      	add	r1, sp, #4
 8049308:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_MIN_TX_DR;
 804930a:	f88d 6004 	strb.w	r6, [sp, #4]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804930e:	f000 fff8 	bl	804a302 <RegionGetPhyParam>
 8049312:	9002      	str	r0, [sp, #8]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );

    if( readyToSend == true )
 8049314:	b36f      	cbz	r7, 8049372 <LoRaMacMcpsRequest+0xe6>
    {
        if( MacCtx.NvmCtx->AdrCtrlOn == false )
 8049316:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 804931a:	f893 20f2 	ldrb.w	r2, [r3, #242]	; 0xf2
 804931e:	b9b2      	cbnz	r2, 804934e <LoRaMacMcpsRequest+0xc2>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8049320:	b240      	sxtb	r0, r0
 8049322:	4558      	cmp	r0, fp
 8049324:	bfb8      	it	lt
 8049326:	4658      	movlt	r0, fp
        {
            verify.DatarateParams.Datarate = datarate;
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8049328:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
            verify.DatarateParams.Datarate = datarate;
 804932c:	f88d 000c 	strb.w	r0, [sp, #12]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8049330:	f88d 200e 	strb.w	r2, [sp, #14]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 8049334:	a903      	add	r1, sp, #12
 8049336:	2205      	movs	r2, #5
 8049338:	7818      	ldrb	r0, [r3, #0]
 804933a:	f000 ffff 	bl	804a33c <RegionVerify>
 804933e:	2800      	cmp	r0, #0
 8049340:	d046      	beq.n	80493d0 <LoRaMacMcpsRequest+0x144>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 8049342:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8049346:	f89d 200c 	ldrb.w	r2, [sp, #12]
 804934a:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
            	PRINTF("Invalid data rate\r\n");
                return LORAMAC_STATUS_PARAMETER_INVALID;
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize );
 804934e:	4653      	mov	r3, sl
 8049350:	464a      	mov	r2, r9
 8049352:	4641      	mov	r1, r8
 8049354:	4668      	mov	r0, sp
 8049356:	f7fe fe69 	bl	804802c <Send>
        if( status == LORAMAC_STATUS_OK )
 804935a:	4606      	mov	r6, r0
 804935c:	2800      	cmp	r0, #0
 804935e:	d13c      	bne.n	80493da <LoRaMacMcpsRequest+0x14e>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8049360:	782b      	ldrb	r3, [r5, #0]
 8049362:	f884 3440 	strb.w	r3, [r4, #1088]	; 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8049366:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 804936a:	f043 0301 	orr.w	r3, r3, #1
 804936e:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
        {
            MacCtx.NodeAckRequested = false;
        }
    }

    EventMacNvmCtxChanged( );
 8049372:	f7fd ffbd 	bl	80472f0 <EventMacNvmCtxChanged>
    return status;
}
 8049376:	4630      	mov	r0, r6
 8049378:	b005      	add	sp, #20
 804937a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 804937e:	7beb      	ldrb	r3, [r5, #15]
 8049380:	2b08      	cmp	r3, #8
 8049382:	bf28      	it	cs
 8049384:	2308      	movcs	r3, #8
 8049386:	f884 3415 	strb.w	r3, [r4, #1045]	; 0x415
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 804938a:	f89d 3000 	ldrb.w	r3, [sp]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 804938e:	f895 8004 	ldrb.w	r8, [r5, #4]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8049392:	f8d5 9008 	ldr.w	r9, [r5, #8]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8049396:	f8b5 a00c 	ldrh.w	sl, [r5, #12]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 804939a:	f995 b00e 	ldrsb.w	fp, [r5, #14]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 804939e:	2104      	movs	r1, #4
 80493a0:	f361 1347 	bfi	r3, r1, #5, #3
 80493a4:	f88d 3000 	strb.w	r3, [sp]
            readyToSend = true;
 80493a8:	4617      	mov	r7, r2
            break;
 80493aa:	e7a5      	b.n	80492f8 <LoRaMacMcpsRequest+0x6c>
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 80493ac:	f89d 2000 	ldrb.w	r2, [sp]
            MacCtx.AckTimeoutRetries = 1;
 80493b0:	f884 3415 	strb.w	r3, [r4, #1045]	; 0x415
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 80493b4:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80493b8:	f88d 2000 	strb.w	r2, [sp]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 80493bc:	f8d5 9004 	ldr.w	r9, [r5, #4]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 80493c0:	f8b5 a008 	ldrh.w	sl, [r5, #8]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 80493c4:	f995 b00a 	ldrsb.w	fp, [r5, #10]
            readyToSend = true;
 80493c8:	461f      	mov	r7, r3
    uint8_t fPort = 0;
 80493ca:	f04f 0800 	mov.w	r8, #0
            break;
 80493ce:	e793      	b.n	80492f8 <LoRaMacMcpsRequest+0x6c>
            	PRINTF("Invalid data rate\r\n");
 80493d0:	4806      	ldr	r0, [pc, #24]	; (80493ec <LoRaMacMcpsRequest+0x160>)
 80493d2:	f002 fa9b 	bl	804b90c <TraceSend>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80493d6:	2603      	movs	r6, #3
 80493d8:	e7cd      	b.n	8049376 <LoRaMacMcpsRequest+0xea>
            MacCtx.NodeAckRequested = false;
 80493da:	2300      	movs	r3, #0
 80493dc:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
 80493e0:	e7c7      	b.n	8049372 <LoRaMacMcpsRequest+0xe6>
        return LORAMAC_STATUS_BUSY;
 80493e2:	2601      	movs	r6, #1
 80493e4:	e7c7      	b.n	8049376 <LoRaMacMcpsRequest+0xea>
 80493e6:	bf00      	nop
 80493e8:	2000a11c 	.word	0x2000a11c
 80493ec:	0804f6b4 	.word	0x0804f6b4

080493f0 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 80493f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( adrNext->Version.Fields.Minor == 0 )
 80493f4:	7887      	ldrb	r7, [r0, #2]
{
 80493f6:	b087      	sub	sp, #28
 80493f8:	4604      	mov	r4, r0
 80493fa:	468a      	mov	sl, r1
 80493fc:	4691      	mov	r9, r2
    if( adrNext->Version.Fields.Minor == 0 )
 80493fe:	2f00      	cmp	r7, #0
 8049400:	d15b      	bne.n	80494ba <LoRaMacAdrCalcNext+0xca>
    if( adrNext->AdrEnabled == true )
 8049402:	7945      	ldrb	r5, [r0, #5]
    *adrAckCounter = adrNext->AdrAckCounter;
 8049404:	6882      	ldr	r2, [r0, #8]
    int8_t datarate = adrNext->Datarate;
 8049406:	f990 8010 	ldrsb.w	r8, [r0, #16]
    *adrAckCounter = adrNext->AdrAckCounter;
 804940a:	601a      	str	r2, [r3, #0]
    if( adrNext->AdrEnabled == true )
 804940c:	2d00      	cmp	r5, #0
 804940e:	d052      	beq.n	80494b6 <LoRaMacAdrCalcNext+0xc6>
        getPhy.Attribute = PHY_MIN_TX_DR;
 8049410:	2202      	movs	r2, #2
 8049412:	f88d 2008 	strb.w	r2, [sp, #8]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8049416:	a902      	add	r1, sp, #8
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8049418:	7c82      	ldrb	r2, [r0, #18]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 804941a:	7cc0      	ldrb	r0, [r0, #19]
 804941c:	9301      	str	r3, [sp, #4]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 804941e:	f88d 200a 	strb.w	r2, [sp, #10]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8049422:	f000 ff6e 	bl	804a302 <RegionGetPhyParam>
        minTxDatarate = phyParam.Value;
 8049426:	fa4f fb80 	sxtb.w	fp, r0
        datarate = MAX( datarate, minTxDatarate );
 804942a:	45d8      	cmp	r8, fp
 804942c:	4646      	mov	r6, r8
 804942e:	bfb8      	it	lt
 8049430:	465e      	movlt	r6, fp
        if( datarate == minTxDatarate )
 8049432:	45d8      	cmp	r8, fp
 8049434:	dc0b      	bgt.n	804944e <LoRaMacAdrCalcNext+0x5e>
            *adrAckCounter = 0;
 8049436:	9b01      	ldr	r3, [sp, #4]
 8049438:	601f      	str	r7, [r3, #0]
                        adrAckReq = false;
 804943a:	463d      	mov	r5, r7
    *txPowOut = txPower;
 804943c:	2300      	movs	r3, #0
    *drOut = datarate;
 804943e:	f88a 6000 	strb.w	r6, [sl]
    *txPowOut = txPower;
 8049442:	f889 3000 	strb.w	r3, [r9]
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
    }
    return false;
}
 8049446:	4628      	mov	r0, r5
 8049448:	b007      	add	sp, #28
 804944a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 804944e:	68a2      	ldr	r2, [r4, #8]
 8049450:	89a1      	ldrh	r1, [r4, #12]
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8049452:	89e3      	ldrh	r3, [r4, #14]
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8049454:	428a      	cmp	r2, r1
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8049456:	440b      	add	r3, r1
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8049458:	bf34      	ite	cc
 804945a:	2500      	movcc	r5, #0
 804945c:	2501      	movcs	r5, #1
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 804945e:	429a      	cmp	r2, r3
 8049460:	d3ec      	bcc.n	804943c <LoRaMacAdrCalcNext+0x4c>
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8049462:	2308      	movs	r3, #8
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8049464:	eb0d 0103 	add.w	r1, sp, r3
 8049468:	7ce0      	ldrb	r0, [r4, #19]
                getPhy.Attribute = PHY_MAX_TX_POWER;
 804946a:	f88d 3008 	strb.w	r3, [sp, #8]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 804946e:	f000 ff48 	bl	804a302 <RegionGetPhyParam>
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8049472:	89e3      	ldrh	r3, [r4, #14]
 8049474:	68a2      	ldr	r2, [r4, #8]
 8049476:	fbb2 f8f3 	udiv	r8, r2, r3
 804947a:	fb03 2818 	mls	r8, r3, r8, r2
 804947e:	f1b8 0f01 	cmp.w	r8, #1
 8049482:	d1db      	bne.n	804943c <LoRaMacAdrCalcNext+0x4c>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8049484:	2322      	movs	r3, #34	; 0x22
 8049486:	f88d 3008 	strb.w	r3, [sp, #8]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 804948a:	a902      	add	r1, sp, #8
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 804948c:	7ca3      	ldrb	r3, [r4, #18]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 804948e:	7ce0      	ldrb	r0, [r4, #19]
                    getPhy.Datarate = datarate;
 8049490:	f88d 6009 	strb.w	r6, [sp, #9]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8049494:	f88d 300a 	strb.w	r3, [sp, #10]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8049498:	f000 ff33 	bl	804a302 <RegionGetPhyParam>
                    datarate = phyParam.Value;
 804949c:	b246      	sxtb	r6, r0
                    if( datarate == minTxDatarate )
 804949e:	45b3      	cmp	fp, r6
 80494a0:	d1cc      	bne.n	804943c <LoRaMacAdrCalcNext+0x4c>
                        if( adrNext->UpdateChanMask == true )
 80494a2:	7925      	ldrb	r5, [r4, #4]
 80494a4:	2d00      	cmp	r5, #0
 80494a6:	d0c9      	beq.n	804943c <LoRaMacAdrCalcNext+0x4c>
                            RegionInitDefaults( adrNext->Region, &params );
 80494a8:	a904      	add	r1, sp, #16
 80494aa:	7ce0      	ldrb	r0, [r4, #19]
                            params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 80494ac:	f88d 8014 	strb.w	r8, [sp, #20]
                            RegionInitDefaults( adrNext->Region, &params );
 80494b0:	f000 ff37 	bl	804a322 <RegionInitDefaults>
 80494b4:	e7c1      	b.n	804943a <LoRaMacAdrCalcNext+0x4a>
    int8_t datarate = adrNext->Datarate;
 80494b6:	4646      	mov	r6, r8
 80494b8:	e7c0      	b.n	804943c <LoRaMacAdrCalcNext+0x4c>
    return false;
 80494ba:	2500      	movs	r5, #0
 80494bc:	e7c3      	b.n	8049446 <LoRaMacAdrCalcNext+0x56>

080494be <LoRaMacClassBRestoreNvmCtx>:
        return false;
    }
#else
    return true;
#endif // LORAMAC_CLASSB_ENABLED
}
 80494be:	2001      	movs	r0, #1
 80494c0:	4770      	bx	lr

080494c2 <LoRaMacClassBGetNvmCtx>:
{
#ifdef LORAMAC_CLASSB_ENABLED
    *classBNvmCtxSize = sizeof( NvmCtx );
    return &NvmCtx;
#else
    *classBNvmCtxSize = 0;
 80494c2:	2300      	movs	r3, #0
 80494c4:	6003      	str	r3, [r0, #0]
    return NULL;
#endif // LORAMAC_CLASSB_ENABLED
}
 80494c6:	4618      	mov	r0, r3
 80494c8:	4770      	bx	lr

080494ca <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80494ca:	4770      	bx	lr

080494cc <LoRaMacClassBSetPingSlotState>:
 80494cc:	4770      	bx	lr

080494ce <LoRaMacClassBSetMulticastSlotState>:
 80494ce:	4770      	bx	lr

080494d0 <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80494d0:	4770      	bx	lr

080494d2 <LoRaMacClassBPingSlotTimerEvent>:
 80494d2:	4770      	bx	lr

080494d4 <LoRaMacClassBMulticastSlotTimerEvent>:
 80494d4:	4770      	bx	lr

080494d6 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 80494d6:	2000      	movs	r0, #0
 80494d8:	4770      	bx	lr

080494da <LoRaMacClassBIsBeaconExpected>:
 80494da:	2000      	movs	r0, #0
 80494dc:	4770      	bx	lr

080494de <LoRaMacClassBIsPingExpected>:
 80494de:	2000      	movs	r0, #0
 80494e0:	4770      	bx	lr

080494e2 <LoRaMacClassBIsMulticastExpected>:
 80494e2:	2000      	movs	r0, #0
 80494e4:	4770      	bx	lr

080494e6 <LoRaMacClassBIsBeaconModeActive>:
 80494e6:	2000      	movs	r0, #0
 80494e8:	4770      	bx	lr

080494ea <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80494ea:	4770      	bx	lr

080494ec <LoRaMacClassBResumeBeaconing>:
 80494ec:	4770      	bx	lr

080494ee <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
 80494ee:	2002      	movs	r0, #2
 80494f0:	4770      	bx	lr

080494f2 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
 80494f2:	2002      	movs	r0, #2
 80494f4:	4770      	bx	lr

080494f6 <LoRaMacMibClassBSetRequestConfirm>:
 80494f6:	2002      	movs	r0, #2
 80494f8:	4770      	bx	lr

080494fa <LoRaMacClassBPingSlotInfoAns>:
 80494fa:	4770      	bx	lr

080494fc <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
 80494fc:	2000      	movs	r0, #0
 80494fe:	4770      	bx	lr

08049500 <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8049500:	4770      	bx	lr

08049502 <LoRaMacClassBDeviceTimeAns>:
 8049502:	4770      	bx	lr

08049504 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 8049504:	2000      	movs	r0, #0
 8049506:	4770      	bx	lr

08049508 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
 8049508:	2000      	movs	r0, #0
 804950a:	4770      	bx	lr

0804950c <LoRaMacClassBStopRxSlots>:
 804950c:	4770      	bx	lr

0804950e <LoRaMacClassBProcess>:
 804950e:	4770      	bx	lr

08049510 <NvmCtxCallback>:
/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxCallback( void )
{
    if( CommandsNvmCtxChanged != NULL )
 8049510:	4b02      	ldr	r3, [pc, #8]	; (804951c <NvmCtxCallback+0xc>)
 8049512:	681b      	ldr	r3, [r3, #0]
 8049514:	b103      	cbz	r3, 8049518 <NvmCtxCallback+0x8>
    {
        CommandsNvmCtxChanged( );
 8049516:	4718      	bx	r3
    }
}
 8049518:	4770      	bx	lr
 804951a:	bf00      	nop
 804951c:	2000a784 	.word	0x2000a784

08049520 <LoRaMacCommandsRestoreNvmCtx>:

    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRestoreNvmCtx( void* commandsNvmCtx )
{
 8049520:	b508      	push	{r3, lr}
    // Restore module context
    if( commandsNvmCtx != NULL )
 8049522:	4601      	mov	r1, r0
 8049524:	b128      	cbz	r0, 8049532 <LoRaMacCommandsRestoreNvmCtx+0x12>
    {
        memcpy1( ( uint8_t* )&NvmCtx, ( uint8_t* )commandsNvmCtx, sizeof( NvmCtx ) );
 8049526:	4804      	ldr	r0, [pc, #16]	; (8049538 <LoRaMacCommandsRestoreNvmCtx+0x18>)
 8049528:	22fc      	movs	r2, #252	; 0xfc
 804952a:	f002 fa4e 	bl	804b9ca <memcpy1>
        return LORAMAC_COMMANDS_SUCCESS;
 804952e:	2000      	movs	r0, #0
    }
    else
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
}
 8049530:	bd08      	pop	{r3, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 8049532:	2001      	movs	r0, #1
 8049534:	e7fc      	b.n	8049530 <LoRaMacCommandsRestoreNvmCtx+0x10>
 8049536:	bf00      	nop
 8049538:	2000a788 	.word	0x2000a788

0804953c <LoRaMacCommandsGetNvmCtx>:

void* LoRaMacCommandsGetNvmCtx( size_t* commandsNvmCtxSize )
{
    *commandsNvmCtxSize = sizeof( NvmCtx );
 804953c:	23fc      	movs	r3, #252	; 0xfc
 804953e:	6003      	str	r3, [r0, #0]
    return &NvmCtx;
}
 8049540:	4800      	ldr	r0, [pc, #0]	; (8049544 <LoRaMacCommandsGetNvmCtx+0x8>)
 8049542:	4770      	bx	lr
 8049544:	2000a788 	.word	0x2000a788

08049548 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8049548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 804954c:	4680      	mov	r8, r0
 804954e:	4617      	mov	r7, r2
    if( payload == 0 )
 8049550:	2900      	cmp	r1, #0
 8049552:	d03f      	beq.n	80495d4 <LoRaMacCommandsAddCmd+0x8c>
 8049554:	4824      	ldr	r0, [pc, #144]	; (80495e8 <LoRaMacCommandsAddCmd+0xa0>)
 8049556:	2300      	movs	r3, #0
 8049558:	461a      	mov	r2, r3
 804955a:	1e46      	subs	r6, r0, #1
 804955c:	f100 0c0f 	add.w	ip, r0, #15
 8049560:	18c5      	adds	r5, r0, r3
 8049562:	18f4      	adds	r4, r6, r3
 8049564:	eb0c 0e03 	add.w	lr, ip, r3
        if( mem[size] != 0x00 )
 8049568:	f814 9f01 	ldrb.w	r9, [r4, #1]!
 804956c:	f1b9 0f00 	cmp.w	r9, #0
 8049570:	d132      	bne.n	80495d8 <LoRaMacCommandsAddCmd+0x90>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8049572:	4574      	cmp	r4, lr
 8049574:	d1f8      	bne.n	8049568 <LoRaMacCommandsAddCmd+0x20>
    if( list->First == 0 )
 8049576:	4c1d      	ldr	r4, [pc, #116]	; (80495ec <LoRaMacCommandsAddCmd+0xa4>)
 8049578:	6860      	ldr	r0, [r4, #4]
 804957a:	b900      	cbnz	r0, 804957e <LoRaMacCommandsAddCmd+0x36>
        list->First = element;
 804957c:	6065      	str	r5, [r4, #4]
    if( list->Last )
 804957e:	68a0      	ldr	r0, [r4, #8]
 8049580:	b100      	cbz	r0, 8049584 <LoRaMacCommandsAddCmd+0x3c>
        list->Last->Next = element;
 8049582:	6005      	str	r5, [r0, #0]
    element->Next = 0;
 8049584:	eb04 1002 	add.w	r0, r4, r2, lsl #4
    list->Last = element;
 8049588:	60a5      	str	r5, [r4, #8]
    element->Next = 0;
 804958a:	2600      	movs	r6, #0
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
    newCmd->PayloadSize = payloadSize;
 804958c:	1c55      	adds	r5, r2, #1
    element->Next = 0;
 804958e:	60c6      	str	r6, [r0, #12]
    newCmd->CID = cid;
 8049590:	f880 8010 	strb.w	r8, [r0, #16]
    newCmd->PayloadSize = payloadSize;
 8049594:	eb04 1205 	add.w	r2, r4, r5, lsl #4
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8049598:	4815      	ldr	r0, [pc, #84]	; (80495f0 <LoRaMacCommandsAddCmd+0xa8>)
    newCmd->PayloadSize = payloadSize;
 804959a:	6057      	str	r7, [r2, #4]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 804959c:	4418      	add	r0, r3
 804959e:	b2ba      	uxth	r2, r7
 80495a0:	f002 fa13 	bl	804b9ca <memcpy1>
 80495a4:	f1b8 0f0a 	cmp.w	r8, #10
 80495a8:	d806      	bhi.n	80495b8 <LoRaMacCommandsAddCmd+0x70>
 80495aa:	2301      	movs	r3, #1
 80495ac:	fa03 f808 	lsl.w	r8, r3, r8
 80495b0:	f418 6fa4 	tst.w	r8, #1312	; 0x520
 80495b4:	bf18      	it	ne
 80495b6:	461e      	movne	r6, r3
    newCmd->IsSticky = IsSticky( cid );
 80495b8:	eb04 1205 	add.w	r2, r4, r5, lsl #4
 80495bc:	7216      	strb	r6, [r2, #8]

    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 80495be:	f8d4 20fc 	ldr.w	r2, [r4, #252]	; 0xfc
 80495c2:	3201      	adds	r2, #1
 80495c4:	443a      	add	r2, r7
 80495c6:	f8c4 20fc 	str.w	r2, [r4, #252]	; 0xfc

    NvmCtxCallback( );
 80495ca:	f7ff ffa1 	bl	8049510 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 80495ce:	2000      	movs	r0, #0
}
 80495d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 80495d4:	2001      	movs	r0, #1
 80495d6:	e7fb      	b.n	80495d0 <LoRaMacCommandsAddCmd+0x88>
 80495d8:	3201      	adds	r2, #1
        if( itr == NUM_OF_MAC_COMMANDS )
 80495da:	2a0f      	cmp	r2, #15
 80495dc:	f103 0310 	add.w	r3, r3, #16
 80495e0:	d1be      	bne.n	8049560 <LoRaMacCommandsAddCmd+0x18>
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 80495e2:	2002      	movs	r0, #2
 80495e4:	e7f4      	b.n	80495d0 <LoRaMacCommandsAddCmd+0x88>
 80495e6:	bf00      	nop
 80495e8:	2000a790 	.word	0x2000a790
 80495ec:	2000a784 	.word	0x2000a784
 80495f0:	2000a795 	.word	0x2000a795

080495f4 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 80495f4:	b510      	push	{r4, lr}
    if( macCmd == NULL )
 80495f6:	b320      	cbz	r0, 8049642 <LoRaMacCommandsRemoveCmd+0x4e>
    curElement = list->First;
 80495f8:	4a13      	ldr	r2, [pc, #76]	; (8049648 <LoRaMacCommandsRemoveCmd+0x54>)
 80495fa:	6853      	ldr	r3, [r2, #4]
    if( element != curElement )
 80495fc:	4298      	cmp	r0, r3
 80495fe:	d104      	bne.n	804960a <LoRaMacCommandsRemoveCmd+0x16>
        list->First = element->Next;
 8049600:	6803      	ldr	r3, [r0, #0]
 8049602:	6053      	str	r3, [r2, #4]
        curElement = NULL;
 8049604:	2300      	movs	r3, #0
 8049606:	e004      	b.n	8049612 <LoRaMacCommandsRemoveCmd+0x1e>
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8049608:	460b      	mov	r3, r1
 804960a:	b113      	cbz	r3, 8049612 <LoRaMacCommandsRemoveCmd+0x1e>
 804960c:	6819      	ldr	r1, [r3, #0]
 804960e:	4288      	cmp	r0, r1
 8049610:	d1fa      	bne.n	8049608 <LoRaMacCommandsRemoveCmd+0x14>
    if( list->Last == element )
 8049612:	6891      	ldr	r1, [r2, #8]
 8049614:	4288      	cmp	r0, r1
        list->Last = PrevElement;
 8049616:	bf08      	it	eq
 8049618:	6093      	streq	r3, [r2, #8]
    if( PrevElement != NULL )
 804961a:	b10b      	cbz	r3, 8049620 <LoRaMacCommandsRemoveCmd+0x2c>
        PrevElement->Next = element->Next;
 804961c:	6801      	ldr	r1, [r0, #0]
 804961e:	6019      	str	r1, [r3, #0]
    if( LinkedListRemove( &NvmCtx.MacCommandList, macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8049620:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 8049624:	6881      	ldr	r1, [r0, #8]
 8049626:	3b01      	subs	r3, #1
 8049628:	1a5b      	subs	r3, r3, r1
    element->Next = NULL;
 804962a:	2400      	movs	r4, #0
 804962c:	6004      	str	r4, [r0, #0]
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 804962e:	4621      	mov	r1, r4
    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8049630:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8049634:	2210      	movs	r2, #16
 8049636:	f002 f9dc 	bl	804b9f2 <memset1>
    if( FreeMacCommandSlot( macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    NvmCtxCallback( );
 804963a:	f7ff ff69 	bl	8049510 <NvmCtxCallback>
 804963e:	4620      	mov	r0, r4

    return LORAMAC_COMMANDS_SUCCESS;
}
 8049640:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 8049642:	2001      	movs	r0, #1
 8049644:	e7fc      	b.n	8049640 <LoRaMacCommandsRemoveCmd+0x4c>
 8049646:	bf00      	nop
 8049648:	2000a784 	.word	0x2000a784

0804964c <LoRaMacCommandsRemoveNoneStickyCmds>:

    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 804964c:	b538      	push	{r3, r4, r5, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 804964e:	4b07      	ldr	r3, [pc, #28]	; (804966c <LoRaMacCommandsRemoveNoneStickyCmds+0x20>)
 8049650:	685c      	ldr	r4, [r3, #4]

    // Loop through all elements
    while( curElement != NULL )
 8049652:	b91c      	cbnz	r4, 804965c <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
        {
            curElement = curElement->Next;
        }
    }

    NvmCtxCallback( );
 8049654:	f7ff ff5c 	bl	8049510 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 8049658:	4620      	mov	r0, r4
 804965a:	bd38      	pop	{r3, r4, r5, pc}
        if( curElement->IsSticky == false )
 804965c:	7b23      	ldrb	r3, [r4, #12]
 804965e:	6825      	ldr	r5, [r4, #0]
 8049660:	b913      	cbnz	r3, 8049668 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
            LoRaMacCommandsRemoveCmd( curElement );
 8049662:	4620      	mov	r0, r4
 8049664:	f7ff ffc6 	bl	80495f4 <LoRaMacCommandsRemoveCmd>
{
 8049668:	462c      	mov	r4, r5
 804966a:	e7f2      	b.n	8049652 <LoRaMacCommandsRemoveNoneStickyCmds+0x6>
 804966c:	2000a784 	.word	0x2000a784

08049670 <LoRaMacCommandsRemoveStickyAnsCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 8049670:	4b0b      	ldr	r3, [pc, #44]	; (80496a0 <LoRaMacCommandsRemoveStickyAnsCmds+0x30>)
{
 8049672:	b570      	push	{r4, r5, r6, lr}
    curElement = NvmCtx.MacCommandList.First;
 8049674:	685c      	ldr	r4, [r3, #4]
 8049676:	2501      	movs	r5, #1

    // Loop through all elements
    while( curElement != NULL )
 8049678:	b91c      	cbnz	r4, 8049682 <LoRaMacCommandsRemoveStickyAnsCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
        }
        curElement = nexElement;
    }

    NvmCtxCallback( );
 804967a:	f7ff ff49 	bl	8049510 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 804967e:	4620      	mov	r0, r4
 8049680:	bd70      	pop	{r4, r5, r6, pc}
        if( IsSticky( curElement->CID ) == true )
 8049682:	7923      	ldrb	r3, [r4, #4]
        nexElement = curElement->Next;
 8049684:	6826      	ldr	r6, [r4, #0]
 8049686:	2b0a      	cmp	r3, #10
 8049688:	d807      	bhi.n	804969a <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
 804968a:	fa05 f303 	lsl.w	r3, r5, r3
 804968e:	f413 6fa4 	tst.w	r3, #1312	; 0x520
 8049692:	d002      	beq.n	804969a <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
            LoRaMacCommandsRemoveCmd( curElement );
 8049694:	4620      	mov	r0, r4
 8049696:	f7ff ffad 	bl	80495f4 <LoRaMacCommandsRemoveCmd>
{
 804969a:	4634      	mov	r4, r6
 804969c:	e7ec      	b.n	8049678 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
 804969e:	bf00      	nop
 80496a0:	2000a784 	.word	0x2000a784

080496a4 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 80496a4:	b128      	cbz	r0, 80496b2 <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = NvmCtx.SerializedCmdsSize;
 80496a6:	4b04      	ldr	r3, [pc, #16]	; (80496b8 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 80496a8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80496ac:	6003      	str	r3, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 80496ae:	2000      	movs	r0, #0
 80496b0:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 80496b2:	2001      	movs	r0, #1
}
 80496b4:	4770      	bx	lr
 80496b6:	bf00      	nop
 80496b8:	2000a784 	.word	0x2000a784

080496bc <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 80496bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80496be:	4607      	mov	r7, r0
    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 80496c0:	4616      	mov	r6, r2
 80496c2:	b1ca      	cbz	r2, 80496f8 <LoRaMacCommandsSerializeCmds+0x3c>
 80496c4:	b1c1      	cbz	r1, 80496f8 <LoRaMacCommandsSerializeCmds+0x3c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 80496c6:	4b0d      	ldr	r3, [pc, #52]	; (80496fc <LoRaMacCommandsSerializeCmds+0x40>)
 80496c8:	685c      	ldr	r4, [r3, #4]
    uint8_t itr = 0;
 80496ca:	2300      	movs	r3, #0

    // Loop through all elements
    while( curElement != NULL )
 80496cc:	b90c      	cbnz	r4, 80496d2 <LoRaMacCommandsSerializeCmds+0x16>
            break;
        }
        curElement = curElement->Next;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80496ce:	2000      	movs	r0, #0
 80496d0:	e013      	b.n	80496fa <LoRaMacCommandsSerializeCmds+0x3e>
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 80496d2:	68a2      	ldr	r2, [r4, #8]
 80496d4:	1af9      	subs	r1, r7, r3
 80496d6:	3201      	adds	r2, #1
 80496d8:	4291      	cmp	r1, r2
 80496da:	d3f8      	bcc.n	80496ce <LoRaMacCommandsSerializeCmds+0x12>
            buffer[itr++] = curElement->CID;
 80496dc:	7922      	ldrb	r2, [r4, #4]
 80496de:	54f2      	strb	r2, [r6, r3]
 80496e0:	1c5d      	adds	r5, r3, #1
 80496e2:	b2ed      	uxtb	r5, r5
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 80496e4:	8922      	ldrh	r2, [r4, #8]
 80496e6:	1d61      	adds	r1, r4, #5
 80496e8:	1970      	adds	r0, r6, r5
 80496ea:	f002 f96e 	bl	804b9ca <memcpy1>
            itr = itr + curElement->PayloadSize;
 80496ee:	68a3      	ldr	r3, [r4, #8]
        curElement = curElement->Next;
 80496f0:	6824      	ldr	r4, [r4, #0]
            itr = itr + curElement->PayloadSize;
 80496f2:	441d      	add	r5, r3
 80496f4:	b2eb      	uxtb	r3, r5
 80496f6:	e7e9      	b.n	80496cc <LoRaMacCommandsSerializeCmds+0x10>
        return LORAMAC_COMMANDS_ERROR_NPE;
 80496f8:	2001      	movs	r0, #1
}
 80496fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80496fc:	2000a784 	.word	0x2000a784

08049700 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
    if( cmdsPending == NULL )
 8049700:	b160      	cbz	r0, 804971c <LoRaMacCommandsStickyCmdsPending+0x1c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 8049702:	4b07      	ldr	r3, [pc, #28]	; (8049720 <LoRaMacCommandsStickyCmdsPending+0x20>)

    *cmdsPending = false;
 8049704:	2200      	movs	r2, #0
    curElement = NvmCtx.MacCommandList.First;
 8049706:	685b      	ldr	r3, [r3, #4]
    *cmdsPending = false;
 8049708:	7002      	strb	r2, [r0, #0]

    // Loop through all elements
    while( curElement != NULL )
 804970a:	b11b      	cbz	r3, 8049714 <LoRaMacCommandsStickyCmdsPending+0x14>
    {
        if( curElement->IsSticky == true )
 804970c:	7b1a      	ldrb	r2, [r3, #12]
 804970e:	b11a      	cbz	r2, 8049718 <LoRaMacCommandsStickyCmdsPending+0x18>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8049710:	2301      	movs	r3, #1
 8049712:	7003      	strb	r3, [r0, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 8049714:	2000      	movs	r0, #0
 8049716:	4770      	bx	lr
        }
        curElement = curElement->Next;
 8049718:	681b      	ldr	r3, [r3, #0]
 804971a:	e7f6      	b.n	804970a <LoRaMacCommandsStickyCmdsPending+0xa>
        return LORAMAC_COMMANDS_ERROR_NPE;
 804971c:	2001      	movs	r0, #1
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 804971e:	4770      	bx	lr
 8049720:	2000a784 	.word	0x2000a784

08049724 <LoRaMacConfirmQueueRestoreNvmCtx>:
    // Assign callback
    ConfirmQueueCtx.LoRaMacConfirmQueueNvmEvent = confirmQueueNvmCtxChanged;
}

bool LoRaMacConfirmQueueRestoreNvmCtx( void* confirmQueueNvmCtx )
{
 8049724:	b508      	push	{r3, lr}
    // Restore module context
    if( confirmQueueNvmCtx != NULL )
 8049726:	b128      	cbz	r0, 8049734 <LoRaMacConfirmQueueRestoreNvmCtx+0x10>
    {
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
 8049728:	4601      	mov	r1, r0
 804972a:	2216      	movs	r2, #22
 804972c:	4802      	ldr	r0, [pc, #8]	; (8049738 <LoRaMacConfirmQueueRestoreNvmCtx+0x14>)
 804972e:	f002 f94c 	bl	804b9ca <memcpy1>
        return true;
 8049732:	2001      	movs	r0, #1
    }
    else
    {
        return false;
    }
}
 8049734:	bd08      	pop	{r3, pc}
 8049736:	bf00      	nop
 8049738:	2000a898 	.word	0x2000a898

0804973c <LoRaMacConfirmQueueGetNvmCtx>:

void* LoRaMacConfirmQueueGetNvmCtx( size_t* confirmQueueNvmCtxSize )
{
    *confirmQueueNvmCtxSize = sizeof( ConfirmQueueNvmCtx );
 804973c:	2316      	movs	r3, #22
 804973e:	6003      	str	r3, [r0, #0]
    return &ConfirmQueueNvmCtx;
}
 8049740:	4800      	ldr	r0, [pc, #0]	; (8049744 <LoRaMacConfirmQueueGetNvmCtx+0x8>)
 8049742:	4770      	bx	lr
 8049744:	2000a898 	.word	0x2000a898

08049748 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8049748:	b510      	push	{r4, lr}
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 804974a:	490d      	ldr	r1, [pc, #52]	; (8049780 <LoRaMacConfirmQueueAdd+0x38>)
 804974c:	690b      	ldr	r3, [r1, #16]
 804974e:	7d1a      	ldrb	r2, [r3, #20]
 8049750:	2a04      	cmp	r2, #4
 8049752:	d813      	bhi.n	804977c <LoRaMacConfirmQueueAdd+0x34>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8049754:	688a      	ldr	r2, [r1, #8]
 8049756:	7804      	ldrb	r4, [r0, #0]
 8049758:	7014      	strb	r4, [r2, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 804975a:	7844      	ldrb	r4, [r0, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 804975c:	78c0      	ldrb	r0, [r0, #3]
 804975e:	70d0      	strb	r0, [r2, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8049760:	2000      	movs	r0, #0
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8049762:	7054      	strb	r4, [r2, #1]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8049764:	7090      	strb	r0, [r2, #2]
    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 8049766:	7d18      	ldrb	r0, [r3, #20]
 8049768:	3001      	adds	r0, #1
 804976a:	7518      	strb	r0, [r3, #20]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 804976c:	f103 0010 	add.w	r0, r3, #16
 8049770:	4282      	cmp	r2, r0
        bufferPointer++;
 8049772:	bf18      	it	ne
 8049774:	1d13      	addne	r3, r2, #4
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8049776:	608b      	str	r3, [r1, #8]

    return true;
 8049778:	2001      	movs	r0, #1
}
 804977a:	bd10      	pop	{r4, pc}
        return false;
 804977c:	2000      	movs	r0, #0
 804977e:	e7fc      	b.n	804977a <LoRaMacConfirmQueueAdd+0x32>
 8049780:	2000a884 	.word	0x2000a884

08049784 <LoRaMacConfirmQueueRemoveFirst>:
    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt == 0 )
 8049784:	4a07      	ldr	r2, [pc, #28]	; (80497a4 <LoRaMacConfirmQueueRemoveFirst+0x20>)
 8049786:	6913      	ldr	r3, [r2, #16]
 8049788:	7d18      	ldrb	r0, [r3, #20]
 804978a:	b148      	cbz	r0, 80497a0 <LoRaMacConfirmQueueRemoveFirst+0x1c>
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 804978c:	6851      	ldr	r1, [r2, #4]
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
 804978e:	3801      	subs	r0, #1
 8049790:	7518      	strb	r0, [r3, #20]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8049792:	f103 0010 	add.w	r0, r3, #16
 8049796:	4281      	cmp	r1, r0
        bufferPointer++;
 8049798:	bf18      	it	ne
 804979a:	1d0b      	addne	r3, r1, #4
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 804979c:	6053      	str	r3, [r2, #4]

    return true;
 804979e:	2001      	movs	r0, #1
}
 80497a0:	4770      	bx	lr
 80497a2:	bf00      	nop
 80497a4:	2000a884 	.word	0x2000a884

080497a8 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 80497a8:	b570      	push	{r4, r5, r6, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 80497aa:	4c0b      	ldr	r4, [pc, #44]	; (80497d8 <LoRaMacConfirmQueueSetStatus+0x30>)
 80497ac:	6922      	ldr	r2, [r4, #16]
 80497ae:	7d13      	ldrb	r3, [r2, #20]
 80497b0:	b12b      	cbz	r3, 80497be <LoRaMacConfirmQueueSetStatus+0x16>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80497b2:	e9d4 3401 	ldrd	r3, r4, [r4, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80497b6:	f102 0510 	add.w	r5, r2, #16
    while( element != bufferEnd )
 80497ba:	429c      	cmp	r4, r3
 80497bc:	d100      	bne.n	80497c0 <LoRaMacConfirmQueueSetStatus+0x18>
        {
            element->Status = status;
            element->ReadyToHandle = true;
        }
    }
}
 80497be:	bd70      	pop	{r4, r5, r6, pc}
        if( element->Request == request )
 80497c0:	781e      	ldrb	r6, [r3, #0]
 80497c2:	428e      	cmp	r6, r1
 80497c4:	d004      	beq.n	80497d0 <LoRaMacConfirmQueueSetStatus+0x28>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80497c6:	42ab      	cmp	r3, r5
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 80497c8:	bf0c      	ite	eq
 80497ca:	4613      	moveq	r3, r2
        bufferPointer++;
 80497cc:	3304      	addne	r3, #4
 80497ce:	e7f4      	b.n	80497ba <LoRaMacConfirmQueueSetStatus+0x12>
            element->ReadyToHandle = true;
 80497d0:	2201      	movs	r2, #1
            element->Status = status;
 80497d2:	7058      	strb	r0, [r3, #1]
            element->ReadyToHandle = true;
 80497d4:	709a      	strb	r2, [r3, #2]
 80497d6:	e7f2      	b.n	80497be <LoRaMacConfirmQueueSetStatus+0x16>
 80497d8:	2000a884 	.word	0x2000a884

080497dc <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 80497dc:	b530      	push	{r4, r5, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 80497de:	490b      	ldr	r1, [pc, #44]	; (804980c <LoRaMacConfirmQueueGetStatus+0x30>)
 80497e0:	690a      	ldr	r2, [r1, #16]
 80497e2:	7d13      	ldrb	r3, [r2, #20]
 80497e4:	b12b      	cbz	r3, 80497f2 <LoRaMacConfirmQueueGetStatus+0x16>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80497e6:	e9d1 3101 	ldrd	r3, r1, [r1, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80497ea:	f102 0410 	add.w	r4, r2, #16
    while( element != bufferEnd )
 80497ee:	4299      	cmp	r1, r3
 80497f0:	d101      	bne.n	80497f6 <LoRaMacConfirmQueueGetStatus+0x1a>
        if( element != NULL )
        {
            return element->Status;
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 80497f2:	2001      	movs	r0, #1
}
 80497f4:	bd30      	pop	{r4, r5, pc}
        if( element->Request == request )
 80497f6:	781d      	ldrb	r5, [r3, #0]
 80497f8:	4285      	cmp	r5, r0
 80497fa:	d004      	beq.n	8049806 <LoRaMacConfirmQueueGetStatus+0x2a>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80497fc:	42a3      	cmp	r3, r4
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 80497fe:	bf0c      	ite	eq
 8049800:	4613      	moveq	r3, r2
        bufferPointer++;
 8049802:	3304      	addne	r3, #4
 8049804:	e7f3      	b.n	80497ee <LoRaMacConfirmQueueGetStatus+0x12>
            return element->Status;
 8049806:	7858      	ldrb	r0, [r3, #1]
 8049808:	e7f4      	b.n	80497f4 <LoRaMacConfirmQueueGetStatus+0x18>
 804980a:	bf00      	nop
 804980c:	2000a884 	.word	0x2000a884

08049810 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8049810:	b570      	push	{r4, r5, r6, lr}
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8049812:	490a      	ldr	r1, [pc, #40]	; (804983c <LoRaMacConfirmQueueSetStatusCmn+0x2c>)

    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 8049814:	690a      	ldr	r2, [r1, #16]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8049816:	684b      	ldr	r3, [r1, #4]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 8049818:	7d14      	ldrb	r4, [r2, #20]
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 804981a:	7550      	strb	r0, [r2, #21]
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 804981c:	b16c      	cbz	r4, 804983a <LoRaMacConfirmQueueSetStatusCmn+0x2a>
            if( element->RestrictCommonReadyToHandle == false )
            {
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
 804981e:	6889      	ldr	r1, [r1, #8]
                element->ReadyToHandle = true;
 8049820:	2501      	movs	r5, #1
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8049822:	f102 0410 	add.w	r4, r2, #16
            if( element->RestrictCommonReadyToHandle == false )
 8049826:	78de      	ldrb	r6, [r3, #3]
            element->Status = status;
 8049828:	7058      	strb	r0, [r3, #1]
            if( element->RestrictCommonReadyToHandle == false )
 804982a:	b906      	cbnz	r6, 804982e <LoRaMacConfirmQueueSetStatusCmn+0x1e>
                element->ReadyToHandle = true;
 804982c:	709d      	strb	r5, [r3, #2]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 804982e:	42a3      	cmp	r3, r4
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8049830:	bf0c      	ite	eq
 8049832:	4613      	moveq	r3, r2
        bufferPointer++;
 8049834:	3304      	addne	r3, #4
        }while( element != ConfirmQueueCtx.BufferEnd );
 8049836:	4299      	cmp	r1, r3
 8049838:	d1f5      	bne.n	8049826 <LoRaMacConfirmQueueSetStatusCmn+0x16>
    }
}
 804983a:	bd70      	pop	{r4, r5, r6, pc}
 804983c:	2000a884 	.word	0x2000a884

08049840 <LoRaMacConfirmQueueIsCmdActive>:
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8049840:	4a0a      	ldr	r2, [pc, #40]	; (804986c <LoRaMacConfirmQueueIsCmdActive+0x2c>)
 8049842:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8049846:	6912      	ldr	r2, [r2, #16]
{
 8049848:	b530      	push	{r4, r5, lr}
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 804984a:	f102 0410 	add.w	r4, r2, #16
    while( element != bufferEnd )
 804984e:	4299      	cmp	r1, r3
 8049850:	d101      	bne.n	8049856 <LoRaMacConfirmQueueIsCmdActive+0x16>
    {
        return true;
    }
    return false;
 8049852:	2000      	movs	r0, #0
}
 8049854:	bd30      	pop	{r4, r5, pc}
        if( element->Request == request )
 8049856:	781d      	ldrb	r5, [r3, #0]
 8049858:	4285      	cmp	r5, r0
 804985a:	d004      	beq.n	8049866 <LoRaMacConfirmQueueIsCmdActive+0x26>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 804985c:	42a3      	cmp	r3, r4
        bufferPointer++;
 804985e:	bf14      	ite	ne
 8049860:	3304      	addne	r3, #4
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8049862:	4613      	moveq	r3, r2
 8049864:	e7f3      	b.n	804984e <LoRaMacConfirmQueueIsCmdActive+0xe>
        return true;
 8049866:	2001      	movs	r0, #1
 8049868:	e7f4      	b.n	8049854 <LoRaMacConfirmQueueIsCmdActive+0x14>
 804986a:	bf00      	nop
 804986c:	2000a884 	.word	0x2000a884

08049870 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8049870:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 8049874:	4c13      	ldr	r4, [pc, #76]	; (80498c4 <LoRaMacConfirmQueueHandleCb+0x54>)
 8049876:	6923      	ldr	r3, [r4, #16]
 8049878:	f893 8014 	ldrb.w	r8, [r3, #20]
{
 804987c:	4606      	mov	r6, r0
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 804987e:	2500      	movs	r5, #0
 8049880:	b2eb      	uxtb	r3, r5
 8049882:	4598      	cmp	r8, r3
 8049884:	d802      	bhi.n	804988c <LoRaMacConfirmQueueHandleCb+0x1c>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
        }
    }
}
 8049886:	b002      	add	sp, #8
 8049888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 804988c:	6863      	ldr	r3, [r4, #4]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 804988e:	789f      	ldrb	r7, [r3, #2]
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8049890:	7819      	ldrb	r1, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8049892:	785a      	ldrb	r2, [r3, #1]
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8049894:	7031      	strb	r1, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8049896:	7072      	strb	r2, [r6, #1]
        if( readyToHandle == true )
 8049898:	b15f      	cbz	r7, 80498b2 <LoRaMacConfirmQueueHandleCb+0x42>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 804989a:	6823      	ldr	r3, [r4, #0]
 804989c:	4630      	mov	r0, r6
 804989e:	689b      	ldr	r3, [r3, #8]
 80498a0:	4798      	blx	r3
        LoRaMacConfirmQueueRemoveFirst( );
 80498a2:	f7ff ff6f 	bl	8049784 <LoRaMacConfirmQueueRemoveFirst>
        if( readyToHandle == false )
 80498a6:	b917      	cbnz	r7, 80498ae <LoRaMacConfirmQueueHandleCb+0x3e>
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 80498a8:	a801      	add	r0, sp, #4
 80498aa:	f7ff ff4d 	bl	8049748 <LoRaMacConfirmQueueAdd>
 80498ae:	3501      	adds	r5, #1
 80498b0:	e7e6      	b.n	8049880 <LoRaMacConfirmQueueHandleCb+0x10>
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 80498b2:	78db      	ldrb	r3, [r3, #3]
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 80498b4:	f88d 1004 	strb.w	r1, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 80498b8:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 80498bc:	f88d 3007 	strb.w	r3, [sp, #7]
 80498c0:	e7ef      	b.n	80498a2 <LoRaMacConfirmQueueHandleCb+0x32>
 80498c2:	bf00      	nop
 80498c4:	2000a884 	.word	0x2000a884

080498c8 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 80498c8:	4b01      	ldr	r3, [pc, #4]	; (80498d0 <LoRaMacConfirmQueueGetCnt+0x8>)
 80498ca:	691b      	ldr	r3, [r3, #16]
}
 80498cc:	7d18      	ldrb	r0, [r3, #20]
 80498ce:	4770      	bx	lr
 80498d0:	2000a884 	.word	0x2000a884

080498d4 <GetLastFcntDown>:
{
    if( lastDown == NULL )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 80498d4:	3801      	subs	r0, #1
 80498d6:	2806      	cmp	r0, #6
 80498d8:	d82b      	bhi.n	8049932 <GetLastFcntDown+0x5e>
 80498da:	e8df f000 	tbb	[pc, r0]
 80498de:	0d04      	.short	0x0d04
 80498e0:	221e1913 	.word	0x221e1913
 80498e4:	26          	.byte	0x26
 80498e5:	00          	.byte	0x00
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.NFCntDown;
 80498e6:	4b14      	ldr	r3, [pc, #80]	; (8049938 <GetLastFcntDown+0x64>)
 80498e8:	685a      	ldr	r2, [r3, #4]
 80498ea:	4613      	mov	r3, r2
 80498ec:	f853 0f10 	ldr.w	r0, [r3, #16]!
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.NFCntDown;
            break;
        case A_FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.AFCntDown;
 80498f0:	6008      	str	r0, [r1, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.AFCntDown;
 80498f2:	6313      	str	r3, [r2, #48]	; 0x30
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown3;
            break;
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80498f4:	2000      	movs	r0, #0
            break;
 80498f6:	4770      	bx	lr
            *lastDown = CryptoCtx.NvmCtx->FCntList.AFCntDown;
 80498f8:	4b0f      	ldr	r3, [pc, #60]	; (8049938 <GetLastFcntDown+0x64>)
 80498fa:	685a      	ldr	r2, [r3, #4]
 80498fc:	4613      	mov	r3, r2
 80498fe:	f853 0f14 	ldr.w	r0, [r3, #20]!
 8049902:	e7f5      	b.n	80498f0 <GetLastFcntDown+0x1c>
            *lastDown = CryptoCtx.NvmCtx->FCntList.FCntDown;
 8049904:	4b0c      	ldr	r3, [pc, #48]	; (8049938 <GetLastFcntDown+0x64>)
 8049906:	685a      	ldr	r2, [r3, #4]
 8049908:	4613      	mov	r3, r2
 804990a:	f853 0f18 	ldr.w	r0, [r3, #24]!
 804990e:	e7ef      	b.n	80498f0 <GetLastFcntDown+0x1c>
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 8049910:	4b09      	ldr	r3, [pc, #36]	; (8049938 <GetLastFcntDown+0x64>)
 8049912:	685b      	ldr	r3, [r3, #4]
 8049914:	69db      	ldr	r3, [r3, #28]
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown3;
 8049916:	600b      	str	r3, [r1, #0]
 8049918:	e7ec      	b.n	80498f4 <GetLastFcntDown+0x20>
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown1;
 804991a:	4b07      	ldr	r3, [pc, #28]	; (8049938 <GetLastFcntDown+0x64>)
 804991c:	685b      	ldr	r3, [r3, #4]
 804991e:	6a1b      	ldr	r3, [r3, #32]
 8049920:	e7f9      	b.n	8049916 <GetLastFcntDown+0x42>
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown2;
 8049922:	4b05      	ldr	r3, [pc, #20]	; (8049938 <GetLastFcntDown+0x64>)
 8049924:	685b      	ldr	r3, [r3, #4]
 8049926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8049928:	e7f5      	b.n	8049916 <GetLastFcntDown+0x42>
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown3;
 804992a:	4b03      	ldr	r3, [pc, #12]	; (8049938 <GetLastFcntDown+0x64>)
 804992c:	685b      	ldr	r3, [r3, #4]
 804992e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8049930:	e7f1      	b.n	8049916 <GetLastFcntDown+0x42>
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8049932:	2005      	movs	r0, #5
}
 8049934:	4770      	bx	lr
 8049936:	bf00      	nop
 8049938:	2000a8b0 	.word	0x2000a8b0

0804993c <PayloadEncrypt>:
{
 804993c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8049940:	b089      	sub	sp, #36	; 0x24
 8049942:	460f      	mov	r7, r1
 8049944:	4690      	mov	r8, r2
 8049946:	4699      	mov	r9, r3
 8049948:	9d11      	ldr	r5, [sp, #68]	; 0x44
    if( buffer == 0 )
 804994a:	4606      	mov	r6, r0
 804994c:	2800      	cmp	r0, #0
 804994e:	d058      	beq.n	8049a02 <PayloadEncrypt+0xc6>
    uint8_t sBlock[16] = { 0 };
 8049950:	2210      	movs	r2, #16
 8049952:	2100      	movs	r1, #0
 8049954:	4668      	mov	r0, sp
 8049956:	f003 ff3f 	bl	804d7d8 <memset>
    uint8_t aBlock[16] = { 0 };
 804995a:	2210      	movs	r2, #16
 804995c:	2100      	movs	r1, #0
 804995e:	eb0d 0002 	add.w	r0, sp, r2
 8049962:	f003 ff39 	bl	804d7d8 <memset>
    aBlock[5] = dir;
 8049966:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 804996a:	f88d 3015 	strb.w	r3, [sp, #21]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 804996e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8049972:	f88d 3017 	strb.w	r3, [sp, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8049976:	ea4f 4319 	mov.w	r3, r9, lsr #16
 804997a:	f88d 3018 	strb.w	r3, [sp, #24]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 804997e:	0a2b      	lsrs	r3, r5, #8
    aBlock[0] = 0x01;
 8049980:	2401      	movs	r4, #1
    aBlock[6] = address & 0xFF;
 8049982:	f88d 9016 	strb.w	r9, [sp, #22]
    aBlock[10] = frameCounter & 0xFF;
 8049986:	f88d 501a 	strb.w	r5, [sp, #26]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 804998a:	ea4f 6919 	mov.w	r9, r9, lsr #24
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 804998e:	f88d 301b 	strb.w	r3, [sp, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8049992:	0c2b      	lsrs	r3, r5, #16
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8049994:	0e2d      	lsrs	r5, r5, #24
 8049996:	f88d 501d 	strb.w	r5, [sp, #29]
    aBlock[0] = 0x01;
 804999a:	f88d 4010 	strb.w	r4, [sp, #16]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 804999e:	f88d 9019 	strb.w	r9, [sp, #25]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 80499a2:	f88d 301c 	strb.w	r3, [sp, #28]
    while( size > 0 )
 80499a6:	463d      	mov	r5, r7
 80499a8:	eba7 0905 	sub.w	r9, r7, r5
 80499ac:	2d00      	cmp	r5, #0
 80499ae:	fa5f f989 	uxtb.w	r9, r9
 80499b2:	dc03      	bgt.n	80499bc <PayloadEncrypt+0x80>
    return LORAMAC_CRYPTO_SUCCESS;
 80499b4:	2000      	movs	r0, #0
}
 80499b6:	b009      	add	sp, #36	; 0x24
 80499b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 80499bc:	2110      	movs	r1, #16
        aBlock[15] = ctr & 0xFF;
 80499be:	f88d 401f 	strb.w	r4, [sp, #31]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 80499c2:	466b      	mov	r3, sp
        ctr++;
 80499c4:	3401      	adds	r4, #1
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 80499c6:	4642      	mov	r2, r8
 80499c8:	eb0d 0001 	add.w	r0, sp, r1
        ctr++;
 80499cc:	b2a4      	uxth	r4, r4
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 80499ce:	f7fd fb77 	bl	80470c0 <SecureElementAesEncrypt>
 80499d2:	b9c0      	cbnz	r0, 8049a06 <PayloadEncrypt+0xca>
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80499d4:	2d10      	cmp	r5, #16
 80499d6:	46ac      	mov	ip, r5
 80499d8:	bfa8      	it	ge
 80499da:	f04f 0c10 	movge.w	ip, #16
 80499de:	b2c3      	uxtb	r3, r0
 80499e0:	4563      	cmp	r3, ip
 80499e2:	f100 0001 	add.w	r0, r0, #1
 80499e6:	db02      	blt.n	80499ee <PayloadEncrypt+0xb2>
 80499e8:	3d10      	subs	r5, #16
 80499ea:	b22d      	sxth	r5, r5
 80499ec:	e7dc      	b.n	80499a8 <PayloadEncrypt+0x6c>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 80499ee:	aa08      	add	r2, sp, #32
 80499f0:	eb09 0103 	add.w	r1, r9, r3
 80499f4:	4413      	add	r3, r2
 80499f6:	5c72      	ldrb	r2, [r6, r1]
 80499f8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80499fc:	4053      	eors	r3, r2
 80499fe:	5473      	strb	r3, [r6, r1]
 8049a00:	e7ed      	b.n	80499de <PayloadEncrypt+0xa2>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8049a02:	200a      	movs	r0, #10
 8049a04:	e7d7      	b.n	80499b6 <PayloadEncrypt+0x7a>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8049a06:	200f      	movs	r0, #15
 8049a08:	e7d5      	b.n	80499b6 <PayloadEncrypt+0x7a>
	...

08049a0c <DeriveSessionKey10x>:
{
 8049a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8049a0e:	4604      	mov	r4, r0
 8049a10:	b085      	sub	sp, #20
 8049a12:	460f      	mov	r7, r1
 8049a14:	4616      	mov	r6, r2
    if( ( joinNonce == 0 ) || ( netID == 0 ) || ( devNonce == 0 ) )
 8049a16:	461d      	mov	r5, r3
 8049a18:	b34b      	cbz	r3, 8049a6e <DeriveSessionKey10x+0x62>
    uint8_t compBase[16] = { 0 };
 8049a1a:	2210      	movs	r2, #16
 8049a1c:	2100      	movs	r1, #0
 8049a1e:	4668      	mov	r0, sp
 8049a20:	f003 feda 	bl	804d7d8 <memset>
    switch( keyID )
 8049a24:	2c08      	cmp	r4, #8
            compBase[0] = 0x01;
 8049a26:	bf14      	ite	ne
 8049a28:	2301      	movne	r3, #1
            compBase[0] = 0x02;
 8049a2a:	2302      	moveq	r3, #2
    memcpy1( compBase + 1, joinNonce, 3 );
 8049a2c:	2203      	movs	r2, #3
 8049a2e:	4639      	mov	r1, r7
 8049a30:	f10d 0001 	add.w	r0, sp, #1
            compBase[0] = 0x02;
 8049a34:	f88d 3000 	strb.w	r3, [sp]
    memcpy1( compBase + 1, joinNonce, 3 );
 8049a38:	f001 ffc7 	bl	804b9ca <memcpy1>
    memcpy1( compBase + 4, netID, 3 );
 8049a3c:	2203      	movs	r2, #3
 8049a3e:	4631      	mov	r1, r6
 8049a40:	a801      	add	r0, sp, #4
 8049a42:	f001 ffc2 	bl	804b9ca <memcpy1>
    memcpy1( compBase + 7, devNonce, 2 );
 8049a46:	2202      	movs	r2, #2
 8049a48:	4629      	mov	r1, r5
 8049a4a:	f10d 0007 	add.w	r0, sp, #7
 8049a4e:	f001 ffbc 	bl	804b9ca <memcpy1>
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8049a52:	4b08      	ldr	r3, [pc, #32]	; (8049a74 <DeriveSessionKey10x+0x68>)
 8049a54:	6858      	ldr	r0, [r3, #4]
 8049a56:	2202      	movs	r2, #2
 8049a58:	4623      	mov	r3, r4
 8049a5a:	4669      	mov	r1, sp
 8049a5c:	6800      	ldr	r0, [r0, #0]
 8049a5e:	f7fd fbac 	bl	80471ba <SecureElementDeriveAndStoreKey>
    return LORAMAC_CRYPTO_SUCCESS;
 8049a62:	2800      	cmp	r0, #0
 8049a64:	bf14      	ite	ne
 8049a66:	200f      	movne	r0, #15
 8049a68:	2000      	moveq	r0, #0
}
 8049a6a:	b005      	add	sp, #20
 8049a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 8049a6e:	200a      	movs	r0, #10
 8049a70:	e7fb      	b.n	8049a6a <DeriveSessionKey10x+0x5e>
 8049a72:	bf00      	nop
 8049a74:	2000a8b0 	.word	0x2000a8b0

08049a78 <LoRaMacCryptoDeriveMcKEKey.part.2>:
    }

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
 8049a78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 8049a7a:	2210      	movs	r2, #16
 8049a7c:	2100      	movs	r1, #0
 8049a7e:	4668      	mov	r0, sp
 8049a80:	f003 feaa 	bl	804d7d8 <memset>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8049a84:	4b07      	ldr	r3, [pc, #28]	; (8049aa4 <LoRaMacCryptoDeriveMcKEKey.part.2+0x2c>)
 8049a86:	6858      	ldr	r0, [r3, #4]
 8049a88:	2209      	movs	r2, #9
 8049a8a:	237f      	movs	r3, #127	; 0x7f
 8049a8c:	4669      	mov	r1, sp
 8049a8e:	6800      	ldr	r0, [r0, #0]
 8049a90:	f7fd fb93 	bl	80471ba <SecureElementDeriveAndStoreKey>
 8049a94:	2800      	cmp	r0, #0
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 8049a96:	bf14      	ite	ne
 8049a98:	200f      	movne	r0, #15
 8049a9a:	2000      	moveq	r0, #0
 8049a9c:	b005      	add	sp, #20
 8049a9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8049aa2:	bf00      	nop
 8049aa4:	2000a8b0 	.word	0x2000a8b0

08049aa8 <VerifyCmacB0.constprop.3>:
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 8049aa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8049aac:	b0c5      	sub	sp, #276	; 0x114
 8049aae:	460c      	mov	r4, r1
 8049ab0:	4617      	mov	r7, r2
 8049ab2:	4699      	mov	r9, r3
 8049ab4:	9e4c      	ldr	r6, [sp, #304]	; 0x130
 8049ab6:	9d4d      	ldr	r5, [sp, #308]	; 0x134
    if( msg == 0 )
 8049ab8:	4680      	mov	r8, r0
 8049aba:	2800      	cmp	r0, #0
 8049abc:	d053      	beq.n	8049b66 <VerifyCmacB0.constprop.3+0xbe>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8049abe:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8049ac2:	d852      	bhi.n	8049b6a <VerifyCmacB0.constprop.3+0xc2>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8049ac4:	f44f 7288 	mov.w	r2, #272	; 0x110
 8049ac8:	2100      	movs	r1, #0
 8049aca:	4668      	mov	r0, sp
 8049acc:	f001 ff91 	bl	804b9f2 <memset1>
    b0[0] = 0x49;
 8049ad0:	2349      	movs	r3, #73	; 0x49
 8049ad2:	f88d 3000 	strb.w	r3, [sp]
    if( ( isAck == true ) && ( dir == DOWNLINK ) )
 8049ad6:	f1b9 0f00 	cmp.w	r9, #0
 8049ada:	d03f      	beq.n	8049b5c <VerifyCmacB0.constprop.3+0xb4>
        confFCnt = ( uint16_t )( CryptoCtx.NvmCtx->FCntList.FCntUp % 65536 );
 8049adc:	4b24      	ldr	r3, [pc, #144]	; (8049b70 <VerifyCmacB0.constprop.3+0xc8>)
 8049ade:	685b      	ldr	r3, [r3, #4]
 8049ae0:	68db      	ldr	r3, [r3, #12]
        b0[1] = confFCnt & 0xFF;
 8049ae2:	f88d 3001 	strb.w	r3, [sp, #1]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
 8049ae6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8049aea:	f88d 3002 	strb.w	r3, [sp, #2]
    b0[5] = dir;
 8049aee:	2201      	movs	r2, #1
 8049af0:	f88d 2005 	strb.w	r2, [sp, #5]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8049af4:	0a32      	lsrs	r2, r6, #8
 8049af6:	f88d 2007 	strb.w	r2, [sp, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8049afa:	0c32      	lsrs	r2, r6, #16
 8049afc:	f88d 2008 	strb.w	r2, [sp, #8]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8049b00:	0a2a      	lsrs	r2, r5, #8
 8049b02:	f88d 200b 	strb.w	r2, [sp, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8049b06:	0c2a      	lsrs	r2, r5, #16
    b0[3] = 0x00;
 8049b08:	2300      	movs	r3, #0
    b0[6] = devAddr & 0xFF;
 8049b0a:	f88d 6006 	strb.w	r6, [sp, #6]
    b0[10] = fCnt & 0xFF;
 8049b0e:	f88d 500a 	strb.w	r5, [sp, #10]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8049b12:	f88d 200c 	strb.w	r2, [sp, #12]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8049b16:	4641      	mov	r1, r8
 8049b18:	4622      	mov	r2, r4
 8049b1a:	a804      	add	r0, sp, #16
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8049b1c:	0e36      	lsrs	r6, r6, #24
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8049b1e:	0e2d      	lsrs	r5, r5, #24
    b0[3] = 0x00;
 8049b20:	f88d 3003 	strb.w	r3, [sp, #3]
    b0[4] = 0x00;
 8049b24:	f88d 3004 	strb.w	r3, [sp, #4]
    b0[14] = 0x00;
 8049b28:	f88d 300e 	strb.w	r3, [sp, #14]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8049b2c:	f88d 6009 	strb.w	r6, [sp, #9]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8049b30:	f88d 500d 	strb.w	r5, [sp, #13]
    b0[15] = msgLen & 0xFF;
 8049b34:	f88d 400f 	strb.w	r4, [sp, #15]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8049b38:	f001 ff47 	bl	804b9ca <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8049b3c:	f104 0110 	add.w	r1, r4, #16
 8049b40:	463b      	mov	r3, r7
 8049b42:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 8049b44:	b289      	uxth	r1, r1
 8049b46:	4668      	mov	r0, sp
 8049b48:	f7fd faa2 	bl	8047090 <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 8049b4c:	b118      	cbz	r0, 8049b56 <VerifyCmacB0.constprop.3+0xae>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8049b4e:	2801      	cmp	r0, #1
 8049b50:	bf0c      	ite	eq
 8049b52:	2001      	moveq	r0, #1
 8049b54:	200f      	movne	r0, #15
}
 8049b56:	b045      	add	sp, #276	; 0x114
 8049b58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        b0[1] = 0x00;
 8049b5c:	f88d 9001 	strb.w	r9, [sp, #1]
        b0[2] = 0x00;
 8049b60:	f88d 9002 	strb.w	r9, [sp, #2]
 8049b64:	e7c3      	b.n	8049aee <VerifyCmacB0.constprop.3+0x46>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8049b66:	200a      	movs	r0, #10
 8049b68:	e7f5      	b.n	8049b56 <VerifyCmacB0.constprop.3+0xae>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8049b6a:	200e      	movs	r0, #14
 8049b6c:	e7f3      	b.n	8049b56 <VerifyCmacB0.constprop.3+0xae>
 8049b6e:	bf00      	nop
 8049b70:	2000a8b0 	.word	0x2000a8b0

08049b74 <LoRaMacCryptoSetLrWanVersion>:
    CryptoCtx.NvmCtx->LrWanVersion = version;
 8049b74:	4b02      	ldr	r3, [pc, #8]	; (8049b80 <LoRaMacCryptoSetLrWanVersion+0xc>)
 8049b76:	685b      	ldr	r3, [r3, #4]
 8049b78:	6018      	str	r0, [r3, #0]
}
 8049b7a:	2000      	movs	r0, #0
 8049b7c:	4770      	bx	lr
 8049b7e:	bf00      	nop
 8049b80:	2000a8b0 	.word	0x2000a8b0

08049b84 <LoRaMacCryptoRestoreNvmCtx>:
{
 8049b84:	b508      	push	{r3, lr}
    if( cryptoNvmCtx != 0 )
 8049b86:	4601      	mov	r1, r0
 8049b88:	b128      	cbz	r0, 8049b96 <LoRaMacCryptoRestoreNvmCtx+0x12>
        memcpy1( ( uint8_t* ) &NvmCryptoCtx, ( uint8_t* ) cryptoNvmCtx, CRYPTO_NVM_CTX_SIZE );
 8049b8a:	4804      	ldr	r0, [pc, #16]	; (8049b9c <LoRaMacCryptoRestoreNvmCtx+0x18>)
 8049b8c:	2234      	movs	r2, #52	; 0x34
 8049b8e:	f001 ff1c 	bl	804b9ca <memcpy1>
        return LORAMAC_CRYPTO_SUCCESS;
 8049b92:	2000      	movs	r0, #0
}
 8049b94:	bd08      	pop	{r3, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 8049b96:	200a      	movs	r0, #10
 8049b98:	e7fc      	b.n	8049b94 <LoRaMacCryptoRestoreNvmCtx+0x10>
 8049b9a:	bf00      	nop
 8049b9c:	2000a8bc 	.word	0x2000a8bc

08049ba0 <LoRaMacCryptoGetNvmCtx>:
    *cryptoNvmCtxSize = CRYPTO_NVM_CTX_SIZE;
 8049ba0:	2334      	movs	r3, #52	; 0x34
 8049ba2:	6003      	str	r3, [r0, #0]
}
 8049ba4:	4800      	ldr	r0, [pc, #0]	; (8049ba8 <LoRaMacCryptoGetNvmCtx+0x8>)
 8049ba6:	4770      	bx	lr
 8049ba8:	2000a8bc 	.word	0x2000a8bc

08049bac <LoRaMacCryptoGetFCntUp>:
    if( currentUp == NULL )
 8049bac:	b130      	cbz	r0, 8049bbc <LoRaMacCryptoGetFCntUp+0x10>
    *currentUp = CryptoCtx.NvmCtx->FCntList.FCntUp + 1;
 8049bae:	4b04      	ldr	r3, [pc, #16]	; (8049bc0 <LoRaMacCryptoGetFCntUp+0x14>)
 8049bb0:	685b      	ldr	r3, [r3, #4]
 8049bb2:	68db      	ldr	r3, [r3, #12]
 8049bb4:	3301      	adds	r3, #1
 8049bb6:	6003      	str	r3, [r0, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8049bb8:	2000      	movs	r0, #0
 8049bba:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 8049bbc:	200a      	movs	r0, #10
}
 8049bbe:	4770      	bx	lr
 8049bc0:	2000a8b0 	.word	0x2000a8b0

08049bc4 <LoRaMacCryptoGetFCntDown>:
{
 8049bc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8049bc6:	4617      	mov	r7, r2
    uint32_t lastDown = 0;
 8049bc8:	2200      	movs	r2, #0
{
 8049bca:	460e      	mov	r6, r1
    uint32_t lastDown = 0;
 8049bcc:	9201      	str	r2, [sp, #4]
    if( currentDown == NULL )
 8049bce:	461d      	mov	r5, r3
 8049bd0:	b353      	cbz	r3, 8049c28 <LoRaMacCryptoGetFCntDown+0x64>
    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8049bd2:	a901      	add	r1, sp, #4
 8049bd4:	f7ff fe7e 	bl	80498d4 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8049bd8:	b9e8      	cbnz	r0, 8049c16 <LoRaMacCryptoGetFCntDown+0x52>
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 8049bda:	9c01      	ldr	r4, [sp, #4]
 8049bdc:	1c63      	adds	r3, r4, #1
 8049bde:	d110      	bne.n	8049c02 <LoRaMacCryptoGetFCntDown+0x3e>
         *currentDown = frameFcnt;
 8049be0:	602f      	str	r7, [r5, #0]
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 8049be2:	4b12      	ldr	r3, [pc, #72]	; (8049c2c <LoRaMacCryptoGetFCntDown+0x68>)
 8049be4:	685b      	ldr	r3, [r3, #4]
 8049be6:	789b      	ldrb	r3, [r3, #2]
 8049be8:	b9ab      	cbnz	r3, 8049c16 <LoRaMacCryptoGetFCntDown+0x52>
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8049bea:	682b      	ldr	r3, [r5, #0]
 8049bec:	b2b6      	uxth	r6, r6
 8049bee:	1b1c      	subs	r4, r3, r4
 8049bf0:	eb63 0503 	sbc.w	r5, r3, r3
 8049bf4:	2700      	movs	r7, #0
 8049bf6:	42b4      	cmp	r4, r6
 8049bf8:	eb75 0307 	sbcs.w	r3, r5, r7
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 8049bfc:	bfa8      	it	ge
 8049bfe:	2008      	movge	r0, #8
 8049c00:	e009      	b.n	8049c16 <LoRaMacCryptoGetFCntDown+0x52>
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8049c02:	b2a3      	uxth	r3, r4
 8049c04:	1afb      	subs	r3, r7, r3
        if( fCntDiff > 0 )
 8049c06:	2b00      	cmp	r3, #0
 8049c08:	dd02      	ble.n	8049c10 <LoRaMacCryptoGetFCntDown+0x4c>
            *currentDown = lastDown + fCntDiff;
 8049c0a:	4423      	add	r3, r4
 8049c0c:	602b      	str	r3, [r5, #0]
 8049c0e:	e7e8      	b.n	8049be2 <LoRaMacCryptoGetFCntDown+0x1e>
        else if( fCntDiff == 0 )
 8049c10:	d103      	bne.n	8049c1a <LoRaMacCryptoGetFCntDown+0x56>
            *currentDown = lastDown;
 8049c12:	602c      	str	r4, [r5, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8049c14:	2007      	movs	r0, #7
}
 8049c16:	b003      	add	sp, #12
 8049c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8049c1a:	0c21      	lsrs	r1, r4, #16
 8049c1c:	0409      	lsls	r1, r1, #16
 8049c1e:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 8049c22:	4439      	add	r1, r7
 8049c24:	6029      	str	r1, [r5, #0]
 8049c26:	e7dc      	b.n	8049be2 <LoRaMacCryptoGetFCntDown+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8049c28:	200a      	movs	r0, #10
 8049c2a:	e7f4      	b.n	8049c16 <LoRaMacCryptoGetFCntDown+0x52>
 8049c2c:	2000a8b0 	.word	0x2000a8b0

08049c30 <LoRaMacCryptoPrepareJoinRequest>:
{
 8049c30:	b530      	push	{r4, r5, lr}
    if( macMsg == 0 )
 8049c32:	4604      	mov	r4, r0
{
 8049c34:	b085      	sub	sp, #20
    if( macMsg == 0 )
 8049c36:	b320      	cbz	r0, 8049c82 <LoRaMacCryptoPrepareJoinRequest+0x52>
    uint32_t devNonce = 0;
 8049c38:	a804      	add	r0, sp, #16
 8049c3a:	2300      	movs	r3, #0
    CryptoCtx.NvmCtx->DevNonce = devNonce;
 8049c3c:	4d13      	ldr	r5, [pc, #76]	; (8049c8c <LoRaMacCryptoPrepareJoinRequest+0x5c>)
    uint32_t devNonce = 0;
 8049c3e:	f840 3d04 	str.w	r3, [r0, #-4]!
    SecureElementRandomNumber( &devNonce );
 8049c42:	f7fd fadf 	bl	8047204 <SecureElementRandomNumber>
    CryptoCtx.NvmCtx->DevNonce = devNonce;
 8049c46:	686b      	ldr	r3, [r5, #4]
 8049c48:	9a03      	ldr	r2, [sp, #12]
 8049c4a:	809a      	strh	r2, [r3, #4]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8049c4c:	68ab      	ldr	r3, [r5, #8]
 8049c4e:	4798      	blx	r3
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 8049c50:	686b      	ldr	r3, [r5, #4]
 8049c52:	889b      	ldrh	r3, [r3, #4]
 8049c54:	82e3      	strh	r3, [r4, #22]
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8049c56:	4620      	mov	r0, r4
 8049c58:	f000 fab3 	bl	804a1c2 <LoRaMacSerializerJoinRequest>
 8049c5c:	b110      	cbz	r0, 8049c64 <LoRaMacCryptoPrepareJoinRequest+0x34>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8049c5e:	2011      	movs	r0, #17
}
 8049c60:	b005      	add	sp, #20
 8049c62:	bd30      	pop	{r4, r5, pc}
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8049c64:	f104 0318 	add.w	r3, r4, #24
 8049c68:	9300      	str	r3, [sp, #0]
 8049c6a:	2213      	movs	r2, #19
 8049c6c:	2302      	movs	r3, #2
 8049c6e:	6821      	ldr	r1, [r4, #0]
 8049c70:	f7fd fa00 	bl	8047074 <SecureElementComputeAesCmac>
 8049c74:	b938      	cbnz	r0, 8049c86 <LoRaMacCryptoPrepareJoinRequest+0x56>
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8049c76:	4620      	mov	r0, r4
 8049c78:	f000 faa3 	bl	804a1c2 <LoRaMacSerializerJoinRequest>
 8049c7c:	2800      	cmp	r0, #0
 8049c7e:	d0ef      	beq.n	8049c60 <LoRaMacCryptoPrepareJoinRequest+0x30>
 8049c80:	e7ed      	b.n	8049c5e <LoRaMacCryptoPrepareJoinRequest+0x2e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8049c82:	200a      	movs	r0, #10
 8049c84:	e7ec      	b.n	8049c60 <LoRaMacCryptoPrepareJoinRequest+0x30>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8049c86:	200f      	movs	r0, #15
 8049c88:	e7ea      	b.n	8049c60 <LoRaMacCryptoPrepareJoinRequest+0x30>
 8049c8a:	bf00      	nop
 8049c8c:	2000a8b0 	.word	0x2000a8b0

08049c90 <LoRaMacCryptoSecureMessage>:
{
 8049c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8049c92:	4605      	mov	r5, r0
 8049c94:	b087      	sub	sp, #28
    if( macMsg == NULL )
 8049c96:	461c      	mov	r4, r3
 8049c98:	b32b      	cbz	r3, 8049ce6 <LoRaMacCryptoSecureMessage+0x56>
    if( fCntUp < CryptoCtx.NvmCtx->FCntList.FCntUp )
 8049c9a:	4e30      	ldr	r6, [pc, #192]	; (8049d5c <LoRaMacCryptoSecureMessage+0xcc>)
 8049c9c:	6873      	ldr	r3, [r6, #4]
 8049c9e:	68db      	ldr	r3, [r3, #12]
 8049ca0:	4283      	cmp	r3, r0
 8049ca2:	d859      	bhi.n	8049d58 <LoRaMacCryptoSecureMessage+0xc8>
    if( macMsg->FPort == 0 )
 8049ca4:	f894 2020 	ldrb.w	r2, [r4, #32]
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
 8049ca8:	2a00      	cmp	r2, #0
 8049caa:	bf14      	ite	ne
 8049cac:	2208      	movne	r2, #8
 8049cae:	2207      	moveq	r2, #7
    if( fCntUp > CryptoCtx.NvmCtx->FCntList.FCntUp )
 8049cb0:	4283      	cmp	r3, r0
 8049cb2:	d309      	bcc.n	8049cc8 <LoRaMacCryptoSecureMessage+0x38>
    CryptoCtx.NvmCtx->FCntList.FCntUp = fCntUp;
 8049cb4:	6873      	ldr	r3, [r6, #4]
 8049cb6:	60dd      	str	r5, [r3, #12]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8049cb8:	68b3      	ldr	r3, [r6, #8]
 8049cba:	4798      	blx	r3
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8049cbc:	4620      	mov	r0, r4
 8049cbe:	f000 fab4 	bl	804a22a <LoRaMacSerializerData>
 8049cc2:	b170      	cbz	r0, 8049ce2 <LoRaMacCryptoSecureMessage+0x52>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8049cc4:	2011      	movs	r0, #17
 8049cc6:	e00a      	b.n	8049cde <LoRaMacCryptoSecureMessage+0x4e>
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8049cc8:	2300      	movs	r3, #0
 8049cca:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8049cce:	9001      	str	r0, [sp, #4]
 8049cd0:	9300      	str	r3, [sp, #0]
 8049cd2:	68a3      	ldr	r3, [r4, #8]
 8049cd4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8049cd6:	f7ff fe31 	bl	804993c <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8049cda:	2800      	cmp	r0, #0
 8049cdc:	d0ea      	beq.n	8049cb4 <LoRaMacCryptoSecureMessage+0x24>
}
 8049cde:	b007      	add	sp, #28
 8049ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8049ce2:	6821      	ldr	r1, [r4, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8049ce4:	b909      	cbnz	r1, 8049cea <LoRaMacCryptoSecureMessage+0x5a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8049ce6:	200a      	movs	r0, #10
 8049ce8:	e7f9      	b.n	8049cde <LoRaMacCryptoSecureMessage+0x4e>
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8049cea:	7926      	ldrb	r6, [r4, #4]
 8049cec:	3e04      	subs	r6, #4
 8049cee:	b2b2      	uxth	r2, r6
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8049cf0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8049cf4:	d82e      	bhi.n	8049d54 <LoRaMacCryptoSecureMessage+0xc4>
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8049cf6:	68a3      	ldr	r3, [r4, #8]
    b0[6] = devAddr & 0xFF;
 8049cf8:	f88d 300e 	strb.w	r3, [sp, #14]
    b0[0] = 0x49;
 8049cfc:	2749      	movs	r7, #73	; 0x49
 8049cfe:	9702      	str	r7, [sp, #8]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8049d00:	0a1f      	lsrs	r7, r3, #8
 8049d02:	f88d 700f 	strb.w	r7, [sp, #15]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8049d06:	0c1f      	lsrs	r7, r3, #16
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8049d08:	0e1b      	lsrs	r3, r3, #24
 8049d0a:	f88d 3011 	strb.w	r3, [sp, #17]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8049d0e:	0a2b      	lsrs	r3, r5, #8
 8049d10:	f88d 3013 	strb.w	r3, [sp, #19]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8049d14:	0c2b      	lsrs	r3, r5, #16
 8049d16:	f88d 3014 	strb.w	r3, [sp, #20]
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8049d1a:	f104 032c 	add.w	r3, r4, #44	; 0x2c
    b0[3] = 0x00;
 8049d1e:	f8ad 000c 	strh.w	r0, [sp, #12]
    b0[10] = fCnt & 0xFF;
 8049d22:	f88d 5012 	strb.w	r5, [sp, #18]
    b0[14] = 0x00;
 8049d26:	f88d 0016 	strb.w	r0, [sp, #22]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8049d2a:	0e2d      	lsrs	r5, r5, #24
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8049d2c:	9300      	str	r3, [sp, #0]
 8049d2e:	a802      	add	r0, sp, #8
 8049d30:	2307      	movs	r3, #7
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8049d32:	f88d 7010 	strb.w	r7, [sp, #16]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8049d36:	f88d 5015 	strb.w	r5, [sp, #21]
    b0[15] = msgLen & 0xFF;
 8049d3a:	f88d 6017 	strb.w	r6, [sp, #23]
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8049d3e:	f7fd f999 	bl	8047074 <SecureElementComputeAesCmac>
 8049d42:	b928      	cbnz	r0, 8049d50 <LoRaMacCryptoSecureMessage+0xc0>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8049d44:	4620      	mov	r0, r4
 8049d46:	f000 fa70 	bl	804a22a <LoRaMacSerializerData>
 8049d4a:	2800      	cmp	r0, #0
 8049d4c:	d0c7      	beq.n	8049cde <LoRaMacCryptoSecureMessage+0x4e>
 8049d4e:	e7b9      	b.n	8049cc4 <LoRaMacCryptoSecureMessage+0x34>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8049d50:	200f      	movs	r0, #15
 8049d52:	e7c4      	b.n	8049cde <LoRaMacCryptoSecureMessage+0x4e>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8049d54:	200e      	movs	r0, #14
 8049d56:	e7c2      	b.n	8049cde <LoRaMacCryptoSecureMessage+0x4e>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8049d58:	2006      	movs	r0, #6
 8049d5a:	e7c0      	b.n	8049cde <LoRaMacCryptoSecureMessage+0x4e>
 8049d5c:	2000a8b0 	.word	0x2000a8b0

08049d60 <LoRaMacCryptoUnsecureMessage>:
{
 8049d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8049d64:	b086      	sub	sp, #24
 8049d66:	4604      	mov	r4, r0
 8049d68:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8049d6a:	4689      	mov	r9, r1
 8049d6c:	4690      	mov	r8, r2
 8049d6e:	461d      	mov	r5, r3
    if( macMsg == 0 )
 8049d70:	2e00      	cmp	r6, #0
 8049d72:	d07a      	beq.n	8049e6a <LoRaMacCryptoUnsecureMessage+0x10a>
    uint32_t lastDown = 0;
 8049d74:	a906      	add	r1, sp, #24
 8049d76:	2300      	movs	r3, #0
 8049d78:	f841 3d04 	str.w	r3, [r1, #-4]!
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8049d7c:	4610      	mov	r0, r2
 8049d7e:	f7ff fda9 	bl	80498d4 <GetLastFcntDown>
 8049d82:	b120      	cbz	r0, 8049d8e <LoRaMacCryptoUnsecureMessage+0x2e>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8049d84:	2706      	movs	r7, #6
}
 8049d86:	4638      	mov	r0, r7
 8049d88:	b006      	add	sp, #24
 8049d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( ( currentDown > lastDown ) ||
 8049d8e:	9b05      	ldr	r3, [sp, #20]
 8049d90:	429d      	cmp	r5, r3
 8049d92:	d801      	bhi.n	8049d98 <LoRaMacCryptoUnsecureMessage+0x38>
 8049d94:	3301      	adds	r3, #1
 8049d96:	d1f5      	bne.n	8049d84 <LoRaMacCryptoUnsecureMessage+0x24>
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8049d98:	4630      	mov	r0, r6
 8049d9a:	f000 f9b7 	bl	804a10c <LoRaMacParserData>
 8049d9e:	2800      	cmp	r0, #0
 8049da0:	d165      	bne.n	8049e6e <LoRaMacCryptoUnsecureMessage+0x10e>
        if( KeyAddrList[i].AddrID == addrID )
 8049da2:	4b34      	ldr	r3, [pc, #208]	; (8049e74 <LoRaMacCryptoUnsecureMessage+0x114>)
 8049da4:	461a      	mov	r2, r3
 8049da6:	f813 1020 	ldrb.w	r1, [r3, r0, lsl #2]
 8049daa:	42a1      	cmp	r1, r4
 8049dac:	ea4f 0780 	mov.w	r7, r0, lsl #2
 8049db0:	d104      	bne.n	8049dbc <LoRaMacCryptoUnsecureMessage+0x5c>
    if( address != macMsg->FHDR.DevAddr )
 8049db2:	68b3      	ldr	r3, [r6, #8]
 8049db4:	454b      	cmp	r3, r9
 8049db6:	d006      	beq.n	8049dc6 <LoRaMacCryptoUnsecureMessage+0x66>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8049db8:	2702      	movs	r7, #2
 8049dba:	e7e4      	b.n	8049d86 <LoRaMacCryptoUnsecureMessage+0x26>
 8049dbc:	3001      	adds	r0, #1
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8049dbe:	2805      	cmp	r0, #5
 8049dc0:	d1f1      	bne.n	8049da6 <LoRaMacCryptoUnsecureMessage+0x46>
 8049dc2:	270c      	movs	r7, #12
 8049dc4:	e7df      	b.n	8049d86 <LoRaMacCryptoUnsecureMessage+0x26>
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 8049dc6:	4c2c      	ldr	r4, [pc, #176]	; (8049e78 <LoRaMacCryptoUnsecureMessage+0x118>)
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8049dc8:	6af0      	ldr	r0, [r6, #44]	; 0x2c
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 8049dca:	6861      	ldr	r1, [r4, #4]
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8049dcc:	7b33      	ldrb	r3, [r6, #12]
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 8049dce:	7889      	ldrb	r1, [r1, #2]
    payloadDecryptionKeyID = curItem->AppSkey;
 8049dd0:	443a      	add	r2, r7
        isAck = false;
 8049dd2:	2900      	cmp	r1, #0
    payloadDecryptionKeyID = curItem->AppSkey;
 8049dd4:	f892 a001 	ldrb.w	sl, [r2, #1]
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8049dd8:	7931      	ldrb	r1, [r6, #4]
 8049dda:	7892      	ldrb	r2, [r2, #2]
 8049ddc:	f8cd 9000 	str.w	r9, [sp]
 8049de0:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8049de4:	f1a1 0104 	sub.w	r1, r1, #4
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8049de8:	f3c3 1340 	ubfx	r3, r3, #5, #1
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8049dec:	b289      	uxth	r1, r1
 8049dee:	bf08      	it	eq
 8049df0:	2300      	moveq	r3, #0
 8049df2:	6830      	ldr	r0, [r6, #0]
 8049df4:	f7ff fe58 	bl	8049aa8 <VerifyCmacB0.constprop.3>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8049df8:	4607      	mov	r7, r0
 8049dfa:	2800      	cmp	r0, #0
 8049dfc:	d1c3      	bne.n	8049d86 <LoRaMacCryptoUnsecureMessage+0x26>
    if( macMsg->FPort == 0 )
 8049dfe:	f896 3020 	ldrb.w	r3, [r6, #32]
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8049e02:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8049e06:	9501      	str	r5, [sp, #4]
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
 8049e08:	2b00      	cmp	r3, #0
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8049e0a:	f04f 0301 	mov.w	r3, #1
 8049e0e:	9300      	str	r3, [sp, #0]
 8049e10:	bf18      	it	ne
 8049e12:	4652      	movne	r2, sl
 8049e14:	464b      	mov	r3, r9
 8049e16:	bf08      	it	eq
 8049e18:	2207      	moveq	r2, #7
 8049e1a:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8049e1c:	f7ff fd8e 	bl	804993c <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8049e20:	4607      	mov	r7, r0
 8049e22:	2800      	cmp	r0, #0
 8049e24:	d1af      	bne.n	8049d86 <LoRaMacCryptoUnsecureMessage+0x26>
    switch( fCntID )
 8049e26:	f108 38ff 	add.w	r8, r8, #4294967295
 8049e2a:	f1b8 0f06 	cmp.w	r8, #6
 8049e2e:	d807      	bhi.n	8049e40 <LoRaMacCryptoUnsecureMessage+0xe0>
 8049e30:	e8df f008 	tbb	[pc, r8]
 8049e34:	0f0c0904 	.word	0x0f0c0904
 8049e38:	1512      	.short	0x1512
 8049e3a:	18          	.byte	0x18
 8049e3b:	00          	.byte	0x00
            CryptoCtx.NvmCtx->FCntList.NFCntDown = currentDown;
 8049e3c:	6863      	ldr	r3, [r4, #4]
 8049e3e:	611d      	str	r5, [r3, #16]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8049e40:	68a3      	ldr	r3, [r4, #8]
 8049e42:	4798      	blx	r3
 8049e44:	e79f      	b.n	8049d86 <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoCtx.NvmCtx->FCntList.AFCntDown = currentDown;
 8049e46:	6863      	ldr	r3, [r4, #4]
 8049e48:	615d      	str	r5, [r3, #20]
 8049e4a:	e7f9      	b.n	8049e40 <LoRaMacCryptoUnsecureMessage+0xe0>
            CryptoCtx.NvmCtx->FCntList.FCntDown = currentDown;
 8049e4c:	6863      	ldr	r3, [r4, #4]
 8049e4e:	619d      	str	r5, [r3, #24]
 8049e50:	e7f6      	b.n	8049e40 <LoRaMacCryptoUnsecureMessage+0xe0>
            CryptoCtx.NvmCtx->FCntList.McFCntDown0 = currentDown;
 8049e52:	6863      	ldr	r3, [r4, #4]
 8049e54:	61dd      	str	r5, [r3, #28]
 8049e56:	e7f3      	b.n	8049e40 <LoRaMacCryptoUnsecureMessage+0xe0>
            CryptoCtx.NvmCtx->FCntList.McFCntDown1 = currentDown;
 8049e58:	6863      	ldr	r3, [r4, #4]
 8049e5a:	621d      	str	r5, [r3, #32]
 8049e5c:	e7f0      	b.n	8049e40 <LoRaMacCryptoUnsecureMessage+0xe0>
            CryptoCtx.NvmCtx->FCntList.McFCntDown2 = currentDown;
 8049e5e:	6863      	ldr	r3, [r4, #4]
 8049e60:	625d      	str	r5, [r3, #36]	; 0x24
 8049e62:	e7ed      	b.n	8049e40 <LoRaMacCryptoUnsecureMessage+0xe0>
            CryptoCtx.NvmCtx->FCntList.McFCntDown3 = currentDown;
 8049e64:	6863      	ldr	r3, [r4, #4]
 8049e66:	629d      	str	r5, [r3, #40]	; 0x28
 8049e68:	e7ea      	b.n	8049e40 <LoRaMacCryptoUnsecureMessage+0xe0>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8049e6a:	270a      	movs	r7, #10
 8049e6c:	e78b      	b.n	8049d86 <LoRaMacCryptoUnsecureMessage+0x26>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8049e6e:	2710      	movs	r7, #16
 8049e70:	e789      	b.n	8049d86 <LoRaMacCryptoUnsecureMessage+0x26>
 8049e72:	bf00      	nop
 8049e74:	2000109c 	.word	0x2000109c
 8049e78:	2000a8b0 	.word	0x2000a8b0

08049e7c <LoRaMacCryptoDeriveMcRootKey>:
{
 8049e7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8049e7e:	4b11      	ldr	r3, [pc, #68]	; (8049ec4 <LoRaMacCryptoDeriveMcRootKey+0x48>)
 8049e80:	685e      	ldr	r6, [r3, #4]
    if( ( ( keyID == APP_KEY ) && ( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 ) ) ||
 8049e82:	4604      	mov	r4, r0
 8049e84:	78b5      	ldrb	r5, [r6, #2]
 8049e86:	b910      	cbnz	r0, 8049e8e <LoRaMacCryptoDeriveMcRootKey+0x12>
 8049e88:	b92d      	cbnz	r5, 8049e96 <LoRaMacCryptoDeriveMcRootKey+0x1a>
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8049e8a:	200b      	movs	r0, #11
 8049e8c:	e017      	b.n	8049ebe <LoRaMacCryptoDeriveMcRootKey+0x42>
    if( ( ( keyID == APP_KEY ) && ( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 ) ) ||
 8049e8e:	2801      	cmp	r0, #1
 8049e90:	d101      	bne.n	8049e96 <LoRaMacCryptoDeriveMcRootKey+0x1a>
        ( ( keyID == GEN_APP_KEY ) && ( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 ) ) )
 8049e92:	2d01      	cmp	r5, #1
 8049e94:	d0f9      	beq.n	8049e8a <LoRaMacCryptoDeriveMcRootKey+0xe>
    uint8_t compBase[16] = { 0 };
 8049e96:	2210      	movs	r2, #16
 8049e98:	2100      	movs	r1, #0
 8049e9a:	4668      	mov	r0, sp
 8049e9c:	f003 fc9c 	bl	804d7d8 <memset>
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 )
 8049ea0:	2d01      	cmp	r5, #1
        compBase[0] = 0x20;
 8049ea2:	bf04      	itt	eq
 8049ea4:	2320      	moveq	r3, #32
 8049ea6:	f88d 3000 	strbeq.w	r3, [sp]
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8049eaa:	4622      	mov	r2, r4
 8049eac:	2309      	movs	r3, #9
 8049eae:	4669      	mov	r1, sp
 8049eb0:	6830      	ldr	r0, [r6, #0]
 8049eb2:	f7fd f982 	bl	80471ba <SecureElementDeriveAndStoreKey>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8049eb6:	2800      	cmp	r0, #0
 8049eb8:	bf0c      	ite	eq
 8049eba:	2000      	moveq	r0, #0
 8049ebc:	200f      	movne	r0, #15
}
 8049ebe:	b004      	add	sp, #16
 8049ec0:	bd70      	pop	{r4, r5, r6, pc}
 8049ec2:	bf00      	nop
 8049ec4:	2000a8b0 	.word	0x2000a8b0

08049ec8 <LoRaMacCryptoSetKey>:
{
 8049ec8:	b510      	push	{r4, lr}
 8049eca:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8049ecc:	f7fd f970 	bl	80471b0 <SecureElementSetKey>
 8049ed0:	b108      	cbz	r0, 8049ed6 <LoRaMacCryptoSetKey+0xe>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8049ed2:	200f      	movs	r0, #15
}
 8049ed4:	bd10      	pop	{r4, pc}
    if( ( keyID == GEN_APP_KEY ) || ( keyID == APP_KEY ) )
 8049ed6:	2c01      	cmp	r4, #1
 8049ed8:	d808      	bhi.n	8049eec <LoRaMacCryptoSetKey+0x24>
        if( LoRaMacCryptoDeriveMcRootKey( keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8049eda:	4620      	mov	r0, r4
 8049edc:	f7ff ffce 	bl	8049e7c <LoRaMacCryptoDeriveMcRootKey>
 8049ee0:	2800      	cmp	r0, #0
 8049ee2:	d1f6      	bne.n	8049ed2 <LoRaMacCryptoSetKey+0xa>
 8049ee4:	f7ff fdc8 	bl	8049a78 <LoRaMacCryptoDeriveMcKEKey.part.2>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8049ee8:	2800      	cmp	r0, #0
 8049eea:	d1f2      	bne.n	8049ed2 <LoRaMacCryptoSetKey+0xa>
    return LORAMAC_CRYPTO_SUCCESS;
 8049eec:	2000      	movs	r0, #0
 8049eee:	e7f1      	b.n	8049ed4 <LoRaMacCryptoSetKey+0xc>

08049ef0 <LoRaMacCryptoHandleJoinAccept>:
{
 8049ef0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8049ef4:	4681      	mov	r9, r0
 8049ef6:	b0c7      	sub	sp, #284	; 0x11c
 8049ef8:	4688      	mov	r8, r1
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8049efa:	4614      	mov	r4, r2
 8049efc:	2a00      	cmp	r2, #0
 8049efe:	f000 80af 	beq.w	804a060 <LoRaMacCryptoHandleJoinAccept+0x170>
 8049f02:	2900      	cmp	r1, #0
 8049f04:	f000 80ac 	beq.w	804a060 <LoRaMacCryptoHandleJoinAccept+0x170>
    uint8_t micComputationOffset = 0;
 8049f08:	28ff      	cmp	r0, #255	; 0xff
 8049f0a:	bf0c      	ite	eq
 8049f0c:	250c      	moveq	r5, #12
 8049f0e:	2500      	movne	r5, #0
    memset1( procBuffer, 0, ( macMsg->BufSize + micComputationOffset ) );
 8049f10:	7912      	ldrb	r2, [r2, #4]
 8049f12:	b2ae      	uxth	r6, r5
 8049f14:	4432      	add	r2, r6
 8049f16:	2100      	movs	r1, #0
 8049f18:	a803      	add	r0, sp, #12
 8049f1a:	f001 fd6a 	bl	804b9f2 <memset1>
    if( SecureElementAesEncrypt( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ), encryptionKeyID, ( procBuffer + micComputationOffset ) ) != SECURE_ELEMENT_SUCCESS )
 8049f1e:	7921      	ldrb	r1, [r4, #4]
 8049f20:	6820      	ldr	r0, [r4, #0]
 8049f22:	ab03      	add	r3, sp, #12
 8049f24:	441d      	add	r5, r3
 8049f26:	3901      	subs	r1, #1
 8049f28:	462b      	mov	r3, r5
 8049f2a:	2202      	movs	r2, #2
 8049f2c:	b289      	uxth	r1, r1
 8049f2e:	3001      	adds	r0, #1
 8049f30:	f7fd f8c6 	bl	80470c0 <SecureElementAesEncrypt>
 8049f34:	b118      	cbz	r0, 8049f3e <LoRaMacCryptoHandleJoinAccept+0x4e>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8049f36:	200f      	movs	r0, #15
}
 8049f38:	b047      	add	sp, #284	; 0x11c
 8049f3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    memcpy1( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( procBuffer + micComputationOffset ), ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ) );
 8049f3e:	7922      	ldrb	r2, [r4, #4]
 8049f40:	6820      	ldr	r0, [r4, #0]
 8049f42:	3a01      	subs	r2, #1
 8049f44:	3001      	adds	r0, #1
 8049f46:	b292      	uxth	r2, r2
 8049f48:	4629      	mov	r1, r5
 8049f4a:	f001 fd3e 	bl	804b9ca <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8049f4e:	4620      	mov	r0, r4
 8049f50:	f000 f88e 	bl	804a070 <LoRaMacParserJoinAccept>
 8049f54:	2800      	cmp	r0, #0
 8049f56:	f040 8085 	bne.w	804a064 <LoRaMacCryptoHandleJoinAccept+0x174>
    if( macMsg->DLSettings.Bits.OptNeg == 1 )
 8049f5a:	f994 2010 	ldrsb.w	r2, [r4, #16]
 8049f5e:	4d43      	ldr	r5, [pc, #268]	; (804a06c <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8049f60:	2a00      	cmp	r2, #0
 8049f62:	686b      	ldr	r3, [r5, #4]
        CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 1;
 8049f64:	bfba      	itte	lt
 8049f66:	2201      	movlt	r2, #1
 8049f68:	709a      	strblt	r2, [r3, #2]
        CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 0;
 8049f6a:	7098      	strbge	r0, [r3, #2]
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 8049f6c:	789b      	ldrb	r3, [r3, #2]
        micComputationKeyID = J_S_INT_KEY;
 8049f6e:	bfb4      	ite	lt
 8049f70:	2703      	movlt	r7, #3
        micComputationKeyID = NWK_KEY;
 8049f72:	2702      	movge	r7, #2
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 8049f74:	2b00      	cmp	r3, #0
 8049f76:	d145      	bne.n	804a004 <LoRaMacCryptoHandleJoinAccept+0x114>
        if( SecureElementVerifyAesCmac( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 8049f78:	7921      	ldrb	r1, [r4, #4]
 8049f7a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8049f7c:	6820      	ldr	r0, [r4, #0]
 8049f7e:	3904      	subs	r1, #4
 8049f80:	463b      	mov	r3, r7
 8049f82:	b289      	uxth	r1, r1
 8049f84:	f7fd f884 	bl	8047090 <SecureElementVerifyAesCmac>
 8049f88:	2800      	cmp	r0, #0
 8049f8a:	d1d4      	bne.n	8049f36 <LoRaMacCryptoHandleJoinAccept+0x46>
        retval = LoRaMacCryptoDeriveMcRootKey( GEN_APP_KEY );
 8049f8c:	2001      	movs	r0, #1
 8049f8e:	f7ff ff75 	bl	8049e7c <LoRaMacCryptoDeriveMcRootKey>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8049f92:	2800      	cmp	r0, #0
 8049f94:	d1d0      	bne.n	8049f38 <LoRaMacCryptoHandleJoinAccept+0x48>
 8049f96:	f7ff fd6f 	bl	8049a78 <LoRaMacCryptoDeriveMcKEKey.part.2>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8049f9a:	2800      	cmp	r0, #0
 8049f9c:	d1cc      	bne.n	8049f38 <LoRaMacCryptoHandleJoinAccept+0x48>
        retval = DeriveSessionKey10x( APP_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 8049f9e:	686b      	ldr	r3, [r5, #4]
 8049fa0:	1da6      	adds	r6, r4, #6
 8049fa2:	3409      	adds	r4, #9
 8049fa4:	3304      	adds	r3, #4
 8049fa6:	4622      	mov	r2, r4
 8049fa8:	4631      	mov	r1, r6
 8049faa:	2008      	movs	r0, #8
 8049fac:	f7ff fd2e 	bl	8049a0c <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8049fb0:	2800      	cmp	r0, #0
 8049fb2:	d1c1      	bne.n	8049f38 <LoRaMacCryptoHandleJoinAccept+0x48>
        retval = DeriveSessionKey10x( NWK_S_ENC_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 8049fb4:	686b      	ldr	r3, [r5, #4]
 8049fb6:	4622      	mov	r2, r4
 8049fb8:	3304      	adds	r3, #4
 8049fba:	4631      	mov	r1, r6
 8049fbc:	2007      	movs	r0, #7
 8049fbe:	f7ff fd25 	bl	8049a0c <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8049fc2:	2800      	cmp	r0, #0
 8049fc4:	d1b8      	bne.n	8049f38 <LoRaMacCryptoHandleJoinAccept+0x48>
        retval = DeriveSessionKey10x( F_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 8049fc6:	686b      	ldr	r3, [r5, #4]
 8049fc8:	4622      	mov	r2, r4
 8049fca:	3304      	adds	r3, #4
 8049fcc:	4631      	mov	r1, r6
 8049fce:	2005      	movs	r0, #5
 8049fd0:	f7ff fd1c 	bl	8049a0c <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8049fd4:	2800      	cmp	r0, #0
 8049fd6:	d1af      	bne.n	8049f38 <LoRaMacCryptoHandleJoinAccept+0x48>
        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 8049fd8:	686b      	ldr	r3, [r5, #4]
 8049fda:	4622      	mov	r2, r4
 8049fdc:	3304      	adds	r3, #4
 8049fde:	4631      	mov	r1, r6
 8049fe0:	2006      	movs	r0, #6
 8049fe2:	f7ff fd13 	bl	8049a0c <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8049fe6:	2800      	cmp	r0, #0
 8049fe8:	d1a6      	bne.n	8049f38 <LoRaMacCryptoHandleJoinAccept+0x48>
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 8049fea:	686b      	ldr	r3, [r5, #4]
    CryptoCtx.RJcount0 = 0;
 8049fec:	8028      	strh	r0, [r5, #0]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8049fee:	f04f 32ff 	mov.w	r2, #4294967295
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 8049ff2:	60d8      	str	r0, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8049ff4:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8049ff6:	e9c3 2204 	strd	r2, r2, [r3, #16]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8049ffa:	68ab      	ldr	r3, [r5, #8]
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 8049ffc:	9001      	str	r0, [sp, #4]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8049ffe:	4798      	blx	r3
    return LORAMAC_CRYPTO_SUCCESS;
 804a000:	9801      	ldr	r0, [sp, #4]
 804a002:	e799      	b.n	8049f38 <LoRaMacCryptoHandleJoinAccept+0x48>
        memcpyr( &procBuffer[bufItr], joinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 804a004:	2208      	movs	r2, #8
 804a006:	4641      	mov	r1, r8
 804a008:	f10d 000d 	add.w	r0, sp, #13
        procBuffer[bufItr++] = ( uint8_t ) joinReqType;
 804a00c:	f88d 900c 	strb.w	r9, [sp, #12]
        memcpyr( &procBuffer[bufItr], joinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 804a010:	f001 fce5 	bl	804b9de <memcpyr>
        procBuffer[bufItr++] = CryptoCtx.NvmCtx->DevNonce & 0xFF;
 804a014:	686b      	ldr	r3, [r5, #4]
        if( SecureElementVerifyAesCmac( procBuffer,  ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 804a016:	7921      	ldrb	r1, [r4, #4]
        procBuffer[bufItr++] = CryptoCtx.NvmCtx->DevNonce & 0xFF;
 804a018:	889a      	ldrh	r2, [r3, #4]
 804a01a:	f88d 2015 	strb.w	r2, [sp, #21]
        procBuffer[bufItr++] = ( CryptoCtx.NvmCtx->DevNonce >> 8 ) & 0xFF;
 804a01e:	889b      	ldrh	r3, [r3, #4]
        if( SecureElementVerifyAesCmac( procBuffer,  ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 804a020:	6a62      	ldr	r2, [r4, #36]	; 0x24
        procBuffer[bufItr++] = ( CryptoCtx.NvmCtx->DevNonce >> 8 ) & 0xFF;
 804a022:	0a1b      	lsrs	r3, r3, #8
        if( SecureElementVerifyAesCmac( procBuffer,  ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 804a024:	3905      	subs	r1, #5
        procBuffer[bufItr++] = ( CryptoCtx.NvmCtx->DevNonce >> 8 ) & 0xFF;
 804a026:	f88d 3016 	strb.w	r3, [sp, #22]
        if( SecureElementVerifyAesCmac( procBuffer,  ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 804a02a:	4431      	add	r1, r6
        procBuffer[bufItr++] = macMsg->MHDR.Value;
 804a02c:	7963      	ldrb	r3, [r4, #5]
 804a02e:	f88d 3017 	strb.w	r3, [sp, #23]
        if( SecureElementVerifyAesCmac( procBuffer,  ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 804a032:	b289      	uxth	r1, r1
 804a034:	463b      	mov	r3, r7
 804a036:	a803      	add	r0, sp, #12
 804a038:	f7fd f82a 	bl	8047090 <SecureElementVerifyAesCmac>
 804a03c:	2800      	cmp	r0, #0
 804a03e:	f47f af7a 	bne.w	8049f36 <LoRaMacCryptoHandleJoinAccept+0x46>
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[2] << 16 );
 804a042:	7a23      	ldrb	r3, [r4, #8]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[1] << 8 );
 804a044:	79e1      	ldrb	r1, [r4, #7]
        currentJoinNonce = ( uint32_t ) macMsg->JoinNonce[0];
 804a046:	79a2      	ldrb	r2, [r4, #6]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[2] << 16 );
 804a048:	041b      	lsls	r3, r3, #16
 804a04a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 804a04e:	4313      	orrs	r3, r2
        if( currentJoinNonce > CryptoCtx.NvmCtx->JoinNonce )
 804a050:	686a      	ldr	r2, [r5, #4]
 804a052:	6891      	ldr	r1, [r2, #8]
 804a054:	4299      	cmp	r1, r3
 804a056:	d207      	bcs.n	804a068 <LoRaMacCryptoHandleJoinAccept+0x178>
            CryptoCtx.NvmCtx->JoinNonce = currentJoinNonce;
 804a058:	6093      	str	r3, [r2, #8]
            CryptoCtx.EventCryptoNvmCtxChanged( );
 804a05a:	68ab      	ldr	r3, [r5, #8]
 804a05c:	4798      	blx	r3
 804a05e:	e795      	b.n	8049f8c <LoRaMacCryptoHandleJoinAccept+0x9c>
        return LORAMAC_CRYPTO_ERROR_NPE;
 804a060:	200a      	movs	r0, #10
 804a062:	e769      	b.n	8049f38 <LoRaMacCryptoHandleJoinAccept+0x48>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 804a064:	2010      	movs	r0, #16
 804a066:	e767      	b.n	8049f38 <LoRaMacCryptoHandleJoinAccept+0x48>
            return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 804a068:	2003      	movs	r0, #3
 804a06a:	e765      	b.n	8049f38 <LoRaMacCryptoHandleJoinAccept+0x48>
 804a06c:	2000a8b0 	.word	0x2000a8b0

0804a070 <LoRaMacParserJoinAccept>:
*/
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 804a070:	b510      	push	{r4, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 804a072:	4604      	mov	r4, r0
 804a074:	2800      	cmp	r0, #0
 804a076:	d045      	beq.n	804a104 <LoRaMacParserJoinAccept+0x94>
 804a078:	6801      	ldr	r1, [r0, #0]
 804a07a:	2900      	cmp	r1, #0
 804a07c:	d042      	beq.n	804a104 <LoRaMacParserJoinAccept+0x94>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 804a07e:	f811 3b01 	ldrb.w	r3, [r1], #1
 804a082:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 804a084:	2203      	movs	r2, #3
 804a086:	3006      	adds	r0, #6
 804a088:	f001 fc9f 	bl	804b9ca <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 804a08c:	4620      	mov	r0, r4
 804a08e:	2203      	movs	r2, #3
 804a090:	f850 1b09 	ldr.w	r1, [r0], #9
 804a094:	3104      	adds	r1, #4
 804a096:	f001 fc98 	bl	804b9ca <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 804a09a:	6821      	ldr	r1, [r4, #0]
 804a09c:	79cb      	ldrb	r3, [r1, #7]
 804a09e:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 804a0a0:	7a0a      	ldrb	r2, [r1, #8]
 804a0a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 804a0a6:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 804a0a8:	7a4a      	ldrb	r2, [r1, #9]
 804a0aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 804a0ae:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 804a0b0:	7a8a      	ldrb	r2, [r1, #10]
 804a0b2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 804a0b6:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 804a0b8:	7acb      	ldrb	r3, [r1, #11]
 804a0ba:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 804a0bc:	7b0b      	ldrb	r3, [r1, #12]
 804a0be:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_C_FLIST_FIELD_SIZE )
 804a0c0:	7923      	ldrb	r3, [r4, #4]
 804a0c2:	2b21      	cmp	r3, #33	; 0x21
 804a0c4:	d11a      	bne.n	804a0fc <LoRaMacParserJoinAccept+0x8c>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_C_FLIST_FIELD_SIZE );
 804a0c6:	2210      	movs	r2, #16
 804a0c8:	310d      	adds	r1, #13
 804a0ca:	f104 0012 	add.w	r0, r4, #18
 804a0ce:	f001 fc7c 	bl	804b9ca <memcpy1>
        bufItr = bufItr + LORAMAC_C_FLIST_FIELD_SIZE;
 804a0d2:	221d      	movs	r2, #29
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 804a0d4:	6821      	ldr	r1, [r4, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 804a0d6:	1c50      	adds	r0, r2, #1
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 804a0d8:	5c8b      	ldrb	r3, [r1, r2]
 804a0da:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 804a0dc:	5c08      	ldrb	r0, [r1, r0]
 804a0de:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 804a0e2:	1c90      	adds	r0, r2, #2
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 804a0e4:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 804a0e6:	5c08      	ldrb	r0, [r1, r0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 804a0e8:	3203      	adds	r2, #3
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 804a0ea:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 804a0ee:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 804a0f0:	5c8a      	ldrb	r2, [r1, r2]
 804a0f2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 804a0f6:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 804a0f8:	2000      	movs	r0, #0
}
 804a0fa:	bd10      	pop	{r4, pc}
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 804a0fc:	2b11      	cmp	r3, #17
 804a0fe:	dc03      	bgt.n	804a108 <LoRaMacParserJoinAccept+0x98>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 804a100:	220d      	movs	r2, #13
 804a102:	e7e7      	b.n	804a0d4 <LoRaMacParserJoinAccept+0x64>
        return LORAMAC_PARSER_ERROR_NPE;
 804a104:	2002      	movs	r0, #2
 804a106:	e7f8      	b.n	804a0fa <LoRaMacParserJoinAccept+0x8a>
        return LORAMAC_PARSER_FAIL;
 804a108:	2001      	movs	r0, #1
 804a10a:	e7f6      	b.n	804a0fa <LoRaMacParserJoinAccept+0x8a>

0804a10c <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 804a10c:	b510      	push	{r4, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 804a10e:	4604      	mov	r4, r0
 804a110:	2800      	cmp	r0, #0
 804a112:	d054      	beq.n	804a1be <LoRaMacParserData+0xb2>
 804a114:	6801      	ldr	r1, [r0, #0]
 804a116:	2900      	cmp	r1, #0
 804a118:	d051      	beq.n	804a1be <LoRaMacParserData+0xb2>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 804a11a:	780b      	ldrb	r3, [r1, #0]
 804a11c:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 804a11e:	784b      	ldrb	r3, [r1, #1]
 804a120:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 804a122:	788a      	ldrb	r2, [r1, #2]
 804a124:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 804a128:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 804a12a:	78ca      	ldrb	r2, [r1, #3]
 804a12c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 804a130:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 804a132:	790a      	ldrb	r2, [r1, #4]
 804a134:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 804a138:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 804a13a:	794b      	ldrb	r3, [r1, #5]
 804a13c:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 804a13e:	798b      	ldrb	r3, [r1, #6]
 804a140:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 804a142:	79ca      	ldrb	r2, [r1, #7]
 804a144:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 804a148:	7b02      	ldrb	r2, [r0, #12]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 804a14a:	81c3      	strh	r3, [r0, #14]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 804a14c:	f002 020f 	and.w	r2, r2, #15
 804a150:	3108      	adds	r1, #8
 804a152:	3010      	adds	r0, #16
 804a154:	f001 fc39 	bl	804b9ca <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 804a158:	7b23      	ldrb	r3, [r4, #12]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 804a15a:	2200      	movs	r2, #0
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 804a15c:	f003 030f 	and.w	r3, r3, #15
    macMsg->FPort = 0;
 804a160:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 804a164:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 804a168:	7922      	ldrb	r2, [r4, #4]
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 804a16a:	f103 0008 	add.w	r0, r3, #8
    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 804a16e:	1a11      	subs	r1, r2, r0
 804a170:	2904      	cmp	r1, #4
 804a172:	dd0d      	ble.n	804a190 <LoRaMacParserData+0x84>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 804a174:	6821      	ldr	r1, [r4, #0]
 804a176:	3309      	adds	r3, #9

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 804a178:	3a04      	subs	r2, #4
 804a17a:	1ad2      	subs	r2, r2, r3
        macMsg->FPort = macMsg->Buffer[bufItr++];
 804a17c:	5c08      	ldrb	r0, [r1, r0]
 804a17e:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 804a182:	b2d2      	uxtb	r2, r2
 804a184:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 804a188:	4419      	add	r1, r3
 804a18a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 804a18c:	f001 fc1d 	bl	804b9ca <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 804a190:	7923      	ldrb	r3, [r4, #4]
 804a192:	6822      	ldr	r2, [r4, #0]
 804a194:	441a      	add	r2, r3
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );

    return LORAMAC_PARSER_SUCCESS;
 804a196:	2000      	movs	r0, #0
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 804a198:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 804a19c:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 804a19e:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 804a1a2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 804a1a6:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 804a1a8:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 804a1ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 804a1b0:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 804a1b2:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 804a1b6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 804a1ba:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 804a1bc:	bd10      	pop	{r4, pc}
        return LORAMAC_PARSER_ERROR_NPE;
 804a1be:	2002      	movs	r0, #2
 804a1c0:	e7fc      	b.n	804a1bc <LoRaMacParserData+0xb0>

0804a1c2 <LoRaMacSerializerJoinRequest>:
*/
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 804a1c2:	b538      	push	{r3, r4, r5, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 804a1c4:	4604      	mov	r4, r0
 804a1c6:	b360      	cbz	r0, 804a222 <LoRaMacSerializerJoinRequest+0x60>
 804a1c8:	6803      	ldr	r3, [r0, #0]
 804a1ca:	b353      	cbz	r3, 804a222 <LoRaMacSerializerJoinRequest+0x60>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 804a1cc:	7902      	ldrb	r2, [r0, #4]
 804a1ce:	2a16      	cmp	r2, #22
 804a1d0:	d929      	bls.n	804a226 <LoRaMacSerializerJoinRequest+0x64>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 804a1d2:	7942      	ldrb	r2, [r0, #5]
 804a1d4:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 804a1d6:	4605      	mov	r5, r0
 804a1d8:	2208      	movs	r2, #8
 804a1da:	f855 0b0e 	ldr.w	r0, [r5], #14
 804a1de:	1da1      	adds	r1, r4, #6
 804a1e0:	3001      	adds	r0, #1
 804a1e2:	f001 fbfc 	bl	804b9de <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 804a1e6:	6820      	ldr	r0, [r4, #0]
 804a1e8:	2208      	movs	r2, #8
 804a1ea:	3009      	adds	r0, #9
 804a1ec:	4629      	mov	r1, r5
 804a1ee:	f001 fbf6 	bl	804b9de <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 804a1f2:	6823      	ldr	r3, [r4, #0]
 804a1f4:	8ae2      	ldrh	r2, [r4, #22]
 804a1f6:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 804a1f8:	8ae3      	ldrh	r3, [r4, #22]
 804a1fa:	6822      	ldr	r2, [r4, #0]
 804a1fc:	0a1b      	lsrs	r3, r3, #8
 804a1fe:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 804a200:	6823      	ldr	r3, [r4, #0]
 804a202:	69a2      	ldr	r2, [r4, #24]
 804a204:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 804a206:	69a3      	ldr	r3, [r4, #24]
 804a208:	6822      	ldr	r2, [r4, #0]
 804a20a:	0a1b      	lsrs	r3, r3, #8
 804a20c:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 804a20e:	6823      	ldr	r3, [r4, #0]
 804a210:	8b62      	ldrh	r2, [r4, #26]
 804a212:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 804a214:	6823      	ldr	r3, [r4, #0]
 804a216:	7ee2      	ldrb	r2, [r4, #27]
 804a218:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 804a21a:	2317      	movs	r3, #23
 804a21c:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 804a21e:	2000      	movs	r0, #0
}
 804a220:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 804a222:	2001      	movs	r0, #1
 804a224:	e7fc      	b.n	804a220 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 804a226:	2002      	movs	r0, #2
 804a228:	e7fa      	b.n	804a220 <LoRaMacSerializerJoinRequest+0x5e>

0804a22a <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 804a22a:	b538      	push	{r3, r4, r5, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 804a22c:	4604      	mov	r4, r0
 804a22e:	2800      	cmp	r0, #0
 804a230:	d063      	beq.n	804a2fa <LoRaMacSerializerData+0xd0>
 804a232:	6801      	ldr	r1, [r0, #0]
 804a234:	2900      	cmp	r1, #0
 804a236:	d060      	beq.n	804a2fa <LoRaMacSerializerData+0xd0>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADD_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 804a238:	7b03      	ldrb	r3, [r0, #12]

    if( macMsg->FRMPayloadSize > 0 )
 804a23a:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 804a23e:	f003 030f 	and.w	r3, r3, #15
    if( macMsg->FRMPayloadSize > 0 )
 804a242:	2a00      	cmp	r2, #0
 804a244:	d157      	bne.n	804a2f6 <LoRaMacSerializerData+0xcc>
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 804a246:	3308      	adds	r3, #8
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
    }

    computedBufSize += macMsg->FRMPayloadSize;
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 804a248:	3204      	adds	r2, #4

    if( macMsg->BufSize < computedBufSize )
 804a24a:	7920      	ldrb	r0, [r4, #4]
 804a24c:	4413      	add	r3, r2
 804a24e:	4298      	cmp	r0, r3
 804a250:	d355      	bcc.n	804a2fe <LoRaMacSerializerData+0xd4>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 804a252:	7963      	ldrb	r3, [r4, #5]
 804a254:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 804a256:	6823      	ldr	r3, [r4, #0]
 804a258:	68a2      	ldr	r2, [r4, #8]
 804a25a:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 804a25c:	68a3      	ldr	r3, [r4, #8]
 804a25e:	6822      	ldr	r2, [r4, #0]
 804a260:	0a1b      	lsrs	r3, r3, #8
 804a262:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 804a264:	6823      	ldr	r3, [r4, #0]
 804a266:	8962      	ldrh	r2, [r4, #10]
 804a268:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 804a26a:	6823      	ldr	r3, [r4, #0]
 804a26c:	7ae2      	ldrb	r2, [r4, #11]
 804a26e:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 804a270:	6823      	ldr	r3, [r4, #0]
 804a272:	7b22      	ldrb	r2, [r4, #12]
 804a274:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 804a276:	6823      	ldr	r3, [r4, #0]
 804a278:	89e2      	ldrh	r2, [r4, #14]
 804a27a:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 804a27c:	89e3      	ldrh	r3, [r4, #14]
 804a27e:	6822      	ldr	r2, [r4, #0]
 804a280:	0a1b      	lsrs	r3, r3, #8
 804a282:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 804a284:	7b22      	ldrb	r2, [r4, #12]
 804a286:	6820      	ldr	r0, [r4, #0]
 804a288:	f002 020f 	and.w	r2, r2, #15
 804a28c:	f104 0110 	add.w	r1, r4, #16
 804a290:	3008      	adds	r0, #8
 804a292:	f001 fb9a 	bl	804b9ca <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 804a296:	7b23      	ldrb	r3, [r4, #12]

    if( macMsg->FRMPayloadSize > 0 )
 804a298:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 804a29c:	f003 030f 	and.w	r3, r3, #15
 804a2a0:	f103 0508 	add.w	r5, r3, #8
    if( macMsg->FRMPayloadSize > 0 )
 804a2a4:	b12a      	cbz	r2, 804a2b2 <LoRaMacSerializerData+0x88>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 804a2a6:	6822      	ldr	r2, [r4, #0]
 804a2a8:	f894 1020 	ldrb.w	r1, [r4, #32]
 804a2ac:	5551      	strb	r1, [r2, r5]
 804a2ae:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 804a2b2:	6820      	ldr	r0, [r4, #0]
 804a2b4:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 804a2b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 804a2ba:	4428      	add	r0, r5
 804a2bc:	f001 fb85 	bl	804b9ca <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 804a2c0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 804a2c4:	6822      	ldr	r2, [r4, #0]
 804a2c6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    bufItr = bufItr + macMsg->FRMPayloadSize;
 804a2c8:	442b      	add	r3, r5
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 804a2ca:	54d1      	strb	r1, [r2, r3]
 804a2cc:	1c5a      	adds	r2, r3, #1
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 804a2ce:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 804a2d0:	6820      	ldr	r0, [r4, #0]
 804a2d2:	b292      	uxth	r2, r2
 804a2d4:	0a09      	lsrs	r1, r1, #8
 804a2d6:	5481      	strb	r1, [r0, r2]
 804a2d8:	1c9a      	adds	r2, r3, #2
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 804a2da:	6821      	ldr	r1, [r4, #0]
 804a2dc:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 804a2de:	b292      	uxth	r2, r2
 804a2e0:	5488      	strb	r0, [r1, r2]
 804a2e2:	1cda      	adds	r2, r3, #3
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 804a2e4:	b292      	uxth	r2, r2
 804a2e6:	6821      	ldr	r1, [r4, #0]
 804a2e8:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 804a2ec:	5488      	strb	r0, [r1, r2]
 804a2ee:	3304      	adds	r3, #4

    macMsg->BufSize = bufItr;
 804a2f0:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 804a2f2:	2000      	movs	r0, #0
}
 804a2f4:	bd38      	pop	{r3, r4, r5, pc}
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 804a2f6:	3309      	adds	r3, #9
 804a2f8:	e7a6      	b.n	804a248 <LoRaMacSerializerData+0x1e>
        return LORAMAC_SERIALIZER_ERROR_NPE;
 804a2fa:	2001      	movs	r0, #1
 804a2fc:	e7fa      	b.n	804a2f4 <LoRaMacSerializerData+0xca>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 804a2fe:	2002      	movs	r0, #2
 804a300:	e7f8      	b.n	804a2f4 <LoRaMacSerializerData+0xca>

0804a302 <RegionGetPhyParam>:
}

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
    PhyParam_t phyParam = { 0 };
    switch( region )
 804a302:	2801      	cmp	r0, #1
{
 804a304:	b082      	sub	sp, #8
    switch( region )
 804a306:	d103      	bne.n	804a310 <RegionGetPhyParam+0xe>
    {
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
 804a308:	4608      	mov	r0, r1
        default:
        {
            return phyParam;
        }
    }
}
 804a30a:	b002      	add	sp, #8
        AU915_GET_PHY_PARAM( );
 804a30c:	f000 b8c2 	b.w	804a494 <RegionAU915GetPhyParam>
}
 804a310:	2000      	movs	r0, #0
 804a312:	b002      	add	sp, #8
 804a314:	4770      	bx	lr

0804a316 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
    switch( region )
 804a316:	2801      	cmp	r0, #1
 804a318:	d102      	bne.n	804a320 <RegionSetBandTxDone+0xa>
    {
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
 804a31a:	4608      	mov	r0, r1
 804a31c:	f000 b964 	b.w	804a5e8 <RegionAU915SetBandTxDone>
        default:
        {
            return;
        }
    }
}
 804a320:	4770      	bx	lr

0804a322 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
    switch( region )
 804a322:	2801      	cmp	r0, #1
 804a324:	d102      	bne.n	804a32c <RegionInitDefaults+0xa>
    {
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
 804a326:	4608      	mov	r0, r1
 804a328:	f000 b96e 	b.w	804a608 <RegionAU915InitDefaults>
        default:
        {
            break;
        }
    }
}
 804a32c:	4770      	bx	lr

0804a32e <RegionGetNvmCtx>:

void* RegionGetNvmCtx( LoRaMacRegion_t region, GetNvmCtxParams_t* params )
{
    switch( region )
 804a32e:	2801      	cmp	r0, #1
 804a330:	d102      	bne.n	804a338 <RegionGetNvmCtx+0xa>
    {
        AS923_GET_NVM_CTX( );
        AU915_GET_NVM_CTX( );
 804a332:	4608      	mov	r0, r1
 804a334:	f000 b9e4 	b.w	804a700 <RegionAU915GetNvmCtx>
        default:
        {
           return 0;
        }
    }
}
 804a338:	2000      	movs	r0, #0
 804a33a:	4770      	bx	lr

0804a33c <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
    switch( region )
 804a33c:	2801      	cmp	r0, #1
{
 804a33e:	460b      	mov	r3, r1
    switch( region )
 804a340:	d103      	bne.n	804a34a <RegionVerify+0xe>
    {
        AS923_VERIFY( );
        AU915_VERIFY( );
 804a342:	4611      	mov	r1, r2
 804a344:	4618      	mov	r0, r3
 804a346:	f000 b9e3 	b.w	804a710 <RegionAU915Verify>
        default:
        {
            return false;
        }
    }
}
 804a34a:	2000      	movs	r0, #0
 804a34c:	4770      	bx	lr

0804a34e <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
    switch( region )
 804a34e:	2801      	cmp	r0, #1
 804a350:	d102      	bne.n	804a358 <RegionApplyCFList+0xa>
    {
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
 804a352:	4608      	mov	r0, r1
 804a354:	f000 ba08 	b.w	804a768 <RegionAU915ApplyCFList>
        default:
        {
            break;
        }
    }
}
 804a358:	4770      	bx	lr

0804a35a <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
    switch( region )
 804a35a:	2801      	cmp	r0, #1
 804a35c:	d102      	bne.n	804a364 <RegionChanMaskSet+0xa>
    {
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
 804a35e:	4608      	mov	r0, r1
 804a360:	f000 ba28 	b.w	804a7b4 <RegionAU915ChanMaskSet>
        default:
        {
            return false;
        }
    }
}
 804a364:	2000      	movs	r0, #0
 804a366:	4770      	bx	lr

0804a368 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 804a368:	b410      	push	{r4}
    switch( region )
 804a36a:	2801      	cmp	r0, #1
{
 804a36c:	460c      	mov	r4, r1
 804a36e:	4611      	mov	r1, r2
 804a370:	461a      	mov	r2, r3
 804a372:	9b01      	ldr	r3, [sp, #4]
    switch( region )
 804a374:	d104      	bne.n	804a380 <RegionComputeRxWindowParameters+0x18>
    {
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
 804a376:	4620      	mov	r0, r4
        default:
        {
            break;
        }
    }
}
 804a378:	f85d 4b04 	ldr.w	r4, [sp], #4
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
 804a37c:	f000 ba46 	b.w	804a80c <RegionAU915ComputeRxWindowParameters>
}
 804a380:	f85d 4b04 	ldr.w	r4, [sp], #4
 804a384:	4770      	bx	lr

0804a386 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
    switch( region )
 804a386:	2801      	cmp	r0, #1
{
 804a388:	460b      	mov	r3, r1
    switch( region )
 804a38a:	d103      	bne.n	804a394 <RegionRxConfig+0xe>
    {
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
 804a38c:	4611      	mov	r1, r2
 804a38e:	4618      	mov	r0, r3
 804a390:	f000 ba7e 	b.w	804a890 <RegionAU915RxConfig>
        default:
        {
            return false;
        }
    }
}
 804a394:	2000      	movs	r0, #0
 804a396:	4770      	bx	lr

0804a398 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
    switch( region )
 804a398:	2801      	cmp	r0, #1
{
 804a39a:	b410      	push	{r4}
 804a39c:	460c      	mov	r4, r1
 804a39e:	4611      	mov	r1, r2
    switch( region )
 804a3a0:	d105      	bne.n	804a3ae <RegionTxConfig+0x16>
    {
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
 804a3a2:	4620      	mov	r0, r4
 804a3a4:	461a      	mov	r2, r3
        default:
        {
            return false;
        }
    }
}
 804a3a6:	f85d 4b04 	ldr.w	r4, [sp], #4
        AU915_TX_CONFIG( );
 804a3aa:	f000 bacb 	b.w	804a944 <RegionAU915TxConfig>
}
 804a3ae:	2000      	movs	r0, #0
 804a3b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 804a3b4:	4770      	bx	lr

0804a3b6 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 804a3b6:	b430      	push	{r4, r5}
    switch( region )
 804a3b8:	2801      	cmp	r0, #1
{
 804a3ba:	460c      	mov	r4, r1
 804a3bc:	4611      	mov	r1, r2
 804a3be:	461a      	mov	r2, r3
 804a3c0:	e9dd 3502 	ldrd	r3, r5, [sp, #8]
    switch( region )
 804a3c4:	d104      	bne.n	804a3d0 <RegionLinkAdrReq+0x1a>
    {
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
 804a3c6:	9502      	str	r5, [sp, #8]
 804a3c8:	4620      	mov	r0, r4
        default:
        {
            return 0;
        }
    }
}
 804a3ca:	bc30      	pop	{r4, r5}
        AU915_LINK_ADR_REQ( );
 804a3cc:	f000 bb36 	b.w	804aa3c <RegionAU915LinkAdrReq>
}
 804a3d0:	2000      	movs	r0, #0
 804a3d2:	bc30      	pop	{r4, r5}
 804a3d4:	4770      	bx	lr

0804a3d6 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
    switch( region )
 804a3d6:	2801      	cmp	r0, #1
 804a3d8:	d102      	bne.n	804a3e0 <RegionRxParamSetupReq+0xa>
    {
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
 804a3da:	4608      	mov	r0, r1
 804a3dc:	f000 bc3a 	b.w	804ac54 <RegionAU915RxParamSetupReq>
        default:
        {
            return 0;
        }
    }
}
 804a3e0:	2000      	movs	r0, #0
 804a3e2:	4770      	bx	lr

0804a3e4 <RegionNewChannelReq>:

uint8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
    switch( region )
 804a3e4:	2801      	cmp	r0, #1
 804a3e6:	d102      	bne.n	804a3ee <RegionNewChannelReq+0xa>
    {
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
 804a3e8:	4608      	mov	r0, r1
 804a3ea:	f000 bc59 	b.w	804aca0 <RegionAU915NewChannelReq>
        default:
        {
            return 0;
        }
    }
}
 804a3ee:	2000      	movs	r0, #0
 804a3f0:	4770      	bx	lr

0804a3f2 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
    switch( region )
 804a3f2:	2801      	cmp	r0, #1
 804a3f4:	d102      	bne.n	804a3fc <RegionTxParamSetupReq+0xa>
    {
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
 804a3f6:	4608      	mov	r0, r1
 804a3f8:	f000 bc54 	b.w	804aca4 <RegionAU915TxParamSetupReq>
        default:
        {
            return 0;
        }
    }
}
 804a3fc:	2000      	movs	r0, #0
 804a3fe:	4770      	bx	lr

0804a400 <RegionDlChannelReq>:

uint8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
    switch( region )
 804a400:	2801      	cmp	r0, #1
 804a402:	d102      	bne.n	804a40a <RegionDlChannelReq+0xa>
    {
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
 804a404:	4608      	mov	r0, r1
 804a406:	f000 bc4f 	b.w	804aca8 <RegionAU915DlChannelReq>
        default:
        {
            return 0;
        }
    }
}
 804a40a:	2000      	movs	r0, #0
 804a40c:	4770      	bx	lr

0804a40e <RegionCalcBackOff>:
    }
}

void RegionCalcBackOff( LoRaMacRegion_t region, CalcBackOffParams_t* calcBackOff )
{
    switch( region )
 804a40e:	2801      	cmp	r0, #1
 804a410:	d102      	bne.n	804a418 <RegionCalcBackOff+0xa>
    {
        AS923_CALC_BACKOFF( );
        AU915_CALC_BACKOFF( );
 804a412:	4608      	mov	r0, r1
 804a414:	f000 bc4a 	b.w	804acac <RegionAU915CalcBackOff>
        default:
        {
            break;
        }
    }
}
 804a418:	4770      	bx	lr

0804a41a <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 804a41a:	b410      	push	{r4}
    switch( region )
 804a41c:	2801      	cmp	r0, #1
{
 804a41e:	460c      	mov	r4, r1
 804a420:	4611      	mov	r1, r2
 804a422:	461a      	mov	r2, r3
 804a424:	9b01      	ldr	r3, [sp, #4]
    switch( region )
 804a426:	d104      	bne.n	804a432 <RegionNextChannel+0x18>
    {
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
 804a428:	4620      	mov	r0, r4
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
        }
    }
}
 804a42a:	f85d 4b04 	ldr.w	r4, [sp], #4
        AU915_NEXT_CHANNEL( );
 804a42e:	f000 bc5b 	b.w	804ace8 <RegionAU915NextChannel>
}
 804a432:	2009      	movs	r0, #9
 804a434:	f85d 4b04 	ldr.w	r4, [sp], #4
 804a438:	4770      	bx	lr

0804a43a <RegionApplyDrOffset>:
    }
}

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
    switch( region )
 804a43a:	2801      	cmp	r0, #1
{
 804a43c:	b410      	push	{r4}
 804a43e:	460c      	mov	r4, r1
 804a440:	4611      	mov	r1, r2
    switch( region )
 804a442:	d105      	bne.n	804a450 <RegionApplyDrOffset+0x16>
    {
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
 804a444:	4620      	mov	r0, r4
 804a446:	461a      	mov	r2, r3
        default:
        {
            return dr;
        }
    }
}
 804a448:	f85d 4b04 	ldr.w	r4, [sp], #4
        AU915_APPLY_DR_OFFSET( );
 804a44c:	f000 bcee 	b.w	804ae2c <RegionAU915ApplyDrOffset>
}
 804a450:	b2d0      	uxtb	r0, r2
 804a452:	f85d 4b04 	ldr.w	r4, [sp], #4
 804a456:	4770      	bx	lr

0804a458 <VerifyRfFreq>:
}

static bool VerifyRfFreq( uint32_t freq )
{
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 804a458:	4b0a      	ldr	r3, [pc, #40]	; (804a484 <VerifyRfFreq+0x2c>)
{
 804a45a:	b510      	push	{r4, lr}
    if( Radio.CheckRfFrequency( freq ) == false )
 804a45c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
{
 804a45e:	4604      	mov	r4, r0
    if( Radio.CheckRfFrequency( freq ) == false )
 804a460:	4798      	blx	r3
 804a462:	b170      	cbz	r0, 804a482 <VerifyRfFreq+0x2a>
    {
        return false;
    }

    // Rx frequencies
    if( ( freq < AU915_FIRST_RX1_CHANNEL ) ||
 804a464:	4b08      	ldr	r3, [pc, #32]	; (804a488 <VerifyRfFreq+0x30>)
 804a466:	4a09      	ldr	r2, [pc, #36]	; (804a48c <VerifyRfFreq+0x34>)
 804a468:	4423      	add	r3, r4
 804a46a:	4293      	cmp	r3, r2
        ( freq > AU915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) AU915_FIRST_RX1_CHANNEL ) % ( uint32_t ) AU915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 804a46c:	bf9f      	itttt	ls
 804a46e:	4a08      	ldrls	r2, [pc, #32]	; (804a490 <VerifyRfFreq+0x38>)
 804a470:	fbb3 f0f2 	udivls	r0, r3, r2
 804a474:	fb02 3010 	mlsls	r0, r2, r0, r3
        ( freq > AU915_LAST_RX1_CHANNEL ) ||
 804a478:	fab0 f080 	clzls	r0, r0
 804a47c:	bf94      	ite	ls
 804a47e:	0940      	lsrls	r0, r0, #5
        return false;
 804a480:	2000      	movhi	r0, #0
    if( ( freq < 915200000 ) ||  ( freq > 927800000 ) )
    {
        return false;
    }
    return true;
}
 804a482:	bd10      	pop	{r4, pc}
 804a484:	0804efb8 	.word	0x0804efb8
 804a488:	c8f78f60 	.word	0xc8f78f60
 804a48c:	00401640 	.word	0x00401640
 804a490:	000927c0 	.word	0x000927c0

0804a494 <RegionAU915GetPhyParam>:
    *delayTx = delayTransmission;
    return nbEnabledChannels;
}

PhyParam_t RegionAU915GetPhyParam( GetPhyParams_t* getPhy )
{
 804a494:	b507      	push	{r0, r1, r2, lr}
    PhyParam_t phyParam = { 0 };
 804a496:	2300      	movs	r3, #0
 804a498:	9300      	str	r3, [sp, #0]

    switch( getPhy->Attribute )
 804a49a:	7803      	ldrb	r3, [r0, #0]
 804a49c:	3b01      	subs	r3, #1
 804a49e:	2b34      	cmp	r3, #52	; 0x34
 804a4a0:	d832      	bhi.n	804a508 <RegionAU915GetPhyParam+0x74>
 804a4a2:	e8df f003 	tbb	[pc, r3]
 804a4a6:	1f1b      	.short	0x1f1b
 804a4a8:	21313131 	.word	0x21313131
 804a4ac:	31313131 	.word	0x31313131
 804a4b0:	4d43413f 	.word	0x4d43413f
 804a4b4:	5e5b5831 	.word	0x5e5b5831
 804a4b8:	6a676461 	.word	0x6a676461
 804a4bc:	751d7331 	.word	0x751d7331
 804a4c0:	7d7b7977 	.word	0x7d7b7977
 804a4c4:	24827f31 	.word	0x24827f31
 804a4c8:	31313131 	.word	0x31313131
 804a4cc:	31313131 	.word	0x31313131
 804a4d0:	31313131 	.word	0x31313131
 804a4d4:	1d843131 	.word	0x1d843131
 804a4d8:	1d8c      	.short	0x1d8c
 804a4da:	1d          	.byte	0x1d
 804a4db:	00          	.byte	0x00
    {
        case PHY_MIN_RX_DR:
        {
            if( getPhy->DownlinkDwellTime == 0)
 804a4dc:	78c3      	ldrb	r3, [r0, #3]
 804a4de:	b91b      	cbnz	r3, 804a4e8 <RegionAU915GetPhyParam+0x54>
            phyParam.Value = AU915_RX_WND_2_FREQ;
            break;
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = AU915_RX_WND_2_DR;
 804a4e0:	2308      	movs	r3, #8
 804a4e2:	e002      	b.n	804a4ea <RegionAU915GetPhyParam+0x56>
            if( getPhy->UplinkDwellTime == 0)
 804a4e4:	7883      	ldrb	r3, [r0, #2]
 804a4e6:	b17b      	cbz	r3, 804a508 <RegionAU915GetPhyParam+0x74>
            phyParam.Value = AU915_DEFAULT_DATARATE;
 804a4e8:	2302      	movs	r3, #2
            phyParam.Value = AU915_BEACON_CHANNEL_DR;
            break;
        }
        case PHY_BEACON_CHANNEL_STEPWIDTH:
        {
            phyParam.Value = AU915_BEACON_CHANNEL_STEPWIDTH;
 804a4ea:	9300      	str	r3, [sp, #0]
            break;
 804a4ec:	e00c      	b.n	804a508 <RegionAU915GetPhyParam+0x74>
            if( getPhy->UplinkDwellTime == 0)
 804a4ee:	7882      	ldrb	r2, [r0, #2]
 804a4f0:	f990 3001 	ldrsb.w	r3, [r0, #1]
 804a4f4:	b962      	cbnz	r2, 804a510 <RegionAU915GetPhyParam+0x7c>
    if( dr == minDr )
 804a4f6:	b12b      	cbz	r3, 804a504 <RegionAU915GetPhyParam+0x70>
    else if( dr == DR_8 )
 804a4f8:	2b08      	cmp	r3, #8
        nextLowerDr = dr - 1;
 804a4fa:	bf1a      	itte	ne
 804a4fc:	f103 33ff 	addne.w	r3, r3, #4294967295
 804a500:	b2da      	uxtbne	r2, r3
        nextLowerDr = DR_6;
 804a502:	2206      	moveq	r2, #6
                phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, AU915_TX_MIN_DATARATE );
 804a504:	b252      	sxtb	r2, r2
 804a506:	9200      	str	r2, [sp, #0]
            break;
        }
    }

    return phyParam;
}
 804a508:	9800      	ldr	r0, [sp, #0]
 804a50a:	b003      	add	sp, #12
 804a50c:	f85d fb04 	ldr.w	pc, [sp], #4
    if( dr == minDr )
 804a510:	2b02      	cmp	r3, #2
 804a512:	d005      	beq.n	804a520 <RegionAU915GetPhyParam+0x8c>
    else if( dr == DR_8 )
 804a514:	2b08      	cmp	r3, #8
        nextLowerDr = dr - 1;
 804a516:	bf1a      	itte	ne
 804a518:	f103 33ff 	addne.w	r3, r3, #4294967295
 804a51c:	b2db      	uxtbne	r3, r3
        nextLowerDr = DR_6;
 804a51e:	2306      	moveq	r3, #6
                phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, AU915_DWELL_LIMIT_DATARATE );
 804a520:	b25b      	sxtb	r3, r3
 804a522:	e7e2      	b.n	804a4ea <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_ADR_ACK_LIMIT;
 804a524:	2340      	movs	r3, #64	; 0x40
 804a526:	e7e0      	b.n	804a4ea <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_ADR_ACK_DELAY;
 804a528:	2320      	movs	r3, #32
 804a52a:	e7de      	b.n	804a4ea <RegionAU915GetPhyParam+0x56>
            if( getPhy->UplinkDwellTime == 0 )
 804a52c:	7881      	ldrb	r1, [r0, #2]
 804a52e:	f990 2001 	ldrsb.w	r2, [r0, #1]
 804a532:	4b24      	ldr	r3, [pc, #144]	; (804a5c4 <RegionAU915GetPhyParam+0x130>)
 804a534:	b909      	cbnz	r1, 804a53a <RegionAU915GetPhyParam+0xa6>
                phyParam.Value = MaxPayloadOfDatarateDwell0AU915[getPhy->Datarate];
 804a536:	5c9b      	ldrb	r3, [r3, r2]
 804a538:	e7d7      	b.n	804a4ea <RegionAU915GetPhyParam+0x56>
                phyParam.Value = MaxPayloadOfDatarateDwell1AU915[getPhy->Datarate];
 804a53a:	4413      	add	r3, r2
 804a53c:	7b9b      	ldrb	r3, [r3, #14]
 804a53e:	e7d4      	b.n	804a4ea <RegionAU915GetPhyParam+0x56>
 804a540:	f990 2001 	ldrsb.w	r2, [r0, #1]
 804a544:	4b1f      	ldr	r3, [pc, #124]	; (804a5c4 <RegionAU915GetPhyParam+0x130>)
            if( getPhy->UplinkDwellTime == 0)
 804a546:	7881      	ldrb	r1, [r0, #2]
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AU915[getPhy->Datarate];
 804a548:	4413      	add	r3, r2
            if( getPhy->UplinkDwellTime == 0)
 804a54a:	b909      	cbnz	r1, 804a550 <RegionAU915GetPhyParam+0xbc>
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AU915[getPhy->Datarate];
 804a54c:	7f1b      	ldrb	r3, [r3, #28]
 804a54e:	e7cc      	b.n	804a4ea <RegionAU915GetPhyParam+0x56>
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell1AU915[getPhy->Datarate];
 804a550:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 804a554:	e7c9      	b.n	804a4ea <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_MAX_RX_WINDOW;
 804a556:	f640 33b8 	movw	r3, #3000	; 0xbb8
 804a55a:	e7c6      	b.n	804a4ea <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_RECEIVE_DELAY1;
 804a55c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 804a560:	e7c3      	b.n	804a4ea <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_RECEIVE_DELAY2;
 804a562:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 804a566:	e7c0      	b.n	804a4ea <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_JOIN_ACCEPT_DELAY1;
 804a568:	f241 3388 	movw	r3, #5000	; 0x1388
 804a56c:	e7bd      	b.n	804a4ea <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_JOIN_ACCEPT_DELAY2;
 804a56e:	f241 7370 	movw	r3, #6000	; 0x1770
 804a572:	e7ba      	b.n	804a4ea <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_MAX_FCNT_GAP;
 804a574:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 804a578:	e7b7      	b.n	804a4ea <RegionAU915GetPhyParam+0x56>
            phyParam.Value = ( AU915_ACKTIMEOUT + randr( -AU915_ACK_TIMEOUT_RND, AU915_ACK_TIMEOUT_RND ) );
 804a57a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 804a57e:	4812      	ldr	r0, [pc, #72]	; (804a5c8 <RegionAU915GetPhyParam+0x134>)
 804a580:	f001 fa16 	bl	804b9b0 <randr>
 804a584:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 804a588:	9000      	str	r0, [sp, #0]
            break;
 804a58a:	e7bd      	b.n	804a508 <RegionAU915GetPhyParam+0x74>
            phyParam.Value = AU915_RX_WND_2_FREQ;
 804a58c:	4b0f      	ldr	r3, [pc, #60]	; (804a5cc <RegionAU915GetPhyParam+0x138>)
 804a58e:	e7ac      	b.n	804a4ea <RegionAU915GetPhyParam+0x56>
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 804a590:	4b0f      	ldr	r3, [pc, #60]	; (804a5d0 <RegionAU915GetPhyParam+0x13c>)
 804a592:	e7aa      	b.n	804a4ea <RegionAU915GetPhyParam+0x56>
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 804a594:	4b0f      	ldr	r3, [pc, #60]	; (804a5d4 <RegionAU915GetPhyParam+0x140>)
 804a596:	e7a8      	b.n	804a4ea <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_MAX_NB_CHANNELS;
 804a598:	2348      	movs	r3, #72	; 0x48
 804a59a:	e7a6      	b.n	804a4ea <RegionAU915GetPhyParam+0x56>
            phyParam.Channels = NvmCtx.Channels;
 804a59c:	4b0e      	ldr	r3, [pc, #56]	; (804a5d8 <RegionAU915GetPhyParam+0x144>)
 804a59e:	e7a4      	b.n	804a4ea <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_DEFAULT_UPLINK_DWELL_TIME;
 804a5a0:	2301      	movs	r3, #1
 804a5a2:	e7a2      	b.n	804a4ea <RegionAU915GetPhyParam+0x56>
            phyParam.fValue = AU915_DEFAULT_MAX_EIRP;
 804a5a4:	4b0d      	ldr	r3, [pc, #52]	; (804a5dc <RegionAU915GetPhyParam+0x148>)
            phyParam.fValue = AU915_DEFAULT_ANTENNA_GAIN;
 804a5a6:	9300      	str	r3, [sp, #0]
            break;
 804a5a8:	e7ae      	b.n	804a508 <RegionAU915GetPhyParam+0x74>
            phyParam.fValue = AU915_DEFAULT_ANTENNA_GAIN;
 804a5aa:	4b0d      	ldr	r3, [pc, #52]	; (804a5e0 <RegionAU915GetPhyParam+0x14c>)
 804a5ac:	e7fb      	b.n	804a5a6 <RegionAU915GetPhyParam+0x112>
            phyParam.BeaconFormat.BeaconSize = AU915_BEACON_SIZE;
 804a5ae:	f240 3313 	movw	r3, #787	; 0x313
 804a5b2:	f8ad 3000 	strh.w	r3, [sp]
            phyParam.BeaconFormat.Rfu1Size = AU915_RFU1_SIZE;
 804a5b6:	2301      	movs	r3, #1
 804a5b8:	f88d 3002 	strb.w	r3, [sp, #2]
            break;
 804a5bc:	e7a4      	b.n	804a508 <RegionAU915GetPhyParam+0x74>
            phyParam.Value = AU915_BEACON_CHANNEL_STEPWIDTH;
 804a5be:	4b09      	ldr	r3, [pc, #36]	; (804a5e4 <RegionAU915GetPhyParam+0x150>)
 804a5c0:	e793      	b.n	804a4ea <RegionAU915GetPhyParam+0x56>
 804a5c2:	bf00      	nop
 804a5c4:	0804f370 	.word	0x0804f370
 804a5c8:	fffffc18 	.word	0xfffffc18
 804a5cc:	370870a0 	.word	0x370870a0
 804a5d0:	2000ac60 	.word	0x2000ac60
 804a5d4:	2000ac78 	.word	0x2000ac78
 804a5d8:	2000a8f0 	.word	0x2000a8f0
 804a5dc:	41f00000 	.word	0x41f00000
 804a5e0:	3e19999a 	.word	0x3e19999a
 804a5e4:	000927c0 	.word	0x000927c0

0804a5e8 <RegionAU915SetBandTxDone>:

void RegionAU915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 804a5e8:	4906      	ldr	r1, [pc, #24]	; (804a604 <RegionAU915SetBandTxDone+0x1c>)
 804a5ea:	7803      	ldrb	r3, [r0, #0]
 804a5ec:	220c      	movs	r2, #12
 804a5ee:	fb02 1303 	mla	r3, r2, r3, r1
 804a5f2:	6842      	ldr	r2, [r0, #4]
 804a5f4:	7a5b      	ldrb	r3, [r3, #9]
 804a5f6:	7840      	ldrb	r0, [r0, #1]
 804a5f8:	3336      	adds	r3, #54	; 0x36
 804a5fa:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 804a5fe:	f000 bcbb 	b.w	804af78 <RegionCommonSetBandTxDone>
 804a602:	bf00      	nop
 804a604:	2000a8f0 	.word	0x2000a8f0

0804a608 <RegionAU915InitDefaults>:
}

void RegionAU915InitDefaults( InitDefaultsParams_t* params )
{
 804a608:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    Band_t bands[AU915_MAX_NB_BANDS] =
 804a60a:	2301      	movs	r3, #1
 804a60c:	f8ad 3000 	strh.w	r3, [sp]
    {
        AU915_BAND0
    };

    switch( params->Type )
 804a610:	7903      	ldrb	r3, [r0, #4]
    Band_t bands[AU915_MAX_NB_BANDS] =
 804a612:	2400      	movs	r4, #0
    switch( params->Type )
 804a614:	2b01      	cmp	r3, #1
    Band_t bands[AU915_MAX_NB_BANDS] =
 804a616:	f88d 4002 	strb.w	r4, [sp, #2]
 804a61a:	e9cd 4401 	strd	r4, r4, [sp, #4]
 804a61e:	9403      	str	r4, [sp, #12]
    switch( params->Type )
 804a620:	d049      	beq.n	804a6b6 <RegionAU915InitDefaults+0xae>
 804a622:	d303      	bcc.n	804a62c <RegionAU915InitDefaults+0x24>
 804a624:	2b02      	cmp	r3, #2
 804a626:	d03d      	beq.n	804a6a4 <RegionAU915InitDefaults+0x9c>
        default:
        {
            break;
        }
    }
}
 804a628:	b004      	add	sp, #16
 804a62a:	bd70      	pop	{r4, r5, r6, pc}
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * AU915_MAX_NB_BANDS );
 804a62c:	2210      	movs	r2, #16
 804a62e:	4669      	mov	r1, sp
 804a630:	482a      	ldr	r0, [pc, #168]	; (804a6dc <RegionAU915InitDefaults+0xd4>)
            for( uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++ )
 804a632:	4d2b      	ldr	r5, [pc, #172]	; (804a6e0 <RegionAU915InitDefaults+0xd8>)
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * AU915_MAX_NB_BANDS );
 804a634:	f001 f9c9 	bl	804b9ca <memcpy1>
 804a638:	4b2a      	ldr	r3, [pc, #168]	; (804a6e4 <RegionAU915InitDefaults+0xdc>)
 804a63a:	4a2b      	ldr	r2, [pc, #172]	; (804a6e8 <RegionAU915InitDefaults+0xe0>)
 804a63c:	4619      	mov	r1, r3
 804a63e:	4618      	mov	r0, r3
                NvmCtx.Channels[i].DrRange.Value = ( DR_5 << 4 ) | DR_0;
 804a640:	2650      	movs	r6, #80	; 0x50
                NvmCtx.Channels[i].Frequency = 915200000 + i * 200000;
 804a642:	600a      	str	r2, [r1, #0]
 804a644:	f502 3243 	add.w	r2, r2, #199680	; 0x30c00
 804a648:	f502 72a0 	add.w	r2, r2, #320	; 0x140
            for( uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++ )
 804a64c:	42aa      	cmp	r2, r5
                NvmCtx.Channels[i].DrRange.Value = ( DR_5 << 4 ) | DR_0;
 804a64e:	720e      	strb	r6, [r1, #8]
                NvmCtx.Channels[i].Band = 0;
 804a650:	724c      	strb	r4, [r1, #9]
 804a652:	f101 010c 	add.w	r1, r1, #12
            for( uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++ )
 804a656:	d1f4      	bne.n	804a642 <RegionAU915InitDefaults+0x3a>
 804a658:	4a24      	ldr	r2, [pc, #144]	; (804a6ec <RegionAU915InitDefaults+0xe4>)
            for( uint8_t i = AU915_MAX_NB_CHANNELS - 8; i < AU915_MAX_NB_CHANNELS; i++ )
 804a65a:	4c25      	ldr	r4, [pc, #148]	; (804a6f0 <RegionAU915InitDefaults+0xe8>)
                NvmCtx.Channels[i].DrRange.Value = ( DR_6 << 4 ) | DR_6;
 804a65c:	2566      	movs	r5, #102	; 0x66
                NvmCtx.Channels[i].Band = 0;
 804a65e:	2100      	movs	r1, #0
                NvmCtx.Channels[i].Frequency = 915900000 + ( i - ( AU915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 804a660:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
 804a664:	f502 12c3 	add.w	r2, r2, #1597440	; 0x186000
 804a668:	f502 6220 	add.w	r2, r2, #2560	; 0xa00
            for( uint8_t i = AU915_MAX_NB_CHANNELS - 8; i < AU915_MAX_NB_CHANNELS; i++ )
 804a66c:	42a2      	cmp	r2, r4
                NvmCtx.Channels[i].DrRange.Value = ( DR_6 << 4 ) | DR_6;
 804a66e:	f883 5308 	strb.w	r5, [r3, #776]	; 0x308
                NvmCtx.Channels[i].Band = 0;
 804a672:	f883 1309 	strb.w	r1, [r3, #777]	; 0x309
 804a676:	f103 030c 	add.w	r3, r3, #12
            for( uint8_t i = AU915_MAX_NB_CHANNELS - 8; i < AU915_MAX_NB_CHANNELS; i++ )
 804a67a:	d1f1      	bne.n	804a660 <RegionAU915InitDefaults+0x58>
            NvmCtx.ChannelsDefaultMask[1] = 0x0000;
 804a67c:	f8c0 138c 	str.w	r1, [r0, #908]	; 0x38c
            NvmCtx.ChannelsDefaultMask[3] = 0x0000;
 804a680:	f8c0 1390 	str.w	r1, [r0, #912]	; 0x390
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 6 );
 804a684:	491b      	ldr	r1, [pc, #108]	; (804a6f4 <RegionAU915InitDefaults+0xec>)
            NvmCtx.ChannelsDefaultMask[0] = 0x0001;
 804a686:	2301      	movs	r3, #1
 804a688:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 6 );
 804a68c:	2206      	movs	r2, #6
 804a68e:	f1a1 0018 	sub.w	r0, r1, #24
 804a692:	f000 fc62 	bl	804af5a <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMaskRemaining, NvmCtx.ChannelsMask, 6 );
 804a696:	4918      	ldr	r1, [pc, #96]	; (804a6f8 <RegionAU915InitDefaults+0xf0>)
 804a698:	2206      	movs	r2, #6
 804a69a:	f101 000c 	add.w	r0, r1, #12
 804a69e:	f000 fc5c 	bl	804af5a <RegionCommonChanMaskCopy>
            break;
 804a6a2:	e7c1      	b.n	804a628 <RegionAU915InitDefaults+0x20>
            if( params->NvmCtx != 0 )
 804a6a4:	6801      	ldr	r1, [r0, #0]
 804a6a6:	2900      	cmp	r1, #0
 804a6a8:	d0be      	beq.n	804a628 <RegionAU915InitDefaults+0x20>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 804a6aa:	f44f 7265 	mov.w	r2, #916	; 0x394
 804a6ae:	480d      	ldr	r0, [pc, #52]	; (804a6e4 <RegionAU915InitDefaults+0xdc>)
 804a6b0:	f001 f98b 	bl	804b9ca <memcpy1>
 804a6b4:	e7b8      	b.n	804a628 <RegionAU915InitDefaults+0x20>
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 6 );
 804a6b6:	490f      	ldr	r1, [pc, #60]	; (804a6f4 <RegionAU915InitDefaults+0xec>)
 804a6b8:	2206      	movs	r2, #6
 804a6ba:	f1a1 0018 	sub.w	r0, r1, #24
 804a6be:	f000 fc4c 	bl	804af5a <RegionCommonChanMaskCopy>
 804a6c2:	4b0e      	ldr	r3, [pc, #56]	; (804a6fc <RegionAU915InitDefaults+0xf4>)
 804a6c4:	f103 010c 	add.w	r1, r3, #12
                NvmCtx.ChannelsMaskRemaining[i] &= NvmCtx.ChannelsMask[i];
 804a6c8:	881a      	ldrh	r2, [r3, #0]
 804a6ca:	f833 0c0c 	ldrh.w	r0, [r3, #-12]
 804a6ce:	4002      	ands	r2, r0
 804a6d0:	f823 2b02 	strh.w	r2, [r3], #2
            for( uint8_t i = 0; i < 6; i++ )
 804a6d4:	428b      	cmp	r3, r1
 804a6d6:	d1f7      	bne.n	804a6c8 <RegionAU915InitDefaults+0xc0>
 804a6d8:	e7a6      	b.n	804a628 <RegionAU915InitDefaults+0x20>
 804a6da:	bf00      	nop
 804a6dc:	2000ac50 	.word	0x2000ac50
 804a6e0:	37502800 	.word	0x37502800
 804a6e4:	2000a8f0 	.word	0x2000a8f0
 804a6e8:	368cd800 	.word	0x368cd800
 804a6ec:	36978660 	.word	0x36978660
 804a6f0:	375ad660 	.word	0x375ad660
 804a6f4:	2000ac78 	.word	0x2000ac78
 804a6f8:	2000ac60 	.word	0x2000ac60
 804a6fc:	2000ac6c 	.word	0x2000ac6c

0804a700 <RegionAU915GetNvmCtx>:

void* RegionAU915GetNvmCtx( GetNvmCtxParams_t* params )
{
    params->nvmCtxSize = sizeof( RegionAU915NvmCtx_t );
 804a700:	f44f 7365 	mov.w	r3, #916	; 0x394
 804a704:	6003      	str	r3, [r0, #0]
    return &NvmCtx;
}
 804a706:	4801      	ldr	r0, [pc, #4]	; (804a70c <RegionAU915GetNvmCtx+0xc>)
 804a708:	4770      	bx	lr
 804a70a:	bf00      	nop
 804a70c:	2000a8f0 	.word	0x2000a8f0

0804a710 <RegionAU915Verify>:

bool RegionAU915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 804a710:	b508      	push	{r3, lr}
 804a712:	4603      	mov	r3, r0
    switch( phyAttribute )
 804a714:	290a      	cmp	r1, #10
 804a716:	d825      	bhi.n	804a764 <RegionAU915Verify+0x54>
 804a718:	e8df f001 	tbb	[pc, r1]
 804a71c:	24242406 	.word	0x24242406
 804a720:	160b0b24 	.word	0x160b0b24
 804a724:	1f24      	.short	0x1f24
 804a726:	1f          	.byte	0x1f
 804a727:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 804a728:	6800      	ldr	r0, [r0, #0]
            return AU915_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
    }
}
 804a72a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return VerifyRfFreq( verify->Frequency );
 804a72e:	f7ff be93 	b.w	804a458 <VerifyRfFreq>
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 804a732:	7899      	ldrb	r1, [r3, #2]
 804a734:	f990 0000 	ldrsb.w	r0, [r0]
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_TX_MIN_DATARATE, AU915_TX_MAX_DATARATE );
 804a738:	220d      	movs	r2, #13
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 804a73a:	b961      	cbnz	r1, 804a756 <RegionAU915Verify+0x46>
            return RegionCommonValueInRange( verify->TxPower, AU915_MAX_TX_POWER, AU915_MIN_TX_POWER );
 804a73c:	f000 fbcd 	bl	804aeda <RegionCommonValueInRange>
 804a740:	3000      	adds	r0, #0
 804a742:	bf18      	it	ne
 804a744:	2001      	movne	r0, #1
}
 804a746:	bd08      	pop	{r3, pc}
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 804a748:	789b      	ldrb	r3, [r3, #2]
 804a74a:	f990 0000 	ldrsb.w	r0, [r0]
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE );
 804a74e:	220d      	movs	r2, #13
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 804a750:	b90b      	cbnz	r3, 804a756 <RegionAU915Verify+0x46>
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE );
 804a752:	2108      	movs	r1, #8
 804a754:	e7f2      	b.n	804a73c <RegionAU915Verify+0x2c>
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_DWELL_LIMIT_DATARATE, AU915_RX_MAX_DATARATE );
 804a756:	2102      	movs	r1, #2
 804a758:	e7f0      	b.n	804a73c <RegionAU915Verify+0x2c>
            return RegionCommonValueInRange( verify->TxPower, AU915_MAX_TX_POWER, AU915_MIN_TX_POWER );
 804a75a:	220e      	movs	r2, #14
 804a75c:	2100      	movs	r1, #0
 804a75e:	f990 0000 	ldrsb.w	r0, [r0]
 804a762:	e7eb      	b.n	804a73c <RegionAU915Verify+0x2c>
            return AU915_DUTY_CYCLE_ENABLED;
 804a764:	2000      	movs	r0, #0
 804a766:	e7ee      	b.n	804a746 <RegionAU915Verify+0x36>

0804a768 <RegionAU915ApplyCFList>:

void RegionAU915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 804a768:	b530      	push	{r4, r5, lr}
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 804a76a:	7903      	ldrb	r3, [r0, #4]
 804a76c:	2b10      	cmp	r3, #16
 804a76e:	d11d      	bne.n	804a7ac <RegionAU915ApplyCFList+0x44>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 804a770:	6800      	ldr	r0, [r0, #0]
 804a772:	7bc3      	ldrb	r3, [r0, #15]
 804a774:	2b01      	cmp	r3, #1
 804a776:	d119      	bne.n	804a7ac <RegionAU915ApplyCFList+0x44>
 804a778:	4b0d      	ldr	r3, [pc, #52]	; (804a7b0 <RegionAU915ApplyCFList+0x48>)
 804a77a:	2100      	movs	r1, #0
    {
        NvmCtx.ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
        NvmCtx.ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
        if( chMaskItr == 4 )
        {
            NvmCtx.ChannelsMask[chMaskItr] = NvmCtx.ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 804a77c:	f2a3 356e 	subw	r5, r3, #878	; 0x36e
        NvmCtx.ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 804a780:	f810 2011 	ldrb.w	r2, [r0, r1, lsl #1]
 804a784:	805a      	strh	r2, [r3, #2]
        NvmCtx.ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 804a786:	eb00 0441 	add.w	r4, r0, r1, lsl #1
        if( chMaskItr == 4 )
 804a78a:	2904      	cmp	r1, #4
        NvmCtx.ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 804a78c:	7864      	ldrb	r4, [r4, #1]
 804a78e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 804a792:	f823 2f02 	strh.w	r2, [r3, #2]!
            NvmCtx.ChannelsMask[chMaskItr] = NvmCtx.ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 804a796:	bf04      	itt	eq
 804a798:	b2d2      	uxtbeq	r2, r2
 804a79a:	f8a5 2378 	strheq.w	r2, [r5, #888]	; 0x378
        }
        // Set the channel mask to the remaining
        NvmCtx.ChannelsMaskRemaining[chMaskItr] &= NvmCtx.ChannelsMask[chMaskItr];
 804a79e:	899a      	ldrh	r2, [r3, #12]
 804a7a0:	881c      	ldrh	r4, [r3, #0]
 804a7a2:	3101      	adds	r1, #1
 804a7a4:	4022      	ands	r2, r4
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 804a7a6:	2905      	cmp	r1, #5
        NvmCtx.ChannelsMaskRemaining[chMaskItr] &= NvmCtx.ChannelsMask[chMaskItr];
 804a7a8:	819a      	strh	r2, [r3, #12]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 804a7aa:	d1e9      	bne.n	804a780 <RegionAU915ApplyCFList+0x18>
    }
}
 804a7ac:	bd30      	pop	{r4, r5, pc}
 804a7ae:	bf00      	nop
 804a7b0:	2000ac5e 	.word	0x2000ac5e

0804a7b4 <RegionAU915ChanMaskSet>:

bool RegionAU915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 804a7b4:	b538      	push	{r3, r4, r5, lr}
    switch( chanMaskSet->ChannelsMaskType )
 804a7b6:	7904      	ldrb	r4, [r0, #4]
 804a7b8:	b11c      	cbz	r4, 804a7c2 <RegionAU915ChanMaskSet+0xe>
 804a7ba:	2c01      	cmp	r4, #1
 804a7bc:	d01c      	beq.n	804a7f8 <RegionAU915ChanMaskSet+0x44>
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 6 );
            break;
        }
        default:
            return false;
 804a7be:	2000      	movs	r0, #0
 804a7c0:	e019      	b.n	804a7f6 <RegionAU915ChanMaskSet+0x42>
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, chanMaskSet->ChannelsMaskIn, 6 );
 804a7c2:	4d10      	ldr	r5, [pc, #64]	; (804a804 <RegionAU915ChanMaskSet+0x50>)
 804a7c4:	6801      	ldr	r1, [r0, #0]
 804a7c6:	2206      	movs	r2, #6
 804a7c8:	f505 705c 	add.w	r0, r5, #880	; 0x370
 804a7cc:	f000 fbc5 	bl	804af5a <RegionCommonChanMaskCopy>
            NvmCtx.ChannelsDefaultMask[4] = NvmCtx.ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 804a7d0:	f895 3390 	ldrb.w	r3, [r5, #912]	; 0x390
 804a7d4:	f8a5 3390 	strh.w	r3, [r5, #912]	; 0x390
            NvmCtx.ChannelsDefaultMask[5] = 0x0000;
 804a7d8:	f8a5 4392 	strh.w	r4, [r5, #914]	; 0x392
 804a7dc:	f505 735f 	add.w	r3, r5, #892	; 0x37c
 804a7e0:	f505 7562 	add.w	r5, r5, #904	; 0x388
                NvmCtx.ChannelsMaskRemaining[i] &= NvmCtx.ChannelsMask[i];
 804a7e4:	881a      	ldrh	r2, [r3, #0]
 804a7e6:	f833 1c0c 	ldrh.w	r1, [r3, #-12]
 804a7ea:	400a      	ands	r2, r1
 804a7ec:	f823 2b02 	strh.w	r2, [r3], #2
            for( uint8_t i = 0; i < 6; i++ )
 804a7f0:	42ab      	cmp	r3, r5
 804a7f2:	d1f7      	bne.n	804a7e4 <RegionAU915ChanMaskSet+0x30>
    }
    return true;
 804a7f4:	2001      	movs	r0, #1
}
 804a7f6:	bd38      	pop	{r3, r4, r5, pc}
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 6 );
 804a7f8:	6801      	ldr	r1, [r0, #0]
 804a7fa:	4803      	ldr	r0, [pc, #12]	; (804a808 <RegionAU915ChanMaskSet+0x54>)
 804a7fc:	2206      	movs	r2, #6
 804a7fe:	f000 fbac 	bl	804af5a <RegionCommonChanMaskCopy>
 804a802:	e7f7      	b.n	804a7f4 <RegionAU915ChanMaskSet+0x40>
 804a804:	2000a8f0 	.word	0x2000a8f0
 804a808:	2000ac78 	.word	0x2000ac78

0804a80c <RegionAU915ComputeRxWindowParameters>:

void RegionAU915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 804a80c:	b5f0      	push	{r4, r5, r6, r7, lr}
    double tSymbol = 0.0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, AU915_RX_MAX_DATARATE );
 804a80e:	280d      	cmp	r0, #13
 804a810:	bfa8      	it	ge
 804a812:	200d      	movge	r0, #13
{
 804a814:	4616      	mov	r6, r2
    switch( BandwidthsAU915[drIndex] )
 804a816:	4a1a      	ldr	r2, [pc, #104]	; (804a880 <RegionAU915ComputeRxWindowParameters+0x74>)
 804a818:	4f1a      	ldr	r7, [pc, #104]	; (804a884 <RegionAU915ComputeRxWindowParameters+0x78>)
{
 804a81a:	ed2d 8b02 	vpush	{d8}
 804a81e:	461c      	mov	r4, r3
    rxConfigParams->Datarate = MIN( datarate, AU915_RX_MAX_DATARATE );
 804a820:	7058      	strb	r0, [r3, #1]
    switch( BandwidthsAU915[drIndex] )
 804a822:	0083      	lsls	r3, r0, #2
{
 804a824:	460d      	mov	r5, r1
    switch( BandwidthsAU915[drIndex] )
 804a826:	18d1      	adds	r1, r2, r3
{
 804a828:	b083      	sub	sp, #12
    switch( BandwidthsAU915[drIndex] )
 804a82a:	6b89      	ldr	r1, [r1, #56]	; 0x38
 804a82c:	42b9      	cmp	r1, r7
 804a82e:	d025      	beq.n	804a87c <RegionAU915ComputeRxWindowParameters+0x70>
            return 0;
 804a830:	4f15      	ldr	r7, [pc, #84]	; (804a888 <RegionAU915ComputeRxWindowParameters+0x7c>)
 804a832:	42b9      	cmp	r1, r7
 804a834:	bf0c      	ite	eq
 804a836:	2102      	moveq	r1, #2
 804a838:	2100      	movne	r1, #0
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );

    tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesAU915[rxConfigParams->Datarate], BandwidthsAU915[rxConfigParams->Datarate] );
 804a83a:	4413      	add	r3, r2
 804a83c:	4402      	add	r2, r0
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 804a83e:	70a1      	strb	r1, [r4, #2]
    tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesAU915[rxConfigParams->Datarate], BandwidthsAU915[rxConfigParams->Datarate] );
 804a840:	f892 0078 	ldrb.w	r0, [r2, #120]	; 0x78
 804a844:	6b99      	ldr	r1, [r3, #56]	; 0x38
 804a846:	f000 fc2d 	bl	804b0a4 <RegionCommonComputeSymbolTimeLoRa>

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 804a84a:	4b10      	ldr	r3, [pc, #64]	; (804a88c <RegionAU915ComputeRxWindowParameters+0x80>)
    tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesAU915[rxConfigParams->Datarate], BandwidthsAU915[rxConfigParams->Datarate] );
 804a84c:	eeb0 8a40 	vmov.f32	s16, s0
 804a850:	eef0 8a60 	vmov.f32	s17, s1
    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 804a854:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 804a856:	4798      	blx	r3
 804a858:	eeb0 0a48 	vmov.f32	s0, s16
 804a85c:	eef0 0a68 	vmov.f32	s1, s17
 804a860:	f104 030c 	add.w	r3, r4, #12
 804a864:	9300      	str	r3, [sp, #0]
 804a866:	4602      	mov	r2, r0
 804a868:	f104 0308 	add.w	r3, r4, #8
 804a86c:	4631      	mov	r1, r6
 804a86e:	4628      	mov	r0, r5
 804a870:	f000 fc34 	bl	804b0dc <RegionCommonComputeRxWindowParameters>
}
 804a874:	b003      	add	sp, #12
 804a876:	ecbd 8b02 	vpop	{d8}
 804a87a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return 1;
 804a87c:	2101      	movs	r1, #1
 804a87e:	e7dc      	b.n	804a83a <RegionAU915ComputeRxWindowParameters+0x2e>
 804a880:	0804f370 	.word	0x0804f370
 804a884:	0003d090 	.word	0x0003d090
 804a888:	0007a120 	.word	0x0007a120
 804a88c:	0804efb8 	.word	0x0804efb8

0804a890 <RegionAU915RxConfig>:

bool RegionAU915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 804a890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int8_t dr = rxConfig->Datarate;
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;

    if( Radio.GetStatus( ) != RF_IDLE )
 804a894:	4e26      	ldr	r6, [pc, #152]	; (804a930 <RegionAU915RxConfig+0xa0>)
    int8_t dr = rxConfig->Datarate;
 804a896:	f990 8001 	ldrsb.w	r8, [r0, #1]
    if( Radio.GetStatus( ) != RF_IDLE )
 804a89a:	68f3      	ldr	r3, [r6, #12]
    uint32_t frequency = rxConfig->Frequency;
 804a89c:	6845      	ldr	r5, [r0, #4]
{
 804a89e:	b08d      	sub	sp, #52	; 0x34
 804a8a0:	4604      	mov	r4, r0
 804a8a2:	468b      	mov	fp, r1
    if( Radio.GetStatus( ) != RF_IDLE )
 804a8a4:	4798      	blx	r3
 804a8a6:	2800      	cmp	r0, #0
 804a8a8:	d140      	bne.n	804a92c <RegionAU915RxConfig+0x9c>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 804a8aa:	7ce3      	ldrb	r3, [r4, #19]
 804a8ac:	b933      	cbnz	r3, 804a8bc <RegionAU915RxConfig+0x2c>
    {
        // Apply window 1 frequency
        frequency = AU915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * AU915_STEPWIDTH_RX1_CHANNEL;
 804a8ae:	7825      	ldrb	r5, [r4, #0]
 804a8b0:	4a20      	ldr	r2, [pc, #128]	; (804a934 <RegionAU915RxConfig+0xa4>)
 804a8b2:	4b21      	ldr	r3, [pc, #132]	; (804a938 <RegionAU915RxConfig+0xa8>)
 804a8b4:	f005 0507 	and.w	r5, r5, #7
 804a8b8:	fb02 3505 	mla	r5, r2, r5, r3
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesAU915[dr];
 804a8bc:	f8df 9080 	ldr.w	r9, [pc, #128]	; 804a940 <RegionAU915RxConfig+0xb0>

    Radio.SetChannel( frequency );
 804a8c0:	6973      	ldr	r3, [r6, #20]
    phyDr = DataratesAU915[dr];
 804a8c2:	eb09 0a08 	add.w	sl, r9, r8
    Radio.SetChannel( frequency );
 804a8c6:	4628      	mov	r0, r5
    phyDr = DataratesAU915[dr];
 804a8c8:	f99a 2078 	ldrsb.w	r2, [sl, #120]	; 0x78
 804a8cc:	920b      	str	r2, [sp, #44]	; 0x2c
    Radio.SetChannel( frequency );
 804a8ce:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 804a8d0:	7ca3      	ldrb	r3, [r4, #18]
 804a8d2:	8927      	ldrh	r7, [r4, #8]
 804a8d4:	9309      	str	r3, [sp, #36]	; 0x24
 804a8d6:	2000      	movs	r0, #0
 804a8d8:	2301      	movs	r3, #1
 804a8da:	9702      	str	r7, [sp, #8]
 804a8dc:	2708      	movs	r7, #8
 804a8de:	e9cd 0307 	strd	r0, r3, [sp, #28]
 804a8e2:	e9cd 0700 	strd	r0, r7, [sp]
 804a8e6:	e9cd 0005 	strd	r0, r0, [sp, #20]
 804a8ea:	e9cd 0003 	strd	r0, r0, [sp, #12]
 804a8ee:	78a1      	ldrb	r1, [r4, #2]
 804a8f0:	6a37      	ldr	r7, [r6, #32]
 804a8f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 804a8f4:	4618      	mov	r0, r3
 804a8f6:	47b8      	blx	r7

    if( rxConfig->RepeaterSupport == true )
 804a8f8:	7c63      	ldrb	r3, [r4, #17]
 804a8fa:	b1a3      	cbz	r3, 804a926 <RegionAU915RxConfig+0x96>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterDwell0AU915[dr];
 804a8fc:	f89a 101c 	ldrb.w	r1, [sl, #28]
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateDwell0AU915[dr];
    }
    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
 804a900:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 804a902:	310d      	adds	r1, #13
 804a904:	b2c9      	uxtb	r1, r1
 804a906:	2001      	movs	r0, #1
 804a908:	4798      	blx	r3
    //TVL1( PRINTF( "RX on freq %d Hz at DR %d\n\r", frequency, dr );)
    PRINTF( "RX on freq %d Hz at DR %d band %d channel %d \n\r", frequency, dr, rxConfig->Bandwidth, rxConfig->Channel );
 804a90a:	7822      	ldrb	r2, [r4, #0]
 804a90c:	9200      	str	r2, [sp, #0]
 804a90e:	78a3      	ldrb	r3, [r4, #2]
 804a910:	480a      	ldr	r0, [pc, #40]	; (804a93c <RegionAU915RxConfig+0xac>)
 804a912:	4642      	mov	r2, r8
 804a914:	4629      	mov	r1, r5
 804a916:	f000 fff9 	bl	804b90c <TraceSend>
    *datarate = (uint8_t) dr;
 804a91a:	f88b 8000 	strb.w	r8, [fp]
    return true;
 804a91e:	2001      	movs	r0, #1
}
 804a920:	b00d      	add	sp, #52	; 0x34
 804a922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        maxPayload = MaxPayloadOfDatarateDwell0AU915[dr];
 804a926:	f819 1008 	ldrb.w	r1, [r9, r8]
 804a92a:	e7e9      	b.n	804a900 <RegionAU915RxConfig+0x70>
        return false;
 804a92c:	2000      	movs	r0, #0
 804a92e:	e7f7      	b.n	804a920 <RegionAU915RxConfig+0x90>
 804a930:	0804efb8 	.word	0x0804efb8
 804a934:	000927c0 	.word	0x000927c0
 804a938:	370870a0 	.word	0x370870a0
 804a93c:	0804f6c8 	.word	0x0804f6c8
 804a940:	0804f370 	.word	0x0804f370

0804a944 <RegionAU915TxConfig>:

bool RegionAU915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 804a944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804a948:	b08f      	sub	sp, #60	; 0x3c
 804a94a:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
    int8_t phyDr = DataratesAU915[txConfig->Datarate];
 804a94e:	4b35      	ldr	r3, [pc, #212]	; (804aa24 <RegionAU915TxConfig+0xe0>)
 804a950:	f990 1001 	ldrsb.w	r1, [r0, #1]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 804a954:	4e34      	ldr	r6, [pc, #208]	; (804aa28 <RegionAU915TxConfig+0xe4>)
    int8_t phyDr = DataratesAU915[txConfig->Datarate];
 804a956:	185a      	adds	r2, r3, r1
{
 804a958:	4604      	mov	r4, r0
    int8_t phyDr = DataratesAU915[txConfig->Datarate];
 804a95a:	f992 7078 	ldrsb.w	r7, [r2, #120]	; 0x78
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 804a95e:	7802      	ldrb	r2, [r0, #0]
 804a960:	200c      	movs	r0, #12
 804a962:	fb00 6202 	mla	r2, r0, r2, r6
    switch( BandwidthsAU915[drIndex] )
 804a966:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 804a96a:	7a52      	ldrb	r2, [r2, #9]
    switch( BandwidthsAU915[drIndex] )
 804a96c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 804a96e:	eb06 1202 	add.w	r2, r6, r2, lsl #4
    txPowerResult =  MAX( txPower, maxBandTxPower );
 804a972:	f992 9362 	ldrsb.w	r9, [r2, #866]	; 0x362
 804a976:	f994 2002 	ldrsb.w	r2, [r4, #2]
 804a97a:	4591      	cmp	r9, r2
 804a97c:	bfb8      	it	lt
 804a97e:	4691      	movlt	r9, r2
    switch( BandwidthsAU915[drIndex] )
 804a980:	4a2a      	ldr	r2, [pc, #168]	; (804aa2c <RegionAU915TxConfig+0xe8>)
 804a982:	4293      	cmp	r3, r2
 804a984:	d04b      	beq.n	804aa1e <RegionAU915TxConfig+0xda>
            return 0;
 804a986:	4a2a      	ldr	r2, [pc, #168]	; (804aa30 <RegionAU915TxConfig+0xec>)
 804a988:	4293      	cmp	r3, r2
 804a98a:	bf0c      	ite	eq
 804a98c:	f04f 0802 	moveq.w	r8, #2
 804a990:	f04f 0800 	movne.w	r8, #0
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 804a994:	edd4 0a02 	vldr	s1, [r4, #8]
 804a998:	ed94 0a01 	vldr	s0, [r4, #4]
    //PRINTF( "TX power %d, txPowerLimited %d, txConfig->MaxEirp %d, txConfig->AntennaGain %d \n\r", phyTxPower, txPowerLimited, (int8_t)(txConfig->MaxEirp*100), (int8_t)(txConfig->AntennaGain*100));
    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 804a99c:	f8df a098 	ldr.w	sl, [pc, #152]	; 804aa38 <RegionAU915TxConfig+0xf4>
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 804a9a0:	4648      	mov	r0, r9
 804a9a2:	f000 fbfd 	bl	804b1a0 <RegionCommonComputeTxPower>
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 804a9a6:	7822      	ldrb	r2, [r4, #0]
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 804a9a8:	900d      	str	r0, [sp, #52]	; 0x34
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 804a9aa:	f04f 0b0c 	mov.w	fp, #12
 804a9ae:	fb0b f202 	mul.w	r2, fp, r2
 804a9b2:	f8da 3014 	ldr.w	r3, [sl, #20]
 804a9b6:	58b0      	ldr	r0, [r6, r2]
 804a9b8:	4798      	blx	r3

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 804a9ba:	2200      	movs	r2, #0
 804a9bc:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 804a9c0:	2501      	movs	r5, #1
 804a9c2:	e9cd 2307 	strd	r2, r3, [sp, #28]
 804a9c6:	2308      	movs	r3, #8
 804a9c8:	e9cd 2205 	strd	r2, r2, [sp, #20]
 804a9cc:	e9cd 2503 	strd	r2, r5, [sp, #12]
 804a9d0:	e9cd 5301 	strd	r5, r3, [sp, #4]
 804a9d4:	9700      	str	r7, [sp, #0]
 804a9d6:	4643      	mov	r3, r8
 804a9d8:	990d      	ldr	r1, [sp, #52]	; 0x34
 804a9da:	f8da 7024 	ldr.w	r7, [sl, #36]	; 0x24
 804a9de:	4628      	mov	r0, r5
 804a9e0:	47b8      	blx	r7
    PRINTF( "TX on freq %d Hz at DR %d BW %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate, bandwidth );
 804a9e2:	7823      	ldrb	r3, [r4, #0]
 804a9e4:	f994 2001 	ldrsb.w	r2, [r4, #1]
 804a9e8:	4812      	ldr	r0, [pc, #72]	; (804aa34 <RegionAU915TxConfig+0xf0>)
 804a9ea:	fb0b fb03 	mul.w	fp, fp, r3
 804a9ee:	4643      	mov	r3, r8
 804a9f0:	f856 100b 	ldr.w	r1, [r6, fp]
 804a9f4:	f000 ff8a 	bl	804b90c <TraceSend>
    //TVL1( PRINTF( "TX on freq %d Hz at DR %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate );)

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 804a9f8:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
 804a9fc:	7b21      	ldrb	r1, [r4, #12]
 804a9fe:	4628      	mov	r0, r5
 804aa00:	4798      	blx	r3

    *txTimeOnAir = Radio.TimeOnAir( MODEM_LORA, txConfig->PktLen );
 804aa02:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
 804aa06:	7b21      	ldrb	r1, [r4, #12]
 804aa08:	4628      	mov	r0, r5
 804aa0a:	4798      	blx	r3
 804aa0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 804aa0e:	6018      	str	r0, [r3, #0]
    *txPower = txPowerLimited;
 804aa10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

    return true;
}
 804aa12:	4628      	mov	r0, r5
    *txPower = txPowerLimited;
 804aa14:	f883 9000 	strb.w	r9, [r3]
}
 804aa18:	b00f      	add	sp, #60	; 0x3c
 804aa1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return 1;
 804aa1e:	f04f 0801 	mov.w	r8, #1
 804aa22:	e7b7      	b.n	804a994 <RegionAU915TxConfig+0x50>
 804aa24:	0804f370 	.word	0x0804f370
 804aa28:	2000a8f0 	.word	0x2000a8f0
 804aa2c:	0003d090 	.word	0x0003d090
 804aa30:	0007a120 	.word	0x0007a120
 804aa34:	0804f6f8 	.word	0x0804f6f8
 804aa38:	0804efb8 	.word	0x0804efb8

0804aa3c <RegionAU915LinkAdrReq>:

uint8_t RegionAU915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 804aa3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804aa40:	b093      	sub	sp, #76	; 0x4c
    uint8_t status = 0x07;
    RegionCommonLinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 804aa42:	ae07      	add	r6, sp, #28
 804aa44:	2400      	movs	r4, #0
{
 804aa46:	4605      	mov	r5, r0
 804aa48:	4689      	mov	r9, r1
 804aa4a:	4690      	mov	r8, r2
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, NvmCtx.ChannelsMask, 6 );
 804aa4c:	497f      	ldr	r1, [pc, #508]	; (804ac4c <RegionAU915LinkAdrReq+0x210>)
{
 804aa4e:	9301      	str	r3, [sp, #4]
    RegionCommonChanMaskCopy( channelsMask, NvmCtx.ChannelsMask, 6 );
 804aa50:	2206      	movs	r2, #6
 804aa52:	4630      	mov	r0, r6
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 804aa54:	9407      	str	r4, [sp, #28]
 804aa56:	e9c6 4401 	strd	r4, r4, [r6, #4]
    RegionCommonChanMaskCopy( channelsMask, NvmCtx.ChannelsMask, 6 );
 804aa5a:	f000 fa7e 	bl	804af5a <RegionCommonChanMaskCopy>
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 804aa5e:	46a2      	mov	sl, r4
    while( bytesProcessed < linkAdrReq->PayloadSize )
 804aa60:	7a2b      	ldrb	r3, [r5, #8]
 804aa62:	42a3      	cmp	r3, r4
 804aa64:	d905      	bls.n	804aa72 <RegionAU915LinkAdrReq+0x36>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 804aa66:	6868      	ldr	r0, [r5, #4]
 804aa68:	a905      	add	r1, sp, #20
 804aa6a:	4420      	add	r0, r4
 804aa6c:	f000 fabf 	bl	804afee <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 804aa70:	b968      	cbnz	r0, 804aa8e <RegionAU915LinkAdrReq+0x52>
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_6 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 804aa72:	f99d 3015 	ldrsb.w	r3, [sp, #21]
 804aa76:	2b05      	cmp	r3, #5
 804aa78:	dc69      	bgt.n	804ab4e <RegionAU915LinkAdrReq+0x112>
 804aa7a:	2204      	movs	r2, #4
 804aa7c:	2100      	movs	r1, #0
 804aa7e:	4630      	mov	r0, r6
 804aa80:	f000 fa4b 	bl	804af1a <RegionCommonCountChannels>
 804aa84:	2801      	cmp	r0, #1
 804aa86:	d862      	bhi.n	804ab4e <RegionAU915LinkAdrReq+0x112>
    {
        status &= 0xFE; // Channel mask KO
 804aa88:	f04f 0a06 	mov.w	sl, #6
 804aa8c:	e061      	b.n	804ab52 <RegionAU915LinkAdrReq+0x116>
        if( linkAdrParams.ChMaskCtrl == 6 )
 804aa8e:	f89d 2017 	ldrb.w	r2, [sp, #23]
 804aa92:	f8bd 3018 	ldrh.w	r3, [sp, #24]
        bytesProcessed += nextIndex;
 804aa96:	4404      	add	r4, r0
        if( linkAdrParams.ChMaskCtrl == 6 )
 804aa98:	2a06      	cmp	r2, #6
        bytesProcessed += nextIndex;
 804aa9a:	b2e4      	uxtb	r4, r4
        if( linkAdrParams.ChMaskCtrl == 6 )
 804aa9c:	d107      	bne.n	804aaae <RegionAU915LinkAdrReq+0x72>
            channelsMask[0] = 0xFFFF;
 804aa9e:	f04f 32ff 	mov.w	r2, #4294967295
            channelsMask[1] = 0xFFFF;
 804aaa2:	e9cd 2207 	strd	r2, r2, [sp, #28]
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 804aaa6:	b2db      	uxtb	r3, r3
 804aaa8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 804aaac:	e7d8      	b.n	804aa60 <RegionAU915LinkAdrReq+0x24>
        else if( linkAdrParams.ChMaskCtrl == 7 )
 804aaae:	2a07      	cmp	r2, #7
 804aab0:	d102      	bne.n	804aab8 <RegionAU915LinkAdrReq+0x7c>
            channelsMask[1] = 0x0000;
 804aab2:	e9cd aa07 	strd	sl, sl, [sp, #28]
 804aab6:	e7f6      	b.n	804aaa6 <RegionAU915LinkAdrReq+0x6a>
        else if( linkAdrParams.ChMaskCtrl == 5 )
 804aab8:	2a05      	cmp	r2, #5
 804aaba:	d142      	bne.n	804ab42 <RegionAU915LinkAdrReq+0x106>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 804aabc:	b2db      	uxtb	r3, r3
 804aabe:	2000      	movs	r0, #0
 804aac0:	9300      	str	r3, [sp, #0]
            uint8_t cntChannelMask = 0;
 804aac2:	4602      	mov	r2, r0
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 804aac4:	2301      	movs	r3, #1
 804aac6:	fa03 fe00 	lsl.w	lr, r3, r0
 804aaca:	ea00 0b03 	and.w	fp, r0, r3
 804aace:	9f00      	ldr	r7, [sp, #0]
 804aad0:	ab12      	add	r3, sp, #72	; 0x48
 804aad2:	eb03 0c42 	add.w	ip, r3, r2, lsl #1
 804aad6:	ea17 0f0e 	tst.w	r7, lr
 804aada:	fa0f f18e 	sxth.w	r1, lr
 804aade:	f83c 3c2c 	ldrh.w	r3, [ip, #-44]
 804aae2:	d01b      	beq.n	804ab1c <RegionAU915LinkAdrReq+0xe0>
                    if( ( i % 2 ) == 0 )
 804aae4:	f1bb 0f00 	cmp.w	fp, #0
 804aae8:	d10c      	bne.n	804ab04 <RegionAU915LinkAdrReq+0xc8>
                        channelsMask[cntChannelMask] |= 0x00FF;
 804aaea:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 804aaee:	f82c 3c2c 	strh.w	r3, [ip, #-44]
                        channelsMask[4] |= ( bitMask << i );
 804aaf2:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 804aaf6:	4319      	orrs	r1, r3
                        channelsMask[4] &= ~( bitMask << i );
 804aaf8:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 804aafc:	3001      	adds	r0, #1
            for( uint8_t i = 0; i <= 7; i++ )
 804aafe:	2808      	cmp	r0, #8
 804ab00:	d1e0      	bne.n	804aac4 <RegionAU915LinkAdrReq+0x88>
 804ab02:	e7ad      	b.n	804aa60 <RegionAU915LinkAdrReq+0x24>
                        channelsMask[cntChannelMask] |= 0xFF00;
 804ab04:	f063 03ff 	orn	r3, r3, #255	; 0xff
 804ab08:	f82c 3c2c 	strh.w	r3, [ip, #-44]
                        channelsMask[4] |= ( bitMask << i );
 804ab0c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 804ab10:	4319      	orrs	r1, r3
                        cntChannelMask++;
 804ab12:	3201      	adds	r2, #1
                        channelsMask[4] &= ~( bitMask << i );
 804ab14:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
                        cntChannelMask++;
 804ab18:	b2d2      	uxtb	r2, r2
 804ab1a:	e7ef      	b.n	804aafc <RegionAU915LinkAdrReq+0xc0>
 804ab1c:	43c9      	mvns	r1, r1
                    if( ( i % 2 ) == 0 )
 804ab1e:	f1bb 0f00 	cmp.w	fp, #0
 804ab22:	d107      	bne.n	804ab34 <RegionAU915LinkAdrReq+0xf8>
                        channelsMask[cntChannelMask] &= 0xFF00;
 804ab24:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 804ab28:	f82c 3c2c 	strh.w	r3, [ip, #-44]
                        channelsMask[4] &= ~( bitMask << i );
 804ab2c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 804ab30:	4019      	ands	r1, r3
 804ab32:	e7e1      	b.n	804aaf8 <RegionAU915LinkAdrReq+0xbc>
                        channelsMask[cntChannelMask] &= 0x00FF;
 804ab34:	b2db      	uxtb	r3, r3
 804ab36:	f82c 3c2c 	strh.w	r3, [ip, #-44]
                        channelsMask[4] &= ~( bitMask << i );
 804ab3a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 804ab3e:	4019      	ands	r1, r3
 804ab40:	e7e7      	b.n	804ab12 <RegionAU915LinkAdrReq+0xd6>
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 804ab42:	a912      	add	r1, sp, #72	; 0x48
 804ab44:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 804ab48:	f822 3c2c 	strh.w	r3, [r2, #-44]
 804ab4c:	e788      	b.n	804aa60 <RegionAU915LinkAdrReq+0x24>
    uint8_t bytesProcessed = 0;
 804ab4e:	f04f 0a07 	mov.w	sl, #7
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 804ab52:	2302      	movs	r3, #2
 804ab54:	f88d 300c 	strb.w	r3, [sp, #12]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
    phyParam = RegionAU915GetPhyParam( &getPhy );
 804ab58:	a803      	add	r0, sp, #12
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 804ab5a:	7a6b      	ldrb	r3, [r5, #9]
 804ab5c:	f88d 300e 	strb.w	r3, [sp, #14]
    phyParam = RegionAU915GetPhyParam( &getPhy );
 804ab60:	f7ff fc98 	bl	804a494 <RegionAU915GetPhyParam>

    linkAdrVerifyParams.Status = status;
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 804ab64:	7aab      	ldrb	r3, [r5, #10]
 804ab66:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 804ab6a:	f89d 3015 	ldrb.w	r3, [sp, #21]
 804ab6e:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 804ab72:	f89d 3016 	ldrb.w	r3, [sp, #22]
 804ab76:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 804ab7a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 804ab7e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 804ab82:	7aeb      	ldrb	r3, [r5, #11]
 804ab84:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 804ab88:	7b2b      	ldrb	r3, [r5, #12]
 804ab8a:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 804ab8e:	7b6b      	ldrb	r3, [r5, #13]
 804ab90:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    linkAdrVerifyParams.NbChannels = AU915_MAX_NB_CHANNELS;
 804ab94:	2348      	movs	r3, #72	; 0x48
 804ab96:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    linkAdrVerifyParams.ChannelsMask = channelsMask;
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
    linkAdrVerifyParams.MaxDatarate = AU915_TX_MAX_DATARATE;
 804ab9a:	230d      	movs	r3, #13
 804ab9c:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
    linkAdrVerifyParams.MinTxPower = AU915_MIN_TX_POWER;
 804aba0:	230e      	movs	r3, #14
 804aba2:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    linkAdrVerifyParams.MaxTxPower = AU915_MAX_TX_POWER;
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 804aba6:	682b      	ldr	r3, [r5, #0]
    linkAdrVerifyParams.Status = status;
 804aba8:	f88d a02c 	strb.w	sl, [sp, #44]	; 0x2c
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 804abac:	f88d 003c 	strb.w	r0, [sp, #60]	; 0x3c
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 804abb0:	930a      	str	r3, [sp, #40]	; 0x28
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 804abb2:	f8df a09c 	ldr.w	sl, [pc, #156]	; 804ac50 <RegionAU915LinkAdrReq+0x214>
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 804abb6:	960e      	str	r6, [sp, #56]	; 0x38

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 804abb8:	ab05      	add	r3, sp, #20
 804abba:	f10d 0216 	add.w	r2, sp, #22
 804abbe:	f10d 0115 	add.w	r1, sp, #21
 804abc2:	a80a      	add	r0, sp, #40	; 0x28
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 804abc4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 804abc8:	f000 fa2b 	bl	804b022 <RegionCommonLinkAdrReqVerifyParams>

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 804abcc:	2807      	cmp	r0, #7
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 804abce:	4605      	mov	r5, r0
    if( status == 0x07 )
 804abd0:	d129      	bne.n	804ac26 <RegionAU915LinkAdrReq+0x1ea>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, channelsMask, 6 );
 804abd2:	2206      	movs	r2, #6
 804abd4:	4631      	mov	r1, r6
 804abd6:	f50a 705c 	add.w	r0, sl, #880	; 0x370
 804abda:	f000 f9be 	bl	804af5a <RegionCommonChanMaskCopy>

        NvmCtx.ChannelsMaskRemaining[0] &= NvmCtx.ChannelsMask[0];
 804abde:	f8ba 337c 	ldrh.w	r3, [sl, #892]	; 0x37c
 804abe2:	f8ba 2370 	ldrh.w	r2, [sl, #880]	; 0x370
 804abe6:	4013      	ands	r3, r2
 804abe8:	f8aa 337c 	strh.w	r3, [sl, #892]	; 0x37c
        NvmCtx.ChannelsMaskRemaining[1] &= NvmCtx.ChannelsMask[1];
 804abec:	f8ba 2372 	ldrh.w	r2, [sl, #882]	; 0x372
 804abf0:	f8ba 337e 	ldrh.w	r3, [sl, #894]	; 0x37e
 804abf4:	4013      	ands	r3, r2
 804abf6:	f8aa 337e 	strh.w	r3, [sl, #894]	; 0x37e
        NvmCtx.ChannelsMaskRemaining[2] &= NvmCtx.ChannelsMask[2];
 804abfa:	f8ba 2374 	ldrh.w	r2, [sl, #884]	; 0x374
 804abfe:	f8ba 3380 	ldrh.w	r3, [sl, #896]	; 0x380
 804ac02:	4013      	ands	r3, r2
 804ac04:	f8aa 3380 	strh.w	r3, [sl, #896]	; 0x380
        NvmCtx.ChannelsMaskRemaining[3] &= NvmCtx.ChannelsMask[3];
 804ac08:	f8ba 2376 	ldrh.w	r2, [sl, #886]	; 0x376
 804ac0c:	f8ba 3382 	ldrh.w	r3, [sl, #898]	; 0x382
 804ac10:	4013      	ands	r3, r2
 804ac12:	f8aa 3382 	strh.w	r3, [sl, #898]	; 0x382
        NvmCtx.ChannelsMaskRemaining[4] = NvmCtx.ChannelsMask[4];
 804ac16:	f8ba 3378 	ldrh.w	r3, [sl, #888]	; 0x378
 804ac1a:	f8aa 3384 	strh.w	r3, [sl, #900]	; 0x384
        NvmCtx.ChannelsMaskRemaining[5] = NvmCtx.ChannelsMask[5];
 804ac1e:	f8ba 337a 	ldrh.w	r3, [sl, #890]	; 0x37a
 804ac22:	f8aa 3386 	strh.w	r3, [sl, #902]	; 0x386
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 804ac26:	f89d 3015 	ldrb.w	r3, [sp, #21]
 804ac2a:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
    *nbRepOut = linkAdrParams.NbRep;
 804ac2e:	9a01      	ldr	r2, [sp, #4]
    *txPowOut = linkAdrParams.TxPower;
 804ac30:	f89d 3016 	ldrb.w	r3, [sp, #22]
 804ac34:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 804ac38:	f89d 3014 	ldrb.w	r3, [sp, #20]
 804ac3c:	7013      	strb	r3, [r2, #0]
    *nbBytesParsed = bytesProcessed;
 804ac3e:	9b1c      	ldr	r3, [sp, #112]	; 0x70

    return status;
}
 804ac40:	4628      	mov	r0, r5
    *nbBytesParsed = bytesProcessed;
 804ac42:	701c      	strb	r4, [r3, #0]
}
 804ac44:	b013      	add	sp, #76	; 0x4c
 804ac46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804ac4a:	bf00      	nop
 804ac4c:	2000ac60 	.word	0x2000ac60
 804ac50:	2000a8f0 	.word	0x2000a8f0

0804ac54 <RegionAU915RxParamSetupReq>:

uint8_t RegionAU915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 804ac54:	b538      	push	{r3, r4, r5, lr}
 804ac56:	4605      	mov	r5, r0
    uint8_t status = 0x07;

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 804ac58:	6840      	ldr	r0, [r0, #4]
 804ac5a:	f7ff fbfd 	bl	804a458 <VerifyRfFreq>
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE ) == false )
 804ac5e:	220d      	movs	r2, #13
        status &= 0xFE; // Channel frequency KO
 804ac60:	2800      	cmp	r0, #0
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE ) == false )
 804ac62:	f04f 0108 	mov.w	r1, #8
 804ac66:	f995 0000 	ldrsb.w	r0, [r5]
        status &= 0xFE; // Channel frequency KO
 804ac6a:	bf14      	ite	ne
 804ac6c:	2407      	movne	r4, #7
 804ac6e:	2406      	moveq	r4, #6
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE ) == false )
 804ac70:	f000 f933 	bl	804aeda <RegionCommonValueInRange>
 804ac74:	b908      	cbnz	r0, 804ac7a <RegionAU915RxParamSetupReq+0x26>
    {
        status &= 0xFD; // Datarate KO
 804ac76:	f004 0405 	and.w	r4, r4, #5
    }
    if( ( rxParamSetupReq->Datarate == DR_7 ) ||
 804ac7a:	f995 3000 	ldrsb.w	r3, [r5]
 804ac7e:	2b07      	cmp	r3, #7
 804ac80:	d001      	beq.n	804ac86 <RegionAU915RxParamSetupReq+0x32>
 804ac82:	2b0d      	cmp	r3, #13
 804ac84:	dd01      	ble.n	804ac8a <RegionAU915RxParamSetupReq+0x36>
        ( rxParamSetupReq->Datarate > DR_13 ) )
    {
        status &= 0xFD; // Datarate KO
 804ac86:	f004 04fd 	and.w	r4, r4, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, AU915_MIN_RX1_DR_OFFSET, AU915_MAX_RX1_DR_OFFSET ) == false )
 804ac8a:	2206      	movs	r2, #6
 804ac8c:	2100      	movs	r1, #0
 804ac8e:	f995 0001 	ldrsb.w	r0, [r5, #1]
 804ac92:	f000 f922 	bl	804aeda <RegionCommonValueInRange>
 804ac96:	b908      	cbnz	r0, 804ac9c <RegionAU915RxParamSetupReq+0x48>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 804ac98:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
    }

    return status;
}
 804ac9c:	4620      	mov	r0, r4
 804ac9e:	bd38      	pop	{r3, r4, r5, pc}

0804aca0 <RegionAU915NewChannelReq>:

uint8_t RegionAU915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Datarate and frequency KO
    return 0;
}
 804aca0:	2000      	movs	r0, #0
 804aca2:	4770      	bx	lr

0804aca4 <RegionAU915TxParamSetupReq>:

int8_t RegionAU915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Accept the request
    return 0;
}
 804aca4:	2000      	movs	r0, #0
 804aca6:	4770      	bx	lr

0804aca8 <RegionAU915DlChannelReq>:
 804aca8:	2000      	movs	r0, #0
 804acaa:	4770      	bx	lr

0804acac <RegionAU915CalcBackOff>:
    trialsCount++;
    return currentDr;
}

void RegionAU915CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
 804acac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    RegionCommonCalcBackOffParams_t calcBackOffParams;

    calcBackOffParams.Channels = NvmCtx.Channels;
 804acae:	4b0d      	ldr	r3, [pc, #52]	; (804ace4 <RegionAU915CalcBackOff+0x38>)
 804acb0:	9301      	str	r3, [sp, #4]
    calcBackOffParams.Bands = NvmCtx.Bands;
 804acb2:	f503 7358 	add.w	r3, r3, #864	; 0x360
 804acb6:	9302      	str	r3, [sp, #8]
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 804acb8:	7843      	ldrb	r3, [r0, #1]
 804acba:	f88d 300c 	strb.w	r3, [sp, #12]
    calcBackOffParams.Joined = calcBackOff->Joined;
 804acbe:	7803      	ldrb	r3, [r0, #0]
 804acc0:	f88d 300d 	strb.w	r3, [sp, #13]
    calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 804acc4:	7883      	ldrb	r3, [r0, #2]
 804acc6:	f88d 300e 	strb.w	r3, [sp, #14]
    calcBackOffParams.Channel = calcBackOff->Channel;
 804acca:	78c3      	ldrb	r3, [r0, #3]
 804accc:	f88d 300f 	strb.w	r3, [sp, #15]
    calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 804acd0:	6843      	ldr	r3, [r0, #4]
 804acd2:	9304      	str	r3, [sp, #16]
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 804acd4:	6883      	ldr	r3, [r0, #8]
 804acd6:	9305      	str	r3, [sp, #20]

    RegionCommonCalcBackOff( &calcBackOffParams );
 804acd8:	a801      	add	r0, sp, #4
 804acda:	f000 fa79 	bl	804b1d0 <RegionCommonCalcBackOff>
}
 804acde:	b007      	add	sp, #28
 804ace0:	f85d fb04 	ldr.w	pc, [sp], #4
 804ace4:	2000a8f0 	.word	0x2000a8f0

0804ace8 <RegionAU915NextChannel>:

LoRaMacStatus_t RegionAU915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 804ace8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804acec:	b099      	sub	sp, #100	; 0x64
 804acee:	4605      	mov	r5, r0
 804acf0:	9104      	str	r1, [sp, #16]
 804acf2:	4693      	mov	fp, r2
    uint8_t nbEnabledChannels = 0;
    uint8_t delayTx = 0;
    uint8_t enabledChannels[AU915_MAX_NB_CHANNELS] = { 0 };
 804acf4:	2100      	movs	r1, #0
 804acf6:	2248      	movs	r2, #72	; 0x48
 804acf8:	a806      	add	r0, sp, #24
{
 804acfa:	461e      	mov	r6, r3
    uint8_t enabledChannels[AU915_MAX_NB_CHANNELS] = { 0 };
 804acfc:	f002 fd6c 	bl	804d7d8 <memset>
    TimerTime_t nextTxDelay = 0;

    // Count 125kHz channels
    if( RegionCommonCountChannels( NvmCtx.ChannelsMaskRemaining, 0, 4 ) == 0 )
 804ad00:	2204      	movs	r2, #4
 804ad02:	2100      	movs	r1, #0
 804ad04:	4846      	ldr	r0, [pc, #280]	; (804ae20 <RegionAU915NextChannel+0x138>)
 804ad06:	f8df 9120 	ldr.w	r9, [pc, #288]	; 804ae28 <RegionAU915NextChannel+0x140>
 804ad0a:	f000 f906 	bl	804af1a <RegionCommonCountChannels>
 804ad0e:	b930      	cbnz	r0, 804ad1e <RegionAU915NextChannel+0x36>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( NvmCtx.ChannelsMaskRemaining, NvmCtx.ChannelsMask, 4  );
 804ad10:	f509 715c 	add.w	r1, r9, #880	; 0x370
 804ad14:	2204      	movs	r2, #4
 804ad16:	f101 000c 	add.w	r0, r1, #12
 804ad1a:	f000 f91e 	bl	804af5a <RegionCommonChanMaskCopy>
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_6 )
 804ad1e:	f995 3008 	ldrsb.w	r3, [r5, #8]
 804ad22:	2b05      	cmp	r3, #5
 804ad24:	dd06      	ble.n	804ad34 <RegionAU915NextChannel+0x4c>
    {
        if( ( NvmCtx.ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 804ad26:	f899 3384 	ldrb.w	r3, [r9, #900]	; 0x384
 804ad2a:	b91b      	cbnz	r3, 804ad34 <RegionAU915NextChannel+0x4c>
        {
            NvmCtx.ChannelsMaskRemaining[4] = NvmCtx.ChannelsMask[4];
 804ad2c:	f8b9 3378 	ldrh.w	r3, [r9, #888]	; 0x378
 804ad30:	f8a9 3384 	strh.w	r3, [r9, #900]	; 0x384
        }
    }

    TimerTime_t elapsed = TimerGetElapsedTime( nextChanParams->LastAggrTx );
 804ad34:	6868      	ldr	r0, [r5, #4]
 804ad36:	f000 fd9f 	bl	804b878 <TimerGetElapsedTime>
    if( ( nextChanParams->LastAggrTx == 0 ) || ( nextChanParams->AggrTimeOff <= elapsed ) )
 804ad3a:	686b      	ldr	r3, [r5, #4]
 804ad3c:	b113      	cbz	r3, 804ad44 <RegionAU915NextChannel+0x5c>
 804ad3e:	682b      	ldr	r3, [r5, #0]
 804ad40:	4283      	cmp	r3, r0
 804ad42:	d860      	bhi.n	804ae06 <RegionAU915NextChannel+0x11e>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 804ad44:	2400      	movs	r4, #0

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, AU915_MAX_NB_BANDS );
 804ad46:	2301      	movs	r3, #1
 804ad48:	7aa9      	ldrb	r1, [r5, #10]
 804ad4a:	7a68      	ldrb	r0, [r5, #9]
        *aggregatedTimeOff = 0;
 804ad4c:	6034      	str	r4, [r6, #0]
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, AU915_MAX_NB_BANDS );
 804ad4e:	4a35      	ldr	r2, [pc, #212]	; (804ae24 <RegionAU915NextChannel+0x13c>)
 804ad50:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 804ae20 <RegionAU915NextChannel+0x138>
 804ad54:	f000 f915 	bl	804af82 <RegionCommonUpdateBandTimeOff>

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Datarate,
 804ad58:	f995 3008 	ldrsb.w	r3, [r5, #8]
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, AU915_MAX_NB_BANDS );
 804ad5c:	9001      	str	r0, [sp, #4]
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Datarate,
 804ad5e:	9302      	str	r3, [sp, #8]
 804ad60:	f5aa 785f 	sub.w	r8, sl, #892	; 0x37c
    uint8_t delayTransmission = 0;
 804ad64:	4627      	mov	r7, r4
    uint8_t nbEnabledChannels = 0;
 804ad66:	4625      	mov	r5, r4
 804ad68:	b2e3      	uxtb	r3, r4
 804ad6a:	9303      	str	r3, [sp, #12]
{
 804ad6c:	2600      	movs	r6, #0
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
 804ad6e:	f8ba 3000 	ldrh.w	r3, [sl]
 804ad72:	4133      	asrs	r3, r6
 804ad74:	07db      	lsls	r3, r3, #31
 804ad76:	d51e      	bpl.n	804adb6 <RegionAU915NextChannel+0xce>
 804ad78:	230c      	movs	r3, #12
 804ad7a:	19a2      	adds	r2, r4, r6
 804ad7c:	fb03 9202 	mla	r2, r3, r2, r9
 804ad80:	4373      	muls	r3, r6
                if( channels[i + j].Frequency == 0 )
 804ad82:	9305      	str	r3, [sp, #20]
 804ad84:	f858 1003 	ldr.w	r1, [r8, r3]
 804ad88:	b1a9      	cbz	r1, 804adb6 <RegionAU915NextChannel+0xce>
                                              channels[i + j].DrRange.Fields.Max ) == false )
 804ad8a:	7a11      	ldrb	r1, [r2, #8]
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 804ad8c:	9802      	ldr	r0, [sp, #8]
                                              channels[i + j].DrRange.Fields.Max ) == false )
 804ad8e:	f341 1203 	sbfx	r2, r1, #4, #4
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 804ad92:	f341 0103 	sbfx	r1, r1, #0, #4
 804ad96:	b252      	sxtb	r2, r2
 804ad98:	b249      	sxtb	r1, r1
 804ad9a:	f000 f89e 	bl	804aeda <RegionCommonValueInRange>
 804ad9e:	b150      	cbz	r0, 804adb6 <RegionAU915NextChannel+0xce>
                if( bands[channels[i + j].Band].TimeOff > 0 )
 804ada0:	9b05      	ldr	r3, [sp, #20]
 804ada2:	4a21      	ldr	r2, [pc, #132]	; (804ae28 <RegionAU915NextChannel+0x140>)
 804ada4:	4443      	add	r3, r8
 804ada6:	7a5b      	ldrb	r3, [r3, #9]
 804ada8:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 804adac:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 804adb0:	b303      	cbz	r3, 804adf4 <RegionAU915NextChannel+0x10c>
                    delayTransmission++;
 804adb2:	3701      	adds	r7, #1
 804adb4:	b2ff      	uxtb	r7, r7
 804adb6:	3601      	adds	r6, #1
        for( uint8_t j = 0; j < 16; j++ )
 804adb8:	2e10      	cmp	r6, #16
 804adba:	d1d8      	bne.n	804ad6e <RegionAU915NextChannel+0x86>
 804adbc:	3410      	adds	r4, #16
    for( uint8_t i = 0, k = 0; i < AU915_MAX_NB_CHANNELS; i += 16, k++ )
 804adbe:	2c50      	cmp	r4, #80	; 0x50
 804adc0:	f10a 0a02 	add.w	sl, sl, #2
 804adc4:	f108 08c0 	add.w	r8, r8, #192	; 0xc0
 804adc8:	d1ce      	bne.n	804ad68 <RegionAU915NextChannel+0x80>
    {
        delayTx++;
        nextTxDelay = nextChanParams->AggrTimeOff - elapsed;
    }

    if( nbEnabledChannels > 0 )
 804adca:	b31d      	cbz	r5, 804ae14 <RegionAU915NextChannel+0x12c>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 804adcc:	1e69      	subs	r1, r5, #1
 804adce:	2000      	movs	r0, #0
 804add0:	f000 fdee 	bl	804b9b0 <randr>
 804add4:	ab18      	add	r3, sp, #96	; 0x60
 804add6:	4418      	add	r0, r3
 804add8:	9b04      	ldr	r3, [sp, #16]
 804adda:	f810 1c48 	ldrb.w	r1, [r0, #-72]
 804adde:	7019      	strb	r1, [r3, #0]
        // Disable the channel in the mask
        RegionCommonChanDisable( NvmCtx.ChannelsMaskRemaining, *channel, AU915_MAX_NB_CHANNELS - 8 );
 804ade0:	2240      	movs	r2, #64	; 0x40
 804ade2:	480f      	ldr	r0, [pc, #60]	; (804ae20 <RegionAU915NextChannel+0x138>)
 804ade4:	f000 f882 	bl	804aeec <RegionCommonChanDisable>

        *time = 0;
 804ade8:	2000      	movs	r0, #0
 804adea:	f8cb 0000 	str.w	r0, [fp]
        }
        // Datarate not supported by any channel
        *time = 0;
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 804adee:	b019      	add	sp, #100	; 0x64
 804adf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                enabledChannels[nbEnabledChannels++] = i + j;
 804adf4:	aa18      	add	r2, sp, #96	; 0x60
 804adf6:	1c6b      	adds	r3, r5, #1
 804adf8:	4415      	add	r5, r2
 804adfa:	9a03      	ldr	r2, [sp, #12]
 804adfc:	4432      	add	r2, r6
 804adfe:	f805 2c48 	strb.w	r2, [r5, #-72]
 804ae02:	b2dd      	uxtb	r5, r3
 804ae04:	e7d7      	b.n	804adb6 <RegionAU915NextChannel+0xce>
        nextTxDelay = nextChanParams->AggrTimeOff - elapsed;
 804ae06:	1a1b      	subs	r3, r3, r0
 804ae08:	9301      	str	r3, [sp, #4]
            *time = nextTxDelay;
 804ae0a:	9b01      	ldr	r3, [sp, #4]
 804ae0c:	f8cb 3000 	str.w	r3, [fp]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 804ae10:	200b      	movs	r0, #11
 804ae12:	e7ec      	b.n	804adee <RegionAU915NextChannel+0x106>
        if( delayTx > 0 )
 804ae14:	2f00      	cmp	r7, #0
 804ae16:	d1f8      	bne.n	804ae0a <RegionAU915NextChannel+0x122>
        *time = 0;
 804ae18:	f8cb 7000 	str.w	r7, [fp]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 804ae1c:	200c      	movs	r0, #12
 804ae1e:	e7e6      	b.n	804adee <RegionAU915NextChannel+0x106>
 804ae20:	2000ac6c 	.word	0x2000ac6c
 804ae24:	2000ac50 	.word	0x2000ac50
 804ae28:	2000a8f0 	.word	0x2000a8f0

0804ae2c <RegionAU915ApplyDrOffset>:

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
}

uint8_t RegionAU915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 804ae2c:	b510      	push	{r4, lr}
    int8_t datarate = DatarateOffsetsAU915[dr][drOffset];
 804ae2e:	4c07      	ldr	r4, [pc, #28]	; (804ae4c <RegionAU915ApplyDrOffset+0x20>)
 804ae30:	2306      	movs	r3, #6
 804ae32:	fb03 4101 	mla	r1, r3, r1, r4
 804ae36:	4411      	add	r1, r2
 804ae38:	f991 3088 	ldrsb.w	r3, [r1, #136]	; 0x88

    if( datarate < 0 )
 804ae3c:	2b00      	cmp	r3, #0
 804ae3e:	da03      	bge.n	804ae48 <RegionAU915ApplyDrOffset+0x1c>
    {
        if( downlinkDwellTime == 0 )
 804ae40:	2800      	cmp	r0, #0
        {
            datarate = AU915_TX_MIN_DATARATE;
        }
        else
        {
            datarate = AU915_DWELL_LIMIT_DATARATE;
 804ae42:	bf0c      	ite	eq
 804ae44:	2300      	moveq	r3, #0
 804ae46:	2302      	movne	r3, #2
        }
    }
    return datarate;
}
 804ae48:	b2d8      	uxtb	r0, r3
 804ae4a:	bd10      	pop	{r4, pc}
 804ae4c:	0804f370 	.word	0x0804f370

0804ae50 <RegionCommonGetJoinDc>:

uint16_t RegionCommonGetJoinDc( TimerTime_t elapsedTime )
{
    uint16_t dutyCycle = 0;

    if( elapsedTime < 3600000 )
 804ae50:	4b06      	ldr	r3, [pc, #24]	; (804ae6c <RegionCommonGetJoinDc+0x1c>)
 804ae52:	4298      	cmp	r0, r3
 804ae54:	d908      	bls.n	804ae68 <RegionCommonGetJoinDc+0x18>
    {
        dutyCycle = BACKOFF_DC_10_HOURS;
    }
    else
    {
        dutyCycle = BACKOFF_DC_24_HOURS;
 804ae56:	4a06      	ldr	r2, [pc, #24]	; (804ae70 <RegionCommonGetJoinDc+0x20>)
 804ae58:	f242 7310 	movw	r3, #10000	; 0x2710
 804ae5c:	4290      	cmp	r0, r2
 804ae5e:	bf8c      	ite	hi
 804ae60:	4618      	movhi	r0, r3
 804ae62:	f44f 707a 	movls.w	r0, #1000	; 0x3e8
 804ae66:	4770      	bx	lr
        dutyCycle = BACKOFF_DC_1_HOUR;
 804ae68:	2064      	movs	r0, #100	; 0x64
    }
    return dutyCycle;
}
 804ae6a:	4770      	bx	lr
 804ae6c:	0036ee7f 	.word	0x0036ee7f
 804ae70:	025c3f7f 	.word	0x025c3f7f

0804ae74 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 804ae74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 804ae78:	429a      	cmp	r2, r3
{
 804ae7a:	9f07      	ldr	r7, [sp, #28]
    if( ( value >= min ) && ( value <= max ) )
 804ae7c:	db03      	blt.n	804ae86 <RegionCommonChanVerifyDr+0x12>
 804ae7e:	f99d 3018 	ldrsb.w	r3, [sp, #24]
 804ae82:	429a      	cmp	r2, r3
 804ae84:	dd23      	ble.n	804aece <RegionCommonChanVerifyDr+0x5a>
        return false;
 804ae86:	2000      	movs	r0, #0
}
 804ae88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 804ae8c:	f831 8013 	ldrh.w	r8, [r1, r3, lsl #1]
 804ae90:	2400      	movs	r4, #0
 804ae92:	fa48 f504 	asr.w	r5, r8, r4
 804ae96:	07ed      	lsls	r5, r5, #31
 804ae98:	d50f      	bpl.n	804aeba <RegionCommonChanVerifyDr+0x46>
 804ae9a:	1935      	adds	r5, r6, r4
 804ae9c:	fb0e 7505 	mla	r5, lr, r5, r7
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 804aea0:	f895 c008 	ldrb.w	ip, [r5, #8]
 804aea4:	f34c 1503 	sbfx	r5, ip, #4, #4
    if( ( value >= min ) && ( value <= max ) )
 804aea8:	f00c 0c0f 	and.w	ip, ip, #15
 804aeac:	4562      	cmp	r2, ip
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 804aeae:	b26d      	sxtb	r5, r5
    if( ( value >= min ) && ( value <= max ) )
 804aeb0:	db03      	blt.n	804aeba <RegionCommonChanVerifyDr+0x46>
 804aeb2:	f005 050f 	and.w	r5, r5, #15
 804aeb6:	42aa      	cmp	r2, r5
 804aeb8:	dd0d      	ble.n	804aed6 <RegionCommonChanVerifyDr+0x62>
 804aeba:	3401      	adds	r4, #1
        for( uint8_t j = 0; j < 16; j++ )
 804aebc:	2c10      	cmp	r4, #16
 804aebe:	d1e8      	bne.n	804ae92 <RegionCommonChanVerifyDr+0x1e>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 804aec0:	3301      	adds	r3, #1
 804aec2:	b2db      	uxtb	r3, r3
 804aec4:	011e      	lsls	r6, r3, #4
 804aec6:	b2f6      	uxtb	r6, r6
 804aec8:	42b0      	cmp	r0, r6
 804aeca:	d8df      	bhi.n	804ae8c <RegionCommonChanVerifyDr+0x18>
 804aecc:	e7db      	b.n	804ae86 <RegionCommonChanVerifyDr+0x12>
 804aece:	2300      	movs	r3, #0
 804aed0:	f04f 0e0c 	mov.w	lr, #12
 804aed4:	e7f6      	b.n	804aec4 <RegionCommonChanVerifyDr+0x50>
                    return true;
 804aed6:	2001      	movs	r0, #1
 804aed8:	e7d6      	b.n	804ae88 <RegionCommonChanVerifyDr+0x14>

0804aeda <RegionCommonValueInRange>:
    if( ( value >= min ) && ( value <= max ) )
 804aeda:	4288      	cmp	r0, r1
 804aedc:	db04      	blt.n	804aee8 <RegionCommonValueInRange+0xe>
    {
        return 1;
 804aede:	4290      	cmp	r0, r2
 804aee0:	bfcc      	ite	gt
 804aee2:	2000      	movgt	r0, #0
 804aee4:	2001      	movle	r0, #1
 804aee6:	4770      	bx	lr
    }
    return 0;
 804aee8:	2000      	movs	r0, #0
}
 804aeea:	4770      	bx	lr

0804aeec <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;
 804aeec:	090b      	lsrs	r3, r1, #4

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 804aeee:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
{
 804aef2:	b510      	push	{r4, lr}
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 804aef4:	d80f      	bhi.n	804af16 <RegionCommonChanDisable+0x2a>
 804aef6:	4291      	cmp	r1, r2
 804aef8:	d20d      	bcs.n	804af16 <RegionCommonChanDisable+0x2a>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 804aefa:	b21a      	sxth	r2, r3
 804aefc:	f001 010f 	and.w	r1, r1, #15
 804af00:	f830 4012 	ldrh.w	r4, [r0, r2, lsl #1]
 804af04:	2301      	movs	r3, #1
 804af06:	fa03 f101 	lsl.w	r1, r3, r1
 804af0a:	ea24 0101 	bic.w	r1, r4, r1
 804af0e:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]

    return true;
 804af12:	4618      	mov	r0, r3
}
 804af14:	bd10      	pop	{r4, pc}
        return false;
 804af16:	2000      	movs	r0, #0
 804af18:	e7fc      	b.n	804af14 <RegionCommonChanDisable+0x28>

0804af1a <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 804af1a:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 804af1c:	b140      	cbz	r0, 804af30 <RegionCommonCountChannels+0x16>
 804af1e:	2300      	movs	r3, #0
 804af20:	eb00 0641 	add.w	r6, r0, r1, lsl #1
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 804af24:	2701      	movs	r7, #1
    uint8_t nbChannels = 0;
 804af26:	4618      	mov	r0, r3
    {
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 804af28:	18cc      	adds	r4, r1, r3
 804af2a:	b2e4      	uxtb	r4, r4
 804af2c:	42a2      	cmp	r2, r4
 804af2e:	d800      	bhi.n	804af32 <RegionCommonCountChannels+0x18>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
    }

    return nbChannels;
}
 804af30:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nbChannels += CountChannels( channelsMask[i], 16 );
 804af32:	2500      	movs	r5, #0
 804af34:	f836 c013 	ldrh.w	ip, [r6, r3, lsl #1]
    uint8_t nbActiveBits = 0;
 804af38:	462c      	mov	r4, r5
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 804af3a:	fa07 fe05 	lsl.w	lr, r7, r5
 804af3e:	ea3e 0e0c 	bics.w	lr, lr, ip
            nbActiveBits++;
 804af42:	bf08      	it	eq
 804af44:	3401      	addeq	r4, #1
 804af46:	f105 0501 	add.w	r5, r5, #1
 804af4a:	bf08      	it	eq
 804af4c:	b2e4      	uxtbeq	r4, r4
    for( uint8_t j = 0; j < nbBits; j++ )
 804af4e:	2d10      	cmp	r5, #16
 804af50:	d1f3      	bne.n	804af3a <RegionCommonCountChannels+0x20>
        nbChannels += CountChannels( channelsMask[i], 16 );
 804af52:	4420      	add	r0, r4
 804af54:	b2c0      	uxtb	r0, r0
 804af56:	3301      	adds	r3, #1
 804af58:	e7e6      	b.n	804af28 <RegionCommonCountChannels+0xe>

0804af5a <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 804af5a:	b510      	push	{r4, lr}
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 804af5c:	b100      	cbz	r0, 804af60 <RegionCommonChanMaskCopy+0x6>
 804af5e:	b949      	cbnz	r1, 804af74 <RegionCommonChanMaskCopy+0x1a>
        for( uint8_t i = 0; i < len; i++ )
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
        }
    }
}
 804af60:	bd10      	pop	{r4, pc}
            channelsMaskDest[i] = channelsMaskSrc[i];
 804af62:	f831 4013 	ldrh.w	r4, [r1, r3, lsl #1]
 804af66:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
 804af6a:	3301      	adds	r3, #1
        for( uint8_t i = 0; i < len; i++ )
 804af6c:	b2dc      	uxtb	r4, r3
 804af6e:	42a2      	cmp	r2, r4
 804af70:	d8f7      	bhi.n	804af62 <RegionCommonChanMaskCopy+0x8>
 804af72:	e7f5      	b.n	804af60 <RegionCommonChanMaskCopy+0x6>
 804af74:	2300      	movs	r3, #0
 804af76:	e7f9      	b.n	804af6c <RegionCommonChanMaskCopy+0x12>

0804af78 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( bool joined, Band_t* band, TimerTime_t lastTxDone )
{
    if( joined == true )
    {
        band->LastTxDoneTime = lastTxDone;
 804af78:	608a      	str	r2, [r1, #8]
    if( joined == true )
 804af7a:	b100      	cbz	r0, 804af7e <RegionCommonSetBandTxDone+0x6>
 804af7c:	4770      	bx	lr
    }
    else
    {
        band->LastTxDoneTime = lastTxDone;
        band->LastJoinTxDoneTime = lastTxDone;
 804af7e:	604a      	str	r2, [r1, #4]
    }
}
 804af80:	4770      	bx	lr

0804af82 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, bool dutyCycle, Band_t* bands, uint8_t nbBands )
{
 804af82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804af86:	4681      	mov	r9, r0
 804af88:	460e      	mov	r6, r1
 804af8a:	4614      	mov	r4, r2
 804af8c:	eb02 1803 	add.w	r8, r2, r3, lsl #4
    TimerTime_t nextTxDelay = TIMERTIME_T_MAX;
 804af90:	f04f 35ff 	mov.w	r5, #4294967295
            if( dutyCycle == true )
            {
                TimerTime_t elapsed = TimerGetElapsedTime( bands[i].LastTxDoneTime );
                if( bands[i].TimeOff <= elapsed )
                {
                    bands[i].TimeOff = 0;
 804af94:	2700      	movs	r7, #0
    for( uint8_t i = 0; i < nbBands; i++ )
 804af96:	45a0      	cmp	r8, r4
 804af98:	d105      	bne.n	804afa6 <RegionCommonUpdateBandTimeOff+0x24>
                bands[i].TimeOff = 0;
            }
        }
    }

    return ( nextTxDelay == TIMERTIME_T_MAX ) ? 0 : nextTxDelay;
 804af9a:	1c6b      	adds	r3, r5, #1
}
 804af9c:	bf14      	ite	ne
 804af9e:	4628      	movne	r0, r5
 804afa0:	2000      	moveq	r0, #0
 804afa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if( joined == false )
 804afa6:	f1b9 0f00 	cmp.w	r9, #0
 804afaa:	d118      	bne.n	804afde <RegionCommonUpdateBandTimeOff+0x5c>
            TimerTime_t elapsedJoin = TimerGetElapsedTime( bands[i].LastJoinTxDoneTime );
 804afac:	6860      	ldr	r0, [r4, #4]
 804afae:	f000 fc63 	bl	804b878 <TimerGetElapsedTime>
 804afb2:	4682      	mov	sl, r0
            TimerTime_t elapsedTx = TimerGetElapsedTime( bands[i].LastTxDoneTime );
 804afb4:	68a0      	ldr	r0, [r4, #8]
 804afb6:	f000 fc5f 	bl	804b878 <TimerGetElapsedTime>
            TimerTime_t txDoneTime =  MAX( elapsedJoin,
 804afba:	2e00      	cmp	r6, #0
 804afbc:	bf08      	it	eq
 804afbe:	2000      	moveq	r0, #0
 804afc0:	4550      	cmp	r0, sl
 804afc2:	bf38      	it	cc
 804afc4:	4650      	movcc	r0, sl
                if( bands[i].TimeOff <= elapsed )
 804afc6:	68e3      	ldr	r3, [r4, #12]
 804afc8:	4283      	cmp	r3, r0
                    bands[i].TimeOff = 0;
 804afca:	bf98      	it	ls
 804afcc:	60e7      	strls	r7, [r4, #12]
                if( bands[i].TimeOff != 0 )
 804afce:	68e3      	ldr	r3, [r4, #12]
 804afd0:	b11b      	cbz	r3, 804afda <RegionCommonUpdateBandTimeOff+0x58>
                    nextTxDelay = MIN( bands[i].TimeOff - elapsed, nextTxDelay );
 804afd2:	1a1b      	subs	r3, r3, r0
 804afd4:	429d      	cmp	r5, r3
 804afd6:	bf28      	it	cs
 804afd8:	461d      	movcs	r5, r3
 804afda:	3410      	adds	r4, #16
 804afdc:	e7db      	b.n	804af96 <RegionCommonUpdateBandTimeOff+0x14>
            if( dutyCycle == true )
 804afde:	b11e      	cbz	r6, 804afe8 <RegionCommonUpdateBandTimeOff+0x66>
                TimerTime_t elapsed = TimerGetElapsedTime( bands[i].LastTxDoneTime );
 804afe0:	68a0      	ldr	r0, [r4, #8]
 804afe2:	f000 fc49 	bl	804b878 <TimerGetElapsedTime>
 804afe6:	e7ee      	b.n	804afc6 <RegionCommonUpdateBandTimeOff+0x44>
                bands[i].TimeOff = 0;
 804afe8:	60e6      	str	r6, [r4, #12]
                nextTxDelay = 0;
 804afea:	4635      	mov	r5, r6
 804afec:	e7f5      	b.n	804afda <RegionCommonUpdateBandTimeOff+0x58>

0804afee <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 804afee:	7803      	ldrb	r3, [r0, #0]
 804aff0:	2b03      	cmp	r3, #3
 804aff2:	d114      	bne.n	804b01e <RegionCommonParseLinkAdrReq+0x30>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 804aff4:	7843      	ldrb	r3, [r0, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 804aff6:	f003 020f 	and.w	r2, r3, #15
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 804affa:	091b      	lsrs	r3, r3, #4
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 804affc:	708a      	strb	r2, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 804affe:	704b      	strb	r3, [r1, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 804b000:	7883      	ldrb	r3, [r0, #2]
 804b002:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 804b004:	78c2      	ldrb	r2, [r0, #3]
 804b006:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 804b00a:	808b      	strh	r3, [r1, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 804b00c:	7903      	ldrb	r3, [r0, #4]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 804b00e:	f3c3 1202 	ubfx	r2, r3, #4, #3
        linkAdrParams->NbRep &= 0x0F;
 804b012:	f003 030f 	and.w	r3, r3, #15
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 804b016:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 804b018:	700b      	strb	r3, [r1, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 804b01a:	2005      	movs	r0, #5
 804b01c:	4770      	bx	lr
    uint8_t retIndex = 0;
 804b01e:	2000      	movs	r0, #0
    }
    return retIndex;
}
 804b020:	4770      	bx	lr

0804b022 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 804b022:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804b026:	4699      	mov	r9, r3
    int8_t datarate = verifyParams->Datarate;
    int8_t txPower = verifyParams->TxPower;
    int8_t nbRepetitions = verifyParams->NbRep;

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 804b028:	7943      	ldrb	r3, [r0, #5]
    uint8_t status = verifyParams->Status;
 804b02a:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 804b02c:	f990 8006 	ldrsb.w	r8, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 804b030:	f990 7007 	ldrsb.w	r7, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 804b034:	7a06      	ldrb	r6, [r0, #8]
{
 804b036:	4604      	mov	r4, r0
 804b038:	468b      	mov	fp, r1
 804b03a:	4692      	mov	sl, r2
    if( verifyParams->AdrEnabled == false )
 804b03c:	b34b      	cbz	r3, 804b092 <RegionCommonLinkAdrReqVerifyParams+0x70>
    int8_t nbRepetitions = verifyParams->NbRep;
 804b03e:	b276      	sxtb	r6, r6
        nbRepetitions = verifyParams->CurrentNbRep;
        datarate =  verifyParams->CurrentDatarate;
        txPower =  verifyParams->CurrentTxPower;
    }

    if( status != 0 )
 804b040:	b1ed      	cbz	r5, 804b07e <RegionCommonLinkAdrReqVerifyParams+0x5c>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 804b042:	69a2      	ldr	r2, [r4, #24]
 804b044:	9201      	str	r2, [sp, #4]
 804b046:	f994 2015 	ldrsb.w	r2, [r4, #21]
 804b04a:	9200      	str	r2, [sp, #0]
 804b04c:	f994 3014 	ldrsb.w	r3, [r4, #20]
 804b050:	7b20      	ldrb	r0, [r4, #12]
 804b052:	6921      	ldr	r1, [r4, #16]
 804b054:	4642      	mov	r2, r8
 804b056:	f7ff ff0d 	bl	804ae74 <RegionCommonChanVerifyDr>
 804b05a:	b908      	cbnz	r0, 804b060 <RegionCommonLinkAdrReqVerifyParams+0x3e>
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
        {
            status &= 0xFD; // Datarate KO
 804b05c:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 804b060:	f994 301d 	ldrsb.w	r3, [r4, #29]
 804b064:	f994 201c 	ldrsb.w	r2, [r4, #28]
    if( ( value >= min ) && ( value <= max ) )
 804b068:	42bb      	cmp	r3, r7
 804b06a:	dc19      	bgt.n	804b0a0 <RegionCommonLinkAdrReqVerifyParams+0x7e>
 804b06c:	42ba      	cmp	r2, r7
 804b06e:	da01      	bge.n	804b074 <RegionCommonLinkAdrReqVerifyParams+0x52>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 804b070:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 804b074:	2d07      	cmp	r5, #7
 804b076:	d102      	bne.n	804b07e <RegionCommonLinkAdrReqVerifyParams+0x5c>
    {
        if( nbRepetitions == 0 )
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 804b078:	2e00      	cmp	r6, #0
 804b07a:	bf08      	it	eq
 804b07c:	2601      	moveq	r6, #1
    *dr = datarate;
    *txPow = txPower;
    *nbRep = nbRepetitions;

    return status;
}
 804b07e:	4628      	mov	r0, r5
    *dr = datarate;
 804b080:	f88b 8000 	strb.w	r8, [fp]
    *txPow = txPower;
 804b084:	f88a 7000 	strb.w	r7, [sl]
    *nbRep = nbRepetitions;
 804b088:	f889 6000 	strb.w	r6, [r9]
}
 804b08c:	b003      	add	sp, #12
 804b08e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        nbRepetitions = verifyParams->CurrentNbRep;
 804b092:	f990 600b 	ldrsb.w	r6, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 804b096:	f990 8009 	ldrsb.w	r8, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 804b09a:	f990 700a 	ldrsb.w	r7, [r0, #10]
 804b09e:	e7cf      	b.n	804b040 <RegionCommonLinkAdrReqVerifyParams+0x1e>
    if( ( value >= min ) && ( value <= max ) )
 804b0a0:	461f      	mov	r7, r3
 804b0a2:	e7e7      	b.n	804b074 <RegionCommonLinkAdrReqVerifyParams+0x52>

0804b0a4 <RegionCommonComputeSymbolTimeLoRa>:

double RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
 804b0a4:	2301      	movs	r3, #1
{
 804b0a6:	b570      	push	{r4, r5, r6, lr}
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
 804b0a8:	fa03 f000 	lsl.w	r0, r3, r0
{
 804b0ac:	460e      	mov	r6, r1
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
 804b0ae:	f7f5 fb69 	bl	8040784 <__aeabi_i2d>
 804b0b2:	4604      	mov	r4, r0
 804b0b4:	4630      	mov	r0, r6
 804b0b6:	460d      	mov	r5, r1
 804b0b8:	f7f5 fb54 	bl	8040764 <__aeabi_ui2d>
 804b0bc:	4602      	mov	r2, r0
 804b0be:	460b      	mov	r3, r1
 804b0c0:	4620      	mov	r0, r4
 804b0c2:	4629      	mov	r1, r5
 804b0c4:	f7f5 fcf2 	bl	8040aac <__aeabi_ddiv>
 804b0c8:	2200      	movs	r2, #0
 804b0ca:	4b03      	ldr	r3, [pc, #12]	; (804b0d8 <RegionCommonComputeSymbolTimeLoRa+0x34>)
 804b0cc:	f7f5 fbc4 	bl	8040858 <__aeabi_dmul>
}
 804b0d0:	ec41 0b10 	vmov	d0, r0, r1
 804b0d4:	bd70      	pop	{r4, r5, r6, pc}
 804b0d6:	bf00      	nop
 804b0d8:	408f4000 	.word	0x408f4000

0804b0dc <RegionCommonComputeRxWindowParameters>:
{
    return ( 8.0 / ( double )phyDr ); // 1 symbol equals 1 byte
}

void RegionCommonComputeRxWindowParameters( double tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
 804b0dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804b0e0:	ec57 6b10 	vmov	r6, r7, d0
 804b0e4:	4604      	mov	r4, r0
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 804b0e6:	3804      	subs	r0, #4
 804b0e8:	0040      	lsls	r0, r0, #1
{
 804b0ea:	4615      	mov	r5, r2
 804b0ec:	469a      	mov	sl, r3
 804b0ee:	468b      	mov	fp, r1
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 804b0f0:	f7f5 fb48 	bl	8040784 <__aeabi_i2d>
 804b0f4:	4632      	mov	r2, r6
 804b0f6:	463b      	mov	r3, r7
 804b0f8:	f7f5 fbae 	bl	8040858 <__aeabi_dmul>
 804b0fc:	4680      	mov	r8, r0
 804b0fe:	ea4f 004b 	mov.w	r0, fp, lsl #1
 804b102:	4689      	mov	r9, r1
 804b104:	f7f5 fb2e 	bl	8040764 <__aeabi_ui2d>
 804b108:	4602      	mov	r2, r0
 804b10a:	460b      	mov	r3, r1
 804b10c:	4640      	mov	r0, r8
 804b10e:	4649      	mov	r1, r9
 804b110:	f7f5 f9ec 	bl	80404ec <__adddf3>
 804b114:	4632      	mov	r2, r6
 804b116:	463b      	mov	r3, r7
 804b118:	f7f5 fcc8 	bl	8040aac <__aeabi_ddiv>
 804b11c:	ec41 0b10 	vmov	d0, r0, r1
 804b120:	f003 fd36 	bl	804eb90 <ceil>
 804b124:	ec51 0b10 	vmov	r0, r1, d0
 804b128:	f7f5 fe58 	bl	8040ddc <__aeabi_d2uiz>
 804b12c:	4284      	cmp	r4, r0
 804b12e:	bf38      	it	cc
 804b130:	4604      	movcc	r4, r0
    *windowOffset = ( int32_t )ceil( ( 4.0 * tSymbol ) - ( ( *windowTimeout * tSymbol ) / 2.0 ) - wakeUpTime );
 804b132:	2200      	movs	r2, #0
 804b134:	4b18      	ldr	r3, [pc, #96]	; (804b198 <RegionCommonComputeRxWindowParameters+0xbc>)
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 804b136:	f8ca 4000 	str.w	r4, [sl]
    *windowOffset = ( int32_t )ceil( ( 4.0 * tSymbol ) - ( ( *windowTimeout * tSymbol ) / 2.0 ) - wakeUpTime );
 804b13a:	4630      	mov	r0, r6
 804b13c:	4639      	mov	r1, r7
 804b13e:	f7f5 fb8b 	bl	8040858 <__aeabi_dmul>
 804b142:	4680      	mov	r8, r0
 804b144:	4620      	mov	r0, r4
 804b146:	4689      	mov	r9, r1
 804b148:	f7f5 fb0c 	bl	8040764 <__aeabi_ui2d>
 804b14c:	4632      	mov	r2, r6
 804b14e:	463b      	mov	r3, r7
 804b150:	f7f5 fb82 	bl	8040858 <__aeabi_dmul>
 804b154:	2200      	movs	r2, #0
 804b156:	4b11      	ldr	r3, [pc, #68]	; (804b19c <RegionCommonComputeRxWindowParameters+0xc0>)
 804b158:	f7f5 fb7e 	bl	8040858 <__aeabi_dmul>
 804b15c:	4602      	mov	r2, r0
 804b15e:	460b      	mov	r3, r1
 804b160:	4640      	mov	r0, r8
 804b162:	4649      	mov	r1, r9
 804b164:	f7f5 f9c0 	bl	80404e8 <__aeabi_dsub>
 804b168:	4606      	mov	r6, r0
 804b16a:	4628      	mov	r0, r5
 804b16c:	460f      	mov	r7, r1
 804b16e:	f7f5 faf9 	bl	8040764 <__aeabi_ui2d>
 804b172:	460b      	mov	r3, r1
 804b174:	4602      	mov	r2, r0
 804b176:	4639      	mov	r1, r7
 804b178:	4630      	mov	r0, r6
 804b17a:	f7f5 f9b5 	bl	80404e8 <__aeabi_dsub>
 804b17e:	ec41 0b10 	vmov	d0, r0, r1
 804b182:	f003 fd05 	bl	804eb90 <ceil>
 804b186:	ec51 0b10 	vmov	r0, r1, d0
 804b18a:	f7f5 fdff 	bl	8040d8c <__aeabi_d2iz>
 804b18e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 804b190:	6018      	str	r0, [r3, #0]
}
 804b192:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804b196:	bf00      	nop
 804b198:	40100000 	.word	0x40100000
 804b19c:	3fe00000 	.word	0x3fe00000

0804b1a0 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 804b1a0:	0040      	lsls	r0, r0, #1
 804b1a2:	ee07 0a90 	vmov	s15, r0
 804b1a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
{
 804b1aa:	b508      	push	{r3, lr}
    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 804b1ac:	ee30 0a67 	vsub.f32	s0, s0, s15
 804b1b0:	ee70 7a60 	vsub.f32	s15, s0, s1
 804b1b4:	ee17 0a90 	vmov	r0, s15
 804b1b8:	f7f5 faf6 	bl	80407a8 <__aeabi_f2d>
 804b1bc:	ec41 0b10 	vmov	d0, r0, r1
 804b1c0:	f003 fd66 	bl	804ec90 <floor>
 804b1c4:	ec51 0b10 	vmov	r0, r1, d0
 804b1c8:	f7f5 fde0 	bl	8040d8c <__aeabi_d2iz>

    return phyTxPower;
}
 804b1cc:	b240      	sxtb	r0, r0
 804b1ce:	bd08      	pop	{r3, pc}

0804b1d0 <RegionCommonCalcBackOff>:

void RegionCommonCalcBackOff( RegionCommonCalcBackOffParams_t* calcBackOffParams )
{
 804b1d0:	b570      	push	{r4, r5, r6, lr}
    uint8_t bandIdx = calcBackOffParams->Channels[calcBackOffParams->Channel].Band;
 804b1d2:	7ac3      	ldrb	r3, [r0, #11]
 804b1d4:	6802      	ldr	r2, [r0, #0]
 804b1d6:	7a86      	ldrb	r6, [r0, #10]
 804b1d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 804b1dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    uint16_t dutyCycle = calcBackOffParams->Bands[bandIdx].DCycle;
 804b1e0:	6842      	ldr	r2, [r0, #4]
 804b1e2:	7a5b      	ldrb	r3, [r3, #9]
 804b1e4:	011b      	lsls	r3, r3, #4
 804b1e6:	18d5      	adds	r5, r2, r3
 804b1e8:	5ad1      	ldrh	r1, [r2, r3]
    uint16_t joinDutyCycle = 0;

    // Reset time-off to initial value.
    calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 804b1ea:	2300      	movs	r3, #0
 804b1ec:	60eb      	str	r3, [r5, #12]

    if( calcBackOffParams->Joined == false )
 804b1ee:	7a43      	ldrb	r3, [r0, #9]
{
 804b1f0:	4604      	mov	r4, r0
    if( calcBackOffParams->Joined == false )
 804b1f2:	b973      	cbnz	r3, 804b212 <RegionCommonCalcBackOff+0x42>
    {
        // Get the join duty cycle
        joinDutyCycle = RegionCommonGetJoinDc( calcBackOffParams->ElapsedTime );
 804b1f4:	68c0      	ldr	r0, [r0, #12]
 804b1f6:	f7ff fe2b 	bl	804ae50 <RegionCommonGetJoinDc>
        // Apply the most restricting duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
        // Reset the timeoff if the last frame was not a join request and when the duty cycle is not enabled
        if( ( calcBackOffParams->DutyCycleEnabled == false ) && ( calcBackOffParams->LastTxIsJoinRequest == false ) )
 804b1fa:	b90e      	cbnz	r6, 804b200 <RegionCommonCalcBackOff+0x30>
 804b1fc:	7a23      	ldrb	r3, [r4, #8]
 804b1fe:	b153      	cbz	r3, 804b216 <RegionCommonCalcBackOff+0x46>
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 804b200:	4281      	cmp	r1, r0
 804b202:	bf38      	it	cc
 804b204:	4601      	movcc	r1, r0
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
        }
        else
        {
            // Apply band time-off.
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 804b206:	b289      	uxth	r1, r1
    }
    else
    {
        if( calcBackOffParams->DutyCycleEnabled == true )
        {
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 804b208:	6923      	ldr	r3, [r4, #16]
 804b20a:	3901      	subs	r1, #1
 804b20c:	4359      	muls	r1, r3
 804b20e:	60e9      	str	r1, [r5, #12]
        else
        {
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
        }
    }
}
 804b210:	e001      	b.n	804b216 <RegionCommonCalcBackOff+0x46>
        if( calcBackOffParams->DutyCycleEnabled == true )
 804b212:	2e00      	cmp	r6, #0
 804b214:	d1f8      	bne.n	804b208 <RegionCommonCalcBackOff+0x38>
}
 804b216:	bd70      	pop	{r4, r5, r6, pc}

0804b218 <certif_running>:

/* Exported functions definition---------------------------------------------------------*/
bool certif_running(void)
{
    return certifParam.Running;
}
 804b218:	4b01      	ldr	r3, [pc, #4]	; (804b220 <certif_running+0x8>)
 804b21a:	7818      	ldrb	r0, [r3, #0]
 804b21c:	4770      	bx	lr
 804b21e:	bf00      	nop
 804b220:	2000ac88 	.word	0x2000ac88

0804b224 <LORA_Join>:
  LoRaMacStart( );
}


void LORA_Join( void)
{
 804b224:	b570      	push	{r4, r5, r6, lr}
    MlmeReq_t mlmeReq;
  
    mlmeReq.Type = MLME_JOIN;
    mlmeReq.Req.Join.Datarate = LoRaParamInit->TxDatarate;
  
    JoinParameters = mlmeReq.Req.Join;
 804b226:	4c26      	ldr	r4, [pc, #152]	; (804b2c0 <LORA_Join+0x9c>)
    mibReq.Type = MIB_DEV_ADDR;
    mibReq.Param.DevAddr = DevAddr;
    LoRaMacMibSetRequestConfirm( &mibReq );

    mibReq.Type = MIB_F_NWK_S_INT_KEY;
    mibReq.Param.FNwkSIntKey = FNwkSIntKey;
 804b228:	4e26      	ldr	r6, [pc, #152]	; (804b2c4 <LORA_Join+0xa0>)
    mlmeReq.Req.Join.Datarate = LoRaParamInit->TxDatarate;
 804b22a:	68a3      	ldr	r3, [r4, #8]
    JoinParameters = mlmeReq.Req.Join;
 804b22c:	785b      	ldrb	r3, [r3, #1]
 804b22e:	7123      	strb	r3, [r4, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 804b230:	f104 052c 	add.w	r5, r4, #44	; 0x2c
    mibReq.Type = MIB_NET_ID;
 804b234:	2305      	movs	r3, #5
 804b236:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    LoRaMacMibSetRequestConfirm( &mibReq );
 804b23a:	4628      	mov	r0, r5
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 804b23c:	2300      	movs	r3, #0
 804b23e:	6323      	str	r3, [r4, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 804b240:	f7fd fdce 	bl	8048de0 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_DEV_ADDR;
 804b244:	2306      	movs	r3, #6
 804b246:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    LoRaMacMibSetRequestConfirm( &mibReq );
 804b24a:	4628      	mov	r0, r5
    mibReq.Param.DevAddr = DevAddr;
 804b24c:	4b1e      	ldr	r3, [pc, #120]	; (804b2c8 <LORA_Join+0xa4>)
 804b24e:	6323      	str	r3, [r4, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 804b250:	f7fd fdc6 	bl	8048de0 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_F_NWK_S_INT_KEY;
 804b254:	230c      	movs	r3, #12
 804b256:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    LoRaMacMibSetRequestConfirm( &mibReq );
 804b25a:	4628      	mov	r0, r5
    mibReq.Param.FNwkSIntKey = FNwkSIntKey;
 804b25c:	f106 0340 	add.w	r3, r6, #64	; 0x40
 804b260:	6323      	str	r3, [r4, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 804b262:	f7fd fdbd 	bl	8048de0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_S_NWK_S_INT_KEY;
 804b266:	230d      	movs	r3, #13
 804b268:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    mibReq.Param.SNwkSIntKey = SNwkSIntKey;
    LoRaMacMibSetRequestConfirm( &mibReq );
 804b26c:	4628      	mov	r0, r5
    mibReq.Param.SNwkSIntKey = SNwkSIntKey;
 804b26e:	f106 0350 	add.w	r3, r6, #80	; 0x50
 804b272:	6323      	str	r3, [r4, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 804b274:	f7fd fdb4 	bl	8048de0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_NWK_S_ENC_KEY;
 804b278:	230e      	movs	r3, #14
    mibReq.Param.NwkSEncKey = NwkSEncKey;
    LoRaMacMibSetRequestConfirm( &mibReq );
 804b27a:	4628      	mov	r0, r5
    mibReq.Type = MIB_NWK_S_ENC_KEY;
 804b27c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    mibReq.Param.NwkSEncKey = NwkSEncKey;
 804b280:	6326      	str	r6, [r4, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 804b282:	f7fd fdad 	bl	8048de0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_APP_S_KEY;
    mibReq.Param.AppSKey = AppSKey;
 804b286:	3610      	adds	r6, #16
    mibReq.Type = MIB_APP_S_KEY;
 804b288:	230f      	movs	r3, #15
    LoRaMacMibSetRequestConfirm( &mibReq );
 804b28a:	4628      	mov	r0, r5
    mibReq.Type = MIB_APP_S_KEY;
 804b28c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    mibReq.Param.AppSKey = AppSKey;
 804b290:	6326      	str	r6, [r4, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 804b292:	f7fd fda5 	bl	8048de0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 804b296:	2301      	movs	r3, #1
    mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
    LoRaMacMibSetRequestConfirm( &mibReq );
 804b298:	4628      	mov	r0, r5
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 804b29a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 804b29e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 804b2a2:	f7fd fd9d 	bl	8048de0 <LoRaMacMibSetRequestConfirm>
    abpLrWanVersion.Fields.Major    = 1;
    abpLrWanVersion.Fields.Minor    = 0;
    abpLrWanVersion.Fields.Revision = 3;
    abpLrWanVersion.Fields.Rfu      = 0;

    mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 804b2a6:	2335      	movs	r3, #53	; 0x35
 804b2a8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    mibReq.Param.AbpLrWanVersion = abpLrWanVersion;
    LoRaMacMibSetRequestConfirm( &mibReq );
 804b2ac:	4628      	mov	r0, r5
    mibReq.Param.AbpLrWanVersion = abpLrWanVersion;
 804b2ae:	4b07      	ldr	r3, [pc, #28]	; (804b2cc <LORA_Join+0xa8>)
 804b2b0:	6323      	str	r3, [r4, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 804b2b2:	f7fd fd95 	bl	8048de0 <LoRaMacMibSetRequestConfirm>

    LoRaMainCallbacks->LORA_HasJoined();
 804b2b6:	6823      	ldr	r3, [r4, #0]
#endif
}
 804b2b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LoRaMainCallbacks->LORA_HasJoined();
 804b2bc:	695b      	ldr	r3, [r3, #20]
 804b2be:	4718      	bx	r3
 804b2c0:	2000ada4 	.word	0x2000ada4
 804b2c4:	200010b0 	.word	0x200010b0
 804b2c8:	27452516 	.word	0x27452516
 804b2cc:	01000300 	.word	0x01000300

0804b2d0 <LORA_JoinStatus>:

LoraFlagStatus LORA_JoinStatus( void)
{
 804b2d0:	b500      	push	{lr}
 804b2d2:	b089      	sub	sp, #36	; 0x24
  MibRequestConfirm_t mibReq;

  mibReq.Type = MIB_NETWORK_ACTIVATION;
 804b2d4:	a808      	add	r0, sp, #32
 804b2d6:	2301      	movs	r3, #1
 804b2d8:	f800 3d20 	strb.w	r3, [r0, #-32]!
  
  LoRaMacMibGetRequestConfirm( &mibReq );
 804b2dc:	f7fd fca4 	bl	8048c28 <LoRaMacMibGetRequestConfirm>

  if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 804b2e0:	f89d 0004 	ldrb.w	r0, [sp, #4]
  }
  else
  {
    return LORA_SET;
  }
}
 804b2e4:	3000      	adds	r0, #0
 804b2e6:	bf18      	it	ne
 804b2e8:	2001      	movne	r0, #1
 804b2ea:	b009      	add	sp, #36	; 0x24
 804b2ec:	f85d fb04 	ldr.w	pc, [sp], #4

0804b2f0 <LORA_send>:



bool LORA_send(lora_AppData_t* AppData, LoraConfirm_t IsTxConfirmed)
{
 804b2f0:	b570      	push	{r4, r5, r6, lr}
 804b2f2:	b086      	sub	sp, #24
 804b2f4:	4604      	mov	r4, r0
 804b2f6:	460e      	mov	r6, r1
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;
    //PRINTF("Lora_send\r\n");
    /*if certification test are on going, application data is not sent*/
    if (certif_running() == true)
 804b2f8:	f7ff ff8e 	bl	804b218 <certif_running>
 804b2fc:	4605      	mov	r5, r0
 804b2fe:	b128      	cbz	r0, 804b30c <LORA_send+0x1c>
    {
    	PRINTF("Test mode");
 804b300:	481b      	ldr	r0, [pc, #108]	; (804b370 <LORA_send+0x80>)
 804b302:	f000 fb03 	bl	804b90c <TraceSend>
      return false;
 804b306:	2000      	movs	r0, #0
    if( LoRaMacMcpsRequest( &mcpsReq ) == LORAMAC_STATUS_OK )
    {
        return false;
    }
    return true;
}  
 804b308:	b006      	add	sp, #24
 804b30a:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacQueryTxPossible( AppData->BuffSize, &txInfo ) != LORAMAC_STATUS_OK )
 804b30c:	a901      	add	r1, sp, #4
 804b30e:	7920      	ldrb	r0, [r4, #4]
 804b310:	f7fd fc2a 	bl	8048b68 <LoRaMacQueryTxPossible>
 804b314:	4b17      	ldr	r3, [pc, #92]	; (804b374 <LORA_send+0x84>)
 804b316:	b178      	cbz	r0, 804b338 <LORA_send+0x48>
        mcpsReq.Req.Unconfirmed.Datarate = LoRaParamInit->TxDatarate;
 804b318:	689b      	ldr	r3, [r3, #8]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 804b31a:	9504      	str	r5, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 804b31c:	f8ad 5014 	strh.w	r5, [sp, #20]
        mcpsReq.Req.Unconfirmed.Datarate = LoRaParamInit->TxDatarate;
 804b320:	785b      	ldrb	r3, [r3, #1]
        mcpsReq.Type = MCPS_UNCONFIRMED;
 804b322:	f88d 5008 	strb.w	r5, [sp, #8]
    if( LoRaMacMcpsRequest( &mcpsReq ) == LORAMAC_STATUS_OK )
 804b326:	a802      	add	r0, sp, #8
            mcpsReq.Req.Confirmed.Datarate = LoRaParamInit->TxDatarate;
 804b328:	f88d 3016 	strb.w	r3, [sp, #22]
    if( LoRaMacMcpsRequest( &mcpsReq ) == LORAMAC_STATUS_OK )
 804b32c:	f7fd ffae 	bl	804928c <LoRaMacMcpsRequest>
 804b330:	3000      	adds	r0, #0
 804b332:	bf18      	it	ne
 804b334:	2001      	movne	r0, #1
 804b336:	e7e7      	b.n	804b308 <LORA_send+0x18>
 804b338:	689b      	ldr	r3, [r3, #8]
 804b33a:	7960      	ldrb	r0, [r4, #5]
 804b33c:	7921      	ldrb	r1, [r4, #4]
 804b33e:	6822      	ldr	r2, [r4, #0]
 804b340:	f993 3001 	ldrsb.w	r3, [r3, #1]
        if( IsTxConfirmed == LORAWAN_UNCONFIRMED_MSG )
 804b344:	b93e      	cbnz	r6, 804b356 <LORA_send+0x66>
            mcpsReq.Type = MCPS_UNCONFIRMED;
 804b346:	f88d 6008 	strb.w	r6, [sp, #8]
            mcpsReq.Req.Unconfirmed.fPort = AppData->Port;
 804b34a:	f88d 000c 	strb.w	r0, [sp, #12]
            mcpsReq.Req.Unconfirmed.fBufferSize = AppData->BuffSize;
 804b34e:	f8ad 1014 	strh.w	r1, [sp, #20]
            mcpsReq.Req.Unconfirmed.fBuffer = AppData->Buff;
 804b352:	9204      	str	r2, [sp, #16]
 804b354:	e7e7      	b.n	804b326 <LORA_send+0x36>
            mcpsReq.Type = MCPS_CONFIRMED;
 804b356:	2401      	movs	r4, #1
            mcpsReq.Req.Confirmed.fBuffer = AppData->Buff;
 804b358:	9204      	str	r2, [sp, #16]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 804b35a:	2208      	movs	r2, #8
            mcpsReq.Type = MCPS_CONFIRMED;
 804b35c:	f88d 4008 	strb.w	r4, [sp, #8]
            mcpsReq.Req.Confirmed.fPort = AppData->Port;
 804b360:	f88d 000c 	strb.w	r0, [sp, #12]
            mcpsReq.Req.Confirmed.fBufferSize = AppData->BuffSize;
 804b364:	f8ad 1014 	strh.w	r1, [sp, #20]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 804b368:	f88d 2017 	strb.w	r2, [sp, #23]
 804b36c:	e7db      	b.n	804b326 <LORA_send+0x36>
 804b36e:	bf00      	nop
 804b370:	0804f87f 	.word	0x0804f87f
 804b374:	2000ada4 	.word	0x2000ada4

0804b378 <LPM_SetOffMode>:

/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/
void LPM_SetOffMode(LPM_Id_t id, LPM_SetMode_t mode)
{
 804b378:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 804b37a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 804b37e:	b672      	cpsid	i
  BACKUP_PRIMASK();
  
  DISABLE_IRQ( );
  
  
  switch(mode)
 804b380:	b141      	cbz	r1, 804b394 <LPM_SetOffMode+0x1c>
 804b382:	2901      	cmp	r1, #1
 804b384:	d103      	bne.n	804b38e <LPM_SetOffMode+0x16>
  {
    case LPM_Disable:
    {
      OffModeDisable |= (uint32_t)id;
 804b386:	4b06      	ldr	r3, [pc, #24]	; (804b3a0 <LPM_SetOffMode+0x28>)
 804b388:	681a      	ldr	r2, [r3, #0]
 804b38a:	4302      	orrs	r2, r0
 804b38c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 804b38e:	f384 8810 	msr	PRIMASK, r4
  }
  
  RESTORE_PRIMASK( );

  return;
}
 804b392:	bd10      	pop	{r4, pc}
      OffModeDisable &= ~(uint32_t)id;
 804b394:	4902      	ldr	r1, [pc, #8]	; (804b3a0 <LPM_SetOffMode+0x28>)
 804b396:	680b      	ldr	r3, [r1, #0]
 804b398:	ea23 0300 	bic.w	r3, r3, r0
 804b39c:	600b      	str	r3, [r1, #0]
      break;
 804b39e:	e7f6      	b.n	804b38e <LPM_SetOffMode+0x16>
 804b3a0:	2000adf0 	.word	0x2000adf0

0804b3a4 <LPM_SetStopMode>:

void LPM_SetStopMode(LPM_Id_t id, LPM_SetMode_t mode)
{
 804b3a4:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 804b3a6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 804b3aa:	b672      	cpsid	i
  BACKUP_PRIMASK();
  
  DISABLE_IRQ( );
  
  
  switch(mode)
 804b3ac:	b141      	cbz	r1, 804b3c0 <LPM_SetStopMode+0x1c>
 804b3ae:	2901      	cmp	r1, #1
 804b3b0:	d103      	bne.n	804b3ba <LPM_SetStopMode+0x16>
  {
    case LPM_Disable:
    {
      StopModeDisable |= (uint32_t)id;
 804b3b2:	4b06      	ldr	r3, [pc, #24]	; (804b3cc <LPM_SetStopMode+0x28>)
 804b3b4:	685a      	ldr	r2, [r3, #4]
 804b3b6:	4302      	orrs	r2, r0
 804b3b8:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 804b3ba:	f384 8810 	msr	PRIMASK, r4
      break;
  }
  RESTORE_PRIMASK( );

  return;
}
 804b3be:	bd10      	pop	{r4, pc}
      StopModeDisable &= ~(uint32_t)id;
 804b3c0:	4902      	ldr	r1, [pc, #8]	; (804b3cc <LPM_SetStopMode+0x28>)
 804b3c2:	684b      	ldr	r3, [r1, #4]
 804b3c4:	ea23 0300 	bic.w	r3, r3, r0
 804b3c8:	604b      	str	r3, [r1, #4]
      break;
 804b3ca:	e7f6      	b.n	804b3ba <LPM_SetStopMode+0x16>
 804b3cc:	2000adf0 	.word	0x2000adf0

0804b3d0 <LPM_GetMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 804b3d0:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 804b3d4:	b672      	cpsid	i

  BACKUP_PRIMASK();
  
  DISABLE_IRQ( );

  if(StopModeDisable )
 804b3d6:	4b06      	ldr	r3, [pc, #24]	; (804b3f0 <LPM_GetMode+0x20>)
 804b3d8:	6859      	ldr	r1, [r3, #4]
 804b3da:	b939      	cbnz	r1, 804b3ec <LPM_GetMode+0x1c>
  {
    mode_selected = LPM_SleepMode;
  }
  else
  {
    if(OffModeDisable)
 804b3dc:	681b      	ldr	r3, [r3, #0]
 804b3de:	2b00      	cmp	r3, #0
    {
      mode_selected = LPM_StopMode;
    }
    else
    {
      mode_selected = LPM_OffMode;
 804b3e0:	bf14      	ite	ne
 804b3e2:	2001      	movne	r0, #1
 804b3e4:	2002      	moveq	r0, #2
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 804b3e6:	f382 8810 	msr	PRIMASK, r2
  }

  RESTORE_PRIMASK( );

  return mode_selected;
}
 804b3ea:	4770      	bx	lr
    mode_selected = LPM_SleepMode;
 804b3ec:	2000      	movs	r0, #0
 804b3ee:	e7fa      	b.n	804b3e6 <LPM_GetMode+0x16>
 804b3f0:	2000adf0 	.word	0x2000adf0

0804b3f4 <add_elementSize_and_inc_writeIdx>:
  }
}

static void add_elementSize_and_inc_writeIdx(queue_param_t* queue,uint16_t element_size)
{
  queue->queue_buff[queue->queue_write_idx++]=(uint8_t) (element_size>>8);
 804b3f4:	8843      	ldrh	r3, [r0, #2]
 804b3f6:	6882      	ldr	r2, [r0, #8]
{
 804b3f8:	b510      	push	{r4, lr}
  queue->queue_buff[queue->queue_write_idx++]=(uint8_t) (element_size>>8);
 804b3fa:	1c5c      	adds	r4, r3, #1
 804b3fc:	8044      	strh	r4, [r0, #2]
 804b3fe:	0a0c      	lsrs	r4, r1, #8
 804b400:	54d4      	strb	r4, [r2, r3]
  /*wrap if needed*/
  if ( queue->queue_write_idx == queue->queue_size)
 804b402:	8842      	ldrh	r2, [r0, #2]
 804b404:	88c3      	ldrh	r3, [r0, #6]
 804b406:	429a      	cmp	r2, r3
  {
    queue->queue_write_idx=0;
 804b408:	bf04      	itt	eq
 804b40a:	2300      	moveq	r3, #0
 804b40c:	8043      	strheq	r3, [r0, #2]
  }
  queue->queue_buff[queue->queue_write_idx++]=(uint8_t) (element_size);
 804b40e:	8843      	ldrh	r3, [r0, #2]
 804b410:	6882      	ldr	r2, [r0, #8]
 804b412:	1c5c      	adds	r4, r3, #1
 804b414:	8044      	strh	r4, [r0, #2]
 804b416:	54d1      	strb	r1, [r2, r3]
  /*wrap if needed*/
  if ( queue->queue_write_idx == queue->queue_size)
 804b418:	88c3      	ldrh	r3, [r0, #6]
 804b41a:	8842      	ldrh	r2, [r0, #2]
 804b41c:	429a      	cmp	r2, r3
  {
    queue->queue_write_idx=0;
 804b41e:	bf04      	itt	eq
 804b420:	2300      	moveq	r3, #0
 804b422:	8043      	strheq	r3, [r0, #2]
  }
}
 804b424:	bd10      	pop	{r4, pc}

0804b426 <circular_queue_init>:
  queue->queue_read_idx=0;
 804b426:	2300      	movs	r3, #0
 804b428:	6003      	str	r3, [r0, #0]
  queue->queue_write_idx=0;
 804b42a:	8083      	strh	r3, [r0, #4]
  queue->queue_buff=queue_buff;
 804b42c:	6081      	str	r1, [r0, #8]
  queue->queue_size=queue_size;
 804b42e:	80c2      	strh	r2, [r0, #6]
  queue->queue_full=0;
 804b430:	7303      	strb	r3, [r0, #12]
}
 804b432:	4770      	bx	lr

0804b434 <circular_queue_add>:
{
 804b434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (queue->queue_write_idx>=queue->queue_read_idx)
 804b436:	8803      	ldrh	r3, [r0, #0]
{
 804b438:	4615      	mov	r5, r2
  if (queue->queue_write_idx>=queue->queue_read_idx)
 804b43a:	8842      	ldrh	r2, [r0, #2]
 804b43c:	429a      	cmp	r2, r3
{
 804b43e:	460e      	mov	r6, r1
    free_size=queue->queue_size-(queue->queue_write_idx-queue->queue_read_idx); 
 804b440:	bf24      	itt	cs
 804b442:	88c1      	ldrhcs	r1, [r0, #6]
 804b444:	185b      	addcs	r3, r3, r1
  if ( queue->queue_full==1)
 804b446:	7b01      	ldrb	r1, [r0, #12]
    free_size=(queue->queue_read_idx-queue->queue_write_idx); 
 804b448:	1a9b      	subs	r3, r3, r2
    free_size=0;
 804b44a:	2901      	cmp	r1, #1
    free_size=(queue->queue_read_idx-queue->queue_write_idx); 
 804b44c:	b21b      	sxth	r3, r3
  if ((buff_size+ELEMENT_SIZE_LEN<=free_buff_len)&& 
 804b44e:	f105 0101 	add.w	r1, r5, #1
    free_size=0;
 804b452:	bf08      	it	eq
 804b454:	2300      	moveq	r3, #0
  if ((buff_size+ELEMENT_SIZE_LEN<=free_buff_len)&& 
 804b456:	4299      	cmp	r1, r3
{
 804b458:	4604      	mov	r4, r0
  if ((buff_size+ELEMENT_SIZE_LEN<=free_buff_len)&& 
 804b45a:	da2c      	bge.n	804b4b6 <circular_queue_add+0x82>
      ((queue->queue_write_idx+buff_size+ELEMENT_SIZE_LEN<=queue->queue_size) 
 804b45c:	88c1      	ldrh	r1, [r0, #6]
 804b45e:	18a8      	adds	r0, r5, r2
 804b460:	3001      	adds	r0, #1
  if ((buff_size+ELEMENT_SIZE_LEN<=free_buff_len)&& 
 804b462:	4288      	cmp	r0, r1
 804b464:	db02      	blt.n	804b46c <circular_queue_add+0x38>
        || (queue->queue_write_idx>=queue->queue_size-ELEMENT_SIZE_LEN))) /*elementSize cut in 2 or elementSize at Top*/
 804b466:	3902      	subs	r1, #2
 804b468:	428a      	cmp	r2, r1
 804b46a:	db24      	blt.n	804b4b6 <circular_queue_add+0x82>
    add_elementSize_and_inc_writeIdx(queue, buff_size);
 804b46c:	4629      	mov	r1, r5
 804b46e:	4620      	mov	r0, r4
 804b470:	f7ff ffc0 	bl	804b3f4 <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff,buff_size);
 804b474:	8863      	ldrh	r3, [r4, #2]
 804b476:	1e5a      	subs	r2, r3, #1
 804b478:	68a3      	ldr	r3, [r4, #8]
 804b47a:	4413      	add	r3, r2
 804b47c:	1972      	adds	r2, r6, r5
  while(size--)
 804b47e:	42b2      	cmp	r2, r6
 804b480:	d114      	bne.n	804b4ac <circular_queue_add+0x78>
    queue->queue_write_idx+=buff_size;
 804b482:	8862      	ldrh	r2, [r4, #2]
    if (queue->queue_write_idx==queue->queue_size)
 804b484:	88e3      	ldrh	r3, [r4, #6]
    queue->queue_write_idx+=buff_size;
 804b486:	4415      	add	r5, r2
 804b488:	b2ad      	uxth	r5, r5
    if (queue->queue_write_idx==queue->queue_size)
 804b48a:	42ab      	cmp	r3, r5
        queue->queue_write_idx=0;
 804b48c:	bf08      	it	eq
 804b48e:	2300      	moveq	r3, #0
    queue->queue_write_idx+=buff_size;
 804b490:	8065      	strh	r5, [r4, #2]
        queue->queue_write_idx=0;
 804b492:	bf08      	it	eq
 804b494:	8063      	strheq	r3, [r4, #2]
    queue->queue_nb_element++; 
 804b496:	88a3      	ldrh	r3, [r4, #4]
    if (queue->queue_write_idx== queue->queue_read_idx)
 804b498:	8862      	ldrh	r2, [r4, #2]
    queue->queue_nb_element++; 
 804b49a:	3301      	adds	r3, #1
 804b49c:	80a3      	strh	r3, [r4, #4]
    if (queue->queue_write_idx== queue->queue_read_idx)
 804b49e:	8823      	ldrh	r3, [r4, #0]
 804b4a0:	429a      	cmp	r2, r3
      queue->queue_full=1;
 804b4a2:	bf04      	itt	eq
 804b4a4:	2301      	moveq	r3, #1
 804b4a6:	7323      	strbeq	r3, [r4, #12]
    status=0;
 804b4a8:	2000      	movs	r0, #0
}
 804b4aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *out++= *in++;
 804b4ac:	f816 1b01 	ldrb.w	r1, [r6], #1
 804b4b0:	f803 1f01 	strb.w	r1, [r3, #1]!
 804b4b4:	e7e3      	b.n	804b47e <circular_queue_add+0x4a>
  else if (buff_size+2*ELEMENT_SIZE_LEN<=free_buff_len)
 804b4b6:	1ce9      	adds	r1, r5, #3
 804b4b8:	428b      	cmp	r3, r1
 804b4ba:	dd31      	ble.n	804b520 <circular_queue_add+0xec>
    uint16_t top_size = queue->queue_size-(queue->queue_write_idx+ELEMENT_SIZE_LEN);
 804b4bc:	88e7      	ldrh	r7, [r4, #6]
 804b4be:	3f02      	subs	r7, #2
 804b4c0:	1abf      	subs	r7, r7, r2
 804b4c2:	b2bf      	uxth	r7, r7
    add_elementSize_and_inc_writeIdx(queue,top_size);
 804b4c4:	4639      	mov	r1, r7
 804b4c6:	4620      	mov	r0, r4
 804b4c8:	f7ff ff94 	bl	804b3f4 <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff,top_size);
 804b4cc:	8863      	ldrh	r3, [r4, #2]
 804b4ce:	1e5a      	subs	r2, r3, #1
 804b4d0:	68a3      	ldr	r3, [r4, #8]
 804b4d2:	4413      	add	r3, r2
 804b4d4:	19f2      	adds	r2, r6, r7
  while(size--)
 804b4d6:	4296      	cmp	r6, r2
 804b4d8:	d118      	bne.n	804b50c <circular_queue_add+0xd8>
    buff_size-=top_size;
 804b4da:	1bed      	subs	r5, r5, r7
    queue->queue_write_idx=0;
 804b4dc:	2300      	movs	r3, #0
    buff_size-=top_size;
 804b4de:	b2ad      	uxth	r5, r5
    queue->queue_write_idx=0;
 804b4e0:	8063      	strh	r3, [r4, #2]
    add_elementSize_and_inc_writeIdx(queue, buff_size);
 804b4e2:	4629      	mov	r1, r5
 804b4e4:	4620      	mov	r0, r4
 804b4e6:	f7ff ff85 	bl	804b3f4 <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff+top_size,buff_size);
 804b4ea:	8863      	ldrh	r3, [r4, #2]
 804b4ec:	1e5a      	subs	r2, r3, #1
 804b4ee:	68a3      	ldr	r3, [r4, #8]
 804b4f0:	4413      	add	r3, r2
 804b4f2:	1972      	adds	r2, r6, r5
  while(size--)
 804b4f4:	42b2      	cmp	r2, r6
 804b4f6:	d10e      	bne.n	804b516 <circular_queue_add+0xe2>
    queue->queue_nb_element+=2;
 804b4f8:	88a3      	ldrh	r3, [r4, #4]
    queue->queue_write_idx+=buff_size;
 804b4fa:	8862      	ldrh	r2, [r4, #2]
    queue->queue_nb_element+=2;
 804b4fc:	3302      	adds	r3, #2
    queue->queue_write_idx+=buff_size;
 804b4fe:	4415      	add	r5, r2
    queue->queue_nb_element+=2;
 804b500:	80a3      	strh	r3, [r4, #4]
    if (queue->queue_write_idx== queue->queue_read_idx)
 804b502:	8823      	ldrh	r3, [r4, #0]
    queue->queue_write_idx+=buff_size;
 804b504:	b2ad      	uxth	r5, r5
 804b506:	8065      	strh	r5, [r4, #2]
    if (queue->queue_write_idx== queue->queue_read_idx)
 804b508:	42ab      	cmp	r3, r5
 804b50a:	e7ca      	b.n	804b4a2 <circular_queue_add+0x6e>
    *out++= *in++;
 804b50c:	f816 1b01 	ldrb.w	r1, [r6], #1
 804b510:	f803 1f01 	strb.w	r1, [r3, #1]!
 804b514:	e7df      	b.n	804b4d6 <circular_queue_add+0xa2>
 804b516:	f816 1b01 	ldrb.w	r1, [r6], #1
 804b51a:	f803 1f01 	strb.w	r1, [r3, #1]!
 804b51e:	e7e9      	b.n	804b4f4 <circular_queue_add+0xc0>
    status=-1;
 804b520:	f04f 30ff 	mov.w	r0, #4294967295
  return status;
 804b524:	e7c1      	b.n	804b4aa <circular_queue_add+0x76>

0804b526 <circular_queue_get>:
  if (queue->queue_nb_element==0)
 804b526:	8883      	ldrh	r3, [r0, #4]
{
 804b528:	b570      	push	{r4, r5, r6, lr}
  if (queue->queue_nb_element==0)
 804b52a:	b1ab      	cbz	r3, 804b558 <circular_queue_get+0x32>
    uint16_t read_idx=queue->queue_read_idx;
 804b52c:	8805      	ldrh	r5, [r0, #0]
    size=(uint16_t) queue->queue_buff[read_idx++]<<8;
 804b52e:	6884      	ldr	r4, [r0, #8]
 804b530:	1c6b      	adds	r3, r5, #1
 804b532:	5d66      	ldrb	r6, [r4, r5]
    if (read_idx==queue->queue_size)
 804b534:	88c5      	ldrh	r5, [r0, #6]
    size=(uint16_t) queue->queue_buff[read_idx++]<<8;
 804b536:	b29b      	uxth	r3, r3
      read_idx=0;
 804b538:	429d      	cmp	r5, r3
 804b53a:	bf08      	it	eq
 804b53c:	2300      	moveq	r3, #0
    size|=(uint16_t) queue->queue_buff[read_idx++];
 804b53e:	1c58      	adds	r0, r3, #1
 804b540:	b280      	uxth	r0, r0
 804b542:	5ce3      	ldrb	r3, [r4, r3]
      read_idx=0;
 804b544:	4285      	cmp	r5, r0
 804b546:	bf08      	it	eq
 804b548:	2000      	moveq	r0, #0
    *buff= queue->queue_buff+read_idx;
 804b54a:	4420      	add	r0, r4
    size|=(uint16_t) queue->queue_buff[read_idx++];
 804b54c:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *buff= queue->queue_buff+read_idx;
 804b550:	6008      	str	r0, [r1, #0]
    * buff_size=size;
 804b552:	8013      	strh	r3, [r2, #0]
    status=0;
 804b554:	2000      	movs	r0, #0
}
 804b556:	bd70      	pop	{r4, r5, r6, pc}
    status=-1;
 804b558:	f04f 30ff 	mov.w	r0, #4294967295
  return status;
 804b55c:	e7fb      	b.n	804b556 <circular_queue_get+0x30>

0804b55e <circular_queue_remove>:
  if (queue->queue_nb_element==0)
 804b55e:	8882      	ldrh	r2, [r0, #4]
{
 804b560:	b570      	push	{r4, r5, r6, lr}
  if (queue->queue_nb_element==0)
 804b562:	b322      	cbz	r2, 804b5ae <circular_queue_remove+0x50>
    size=(uint16_t) queue->queue_buff[queue->queue_read_idx++]<<8;
 804b564:	8803      	ldrh	r3, [r0, #0]
    if (queue->queue_read_idx==queue->queue_size)
 804b566:	88c4      	ldrh	r4, [r0, #6]
    size=(uint16_t) queue->queue_buff[queue->queue_read_idx++]<<8;
 804b568:	6886      	ldr	r6, [r0, #8]
 804b56a:	1c59      	adds	r1, r3, #1
 804b56c:	b289      	uxth	r1, r1
    if (queue->queue_read_idx==queue->queue_size)
 804b56e:	42a1      	cmp	r1, r4
    size=(uint16_t) queue->queue_buff[queue->queue_read_idx++]<<8;
 804b570:	8001      	strh	r1, [r0, #0]
      queue->queue_read_idx=0;
 804b572:	bf08      	it	eq
 804b574:	2100      	moveq	r1, #0
    size=(uint16_t) queue->queue_buff[queue->queue_read_idx++]<<8;
 804b576:	5cf3      	ldrb	r3, [r6, r3]
      queue->queue_read_idx=0;
 804b578:	bf08      	it	eq
 804b57a:	8001      	strheq	r1, [r0, #0]
    size|=(uint16_t) queue->queue_buff[queue->queue_read_idx++];
 804b57c:	8805      	ldrh	r5, [r0, #0]
 804b57e:	1c69      	adds	r1, r5, #1
 804b580:	b289      	uxth	r1, r1
    if (queue->queue_read_idx==queue->queue_size)
 804b582:	428c      	cmp	r4, r1
    size|=(uint16_t) queue->queue_buff[queue->queue_read_idx++];
 804b584:	8001      	strh	r1, [r0, #0]
      queue->queue_read_idx=0;
 804b586:	bf08      	it	eq
 804b588:	2100      	moveq	r1, #0
    size|=(uint16_t) queue->queue_buff[queue->queue_read_idx++];
 804b58a:	5d75      	ldrb	r5, [r6, r5]
      queue->queue_read_idx=0;
 804b58c:	bf08      	it	eq
 804b58e:	8001      	strheq	r1, [r0, #0]
    queue->queue_read_idx+=size;
 804b590:	8801      	ldrh	r1, [r0, #0]
    size=(uint16_t) queue->queue_buff[queue->queue_read_idx++]<<8;
 804b592:	021b      	lsls	r3, r3, #8
    size|=(uint16_t) queue->queue_buff[queue->queue_read_idx++];
 804b594:	432b      	orrs	r3, r5
    queue->queue_read_idx+=size;
 804b596:	440b      	add	r3, r1
 804b598:	b29b      	uxth	r3, r3
    if (queue->queue_read_idx==queue->queue_size)
 804b59a:	429c      	cmp	r4, r3
        queue->queue_read_idx=0;
 804b59c:	bf08      	it	eq
 804b59e:	2300      	moveq	r3, #0
 804b5a0:	8003      	strh	r3, [r0, #0]
    queue->queue_nb_element--;
 804b5a2:	3a01      	subs	r2, #1
    queue->queue_full=0;
 804b5a4:	2300      	movs	r3, #0
    queue->queue_nb_element--;
 804b5a6:	8082      	strh	r2, [r0, #4]
    queue->queue_full=0;
 804b5a8:	7303      	strb	r3, [r0, #12]
    status=0;
 804b5aa:	4618      	mov	r0, r3
}
 804b5ac:	bd70      	pop	{r4, r5, r6, pc}
      status=-1;
 804b5ae:	f04f 30ff 	mov.w	r0, #4294967295
  return status;
 804b5b2:	e7fb      	b.n	804b5ac <circular_queue_remove+0x4e>

0804b5b4 <circular_queue_sense>:
  if (queue->queue_nb_element==0)
 804b5b4:	8880      	ldrh	r0, [r0, #4]
 804b5b6:	fab0 f080 	clz	r0, r0
 804b5ba:	0940      	lsrs	r0, r0, #5
}
 804b5bc:	4240      	negs	r0, r0
 804b5be:	4770      	bx	lr

0804b5c0 <SysTimeAdd>:
static void CalendarDiv60( uint32_t in, uint32_t* out, uint32_t* remainder );

const char *WeekDayString[]={ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 804b5c0:	b082      	sub	sp, #8
 804b5c2:	b082      	sub	sp, #8
 804b5c4:	f10d 0c08 	add.w	ip, sp, #8
 804b5c8:	e90c 0006 	stmdb	ip, {r1, r2}
    SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };

    c.Seconds = a.Seconds + b.Seconds;
 804b5cc:	9a00      	ldr	r2, [sp, #0]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 804b5ce:	f8bd 1010 	ldrh.w	r1, [sp, #16]
{
 804b5d2:	9303      	str	r3, [sp, #12]
    c.Seconds = a.Seconds + b.Seconds;
 804b5d4:	4413      	add	r3, r2
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 804b5d6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 804b5da:	440a      	add	r2, r1
 804b5dc:	b292      	uxth	r2, r2
 804b5de:	b211      	sxth	r1, r2
    if( c.SubSeconds >= 1000 )
 804b5e0:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
    {
        c.Seconds++;
        c.SubSeconds -= 1000;
 804b5e4:	bfa2      	ittt	ge
 804b5e6:	f5a2 727a 	subge.w	r2, r2, #1000	; 0x3e8
        c.Seconds++;
 804b5ea:	3301      	addge	r3, #1
        c.SubSeconds -= 1000;
 804b5ec:	b211      	sxthge	r1, r2
    }
    return c;
 804b5ee:	6003      	str	r3, [r0, #0]
 804b5f0:	8081      	strh	r1, [r0, #4]
}
 804b5f2:	b002      	add	sp, #8
 804b5f4:	b002      	add	sp, #8
 804b5f6:	4770      	bx	lr

0804b5f8 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 804b5f8:	b082      	sub	sp, #8
 804b5fa:	b082      	sub	sp, #8
 804b5fc:	f10d 0c08 	add.w	ip, sp, #8
 804b600:	e90c 0006 	stmdb	ip, {r1, r2}
    SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };

    c.Seconds = a.Seconds - b.Seconds;
 804b604:	9a00      	ldr	r2, [sp, #0]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 804b606:	f8bd 1010 	ldrh.w	r1, [sp, #16]
{
 804b60a:	9303      	str	r3, [sp, #12]
    c.Seconds = a.Seconds - b.Seconds;
 804b60c:	1ad3      	subs	r3, r2, r3
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 804b60e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 804b612:	1a52      	subs	r2, r2, r1
 804b614:	b292      	uxth	r2, r2
 804b616:	b211      	sxth	r1, r2
    if( c.SubSeconds < 0 )
 804b618:	2900      	cmp	r1, #0
    {
        c.Seconds--;
        c.SubSeconds += 1000;
 804b61a:	bfbe      	ittt	lt
 804b61c:	f502 727a 	addlt.w	r2, r2, #1000	; 0x3e8
        c.Seconds--;
 804b620:	f103 33ff 	addlt.w	r3, r3, #4294967295
        c.SubSeconds += 1000;
 804b624:	b211      	sxthlt	r1, r2
    }
    return c;
 804b626:	6003      	str	r3, [r0, #0]
 804b628:	8081      	strh	r1, [r0, #4]
}
 804b62a:	b002      	add	sp, #8
 804b62c:	b002      	add	sp, #8
 804b62e:	4770      	bx	lr

0804b630 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 804b630:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 804b632:	466b      	mov	r3, sp
 804b634:	e883 0003 	stmia.w	r3, {r0, r1}
    SysTime_t DeltaTime;
  
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 804b638:	a804      	add	r0, sp, #16
 804b63a:	2300      	movs	r3, #0
 804b63c:	f820 3d04 	strh.w	r3, [r0, #-4]!
 804b640:	9302      	str	r3, [sp, #8]

    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 804b642:	f000 fe95 	bl	804c370 <HW_RTC_GetCalendarTime>
    c.Seconds = a.Seconds - b.Seconds;
 804b646:	9b00      	ldr	r3, [sp, #0]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 804b648:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 804b64c:	9002      	str	r0, [sp, #8]
    c.Seconds = a.Seconds - b.Seconds;
 804b64e:	1a18      	subs	r0, r3, r0
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 804b650:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 804b654:	1a5b      	subs	r3, r3, r1
 804b656:	b29b      	uxth	r3, r3
 804b658:	b219      	sxth	r1, r3
    if( c.SubSeconds < 0 )
 804b65a:	2900      	cmp	r1, #0
        c.SubSeconds += 1000;
 804b65c:	bfbe      	ittt	lt
 804b65e:	f503 737a 	addlt.w	r3, r3, #1000	; 0x3e8
        c.Seconds--;
 804b662:	f100 30ff 	addlt.w	r0, r0, #4294967295
        c.SubSeconds += 1000;
 804b666:	b219      	sxthlt	r1, r3

    // sysTime is epoch
    DeltaTime = SysTimeSub( sysTime, calendarTime );

    HW_RTC_BKUPWrite( DeltaTime.Seconds, ( uint32_t )DeltaTime.SubSeconds );
 804b668:	f000 fe94 	bl	804c394 <HW_RTC_BKUPWrite>
}
 804b66c:	b005      	add	sp, #20
 804b66e:	f85d fb04 	ldr.w	pc, [sp], #4

0804b672 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 804b672:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 804b674:	4604      	mov	r4, r0
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 804b676:	a804      	add	r0, sp, #16
 804b678:	2300      	movs	r3, #0
 804b67a:	f820 3d0c 	strh.w	r3, [r0, #-12]!
 804b67e:	9300      	str	r3, [sp, #0]
    SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
    SysTime_t DeltaTime;

    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 804b680:	f000 fe76 	bl	804c370 <HW_RTC_GetCalendarTime>

    HW_RTC_BKUPRead( &DeltaTime.Seconds, ( uint32_t* )&DeltaTime.SubSeconds );
 804b684:	a903      	add	r1, sp, #12
    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 804b686:	9000      	str	r0, [sp, #0]
    HW_RTC_BKUPRead( &DeltaTime.Seconds, ( uint32_t* )&DeltaTime.SubSeconds );
 804b688:	a802      	add	r0, sp, #8
 804b68a:	f000 fe95 	bl	804c3b8 <HW_RTC_BKUPRead>
    c.Seconds = a.Seconds + b.Seconds;
 804b68e:	9b00      	ldr	r3, [sp, #0]
 804b690:	9a02      	ldr	r2, [sp, #8]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 804b692:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    c.Seconds = a.Seconds + b.Seconds;
 804b696:	441a      	add	r2, r3
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 804b698:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 804b69c:	440b      	add	r3, r1
 804b69e:	b29b      	uxth	r3, r3
 804b6a0:	b219      	sxth	r1, r3
    if( c.SubSeconds >= 1000 )
 804b6a2:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
        c.SubSeconds -= 1000;
 804b6a6:	bfa2      	ittt	ge
 804b6a8:	f5a3 737a 	subge.w	r3, r3, #1000	; 0x3e8
        c.Seconds++;
 804b6ac:	3201      	addge	r2, #1
        c.SubSeconds -= 1000;
 804b6ae:	b219      	sxthge	r1, r3

    sysTime = SysTimeAdd( DeltaTime, calendarTime );

    return sysTime;
}
 804b6b0:	4620      	mov	r0, r4
    return sysTime;
 804b6b2:	6022      	str	r2, [r4, #0]
 804b6b4:	80a1      	strh	r1, [r4, #4]
}
 804b6b6:	b004      	add	sp, #16
 804b6b8:	bd10      	pop	{r4, pc}

0804b6ba <TimerSetTimeout>:
    cur = cur->Next;
  }
  return false;
}
static void TimerSetTimeout( TimerEvent_t *obj )
{
 804b6ba:	b570      	push	{r4, r5, r6, lr}
 804b6bc:	4604      	mov	r4, r0
  int32_t minTicks= HW_RTC_GetMinimumTimeout( );
 804b6be:	f000 fce3 	bl	804c088 <HW_RTC_GetMinimumTimeout>
  obj->IsNext2Expire = true; 
 804b6c2:	2301      	movs	r3, #1
 804b6c4:	7263      	strb	r3, [r4, #9]
  int32_t minTicks= HW_RTC_GetMinimumTimeout( );
 804b6c6:	4605      	mov	r5, r0

  // In case deadline too soon
  if(obj->Timestamp  < (HW_RTC_GetTimerElapsedTime(  ) + minTicks) )
 804b6c8:	6826      	ldr	r6, [r4, #0]
 804b6ca:	f000 fcf3 	bl	804c0b4 <HW_RTC_GetTimerElapsedTime>
 804b6ce:	4428      	add	r0, r5
 804b6d0:	4286      	cmp	r6, r0
 804b6d2:	d203      	bcs.n	804b6dc <TimerSetTimeout+0x22>
  {
    obj->Timestamp = HW_RTC_GetTimerElapsedTime(  ) + minTicks;
 804b6d4:	f000 fcee 	bl	804c0b4 <HW_RTC_GetTimerElapsedTime>
 804b6d8:	4428      	add	r0, r5
 804b6da:	6020      	str	r0, [r4, #0]
  }
  HW_RTC_SetAlarm( obj->Timestamp );
 804b6dc:	6820      	ldr	r0, [r4, #0]
}
 804b6de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HW_RTC_SetAlarm( obj->Timestamp );
 804b6e2:	f000 bd13 	b.w	804c10c <HW_RTC_SetAlarm>
	...

0804b6e8 <TimerInsertNewHeadTimer>:
  obj->Next = NULL;
}

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
  TimerEvent_t* cur = TimerListHead;
 804b6e8:	4b04      	ldr	r3, [pc, #16]	; (804b6fc <TimerInsertNewHeadTimer+0x14>)
 804b6ea:	681a      	ldr	r2, [r3, #0]

  if( cur != NULL )
 804b6ec:	b10a      	cbz	r2, 804b6f2 <TimerInsertNewHeadTimer+0xa>
  {
    cur->IsNext2Expire = false;
 804b6ee:	2100      	movs	r1, #0
 804b6f0:	7251      	strb	r1, [r2, #9]
  }

  obj->Next = cur;
 804b6f2:	6142      	str	r2, [r0, #20]
  TimerListHead = obj;
 804b6f4:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 804b6f6:	f7ff bfe0 	b.w	804b6ba <TimerSetTimeout>
 804b6fa:	bf00      	nop
 804b6fc:	2000adf8 	.word	0x2000adf8

0804b700 <TimerInit>:
  obj->Timestamp = 0;
 804b700:	2300      	movs	r3, #0
  obj->ReloadValue = 0;
 804b702:	e9c0 3300 	strd	r3, r3, [r0]
  obj->IsStarted = false;
 804b706:	7203      	strb	r3, [r0, #8]
  obj->IsNext2Expire = false;
 804b708:	7243      	strb	r3, [r0, #9]
  obj->Context = NULL;
 804b70a:	e9c0 1303 	strd	r1, r3, [r0, #12]
  obj->Next = NULL;
 804b70e:	6143      	str	r3, [r0, #20]
}
 804b710:	4770      	bx	lr
	...

0804b714 <TimerStart>:
{
 804b714:	b570      	push	{r4, r5, r6, lr}
 804b716:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 804b718:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 804b71c:	b672      	cpsid	i
  if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 804b71e:	b170      	cbz	r0, 804b73e <TimerStart+0x2a>
  TimerEvent_t* cur = TimerListHead;
 804b720:	4e16      	ldr	r6, [pc, #88]	; (804b77c <TimerStart+0x68>)
 804b722:	6831      	ldr	r1, [r6, #0]
 804b724:	460b      	mov	r3, r1
  while( cur != NULL )
 804b726:	b96b      	cbnz	r3, 804b744 <TimerStart+0x30>
  obj->Timestamp = obj->ReloadValue;
 804b728:	6862      	ldr	r2, [r4, #4]
 804b72a:	6022      	str	r2, [r4, #0]
  obj->IsStarted = true;
 804b72c:	2201      	movs	r2, #1
 804b72e:	7222      	strb	r2, [r4, #8]
  obj->IsNext2Expire = false;
 804b730:	7263      	strb	r3, [r4, #9]
  if( TimerListHead == NULL )
 804b732:	b959      	cbnz	r1, 804b74c <TimerStart+0x38>
    HW_RTC_SetTimerContext( );
 804b734:	f000 fdd2 	bl	804c2dc <HW_RTC_SetTimerContext>
      TimerInsertNewHeadTimer( obj);
 804b738:	4620      	mov	r0, r4
 804b73a:	f7ff ffd5 	bl	804b6e8 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 804b73e:	f385 8810 	msr	PRIMASK, r5
}
 804b742:	bd70      	pop	{r4, r5, r6, pc}
    if( cur == obj )
 804b744:	429c      	cmp	r4, r3
 804b746:	d0fa      	beq.n	804b73e <TimerStart+0x2a>
    cur = cur->Next;
 804b748:	695b      	ldr	r3, [r3, #20]
 804b74a:	e7ec      	b.n	804b726 <TimerStart+0x12>
    elapsedTime = HW_RTC_GetTimerElapsedTime( );
 804b74c:	f000 fcb2 	bl	804c0b4 <HW_RTC_GetTimerElapsedTime>
    obj->Timestamp += elapsedTime;
 804b750:	6823      	ldr	r3, [r4, #0]
 804b752:	4418      	add	r0, r3
    if( obj->Timestamp < TimerListHead->Timestamp )
 804b754:	6833      	ldr	r3, [r6, #0]
    obj->Timestamp += elapsedTime;
 804b756:	6020      	str	r0, [r4, #0]
    if( obj->Timestamp < TimerListHead->Timestamp )
 804b758:	681a      	ldr	r2, [r3, #0]
 804b75a:	4290      	cmp	r0, r2
 804b75c:	d3ec      	bcc.n	804b738 <TimerStart+0x24>
  TimerEvent_t* next = TimerListHead->Next;
 804b75e:	695a      	ldr	r2, [r3, #20]
  while (cur->Next != NULL )
 804b760:	6959      	ldr	r1, [r3, #20]
 804b762:	b911      	cbnz	r1, 804b76a <TimerStart+0x56>
  cur->Next = obj;
 804b764:	615c      	str	r4, [r3, #20]
  obj->Next = NULL;
 804b766:	6161      	str	r1, [r4, #20]
 804b768:	e7e9      	b.n	804b73e <TimerStart+0x2a>
    if( obj->Timestamp  > next->Timestamp )
 804b76a:	6811      	ldr	r1, [r2, #0]
 804b76c:	4288      	cmp	r0, r1
 804b76e:	d902      	bls.n	804b776 <TimerStart+0x62>
        next = next->Next;
 804b770:	4613      	mov	r3, r2
 804b772:	6952      	ldr	r2, [r2, #20]
 804b774:	e7f4      	b.n	804b760 <TimerStart+0x4c>
        cur->Next = obj;
 804b776:	615c      	str	r4, [r3, #20]
        obj->Next = next;
 804b778:	6162      	str	r2, [r4, #20]
 804b77a:	e7e0      	b.n	804b73e <TimerStart+0x2a>
 804b77c:	2000adf8 	.word	0x2000adf8

0804b780 <TimerIrqHandler>:
{
 804b780:	b570      	push	{r4, r5, r6, lr}
  uint32_t old =  HW_RTC_GetTimerContext( );
 804b782:	f000 fdef 	bl	804c364 <HW_RTC_GetTimerContext>
  if ( TimerListHead != NULL )
 804b786:	4c1b      	ldr	r4, [pc, #108]	; (804b7f4 <TimerIrqHandler+0x74>)
  uint32_t old =  HW_RTC_GetTimerContext( );
 804b788:	4605      	mov	r5, r0
  uint32_t now =  HW_RTC_SetTimerContext( );
 804b78a:	f000 fda7 	bl	804c2dc <HW_RTC_SetTimerContext>
  if ( TimerListHead != NULL )
 804b78e:	6822      	ldr	r2, [r4, #0]
 804b790:	b19a      	cbz	r2, 804b7ba <TimerIrqHandler+0x3a>
  uint32_t DeltaContext = now - old; //intentionnal wrap around
 804b792:	1b40      	subs	r0, r0, r5
 804b794:	4613      	mov	r3, r2
        next->Timestamp = 0 ;
 804b796:	2500      	movs	r5, #0
    for (cur=TimerListHead; cur->Next != NULL; cur= cur->Next)
 804b798:	695b      	ldr	r3, [r3, #20]
 804b79a:	b92b      	cbnz	r3, 804b7a8 <TimerIrqHandler+0x28>
    cur->IsStarted = false;
 804b79c:	7213      	strb	r3, [r2, #8]
    exec_cb( cur->Callback, cur->Context );
 804b79e:	68d3      	ldr	r3, [r2, #12]
    TimerListHead = TimerListHead->Next;
 804b7a0:	6951      	ldr	r1, [r2, #20]
 804b7a2:	6021      	str	r1, [r4, #0]
    exec_cb( cur->Callback, cur->Context );
 804b7a4:	b93b      	cbnz	r3, 804b7b6 <TimerIrqHandler+0x36>
 804b7a6:	e7fe      	b.n	804b7a6 <TimerIrqHandler+0x26>
      if (next->Timestamp > DeltaContext)
 804b7a8:	6819      	ldr	r1, [r3, #0]
 804b7aa:	4281      	cmp	r1, r0
        next->Timestamp -= DeltaContext;
 804b7ac:	bf86      	itte	hi
 804b7ae:	1a09      	subhi	r1, r1, r0
 804b7b0:	6019      	strhi	r1, [r3, #0]
        next->Timestamp = 0 ;
 804b7b2:	601d      	strls	r5, [r3, #0]
 804b7b4:	e7f0      	b.n	804b798 <TimerIrqHandler+0x18>
    exec_cb( cur->Callback, cur->Context );
 804b7b6:	6910      	ldr	r0, [r2, #16]
 804b7b8:	4798      	blx	r3
   cur->IsStarted = false;
 804b7ba:	2600      	movs	r6, #0
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 804b7bc:	6823      	ldr	r3, [r4, #0]
 804b7be:	b92b      	cbnz	r3, 804b7cc <TimerIrqHandler+0x4c>
  if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 804b7c0:	6820      	ldr	r0, [r4, #0]
 804b7c2:	b980      	cbnz	r0, 804b7e6 <TimerIrqHandler+0x66>
}
 804b7c4:	bd70      	pop	{r4, r5, r6, pc}
   exec_cb( cur->Callback, cur->Context );
 804b7c6:	6918      	ldr	r0, [r3, #16]
 804b7c8:	4790      	blx	r2
 804b7ca:	e7f7      	b.n	804b7bc <TimerIrqHandler+0x3c>
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 804b7cc:	681d      	ldr	r5, [r3, #0]
 804b7ce:	f000 fc71 	bl	804c0b4 <HW_RTC_GetTimerElapsedTime>
 804b7d2:	4285      	cmp	r5, r0
 804b7d4:	d2f4      	bcs.n	804b7c0 <TimerIrqHandler+0x40>
   cur = TimerListHead;
 804b7d6:	6823      	ldr	r3, [r4, #0]
   TimerListHead = TimerListHead->Next;
 804b7d8:	695a      	ldr	r2, [r3, #20]
 804b7da:	6022      	str	r2, [r4, #0]
   exec_cb( cur->Callback, cur->Context );
 804b7dc:	68da      	ldr	r2, [r3, #12]
   cur->IsStarted = false;
 804b7de:	721e      	strb	r6, [r3, #8]
   exec_cb( cur->Callback, cur->Context );
 804b7e0:	2a00      	cmp	r2, #0
 804b7e2:	d1f0      	bne.n	804b7c6 <TimerIrqHandler+0x46>
 804b7e4:	e7fe      	b.n	804b7e4 <TimerIrqHandler+0x64>
  if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 804b7e6:	7a43      	ldrb	r3, [r0, #9]
 804b7e8:	2b00      	cmp	r3, #0
 804b7ea:	d1eb      	bne.n	804b7c4 <TimerIrqHandler+0x44>
}
 804b7ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    TimerSetTimeout( TimerListHead );
 804b7f0:	f7ff bf63 	b.w	804b6ba <TimerSetTimeout>
 804b7f4:	2000adf8 	.word	0x2000adf8

0804b7f8 <TimerStop>:
{
 804b7f8:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 804b7fa:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 804b7fe:	b672      	cpsid	i
  TimerEvent_t* prev = TimerListHead;
 804b800:	4d10      	ldr	r5, [pc, #64]	; (804b844 <TimerStop+0x4c>)
 804b802:	682b      	ldr	r3, [r5, #0]
  if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 804b804:	b103      	cbz	r3, 804b808 <TimerStop+0x10>
 804b806:	b910      	cbnz	r0, 804b80e <TimerStop+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 804b808:	f386 8810 	msr	PRIMASK, r6
}  
 804b80c:	bd70      	pop	{r4, r5, r6, pc}
  obj->IsStarted = false;
 804b80e:	2200      	movs	r2, #0
  if( TimerListHead == obj ) // Stop the Head                  
 804b810:	4283      	cmp	r3, r0
  obj->IsStarted = false;
 804b812:	7202      	strb	r2, [r0, #8]
  if( TimerListHead == obj ) // Stop the Head                  
 804b814:	d10e      	bne.n	804b834 <TimerStop+0x3c>
    if( TimerListHead->IsNext2Expire == true ) // The head is already running 
 804b816:	7a59      	ldrb	r1, [r3, #9]
 804b818:	695c      	ldr	r4, [r3, #20]
 804b81a:	b141      	cbz	r1, 804b82e <TimerStop+0x36>
      TimerListHead->IsNext2Expire = false;
 804b81c:	725a      	strb	r2, [r3, #9]
      if( TimerListHead->Next != NULL )
 804b81e:	b124      	cbz	r4, 804b82a <TimerStop+0x32>
        TimerSetTimeout( TimerListHead );
 804b820:	4620      	mov	r0, r4
        TimerListHead = TimerListHead->Next;
 804b822:	602c      	str	r4, [r5, #0]
        TimerSetTimeout( TimerListHead );
 804b824:	f7ff ff49 	bl	804b6ba <TimerSetTimeout>
 804b828:	e7ee      	b.n	804b808 <TimerStop+0x10>
        HW_RTC_StopAlarm( );
 804b82a:	f000 fc59 	bl	804c0e0 <HW_RTC_StopAlarm>
        TimerListHead = NULL;
 804b82e:	602c      	str	r4, [r5, #0]
 804b830:	e7ea      	b.n	804b808 <TimerStop+0x10>
 804b832:	4613      	mov	r3, r2
        cur = cur->Next;
 804b834:	695a      	ldr	r2, [r3, #20]
    while( cur != NULL )
 804b836:	2a00      	cmp	r2, #0
 804b838:	d0e6      	beq.n	804b808 <TimerStop+0x10>
      if( cur == obj )
 804b83a:	4290      	cmp	r0, r2
 804b83c:	d1f9      	bne.n	804b832 <TimerStop+0x3a>
        if( cur->Next != NULL )
 804b83e:	6942      	ldr	r2, [r0, #20]
          prev->Next = cur;
 804b840:	615a      	str	r2, [r3, #20]
 804b842:	e7e1      	b.n	804b808 <TimerStop+0x10>
 804b844:	2000adf8 	.word	0x2000adf8

0804b848 <TimerSetValue>:
{
 804b848:	b538      	push	{r3, r4, r5, lr}
 804b84a:	4605      	mov	r5, r0
  uint32_t ticks = HW_RTC_ms2Tick( value );
 804b84c:	4608      	mov	r0, r1
 804b84e:	f000 fc1d 	bl	804c08c <HW_RTC_ms2Tick>
 804b852:	4604      	mov	r4, r0
  TimerStop( obj );
 804b854:	4628      	mov	r0, r5
 804b856:	f7ff ffcf 	bl	804b7f8 <TimerStop>
  minValue = HW_RTC_GetMinimumTimeout( );
 804b85a:	f000 fc15 	bl	804c088 <HW_RTC_GetMinimumTimeout>
 804b85e:	42a0      	cmp	r0, r4
 804b860:	bf38      	it	cc
 804b862:	4620      	movcc	r0, r4
  obj->ReloadValue = ticks;
 804b864:	e9c5 0000 	strd	r0, r0, [r5]
}
 804b868:	bd38      	pop	{r3, r4, r5, pc}

0804b86a <TimerGetCurrentTime>:
{
 804b86a:	b508      	push	{r3, lr}
  uint32_t now = HW_RTC_GetTimerValue( );
 804b86c:	f000 fc30 	bl	804c0d0 <HW_RTC_GetTimerValue>
}
 804b870:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return  HW_RTC_Tick2ms(now);
 804b874:	f000 bc13 	b.w	804c09e <HW_RTC_Tick2ms>

0804b878 <TimerGetElapsedTime>:
{
 804b878:	b538      	push	{r3, r4, r5, lr}
  if ( past == 0 )
 804b87a:	4605      	mov	r5, r0
 804b87c:	b150      	cbz	r0, 804b894 <TimerGetElapsedTime+0x1c>
  uint32_t nowInTicks = HW_RTC_GetTimerValue( );
 804b87e:	f000 fc27 	bl	804c0d0 <HW_RTC_GetTimerValue>
 804b882:	4604      	mov	r4, r0
  uint32_t pastInTicks = HW_RTC_ms2Tick( past );
 804b884:	4628      	mov	r0, r5
 804b886:	f000 fc01 	bl	804c08c <HW_RTC_ms2Tick>
  return HW_RTC_Tick2ms( nowInTicks- pastInTicks );
 804b88a:	1a20      	subs	r0, r4, r0
}
 804b88c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return HW_RTC_Tick2ms( nowInTicks- pastInTicks );
 804b890:	f000 bc05 	b.w	804c09e <HW_RTC_Tick2ms>
}
 804b894:	bd38      	pop	{r3, r4, r5, pc}
	...

0804b898 <Trace_TxCpltCallback>:
}

/* Private Functions Definition ------------------------------------------------------*/

static void Trace_TxCpltCallback(void)
{
 804b898:	b513      	push	{r0, r1, r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 804b89a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 804b89e:	b672      	cpsid	i

  BACKUP_PRIMASK();

  DISABLE_IRQ(); /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  circular_queue_remove(&MsgTraceQueue);
 804b8a0:	480f      	ldr	r0, [pc, #60]	; (804b8e0 <Trace_TxCpltCallback+0x48>)
 804b8a2:	f7ff fe5c 	bl	804b55e <circular_queue_remove>
  //DBG_GPIO_SET(GPIOB, GPIO_PIN_13);
  //DBG_GPIO_RST(GPIOB, GPIO_PIN_13);
  /* Sense if new data to be sent */
  status=circular_queue_sense(&MsgTraceQueue);
 804b8a6:	480e      	ldr	r0, [pc, #56]	; (804b8e0 <Trace_TxCpltCallback+0x48>)
 804b8a8:	f7ff fe84 	bl	804b5b4 <circular_queue_sense>

  if ( status == 0) 
 804b8ac:	b970      	cbnz	r0, 804b8cc <Trace_TxCpltCallback+0x34>
  {
    circular_queue_get(&MsgTraceQueue,&buffer,&bufSize);
 804b8ae:	f10d 0202 	add.w	r2, sp, #2
 804b8b2:	a901      	add	r1, sp, #4
 804b8b4:	480a      	ldr	r0, [pc, #40]	; (804b8e0 <Trace_TxCpltCallback+0x48>)
 804b8b6:	f7ff fe36 	bl	804b526 <circular_queue_get>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 804b8ba:	f384 8810 	msr	PRIMASK, r4
    RESTORE_PRIMASK();
    //DBG_GPIO_SET(GPIOB, GPIO_PIN_14);
    //DBG_GPIO_RST(GPIOB, GPIO_PIN_14);
    OutputTrace(buffer, bufSize);
 804b8be:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 804b8c2:	9801      	ldr	r0, [sp, #4]
 804b8c4:	f001 fc3c 	bl	804d140 <vcom_Trace>

    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Enable );
    TracePeripheralReady = SET;
    RESTORE_PRIMASK();
  }
}
 804b8c8:	b002      	add	sp, #8
 804b8ca:	bd10      	pop	{r4, pc}
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Enable );
 804b8cc:	2100      	movs	r1, #0
 804b8ce:	2020      	movs	r0, #32
 804b8d0:	f7ff fd68 	bl	804b3a4 <LPM_SetStopMode>
    TracePeripheralReady = SET;
 804b8d4:	4b03      	ldr	r3, [pc, #12]	; (804b8e4 <Trace_TxCpltCallback+0x4c>)
 804b8d6:	2201      	movs	r2, #1
 804b8d8:	701a      	strb	r2, [r3, #0]
 804b8da:	f384 8810 	msr	PRIMASK, r4
}
 804b8de:	e7f3      	b.n	804b8c8 <Trace_TxCpltCallback+0x30>
 804b8e0:	2000adfc 	.word	0x2000adfc
 804b8e4:	200011e8 	.word	0x200011e8

0804b8e8 <TraceInit>:
{
 804b8e8:	b508      	push	{r3, lr}
  OutputInit(Trace_TxCpltCallback);
 804b8ea:	4806      	ldr	r0, [pc, #24]	; (804b904 <TraceInit+0x1c>)
 804b8ec:	f001 fc0c 	bl	804d108 <vcom_Init>
  circular_queue_init(&MsgTraceQueue, MsgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE);
 804b8f0:	4805      	ldr	r0, [pc, #20]	; (804b908 <TraceInit+0x20>)
 804b8f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 804b8f6:	f100 0110 	add.w	r1, r0, #16
}
 804b8fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  circular_queue_init(&MsgTraceQueue, MsgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE);
 804b8fe:	f7ff bd92 	b.w	804b426 <circular_queue_init>
 804b902:	bf00      	nop
 804b904:	0804b899 	.word	0x0804b899
 804b908:	2000adfc 	.word	0x2000adfc

0804b90c <TraceSend>:
{
 804b90c:	b40f      	push	{r0, r1, r2, r3}
 804b90e:	b5f0      	push	{r4, r5, r6, r7, lr}
 804b910:	b0c5      	sub	sp, #276	; 0x114
 804b912:	ab4a      	add	r3, sp, #296	; 0x128
  uint16_t bufSize=vsnprintf(buf,TEMPBUFSIZE,strFormat, vaArgs);
 804b914:	f44f 7180 	mov.w	r1, #256	; 0x100
{
 804b918:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start( vaArgs, strFormat);
 804b91c:	9302      	str	r3, [sp, #8]
  uint16_t bufSize=vsnprintf(buf,TEMPBUFSIZE,strFormat, vaArgs);
 804b91e:	a804      	add	r0, sp, #16
 804b920:	f002 f8b8 	bl	804da94 <vsniprintf>
 804b924:	f8ad 0006 	strh.w	r0, [sp, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 804b928:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 804b92c:	b672      	cpsid	i
  status =circular_queue_add(&MsgTraceQueue,(uint8_t*)buf, bufSize);
 804b92e:	4814      	ldr	r0, [pc, #80]	; (804b980 <TraceSend+0x74>)
 804b930:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 804b934:	a904      	add	r1, sp, #16
 804b936:	f7ff fd7d 	bl	804b434 <circular_queue_add>
  if ((status==0 ) && (TracePeripheralReady==SET))
 804b93a:	4605      	mov	r5, r0
 804b93c:	b9e0      	cbnz	r0, 804b978 <TraceSend+0x6c>
 804b93e:	4f11      	ldr	r7, [pc, #68]	; (804b984 <TraceSend+0x78>)
 804b940:	783c      	ldrb	r4, [r7, #0]
 804b942:	b2e4      	uxtb	r4, r4
 804b944:	2c01      	cmp	r4, #1
 804b946:	d117      	bne.n	804b978 <TraceSend+0x6c>
    circular_queue_get(&MsgTraceQueue,&buffer,&bufSize);
 804b948:	f10d 0206 	add.w	r2, sp, #6
 804b94c:	a903      	add	r1, sp, #12
 804b94e:	480c      	ldr	r0, [pc, #48]	; (804b980 <TraceSend+0x74>)
 804b950:	f7ff fde9 	bl	804b526 <circular_queue_get>
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Disable );
 804b954:	4621      	mov	r1, r4
 804b956:	2020      	movs	r0, #32
    TracePeripheralReady = RESET;
 804b958:	703d      	strb	r5, [r7, #0]
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Disable );
 804b95a:	f7ff fd23 	bl	804b3a4 <LPM_SetStopMode>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 804b95e:	f386 8810 	msr	PRIMASK, r6
    OutputTrace(buffer, bufSize);
 804b962:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 804b966:	9803      	ldr	r0, [sp, #12]
 804b968:	f001 fbea 	bl	804d140 <vcom_Trace>
}
 804b96c:	4628      	mov	r0, r5
 804b96e:	b045      	add	sp, #276	; 0x114
 804b970:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 804b974:	b004      	add	sp, #16
 804b976:	4770      	bx	lr
 804b978:	f386 8810 	msr	PRIMASK, r6
  return status;
 804b97c:	e7f6      	b.n	804b96c <TraceSend+0x60>
 804b97e:	bf00      	nop
 804b980:	2000adfc 	.word	0x2000adfc
 804b984:	200011e8 	.word	0x200011e8

0804b988 <rand1>:

static uint32_t next = 1;

int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 804b988:	4b07      	ldr	r3, [pc, #28]	; (804b9a8 <rand1+0x20>)
 804b98a:	4908      	ldr	r1, [pc, #32]	; (804b9ac <rand1+0x24>)
 804b98c:	6818      	ldr	r0, [r3, #0]
 804b98e:	f243 0239 	movw	r2, #12345	; 0x3039
 804b992:	fb01 2000 	mla	r0, r1, r0, r2
 804b996:	6018      	str	r0, [r3, #0]
 804b998:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 804b99c:	fbb0 f3f3 	udiv	r3, r0, r3
 804b9a0:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 804b9a4:	1ac0      	subs	r0, r0, r3
 804b9a6:	4770      	bx	lr
 804b9a8:	200011ec 	.word	0x200011ec
 804b9ac:	41c64e6d 	.word	0x41c64e6d

0804b9b0 <randr>:
    next = seed;
}
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 804b9b0:	b538      	push	{r3, r4, r5, lr}
 804b9b2:	4605      	mov	r5, r0
 804b9b4:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 804b9b6:	f7ff ffe7 	bl	804b988 <rand1>
 804b9ba:	1b61      	subs	r1, r4, r5
 804b9bc:	3101      	adds	r1, #1
 804b9be:	fb90 f3f1 	sdiv	r3, r0, r1
 804b9c2:	fb03 0011 	mls	r0, r3, r1, r0
}
 804b9c6:	4428      	add	r0, r5
 804b9c8:	bd38      	pop	{r3, r4, r5, pc}

0804b9ca <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 804b9ca:	3801      	subs	r0, #1
 804b9cc:	440a      	add	r2, r1
    while( size-- )
 804b9ce:	4291      	cmp	r1, r2
 804b9d0:	d100      	bne.n	804b9d4 <memcpy1+0xa>
    {
        *dst++ = *src++;
    }
}
 804b9d2:	4770      	bx	lr
        *dst++ = *src++;
 804b9d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 804b9d8:	f800 3f01 	strb.w	r3, [r0, #1]!
 804b9dc:	e7f7      	b.n	804b9ce <memcpy1+0x4>

0804b9de <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 804b9de:	4410      	add	r0, r2
 804b9e0:	440a      	add	r2, r1
    dst = dst + ( size - 1 );
    while( size-- )
 804b9e2:	4291      	cmp	r1, r2
 804b9e4:	d100      	bne.n	804b9e8 <memcpyr+0xa>
    {
        *dst-- = *src++;
    }
}
 804b9e6:	4770      	bx	lr
        *dst-- = *src++;
 804b9e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 804b9ec:	f800 3d01 	strb.w	r3, [r0, #-1]!
 804b9f0:	e7f7      	b.n	804b9e2 <memcpyr+0x4>

0804b9f2 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 804b9f2:	4402      	add	r2, r0
    while( size-- )
 804b9f4:	4290      	cmp	r0, r2
 804b9f6:	d100      	bne.n	804b9fa <memset1+0x8>
    {
        *dst++ = value;
    }
}
 804b9f8:	4770      	bx	lr
        *dst++ = value;
 804b9fa:	f800 1b01 	strb.w	r1, [r0], #1
 804b9fe:	e7f9      	b.n	804b9f4 <memset1+0x2>

0804ba00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 804ba00:	f8df d034 	ldr.w	sp, [pc, #52]	; 804ba38 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 804ba04:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 804ba06:	e003      	b.n	804ba10 <LoopCopyDataInit>

0804ba08 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 804ba08:	4b0c      	ldr	r3, [pc, #48]	; (804ba3c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 804ba0a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 804ba0c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 804ba0e:	3104      	adds	r1, #4

0804ba10 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 804ba10:	480b      	ldr	r0, [pc, #44]	; (804ba40 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 804ba12:	4b0c      	ldr	r3, [pc, #48]	; (804ba44 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 804ba14:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 804ba16:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 804ba18:	d3f6      	bcc.n	804ba08 <CopyDataInit>
  ldr  r2, =_sbss
 804ba1a:	4a0b      	ldr	r2, [pc, #44]	; (804ba48 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 804ba1c:	e002      	b.n	804ba24 <LoopFillZerobss>

0804ba1e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 804ba1e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 804ba20:	f842 3b04 	str.w	r3, [r2], #4

0804ba24 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 804ba24:	4b09      	ldr	r3, [pc, #36]	; (804ba4c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 804ba26:	429a      	cmp	r2, r3
  bcc  FillZerobss
 804ba28:	d3f9      	bcc.n	804ba1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 804ba2a:	f7f7 f98f 	bl	8042d4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 804ba2e:	f001 fe95 	bl	804d75c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 804ba32:	f000 fe23 	bl	804c67c <main>
  bx  lr    
 804ba36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 804ba38:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 804ba3c:	08050170 	.word	0x08050170
  ldr  r0, =_sdata
 804ba40:	20001000 	.word	0x20001000
  ldr  r3, =_edata
 804ba44:	20001290 	.word	0x20001290
  ldr  r2, =_sbss
 804ba48:	20001290 	.word	0x20001290
  ldr  r3, = _ebss
 804ba4c:	20015028 	.word	0x20015028

0804ba50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 804ba50:	e7fe      	b.n	804ba50 <ADC_IRQHandler>

0804ba52 <Str2Int>:
  * @param  pIntNum: The integer value
  * @retval 1: Correct
  *         0: Error
  */
uint32_t Str2Int(uint8_t *pInputStr, uint32_t *pIntNum)
{
 804ba52:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0U;
  uint32_t res = 0U;
  uint32_t val = 0U;

  if ((pInputStr[0U] == '0') && ((pInputStr[1U] == 'x') || (pInputStr[1U] == 'X')))
 804ba54:	7803      	ldrb	r3, [r0, #0]
 804ba56:	2b30      	cmp	r3, #48	; 0x30
 804ba58:	d127      	bne.n	804baaa <Str2Int+0x58>
 804ba5a:	7843      	ldrb	r3, [r0, #1]
 804ba5c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 804ba60:	2b58      	cmp	r3, #88	; 0x58
 804ba62:	d122      	bne.n	804baaa <Str2Int+0x58>
 804ba64:	2400      	movs	r4, #0
 804ba66:	2502      	movs	r5, #2
  {
    i = 2U;
    while ((i < 11U) && (pInputStr[i] != '\0'))
 804ba68:	5d43      	ldrb	r3, [r0, r5]
 804ba6a:	b193      	cbz	r3, 804ba92 <Str2Int+0x40>
    {
      if (ISVALIDHEX(pInputStr[i]))
 804ba6c:	f023 0620 	bic.w	r6, r3, #32
 804ba70:	3e41      	subs	r6, #65	; 0x41
 804ba72:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 804ba76:	2e05      	cmp	r6, #5
 804ba78:	b2d7      	uxtb	r7, r2
 804ba7a:	d901      	bls.n	804ba80 <Str2Int+0x2e>
 804ba7c:	2f09      	cmp	r7, #9
 804ba7e:	d808      	bhi.n	804ba92 <Str2Int+0x40>
      {
        val = (val << 4U) + CONVERTHEX(pInputStr[i]);
 804ba80:	2f09      	cmp	r7, #9
 804ba82:	ea4f 1404 	mov.w	r4, r4, lsl #4
 804ba86:	d809      	bhi.n	804ba9c <Str2Int+0x4a>
 804ba88:	4613      	mov	r3, r2
      {
        /* Return 0, Invalid input */
        res = 0U;
        break;
      }
      i++;
 804ba8a:	3501      	adds	r5, #1
    while ((i < 11U) && (pInputStr[i] != '\0'))
 804ba8c:	2d0b      	cmp	r5, #11
        val = (val << 4U) + CONVERTHEX(pInputStr[i]);
 804ba8e:	441c      	add	r4, r3
    while ((i < 11U) && (pInputStr[i] != '\0'))
 804ba90:	d1ea      	bne.n	804ba68 <Str2Int+0x16>
    }

    /* valid result */
    if (pInputStr[i] == '\0')
 804ba92:	5d43      	ldrb	r3, [r0, r5]
 804ba94:	bb4b      	cbnz	r3, 804baea <Str2Int+0x98>
    {
      *pIntNum = val;
 804ba96:	600c      	str	r4, [r1, #0]
      res = 1U;
 804ba98:	2001      	movs	r0, #1
 804ba9a:	e027      	b.n	804baec <Str2Int+0x9a>
        val = (val << 4U) + CONVERTHEX(pInputStr[i]);
 804ba9c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 804baa0:	2a05      	cmp	r2, #5
 804baa2:	bf94      	ite	ls
 804baa4:	3b37      	subls	r3, #55	; 0x37
 804baa6:	3b57      	subhi	r3, #87	; 0x57
 804baa8:	e7ef      	b.n	804ba8a <Str2Int+0x38>
 804baaa:	1e44      	subs	r4, r0, #1
 804baac:	f100 060a 	add.w	r6, r0, #10
 804bab0:	2300      	movs	r3, #0
        *pIntNum = val;
        res = 1U;
      }
      else if (ISVALIDDEC(pInputStr[i]))
      {
        val = val * 10U + CONVERTDEC(pInputStr[i]);
 804bab2:	270a      	movs	r7, #10
      if (pInputStr[i] == '\0')
 804bab4:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 804bab8:	b90a      	cbnz	r2, 804babe <Str2Int+0x6c>
        *pIntNum = val;
 804baba:	600b      	str	r3, [r1, #0]
        res = 1U;
 804babc:	e7ec      	b.n	804ba98 <Str2Int+0x46>
      else if (((pInputStr[i] == 'k') || (pInputStr[i] == 'K')) && (i > 0U))
 804babe:	f002 05df 	and.w	r5, r2, #223	; 0xdf
 804bac2:	2d4b      	cmp	r5, #75	; 0x4b
 804bac4:	d103      	bne.n	804bace <Str2Int+0x7c>
 804bac6:	4284      	cmp	r4, r0
 804bac8:	d007      	beq.n	804bada <Str2Int+0x88>
        val = val << 10U;
 804baca:	029b      	lsls	r3, r3, #10
 804bacc:	e7f5      	b.n	804baba <Str2Int+0x68>
      else if (((pInputStr[i] == 'm') || (pInputStr[i] == 'M')) && (i > 0U))
 804bace:	2d4d      	cmp	r5, #77	; 0x4d
 804bad0:	d103      	bne.n	804bada <Str2Int+0x88>
 804bad2:	4284      	cmp	r4, r0
 804bad4:	d009      	beq.n	804baea <Str2Int+0x98>
        val = val << 20U;
 804bad6:	051b      	lsls	r3, r3, #20
 804bad8:	e7ef      	b.n	804baba <Str2Int+0x68>
      else if (ISVALIDDEC(pInputStr[i]))
 804bada:	3a30      	subs	r2, #48	; 0x30
 804badc:	b2d5      	uxtb	r5, r2
 804bade:	2d09      	cmp	r5, #9
 804bae0:	d803      	bhi.n	804baea <Str2Int+0x98>
    while ((i < 11U) && (res != 1U))
 804bae2:	42b4      	cmp	r4, r6
        val = val * 10U + CONVERTDEC(pInputStr[i]);
 804bae4:	fb07 2303 	mla	r3, r7, r3, r2
    while ((i < 11U) && (res != 1U))
 804bae8:	d1e4      	bne.n	804bab4 <Str2Int+0x62>
      res = 1U;
 804baea:	2000      	movs	r0, #0
      i++;
    }
  }

  return res;
}
 804baec:	bdf0      	pop	{r4, r5, r6, r7, pc}

0804baee <Serial_PutByte>:
  * @brief  Transmit a byte to the HyperTerminal
  * @param  param The byte to be sent
  * @retval HAL_StatusTypeDef HAL_OK if OK
  */
HAL_StatusTypeDef Serial_PutByte(uint8_t uParam)
{
 804baee:	b507      	push	{r0, r1, r2, lr}
 804baf0:	ab02      	add	r3, sp, #8
  return COM_Transmit(&uParam, 1U, TX_TIMEOUT);
 804baf2:	2264      	movs	r2, #100	; 0x64
{
 804baf4:	f803 0d01 	strb.w	r0, [r3, #-1]!
  return COM_Transmit(&uParam, 1U, TX_TIMEOUT);
 804baf8:	2101      	movs	r1, #1
 804bafa:	4618      	mov	r0, r3
 804bafc:	f001 fcc0 	bl	804d480 <COM_Transmit>
}
 804bb00:	b003      	add	sp, #12
 804bb02:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0804bb08 <Error_Handler>:
  __HAL_RCC_DBGMCU_CLK_DISABLE();
#endif
}

void Error_Handler(void)
{
 804bb08:	b508      	push	{r3, lr}
	PRINTF("Erro Handler");
 804bb0a:	4802      	ldr	r0, [pc, #8]	; (804bb14 <Error_Handler+0xc>)
 804bb0c:	f7ff fefe 	bl	804b90c <TraceSend>
 804bb10:	e7fe      	b.n	804bb10 <Error_Handler+0x8>
 804bb12:	bf00      	nop
 804bb14:	0804fc53 	.word	0x0804fc53

0804bb18 <FLASH_INT_If_Clear_Error>:
  * @brief  Clear error flags raised during previous operation
  * @param  None
  * @retval HAL Status.
  */
HAL_StatusTypeDef FLASH_INT_If_Clear_Error(void)
{
 804bb18:	b508      	push	{r3, lr}
  HAL_StatusTypeDef ret = HAL_ERROR;

  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 804bb1a:	f7f7 fd7b 	bl	8043614 <HAL_FLASH_Unlock>
 804bb1e:	b950      	cbnz	r0, 804bb36 <FLASH_INT_If_Clear_Error+0x1e>
  {

    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_SR_WRPERR | FLASH_SR_PGAERR | FLASH_SR_PGPERR | FLASH_SR_PGSERR);
 804bb20:	4b06      	ldr	r3, [pc, #24]	; (804bb3c <FLASH_INT_If_Clear_Error+0x24>)
 804bb22:	22f0      	movs	r2, #240	; 0xf0
 804bb24:	60da      	str	r2, [r3, #12]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 804bb26:	f7f7 fd87 	bl	8043638 <HAL_FLASH_Lock>
 804bb2a:	b118      	cbz	r0, 804bb34 <FLASH_INT_If_Clear_Error+0x1c>
      ret = HAL_OK;
    }
#ifdef FLASH_IF_DBG
    else
    {
      FLASH_IF_TRACE("[FLASH_IF] Lock failure\r\n");
 804bb2c:	4804      	ldr	r0, [pc, #16]	; (804bb40 <FLASH_INT_If_Clear_Error+0x28>)
#endif /* FLASH_IF_DBG */
  }
#ifdef FLASH_IF_DBG
  else
  {
    FLASH_IF_TRACE("[FLASH_IF] Unlock failure\r\n");
 804bb2e:	f001 fecf 	bl	804d8d0 <puts>
  HAL_StatusTypeDef ret = HAL_ERROR;
 804bb32:	2001      	movs	r0, #1
  }
#endif /* FLASH_IF_DBG */
  return ret;
}
 804bb34:	bd08      	pop	{r3, pc}
    FLASH_IF_TRACE("[FLASH_IF] Unlock failure\r\n");
 804bb36:	4803      	ldr	r0, [pc, #12]	; (804bb44 <FLASH_INT_If_Clear_Error+0x2c>)
 804bb38:	e7f9      	b.n	804bb2e <FLASH_INT_If_Clear_Error+0x16>
 804bb3a:	bf00      	nop
 804bb3c:	40023c00 	.word	0x40023c00
 804bb40:	0804fc60 	.word	0x0804fc60
 804bb44:	0804fc79 	.word	0x0804fc79

0804bb48 <FLASH_If_Read>:
  if ((uint32_t) pSource < EXTERNAL_FLASH_ADDRESS)
 804bb48:	f1b1 4f10 	cmp.w	r1, #2415919104	; 0x90000000
{
 804bb4c:	b508      	push	{r3, lr}
  if ((uint32_t) pSource < EXTERNAL_FLASH_ADDRESS)
 804bb4e:	d203      	bcs.n	804bb58 <FLASH_If_Read+0x10>
  memcpy(pDestination, pSource, uLength);
 804bb50:	f001 fe37 	bl	804d7c2 <memcpy>
    return FLASH_INT_If_Read(pDestination, pSource, uLength);
 804bb54:	2000      	movs	r0, #0
}
 804bb56:	bd08      	pop	{r3, pc}
    return FLASH_EXT_If_Read(pDestination, pSource, uLength);
 804bb58:	2001      	movs	r0, #1
 804bb5a:	e7fc      	b.n	804bb56 <FLASH_If_Read+0xe>

0804bb5c <FLASH_INT_If_Erase_Size>:
{
 804bb5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 804bb5e:	b087      	sub	sp, #28
  uint32_t sector_error = 0U;
 804bb60:	2300      	movs	r3, #0
{
 804bb62:	4605      	mov	r5, r0
 804bb64:	460f      	mov	r7, r1
  uint32_t sector_error = 0U;
 804bb66:	9300      	str	r3, [sp, #0]
  e_ret_status = FLASH_INT_If_Clear_Error();
 804bb68:	f7ff ffd6 	bl	804bb18 <FLASH_INT_If_Clear_Error>
  if (e_ret_status == HAL_OK)
 804bb6c:	4604      	mov	r4, r0
 804bb6e:	bb90      	cbnz	r0, 804bbd6 <FLASH_INT_If_Erase_Size+0x7a>
    if (HAL_FLASH_Unlock() == HAL_OK)
 804bb70:	f7f7 fd50 	bl	8043614 <HAL_FLASH_Unlock>
 804bb74:	4604      	mov	r4, r0
 804bb76:	bba8      	cbnz	r0, 804bbe4 <FLASH_INT_If_Erase_Size+0x88>

static uint32_t GetSector(uint32_t Add)
{
  uint32_t sector = 0;

  while (Add >= FlashSectorsAddress[sector + 1])
 804bb78:	4b1b      	ldr	r3, [pc, #108]	; (804bbe8 <FLASH_INT_If_Erase_Size+0x8c>)
  uint32_t sector = 0;
 804bb7a:	4606      	mov	r6, r0
 804bb7c:	4618      	mov	r0, r3
  while (Add >= FlashSectorsAddress[sector + 1])
 804bb7e:	1c72      	adds	r2, r6, #1
 804bb80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 804bb84:	428d      	cmp	r5, r1
 804bb86:	d229      	bcs.n	804bbdc <FLASH_INT_If_Erase_Size+0x80>
      nb_sectors = GetSector(uStart + uLength - 1U) - first_sector + 1U;
 804bb88:	3f01      	subs	r7, #1
 804bb8a:	443d      	add	r5, r7
  uint32_t sector = 0;
 804bb8c:	2300      	movs	r3, #0
  while (Add >= FlashSectorsAddress[sector + 1])
 804bb8e:	1c5a      	adds	r2, r3, #1
 804bb90:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 804bb94:	428d      	cmp	r5, r1
 804bb96:	d223      	bcs.n	804bbe0 <FLASH_INT_If_Erase_Size+0x84>
      nb_sectors = GetSector(uStart + uLength - 1U) - first_sector + 1U;
 804bb98:	f1c6 0501 	rsb	r5, r6, #1
 804bb9c:	441d      	add	r5, r3
      p_erase_init.TypeErase     = FLASH_TYPEERASE_SECTORS;
 804bb9e:	2300      	movs	r3, #0
 804bba0:	9301      	str	r3, [sp, #4]
        WRITE_REG(IWDG->KR, IWDG_KEY_RELOAD);
 804bba2:	4f12      	ldr	r7, [pc, #72]	; (804bbec <FLASH_INT_If_Erase_Size+0x90>)
      p_erase_init.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 804bba4:	2302      	movs	r3, #2
 804bba6:	9305      	str	r3, [sp, #20]
        chunk_nb_sectors = (nb_sectors >= NB_PAGE_SECTOR_PER_ERASE) ? NB_PAGE_SECTOR_PER_ERASE : nb_sectors;
 804bba8:	2d02      	cmp	r5, #2
 804bbaa:	462b      	mov	r3, r5
        if (HAL_FLASHEx_Erase(&p_erase_init, &sector_error) != HAL_OK)
 804bbac:	4669      	mov	r1, sp
        chunk_nb_sectors = (nb_sectors >= NB_PAGE_SECTOR_PER_ERASE) ? NB_PAGE_SECTOR_PER_ERASE : nb_sectors;
 804bbae:	bf28      	it	cs
 804bbb0:	2302      	movcs	r3, #2
        if (HAL_FLASHEx_Erase(&p_erase_init, &sector_error) != HAL_OK)
 804bbb2:	a801      	add	r0, sp, #4
        p_erase_init.NbSectors = chunk_nb_sectors;
 804bbb4:	e9cd 6303 	strd	r6, r3, [sp, #12]
        nb_sectors -= chunk_nb_sectors;
 804bbb8:	1aed      	subs	r5, r5, r3
        first_sector += chunk_nb_sectors;
 804bbba:	441e      	add	r6, r3
        if (HAL_FLASHEx_Erase(&p_erase_init, &sector_error) != HAL_OK)
 804bbbc:	f7f7 fe20 	bl	8043800 <HAL_FLASHEx_Erase>
 804bbc0:	b110      	cbz	r0, 804bbc8 <FLASH_INT_If_Erase_Size+0x6c>
          HAL_FLASH_GetError();
 804bbc2:	f7f7 fd43 	bl	804364c <HAL_FLASH_GetError>
          e_ret_status = HAL_ERROR;
 804bbc6:	2401      	movs	r4, #1
        WRITE_REG(IWDG->KR, IWDG_KEY_RELOAD);
 804bbc8:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 804bbcc:	603b      	str	r3, [r7, #0]
      } while (nb_sectors > 0);
 804bbce:	2d00      	cmp	r5, #0
 804bbd0:	d1ea      	bne.n	804bba8 <FLASH_INT_If_Erase_Size+0x4c>
      HAL_FLASH_Lock();
 804bbd2:	f7f7 fd31 	bl	8043638 <HAL_FLASH_Lock>
}
 804bbd6:	4620      	mov	r0, r4
 804bbd8:	b007      	add	sp, #28
 804bbda:	bdf0      	pop	{r4, r5, r6, r7, pc}
  {
    sector++;
 804bbdc:	4616      	mov	r6, r2
 804bbde:	e7ce      	b.n	804bb7e <FLASH_INT_If_Erase_Size+0x22>
 804bbe0:	4613      	mov	r3, r2
 804bbe2:	e7d4      	b.n	804bb8e <FLASH_INT_If_Erase_Size+0x32>
      e_ret_status = HAL_ERROR;
 804bbe4:	2401      	movs	r4, #1
 804bbe6:	e7f6      	b.n	804bbd6 <FLASH_INT_If_Erase_Size+0x7a>
 804bbe8:	200011f0 	.word	0x200011f0
 804bbec:	40003000 	.word	0x40003000

0804bbf0 <FLASH_If_Erase_Size>:
  if ((uint32_t) pStart < EXTERNAL_FLASH_ADDRESS)
 804bbf0:	f1b0 4f10 	cmp.w	r0, #2415919104	; 0x90000000
 804bbf4:	d201      	bcs.n	804bbfa <FLASH_If_Erase_Size+0xa>
    return FLASH_INT_If_Erase_Size(pStart, uLength);
 804bbf6:	f7ff bfb1 	b.w	804bb5c <FLASH_INT_If_Erase_Size>
}
 804bbfa:	2001      	movs	r0, #1
 804bbfc:	4770      	bx	lr

0804bbfe <FLASH_INT_If_Write>:
{
 804bbfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804bc02:	4605      	mov	r5, r0
 804bc04:	460e      	mov	r6, r1
 804bc06:	4617      	mov	r7, r2
  e_ret_status = FLASH_INT_If_Clear_Error();
 804bc08:	f7ff ff86 	bl	804bb18 <FLASH_INT_If_Clear_Error>
  if (e_ret_status == HAL_OK)
 804bc0c:	4604      	mov	r4, r0
 804bc0e:	b940      	cbnz	r0, 804bc22 <FLASH_INT_If_Write+0x24>
    if (HAL_FLASH_Unlock() != HAL_OK)
 804bc10:	f7f7 fd00 	bl	8043614 <HAL_FLASH_Unlock>
 804bc14:	4604      	mov	r4, r0
 804bc16:	b9c8      	cbnz	r0, 804bc4c <FLASH_INT_If_Write+0x4e>
 804bc18:	442f      	add	r7, r5
      for (i = 0U; i < uLength; i++)
 804bc1a:	42bd      	cmp	r5, r7
 804bc1c:	d104      	bne.n	804bc28 <FLASH_INT_If_Write+0x2a>
      HAL_FLASH_Lock();
 804bc1e:	f7f7 fd0b 	bl	8043638 <HAL_FLASH_Lock>
}
 804bc22:	4620      	mov	r0, r4
 804bc24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, (uint32_t) pDestination,  *((uint8_t *)(pdata + i))) == HAL_OK)
 804bc28:	7832      	ldrb	r2, [r6, #0]
 804bc2a:	2300      	movs	r3, #0
 804bc2c:	4629      	mov	r1, r5
 804bc2e:	2000      	movs	r0, #0
 804bc30:	46b0      	mov	r8, r6
 804bc32:	f7f7 fd3b 	bl	80436ac <HAL_FLASH_Program>
 804bc36:	b938      	cbnz	r0, 804bc48 <FLASH_INT_If_Write+0x4a>
          if (*(uint8_t *)pDestination != *(uint8_t *)(pdata + i))
 804bc38:	f815 3b01 	ldrb.w	r3, [r5], #1
 804bc3c:	f898 2000 	ldrb.w	r2, [r8]
 804bc40:	429a      	cmp	r2, r3
 804bc42:	f106 0601 	add.w	r6, r6, #1
 804bc46:	d0e8      	beq.n	804bc1a <FLASH_INT_If_Write+0x1c>
          e_ret_status = HAL_ERROR;
 804bc48:	2401      	movs	r4, #1
 804bc4a:	e7e8      	b.n	804bc1e <FLASH_INT_If_Write+0x20>
      return HAL_ERROR;
 804bc4c:	2401      	movs	r4, #1
 804bc4e:	e7e8      	b.n	804bc22 <FLASH_INT_If_Write+0x24>

0804bc50 <FLASH_If_Write>:
  if ((uint32_t) pDestination < EXTERNAL_FLASH_ADDRESS)
 804bc50:	f1b0 4f10 	cmp.w	r0, #2415919104	; 0x90000000
 804bc54:	d201      	bcs.n	804bc5a <FLASH_If_Write+0xa>
    return FLASH_INT_If_Write(pDestination, pSource, uLength);
 804bc56:	f7ff bfd2 	b.w	804bbfe <FLASH_INT_If_Write>
}
 804bc5a:	2001      	movs	r0, #1
 804bc5c:	4770      	bx	lr
	...

0804bc60 <Ymodem_HeaderPktRxCpltCallback>:
  * @brief  Ymodem Header Packet Transfer completed callback.
  * @param  uFileSize Dimension of the file that will be received (Bytes).
  * @retval None
  */
HAL_StatusTypeDef Ymodem_HeaderPktRxCpltCallback(uint32_t uFileSize)
{
 804bc60:	b510      	push	{r4, lr}
  /*Reset of the ymodem variables */
  m_uFileSizeYmodem = 0U;
  m_uPacketsReceived = 0U;
 804bc62:	4b07      	ldr	r3, [pc, #28]	; (804bc80 <Ymodem_HeaderPktRxCpltCallback+0x20>)
 804bc64:	2400      	movs	r4, #0
  m_uNbrBlocksYmodem = 0U;

  /*Filesize information is stored*/
  m_uFileSizeYmodem = uFileSize;
 804bc66:	e9c3 4000 	strd	r4, r0, [r3]

  /*Compute the number of blocks */
#ifndef MINICOM_YMODEM
  /* Teraterm sends 1kB YMODEM packets */
  m_uNbrBlocksYmodem = (m_uFileSizeYmodem + (PACKET_1K_SIZE - 1U)) / PACKET_1K_SIZE;
 804bc6a:	f200 30ff 	addw	r0, r0, #1023	; 0x3ff
 804bc6e:	0a80      	lsrs	r0, r0, #10
 804bc70:	6098      	str	r0, [r3, #8]
  /* Minicom sends 128 bytes YMODEM packets */
  m_uNbrBlocksYmodem = (m_uFileSizeYmodem + (PACKET_SIZE - 1U)) / PACKET_SIZE;
#endif /* MINICOM_YMODEM */

  /* NOTE : delay inserted for Ymodem protocol*/
  HAL_Delay(1000U);
 804bc72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 804bc76:	f000 ff7d 	bl	804cb74 <HAL_Delay>

  return HAL_OK;
}
 804bc7a:	4620      	mov	r0, r4
 804bc7c:	bd10      	pop	{r4, pc}
 804bc7e:	bf00      	nop
 804bc80:	2000af0c 	.word	0x2000af0c

0804bc84 <Ymodem_DataPktRxCpltCallback>:
  * @retval None
  */
#ifndef MINICOM_YMODEM
/* Teraterm YMODEM */
HAL_StatusTypeDef Ymodem_DataPktRxCpltCallback(uint8_t *pData, uint32_t uFlashDestination, uint32_t uSize)
{
 804bc84:	b570      	push	{r4, r5, r6, lr}
  uint32_t uOldSize;
#if !defined(SFU_NO_SWAP)
  SE_FwRawHeaderTypeDef fw_header_dwl;
#endif /* (SFU_NO_SWAP) */

  m_uPacketsReceived++;
 804bc86:	4c43      	ldr	r4, [pc, #268]	; (804bd94 <Ymodem_DataPktRxCpltCallback+0x110>)
 804bc88:	6823      	ldr	r3, [r4, #0]
{
 804bc8a:	4615      	mov	r5, r2

  /*Increase the number of received packets*/
  if (m_uPacketsReceived == m_uNbrBlocksYmodem) /*Last Packet*/
 804bc8c:	68a2      	ldr	r2, [r4, #8]
  m_uPacketsReceived++;
 804bc8e:	3301      	adds	r3, #1
  if (m_uPacketsReceived == m_uNbrBlocksYmodem) /*Last Packet*/
 804bc90:	4293      	cmp	r3, r2
{
 804bc92:	b0d0      	sub	sp, #320	; 0x140
 804bc94:	4606      	mov	r6, r0
  m_uPacketsReceived++;
 804bc96:	6023      	str	r3, [r4, #0]
  if (m_uPacketsReceived == m_uNbrBlocksYmodem) /*Last Packet*/
 804bc98:	d106      	bne.n	804bca8 <Ymodem_DataPktRxCpltCallback+0x24>
  {
    /*Extracting actual payload from last packet*/
    if (0 == (m_uFileSizeYmodem % PACKET_1K_SIZE))
 804bc9a:	6865      	ldr	r5, [r4, #4]
 804bc9c:	f3c5 0509 	ubfx	r5, r5, #0, #10
    {
      /* The last packet must be fully considered */
      uSize = PACKET_1K_SIZE;
 804bca0:	2d00      	cmp	r5, #0
 804bca2:	bf08      	it	eq
 804bca4:	f44f 6580 	moveq.w	r5, #1024	; 0x400
      uSize = m_uFileSizeYmodem - ((uint32_t)(m_uFileSizeYmodem / PACKET_1K_SIZE) * PACKET_1K_SIZE);
    }
  }

  /* First packet : Contains header information: PartialFwSize and PartialFwOffset information */
  if (m_uPacketsReceived == 1)
 804bca8:	2b01      	cmp	r3, #1
 804bcaa:	d112      	bne.n	804bcd2 <Ymodem_DataPktRxCpltCallback+0x4e>
    /* End of Image to be downloaded */
#if defined(SFU_NO_SWAP)
    m_uDwlImgEnd = uFlashDestination + ((SE_FwRawHeaderTypeDef *)pData)->FwSize + SFU_IMG_IMAGE_OFFSET;
#else
    m_uDwlImgEnd = uFlashDestination + ((SE_FwRawHeaderTypeDef *)pData)->PartialFwSize
                   + (((SE_FwRawHeaderTypeDef *)pData)->PartialFwOffset % SLOT_SIZE(SLOT_SWAP))
 804bcac:	4b3a      	ldr	r3, [pc, #232]	; (804bd98 <Ymodem_DataPktRxCpltCallback+0x114>)
 804bcae:	4a3b      	ldr	r2, [pc, #236]	; (804bd9c <Ymodem_DataPktRxCpltCallback+0x118>)
 804bcb0:	69db      	ldr	r3, [r3, #28]
 804bcb2:	69d2      	ldr	r2, [r2, #28]
 804bcb4:	68f0      	ldr	r0, [r6, #12]
 804bcb6:	3301      	adds	r3, #1
 804bcb8:	1a9b      	subs	r3, r3, r2
 804bcba:	fbb0 f2f3 	udiv	r2, r0, r3
 804bcbe:	fb03 0312 	mls	r3, r3, r2, r0
    m_uDwlImgEnd = uFlashDestination + ((SE_FwRawHeaderTypeDef *)pData)->PartialFwSize
 804bcc2:	6932      	ldr	r2, [r6, #16]
    m_uDwlImgCurrent = uFlashDestination;
 804bcc4:	e9c4 1103 	strd	r1, r1, [r4, #12]
    m_uDwlImgEnd = uFlashDestination + ((SE_FwRawHeaderTypeDef *)pData)->PartialFwSize
 804bcc8:	4411      	add	r1, r2
                   + SFU_IMG_IMAGE_OFFSET;
 804bcca:	f501 7100 	add.w	r1, r1, #512	; 0x200
 804bcce:	4419      	add	r1, r3
    m_uDwlImgEnd = uFlashDestination + ((SE_FwRawHeaderTypeDef *)pData)->PartialFwSize
 804bcd0:	6161      	str	r1, [r4, #20]
#endif /* SFU_NO_SWAP */
  }

  /* This packet : contains end of FW header */
  if ((m_uDwlImgCurrent < (m_uDwlImgStart + SFU_IMG_IMAGE_OFFSET)) &&
 804bcd2:	68e3      	ldr	r3, [r4, #12]
 804bcd4:	6920      	ldr	r0, [r4, #16]
 804bcd6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 804bcda:	4283      	cmp	r3, r0
 804bcdc:	d946      	bls.n	804bd6c <Ymodem_DataPktRxCpltCallback+0xe8>
      ((m_uDwlImgCurrent + uSize) >= (m_uDwlImgStart + SFU_IMG_IMAGE_OFFSET)))
 804bcde:	1942      	adds	r2, r0, r5
  if ((m_uDwlImgCurrent < (m_uDwlImgStart + SFU_IMG_IMAGE_OFFSET)) &&
 804bce0:	4293      	cmp	r3, r2
 804bce2:	d843      	bhi.n	804bd6c <Ymodem_DataPktRxCpltCallback+0xe8>
    uLength = SFU_IMG_IMAGE_OFFSET % PACKET_1K_SIZE;
    if (uLength == 0)
    {
      uLength = PACKET_1K_SIZE;
    }
    if (FLASH_If_Write((void *)m_uDwlImgCurrent, pData, uLength) == HAL_OK)
 804bce4:	f44f 7200 	mov.w	r2, #512	; 0x200
 804bce8:	4631      	mov	r1, r6
 804bcea:	f7ff ffb1 	bl	804bc50 <FLASH_If_Write>
 804bcee:	2800      	cmp	r0, #0
 804bcf0:	d13e      	bne.n	804bd70 <Ymodem_DataPktRxCpltCallback+0xec>
#else
      /*
       * Read header from dwl area : in some configuration header can be transmitted with 2 YMODEM packets
       * ==> pData contains only the last part of the header and cannot be used to retrieve PartialFwOffset
       */
      e_ret_status = FLASH_If_Read((uint8_t *)&fw_header_dwl, (void *) m_uDwlImgStart, SE_FW_HEADER_TOT_LEN);
 804bcf2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 804bcf6:	68e1      	ldr	r1, [r4, #12]
 804bcf8:	4668      	mov	r0, sp
 804bcfa:	f7ff ff25 	bl	804bb48 <FLASH_If_Read>

      /* Shift the DWL area pointer, to align image with (PartialFwOffset % sector size) in DWL area */
      m_uDwlImgCurrent += uLength + fw_header_dwl.PartialFwOffset % SLOT_SIZE(SLOT_SWAP);
 804bcfe:	4b26      	ldr	r3, [pc, #152]	; (804bd98 <Ymodem_DataPktRxCpltCallback+0x114>)
 804bd00:	4a26      	ldr	r2, [pc, #152]	; (804bd9c <Ymodem_DataPktRxCpltCallback+0x118>)
 804bd02:	69db      	ldr	r3, [r3, #28]
 804bd04:	69d2      	ldr	r2, [r2, #28]
 804bd06:	9903      	ldr	r1, [sp, #12]
 804bd08:	3301      	adds	r3, #1
 804bd0a:	1a9b      	subs	r3, r3, r2
 804bd0c:	fbb1 f2f3 	udiv	r2, r1, r3
 804bd10:	fb03 1312 	mls	r3, r3, r2, r1
 804bd14:	6922      	ldr	r2, [r4, #16]
 804bd16:	f502 7200 	add.w	r2, r2, #512	; 0x200
 804bd1a:	4413      	add	r3, r2
 804bd1c:	6123      	str	r3, [r4, #16]
#endif /* SFU_NO_SWAP */

      /* Update remaining packet size to write */
      uSize -= uLength;
 804bd1e:	f5a5 7500 	sub.w	r5, r5, #512	; 0x200

      /* Update pData pointer to received packet data */
      pData += uLength;
 804bd22:	f506 7600 	add.w	r6, r6, #512	; 0x200
      e_ret_status = HAL_ERROR;
    }
  }

  /* Skip data write if all has been already written as part of the header */
  if (uSize != 0U)
 804bd26:	b19d      	cbz	r5, 804bd50 <Ymodem_DataPktRxCpltCallback+0xcc>
  {
    /*Adjust dimension to unitary flash programming length */
    if (uSize % FLASH_IF_MIN_WRITE_LEN != 0U)
 804bd28:	076b      	lsls	r3, r5, #29
 804bd2a:	d00b      	beq.n	804bd44 <Ymodem_DataPktRxCpltCallback+0xc0>
    {
      uOldSize = uSize;
      uSize += (FLASH_IF_MIN_WRITE_LEN - (uSize % FLASH_IF_MIN_WRITE_LEN));
      m_uDwlImgEnd += (FLASH_IF_MIN_WRITE_LEN - (uSize % FLASH_IF_MIN_WRITE_LEN));
 804bd2c:	6962      	ldr	r2, [r4, #20]
      uSize += (FLASH_IF_MIN_WRITE_LEN - (uSize % FLASH_IF_MIN_WRITE_LEN));
 804bd2e:	f025 0307 	bic.w	r3, r5, #7
      m_uDwlImgEnd += (FLASH_IF_MIN_WRITE_LEN - (uSize % FLASH_IF_MIN_WRITE_LEN));
 804bd32:	3208      	adds	r2, #8
      uSize += (FLASH_IF_MIN_WRITE_LEN - (uSize % FLASH_IF_MIN_WRITE_LEN));
 804bd34:	3308      	adds	r3, #8
      m_uDwlImgEnd += (FLASH_IF_MIN_WRITE_LEN - (uSize % FLASH_IF_MIN_WRITE_LEN));
 804bd36:	6162      	str	r2, [r4, #20]
 804bd38:	4435      	add	r5, r6
      while (uOldSize < uSize)
      {
        pData[uOldSize] = 0xFF;
 804bd3a:	21ff      	movs	r1, #255	; 0xff
      while (uOldSize < uSize)
 804bd3c:	1baa      	subs	r2, r5, r6
 804bd3e:	429a      	cmp	r2, r3
 804bd40:	d318      	bcc.n	804bd74 <Ymodem_DataPktRxCpltCallback+0xf0>
 804bd42:	461d      	mov	r5, r3
    }

    /* Write Data in Flash - size has to be 64-bit aligned */

    /* Write in flash only if not beyond allowed area */
    if (((m_uDwlImgCurrent + uSize) <= m_uDwlImgEnd) && (e_ret_status == HAL_OK))
 804bd44:	6923      	ldr	r3, [r4, #16]
 804bd46:	6962      	ldr	r2, [r4, #20]
 804bd48:	1959      	adds	r1, r3, r5
 804bd4a:	4291      	cmp	r1, r2
 804bd4c:	d915      	bls.n	804bd7a <Ymodem_DataPktRxCpltCallback+0xf6>
        e_ret_status = HAL_ERROR;
      }
    }
    else
    {
      e_ret_status = HAL_ERROR;
 804bd4e:	2001      	movs	r0, #1
    }
  }

  /* Last packet : reset m_uPacketsReceived */
  if (m_uPacketsReceived == m_uNbrBlocksYmodem)
 804bd50:	68a3      	ldr	r3, [r4, #8]
 804bd52:	6822      	ldr	r2, [r4, #0]
 804bd54:	429a      	cmp	r2, r3
  {
    m_uPacketsReceived = 0U;
 804bd56:	bf04      	itt	eq
 804bd58:	2300      	moveq	r3, #0
 804bd5a:	6023      	streq	r3, [r4, #0]
  }

  /* Reset data counters in case of error */
  if (e_ret_status == HAL_ERROR)
 804bd5c:	2801      	cmp	r0, #1
  {

    /*Reset of the ymodem variables */
    m_uFileSizeYmodem = 0U;
 804bd5e:	bf02      	ittt	eq
 804bd60:	2300      	moveq	r3, #0
    m_uPacketsReceived = 0U;
 804bd62:	e9c4 3300 	strdeq	r3, r3, [r4]
    m_uNbrBlocksYmodem = 0U;
 804bd66:	60a3      	streq	r3, [r4, #8]
  }
  return e_ret_status;
}
 804bd68:	b050      	add	sp, #320	; 0x140
 804bd6a:	bd70      	pop	{r4, r5, r6, pc}
  HAL_StatusTypeDef e_ret_status = HAL_OK;
 804bd6c:	2000      	movs	r0, #0
 804bd6e:	e7da      	b.n	804bd26 <Ymodem_DataPktRxCpltCallback+0xa2>
      e_ret_status = HAL_ERROR;
 804bd70:	2001      	movs	r0, #1
 804bd72:	e7d8      	b.n	804bd26 <Ymodem_DataPktRxCpltCallback+0xa2>
        pData[uOldSize] = 0xFF;
 804bd74:	f805 1b01 	strb.w	r1, [r5], #1
 804bd78:	e7e0      	b.n	804bd3c <Ymodem_DataPktRxCpltCallback+0xb8>
    if (((m_uDwlImgCurrent + uSize) <= m_uDwlImgEnd) && (e_ret_status == HAL_OK))
 804bd7a:	2800      	cmp	r0, #0
 804bd7c:	d1e7      	bne.n	804bd4e <Ymodem_DataPktRxCpltCallback+0xca>
      if (FLASH_If_Write((void *)m_uDwlImgCurrent, pData, uSize) == HAL_OK)
 804bd7e:	462a      	mov	r2, r5
 804bd80:	4631      	mov	r1, r6
 804bd82:	4618      	mov	r0, r3
 804bd84:	f7ff ff64 	bl	804bc50 <FLASH_If_Write>
 804bd88:	2800      	cmp	r0, #0
 804bd8a:	d1e0      	bne.n	804bd4e <Ymodem_DataPktRxCpltCallback+0xca>
        m_uDwlImgCurrent += uSize;
 804bd8c:	6923      	ldr	r3, [r4, #16]
 804bd8e:	441d      	add	r5, r3
 804bd90:	6125      	str	r5, [r4, #16]
 804bd92:	e7dd      	b.n	804bd50 <Ymodem_DataPktRxCpltCallback+0xcc>
 804bd94:	2000af0c 	.word	0x2000af0c
 804bd98:	0804f464 	.word	0x0804f464
 804bd9c:	0804f444 	.word	0x0804f444

0804bda0 <FW_UPDATE_Run>:
{
 804bda0:	b530      	push	{r4, r5, lr}
  PRINTF("\r\n================ New Fw Download =========================\r\n\n");
 804bda2:	482c      	ldr	r0, [pc, #176]	; (804be54 <FW_UPDATE_Run+0xb4>)
{
 804bda4:	b0d7      	sub	sp, #348	; 0x15c
  PRINTF("\r\n================ New Fw Download =========================\r\n\n");
 804bda6:	f7ff fdb1 	bl	804b90c <TraceSend>
  SFU_APP_GetDownloadAreaInfo(SLOT_DWL_1, &fw_image_dwl_area);
 804bdaa:	a902      	add	r1, sp, #8
 804bdac:	2004      	movs	r0, #4
 804bdae:	f000 fe7f 	bl	804cab0 <SFU_APP_GetDownloadAreaInfo>
  YMODEM_CallbacksTypeDef ymodemCb = {Ymodem_HeaderPktRxCpltCallback, Ymodem_DataPktRxCpltCallback};
 804bdb2:	4b29      	ldr	r3, [pc, #164]	; (804be58 <FW_UPDATE_Run+0xb8>)
 804bdb4:	e893 0003 	ldmia.w	r3, {r0, r1}
 804bdb8:	ac06      	add	r4, sp, #24
 804bdba:	e884 0003 	stmia.w	r4, {r0, r1}
  PRINTF("  -- Send Firmware \r\n\n");
 804bdbe:	4827      	ldr	r0, [pc, #156]	; (804be5c <FW_UPDATE_Run+0xbc>)
 804bdc0:	f7ff fda4 	bl	804b90c <TraceSend>
  WRITE_REG(IWDG->KR, IWDG_KEY_RELOAD);
 804bdc4:	4b26      	ldr	r3, [pc, #152]	; (804be60 <FW_UPDATE_Run+0xc0>)
  PRINTF("  -- -- Erasing download area ...\r\n\n");
 804bdc6:	4827      	ldr	r0, [pc, #156]	; (804be64 <FW_UPDATE_Run+0xc4>)
  WRITE_REG(IWDG->KR, IWDG_KEY_RELOAD);
 804bdc8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 804bdcc:	601a      	str	r2, [r3, #0]
  PRINTF("  -- -- Erasing download area ...\r\n\n");
 804bdce:	f7ff fd9d 	bl	804b90c <TraceSend>
  if ((ret = FLASH_If_Erase_Size((void *)(pFwImageDwlArea->DownloadAddr), pFwImageDwlArea->MaxSizeInBytes)) == HAL_OK)
 804bdd2:	e9dd 1002 	ldrd	r1, r0, [sp, #8]
 804bdd6:	f7ff ff0b 	bl	804bbf0 <FLASH_If_Erase_Size>
 804bdda:	bb70      	cbnz	r0, 804be3a <FW_UPDATE_Run+0x9a>
	  PRINTF("  -- -- File> Transfer> YMODEM> Send ");
 804bddc:	4822      	ldr	r0, [pc, #136]	; (804be68 <FW_UPDATE_Run+0xc8>)
 804bdde:	f7ff fd95 	bl	804b90c <TraceSend>
    Ymodem_Init();
 804bde2:	f001 fb65 	bl	804d4b0 <Ymodem_Init>
    e_result = Ymodem_Receive(&u_fw_size, pFwImageDwlArea->DownloadAddr, &ymodemCb);
 804bde6:	4622      	mov	r2, r4
 804bde8:	9903      	ldr	r1, [sp, #12]
 804bdea:	a801      	add	r0, sp, #4
 804bdec:	f001 fb62 	bl	804d4b4 <Ymodem_Receive>
 804bdf0:	4605      	mov	r5, r0
    PRINTF("\r\n\n");
 804bdf2:	481e      	ldr	r0, [pc, #120]	; (804be6c <FW_UPDATE_Run+0xcc>)
 804bdf4:	f7ff fd8a 	bl	804b90c <TraceSend>
    if ((e_result == COM_OK))
 804bdf8:	bb25      	cbnz	r5, 804be44 <FW_UPDATE_Run+0xa4>
    	PRINTF("  -- -- Programming Completed Successfully!\r\n\n");
 804bdfa:	481d      	ldr	r0, [pc, #116]	; (804be70 <FW_UPDATE_Run+0xd0>)
 804bdfc:	f7ff fd86 	bl	804b90c <TraceSend>
    	PRINTF("  -- -- Bytes: %ld\r\n\n", u_fw_size);
 804be00:	9901      	ldr	r1, [sp, #4]
 804be02:	481c      	ldr	r0, [pc, #112]	; (804be74 <FW_UPDATE_Run+0xd4>)
 804be04:	f7ff fd82 	bl	804b90c <TraceSend>
    ret = FLASH_If_Read(fw_header_dwl_slot, (void *) fw_image_dwl_area.DownloadAddr, SE_FW_HEADER_TOT_LEN);
 804be08:	f44f 72a0 	mov.w	r2, #320	; 0x140
 804be0c:	9903      	ldr	r1, [sp, #12]
 804be0e:	4620      	mov	r0, r4
 804be10:	f7ff fe9a 	bl	804bb48 <FLASH_If_Read>
 804be14:	4605      	mov	r5, r0
    (void)SFU_APP_InstallAtNextReset((uint8_t *) fw_header_dwl_slot);
 804be16:	4620      	mov	r0, r4
 804be18:	f000 fe2e 	bl	804ca78 <SFU_APP_InstallAtNextReset>
    PRINTF("  -- Image correctly downloaded - reboot\r\n\n");
 804be1c:	4816      	ldr	r0, [pc, #88]	; (804be78 <FW_UPDATE_Run+0xd8>)
 804be1e:	f7ff fd75 	bl	804b90c <TraceSend>
    COM_Transmit((uint8_t*)&answer_update_success_buffer, sizeof(answer_update_success_buffer), 100);
 804be22:	2264      	movs	r2, #100	; 0x64
 804be24:	2103      	movs	r1, #3
 804be26:	4815      	ldr	r0, [pc, #84]	; (804be7c <FW_UPDATE_Run+0xdc>)
 804be28:	f001 fb2a 	bl	804d480 <COM_Transmit>
    HAL_Delay(1000U);
 804be2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 804be30:	f000 fea0 	bl	804cb74 <HAL_Delay>
    HAL_NVIC_SystemReset();
 804be34:	f7f7 f98e 	bl	8043154 <HAL_NVIC_SystemReset>
  if (ret != HAL_OK)
 804be38:	b115      	cbz	r5, 804be40 <FW_UPDATE_Run+0xa0>
	  PRINTF("  -- !!Operation failed!! \r\n\n");
 804be3a:	4811      	ldr	r0, [pc, #68]	; (804be80 <FW_UPDATE_Run+0xe0>)
 804be3c:	f7ff fd66 	bl	804b90c <TraceSend>
}
 804be40:	b057      	add	sp, #348	; 0x15c
 804be42:	bd30      	pop	{r4, r5, pc}
    else if (e_result == COM_ABORT)
 804be44:	2d02      	cmp	r5, #2
    	PRINTF("  -- -- !!Aborted by user!!\r\n\n");
 804be46:	bf0c      	ite	eq
 804be48:	480e      	ldreq	r0, [pc, #56]	; (804be84 <FW_UPDATE_Run+0xe4>)
    	PRINTF("  -- -- !!Error during file download!!\r\n\n");
 804be4a:	480f      	ldrne	r0, [pc, #60]	; (804be88 <FW_UPDATE_Run+0xe8>)
 804be4c:	f7ff fd5e 	bl	804b90c <TraceSend>
 804be50:	e7f3      	b.n	804be3a <FW_UPDATE_Run+0x9a>
 804be52:	bf00      	nop
 804be54:	0804fc94 	.word	0x0804fc94
 804be58:	0804f424 	.word	0x0804f424
 804be5c:	0804fcd4 	.word	0x0804fcd4
 804be60:	40003000 	.word	0x40003000
 804be64:	0804fceb 	.word	0x0804fceb
 804be68:	0804fd10 	.word	0x0804fd10
 804be6c:	0804fe0a 	.word	0x0804fe0a
 804be70:	0804fd36 	.word	0x0804fd36
 804be74:	0804fd65 	.word	0x0804fd65
 804be78:	0804fd7b 	.word	0x0804fd7b
 804be7c:	20001044 	.word	0x20001044
 804be80:	0804fdf0 	.word	0x0804fdf0
 804be84:	0804fda7 	.word	0x0804fda7
 804be88:	0804fdc6 	.word	0x0804fdc6

0804be8c <HW_GPIO_GetBitPos>:

  if ((GPIO_Pin & 0xFF00) != 0)
  {
    PinPos |= 0x8;
  }
  if ((GPIO_Pin & 0xF0F0) != 0)
 804be8c:	4a0a      	ldr	r2, [pc, #40]	; (804beb8 <HW_GPIO_GetBitPos+0x2c>)
    PinPos |= 0x8;
 804be8e:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
 804be92:	bf14      	ite	ne
 804be94:	2308      	movne	r3, #8
 804be96:	2300      	moveq	r3, #0
  if ((GPIO_Pin & 0xF0F0) != 0)
 804be98:	4210      	tst	r0, r2
  {
    PinPos |= 0x4;
  }
  if ((GPIO_Pin & 0xCCCC) != 0)
 804be9a:	4a08      	ldr	r2, [pc, #32]	; (804bebc <HW_GPIO_GetBitPos+0x30>)
    PinPos |= 0x4;
 804be9c:	bf18      	it	ne
 804be9e:	f043 0304 	orrne.w	r3, r3, #4
  if ((GPIO_Pin & 0xCCCC) != 0)
 804bea2:	4210      	tst	r0, r2
  {
    PinPos |= 0x2;
  }
  if ((GPIO_Pin & 0xAAAA) != 0)
 804bea4:	4a06      	ldr	r2, [pc, #24]	; (804bec0 <HW_GPIO_GetBitPos+0x34>)
    PinPos |= 0x2;
 804bea6:	bf18      	it	ne
 804bea8:	f043 0302 	orrne.w	r3, r3, #2
  if ((GPIO_Pin & 0xAAAA) != 0)
 804beac:	4210      	tst	r0, r2
  {
    PinPos |= 0x1;
 804beae:	bf18      	it	ne
 804beb0:	f043 0301 	orrne.w	r3, r3, #1
  }


  return PinPos;
}
 804beb4:	4618      	mov	r0, r3
 804beb6:	4770      	bx	lr
 804beb8:	fffff0f0 	.word	0xfffff0f0
 804bebc:	ffffcccc 	.word	0xffffcccc
 804bec0:	ffffaaaa 	.word	0xffffaaaa

0804bec4 <HW_GPIO_Init>:
{
 804bec4:	b430      	push	{r4, r5}
  RCC_GPIO_CLK_ENABLE((uint32_t) port);
 804bec6:	4b28      	ldr	r3, [pc, #160]	; (804bf68 <HW_GPIO_Init+0xa4>)
 804bec8:	4298      	cmp	r0, r3
{
 804beca:	b086      	sub	sp, #24
  RCC_GPIO_CLK_ENABLE((uint32_t) port);
 804becc:	f04f 0400 	mov.w	r4, #0
 804bed0:	f503 5350 	add.w	r3, r3, #13312	; 0x3400
 804bed4:	d032      	beq.n	804bf3c <HW_GPIO_Init+0x78>
 804bed6:	d80f      	bhi.n	804bef8 <HW_GPIO_Init+0x34>
 804bed8:	4d24      	ldr	r5, [pc, #144]	; (804bf6c <HW_GPIO_Init+0xa8>)
 804beda:	42a8      	cmp	r0, r5
 804bedc:	d01e      	beq.n	804bf1c <HW_GPIO_Init+0x58>
 804bede:	2300      	movs	r3, #0
 804bee0:	9305      	str	r3, [sp, #20]
 804bee2:	4b23      	ldr	r3, [pc, #140]	; (804bf70 <HW_GPIO_Init+0xac>)
 804bee4:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 804bee6:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 804beea:	631c      	str	r4, [r3, #48]	; 0x30
 804beec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804beee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804bef2:	9305      	str	r3, [sp, #20]
 804bef4:	9b05      	ldr	r3, [sp, #20]
 804bef6:	e01b      	b.n	804bf30 <HW_GPIO_Init+0x6c>
 804bef8:	4d1e      	ldr	r5, [pc, #120]	; (804bf74 <HW_GPIO_Init+0xb0>)
 804befa:	42a8      	cmp	r0, r5
 804befc:	d029      	beq.n	804bf52 <HW_GPIO_Init+0x8e>
 804befe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 804bf02:	42a8      	cmp	r0, r5
 804bf04:	d1eb      	bne.n	804bede <HW_GPIO_Init+0x1a>
 804bf06:	9404      	str	r4, [sp, #16]
 804bf08:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 804bf0a:	f044 0408 	orr.w	r4, r4, #8
 804bf0e:	631c      	str	r4, [r3, #48]	; 0x30
 804bf10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804bf12:	f003 0308 	and.w	r3, r3, #8
 804bf16:	9304      	str	r3, [sp, #16]
 804bf18:	9b04      	ldr	r3, [sp, #16]
 804bf1a:	e009      	b.n	804bf30 <HW_GPIO_Init+0x6c>
 804bf1c:	9401      	str	r4, [sp, #4]
 804bf1e:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 804bf20:	f044 0401 	orr.w	r4, r4, #1
 804bf24:	631c      	str	r4, [r3, #48]	; 0x30
 804bf26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804bf28:	f003 0301 	and.w	r3, r3, #1
 804bf2c:	9301      	str	r3, [sp, #4]
 804bf2e:	9b01      	ldr	r3, [sp, #4]
  initStruct->Pin = GPIO_Pin ;
 804bf30:	6011      	str	r1, [r2, #0]
  HAL_GPIO_Init(port, initStruct);
 804bf32:	4611      	mov	r1, r2
}
 804bf34:	b006      	add	sp, #24
 804bf36:	bc30      	pop	{r4, r5}
  HAL_GPIO_Init(port, initStruct);
 804bf38:	f7f7 bcb0 	b.w	804389c <HAL_GPIO_Init>
  RCC_GPIO_CLK_ENABLE((uint32_t) port);
 804bf3c:	9402      	str	r4, [sp, #8]
 804bf3e:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 804bf40:	f044 0402 	orr.w	r4, r4, #2
 804bf44:	631c      	str	r4, [r3, #48]	; 0x30
 804bf46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804bf48:	f003 0302 	and.w	r3, r3, #2
 804bf4c:	9302      	str	r3, [sp, #8]
 804bf4e:	9b02      	ldr	r3, [sp, #8]
 804bf50:	e7ee      	b.n	804bf30 <HW_GPIO_Init+0x6c>
 804bf52:	9403      	str	r4, [sp, #12]
 804bf54:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 804bf56:	f044 0404 	orr.w	r4, r4, #4
 804bf5a:	631c      	str	r4, [r3, #48]	; 0x30
 804bf5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804bf5e:	f003 0304 	and.w	r3, r3, #4
 804bf62:	9303      	str	r3, [sp, #12]
 804bf64:	9b03      	ldr	r3, [sp, #12]
 804bf66:	e7e3      	b.n	804bf30 <HW_GPIO_Init+0x6c>
 804bf68:	40020400 	.word	0x40020400
 804bf6c:	40020000 	.word	0x40020000
 804bf70:	40023800 	.word	0x40023800
 804bf74:	40020800 	.word	0x40020800

0804bf78 <HW_GPIO_SetIrq>:
{
 804bf78:	b538      	push	{r3, r4, r5, lr}
  uint32_t BitPos = HW_GPIO_GetBitPos(GPIO_Pin) ;
 804bf7a:	4608      	mov	r0, r1
{
 804bf7c:	461c      	mov	r4, r3
 804bf7e:	4615      	mov	r5, r2
  uint32_t BitPos = HW_GPIO_GetBitPos(GPIO_Pin) ;
 804bf80:	f7ff ff84 	bl	804be8c <HW_GPIO_GetBitPos>
 804bf84:	4b08      	ldr	r3, [pc, #32]	; (804bfa8 <HW_GPIO_SetIrq+0x30>)
    GpioIrq[ BitPos ] = irqHandler;
 804bf86:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  if (irqHandler != NULL)
 804bf8a:	b164      	cbz	r4, 804bfa6 <HW_GPIO_SetIrq+0x2e>
    IRQnb = MSP_GetIRQn(GPIO_Pin);
 804bf8c:	4608      	mov	r0, r1
 804bf8e:	f000 fe3f 	bl	804cc10 <MSP_GetIRQn>
    HAL_NVIC_SetPriority(IRQnb, prio, 0);
 804bf92:	4629      	mov	r1, r5
    IRQnb = MSP_GetIRQn(GPIO_Pin);
 804bf94:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(IRQnb, prio, 0);
 804bf96:	2200      	movs	r2, #0
 804bf98:	f7f7 f886 	bl	80430a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IRQnb);
 804bf9c:	4620      	mov	r0, r4
}
 804bf9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_NVIC_EnableIRQ(IRQnb);
 804bfa2:	f7f7 b8b5 	b.w	8043110 <HAL_NVIC_EnableIRQ>
}
 804bfa6:	bd38      	pop	{r3, r4, r5, pc}
 804bfa8:	2000af24 	.word	0x2000af24

0804bfac <HW_GPIO_IrqHandler>:
{
 804bfac:	b510      	push	{r4, lr}
  uint32_t BitPos = HW_GPIO_GetBitPos(GPIO_Pin);
 804bfae:	f7ff ff6d 	bl	804be8c <HW_GPIO_GetBitPos>
  if (GpioIrq[ BitPos ]  != NULL)
 804bfb2:	4b04      	ldr	r3, [pc, #16]	; (804bfc4 <HW_GPIO_IrqHandler+0x18>)
 804bfb4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 804bfb8:	b11b      	cbz	r3, 804bfc2 <HW_GPIO_IrqHandler+0x16>
    GpioIrq[ BitPos ](NULL);
 804bfba:	2000      	movs	r0, #0
}
 804bfbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    GpioIrq[ BitPos ](NULL);
 804bfc0:	4718      	bx	r3
}
 804bfc2:	bd10      	pop	{r4, pc}
 804bfc4:	2000af24 	.word	0x2000af24

0804bfc8 <HW_GPIO_Write>:
  HAL_GPIO_WritePin(GPIOx, GPIO_Pin, (GPIO_PinState) value);
 804bfc8:	b2d2      	uxtb	r2, r2
 804bfca:	f7f7 bddb 	b.w	8043b84 <HAL_GPIO_WritePin>
	...

0804bfd0 <HW_RTC_GetCalendarValue>:
 * @param pointer to RTC_DateStruct
 * @param pointer to RTC_TimeStruct
 * @retval time in ticks
 */
static uint64_t HW_RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 804bfd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t first_read;
  uint32_t correction;
  uint32_t seconds;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 804bfd4:	2200      	movs	r2, #0
{
 804bfd6:	4605      	mov	r5, r0
  HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 804bfd8:	4826      	ldr	r0, [pc, #152]	; (804c074 <HW_RTC_GetCalendarValue+0xa4>)
  * @param  RTCx RTC Instance
  * @retval Sub second value (number between 0 and 65535)
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 804bfda:	4f27      	ldr	r7, [pc, #156]	; (804c078 <HW_RTC_GetCalendarValue+0xa8>)

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
    HAL_RTC_GetDate(&RtcHandle, RTC_DateStruct, RTC_FORMAT_BIN);
 804bfdc:	f8df 8094 	ldr.w	r8, [pc, #148]	; 804c074 <HW_RTC_GetCalendarValue+0xa4>
{
 804bfe0:	460c      	mov	r4, r1
  HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 804bfe2:	f7f8 fb64 	bl	80446ae <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&RtcHandle, RTC_DateStruct, RTC_FORMAT_BIN);
 804bfe6:	2200      	movs	r2, #0
 804bfe8:	4629      	mov	r1, r5
 804bfea:	4640      	mov	r0, r8
 804bfec:	6abe      	ldr	r6, [r7, #40]	; 0x28
 804bfee:	f7f8 fb85 	bl	80446fc <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 804bff2:	2200      	movs	r2, #0
 804bff4:	4621      	mov	r1, r4
 804bff6:	4640      	mov	r0, r8
 804bff8:	f7f8 fb59 	bl	80446ae <HAL_RTC_GetTime>
 804bffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804bffe:	b2b6      	uxth	r6, r6
 804c000:	b29b      	uxth	r3, r3

  }
  while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 804c002:	42b3      	cmp	r3, r6
 804c004:	d1ef      	bne.n	804bfe6 <HW_RTC_GetCalendarValue+0x16>

  /* calculte amount of elapsed days since 01/01/2000 */
  seconds = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 804c006:	78eb      	ldrb	r3, [r5, #3]

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 804c008:	4a1c      	ldr	r2, [pc, #112]	; (804c07c <HW_RTC_GetCalendarValue+0xac>)
 804c00a:	491d      	ldr	r1, [pc, #116]	; (804c080 <HW_RTC_GetCalendarValue+0xb0>)
 804c00c:	f013 0f03 	tst.w	r3, #3
 804c010:	bf08      	it	eq
 804c012:	4611      	moveq	r1, r2

  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 804c014:	786a      	ldrb	r2, [r5, #1]
  seconds = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 804c016:	f240 50b5 	movw	r0, #1461	; 0x5b5
 804c01a:	4358      	muls	r0, r3
  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 804c01c:	3a01      	subs	r2, #1
 804c01e:	233d      	movs	r3, #61	; 0x3d
 804c020:	4353      	muls	r3, r2
  seconds = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 804c022:	1cc6      	adds	r6, r0, #3
  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 804c024:	3301      	adds	r3, #1
 804c026:	2002      	movs	r0, #2
 804c028:	fb93 f3f0 	sdiv	r3, r3, r0

  seconds += (RTC_DateStruct->Date - 1);
 804c02c:	78a8      	ldrb	r0, [r5, #2]
  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 804c02e:	0052      	lsls	r2, r2, #1
 804c030:	3801      	subs	r0, #1
 804c032:	eb00 0096 	add.w	r0, r0, r6, lsr #2
 804c036:	fa21 f202 	lsr.w	r2, r1, r2
 804c03a:	4403      	add	r3, r0
 804c03c:	f002 0203 	and.w	r2, r2, #3
  seconds += (RTC_DateStruct->Date - 1);
 804c040:	1a9b      	subs	r3, r3, r2

  /* convert from days to seconds */
  seconds *= SECONDS_IN_1DAY;

  seconds += ((uint32_t)RTC_TimeStruct->Seconds +
              ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 804c042:	7862      	ldrb	r2, [r4, #1]
              ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 804c044:	7821      	ldrb	r1, [r4, #0]
              ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 804c046:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 804c04a:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 804c04e:	0092      	lsls	r2, r2, #2
 804c050:	fb00 2201 	mla	r2, r0, r1, r2
  seconds += ((uint32_t)RTC_TimeStruct->Seconds +
 804c054:	78a1      	ldrb	r1, [r4, #2]
              ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 804c056:	440a      	add	r2, r1
  seconds += ((uint32_t)RTC_TimeStruct->Seconds +
 804c058:	490a      	ldr	r1, [pc, #40]	; (804c084 <HW_RTC_GetCalendarValue+0xb4>)
 804c05a:	fb01 2303 	mla	r3, r1, r3, r2



  calendarValue = (((uint64_t) seconds) << N_PREDIV_S) + (PREDIV_S - RTC_TimeStruct->SubSeconds);
 804c05e:	0d9e      	lsrs	r6, r3, #22
 804c060:	029d      	lsls	r5, r3, #10
 804c062:	6863      	ldr	r3, [r4, #4]
 804c064:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 804c068:	3303      	adds	r3, #3

  return (calendarValue);
}
 804c06a:	18e8      	adds	r0, r5, r3
 804c06c:	f146 0100 	adc.w	r1, r6, #0
 804c070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804c074:	2000af64 	.word	0x2000af64
 804c078:	40002800 	.word	0x40002800
 804c07c:	00445550 	.word	0x00445550
 804c080:	0099aaa0 	.word	0x0099aaa0
 804c084:	00015180 	.word	0x00015180

0804c088 <HW_RTC_GetMinimumTimeout>:
}
 804c088:	2003      	movs	r0, #3
 804c08a:	4770      	bx	lr

0804c08c <HW_RTC_ms2Tick>:
{
 804c08c:	b508      	push	{r3, lr}
 804c08e:	4601      	mov	r1, r0
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 804c090:	227d      	movs	r2, #125	; 0x7d
 804c092:	2300      	movs	r3, #0
 804c094:	01c0      	lsls	r0, r0, #7
 804c096:	0e49      	lsrs	r1, r1, #25
 804c098:	f7f4 fec0 	bl	8040e1c <__aeabi_uldivmod>
}
 804c09c:	bd08      	pop	{r3, pc}

0804c09e <HW_RTC_Tick2ms>:
  return ((seconds * 1000) + ((tick * 1000) >> N_PREDIV_S));
 804c09e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  tick = tick & PREDIV_S;
 804c0a2:	f3c0 0209 	ubfx	r2, r0, #0, #10
  uint32_t seconds = tick >> N_PREDIV_S;
 804c0a6:	0a80      	lsrs	r0, r0, #10
  return ((seconds * 1000) + ((tick * 1000) >> N_PREDIV_S));
 804c0a8:	435a      	muls	r2, r3
 804c0aa:	4358      	muls	r0, r3
}
 804c0ac:	eb00 2092 	add.w	r0, r0, r2, lsr #10
 804c0b0:	4770      	bx	lr
	...

0804c0b4 <HW_RTC_GetTimerElapsedTime>:
{
 804c0b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 804c0b6:	a901      	add	r1, sp, #4
 804c0b8:	4668      	mov	r0, sp
 804c0ba:	f7ff ff89 	bl	804bfd0 <HW_RTC_GetCalendarValue>
  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 804c0be:	4b03      	ldr	r3, [pc, #12]	; (804c0cc <HW_RTC_GetTimerElapsedTime+0x18>)
 804c0c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
 804c0c2:	1ac0      	subs	r0, r0, r3
 804c0c4:	b007      	add	sp, #28
 804c0c6:	f85d fb04 	ldr.w	pc, [sp], #4
 804c0ca:	bf00      	nop
 804c0cc:	2000af64 	.word	0x2000af64

0804c0d0 <HW_RTC_GetTimerValue>:
{
 804c0d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 804c0d2:	a901      	add	r1, sp, #4
 804c0d4:	4668      	mov	r0, sp
 804c0d6:	f7ff ff7b 	bl	804bfd0 <HW_RTC_GetCalendarValue>
}
 804c0da:	b007      	add	sp, #28
 804c0dc:	f85d fb04 	ldr.w	pc, [sp], #4

0804c0e0 <HW_RTC_StopAlarm>:
{
 804c0e0:	b510      	push	{r4, lr}
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A);
 804c0e2:	4c08      	ldr	r4, [pc, #32]	; (804c104 <HW_RTC_StopAlarm+0x24>)
 804c0e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 804c0e8:	4620      	mov	r0, r4
 804c0ea:	f7f8 f883 	bl	80441f4 <HAL_RTC_DeactivateAlarm>
  __HAL_RTC_ALARM_CLEAR_FLAG(&RtcHandle, RTC_FLAG_ALRAF);
 804c0ee:	6822      	ldr	r2, [r4, #0]
 804c0f0:	68d3      	ldr	r3, [r2, #12]
 804c0f2:	b2db      	uxtb	r3, r3
 804c0f4:	f463 73c0 	orn	r3, r3, #384	; 0x180
 804c0f8:	60d3      	str	r3, [r2, #12]
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 804c0fa:	4b03      	ldr	r3, [pc, #12]	; (804c108 <HW_RTC_StopAlarm+0x28>)
 804c0fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 804c100:	615a      	str	r2, [r3, #20]
}
 804c102:	bd10      	pop	{r4, pc}
 804c104:	2000af64 	.word	0x2000af64
 804c108:	40013c00 	.word	0x40013c00

0804c10c <HW_RTC_SetAlarm>:
{
 804c10c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - HW_RTC_GetTimerElapsedTime())))
 804c110:	4c54      	ldr	r4, [pc, #336]	; (804c264 <HW_RTC_SetAlarm+0x158>)
{
 804c112:	4605      	mov	r5, r0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - HW_RTC_GetTimerElapsedTime())))
 804c114:	f9b4 604c 	ldrsh.w	r6, [r4, #76]	; 0x4c
 804c118:	f7ff ffcc 	bl	804c0b4 <HW_RTC_GetTimerElapsedTime>
 804c11c:	3603      	adds	r6, #3
 804c11e:	1a28      	subs	r0, r5, r0
 804c120:	4286      	cmp	r6, r0
    LPM_SetStopMode(LPM_RTC_Id, LPM_Enable);
 804c122:	bf34      	ite	cc
 804c124:	2100      	movcc	r1, #0
    LPM_SetStopMode(LPM_RTC_Id, LPM_Disable);
 804c126:	2101      	movcs	r1, #1
 804c128:	2004      	movs	r0, #4
 804c12a:	f7ff f93b 	bl	804b3a4 <LPM_SetStopMode>
  if (LPM_GetMode() == LPM_StopMode)
 804c12e:	f7ff f94f 	bl	804b3d0 <LPM_GetMode>
 804c132:	2801      	cmp	r0, #1
    timeout = timeout -  McuWakeUpTimeCal;
 804c134:	bf08      	it	eq
 804c136:	f9b4 304c 	ldrsheq.w	r3, [r4, #76]	; 0x4c
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 804c13a:	6da6      	ldr	r6, [r4, #88]	; 0x58
 804c13c:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
 804c140:	9201      	str	r2, [sp, #4]
    timeout = timeout -  McuWakeUpTimeCal;
 804c142:	bf08      	it	eq
 804c144:	1aed      	subeq	r5, r5, r3
  rtcAlarmSubSeconds =  PREDIV_S - RTC_TimeStruct.SubSeconds;
 804c146:	f5c6 767f 	rsb	r6, r6, #1020	; 0x3fc
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 804c14a:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 804c14e:	9300      	str	r3, [sp, #0]
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 804c150:	f894 b055 	ldrb.w	fp, [r4, #85]	; 0x55
 804c154:	f894 a056 	ldrb.w	sl, [r4, #86]	; 0x56
 804c158:	f894 8057 	ldrb.w	r8, [r4, #87]	; 0x57
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 804c15c:	f894 7069 	ldrb.w	r7, [r4, #105]	; 0x69
 804c160:	f894 906b 	ldrb.w	r9, [r4, #107]	; 0x6b
  rtcAlarmSubSeconds =  PREDIV_S - RTC_TimeStruct.SubSeconds;
 804c164:	3603      	adds	r6, #3
  HW_RTC_StopAlarm();
 804c166:	f7ff ffbb 	bl	804c0e0 <HW_RTC_StopAlarm>
  rtcAlarmSubSeconds += (timeoutValue & PREDIV_S);
 804c16a:	f3c5 0109 	ubfx	r1, r5, #0, #10
  rtcAlarmDays =  RTC_DateStruct.Date;
 804c16e:	9b00      	ldr	r3, [sp, #0]
 804c170:	9a01      	ldr	r2, [sp, #4]
  rtcAlarmSubSeconds += (timeoutValue & PREDIV_S);
 804c172:	fa11 f686 	uxtah	r6, r1, r6
  while (timeoutValue >= SECONDS_IN_1DAY)
 804c176:	493c      	ldr	r1, [pc, #240]	; (804c268 <HW_RTC_SetAlarm+0x15c>)
  rtcAlarmSubSeconds += (timeoutValue & PREDIV_S);
 804c178:	b2b6      	uxth	r6, r6
  timeoutValue >>= N_PREDIV_S;  /* convert timeout  in seconds */
 804c17a:	0aad      	lsrs	r5, r5, #10
  rtcAlarmDays =  RTC_DateStruct.Date;
 804c17c:	b29b      	uxth	r3, r3
  while (timeoutValue >= SECONDS_IN_1DAY)
 804c17e:	428d      	cmp	r5, r1
 804c180:	d84b      	bhi.n	804c21a <HW_RTC_SetAlarm+0x10e>
  rtcAlarmHours = RTC_TimeStruct.Hours;
 804c182:	fa1f fc82 	uxth.w	ip, r2
  while (timeoutValue >= SECONDS_IN_1HOUR)
 804c186:	f5b5 6f61 	cmp.w	r5, #3600	; 0xe10
 804c18a:	d24d      	bcs.n	804c228 <HW_RTC_SetAlarm+0x11c>
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 804c18c:	fa1f f28b 	uxth.w	r2, fp
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 804c190:	2d3b      	cmp	r5, #59	; 0x3b
 804c192:	d850      	bhi.n	804c236 <HW_RTC_SetAlarm+0x12a>
 804c194:	0ab1      	lsrs	r1, r6, #10
 804c196:	ebc1 1081 	rsb	r0, r1, r1, lsl #6
 804c19a:	eb06 2680 	add.w	r6, r6, r0, lsl #10
 804c19e:	eb01 000a 	add.w	r0, r1, sl
 804c1a2:	4428      	add	r0, r5
 804c1a4:	b2b6      	uxth	r6, r6
 804c1a6:	b280      	uxth	r0, r0
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 804c1a8:	283b      	cmp	r0, #59	; 0x3b
 804c1aa:	d848      	bhi.n	804c23e <HW_RTC_SetAlarm+0x132>
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 804c1ac:	2a3b      	cmp	r2, #59	; 0x3b
 804c1ae:	d84b      	bhi.n	804c248 <HW_RTC_SetAlarm+0x13c>
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 804c1b0:	f1bc 0f17 	cmp.w	ip, #23
 804c1b4:	d84f      	bhi.n	804c256 <HW_RTC_SetAlarm+0x14a>
 804c1b6:	492d      	ldr	r1, [pc, #180]	; (804c26c <HW_RTC_SetAlarm+0x160>)
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 804c1b8:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  if (RTC_DateStruct.Year % 4 == 0)
 804c1bc:	f019 0f03 	tst.w	r9, #3
 804c1c0:	f107 37ff 	add.w	r7, r7, #4294967295
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 804c1c4:	bf16      	itet	ne
 804c1c6:	19c9      	addne	r1, r1, r7
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 804c1c8:	5dcd      	ldrbeq	r5, [r1, r7]
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 804c1ca:	7b0d      	ldrbne	r5, [r1, #12]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 804c1cc:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 804c1d0:	42ab      	cmp	r3, r5
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 804c1d2:	bf84      	itt	hi
 804c1d4:	fb93 f1f5 	sdivhi	r1, r3, r5
 804c1d8:	fb05 3311 	mlshi	r3, r5, r1, r3
  RTC_AlarmStructure.AlarmSubSecondMask  = HW_RTC_ALARMSUBSECONDMASK;
 804c1dc:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 804c1e0:	63e1      	str	r1, [r4, #60]	; 0x3c
  HAL_RTC_SetAlarm_IT(&RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 804c1e2:	4923      	ldr	r1, [pc, #140]	; (804c270 <HW_RTC_SetAlarm+0x164>)
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 804c1e4:	f884 c024 	strb.w	ip, [r4, #36]	; 0x24
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 804c1e8:	bf88      	it	hi
 804c1ea:	b29b      	uxthhi	r3, r3
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S - rtcAlarmSubSeconds;
 804c1ec:	f5c6 767f 	rsb	r6, r6, #1020	; 0x3fc
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 804c1f0:	2200      	movs	r2, #0
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S - rtcAlarmSubSeconds;
 804c1f2:	3603      	adds	r6, #3
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 804c1f4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  HAL_RTC_SetAlarm_IT(&RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 804c1f8:	f1a1 0024 	sub.w	r0, r1, #36	; 0x24
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 804c1fc:	f44f 7380 	mov.w	r3, #256	; 0x100
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S - rtcAlarmSubSeconds;
 804c200:	62a6      	str	r6, [r4, #40]	; 0x28
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 804c202:	f884 8027 	strb.w	r8, [r4, #39]	; 0x27
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 804c206:	6422      	str	r2, [r4, #64]	; 0x40
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 804c208:	63a2      	str	r2, [r4, #56]	; 0x38
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 804c20a:	64a3      	str	r3, [r4, #72]	; 0x48
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 804c20c:	e9c4 220c 	strd	r2, r2, [r4, #48]	; 0x30
}
 804c210:	b003      	add	sp, #12
 804c212:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  HAL_RTC_SetAlarm_IT(&RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 804c216:	f7f8 b993 	b.w	8044540 <HAL_RTC_SetAlarm_IT>
    timeoutValue -= SECONDS_IN_1DAY;
 804c21a:	f5a5 35a8 	sub.w	r5, r5, #86016	; 0x15000
    rtcAlarmDays++;
 804c21e:	3301      	adds	r3, #1
    timeoutValue -= SECONDS_IN_1DAY;
 804c220:	f5a5 75c0 	sub.w	r5, r5, #384	; 0x180
    rtcAlarmDays++;
 804c224:	b29b      	uxth	r3, r3
 804c226:	e7aa      	b.n	804c17e <HW_RTC_SetAlarm+0x72>
    rtcAlarmHours++;
 804c228:	f10c 0c01 	add.w	ip, ip, #1
    timeoutValue -= SECONDS_IN_1HOUR;
 804c22c:	f5a5 6561 	sub.w	r5, r5, #3600	; 0xe10
    rtcAlarmHours++;
 804c230:	fa1f fc8c 	uxth.w	ip, ip
 804c234:	e7a7      	b.n	804c186 <HW_RTC_SetAlarm+0x7a>
    rtcAlarmMinutes++;
 804c236:	3201      	adds	r2, #1
    timeoutValue -= SECONDS_IN_1MINUTE;
 804c238:	3d3c      	subs	r5, #60	; 0x3c
    rtcAlarmMinutes++;
 804c23a:	b292      	uxth	r2, r2
 804c23c:	e7a8      	b.n	804c190 <HW_RTC_SetAlarm+0x84>
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 804c23e:	383c      	subs	r0, #60	; 0x3c
    rtcAlarmMinutes++;
 804c240:	3201      	adds	r2, #1
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 804c242:	b280      	uxth	r0, r0
    rtcAlarmMinutes++;
 804c244:	b292      	uxth	r2, r2
 804c246:	e7af      	b.n	804c1a8 <HW_RTC_SetAlarm+0x9c>
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 804c248:	3a3c      	subs	r2, #60	; 0x3c
    rtcAlarmHours++;
 804c24a:	f10c 0c01 	add.w	ip, ip, #1
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 804c24e:	b292      	uxth	r2, r2
    rtcAlarmHours++;
 804c250:	fa1f fc8c 	uxth.w	ip, ip
 804c254:	e7aa      	b.n	804c1ac <HW_RTC_SetAlarm+0xa0>
    rtcAlarmHours -= HOURS_IN_1DAY;
 804c256:	f1ac 0c18 	sub.w	ip, ip, #24
    rtcAlarmDays++;
 804c25a:	3301      	adds	r3, #1
    rtcAlarmHours -= HOURS_IN_1DAY;
 804c25c:	fa1f fc8c 	uxth.w	ip, ip
    rtcAlarmDays++;
 804c260:	b29b      	uxth	r3, r3
 804c262:	e7a5      	b.n	804c1b0 <HW_RTC_SetAlarm+0xa4>
 804c264:	2000af64 	.word	0x2000af64
 804c268:	0001517f 	.word	0x0001517f
 804c26c:	0804f42c 	.word	0x0804f42c
 804c270:	2000af88 	.word	0x2000af88

0804c274 <HW_RTC_IrqHandler>:
{
 804c274:	b508      	push	{r3, lr}
  LPM_SetStopMode(LPM_RTC_Id, LPM_Enable);
 804c276:	2100      	movs	r1, #0
 804c278:	2004      	movs	r0, #4
 804c27a:	f7ff f893 	bl	804b3a4 <LPM_SetStopMode>
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 804c27e:	4b0b      	ldr	r3, [pc, #44]	; (804c2ac <HW_RTC_IrqHandler+0x38>)
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 804c280:	480b      	ldr	r0, [pc, #44]	; (804c2b0 <HW_RTC_IrqHandler+0x3c>)
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 804c282:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 804c286:	615a      	str	r2, [r3, #20]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 804c288:	6802      	ldr	r2, [r0, #0]
 804c28a:	6893      	ldr	r3, [r2, #8]
 804c28c:	04d9      	lsls	r1, r3, #19
 804c28e:	d50b      	bpl.n	804c2a8 <HW_RTC_IrqHandler+0x34>
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 804c290:	68d3      	ldr	r3, [r2, #12]
 804c292:	05db      	lsls	r3, r3, #23
 804c294:	d508      	bpl.n	804c2a8 <HW_RTC_IrqHandler+0x34>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 804c296:	68d3      	ldr	r3, [r2, #12]
 804c298:	b2db      	uxtb	r3, r3
 804c29a:	f463 73c0 	orn	r3, r3, #384	; 0x180
 804c29e:	60d3      	str	r3, [r2, #12]
}
 804c2a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      HAL_RTC_AlarmAEventCallback(hrtc);
 804c2a4:	f000 bcb0 	b.w	804cc08 <HAL_RTC_AlarmAEventCallback>
}
 804c2a8:	bd08      	pop	{r3, pc}
 804c2aa:	bf00      	nop
 804c2ac:	40013c00 	.word	0x40013c00
 804c2b0:	2000af64 	.word	0x2000af64

0804c2b4 <HW_RTC_DelayMs>:
{
 804c2b4:	4601      	mov	r1, r0
 804c2b6:	b538      	push	{r3, r4, r5, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 804c2b8:	227d      	movs	r2, #125	; 0x7d
 804c2ba:	2300      	movs	r3, #0
 804c2bc:	01c0      	lsls	r0, r0, #7
 804c2be:	0e49      	lsrs	r1, r1, #25
 804c2c0:	f7f4 fdac 	bl	8040e1c <__aeabi_uldivmod>
 804c2c4:	4604      	mov	r4, r0
  timeout = HW_RTC_GetTimerValue();
 804c2c6:	f7ff ff03 	bl	804c0d0 <HW_RTC_GetTimerValue>
 804c2ca:	4605      	mov	r5, r0
  while (((HW_RTC_GetTimerValue() - timeout)) < delayValue)
 804c2cc:	f7ff ff00 	bl	804c0d0 <HW_RTC_GetTimerValue>
 804c2d0:	1b40      	subs	r0, r0, r5
 804c2d2:	42a0      	cmp	r0, r4
 804c2d4:	d300      	bcc.n	804c2d8 <HW_RTC_DelayMs+0x24>
}
 804c2d6:	bd38      	pop	{r3, r4, r5, pc}
    __NOP();
 804c2d8:	bf00      	nop
 804c2da:	e7f7      	b.n	804c2cc <HW_RTC_DelayMs+0x18>

0804c2dc <HW_RTC_SetTimerContext>:
{
 804c2dc:	b510      	push	{r4, lr}
  RtcTimerContext.Rtc_Time = (uint32_t) HW_RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 804c2de:	4c04      	ldr	r4, [pc, #16]	; (804c2f0 <HW_RTC_SetTimerContext+0x14>)
 804c2e0:	f104 0154 	add.w	r1, r4, #84	; 0x54
 804c2e4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 804c2e8:	f7ff fe72 	bl	804bfd0 <HW_RTC_GetCalendarValue>
 804c2ec:	6520      	str	r0, [r4, #80]	; 0x50
}
 804c2ee:	bd10      	pop	{r4, pc}
 804c2f0:	2000af64 	.word	0x2000af64

0804c2f4 <HW_RTC_Init>:
{
 804c2f4:	b530      	push	{r4, r5, lr}
  if (HW_RTC_Initalized == false)
 804c2f6:	4c18      	ldr	r4, [pc, #96]	; (804c358 <HW_RTC_Init+0x64>)
 804c2f8:	f894 506c 	ldrb.w	r5, [r4, #108]	; 0x6c
{
 804c2fc:	b087      	sub	sp, #28
  if (HW_RTC_Initalized == false)
 804c2fe:	bb45      	cbnz	r5, 804c352 <HW_RTC_Init+0x5e>
  RtcHandle.Instance = RTC;
 804c300:	4b16      	ldr	r3, [pc, #88]	; (804c35c <HW_RTC_Init+0x68>)
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 804c302:	61a5      	str	r5, [r4, #24]
  RtcHandle.Init.SynchPrediv = PREDIV_S;  /*RTC_SYNCH_PREDIV; */
 804c304:	221f      	movs	r2, #31
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 804c306:	e9c4 3500 	strd	r3, r5, [r4]
  HAL_RTC_Init(&RtcHandle);
 804c30a:	4620      	mov	r0, r4
  RtcHandle.Init.SynchPrediv = PREDIV_S;  /*RTC_SYNCH_PREDIV; */
 804c30c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 804c310:	e9c4 2302 	strd	r2, r3, [r4, #8]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 804c314:	e9c4 5504 	strd	r5, r5, [r4, #16]
  HAL_RTC_Init(&RtcHandle);
 804c318:	f7f7 ffeb 	bl	80442f2 <HAL_RTC_Init>
  RTC_DateStruct.WeekDay = RTC_WEEKDAY_MONDAY;
 804c31c:	a906      	add	r1, sp, #24
 804c31e:	4b10      	ldr	r3, [pc, #64]	; (804c360 <HW_RTC_Init+0x6c>)
 804c320:	f841 3d18 	str.w	r3, [r1, #-24]!
  HAL_RTC_SetDate(&RtcHandle, &RTC_DateStruct, RTC_FORMAT_BIN);
 804c324:	462a      	mov	r2, r5
 804c326:	4620      	mov	r0, r4
 804c328:	f7f8 f8ad 	bl	8044486 <HAL_RTC_SetDate>
  RTC_TimeStruct.Hours = 11;
 804c32c:	f242 530b 	movw	r3, #9483	; 0x250b
  HAL_RTC_SetTime(&RtcHandle, &RTC_TimeStruct, RTC_FORMAT_BIN);
 804c330:	462a      	mov	r2, r5
 804c332:	a901      	add	r1, sp, #4
 804c334:	4620      	mov	r0, r4
  RTC_TimeStruct.TimeFormat = 0;
 804c336:	e9cd 3501 	strd	r3, r5, [sp, #4]
  RTC_TimeStruct.DayLightSaving = RTC_STOREOPERATION_RESET;
 804c33a:	e9cd 5504 	strd	r5, r5, [sp, #16]
  HAL_RTC_SetTime(&RtcHandle, &RTC_TimeStruct, RTC_FORMAT_BIN);
 804c33e:	f7f8 f831 	bl	80443a4 <HAL_RTC_SetTime>
  HAL_RTCEx_EnableBypassShadow(&RtcHandle);
 804c342:	4620      	mov	r0, r4
 804c344:	f7f8 fa03 	bl	804474e <HAL_RTCEx_EnableBypassShadow>
    HW_RTC_SetTimerContext();
 804c348:	f7ff ffc8 	bl	804c2dc <HW_RTC_SetTimerContext>
    HW_RTC_Initalized = true;
 804c34c:	2301      	movs	r3, #1
 804c34e:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
 804c352:	b007      	add	sp, #28
 804c354:	bd30      	pop	{r4, r5, pc}
 804c356:	bf00      	nop
 804c358:	2000af64 	.word	0x2000af64
 804c35c:	40002800 	.word	0x40002800
 804c360:	15080301 	.word	0x15080301

0804c364 <HW_RTC_GetTimerContext>:
}
 804c364:	4b01      	ldr	r3, [pc, #4]	; (804c36c <HW_RTC_GetTimerContext+0x8>)
 804c366:	6d18      	ldr	r0, [r3, #80]	; 0x50
 804c368:	4770      	bx	lr
 804c36a:	bf00      	nop
 804c36c:	2000af64 	.word	0x2000af64

0804c370 <HW_RTC_GetCalendarTime>:
 * \param [IN]   pointer to ms
 *
 * \return uint32_t seconds
 */
uint32_t HW_RTC_GetCalendarTime(uint16_t *mSeconds)
{
 804c370:	b530      	push	{r4, r5, lr}
 804c372:	b087      	sub	sp, #28
 804c374:	4605      	mov	r5, r0
  RTC_TimeTypeDef RTC_TimeStruct ;
  RTC_DateTypeDef RTC_DateStruct;
  uint32_t ticks;

  uint64_t calendarValue = HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 804c376:	a901      	add	r1, sp, #4
 804c378:	4668      	mov	r0, sp
 804c37a:	f7ff fe29 	bl	804bfd0 <HW_RTC_GetCalendarValue>
 804c37e:	4604      	mov	r4, r0

  uint32_t seconds = (uint32_t)(calendarValue >> N_PREDIV_S);

  ticks = (uint32_t) calendarValue & PREDIV_S;

  *mSeconds = HW_RTC_Tick2ms(ticks);
 804c380:	f3c0 0009 	ubfx	r0, r0, #0, #10
 804c384:	f7ff fe8b 	bl	804c09e <HW_RTC_Tick2ms>
 804c388:	8028      	strh	r0, [r5, #0]
  uint32_t seconds = (uint32_t)(calendarValue >> N_PREDIV_S);
 804c38a:	0aa0      	lsrs	r0, r4, #10

  return seconds;
}
 804c38c:	ea40 5081 	orr.w	r0, r0, r1, lsl #22
 804c390:	b007      	add	sp, #28
 804c392:	bd30      	pop	{r4, r5, pc}

0804c394 <HW_RTC_BKUPWrite>:

void HW_RTC_BKUPWrite(uint32_t Data0, uint32_t Data1)
{
 804c394:	b538      	push	{r3, r4, r5, lr}
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR0, Data0);
 804c396:	4c07      	ldr	r4, [pc, #28]	; (804c3b4 <HW_RTC_BKUPWrite+0x20>)
{
 804c398:	460d      	mov	r5, r1
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR0, Data0);
 804c39a:	4602      	mov	r2, r0
 804c39c:	2100      	movs	r1, #0
 804c39e:	4620      	mov	r0, r4
 804c3a0:	f7f8 f9cb 	bl	804473a <HAL_RTCEx_BKUPWrite>
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, Data1);
 804c3a4:	462a      	mov	r2, r5
 804c3a6:	4620      	mov	r0, r4
 804c3a8:	2101      	movs	r1, #1
}
 804c3aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, Data1);
 804c3ae:	f7f8 b9c4 	b.w	804473a <HAL_RTCEx_BKUPWrite>
 804c3b2:	bf00      	nop
 804c3b4:	2000af64 	.word	0x2000af64

0804c3b8 <HW_RTC_BKUPRead>:

void HW_RTC_BKUPRead(uint32_t *Data0, uint32_t *Data1)
{
 804c3b8:	b570      	push	{r4, r5, r6, lr}
  *Data0 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR0);
 804c3ba:	4c07      	ldr	r4, [pc, #28]	; (804c3d8 <HW_RTC_BKUPRead+0x20>)
{
 804c3bc:	4606      	mov	r6, r0
 804c3be:	460d      	mov	r5, r1
  *Data0 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR0);
 804c3c0:	4620      	mov	r0, r4
 804c3c2:	2100      	movs	r1, #0
 804c3c4:	f7f8 f9be 	bl	8044744 <HAL_RTCEx_BKUPRead>
  *Data1 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1);
 804c3c8:	2101      	movs	r1, #1
  *Data0 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR0);
 804c3ca:	6030      	str	r0, [r6, #0]
  *Data1 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1);
 804c3cc:	4620      	mov	r0, r4
 804c3ce:	f7f8 f9b9 	bl	8044744 <HAL_RTCEx_BKUPRead>
 804c3d2:	6028      	str	r0, [r5, #0]
}
 804c3d4:	bd70      	pop	{r4, r5, r6, pc}
 804c3d6:	bf00      	nop
 804c3d8:	2000af64 	.word	0x2000af64

0804c3dc <HW_SPI_IoInit>:
  /*##-2- Configure the SPI GPIOs */
  HW_SPI_IoDeInit();
}

void HW_SPI_IoInit(void)
{
 804c3dc:	b570      	push	{r4, r5, r6, lr}
 804c3de:	b088      	sub	sp, #32

	GPIO_InitTypeDef initStruct = { 0 };
 804c3e0:	2214      	movs	r2, #20
 804c3e2:	2100      	movs	r1, #0
 804c3e4:	a803      	add	r0, sp, #12
 804c3e6:	f001 f9f7 	bl	804d7d8 <memset>
	if (hspi.Instance == SPI2) {
 804c3ea:	4b25      	ldr	r3, [pc, #148]	; (804c480 <HW_SPI_IoInit+0xa4>)
 804c3ec:	681a      	ldr	r2, [r3, #0]
 804c3ee:	4b25      	ldr	r3, [pc, #148]	; (804c484 <HW_SPI_IoInit+0xa8>)
 804c3f0:	429a      	cmp	r2, r3
 804c3f2:	d143      	bne.n	804c47c <HW_SPI_IoInit+0xa0>
		/* Peripheral clock enable */
		__HAL_RCC_SPI2_CLK_ENABLE();
 804c3f4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 804c3f8:	2400      	movs	r4, #0
 804c3fa:	9400      	str	r4, [sp, #0]
 804c3fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		initStruct.Mode = GPIO_MODE_AF_PP;
		initStruct.Pull = GPIO_NOPULL;
		initStruct.Speed = GPIO_SPEED_HIGH;
		initStruct.Alternate = SPI2_AF;

		HW_GPIO_Init(RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 804c3fe:	4822      	ldr	r0, [pc, #136]	; (804c488 <HW_SPI_IoInit+0xac>)
		__HAL_RCC_SPI2_CLK_ENABLE();
 804c400:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 804c404:	641a      	str	r2, [r3, #64]	; 0x40
 804c406:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804c408:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 804c40c:	9200      	str	r2, [sp, #0]
 804c40e:	9a00      	ldr	r2, [sp, #0]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 804c410:	9401      	str	r4, [sp, #4]
 804c412:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804c414:	f042 0204 	orr.w	r2, r2, #4
 804c418:	631a      	str	r2, [r3, #48]	; 0x30
 804c41a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804c41c:	f002 0204 	and.w	r2, r2, #4
 804c420:	9201      	str	r2, [sp, #4]
 804c422:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 804c424:	9402      	str	r4, [sp, #8]
 804c426:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804c428:	f042 0202 	orr.w	r2, r2, #2
 804c42c:	631a      	str	r2, [r3, #48]	; 0x30
 804c42e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804c430:	f003 0302 	and.w	r3, r3, #2
 804c434:	9302      	str	r3, [sp, #8]
 804c436:	9b02      	ldr	r3, [sp, #8]
		initStruct.Alternate = SPI2_AF;
 804c438:	2203      	movs	r2, #3
 804c43a:	2305      	movs	r3, #5
 804c43c:	e9cd 2306 	strd	r2, r3, [sp, #24]
		initStruct.Mode = GPIO_MODE_AF_PP;
 804c440:	2502      	movs	r5, #2
		HW_GPIO_Init(RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 804c442:	aa03      	add	r2, sp, #12
 804c444:	f44f 5100 	mov.w	r1, #8192	; 0x2000
		initStruct.Mode = GPIO_MODE_AF_PP;
 804c448:	9504      	str	r5, [sp, #16]
		HW_GPIO_Init(RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 804c44a:	f7ff fd3b 	bl	804bec4 <HW_GPIO_Init>
		HW_GPIO_Init(RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct);
 804c44e:	aa03      	add	r2, sp, #12
 804c450:	2104      	movs	r1, #4
 804c452:	480e      	ldr	r0, [pc, #56]	; (804c48c <HW_SPI_IoInit+0xb0>)
 804c454:	f7ff fd36 	bl	804bec4 <HW_GPIO_Init>
		HW_GPIO_Init(RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct);
 804c458:	aa03      	add	r2, sp, #12
 804c45a:	2108      	movs	r1, #8
 804c45c:	480b      	ldr	r0, [pc, #44]	; (804c48c <HW_SPI_IoInit+0xb0>)
 804c45e:	f7ff fd31 	bl	804bec4 <HW_GPIO_Init>

		initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 804c462:	2601      	movs	r6, #1
		initStruct.Pull = GPIO_NOPULL;

		HW_GPIO_Init(RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct);
 804c464:	aa03      	add	r2, sp, #12
 804c466:	4629      	mov	r1, r5
 804c468:	4807      	ldr	r0, [pc, #28]	; (804c488 <HW_SPI_IoInit+0xac>)
		initStruct.Pull = GPIO_NOPULL;
 804c46a:	e9cd 6404 	strd	r6, r4, [sp, #16]
		HW_GPIO_Init(RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct);
 804c46e:	f7ff fd29 	bl	804bec4 <HW_GPIO_Init>

		HW_GPIO_Write(RADIO_NSS_PORT, RADIO_NSS_PIN, 1);
 804c472:	4632      	mov	r2, r6
 804c474:	4629      	mov	r1, r5
 804c476:	4804      	ldr	r0, [pc, #16]	; (804c488 <HW_SPI_IoInit+0xac>)
 804c478:	f7ff fda6 	bl	804bfc8 <HW_GPIO_Write>
	}
}
 804c47c:	b008      	add	sp, #32
 804c47e:	bd70      	pop	{r4, r5, r6, pc}
 804c480:	2000afd4 	.word	0x2000afd4
 804c484:	40003800 	.word	0x40003800
 804c488:	40020400 	.word	0x40020400
 804c48c:	40020800 	.word	0x40020800

0804c490 <HW_SPI_Init>:
{
 804c490:	b508      	push	{r3, lr}
  hspi.Instance = SPI_RADIO;
 804c492:	4b1b      	ldr	r3, [pc, #108]	; (804c500 <HW_SPI_Init+0x70>)
 804c494:	4a1b      	ldr	r2, [pc, #108]	; (804c504 <HW_SPI_Init+0x74>)
 804c496:	601a      	str	r2, [r3, #0]
/* Private functions ---------------------------------------------------------*/

static uint32_t SpiFrequency(uint32_t hz)
{
  uint32_t divisor = 0;
  uint32_t SysClkTmp = SystemCoreClock;
 804c498:	4a1b      	ldr	r2, [pc, #108]	; (804c508 <HW_SPI_Init+0x78>)
  uint32_t baudRate;

  while (SysClkTmp > hz)
 804c49a:	481c      	ldr	r0, [pc, #112]	; (804c50c <HW_SPI_Init+0x7c>)
  uint32_t SysClkTmp = SystemCoreClock;
 804c49c:	6811      	ldr	r1, [r2, #0]
  uint32_t divisor = 0;
 804c49e:	2200      	movs	r2, #0
  while (SysClkTmp > hz)
 804c4a0:	4281      	cmp	r1, r0
 804c4a2:	d904      	bls.n	804c4ae <HW_SPI_Init+0x1e>
  {
    divisor++;
 804c4a4:	3201      	adds	r2, #1
    SysClkTmp = (SysClkTmp >> 1);

    if (divisor >= 7)
 804c4a6:	2a07      	cmp	r2, #7
    SysClkTmp = (SysClkTmp >> 1);
 804c4a8:	ea4f 0151 	mov.w	r1, r1, lsr #1
    if (divisor >= 7)
 804c4ac:	d1f8      	bne.n	804c4a0 <HW_SPI_Init+0x10>
    {
      break;
    }
  }

  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 804c4ae:	f012 0104 	ands.w	r1, r2, #4
 804c4b2:	bf18      	it	ne
 804c4b4:	2120      	movne	r1, #32
             (((divisor & 0x2) == 0) ? 0x0 : SPI_CR1_BR_1) |
 804c4b6:	f012 0002 	ands.w	r0, r2, #2
 804c4ba:	bf18      	it	ne
 804c4bc:	2010      	movne	r0, #16
             (((divisor & 0x1) == 0) ? 0x0 : SPI_CR1_BR_0);
 804c4be:	f012 0201 	ands.w	r2, r2, #1
  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 804c4c2:	ea41 0100 	orr.w	r1, r1, r0
             (((divisor & 0x1) == 0) ? 0x0 : SPI_CR1_BR_0);
 804c4c6:	bf18      	it	ne
 804c4c8:	2208      	movne	r2, #8
  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 804c4ca:	430a      	orrs	r2, r1
  hspi.Init.BaudRatePrescaler = SpiFrequency(10000000);
 804c4cc:	61da      	str	r2, [r3, #28]
  hspi.Init.Mode           = SPI_MODE_MASTER;
 804c4ce:	f44f 7182 	mov.w	r1, #260	; 0x104
 804c4d2:	2200      	movs	r2, #0
 804c4d4:	e9c3 1201 	strd	r1, r2, [r3, #4]
  if (HAL_SPI_Init(&hspi) != HAL_OK)
 804c4d8:	4809      	ldr	r0, [pc, #36]	; (804c500 <HW_SPI_Init+0x70>)
  hspi.Init.DataSize       = SPI_DATASIZE_8BIT;
 804c4da:	60da      	str	r2, [r3, #12]
  hspi.Init.NSS            = SPI_NSS_SOFT;
 804c4dc:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi.Init.CLKPhase       = SPI_PHASE_1EDGE;
 804c4e0:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 804c4e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 804c4e6:	621a      	str	r2, [r3, #32]
  hspi.Init.NSS            = SPI_NSS_SOFT;
 804c4e8:	6199      	str	r1, [r3, #24]
  hspi.Init.TIMode         = SPI_TIMODE_DISABLE;
 804c4ea:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_SPI_Init(&hspi) != HAL_OK)
 804c4ec:	f7f8 ff38 	bl	8045360 <HAL_SPI_Init>
 804c4f0:	b108      	cbz	r0, 804c4f6 <HW_SPI_Init+0x66>
    Error_Handler();
 804c4f2:	f7ff fb09 	bl	804bb08 <Error_Handler>
}
 804c4f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HW_SPI_IoInit();
 804c4fa:	f7ff bf6f 	b.w	804c3dc <HW_SPI_IoInit>
 804c4fe:	bf00      	nop
 804c500:	2000afd4 	.word	0x2000afd4
 804c504:	40003800 	.word	0x40003800
 804c508:	2000108c 	.word	0x2000108c
 804c50c:	00989680 	.word	0x00989680

0804c510 <HW_SPI_InOut>:
{
 804c510:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  HAL_SPI_TransmitReceive(&hspi, (uint8_t *) &txData, (uint8_t *) &rxData, 1, HAL_MAX_DELAY);
 804c512:	f04f 33ff 	mov.w	r3, #4294967295
{
 804c516:	f8ad 000e 	strh.w	r0, [sp, #14]
  HAL_SPI_TransmitReceive(&hspi, (uint8_t *) &txData, (uint8_t *) &rxData, 1, HAL_MAX_DELAY);
 804c51a:	9300      	str	r3, [sp, #0]
 804c51c:	f10d 0216 	add.w	r2, sp, #22
 804c520:	2301      	movs	r3, #1
 804c522:	f10d 010e 	add.w	r1, sp, #14
 804c526:	4804      	ldr	r0, [pc, #16]	; (804c538 <HW_SPI_InOut+0x28>)
 804c528:	f7f8 ff57 	bl	80453da <HAL_SPI_TransmitReceive>
}
 804c52c:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 804c530:	b007      	add	sp, #28
 804c532:	f85d fb04 	ldr.w	pc, [sp], #4
 804c536:	bf00      	nop
 804c538:	2000afd4 	.word	0x2000afd4

0804c53c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init()
{
 804c53c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 804c53e:	2210      	movs	r2, #16
 804c540:	2100      	movs	r1, #0
 804c542:	a802      	add	r0, sp, #8
 804c544:	f001 f948 	bl	804d7d8 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 804c548:	4815      	ldr	r0, [pc, #84]	; (804c5a0 <MX_TIM2_Init+0x64>)
	htim2.Init.Prescaler = 100;
 804c54a:	2264      	movs	r2, #100	; 0x64
 804c54c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 804c550:	2300      	movs	r3, #0
	htim2.Init.Prescaler = 100;
 804c552:	e9c0 1200 	strd	r1, r2, [r0]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim2.Init.Period = 16000;
 804c556:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 804c55a:	e9cd 3300 	strd	r3, r3, [sp]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 804c55e:	6083      	str	r3, [r0, #8]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 804c560:	e9c0 2303 	strd	r2, r3, [r0, #12]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 804c564:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 804c566:	f7f9 f95b 	bl	8045820 <HAL_TIM_Base_Init>
 804c56a:	b108      	cbz	r0, 804c570 <MX_TIM2_Init+0x34>
		Error_Handler();
 804c56c:	f7ff facc 	bl	804bb08 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 804c570:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 804c574:	a902      	add	r1, sp, #8
 804c576:	480a      	ldr	r0, [pc, #40]	; (804c5a0 <MX_TIM2_Init+0x64>)
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 804c578:	9302      	str	r3, [sp, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 804c57a:	f7f9 f975 	bl	8045868 <HAL_TIM_ConfigClockSource>
 804c57e:	b108      	cbz	r0, 804c584 <MX_TIM2_Init+0x48>
		Error_Handler();
 804c580:	f7ff fac2 	bl	804bb08 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 804c584:	2300      	movs	r3, #0
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 804c586:	4669      	mov	r1, sp
 804c588:	4805      	ldr	r0, [pc, #20]	; (804c5a0 <MX_TIM2_Init+0x64>)
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 804c58a:	e9cd 3300 	strd	r3, r3, [sp]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 804c58e:	f7f9 f9ff 	bl	8045990 <HAL_TIMEx_MasterConfigSynchronization>
 804c592:	b108      	cbz	r0, 804c598 <MX_TIM2_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 804c594:	f7ff fab8 	bl	804bb08 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
}
 804c598:	b007      	add	sp, #28
 804c59a:	f85d fb04 	ldr.w	pc, [sp], #4
 804c59e:	bf00      	nop
 804c5a0:	2000d794 	.word	0x2000d794

0804c5a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 804c5a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 804c5a6:	2210      	movs	r2, #16
 804c5a8:	2100      	movs	r1, #0
 804c5aa:	a802      	add	r0, sp, #8
 804c5ac:	f001 f914 	bl	804d7d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 804c5b0:	4814      	ldr	r0, [pc, #80]	; (804c604 <MX_TIM3_Init+0x60>)
  htim3.Init.Prescaler = 100;
 804c5b2:	4915      	ldr	r1, [pc, #84]	; (804c608 <MX_TIM3_Init+0x64>)
 804c5b4:	2264      	movs	r2, #100	; 0x64
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 804c5b6:	2300      	movs	r3, #0
  htim3.Init.Prescaler = 100;
 804c5b8:	e9c0 1200 	strd	r1, r2, [r0]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 16000;
 804c5bc:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 804c5c0:	e9cd 3300 	strd	r3, r3, [sp]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 804c5c4:	6083      	str	r3, [r0, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 804c5c6:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 804c5ca:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 804c5cc:	f7f9 f928 	bl	8045820 <HAL_TIM_Base_Init>
 804c5d0:	b108      	cbz	r0, 804c5d6 <MX_TIM3_Init+0x32>
  {
    Error_Handler();
 804c5d2:	f7ff fa99 	bl	804bb08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 804c5d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 804c5da:	a902      	add	r1, sp, #8
 804c5dc:	4809      	ldr	r0, [pc, #36]	; (804c604 <MX_TIM3_Init+0x60>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 804c5de:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 804c5e0:	f7f9 f942 	bl	8045868 <HAL_TIM_ConfigClockSource>
 804c5e4:	b108      	cbz	r0, 804c5ea <MX_TIM3_Init+0x46>
  {
    Error_Handler();
 804c5e6:	f7ff fa8f 	bl	804bb08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 804c5ea:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 804c5ec:	4669      	mov	r1, sp
 804c5ee:	4805      	ldr	r0, [pc, #20]	; (804c604 <MX_TIM3_Init+0x60>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 804c5f0:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 804c5f4:	f7f9 f9cc 	bl	8045990 <HAL_TIMEx_MasterConfigSynchronization>
 804c5f8:	b108      	cbz	r0, 804c5fe <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 804c5fa:	f7ff fa85 	bl	804bb08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 804c5fe:	b007      	add	sp, #28
 804c600:	f85d fb04 	ldr.w	pc, [sp], #4
 804c604:	2000d754 	.word	0x2000d754
 804c608:	40000400 	.word	0x40000400

0804c60c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 804c60c:	6803      	ldr	r3, [r0, #0]
 804c60e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 804c612:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 804c614:	d116      	bne.n	804c644 <HAL_TIM_Base_MspInit+0x38>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 804c616:	2200      	movs	r2, #0
 804c618:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 804c61c:	9200      	str	r2, [sp, #0]
 804c61e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 804c620:	f041 0101 	orr.w	r1, r1, #1
 804c624:	6419      	str	r1, [r3, #64]	; 0x40
 804c626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804c628:	f003 0301 	and.w	r3, r3, #1
 804c62c:	9300      	str	r3, [sp, #0]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 804c62e:	201c      	movs	r0, #28
 804c630:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 804c632:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 804c634:	f7f6 fd38 	bl	80430a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 804c638:	201c      	movs	r0, #28
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 804c63a:	b003      	add	sp, #12
 804c63c:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 804c640:	f7f6 bd66 	b.w	8043110 <HAL_NVIC_EnableIRQ>
  else if(htim_base->Instance==TIM3)
 804c644:	4a0b      	ldr	r2, [pc, #44]	; (804c674 <HAL_TIM_Base_MspInit+0x68>)
 804c646:	4293      	cmp	r3, r2
 804c648:	d111      	bne.n	804c66e <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM3_CLK_ENABLE();
 804c64a:	2200      	movs	r2, #0
 804c64c:	4b0a      	ldr	r3, [pc, #40]	; (804c678 <HAL_TIM_Base_MspInit+0x6c>)
 804c64e:	9201      	str	r2, [sp, #4]
 804c650:	6c19      	ldr	r1, [r3, #64]	; 0x40
 804c652:	f041 0102 	orr.w	r1, r1, #2
 804c656:	6419      	str	r1, [r3, #64]	; 0x40
 804c658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804c65a:	f003 0302 	and.w	r3, r3, #2
 804c65e:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 804c660:	201d      	movs	r0, #29
 804c662:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 804c664:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 804c666:	f7f6 fd1f 	bl	80430a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 804c66a:	201d      	movs	r0, #29
 804c66c:	e7e5      	b.n	804c63a <HAL_TIM_Base_MspInit+0x2e>
}
 804c66e:	b003      	add	sp, #12
 804c670:	f85d fb04 	ldr.w	pc, [sp], #4
 804c674:	40000400 	.word	0x40000400
 804c678:	40023800 	.word	0x40023800

0804c67c <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 804c67c:	b58f      	push	{r0, r1, r2, r3, r7, lr}

  flags_ble.all_flags=RESET;
 804c67e:	4c85      	ldr	r4, [pc, #532]	; (804c894 <main+0x218>)
			if(bytes_read_rfid>4)
				b = message_handler((uint8_t*)&message, bytes_read_rfid);
			flags_ble.tag = RESET;
		}

		if (last_TAG >= 0)
 804c680:	4f85      	ldr	r7, [pc, #532]	; (804c898 <main+0x21c>)
  flags_ble.all_flags=RESET;
 804c682:	2500      	movs	r5, #0
 804c684:	7025      	strb	r5, [r4, #0]
  HAL_Init();
 804c686:	f7f6 fcd1 	bl	804302c <HAL_Init>
  SystemClock_Config();
 804c68a:	f000 fbdb 	bl	804ce44 <SystemClock_Config>
  HW_Init();
 804c68e:	f000 fae7 	bl	804cc60 <HW_Init>
  LPM_SetOffMode(LPM_APPLI_Id, LPM_Disable);
 804c692:	2101      	movs	r1, #1
 804c694:	4608      	mov	r0, r1
 804c696:	f7fe fe6f 	bl	804b378 <LPM_SetOffMode>
  PRINTF("APP_VERSION= %02X.%02X.%02X.%02X\r\n", (uint8_t)(__APP_VERSION >> 24), (uint8_t)(__APP_VERSION >> 16), (uint8_t)(__APP_VERSION >> 8), (uint8_t)__APP_VERSION);
 804c69a:	462b      	mov	r3, r5
 804c69c:	9500      	str	r5, [sp, #0]
 804c69e:	2203      	movs	r2, #3
 804c6a0:	2101      	movs	r1, #1
 804c6a2:	487e      	ldr	r0, [pc, #504]	; (804c89c <main+0x220>)
 804c6a4:	f7ff f932 	bl	804b90c <TraceSend>
  PRINTF("MAC_VERSION= %02X.%02X.%02X.%02X\r\n", (uint8_t)(__LORA_MAC_VERSION >> 24), (uint8_t)(__LORA_MAC_VERSION >> 16), (uint8_t)(__LORA_MAC_VERSION >> 8), (uint8_t)__LORA_MAC_VERSION);
 804c6a8:	2204      	movs	r2, #4
 804c6aa:	9500      	str	r5, [sp, #0]
 804c6ac:	2302      	movs	r3, #2
 804c6ae:	4611      	mov	r1, r2
 804c6b0:	487b      	ldr	r0, [pc, #492]	; (804c8a0 <main+0x224>)
  in_use_TAG = EMPTY_QUEUE;
 804c6b2:	4d7c      	ldr	r5, [pc, #496]	; (804c8a4 <main+0x228>)
  PRINTF("MAC_VERSION= %02X.%02X.%02X.%02X\r\n", (uint8_t)(__LORA_MAC_VERSION >> 24), (uint8_t)(__LORA_MAC_VERSION >> 16), (uint8_t)(__LORA_MAC_VERSION >> 8), (uint8_t)__LORA_MAC_VERSION);
 804c6b4:	f7ff f92a 	bl	804b90c <TraceSend>
  in_use_TAG = EMPTY_QUEUE;
 804c6b8:	f04f 33ff 	mov.w	r3, #4294967295
 804c6bc:	602b      	str	r3, [r5, #0]
		ble_handler((uint8_t*)&message_ble);
 804c6be:	f8df 822c 	ldr.w	r8, [pc, #556]	; 804c8ec <main+0x270>
	if (flags_ble.enable_handler){
 804c6c2:	7823      	ldrb	r3, [r4, #0]
 804c6c4:	0698      	lsls	r0, r3, #26
 804c6c6:	d505      	bpl.n	804c6d4 <main+0x58>
		flags_ble.enable_handler = 0;
 804c6c8:	f36f 1345 	bfc	r3, #5, #1
		ble_handler((uint8_t*)&message_ble);
 804c6cc:	4640      	mov	r0, r8
		flags_ble.enable_handler = 0;
 804c6ce:	7023      	strb	r3, [r4, #0]
		ble_handler((uint8_t*)&message_ble);
 804c6d0:	f7f4 fdd2 	bl	8041278 <ble_handler>
	if (flags_ble.update_mode){
 804c6d4:	7823      	ldrb	r3, [r4, #0]
 804c6d6:	06d9      	lsls	r1, r3, #27
 804c6d8:	d51e      	bpl.n	804c718 <main+0x9c>
		flags_ble.update_mode = RESET;
 804c6da:	f36f 1304 	bfc	r3, #4, #1
		HAL_NVIC_DisableIRQ(USART1_IRQn);
 804c6de:	2025      	movs	r0, #37	; 0x25
		flags_ble.update_mode = RESET;
 804c6e0:	7023      	strb	r3, [r4, #0]
		HAL_NVIC_DisableIRQ(USART1_IRQn);
 804c6e2:	f7f6 fd23 	bl	804312c <HAL_NVIC_DisableIRQ>
		HAL_UART_AbortReceive_IT(&huart1);
 804c6e6:	4870      	ldr	r0, [pc, #448]	; (804c8a8 <main+0x22c>)
 804c6e8:	f7f9 fd4c 	bl	8046184 <HAL_UART_AbortReceive_IT>
		HAL_UART_DeInit(&huart1);
 804c6ec:	486e      	ldr	r0, [pc, #440]	; (804c8a8 <main+0x22c>)
 804c6ee:	f7f9 fa67 	bl	8045bc0 <HAL_UART_DeInit>
		HAL_Delay(1);
 804c6f2:	2001      	movs	r0, #1
 804c6f4:	f000 fa3e 	bl	804cb74 <HAL_Delay>
		COM_Init();
 804c6f8:	f000 fea2 	bl	804d440 <COM_Init>
		HAL_Delay(1);
 804c6fc:	2001      	movs	r0, #1
 804c6fe:	f000 fa39 	bl	804cb74 <HAL_Delay>
		COM_Flush();
 804c702:	f000 fecd 	bl	804d4a0 <COM_Flush>
		FW_UPDATE_Run();
 804c706:	f7ff fb4b 	bl	804bda0 <FW_UPDATE_Run>
		MX_USART1_UART_Init();
 804c70a:	f7f4 fe97 	bl	804143c <MX_USART1_UART_Init>
		HAL_UART_Receive_IT(&huart1, rx_byte_uart1, 1);
 804c70e:	2201      	movs	r2, #1
 804c710:	4966      	ldr	r1, [pc, #408]	; (804c8ac <main+0x230>)
 804c712:	4865      	ldr	r0, [pc, #404]	; (804c8a8 <main+0x22c>)
 804c714:	f7f9 fb2a 	bl	8045d6c <HAL_UART_Receive_IT>
	if (flags_ble.start == SET)
 804c718:	7823      	ldrb	r3, [r4, #0]
 804c71a:	4e65      	ldr	r6, [pc, #404]	; (804c8b0 <main+0x234>)
 804c71c:	f013 0f01 	tst.w	r3, #1
 804c720:	d054      	beq.n	804c7cc <main+0x150>
		if(flags_ble.rfid_send_cmd == SET){
 804c722:	065a      	lsls	r2, r3, #25
 804c724:	d504      	bpl.n	804c730 <main+0xb4>
			flags_ble.rfid_send_cmd = RESET;
 804c726:	f36f 1386 	bfc	r3, #6, #1
 804c72a:	7023      	strb	r3, [r4, #0]
			read_earrings();
 804c72c:	f7f4 fe7c 	bl	8041428 <read_earrings>
		if(flags_ble.tag == SET)
 804c730:	7823      	ldrb	r3, [r4, #0]
 804c732:	079b      	lsls	r3, r3, #30
 804c734:	d50b      	bpl.n	804c74e <main+0xd2>
			if(bytes_read_rfid>4)
 804c736:	4b5f      	ldr	r3, [pc, #380]	; (804c8b4 <main+0x238>)
 804c738:	7819      	ldrb	r1, [r3, #0]
 804c73a:	2904      	cmp	r1, #4
 804c73c:	d903      	bls.n	804c746 <main+0xca>
				b = message_handler((uint8_t*)&message, bytes_read_rfid);
 804c73e:	485e      	ldr	r0, [pc, #376]	; (804c8b8 <main+0x23c>)
 804c740:	f7f4 fd18 	bl	8041174 <message_handler>
 804c744:	7030      	strb	r0, [r6, #0]
			flags_ble.tag = RESET;
 804c746:	7823      	ldrb	r3, [r4, #0]
 804c748:	f36f 0341 	bfc	r3, #1, #1
 804c74c:	7023      	strb	r3, [r4, #0]
		if (last_TAG >= 0)
 804c74e:	683a      	ldr	r2, [r7, #0]
 804c750:	2a00      	cmp	r2, #0
 804c752:	db3b      	blt.n	804c7cc <main+0x150>
		{
			// Variavel auxiliar para fazer envios sequenciais das TAGs sem mexer no indice original

			if ( (in_use_TAG<0) || (last_TAG == 0) )
 804c754:	682b      	ldr	r3, [r5, #0]
 804c756:	2b00      	cmp	r3, #0
 804c758:	db00      	blt.n	804c75c <main+0xe0>
 804c75a:	b90a      	cbnz	r2, 804c760 <main+0xe4>
			{
				in_use_TAG=0;
 804c75c:	2300      	movs	r3, #0
 804c75e:	602b      	str	r3, [r5, #0]
			}
			if (in_use_TAG>last_TAG)
 804c760:	682b      	ldr	r3, [r5, #0]
 804c762:	429a      	cmp	r2, r3
			{
				in_use_TAG = last_TAG;
 804c764:	bfb8      	it	lt
 804c766:	602a      	strlt	r2, [r5, #0]
			else{
				pack_position=0;
			}
#endif
			// 	Envio ao app via bluetooth
			if(in_use_TAG>=0)
 804c768:	6829      	ldr	r1, [r5, #0]
 804c76a:	2900      	cmp	r1, #0
 804c76c:	db2e      	blt.n	804c7cc <main+0x150>
//				{
//					PRINTF("%X ", (store_TAG[in_use_TAG].N_TAG[i]));
//				}
//				PRINTF("\r\n");
//################################
				if (flags_ble.wait_for_response==SET){
 804c76e:	7823      	ldrb	r3, [r4, #0]
 804c770:	0618      	lsls	r0, r3, #24
 804c772:	d519      	bpl.n	804c7a8 <main+0x12c>
					if (flags_ble.confirm == SET)
 804c774:	f013 0f04 	tst.w	r3, #4
 804c778:	4850      	ldr	r0, [pc, #320]	; (804c8bc <main+0x240>)
 804c77a:	d04b      	beq.n	804c814 <main+0x198>
					{
						count_confirm=0;
 804c77c:	f04f 0c00 	mov.w	ip, #0
						flags_ble.wait_for_response=RESET;
						flags_ble.confirm = RESET;
 804c780:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 804c784:	f36c 0382 	bfi	r3, ip, #2, #1
						count_confirm=0;
 804c788:	f8c0 c000 	str.w	ip, [r0]
						PRINTF("====> indices: IN: %d LS: %d\r\n", in_use_TAG, last_TAG);
 804c78c:	484c      	ldr	r0, [pc, #304]	; (804c8c0 <main+0x244>)
						flags_ble.confirm = RESET;
 804c78e:	7023      	strb	r3, [r4, #0]
						PRINTF("====> indices: IN: %d LS: %d\r\n", in_use_TAG, last_TAG);
 804c790:	f7ff f8bc 	bl	804b90c <TraceSend>
						if ((in_use_TAG<last_TAG))
 804c794:	682a      	ldr	r2, [r5, #0]
 804c796:	683b      	ldr	r3, [r7, #0]
 804c798:	429a      	cmp	r2, r3
 804c79a:	da32      	bge.n	804c802 <main+0x186>
						{
							PRINTF("NewTag to bluetooth \n\r");
 804c79c:	4849      	ldr	r0, [pc, #292]	; (804c8c4 <main+0x248>)
 804c79e:	f7ff f8b5 	bl	804b90c <TraceSend>
							in_use_TAG++;
 804c7a2:	682b      	ldr	r3, [r5, #0]
 804c7a4:	3301      	adds	r3, #1
 804c7a6:	602b      	str	r3, [r5, #0]
					{
						count_confirm++;
					}
				}

				if(flags_ble.connection == SET)
 804c7a8:	7823      	ldrb	r3, [r4, #0]
 804c7aa:	071b      	lsls	r3, r3, #28
 804c7ac:	d50e      	bpl.n	804c7cc <main+0x150>
				{
					PRINTF("Transmiting to bluetooth \n\r");
 804c7ae:	4846      	ldr	r0, [pc, #280]	; (804c8c8 <main+0x24c>)
 804c7b0:	f7ff f8ac 	bl	804b90c <TraceSend>
//					HAL_UART_Transmit(&huart1, (uint8_t*) store_TAG[in_use_TAG].N_TAG, TAG_SIZE-1, 1000);
					if(in_use_TAG>=0)
 804c7b4:	682b      	ldr	r3, [r5, #0]
 804c7b6:	2b00      	cmp	r3, #0
 804c7b8:	db08      	blt.n	804c7cc <main+0x150>
					{
						transmit_to_ble();
 804c7ba:	f7f4 fe01 	bl	80413c0 <transmit_to_ble>
						flags_ble.wait_for_response=SET;
 804c7be:	7823      	ldrb	r3, [r4, #0]
						HAL_Delay(TIMEOUT_BETWEEN_RESEND_TAG);
 804c7c0:	2064      	movs	r0, #100	; 0x64
						flags_ble.wait_for_response=SET;
 804c7c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 804c7c6:	7023      	strb	r3, [r4, #0]
						HAL_Delay(TIMEOUT_BETWEEN_RESEND_TAG);
 804c7c8:	f000 f9d4 	bl	804cb74 <HAL_Delay>
	}


#define form1

	if (AppProcessRequest == LORA_SET)
 804c7cc:	7873      	ldrb	r3, [r6, #1]
 804c7ce:	2b01      	cmp	r3, #1
 804c7d0:	d10e      	bne.n	804c7f0 <main+0x174>
	{
		AppProcessRequest = LORA_RESET;
 804c7d2:	f04f 0900 	mov.w	r9, #0
}

#ifdef form1
static void Send(void *context)
{
	HAL_TIM_Base_Stop_IT(&htim2);
 804c7d6:	483d      	ldr	r0, [pc, #244]	; (804c8cc <main+0x250>)
		AppProcessRequest = LORA_RESET;
 804c7d8:	f886 9001 	strb.w	r9, [r6, #1]
	HAL_TIM_Base_Stop_IT(&htim2);
 804c7dc:	f7f8 fefd 	bl	80455da <HAL_TIM_Base_Stop_IT>
	if (LORA_JoinStatus() != LORA_SET)
 804c7e0:	f7fe fd76 	bl	804b2d0 <LORA_JoinStatus>
 804c7e4:	2801      	cmp	r0, #1
 804c7e6:	d019      	beq.n	804c81c <main+0x1a0>
	{
		/*Not joined, try again later*/
		LORA_Join();
 804c7e8:	f7fe fd1c 	bl	804b224 <LORA_Join>

		flag_lora_joined = RESET;
 804c7ec:	f886 9002 	strb.w	r9, [r6, #2]
    if (LoraMacProcessRequest == LORA_SET)
 804c7f0:	7933      	ldrb	r3, [r6, #4]
 804c7f2:	2b01      	cmp	r3, #1
 804c7f4:	f47f af65 	bne.w	804c6c2 <main+0x46>
      LoraMacProcessRequest = LORA_RESET;
 804c7f8:	2300      	movs	r3, #0
 804c7fa:	7133      	strb	r3, [r6, #4]
      LoRaMacProcess();
 804c7fc:	f7fb fd48 	bl	8048290 <LoRaMacProcess>
 804c800:	e75d      	b.n	804c6be <main+0x42>
							PRINTF("Limpa Fila \n\r");
 804c802:	4833      	ldr	r0, [pc, #204]	; (804c8d0 <main+0x254>)
 804c804:	f7ff f882 	bl	804b90c <TraceSend>
							in_use_TAG=-1;
 804c808:	f04f 33ff 	mov.w	r3, #4294967295
 804c80c:	602b      	str	r3, [r5, #0]
							clear_buffers();
 804c80e:	f7f4 fca3 	bl	8041158 <clear_buffers>
 804c812:	e7c9      	b.n	804c7a8 <main+0x12c>
						count_confirm++;
 804c814:	6803      	ldr	r3, [r0, #0]
 804c816:	3301      	adds	r3, #1
 804c818:	6003      	str	r3, [r0, #0]
 804c81a:	e7c5      	b.n	804c7a8 <main+0x12c>
	//	save_on_card();
		return;
	}

	if (delayed_store_flag > 0){
 804c81c:	4a2d      	ldr	r2, [pc, #180]	; (804c8d4 <main+0x258>)
 804c81e:	6813      	ldr	r3, [r2, #0]
 804c820:	2b00      	cmp	r3, #0
		delayed_store_flag--;
 804c822:	bfc4      	itt	gt
 804c824:	f103 33ff 	addgt.w	r3, r3, #4294967295
 804c828:	6013      	strgt	r3, [r2, #0]
	//	remove_from_card();
	}

	flag_lora_joined = SET;
 804c82a:	2301      	movs	r3, #1

	AppData.Port = LORAWAN_APP_PORT;

	//muda_buffer(&AppData, Buffer_to_send); //JP
	AppData.BuffSize = sizeof(Model_TAG);
 804c82c:	4a2a      	ldr	r2, [pc, #168]	; (804c8d8 <main+0x25c>)
	flag_lora_joined = SET;
 804c82e:	70b3      	strb	r3, [r6, #2]
	AppData.BuffSize = sizeof(Model_TAG);
 804c830:	f44f 730f 	mov.w	r3, #572	; 0x23c
 804c834:	8093      	strh	r3, [r2, #4]
	//memcpy(AppData.Buff,&tag_to_lora,sizeof(Model_TAG));

	if (flag_send_timeout == SET)
 804c836:	4b29      	ldr	r3, [pc, #164]	; (804c8dc <main+0x260>)
 804c838:	7819      	ldrb	r1, [r3, #0]
 804c83a:	2901      	cmp	r1, #1
 804c83c:	d118      	bne.n	804c870 <main+0x1f4>
	{
		flag_send_timeout = RESET;
 804c83e:	2100      	movs	r1, #0
 804c840:	7019      	strb	r1, [r3, #0]
//		if(flag_send_to_lora > 0 ){
//					flag_send_to_lora--;
		if(pack_position > 0){
 804c842:	78f3      	ldrb	r3, [r6, #3]
 804c844:	6812      	ldr	r2, [r2, #0]
 804c846:	b1db      	cbz	r3, 804c880 <main+0x204>
			memcpy(AppData.Buff, &pack_to_lora[--pack_position], sizeof(Model_TAG));
 804c848:	3b01      	subs	r3, #1
 804c84a:	b2db      	uxtb	r3, r3
 804c84c:	4924      	ldr	r1, [pc, #144]	; (804c8e0 <main+0x264>)
 804c84e:	70f3      	strb	r3, [r6, #3]
 804c850:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 804c854:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 804c858:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 804c85c:	f853 0b04 	ldr.w	r0, [r3], #4
 804c860:	f842 0b04 	str.w	r0, [r2], #4
 804c864:	428b      	cmp	r3, r1
 804c866:	d1f9      	bne.n	804c85c <main+0x1e0>
		}
		else{
			char none_msg[] = "!VAZIO!";
			memcpy(AppData.Buff, &none_msg, sizeof(none_msg));
		}
		PRINTF("\n Pack_position = %d \n\r", pack_position);
 804c868:	78f1      	ldrb	r1, [r6, #3]
 804c86a:	481e      	ldr	r0, [pc, #120]	; (804c8e4 <main+0x268>)
 804c86c:	f7ff f84e 	bl	804b90c <TraceSend>
	}


	LORA_send(&AppData, LORAWAN_DEFAULT_CONFIRM_MSG_STATE);
 804c870:	2100      	movs	r1, #0
 804c872:	4819      	ldr	r0, [pc, #100]	; (804c8d8 <main+0x25c>)
 804c874:	f7fe fd3c 	bl	804b2f0 <LORA_send>
	HAL_TIM_Base_Start_IT(&htim2);
 804c878:	4814      	ldr	r0, [pc, #80]	; (804c8cc <main+0x250>)
 804c87a:	f7f8 fe9e 	bl	80455ba <HAL_TIM_Base_Start_IT>
 804c87e:	e7b7      	b.n	804c7f0 <main+0x174>
			char none_msg[] = "!VAZIO!";
 804c880:	4919      	ldr	r1, [pc, #100]	; (804c8e8 <main+0x26c>)
 804c882:	6808      	ldr	r0, [r1, #0]
 804c884:	6849      	ldr	r1, [r1, #4]
 804c886:	ab02      	add	r3, sp, #8
 804c888:	c303      	stmia	r3!, {r0, r1}
			memcpy(AppData.Buff, &none_msg, sizeof(none_msg));
 804c88a:	ab02      	add	r3, sp, #8
 804c88c:	cb03      	ldmia	r3!, {r0, r1}
 804c88e:	6010      	str	r0, [r2, #0]
 804c890:	6051      	str	r1, [r2, #4]
 804c892:	e7e9      	b.n	804c868 <main+0x1ec>
 804c894:	2000b53c 	.word	0x2000b53c
 804c898:	20001000 	.word	0x20001000
 804c89c:	0804fff6 	.word	0x0804fff6
 804c8a0:	08050019 	.word	0x08050019
 804c8a4:	200014a4 	.word	0x200014a4
 804c8a8:	2000b540 	.word	0x2000b540
 804c8ac:	2000b534 	.word	0x2000b534
 804c8b0:	2000b02c 	.word	0x2000b02c
 804c8b4:	200024cc 	.word	0x200024cc
 804c8b8:	20009a38 	.word	0x20009a38
 804c8bc:	200014a0 	.word	0x200014a0
 804c8c0:	0805003c 	.word	0x0805003c
 804c8c4:	0805005b 	.word	0x0805005b
 804c8c8:	08050080 	.word	0x08050080
 804c8cc:	2000d794 	.word	0x2000d794
 804c8d0:	08050072 	.word	0x08050072
 804c8d4:	200024d0 	.word	0x200024d0
 804c8d8:	20001224 	.word	0x20001224
 804c8dc:	20009c2c 	.word	0x20009c2c
 804c8e0:	2000d952 	.word	0x2000d952
 804c8e4:	0805009c 	.word	0x0805009c
 804c8e8:	080500b4 	.word	0x080500b4
 804c8ec:	20009a10 	.word	0x20009a10

0804c8f0 <MX_SDIO_SD_Init>:
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 804c8f0:	4b05      	ldr	r3, [pc, #20]	; (804c908 <MX_SDIO_SD_Init+0x18>)
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 804c8f2:	4906      	ldr	r1, [pc, #24]	; (804c90c <MX_SDIO_SD_Init+0x1c>)
 804c8f4:	2200      	movs	r2, #0
 804c8f6:	e9c3 1200 	strd	r1, r2, [r3]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 804c8fa:	e9c3 2202 	strd	r2, r2, [r3, #8]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 804c8fe:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hsd.Init.ClockDiv = 5;
 804c902:	2205      	movs	r2, #5
 804c904:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 804c906:	4770      	bx	lr
 804c908:	20014f5c 	.word	0x20014f5c
 804c90c:	40012c00 	.word	0x40012c00

0804c910 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 804c910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804c914:	4606      	mov	r6, r0
 804c916:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804c918:	2214      	movs	r2, #20
 804c91a:	2100      	movs	r1, #0
 804c91c:	a803      	add	r0, sp, #12
 804c91e:	f000 ff5b 	bl	804d7d8 <memset>
  if(sdHandle->Instance==SDIO)
 804c922:	6832      	ldr	r2, [r6, #0]
 804c924:	4b4d      	ldr	r3, [pc, #308]	; (804ca5c <HAL_SD_MspInit+0x14c>)
 804c926:	429a      	cmp	r2, r3
 804c928:	f040 8094 	bne.w	804ca54 <HAL_SD_MspInit+0x144>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 804c92c:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 804c930:	2500      	movs	r5, #0
 804c932:	9500      	str	r5, [sp, #0]
 804c934:	6c5a      	ldr	r2, [r3, #68]	; 0x44
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 804c936:	484a      	ldr	r0, [pc, #296]	; (804ca60 <HAL_SD_MspInit+0x150>)
    __HAL_RCC_SDIO_CLK_ENABLE();
 804c938:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 804c93c:	645a      	str	r2, [r3, #68]	; 0x44
 804c93e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 804c940:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 804c944:	9200      	str	r2, [sp, #0]
 804c946:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 804c948:	9501      	str	r5, [sp, #4]
 804c94a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804c94c:	f042 0204 	orr.w	r2, r2, #4
 804c950:	631a      	str	r2, [r3, #48]	; 0x30
 804c952:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804c954:	f002 0204 	and.w	r2, r2, #4
 804c958:	9201      	str	r2, [sp, #4]
 804c95a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 804c95c:	9502      	str	r5, [sp, #8]
 804c95e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804c960:	f042 0208 	orr.w	r2, r2, #8
 804c964:	631a      	str	r2, [r3, #48]	; 0x30
 804c966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804c968:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 804c96c:	240c      	movs	r4, #12
    __HAL_RCC_GPIOD_CLK_ENABLE();
 804c96e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804c970:	f04f 0a02 	mov.w	sl, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804c974:	f04f 0901 	mov.w	r9, #1
 804c978:	2703      	movs	r7, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 804c97a:	eb0d 0104 	add.w	r1, sp, r4
    __HAL_RCC_GPIOD_CLK_ENABLE();
 804c97e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 804c980:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804c982:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 804c986:	e9cd 3a03 	strd	r3, sl, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804c98a:	e9cd 9705 	strd	r9, r7, [sp, #20]

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 804c98e:	f04f 0804 	mov.w	r8, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 804c992:	f7f6 ff83 	bl	804389c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 804c996:	eb0d 0104 	add.w	r1, sp, r4
 804c99a:	4832      	ldr	r0, [pc, #200]	; (804ca64 <HAL_SD_MspInit+0x154>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 804c99c:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804c99e:	e9cd 8a03 	strd	r8, sl, [sp, #12]

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 804c9a2:	4c31      	ldr	r4, [pc, #196]	; (804ca68 <HAL_SD_MspInit+0x158>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804c9a4:	e9cd 9705 	strd	r9, r7, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 804c9a8:	f7f6 ff78 	bl	804389c <HAL_GPIO_Init>
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 804c9ac:	f8df e0c4 	ldr.w	lr, [pc, #196]	; 804ca74 <HAL_SD_MspInit+0x164>
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 804c9b0:	62a7      	str	r7, [r4, #40]	; 0x28
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 804c9b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 804c9b6:	e9c4 e300 	strd	lr, r3, [r4]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 804c9ba:	f44f 6980 	mov.w	r9, #1024	; 0x400
 804c9be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 804c9c2:	e9c4 9304 	strd	r9, r3, [r4, #16]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 804c9c6:	f44f 4a80 	mov.w	sl, #16384	; 0x4000
 804c9ca:	2320      	movs	r3, #32
 804c9cc:	e9c4 a306 	strd	sl, r3, [r4, #24]
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 804c9d0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 804c9d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 804c9d8:	4620      	mov	r0, r4
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 804c9da:	e9c4 5502 	strd	r5, r5, [r4, #8]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 804c9de:	e9c4 5808 	strd	r5, r8, [r4, #32]
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 804c9e2:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 804c9e6:	f7f6 fbed 	bl	80431c4 <HAL_DMA_Init>
 804c9ea:	b108      	cbz	r0, 804c9f0 <HAL_SD_MspInit+0xe0>
    {
      Error_Handler();
 804c9ec:	f7ff f88c 	bl	804bb08 <Error_Handler>

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 804c9f0:	4a1e      	ldr	r2, [pc, #120]	; (804ca6c <HAL_SD_MspInit+0x15c>)
    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 804c9f2:	6434      	str	r4, [r6, #64]	; 0x40
 804c9f4:	63a6      	str	r6, [r4, #56]	; 0x38
    hdma_sdio_tx.Instance = DMA2_Stream6;
 804c9f6:	4c1e      	ldr	r4, [pc, #120]	; (804ca70 <HAL_SD_MspInit+0x160>)
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 804c9f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 804c9fc:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 804ca00:	2140      	movs	r1, #64	; 0x40
 804ca02:	2300      	movs	r3, #0
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 804ca04:	f44f 6080 	mov.w	r0, #1024	; 0x400
 804ca08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 804ca0c:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 804ca10:	6223      	str	r3, [r4, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 804ca12:	2704      	movs	r7, #4
 804ca14:	2303      	movs	r3, #3
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 804ca16:	e9c4 0204 	strd	r0, r2, [r4, #16]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 804ca1a:	f44f 4580 	mov.w	r5, #16384	; 0x4000
 804ca1e:	2220      	movs	r2, #32
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 804ca20:	e9c4 7309 	strd	r7, r3, [r4, #36]	; 0x24
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 804ca24:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 804ca28:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 804ca2c:	4620      	mov	r0, r4
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 804ca2e:	e9c4 5206 	strd	r5, r2, [r4, #24]
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 804ca32:	e9c4 c30b 	strd	ip, r3, [r4, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 804ca36:	f7f6 fbc5 	bl	80431c4 <HAL_DMA_Init>
 804ca3a:	b108      	cbz	r0, 804ca40 <HAL_SD_MspInit+0x130>
    {
      Error_Handler();
 804ca3c:	f7ff f864 	bl	804bb08 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 804ca40:	2200      	movs	r2, #0
 804ca42:	2031      	movs	r0, #49	; 0x31
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 804ca44:	63f4      	str	r4, [r6, #60]	; 0x3c
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 804ca46:	4611      	mov	r1, r2
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 804ca48:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 804ca4a:	f7f6 fb2d 	bl	80430a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 804ca4e:	2031      	movs	r0, #49	; 0x31
 804ca50:	f7f6 fb5e 	bl	8043110 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 804ca54:	b008      	add	sp, #32
 804ca56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804ca5a:	bf00      	nop
 804ca5c:	40012c00 	.word	0x40012c00
 804ca60:	40020800 	.word	0x40020800
 804ca64:	40020c00 	.word	0x40020c00
 804ca68:	20014e9c 	.word	0x20014e9c
 804ca6c:	400264a0 	.word	0x400264a0
 804ca70:	20014efc 	.word	0x20014efc
 804ca74:	40026458 	.word	0x40026458

0804ca78 <SFU_APP_InstallAtNextReset>:
  *         This function is used by the User Application to request a Firmware installation (at next reboot).
  * @param  fw_header FW header of the FW to be installed
  * @retval HAL_OK if successful, otherwise HAL_ERROR
  */
HAL_StatusTypeDef SFU_APP_InstallAtNextReset(uint8_t *fw_header)
{
 804ca78:	b513      	push	{r0, r1, r4, lr}
#if  !defined(SFU_NO_SWAP)
  if (fw_header == NULL)
 804ca7a:	4604      	mov	r4, r0
 804ca7c:	b910      	cbnz	r0, 804ca84 <SFU_APP_InstallAtNextReset+0xc>
  {
    return HAL_ERROR;
 804ca7e:	2001      	movs	r0, #1
  }
  return HAL_OK;
#else
  return HAL_OK;                   /* Nothing to do */
#endif /* !SFU_NO_SWAP */
}
 804ca80:	b002      	add	sp, #8
 804ca82:	bd10      	pop	{r4, pc}
  ret = FLASH_If_Erase_Size((void *) SlotStartAdd[SLOT_SWAP], SFU_IMG_IMAGE_OFFSET);
 804ca84:	4b09      	ldr	r3, [pc, #36]	; (804caac <SFU_APP_InstallAtNextReset+0x34>)
 804ca86:	69db      	ldr	r3, [r3, #28]
 804ca88:	9301      	str	r3, [sp, #4]
 804ca8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 804ca8e:	4618      	mov	r0, r3
 804ca90:	f7ff f8ae 	bl	804bbf0 <FLASH_If_Erase_Size>
  if (ret == HAL_OK)
 804ca94:	2800      	cmp	r0, #0
 804ca96:	d1f2      	bne.n	804ca7e <SFU_APP_InstallAtNextReset+0x6>
    ret = FLASH_If_Write((void *)SlotStartAdd[SLOT_SWAP], pfw_header, SE_FW_HEADER_TOT_LEN);
 804ca98:	f44f 72a0 	mov.w	r2, #320	; 0x140
 804ca9c:	4621      	mov	r1, r4
 804ca9e:	9801      	ldr	r0, [sp, #4]
 804caa0:	f7ff f8d6 	bl	804bc50 <FLASH_If_Write>
    return HAL_ERROR;
 804caa4:	3000      	adds	r0, #0
 804caa6:	bf18      	it	ne
 804caa8:	2001      	movne	r0, #1
 804caaa:	e7e9      	b.n	804ca80 <SFU_APP_InstallAtNextReset+0x8>
 804caac:	0804f444 	.word	0x0804f444

0804cab0 <SFU_APP_GetDownloadAreaInfo>:
  * @retval HAL_OK if successful, otherwise HAL_ERROR
  */

void SFU_APP_GetDownloadAreaInfo(uint32_t DwlSlot, SFU_FwImageFlashTypeDef *pArea)
{
  pArea->DownloadAddr = SlotStartAdd[DwlSlot];
 804cab0:	4b06      	ldr	r3, [pc, #24]	; (804cacc <SFU_APP_GetDownloadAreaInfo+0x1c>)
 804cab2:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
  pArea->MaxSizeInBytes = (uint32_t)SLOT_SIZE(DwlSlot);
 804cab6:	4b06      	ldr	r3, [pc, #24]	; (804cad0 <SFU_APP_GetDownloadAreaInfo+0x20>)
  pArea->DownloadAddr = SlotStartAdd[DwlSlot];
 804cab8:	604a      	str	r2, [r1, #4]
  pArea->MaxSizeInBytes = (uint32_t)SLOT_SIZE(DwlSlot);
 804caba:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 804cabe:	3301      	adds	r3, #1
 804cac0:	1a9b      	subs	r3, r3, r2
 804cac2:	600b      	str	r3, [r1, #0]
  pArea->ImageOffsetInBytes = SFU_IMG_IMAGE_OFFSET;
 804cac4:	f44f 7300 	mov.w	r3, #512	; 0x200
 804cac8:	608b      	str	r3, [r1, #8]
}
 804caca:	4770      	bx	lr
 804cacc:	0804f444 	.word	0x0804f444
 804cad0:	0804f464 	.word	0x0804f464

0804cad4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 804cad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 804cad6:	4604      	mov	r4, r0
 804cad8:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804cada:	2214      	movs	r2, #20
 804cadc:	2100      	movs	r1, #0
 804cade:	a803      	add	r0, sp, #12
 804cae0:	f000 fe7a 	bl	804d7d8 <memset>
  if(hspi->Instance==SPI2)
 804cae4:	6822      	ldr	r2, [r4, #0]
 804cae6:	4b1f      	ldr	r3, [pc, #124]	; (804cb64 <HAL_SPI_MspInit+0x90>)
 804cae8:	429a      	cmp	r2, r3
 804caea:	d138      	bne.n	804cb5e <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 804caec:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 804caf0:	2400      	movs	r4, #0
 804caf2:	9400      	str	r4, [sp, #0]
 804caf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = LORA_MISO_Pin|LORA_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 804caf6:	481c      	ldr	r0, [pc, #112]	; (804cb68 <HAL_SPI_MspInit+0x94>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 804caf8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 804cafc:	641a      	str	r2, [r3, #64]	; 0x40
 804cafe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804cb00:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 804cb04:	9200      	str	r2, [sp, #0]
 804cb06:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 804cb08:	9401      	str	r4, [sp, #4]
 804cb0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804cb0c:	f042 0204 	orr.w	r2, r2, #4
 804cb10:	631a      	str	r2, [r3, #48]	; 0x30
 804cb12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804cb14:	f002 0204 	and.w	r2, r2, #4
 804cb18:	9201      	str	r2, [sp, #4]
 804cb1a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 804cb1c:	9402      	str	r4, [sp, #8]
 804cb1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804cb20:	f042 0202 	orr.w	r2, r2, #2
 804cb24:	631a      	str	r2, [r3, #48]	; 0x30
 804cb26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804cb28:	f003 0302 	and.w	r3, r3, #2
 804cb2c:	9302      	str	r3, [sp, #8]
 804cb2e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804cb30:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 804cb32:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804cb36:	2702      	movs	r7, #2
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 804cb38:	2603      	movs	r6, #3
 804cb3a:	2505      	movs	r5, #5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804cb3c:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 804cb40:	e9cd 6506 	strd	r6, r5, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 804cb44:	f7f6 feaa 	bl	804389c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LORA_SCK_Pin;
 804cb48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(LORA_SCK_GPIO_Port, &GPIO_InitStruct);
 804cb4c:	a903      	add	r1, sp, #12
 804cb4e:	4807      	ldr	r0, [pc, #28]	; (804cb6c <HAL_SPI_MspInit+0x98>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 804cb50:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804cb52:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804cb56:	e9cd 4605 	strd	r4, r6, [sp, #20]
    HAL_GPIO_Init(LORA_SCK_GPIO_Port, &GPIO_InitStruct);
 804cb5a:	f7f6 fe9f 	bl	804389c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 804cb5e:	b009      	add	sp, #36	; 0x24
 804cb60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 804cb62:	bf00      	nop
 804cb64:	40003800 	.word	0x40003800
 804cb68:	40020800 	.word	0x40020800
 804cb6c:	40020400 	.word	0x40020400

0804cb70 <HAL_InitTick>:
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Return function status */
  return HAL_OK;
}
 804cb70:	2000      	movs	r0, #0
 804cb72:	4770      	bx	lr

0804cb74 <HAL_Delay>:
  * @brief This function provides delay (in ms)
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 804cb74:	b082      	sub	sp, #8
 804cb76:	9001      	str	r0, [sp, #4]
  HW_RTC_DelayMs(Delay);   /* based on RTC */
 804cb78:	9801      	ldr	r0, [sp, #4]
}
 804cb7a:	b002      	add	sp, #8
  HW_RTC_DelayMs(Delay);   /* based on RTC */
 804cb7c:	f7ff bb9a 	b.w	804c2b4 <HW_RTC_DelayMs>

0804cb80 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 804cb80:	b082      	sub	sp, #8
  /* Enable Power Clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 804cb82:	2300      	movs	r3, #0
 804cb84:	9301      	str	r3, [sp, #4]
 804cb86:	4b06      	ldr	r3, [pc, #24]	; (804cba0 <HAL_MspInit+0x20>)
 804cb88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804cb8a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 804cb8e:	641a      	str	r2, [r3, #64]	; 0x40
 804cb90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804cb92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804cb96:	9301      	str	r3, [sp, #4]
 804cb98:	9b01      	ldr	r3, [sp, #4]

  HW_GpioInit();
}
 804cb9a:	b002      	add	sp, #8
  HW_GpioInit();
 804cb9c:	f000 b89a 	b.w	804ccd4 <HW_GpioInit>
 804cba0:	40023800 	.word	0x40023800

0804cba4 <HAL_RTC_MspInit>:
  *        order to modify the RTC Clock source, as consequence RTC registers (including
  *        the backup registers) and RCC_CSR register are set to their reset values.
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
{
 804cba4:	b500      	push	{lr}
 804cba6:	b091      	sub	sp, #68	; 0x44
	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 804cba8:	222c      	movs	r2, #44	; 0x2c
 804cbaa:	2100      	movs	r1, #0
 804cbac:	a805      	add	r0, sp, #20
 804cbae:	f000 fe13 	bl	804d7d8 <memset>
	  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct = {0};
 804cbb2:	2210      	movs	r2, #16
 804cbb4:	2100      	movs	r1, #0
 804cbb6:	4668      	mov	r0, sp
 804cbb8:	f000 fe0e 	bl	804d7d8 <memset>

	  /*##-1- Configue the RTC clock soucre ######################################*/
	  /* -a- Enable LSE Oscillator */
	  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSI; //_LSE
 804cbbc:	2308      	movs	r3, #8
 804cbbe:	9304      	str	r3, [sp, #16]
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
	  RCC_OscInitStruct.LSIState = RCC_LSI_ON; //.LSEState = LSE_ON
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 804cbc0:	a804      	add	r0, sp, #16
	  RCC_OscInitStruct.LSIState = RCC_LSI_ON; //.LSEState = LSE_ON
 804cbc2:	2301      	movs	r3, #1
 804cbc4:	9309      	str	r3, [sp, #36]	; 0x24
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 804cbc6:	f7f6 ffef 	bl	8043ba8 <HAL_RCC_OscConfig>
 804cbca:	b108      	cbz	r0, 804cbd0 <HAL_RTC_MspInit+0x2c>
	  {
	    Error_Handler();
 804cbcc:	f7fe ff9c 	bl	804bb08 <Error_Handler>
	  }

	  /* -b- Select LSI as RTC clock source */
	  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 804cbd0:	2302      	movs	r3, #2
 804cbd2:	9300      	str	r3, [sp, #0]
	  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;//LSE
	  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 804cbd4:	4668      	mov	r0, sp
	  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;//LSE
 804cbd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 804cbda:	9303      	str	r3, [sp, #12]
	  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 804cbdc:	f7f7 fa72 	bl	80440c4 <HAL_RCCEx_PeriphCLKConfig>
 804cbe0:	b108      	cbz	r0, 804cbe6 <HAL_RTC_MspInit+0x42>
	  {
	    Error_Handler();
 804cbe2:	f7fe ff91 	bl	804bb08 <Error_Handler>
	  }

	  /*##-2- Enable the RTC peripheral Clock ####################################*/
	  /* Enable RTC Clock */
	  __HAL_RCC_RTC_ENABLE();//RTCCLK
 804cbe6:	4b07      	ldr	r3, [pc, #28]	; (804cc04 <HAL_RTC_MspInit+0x60>)
 804cbe8:	2201      	movs	r2, #1
 804cbea:	601a      	str	r2, [r3, #0]

	  /*##-3- Configure the NVIC for RTC Alarm ###################################*/
	  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0x0, 0);
 804cbec:	2200      	movs	r2, #0
 804cbee:	4611      	mov	r1, r2
 804cbf0:	2029      	movs	r0, #41	; 0x29
 804cbf2:	f7f6 fa59 	bl	80430a8 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 804cbf6:	2029      	movs	r0, #41	; 0x29
 804cbf8:	f7f6 fa8a 	bl	8043110 <HAL_NVIC_EnableIRQ>
}
 804cbfc:	b011      	add	sp, #68	; 0x44
 804cbfe:	f85d fb04 	ldr.w	pc, [sp], #4
 804cc02:	bf00      	nop
 804cc04:	42470e3c 	.word	0x42470e3c

0804cc08 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc: RTC handle
  * @retval None
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
  TimerIrqHandler();
 804cc08:	f7fe bdba 	b.w	804b780 <TimerIrqHandler>

0804cc0c <HAL_GPIO_EXTI_Callback>:
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	HW_GPIO_IrqHandler(GPIO_Pin);
 804cc0c:	f7ff b9ce 	b.w	804bfac <HW_GPIO_IrqHandler>

0804cc10 <MSP_GetIRQn>:
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval IRQ number
  */
IRQn_Type MSP_GetIRQn(uint16_t GPIO_Pin)
{
  switch (GPIO_Pin)
 804cc10:	2810      	cmp	r0, #16
 804cc12:	d020      	beq.n	804cc56 <MSP_GetIRQn+0x46>
 804cc14:	d80c      	bhi.n	804cc30 <MSP_GetIRQn+0x20>
 804cc16:	2802      	cmp	r0, #2
 804cc18:	d019      	beq.n	804cc4e <MSP_GetIRQn+0x3e>
 804cc1a:	d803      	bhi.n	804cc24 <MSP_GetIRQn+0x14>
 804cc1c:	2801      	cmp	r0, #1
 804cc1e:	d01c      	beq.n	804cc5a <MSP_GetIRQn+0x4a>
    case GPIO_PIN_12:
    case GPIO_PIN_13:
    case GPIO_PIN_14:
    case GPIO_PIN_15:
    default:
      return EXTI15_10_IRQn;
 804cc20:	2028      	movs	r0, #40	; 0x28
 804cc22:	4770      	bx	lr
  switch (GPIO_Pin)
 804cc24:	2804      	cmp	r0, #4
 804cc26:	d014      	beq.n	804cc52 <MSP_GetIRQn+0x42>
 804cc28:	2808      	cmp	r0, #8
 804cc2a:	d1f9      	bne.n	804cc20 <MSP_GetIRQn+0x10>
      return EXTI3_IRQn;
 804cc2c:	2009      	movs	r0, #9
 804cc2e:	4770      	bx	lr
  switch (GPIO_Pin)
 804cc30:	2880      	cmp	r0, #128	; 0x80
 804cc32:	d004      	beq.n	804cc3e <MSP_GetIRQn+0x2e>
 804cc34:	d805      	bhi.n	804cc42 <MSP_GetIRQn+0x32>
 804cc36:	2820      	cmp	r0, #32
 804cc38:	d001      	beq.n	804cc3e <MSP_GetIRQn+0x2e>
 804cc3a:	2840      	cmp	r0, #64	; 0x40
 804cc3c:	d1f0      	bne.n	804cc20 <MSP_GetIRQn+0x10>
      return EXTI9_5_IRQn;
 804cc3e:	2017      	movs	r0, #23
 804cc40:	4770      	bx	lr
  switch (GPIO_Pin)
 804cc42:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 804cc46:	d0fa      	beq.n	804cc3e <MSP_GetIRQn+0x2e>
 804cc48:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 804cc4c:	e7f6      	b.n	804cc3c <MSP_GetIRQn+0x2c>
      return EXTI1_IRQn;
 804cc4e:	2007      	movs	r0, #7
 804cc50:	4770      	bx	lr
      return EXTI2_IRQn;
 804cc52:	2008      	movs	r0, #8
 804cc54:	4770      	bx	lr
      return EXTI4_IRQn;
 804cc56:	200a      	movs	r0, #10
 804cc58:	4770      	bx	lr
      return EXTI0_IRQn;
 804cc5a:	2006      	movs	r0, #6
  }
}
 804cc5c:	4770      	bx	lr
	...

0804cc60 <HW_Init>:
  * @brief This function initializes the hardware
  * @param None
  * @retval None
  */
void HW_Init(void)
{
 804cc60:	b510      	push	{r4, lr}
  if (McuInitialized == false)
 804cc62:	4c15      	ldr	r4, [pc, #84]	; (804ccb8 <HW_Init+0x58>)
 804cc64:	7823      	ldrb	r3, [r4, #0]
 804cc66:	bb2b      	cbnz	r3, 804ccb4 <HW_Init+0x54>
    NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x3000);
#endif

    //HW_AdcInit();

    Radio.IoInit();
 804cc68:	4b14      	ldr	r3, [pc, #80]	; (804ccbc <HW_Init+0x5c>)
 804cc6a:	681b      	ldr	r3, [r3, #0]
 804cc6c:	4798      	blx	r3

    HW_SPI_Init();
 804cc6e:	f7ff fc0f 	bl	804c490 <HW_SPI_Init>

    HW_RTC_Init();
 804cc72:	f7ff fb3f 	bl	804c2f4 <HW_RTC_Init>

//    HW_I2C1_Init();

    TraceInit();
 804cc76:	f7fe fe37 	bl	804b8e8 <TraceInit>

    //BSP_sensor_Init();

    Ble_Init_GPIO();
 804cc7a:	f7f4 fc17 	bl	80414ac <Ble_Init_GPIO>
    //COM_Init();
    MX_USART1_UART_Init();
 804cc7e:	f7f4 fbdd 	bl	804143c <MX_USART1_UART_Init>
    MX_USART2_UART_Init();
 804cc82:	f7f4 fbf7 	bl	8041474 <MX_USART2_UART_Init>
	MX_TIM3_Init();
 804cc86:	f7ff fc8d 	bl	804c5a4 <MX_TIM3_Init>
    MX_TIM2_Init();
 804cc8a:	f7ff fc57 	bl	804c53c <MX_TIM2_Init>

    MX_SDIO_SD_Init();
 804cc8e:	f7ff fe2f 	bl	804c8f0 <MX_SDIO_SD_Init>
    MX_FATFS_Init();
 804cc92:	f7f6 f8df 	bl	8042e54 <MX_FATFS_Init>

    // Inicialização da Base do timer
    HAL_TIM_Base_Start_IT(&htim3);
 804cc96:	480a      	ldr	r0, [pc, #40]	; (804ccc0 <HW_Init+0x60>)
 804cc98:	f7f8 fc8f 	bl	80455ba <HAL_TIM_Base_Start_IT>
    //__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);		// Habilita receber interrupções da UART com Bluetooth
    //__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);		// Habilita receber interrupções da UART com RFID
    HAL_UART_Receive_IT(&huart1, rx_byte_uart1, 1);
 804cc9c:	2201      	movs	r2, #1
 804cc9e:	4909      	ldr	r1, [pc, #36]	; (804ccc4 <HW_Init+0x64>)
 804cca0:	4809      	ldr	r0, [pc, #36]	; (804ccc8 <HW_Init+0x68>)
 804cca2:	f7f9 f863 	bl	8045d6c <HAL_UART_Receive_IT>
    HAL_UART_Receive_IT(&huart2, rx_byte_uart2, 1);
 804cca6:	2201      	movs	r2, #1
 804cca8:	4908      	ldr	r1, [pc, #32]	; (804cccc <HW_Init+0x6c>)
 804ccaa:	4809      	ldr	r0, [pc, #36]	; (804ccd0 <HW_Init+0x70>)
 804ccac:	f7f9 f85e 	bl	8045d6c <HAL_UART_Receive_IT>
    McuInitialized = true;
 804ccb0:	2301      	movs	r3, #1
 804ccb2:	7023      	strb	r3, [r4, #0]
  }
}
 804ccb4:	bd10      	pop	{r4, pc}
 804ccb6:	bf00      	nop
 804ccb8:	2000b06f 	.word	0x2000b06f
 804ccbc:	0804efb8 	.word	0x0804efb8
 804ccc0:	2000d754 	.word	0x2000d754
 804ccc4:	2000b534 	.word	0x2000b534
 804ccc8:	2000b540 	.word	0x2000b540
 804cccc:	2000b52c 	.word	0x2000b52c
 804ccd0:	2000b580 	.word	0x2000b580

0804ccd4 <HW_GpioInit>:
  vcom_IoDeInit();
}


void HW_GpioInit(void)
{
 804ccd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804ccd8:	b08c      	sub	sp, #48	; 0x30
	 GPIO_InitTypeDef GPIO_InitStruct = {0};

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 804ccda:	4c56      	ldr	r4, [pc, #344]	; (804ce34 <HW_GpioInit+0x160>)
	  __HAL_RCC_GPIOH_CLK_ENABLE();
	  __HAL_RCC_GPIOA_CLK_ENABLE();
	  __HAL_RCC_GPIOB_CLK_ENABLE();
	  __HAL_RCC_GPIOD_CLK_ENABLE();

	  HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_RESET);
 804ccdc:	4f56      	ldr	r7, [pc, #344]	; (804ce38 <HW_GpioInit+0x164>)
	  HAL_GPIO_WritePin(MEM_WP_GPIO_Port, MEM_WP_Pin, GPIO_PIN_SET);

	  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
	  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 804ccde:	f8df 815c 	ldr.w	r8, [pc, #348]	; 804ce3c <HW_GpioInit+0x168>
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 804cce2:	f8df 915c 	ldr.w	r9, [pc, #348]	; 804ce40 <HW_GpioInit+0x16c>
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 804cce6:	2500      	movs	r5, #0
	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 804cce8:	2214      	movs	r2, #20
 804ccea:	2100      	movs	r1, #0
 804ccec:	a807      	add	r0, sp, #28
 804ccee:	f000 fd73 	bl	804d7d8 <memset>
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 804ccf2:	9500      	str	r5, [sp, #0]
 804ccf4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804ccf6:	f043 0310 	orr.w	r3, r3, #16
 804ccfa:	6323      	str	r3, [r4, #48]	; 0x30
 804ccfc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804ccfe:	f003 0310 	and.w	r3, r3, #16
 804cd02:	9300      	str	r3, [sp, #0]
 804cd04:	9b00      	ldr	r3, [sp, #0]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 804cd06:	9501      	str	r5, [sp, #4]
 804cd08:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804cd0a:	f043 0304 	orr.w	r3, r3, #4
 804cd0e:	6323      	str	r3, [r4, #48]	; 0x30
 804cd10:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804cd12:	f003 0304 	and.w	r3, r3, #4
 804cd16:	9301      	str	r3, [sp, #4]
 804cd18:	9b01      	ldr	r3, [sp, #4]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 804cd1a:	9502      	str	r5, [sp, #8]
 804cd1c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804cd1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 804cd22:	6323      	str	r3, [r4, #48]	; 0x30
 804cd24:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804cd26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804cd2a:	9302      	str	r3, [sp, #8]
 804cd2c:	9b02      	ldr	r3, [sp, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 804cd2e:	9503      	str	r5, [sp, #12]
 804cd30:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804cd32:	f043 0301 	orr.w	r3, r3, #1
 804cd36:	6323      	str	r3, [r4, #48]	; 0x30
 804cd38:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804cd3a:	f003 0301 	and.w	r3, r3, #1
 804cd3e:	9303      	str	r3, [sp, #12]
 804cd40:	9b03      	ldr	r3, [sp, #12]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 804cd42:	9504      	str	r5, [sp, #16]
 804cd44:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804cd46:	f043 0302 	orr.w	r3, r3, #2
 804cd4a:	6323      	str	r3, [r4, #48]	; 0x30
 804cd4c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804cd4e:	f003 0302 	and.w	r3, r3, #2
 804cd52:	9304      	str	r3, [sp, #16]
 804cd54:	9b04      	ldr	r3, [sp, #16]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 804cd56:	9505      	str	r5, [sp, #20]
 804cd58:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804cd5a:	f043 0308 	orr.w	r3, r3, #8
 804cd5e:	6323      	str	r3, [r4, #48]	; 0x30
 804cd60:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804cd62:	f003 0308 	and.w	r3, r3, #8
 804cd66:	9305      	str	r3, [sp, #20]
	  HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_RESET);
 804cd68:	462a      	mov	r2, r5
 804cd6a:	4638      	mov	r0, r7
 804cd6c:	2101      	movs	r1, #1
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 804cd6e:	9b05      	ldr	r3, [sp, #20]
	  HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_RESET);
 804cd70:	f7f6 ff08 	bl	8043b84 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(MEM_WP_GPIO_Port, MEM_WP_Pin, GPIO_PIN_SET);
 804cd74:	2201      	movs	r2, #1
 804cd76:	4638      	mov	r0, r7
 804cd78:	f44f 7180 	mov.w	r1, #256	; 0x100
 804cd7c:	f7f6 ff02 	bl	8043b84 <HAL_GPIO_WritePin>
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 804cd80:	2601      	movs	r6, #1
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 804cd82:	2308      	movs	r3, #8
	  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 804cd84:	a907      	add	r1, sp, #28
 804cd86:	4640      	mov	r0, r8
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 804cd88:	e9cd 3907 	strd	r3, r9, [sp, #28]

      GPIO_InitStruct.Pin = ANEMOMETRO_Pin;
 804cd8c:	f44f 4a80 	mov.w	sl, #16384	; 0x4000
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 804cd90:	9609      	str	r6, [sp, #36]	; 0x24
	  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 804cd92:	f7f6 fd83 	bl	804389c <HAL_GPIO_Init>
      GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
      GPIO_InitStruct.Pull = GPIO_PULLUP;
      HAL_GPIO_Init(ANEMOMETRO_GPIO_Port, &GPIO_InitStruct);
 804cd96:	a907      	add	r1, sp, #28
 804cd98:	4640      	mov	r0, r8
      GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 804cd9a:	e9cd a907 	strd	sl, r9, [sp, #28]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 804cd9e:	9609      	str	r6, [sp, #36]	; 0x24
      HAL_GPIO_Init(ANEMOMETRO_GPIO_Port, &GPIO_InitStruct);
 804cda0:	f7f6 fd7c 	bl	804389c <HAL_GPIO_Init>

      GPIO_InitStruct.Pin = PLUVIOMETRO_Pin;
 804cda4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
      GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 804cda8:	e9cd 3907 	strd	r3, r9, [sp, #28]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
      HAL_GPIO_Init(PLUVIOMETRO_GPIO_Port, &GPIO_InitStruct);
 804cdac:	a907      	add	r1, sp, #28
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 804cdae:	2302      	movs	r3, #2
      HAL_GPIO_Init(PLUVIOMETRO_GPIO_Port, &GPIO_InitStruct);
 804cdb0:	4640      	mov	r0, r8
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 804cdb2:	9309      	str	r3, [sp, #36]	; 0x24
      HAL_GPIO_Init(PLUVIOMETRO_GPIO_Port, &GPIO_InitStruct);
 804cdb4:	f7f6 fd72 	bl	804389c <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = LORA_RESET_Pin|MEM_WP_Pin;
 804cdb8:	f240 1301 	movw	r3, #257	; 0x101
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 804cdbc:	a907      	add	r1, sp, #28
 804cdbe:	4638      	mov	r0, r7

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 804cdc0:	f507 6780 	add.w	r7, r7, #1024	; 0x400
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 804cdc4:	e9cd 3607 	strd	r3, r6, [sp, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804cdc8:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 804cdcc:	f7f6 fd66 	bl	804389c <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 804cdd0:	4632      	mov	r2, r6
 804cdd2:	4651      	mov	r1, sl
 804cdd4:	4638      	mov	r0, r7
 804cdd6:	f7f6 fed5 	bl	8043b84 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : PtPin */
	  GPIO_InitStruct.Pin = SD_DET_CARD_Pin;
 804cdda:	2380      	movs	r3, #128	; 0x80
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
	  HAL_GPIO_Init(SD_DET_CARD_GPIO_Port, &GPIO_InitStruct);
 804cddc:	a907      	add	r1, sp, #28
 804cdde:	4638      	mov	r0, r7
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 804cde0:	e9cd 3507 	strd	r3, r5, [sp, #28]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 804cde4:	9609      	str	r6, [sp, #36]	; 0x24
	  HAL_GPIO_Init(SD_DET_CARD_GPIO_Port, &GPIO_InitStruct);
 804cde6:	f7f6 fd59 	bl	804389c <HAL_GPIO_Init>

	  /* DMA controller clock enable */
	  __HAL_RCC_DMA2_CLK_ENABLE();
 804cdea:	9506      	str	r5, [sp, #24]
 804cdec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804cdee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 804cdf2:	6323      	str	r3, [r4, #48]	; 0x30
 804cdf4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804cdf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000

	  /* DMA interrupt init */
	  /* DMA2_Stream3_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 804cdfa:	462a      	mov	r2, r5
 804cdfc:	4629      	mov	r1, r5
	  __HAL_RCC_DMA2_CLK_ENABLE();
 804cdfe:	9306      	str	r3, [sp, #24]
	  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 804ce00:	203b      	movs	r0, #59	; 0x3b
	  __HAL_RCC_DMA2_CLK_ENABLE();
 804ce02:	9b06      	ldr	r3, [sp, #24]
	  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 804ce04:	f7f6 f950 	bl	80430a8 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 804ce08:	203b      	movs	r0, #59	; 0x3b
 804ce0a:	f7f6 f981 	bl	8043110 <HAL_NVIC_EnableIRQ>

	  /* DMA2_Stream6_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 804ce0e:	462a      	mov	r2, r5
 804ce10:	4629      	mov	r1, r5
 804ce12:	2045      	movs	r0, #69	; 0x45
 804ce14:	f7f6 f948 	bl	80430a8 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 804ce18:	2045      	movs	r0, #69	; 0x45
 804ce1a:	f7f6 f979 	bl	8043110 <HAL_NVIC_EnableIRQ>


	  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 804ce1e:	462a      	mov	r2, r5
 804ce20:	4629      	mov	r1, r5
 804ce22:	2028      	movs	r0, #40	; 0x28
 804ce24:	f7f6 f940 	bl	80430a8 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 804ce28:	2028      	movs	r0, #40	; 0x28
 804ce2a:	f7f6 f971 	bl	8043110 <HAL_NVIC_EnableIRQ>

}
 804ce2e:	b00c      	add	sp, #48	; 0x30
 804ce30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804ce34:	40023800 	.word	0x40023800
 804ce38:	40020400 	.word	0x40020400
 804ce3c:	40021000 	.word	0x40021000
 804ce40:	10110000 	.word	0x10110000

0804ce44 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 804ce44:	b530      	push	{r4, r5, lr}
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 804ce46:	2400      	movs	r4, #0
{
 804ce48:	b099      	sub	sp, #100	; 0x64
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 804ce4a:	2510      	movs	r5, #16
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 804ce4c:	2214      	movs	r2, #20
 804ce4e:	4621      	mov	r1, r4
 804ce50:	a807      	add	r0, sp, #28
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 804ce52:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 804ce56:	f000 fcbf 	bl	804d7d8 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 804ce5a:	462a      	mov	r2, r5
 804ce5c:	4621      	mov	r1, r4
 804ce5e:	a803      	add	r0, sp, #12
 804ce60:	f000 fcba 	bl	804d7d8 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 804ce64:	4b22      	ldr	r3, [pc, #136]	; (804cef0 <SystemClock_Config+0xac>)
 804ce66:	9401      	str	r4, [sp, #4]
 804ce68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804ce6a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 804ce6e:	641a      	str	r2, [r3, #64]	; 0x40
 804ce70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804ce72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804ce76:	9301      	str	r3, [sp, #4]
 804ce78:	9b01      	ldr	r3, [sp, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 804ce7a:	4b1e      	ldr	r3, [pc, #120]	; (804cef4 <SystemClock_Config+0xb0>)
 804ce7c:	9402      	str	r4, [sp, #8]
 804ce7e:	681a      	ldr	r2, [r3, #0]
 804ce80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 804ce84:	601a      	str	r2, [r3, #0]
 804ce86:	681b      	ldr	r3, [r3, #0]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
	//RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;

	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLM = 16;
 804ce88:	9514      	str	r5, [sp, #80]	; 0x50
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 804ce8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 804ce8e:	9302      	str	r3, [sp, #8]
 804ce90:	9b02      	ldr	r3, [sp, #8]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI;
 804ce92:	230a      	movs	r3, #10
 804ce94:	930c      	str	r3, [sp, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 804ce96:	2301      	movs	r3, #1
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 804ce98:	e9cd 350f 	strd	r3, r5, [sp, #60]	; 0x3c
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 804ce9c:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 192;
 804ce9e:	22c0      	movs	r2, #192	; 0xc0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 804cea0:	2302      	movs	r3, #2
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 804cea2:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 804cea6:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLQ = 4;

	//RCC_OscInitStruct.LSEState = RCC_LSE_ON;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 804ceaa:	a80c      	add	r0, sp, #48	; 0x30
	RCC_OscInitStruct.PLL.PLLQ = 4;
 804ceac:	2304      	movs	r3, #4
 804ceae:	9317      	str	r3, [sp, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 804ceb0:	f7f6 fe7a 	bl	8043ba8 <HAL_RCC_OscConfig>
 804ceb4:	b108      	cbz	r0, 804ceba <SystemClock_Config+0x76>
		Error_Handler();
 804ceb6:	f7fe fe27 	bl	804bb08 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 804ceba:	230f      	movs	r3, #15
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 804cebc:	2100      	movs	r1, #0
 804cebe:	a807      	add	r0, sp, #28
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 804cec0:	e9cd 3407 	strd	r3, r4, [sp, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 804cec4:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 804cec8:	940b      	str	r4, [sp, #44]	; 0x2c
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 804ceca:	f7f7 f841 	bl	8043f50 <HAL_RCC_ClockConfig>
 804cece:	b108      	cbz	r0, 804ced4 <SystemClock_Config+0x90>
		Error_Handler();
 804ced0:	f7fe fe1a 	bl	804bb08 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 804ced4:	2302      	movs	r3, #2
 804ced6:	9303      	str	r3, [sp, #12]
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 804ced8:	a803      	add	r0, sp, #12
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 804ceda:	f44f 7300 	mov.w	r3, #512	; 0x200
 804cede:	9306      	str	r3, [sp, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 804cee0:	f7f7 f8f0 	bl	80440c4 <HAL_RCCEx_PeriphCLKConfig>
 804cee4:	b108      	cbz	r0, 804ceea <SystemClock_Config+0xa6>
		Error_Handler();
 804cee6:	f7fe fe0f 	bl	804bb08 <Error_Handler>
	}

}
 804ceea:	b019      	add	sp, #100	; 0x64
 804ceec:	bd30      	pop	{r4, r5, pc}
 804ceee:	bf00      	nop
 804cef0:	40023800 	.word	0x40023800
 804cef4:	40007000 	.word	0x40007000

0804cef8 <NMI_Handler>:
  * @retval None
  */

void NMI_Handler(void)
{
}
 804cef8:	4770      	bx	lr

0804cefa <HardFault_Handler>:

void HardFault_Handler(void)
{
  while (1)
  {
    __NOP();
 804cefa:	bf00      	nop
 804cefc:	e7fd      	b.n	804cefa <HardFault_Handler>

0804cefe <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 804cefe:	e7fe      	b.n	804cefe <MemManage_Handler>

0804cf00 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 804cf00:	e7fe      	b.n	804cf00 <BusFault_Handler>

0804cf02 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 804cf02:	e7fe      	b.n	804cf02 <UsageFault_Handler>

0804cf04 <SVC_Handler>:
 804cf04:	4770      	bx	lr

0804cf06 <DebugMon_Handler>:
 804cf06:	4770      	bx	lr

0804cf08 <PendSV_Handler>:
 804cf08:	4770      	bx	lr

0804cf0a <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 804cf0a:	f7f6 b8a9 	b.w	8043060 <HAL_IncTick>
	...

0804cf10 <TIM2_IRQHandler>:
}

void TIM2_IRQHandler(void)
{
	flags_ble.rfid_send_cmd = SET;
 804cf10:	4a03      	ldr	r2, [pc, #12]	; (804cf20 <TIM2_IRQHandler+0x10>)

	HAL_TIM_IRQHandler(&htim2);
 804cf12:	4804      	ldr	r0, [pc, #16]	; (804cf24 <TIM2_IRQHandler+0x14>)
	flags_ble.rfid_send_cmd = SET;
 804cf14:	7813      	ldrb	r3, [r2, #0]
 804cf16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804cf1a:	7013      	strb	r3, [r2, #0]
	HAL_TIM_IRQHandler(&htim2);
 804cf1c:	f7f8 bb77 	b.w	804560e <HAL_TIM_IRQHandler>
 804cf20:	2000b53c 	.word	0x2000b53c
 804cf24:	2000d794 	.word	0x2000d794

0804cf28 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 804cf28:	b508      	push	{r3, lr}
//	{
//		flags_ble.connection = RESET;
//		count_tim3 = 0;
//	}

	if(count_confirm > RETRIES_BEFORE_DISCONNECT)
 804cf2a:	4b0c      	ldr	r3, [pc, #48]	; (804cf5c <TIM3_IRQHandler+0x34>)
 804cf2c:	681b      	ldr	r3, [r3, #0]
 804cf2e:	2b03      	cmp	r3, #3
 804cf30:	4b0b      	ldr	r3, [pc, #44]	; (804cf60 <TIM3_IRQHandler+0x38>)
		flags_ble.connection = RESET;
 804cf32:	bfc2      	ittt	gt
 804cf34:	781a      	ldrbgt	r2, [r3, #0]
 804cf36:	f36f 02c3 	bfcgt	r2, #3, #1
 804cf3a:	701a      	strbgt	r2, [r3, #0]
//	if(flags_ble.connection == RESET)
//	{
//			HAL_TIM_Base_Stop_IT(&htim2);
//	}

	if(flags_ble.start == SET){
 804cf3c:	781b      	ldrb	r3, [r3, #0]
 804cf3e:	07db      	lsls	r3, r3, #31
		//Flag count to send data via lora
		//if(count_send_to_lora++ == 50)
		//{
			flag_send_timeout = SET;
 804cf40:	bf44      	itt	mi
 804cf42:	4b08      	ldrmi	r3, [pc, #32]	; (804cf64 <TIM3_IRQHandler+0x3c>)
 804cf44:	2201      	movmi	r2, #1
		//	count_send_to_lora = 0;
		//}
	}


	HAL_NVIC_ClearPendingIRQ(TIM3_IRQn); // limpa flags de interrupção
 804cf46:	f04f 001d 	mov.w	r0, #29
			flag_send_timeout = SET;
 804cf4a:	bf48      	it	mi
 804cf4c:	701a      	strbmi	r2, [r3, #0]
	HAL_NVIC_ClearPendingIRQ(TIM3_IRQn); // limpa flags de interrupção
 804cf4e:	f7f6 f913 	bl	8043178 <HAL_NVIC_ClearPendingIRQ>

	HAL_TIM_IRQHandler(&htim3);
 804cf52:	4805      	ldr	r0, [pc, #20]	; (804cf68 <TIM3_IRQHandler+0x40>)

}
 804cf54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_IRQHandler(&htim3);
 804cf58:	f7f8 bb59 	b.w	804560e <HAL_TIM_IRQHandler>
 804cf5c:	200014a0 	.word	0x200014a0
 804cf60:	2000b53c 	.word	0x2000b53c
 804cf64:	20009c2c 	.word	0x20009c2c
 804cf68:	2000d754 	.word	0x2000d754

0804cf6c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 804cf6c:	b508      	push	{r3, lr}


	HAL_UART_IRQHandler(&huart1);
 804cf6e:	4815      	ldr	r0, [pc, #84]	; (804cfc4 <USART1_IRQHandler+0x58>)
 804cf70:	f7f8 ffde 	bl	8045f30 <HAL_UART_IRQHandler>
	if(ble_index>sizeof(message_ble))
 804cf74:	4b14      	ldr	r3, [pc, #80]	; (804cfc8 <USART1_IRQHandler+0x5c>)
		ble_index=0;
	message_ble[ble_index] = rx_byte_uart1[0];
 804cf76:	4915      	ldr	r1, [pc, #84]	; (804cfcc <USART1_IRQHandler+0x60>)
	if(ble_index>sizeof(message_ble))
 804cf78:	681a      	ldr	r2, [r3, #0]
	message_ble[ble_index] = rx_byte_uart1[0];
 804cf7a:	4815      	ldr	r0, [pc, #84]	; (804cfd0 <USART1_IRQHandler+0x64>)
 804cf7c:	7809      	ldrb	r1, [r1, #0]
	if(ble_index>sizeof(message_ble))
 804cf7e:	2a21      	cmp	r2, #33	; 0x21
		ble_index=0;
 804cf80:	bf84      	itt	hi
 804cf82:	2200      	movhi	r2, #0
 804cf84:	601a      	strhi	r2, [r3, #0]
	message_ble[ble_index] = rx_byte_uart1[0];
 804cf86:	681a      	ldr	r2, [r3, #0]
 804cf88:	5481      	strb	r1, [r0, r2]
	ble_index++;
 804cf8a:	3201      	adds	r2, #1
	if(ble_index>2){
 804cf8c:	2a02      	cmp	r2, #2
	ble_index++;
 804cf8e:	601a      	str	r2, [r3, #0]
	if(ble_index>2){
 804cf90:	dd0b      	ble.n	804cfaa <USART1_IRQHandler+0x3e>
		if(message_ble[0] == 0xa){
 804cf92:	7802      	ldrb	r2, [r0, #0]
 804cf94:	2a0a      	cmp	r2, #10
 804cf96:	d108      	bne.n	804cfaa <USART1_IRQHandler+0x3e>
			if(message_ble[ble_index-1] == 0xd)
 804cf98:	290d      	cmp	r1, #13
 804cf9a:	d106      	bne.n	804cfaa <USART1_IRQHandler+0x3e>
			{
				// Sinaliza que chegou uma mensagem válida
				ble_index = 0;								// Zera o índice para nova mensagem
 804cf9c:	2200      	movs	r2, #0
 804cf9e:	601a      	str	r2, [r3, #0]
				flags_ble.enable_handler = 1;
 804cfa0:	4a0c      	ldr	r2, [pc, #48]	; (804cfd4 <USART1_IRQHandler+0x68>)
 804cfa2:	7813      	ldrb	r3, [r2, #0]
 804cfa4:	f043 0320 	orr.w	r3, r3, #32
 804cfa8:	7013      	strb	r3, [r2, #0]
			}
		}
	}

	HAL_NVIC_ClearPendingIRQ(USART1_IRQn);
 804cfaa:	2025      	movs	r0, #37	; 0x25
 804cfac:	f7f6 f8e4 	bl	8043178 <HAL_NVIC_ClearPendingIRQ>
	HAL_UART_Abort_IT(&huart1);
 804cfb0:	4804      	ldr	r0, [pc, #16]	; (804cfc4 <USART1_IRQHandler+0x58>)
 804cfb2:	f7f9 f869 	bl	8046088 <HAL_UART_Abort_IT>
	HAL_UART_Receive_IT(&huart1, rx_byte_uart1, 1);
 804cfb6:	2201      	movs	r2, #1
 804cfb8:	4904      	ldr	r1, [pc, #16]	; (804cfcc <USART1_IRQHandler+0x60>)
 804cfba:	4802      	ldr	r0, [pc, #8]	; (804cfc4 <USART1_IRQHandler+0x58>)

}
 804cfbc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_UART_Receive_IT(&huart1, rx_byte_uart1, 1);
 804cfc0:	f7f8 bed4 	b.w	8045d6c <HAL_UART_Receive_IT>
 804cfc4:	2000b540 	.word	0x2000b540
 804cfc8:	20009a0c 	.word	0x20009a0c
 804cfcc:	2000b534 	.word	0x2000b534
 804cfd0:	20009a10 	.word	0x20009a10
 804cfd4:	2000b53c 	.word	0x2000b53c

0804cfd8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 804cfd8:	b570      	push	{r4, r5, r6, lr}
	 * 	mensagem é padrão, logo ao se detectar o caracter 0x0D
	 * 	habilitar a flag que permite tratar a mensagem.
	 */

  /* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 804cfda:	481a      	ldr	r0, [pc, #104]	; (804d044 <USART2_IRQHandler+0x6c>)
 804cfdc:	f7f8 ffa8 	bl	8045f30 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART2_IRQn 1 */
	message[message_index] = rx_byte_uart2[0];
 804cfe0:	4919      	ldr	r1, [pc, #100]	; (804d048 <USART2_IRQHandler+0x70>)
 804cfe2:	4b1a      	ldr	r3, [pc, #104]	; (804d04c <USART2_IRQHandler+0x74>)
 804cfe4:	680a      	ldr	r2, [r1, #0]
 804cfe6:	781c      	ldrb	r4, [r3, #0]
 804cfe8:	4b19      	ldr	r3, [pc, #100]	; (804d050 <USART2_IRQHandler+0x78>)
	message_index++;
 804cfea:	1c50      	adds	r0, r2, #1

	/*
	 * Testa se recebeu o fim da messagem 0x0D.
	 */
	if (message_index > 3)
 804cfec:	2803      	cmp	r0, #3
	message[message_index] = rx_byte_uart2[0];
 804cfee:	549c      	strb	r4, [r3, r2]
	message_index++;
 804cff0:	6008      	str	r0, [r1, #0]
	if (message_index > 3)
 804cff2:	dd1a      	ble.n	804d02a <USART2_IRQHandler+0x52>
	{
		if ((message[message_index - 4] == 0x0A)
 804cff4:	189d      	adds	r5, r3, r2
 804cff6:	f815 6c03 	ldrb.w	r6, [r5, #-3]
 804cffa:	2e0a      	cmp	r6, #10
 804cffc:	d115      	bne.n	804d02a <USART2_IRQHandler+0x52>
				&& ((message[message_index - 3] == 0x55) || (message[message_index - 3] == 0x58))
 804cffe:	f815 5c02 	ldrb.w	r5, [r5, #-2]
 804d002:	2d55      	cmp	r5, #85	; 0x55
 804d004:	d001      	beq.n	804d00a <USART2_IRQHandler+0x32>
 804d006:	2d58      	cmp	r5, #88	; 0x58
 804d008:	d10f      	bne.n	804d02a <USART2_IRQHandler+0x52>
				&& (message[message_index - 2] == 0x0D)
 804d00a:	4413      	add	r3, r2
 804d00c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 804d010:	2b0d      	cmp	r3, #13
 804d012:	d10a      	bne.n	804d02a <USART2_IRQHandler+0x52>
				&& (message[message_index - 1] == 0x0A))
 804d014:	2c0a      	cmp	r4, #10
 804d016:	d108      	bne.n	804d02a <USART2_IRQHandler+0x52>
		{
			flags_ble.tag = SET;// Aciona a flag mostrando que recebeu mensagem válida
 804d018:	4a0e      	ldr	r2, [pc, #56]	; (804d054 <USART2_IRQHandler+0x7c>)
 804d01a:	7813      	ldrb	r3, [r2, #0]
 804d01c:	f043 0302 	orr.w	r3, r3, #2
 804d020:	7013      	strb	r3, [r2, #0]
			bytes_read_rfid = message_index;
 804d022:	4b0d      	ldr	r3, [pc, #52]	; (804d058 <USART2_IRQHandler+0x80>)
 804d024:	7018      	strb	r0, [r3, #0]
			message_index=0;
 804d026:	2300      	movs	r3, #0
 804d028:	600b      	str	r3, [r1, #0]
		}
	}
	HAL_NVIC_ClearPendingIRQ(USART2_IRQn);
 804d02a:	2026      	movs	r0, #38	; 0x26
 804d02c:	f7f6 f8a4 	bl	8043178 <HAL_NVIC_ClearPendingIRQ>
	HAL_UART_Abort_IT(&huart2);
 804d030:	4804      	ldr	r0, [pc, #16]	; (804d044 <USART2_IRQHandler+0x6c>)
 804d032:	f7f9 f829 	bl	8046088 <HAL_UART_Abort_IT>
	HAL_UART_Receive_IT(&huart2, rx_byte_uart2, 1);
 804d036:	2201      	movs	r2, #1
 804d038:	4904      	ldr	r1, [pc, #16]	; (804d04c <USART2_IRQHandler+0x74>)
 804d03a:	4802      	ldr	r0, [pc, #8]	; (804d044 <USART2_IRQHandler+0x6c>)
	/* USER CODE END USART2_IRQn 1 */
}
 804d03c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_UART_Receive_IT(&huart2, rx_byte_uart2, 1);
 804d040:	f7f8 be94 	b.w	8045d6c <HAL_UART_Receive_IT>
 804d044:	2000b580 	.word	0x2000b580
 804d048:	20009a34 	.word	0x20009a34
 804d04c:	2000b52c 	.word	0x2000b52c
 804d050:	20009a38 	.word	0x20009a38
 804d054:	2000b53c 	.word	0x2000b53c
 804d058:	200024cc 	.word	0x200024cc

0804d05c <SDIO_IRQHandler>:
void SDIO_IRQHandler(void)
{
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 804d05c:	4801      	ldr	r0, [pc, #4]	; (804d064 <SDIO_IRQHandler+0x8>)
 804d05e:	f7f8 b80b 	b.w	8045078 <HAL_SD_IRQHandler>
 804d062:	bf00      	nop
 804d064:	20014f5c 	.word	0x20014f5c

0804d068 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 804d068:	4801      	ldr	r0, [pc, #4]	; (804d070 <DMA2_Stream3_IRQHandler+0x8>)
 804d06a:	f7f6 b99f 	b.w	80433ac <HAL_DMA_IRQHandler>
 804d06e:	bf00      	nop
 804d070:	20014e9c 	.word	0x20014e9c

0804d074 <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 804d074:	4801      	ldr	r0, [pc, #4]	; (804d07c <DMA2_Stream6_IRQHandler+0x8>)
 804d076:	f7f6 b999 	b.w	80433ac <HAL_DMA_IRQHandler>
 804d07a:	bf00      	nop
 804d07c:	20014efc 	.word	0x20014efc

0804d080 <USART3_IRQHandler>:
  /* USER CODE END DMA2_Stream6_IRQn 1 */
}

void USARTx_IRQHandler(void)
{
  vcom_IRQHandler();
 804d080:	f000 b872 	b.w	804d168 <vcom_IRQHandler>

0804d084 <DMA1_Stream4_IRQHandler>:
}

void USARTx_DMA_TX_IRQHandler(void)
{
  vcom_DMA_TX_IRQHandler();
 804d084:	f000 b86a 	b.w	804d15c <vcom_DMA_TX_IRQHandler>

0804d088 <RTC_Alarm_IRQHandler>:
}

void RTC_Alarm_IRQHandler(void)
{
  HW_RTC_IrqHandler();
 804d088:	f7ff b8f4 	b.w	804c274 <HW_RTC_IrqHandler>

0804d08c <EXTI0_IRQHandler>:
}

void EXTI0_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 804d08c:	2001      	movs	r0, #1
 804d08e:	f7f6 bd7f 	b.w	8043b90 <HAL_GPIO_EXTI_IRQHandler>

0804d092 <EXTI1_IRQHandler>:
}

void EXTI1_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 804d092:	2002      	movs	r0, #2
 804d094:	f7f6 bd7c 	b.w	8043b90 <HAL_GPIO_EXTI_IRQHandler>

0804d098 <EXTI2_IRQHandler>:
}

void EXTI2_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 804d098:	2004      	movs	r0, #4
 804d09a:	f7f6 bd79 	b.w	8043b90 <HAL_GPIO_EXTI_IRQHandler>

0804d09e <EXTI3_IRQHandler>:
}

void EXTI3_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 804d09e:	2008      	movs	r0, #8
 804d0a0:	f7f6 bd76 	b.w	8043b90 <HAL_GPIO_EXTI_IRQHandler>

0804d0a4 <EXTI4_IRQHandler>:
}

void EXTI4_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 804d0a4:	2010      	movs	r0, #16
 804d0a6:	f7f6 bd73 	b.w	8043b90 <HAL_GPIO_EXTI_IRQHandler>

0804d0aa <EXTI9_5_IRQHandler>:
}


void EXTI9_5_IRQHandler(void)
{
 804d0aa:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 804d0ac:	2020      	movs	r0, #32
 804d0ae:	f7f6 fd6f 	bl	8043b90 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 804d0b2:	2040      	movs	r0, #64	; 0x40
 804d0b4:	f7f6 fd6c 	bl	8043b90 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 804d0b8:	2080      	movs	r0, #128	; 0x80
 804d0ba:	f7f6 fd69 	bl	8043b90 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 804d0be:	f44f 7080 	mov.w	r0, #256	; 0x100
 804d0c2:	f7f6 fd65 	bl	8043b90 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 804d0c6:	f44f 7000 	mov.w	r0, #512	; 0x200
}
 804d0ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 804d0ce:	f7f6 bd5f 	b.w	8043b90 <HAL_GPIO_EXTI_IRQHandler>

0804d0d2 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 804d0d2:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 804d0d4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 804d0d8:	f7f6 fd5a 	bl	8043b90 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 804d0dc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 804d0e0:	f7f6 fd56 	bl	8043b90 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 804d0e4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 804d0e8:	f7f6 fd52 	bl	8043b90 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 804d0ec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 804d0f0:	f7f6 fd4e 	bl	8043b90 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 804d0f4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 804d0f8:	f7f6 fd4a 	bl	8043b90 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 804d0fc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
 804d100:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 804d104:	f7f6 bd44 	b.w	8043b90 <HAL_GPIO_EXTI_IRQHandler>

0804d108 <vcom_Init>:

static void (*TxCpltCallback)(void);
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/
void vcom_Init(void (*TxCb)(void))
{
 804d108:	b508      	push	{r3, lr}
      - Parity = ODD parity
      - BaudRate = 921600 baud
      - Hardware flow control disabled (RTS and CTS signals) */
  UartHandle.Instance        = USARTx;

  UartHandle.Init.BaudRate   = 230400;
 804d10a:	490b      	ldr	r1, [pc, #44]	; (804d138 <vcom_Init+0x30>)
  TxCpltCallback = TxCb;
 804d10c:	4b0b      	ldr	r3, [pc, #44]	; (804d13c <vcom_Init+0x34>)
  UartHandle.Init.BaudRate   = 230400;
 804d10e:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 804d112:	e9c3 1201 	strd	r1, r2, [r3, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 804d116:	2200      	movs	r2, #0
  TxCpltCallback = TxCb;
 804d118:	6018      	str	r0, [r3, #0]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 804d11a:	e9c3 2203 	strd	r2, r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 804d11e:	615a      	str	r2, [r3, #20]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 804d120:	61da      	str	r2, [r3, #28]
  UartHandle.Init.Mode       = UART_MODE_TX;

  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 804d122:	1d18      	adds	r0, r3, #4
  UartHandle.Init.Mode       = UART_MODE_TX;
 804d124:	2208      	movs	r2, #8
 804d126:	619a      	str	r2, [r3, #24]
  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 804d128:	f7f8 fd1c 	bl	8045b64 <HAL_UART_Init>
 804d12c:	b118      	cbz	r0, 804d136 <vcom_Init+0x2e>
  {
    /* Initialization Error */
    Error_Handler();
  }
}
 804d12e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 804d132:	f7fe bce9 	b.w	804bb08 <Error_Handler>
}
 804d136:	bd08      	pop	{r3, pc}
 804d138:	40004800 	.word	0x40004800
 804d13c:	2000b074 	.word	0x2000b074

0804d140 <vcom_Trace>:

void vcom_Trace(uint8_t *p_data, uint16_t size)
{
  HAL_UART_Transmit_DMA(&UartHandle, p_data, size);
 804d140:	460a      	mov	r2, r1
 804d142:	4601      	mov	r1, r0
 804d144:	4801      	ldr	r0, [pc, #4]	; (804d14c <vcom_Trace+0xc>)
 804d146:	f7f8 be39 	b.w	8045dbc <HAL_UART_Transmit_DMA>
 804d14a:	bf00      	nop
 804d14c:	2000b078 	.word	0x2000b078

0804d150 <HAL_UART_TxCpltCallback>:
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
  /* buffer transmission complete*/
  TxCpltCallback();
 804d150:	4b01      	ldr	r3, [pc, #4]	; (804d158 <HAL_UART_TxCpltCallback+0x8>)
 804d152:	681b      	ldr	r3, [r3, #0]
 804d154:	4718      	bx	r3
 804d156:	bf00      	nop
 804d158:	2000b074 	.word	0x2000b074

0804d15c <vcom_DMA_TX_IRQHandler>:
}

void vcom_DMA_TX_IRQHandler(void)
{
  HAL_DMA_IRQHandler(UartHandle.hdmatx);
 804d15c:	4b01      	ldr	r3, [pc, #4]	; (804d164 <vcom_DMA_TX_IRQHandler+0x8>)
 804d15e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 804d160:	f7f6 b924 	b.w	80433ac <HAL_DMA_IRQHandler>
 804d164:	2000b074 	.word	0x2000b074

0804d168 <vcom_IRQHandler>:
}

void vcom_IRQHandler(void)
{
  HAL_UART_IRQHandler(&UartHandle);
 804d168:	4801      	ldr	r0, [pc, #4]	; (804d170 <vcom_IRQHandler+0x8>)
 804d16a:	f7f8 bee1 	b.w	8045f30 <HAL_UART_IRQHandler>
 804d16e:	bf00      	nop
 804d170:	2000b078 	.word	0x2000b078

0804d174 <vcom_IoInit>:
		HAL_NVIC_DisableIRQ(USARTx_DMA_TX_IRQn);
	}
}

void vcom_IoInit(void)
{
 804d174:	b530      	push	{r4, r5, lr}
 804d176:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 804d178:	4b17      	ldr	r3, [pc, #92]	; (804d1d8 <vcom_IoInit+0x64>)
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
  GPIO_InitStruct.Alternate = USARTx_TX_AF;

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 804d17a:	4c18      	ldr	r4, [pc, #96]	; (804d1dc <vcom_IoInit+0x68>)
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 804d17c:	2200      	movs	r2, #0
  USARTx_TX_GPIO_CLK_ENABLE();
 804d17e:	9201      	str	r2, [sp, #4]
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 804d180:	9205      	str	r2, [sp, #20]
  USARTx_TX_GPIO_CLK_ENABLE();
 804d182:	6b19      	ldr	r1, [r3, #48]	; 0x30
 804d184:	f041 0102 	orr.w	r1, r1, #2
 804d188:	6319      	str	r1, [r3, #48]	; 0x30
 804d18a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 804d18c:	f001 0102 	and.w	r1, r1, #2
 804d190:	9101      	str	r1, [sp, #4]
 804d192:	9901      	ldr	r1, [sp, #4]
  USARTx_RX_GPIO_CLK_ENABLE();
 804d194:	9202      	str	r2, [sp, #8]
 804d196:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804d198:	f042 0202 	orr.w	r2, r2, #2
 804d19c:	631a      	str	r2, [r3, #48]	; 0x30
 804d19e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804d1a0:	f003 0302 	and.w	r3, r3, #2
 804d1a4:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 804d1a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
  USARTx_RX_GPIO_CLK_ENABLE();
 804d1aa:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 804d1ac:	2302      	movs	r3, #2
 804d1ae:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 804d1b2:	2507      	movs	r5, #7
 804d1b4:	2303      	movs	r3, #3
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 804d1b6:	a903      	add	r1, sp, #12
 804d1b8:	4620      	mov	r0, r4
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 804d1ba:	e9cd 3506 	strd	r3, r5, [sp, #24]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 804d1be:	f7f6 fb6d 	bl	804389c <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 804d1c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Alternate = USARTx_RX_AF;

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 804d1c6:	a903      	add	r1, sp, #12
 804d1c8:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 804d1ca:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 804d1cc:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 804d1ce:	f7f6 fb65 	bl	804389c <HAL_GPIO_Init>
}
 804d1d2:	b009      	add	sp, #36	; 0x24
 804d1d4:	bd30      	pop	{r4, r5, pc}
 804d1d6:	bf00      	nop
 804d1d8:	40023800 	.word	0x40023800
 804d1dc:	40020400 	.word	0x40020400

0804d1e0 <HAL_UART_MspInit>:
{
 804d1e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 804d1e2:	4606      	mov	r6, r0
 804d1e4:	b08f      	sub	sp, #60	; 0x3c
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 804d1e6:	2214      	movs	r2, #20
 804d1e8:	2100      	movs	r1, #0
 804d1ea:	a809      	add	r0, sp, #36	; 0x24
 804d1ec:	f000 faf4 	bl	804d7d8 <memset>
	if (huart->Instance == USART1) {
 804d1f0:	6833      	ldr	r3, [r6, #0]
 804d1f2:	4a58      	ldr	r2, [pc, #352]	; (804d354 <HAL_UART_MspInit+0x174>)
 804d1f4:	4293      	cmp	r3, r2
 804d1f6:	d12c      	bne.n	804d252 <HAL_UART_MspInit+0x72>
		__HAL_RCC_USART1_CLK_ENABLE();
 804d1f8:	4b57      	ldr	r3, [pc, #348]	; (804d358 <HAL_UART_MspInit+0x178>)
		HAL_GPIO_Init(BLE_TX_GPIO_Port, &GPIO_InitStruct);
 804d1fa:	4858      	ldr	r0, [pc, #352]	; (804d35c <HAL_UART_MspInit+0x17c>)
		__HAL_RCC_USART1_CLK_ENABLE();
 804d1fc:	2400      	movs	r4, #0
 804d1fe:	9401      	str	r4, [sp, #4]
 804d200:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 804d202:	f042 0210 	orr.w	r2, r2, #16
 804d206:	645a      	str	r2, [r3, #68]	; 0x44
 804d208:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 804d20a:	f002 0210 	and.w	r2, r2, #16
 804d20e:	9201      	str	r2, [sp, #4]
 804d210:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 804d212:	9402      	str	r4, [sp, #8]
 804d214:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804d216:	f042 0201 	orr.w	r2, r2, #1
 804d21a:	631a      	str	r2, [r3, #48]	; 0x30
 804d21c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804d21e:	f003 0301 	and.w	r3, r3, #1
 804d222:	9302      	str	r3, [sp, #8]
 804d224:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804d226:	2502      	movs	r5, #2
 804d228:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 804d22c:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
		HAL_GPIO_Init(BLE_TX_GPIO_Port, &GPIO_InitStruct);
 804d230:	a909      	add	r1, sp, #36	; 0x24
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 804d232:	2307      	movs	r3, #7
 804d234:	2603      	movs	r6, #3
 804d236:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
		HAL_GPIO_Init(BLE_TX_GPIO_Port, &GPIO_InitStruct);
 804d23a:	f7f6 fb2f 	bl	804389c <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(USART1_IRQn, 0, 2);
 804d23e:	2025      	movs	r0, #37	; 0x25
 804d240:	462a      	mov	r2, r5
 804d242:	4621      	mov	r1, r4
 804d244:	f7f5 ff30 	bl	80430a8 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 804d248:	2025      	movs	r0, #37	; 0x25
		HAL_NVIC_EnableIRQ(USARTx_IRQn);
 804d24a:	f7f5 ff61 	bl	8043110 <HAL_NVIC_EnableIRQ>
}
 804d24e:	b00f      	add	sp, #60	; 0x3c
 804d250:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if (huart->Instance == USART2) {
 804d252:	4a43      	ldr	r2, [pc, #268]	; (804d360 <HAL_UART_MspInit+0x180>)
 804d254:	4293      	cmp	r3, r2
 804d256:	d128      	bne.n	804d2aa <HAL_UART_MspInit+0xca>
		__HAL_RCC_USART2_CLK_ENABLE();
 804d258:	4b3f      	ldr	r3, [pc, #252]	; (804d358 <HAL_UART_MspInit+0x178>)
 804d25a:	2400      	movs	r4, #0
 804d25c:	9403      	str	r4, [sp, #12]
 804d25e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804d260:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 804d264:	641a      	str	r2, [r3, #64]	; 0x40
 804d266:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804d268:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 804d26c:	9203      	str	r2, [sp, #12]
 804d26e:	9a03      	ldr	r2, [sp, #12]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 804d270:	9404      	str	r4, [sp, #16]
 804d272:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804d274:	f042 0201 	orr.w	r2, r2, #1
 804d278:	631a      	str	r2, [r3, #48]	; 0x30
 804d27a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804d27c:	f003 0301 	and.w	r3, r3, #1
 804d280:	9304      	str	r3, [sp, #16]
 804d282:	9b04      	ldr	r3, [sp, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804d284:	210c      	movs	r1, #12
 804d286:	2302      	movs	r3, #2
 804d288:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 804d28c:	2003      	movs	r0, #3
 804d28e:	2307      	movs	r3, #7
 804d290:	e9cd 030c 	strd	r0, r3, [sp, #48]	; 0x30
		HAL_GPIO_Init(RFID_TX_GPIO_Port, &GPIO_InitStruct);
 804d294:	a909      	add	r1, sp, #36	; 0x24
 804d296:	4831      	ldr	r0, [pc, #196]	; (804d35c <HAL_UART_MspInit+0x17c>)
 804d298:	f7f6 fb00 	bl	804389c <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 804d29c:	2026      	movs	r0, #38	; 0x26
 804d29e:	4622      	mov	r2, r4
 804d2a0:	4621      	mov	r1, r4
 804d2a2:	f7f5 ff01 	bl	80430a8 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 804d2a6:	2026      	movs	r0, #38	; 0x26
 804d2a8:	e7cf      	b.n	804d24a <HAL_UART_MspInit+0x6a>
	else if (huart->Instance == USARTx) {
 804d2aa:	4a2e      	ldr	r2, [pc, #184]	; (804d364 <HAL_UART_MspInit+0x184>)
 804d2ac:	4293      	cmp	r3, r2
 804d2ae:	d1ce      	bne.n	804d24e <HAL_UART_MspInit+0x6e>
		USARTx_TX_GPIO_CLK_ENABLE();
 804d2b0:	4b29      	ldr	r3, [pc, #164]	; (804d358 <HAL_UART_MspInit+0x178>)
		hdma_tx.Instance = USARTx_TX_DMA_CHANNEL;
 804d2b2:	4d2d      	ldr	r5, [pc, #180]	; (804d368 <HAL_UART_MspInit+0x188>)
		USARTx_TX_GPIO_CLK_ENABLE();
 804d2b4:	2400      	movs	r4, #0
 804d2b6:	9405      	str	r4, [sp, #20]
 804d2b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804d2ba:	f042 0202 	orr.w	r2, r2, #2
 804d2be:	631a      	str	r2, [r3, #48]	; 0x30
 804d2c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804d2c2:	f002 0202 	and.w	r2, r2, #2
 804d2c6:	9205      	str	r2, [sp, #20]
 804d2c8:	9a05      	ldr	r2, [sp, #20]
		USARTx_RX_GPIO_CLK_ENABLE();
 804d2ca:	9406      	str	r4, [sp, #24]
 804d2cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804d2ce:	f042 0202 	orr.w	r2, r2, #2
 804d2d2:	631a      	str	r2, [r3, #48]	; 0x30
 804d2d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804d2d6:	f002 0202 	and.w	r2, r2, #2
 804d2da:	9206      	str	r2, [sp, #24]
 804d2dc:	9a06      	ldr	r2, [sp, #24]
		USARTx_CLK_ENABLE();
 804d2de:	9407      	str	r4, [sp, #28]
 804d2e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804d2e2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 804d2e6:	641a      	str	r2, [r3, #64]	; 0x40
 804d2e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804d2ea:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 804d2ee:	9207      	str	r2, [sp, #28]
 804d2f0:	9a07      	ldr	r2, [sp, #28]
		DMAx_CLK_ENABLE();
 804d2f2:	9408      	str	r4, [sp, #32]
 804d2f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804d2f6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 804d2fa:	631a      	str	r2, [r3, #48]	; 0x30
 804d2fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804d2fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 804d302:	9308      	str	r3, [sp, #32]
 804d304:	9b08      	ldr	r3, [sp, #32]
		vcom_IoInit();
 804d306:	f7ff ff35 	bl	804d174 <vcom_IoInit>
		hdma_tx.Init.Channel = DMA_CHANNEL_7;
 804d30a:	4a18      	ldr	r2, [pc, #96]	; (804d36c <HAL_UART_MspInit+0x18c>)
		hdma_tx.Init.Priority = DMA_PRIORITY_LOW;
 804d30c:	666c      	str	r4, [r5, #100]	; 0x64
		hdma_tx.Init.Channel = DMA_CHANNEL_7;
 804d30e:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
 804d312:	e9c5 2311 	strd	r2, r3, [r5, #68]	; 0x44
		HAL_DMA_Init(&hdma_tx);
 804d316:	f105 0744 	add.w	r7, r5, #68	; 0x44
		hdma_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 804d31a:	2340      	movs	r3, #64	; 0x40
		hdma_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 804d31c:	e9c5 3413 	strd	r3, r4, [r5, #76]	; 0x4c
		HAL_DMA_Init(&hdma_tx);
 804d320:	4638      	mov	r0, r7
		hdma_tx.Init.MemInc = DMA_MINC_ENABLE;
 804d322:	f44f 6380 	mov.w	r3, #1024	; 0x400
		hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 804d326:	e9c5 3415 	strd	r3, r4, [r5, #84]	; 0x54
		hdma_tx.Init.Mode = DMA_NORMAL;
 804d32a:	e9c5 4417 	strd	r4, r4, [r5, #92]	; 0x5c
		HAL_DMA_Init(&hdma_tx);
 804d32e:	f7f5 ff49 	bl	80431c4 <HAL_DMA_Init>
		HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 804d332:	2201      	movs	r2, #1
 804d334:	4621      	mov	r1, r4
		__HAL_LINKDMA(huart, hdmatx, hdma_tx);
 804d336:	6337      	str	r7, [r6, #48]	; 0x30
		HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 804d338:	200f      	movs	r0, #15
		__HAL_LINKDMA(huart, hdmatx, hdma_tx);
 804d33a:	67ee      	str	r6, [r5, #124]	; 0x7c
		HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 804d33c:	f7f5 feb4 	bl	80430a8 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 804d340:	200f      	movs	r0, #15
 804d342:	f7f5 fee5 	bl	8043110 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 804d346:	2027      	movs	r0, #39	; 0x27
 804d348:	2201      	movs	r2, #1
 804d34a:	4621      	mov	r1, r4
 804d34c:	f7f5 feac 	bl	80430a8 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USARTx_IRQn);
 804d350:	2027      	movs	r0, #39	; 0x27
 804d352:	e77a      	b.n	804d24a <HAL_UART_MspInit+0x6a>
 804d354:	40011000 	.word	0x40011000
 804d358:	40023800 	.word	0x40023800
 804d35c:	40020000 	.word	0x40020000
 804d360:	40004400 	.word	0x40004400
 804d364:	40004800 	.word	0x40004800
 804d368:	2000b074 	.word	0x2000b074
 804d36c:	40026070 	.word	0x40026070

0804d370 <vcom_IoDeInit>:

void vcom_IoDeInit(void)
{
 804d370:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 804d372:	2300      	movs	r3, #0
{
 804d374:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 804d376:	e9cd 3303 	strd	r3, r3, [sp, #12]

  USARTx_TX_GPIO_CLK_ENABLE();
 804d37a:	9300      	str	r3, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 804d37c:	9305      	str	r3, [sp, #20]
  USARTx_TX_GPIO_CLK_ENABLE();
 804d37e:	4b0f      	ldr	r3, [pc, #60]	; (804d3bc <vcom_IoDeInit+0x4c>)

  GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStructure.Pull = GPIO_NOPULL;

  GPIO_InitStructure.Pin =  USARTx_TX_PIN ;
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStructure);
 804d380:	4d0f      	ldr	r5, [pc, #60]	; (804d3c0 <vcom_IoDeInit+0x50>)
  USARTx_TX_GPIO_CLK_ENABLE();
 804d382:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804d384:	f042 0202 	orr.w	r2, r2, #2
 804d388:	631a      	str	r2, [r3, #48]	; 0x30
 804d38a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804d38c:	f003 0302 	and.w	r3, r3, #2
 804d390:	9300      	str	r3, [sp, #0]
  GPIO_InitStructure.Pin =  USARTx_TX_PIN ;
 804d392:	ac06      	add	r4, sp, #24
  USARTx_TX_GPIO_CLK_ENABLE();
 804d394:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 804d396:	2303      	movs	r3, #3
 804d398:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Pin =  USARTx_TX_PIN ;
 804d39a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 804d39e:	f844 3d14 	str.w	r3, [r4, #-20]!
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStructure);
 804d3a2:	4628      	mov	r0, r5
 804d3a4:	4621      	mov	r1, r4
 804d3a6:	f7f6 fa79 	bl	804389c <HAL_GPIO_Init>

  GPIO_InitStructure.Pin =  USARTx_RX_PIN ;
 804d3aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStructure);
 804d3ae:	4621      	mov	r1, r4
 804d3b0:	4628      	mov	r0, r5
  GPIO_InitStructure.Pin =  USARTx_RX_PIN ;
 804d3b2:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStructure);
 804d3b4:	f7f6 fa72 	bl	804389c <HAL_GPIO_Init>
}
 804d3b8:	b007      	add	sp, #28
 804d3ba:	bd30      	pop	{r4, r5, pc}
 804d3bc:	40023800 	.word	0x40023800
 804d3c0:	40020400 	.word	0x40020400

0804d3c4 <HAL_UART_MspDeInit>:
void HAL_UART_MspDeInit(UART_HandleTypeDef *huart) {
 804d3c4:	b538      	push	{r3, r4, r5, lr}
	if (huart->Instance == USART1) {
 804d3c6:	4a1a      	ldr	r2, [pc, #104]	; (804d430 <HAL_UART_MspDeInit+0x6c>)
 804d3c8:	6803      	ldr	r3, [r0, #0]
 804d3ca:	4c1a      	ldr	r4, [pc, #104]	; (804d434 <HAL_UART_MspDeInit+0x70>)
 804d3cc:	4293      	cmp	r3, r2
void HAL_UART_MspDeInit(UART_HandleTypeDef *huart) {
 804d3ce:	4605      	mov	r5, r0
	if (huart->Instance == USART1) {
 804d3d0:	d10d      	bne.n	804d3ee <HAL_UART_MspDeInit+0x2a>
		__HAL_RCC_USART1_CLK_DISABLE();
 804d3d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
		HAL_GPIO_DeInit(BLE_TX_GPIO_Port, BLE_TX_Pin | BLE_RX_Pin);
 804d3d4:	4818      	ldr	r0, [pc, #96]	; (804d438 <HAL_UART_MspDeInit+0x74>)
		__HAL_RCC_USART1_CLK_DISABLE();
 804d3d6:	f023 0310 	bic.w	r3, r3, #16
 804d3da:	6463      	str	r3, [r4, #68]	; 0x44
		HAL_GPIO_DeInit(BLE_TX_GPIO_Port, BLE_TX_Pin | BLE_RX_Pin);
 804d3dc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 804d3e0:	f7f6 fb3c 	bl	8043a5c <HAL_GPIO_DeInit>
		HAL_NVIC_DisableIRQ(USART1_IRQn);
 804d3e4:	2025      	movs	r0, #37	; 0x25
}
 804d3e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_NVIC_DisableIRQ(USARTx_DMA_TX_IRQn);
 804d3ea:	f7f5 be9f 	b.w	804312c <HAL_NVIC_DisableIRQ>
	} else if (huart->Instance == USART2) {
 804d3ee:	4a13      	ldr	r2, [pc, #76]	; (804d43c <HAL_UART_MspDeInit+0x78>)
 804d3f0:	4293      	cmp	r3, r2
 804d3f2:	d109      	bne.n	804d408 <HAL_UART_MspDeInit+0x44>
		__HAL_RCC_USART2_CLK_DISABLE();
 804d3f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
		HAL_GPIO_DeInit(RFID_TX_GPIO_Port, GPIO_PIN_2 | GPIO_PIN_3);
 804d3f6:	4810      	ldr	r0, [pc, #64]	; (804d438 <HAL_UART_MspDeInit+0x74>)
		__HAL_RCC_USART2_CLK_DISABLE();
 804d3f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 804d3fc:	6423      	str	r3, [r4, #64]	; 0x40
		HAL_GPIO_DeInit(RFID_TX_GPIO_Port, GPIO_PIN_2 | GPIO_PIN_3);
 804d3fe:	210c      	movs	r1, #12
 804d400:	f7f6 fb2c 	bl	8043a5c <HAL_GPIO_DeInit>
		HAL_NVIC_DisableIRQ(USART2_IRQn);
 804d404:	2026      	movs	r0, #38	; 0x26
 804d406:	e7ee      	b.n	804d3e6 <HAL_UART_MspDeInit+0x22>
		vcom_IoDeInit();
 804d408:	f7ff ffb2 	bl	804d370 <vcom_IoDeInit>
		USARTx_FORCE_RESET();
 804d40c:	6a23      	ldr	r3, [r4, #32]
		if (huart->hdmarx != 0) {
 804d40e:	6b68      	ldr	r0, [r5, #52]	; 0x34
		USARTx_FORCE_RESET();
 804d410:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 804d414:	6223      	str	r3, [r4, #32]
		USARTx_RELEASE_RESET();
 804d416:	6a23      	ldr	r3, [r4, #32]
 804d418:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 804d41c:	6223      	str	r3, [r4, #32]
		if (huart->hdmarx != 0) {
 804d41e:	b108      	cbz	r0, 804d424 <HAL_UART_MspDeInit+0x60>
			HAL_DMA_DeInit(huart->hdmarx);
 804d420:	f7f5 ff4e 	bl	80432c0 <HAL_DMA_DeInit>
		if (huart->hdmatx != 0) {
 804d424:	6b28      	ldr	r0, [r5, #48]	; 0x30
 804d426:	b108      	cbz	r0, 804d42c <HAL_UART_MspDeInit+0x68>
			HAL_DMA_DeInit(huart->hdmatx);
 804d428:	f7f5 ff4a 	bl	80432c0 <HAL_DMA_DeInit>
		HAL_NVIC_DisableIRQ(USARTx_DMA_TX_IRQn);
 804d42c:	200f      	movs	r0, #15
 804d42e:	e7da      	b.n	804d3e6 <HAL_UART_MspDeInit+0x22>
 804d430:	40011000 	.word	0x40011000
 804d434:	40023800 	.word	0x40023800
 804d438:	40020000 	.word	0x40020000
 804d43c:	40004400 	.word	0x40004400

0804d440 <COM_Init>:
  * @brief  Initialize COM module.
  * @param  None.
  * @retval HAL Status.
  */
HAL_StatusTypeDef COM_Init(void)
{
 804d440:	b508      	push	{r3, lr}
#if defined(__GNUC__)
  setvbuf(stdout, NULL, _IONBF, 0);
 804d442:	4b0c      	ldr	r3, [pc, #48]	; (804d474 <COM_Init+0x34>)
 804d444:	6818      	ldr	r0, [r3, #0]
 804d446:	2300      	movs	r3, #0
 804d448:	2202      	movs	r2, #2
 804d44a:	4619      	mov	r1, r3
 804d44c:	6880      	ldr	r0, [r0, #8]
 804d44e:	f000 fa47 	bl	804d8e0 <setvbuf>
  - One Stop Bit
  - No parity
  - Hardware flow control disabled (RTS and CTS signals)
  - Receive and transmit enabled
  */
  /*UartHandleUpdate*/huart1.Instance = COM_UART;
 804d452:	4809      	ldr	r0, [pc, #36]	; (804d478 <COM_Init+0x38>)
  /*UartHandleUpdate*/huart1.Init.BaudRate = 9600;
 804d454:	4a09      	ldr	r2, [pc, #36]	; (804d47c <COM_Init+0x3c>)
 804d456:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 804d45a:	e9c0 2300 	strd	r2, r3, [r0]
  /*UartHandleUpdate*/huart1.Init.WordLength = UART_WORDLENGTH_8B;
 804d45e:	2300      	movs	r3, #0
  /*UartHandleUpdate*/huart1.Init.StopBits = UART_STOPBITS_1;
 804d460:	e9c0 3302 	strd	r3, r3, [r0, #8]
  /*UartHandleUpdate*/huart1.Init.Parity = UART_PARITY_NONE;
 804d464:	6103      	str	r3, [r0, #16]
  /*UartHandleUpdate*/huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 804d466:	6183      	str	r3, [r0, #24]
  /*UartHandleUpdate*/huart1.Init.Mode = UART_MODE_RX | UART_MODE_TX;
 804d468:	230c      	movs	r3, #12
 804d46a:	6143      	str	r3, [r0, #20]

  return HAL_UART_Init(&huart1/*UartHandleUpdate*/);
}
 804d46c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return HAL_UART_Init(&huart1/*UartHandleUpdate*/);
 804d470:	f7f8 bb78 	b.w	8045b64 <HAL_UART_Init>
 804d474:	2000122c 	.word	0x2000122c
 804d478:	2000b540 	.word	0x2000b540
 804d47c:	40011000 	.word	0x40011000

0804d480 <COM_Transmit>:
  * @param uTimeout: Timeout duration.
  * @retval Status of the Transmit operation.
  */
HAL_StatusTypeDef COM_Transmit(uint8_t *Data, uint16_t uDataLength, uint32_t uTimeout)
{ //UartHandleUpdate
  return HAL_UART_Transmit(&huart1, (uint8_t *)Data, uDataLength, uTimeout);
 804d480:	4613      	mov	r3, r2
 804d482:	460a      	mov	r2, r1
 804d484:	4601      	mov	r1, r0
 804d486:	4801      	ldr	r0, [pc, #4]	; (804d48c <COM_Transmit+0xc>)
 804d488:	f7f8 bbb2 	b.w	8045bf0 <HAL_UART_Transmit>
 804d48c:	2000b540 	.word	0x2000b540

0804d490 <COM_Receive>:
  * @param uTimeout: Timeout duration.
  * @retval Status of the Receive operation.
  */
HAL_StatusTypeDef COM_Receive(uint8_t *Data, uint16_t uDataLength, uint32_t uTimeout)
{
  return HAL_UART_Receive(&huart1, (uint8_t *)Data, uDataLength, uTimeout);
 804d490:	4613      	mov	r3, r2
 804d492:	460a      	mov	r2, r1
 804d494:	4601      	mov	r1, r0
 804d496:	4801      	ldr	r0, [pc, #4]	; (804d49c <COM_Receive+0xc>)
 804d498:	f7f8 bc06 	b.w	8045ca8 <HAL_UART_Receive>
 804d49c:	2000b540 	.word	0x2000b540

0804d4a0 <COM_Flush>:
  * @retval HAL_Status.
  */
HAL_StatusTypeDef COM_Flush(void)
{
  /* Clean the input path */
  __HAL_UART_FLUSH_DRREGISTER(&huart1);
 804d4a0:	4b02      	ldr	r3, [pc, #8]	; (804d4ac <COM_Flush+0xc>)
 804d4a2:	681b      	ldr	r3, [r3, #0]
  return HAL_OK;
}
 804d4a4:	2000      	movs	r0, #0
  __HAL_UART_FLUSH_DRREGISTER(&huart1);
 804d4a6:	685b      	ldr	r3, [r3, #4]
}
 804d4a8:	4770      	bx	lr
 804d4aa:	bf00      	nop
 804d4ac:	2000b540 	.word	0x2000b540

0804d4b0 <Ymodem_Init>:
  * @param None.
  * @retval None.
  */
void Ymodem_Init(void)
{
}
 804d4b0:	4770      	bx	lr
	...

0804d4b4 <Ymodem_Receive>:
  * @param  puSize The uSize of the file.
  * @param  uFlashDestination where the file has to be downloaded.
  * @retval COM_StatusTypeDef result of reception/programming
  */
COM_StatusTypeDef Ymodem_Receive(uint32_t *puSize, uint32_t uFlashDestination, YMODEM_CallbacksTypeDef *appCb)
{
 804d4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804d4b8:	b08d      	sub	sp, #52	; 0x34
 804d4ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
    *pData = char1;
 804d4be:	4fa0      	ldr	r7, [pc, #640]	; (804d740 <Ymodem_Receive+0x28c>)
{
 804d4c0:	4692      	mov	sl, r2
  uint32_t i;
  uint32_t packet_length;
  uint32_t session_done = 0U;
  uint32_t file_done;
  uint32_t errors = 0U;
  uint32_t session_begin = 0U;
 804d4c2:	f04f 0900 	mov.w	r9, #0
 804d4c6:	2600      	movs	r6, #0
 804d4c8:	e0db      	b.n	804d682 <Ymodem_Receive+0x1ce>
    switch (char1)
 804d4ca:	2b61      	cmp	r3, #97	; 0x61
 804d4cc:	d004      	beq.n	804d4d8 <Ymodem_Receive+0x24>
 804d4ce:	2b72      	cmp	r3, #114	; 0x72
 804d4d0:	d076      	beq.n	804d5c0 <Ymodem_Receive+0x10c>
 804d4d2:	2b41      	cmp	r3, #65	; 0x41
 804d4d4:	f040 8084 	bne.w	804d5e0 <Ymodem_Receive+0x12c>
        status = HAL_BUSY;
 804d4d8:	2402      	movs	r4, #2
  uint32_t packet_size = 0U;
 804d4da:	2500      	movs	r5, #0
 804d4dc:	e001      	b.n	804d4e2 <Ymodem_Receive+0x2e>
        packet_size = PACKET_1K_SIZE;
 804d4de:	f44f 6580 	mov.w	r5, #1024	; 0x400
    *pData = char1;
 804d4e2:	f89d 3017 	ldrb.w	r3, [sp, #23]
 804d4e6:	703b      	strb	r3, [r7, #0]
    if (packet_size >= PACKET_SIZE)
 804d4e8:	2d7f      	cmp	r5, #127	; 0x7f
 804d4ea:	d97d      	bls.n	804d5e8 <Ymodem_Receive+0x134>
      status = COM_Receive(&pData[PACKET_NUMBER_INDEX], packet_size + PACKET_OVERHEAD_SIZE, uTimeout);
 804d4ec:	fa1f fb85 	uxth.w	fp, r5
 804d4f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 804d4f4:	f10b 0104 	add.w	r1, fp, #4
 804d4f8:	4892      	ldr	r0, [pc, #584]	; (804d744 <Ymodem_Receive+0x290>)
 804d4fa:	f7ff ffc9 	bl	804d490 <COM_Receive>
      if (status == HAL_OK)
 804d4fe:	4604      	mov	r4, r0
 804d500:	2800      	cmp	r0, #0
 804d502:	d172      	bne.n	804d5ea <Ymodem_Receive+0x136>
        if (pData[PACKET_NUMBER_INDEX] != ((pData[PACKET_CNUMBER_INDEX]) ^ NEGATIVE_BYTE))
 804d504:	78fb      	ldrb	r3, [r7, #3]
 804d506:	78ba      	ldrb	r2, [r7, #2]
 804d508:	43db      	mvns	r3, r3
 804d50a:	b2db      	uxtb	r3, r3
 804d50c:	429a      	cmp	r2, r3
 804d50e:	d16e      	bne.n	804d5ee <Ymodem_Receive+0x13a>
          crc = pData[ packet_size + PACKET_DATA_INDEX ] << 8U;
 804d510:	197b      	adds	r3, r7, r5
    out ^= 0x1021;
 804d512:	f241 0e21 	movw	lr, #4129	; 0x1021
          crc = pData[ packet_size + PACKET_DATA_INDEX ] << 8U;
 804d516:	791a      	ldrb	r2, [r3, #4]
          crc += pData[ packet_size + PACKET_DATA_INDEX + 1U ];
 804d518:	795b      	ldrb	r3, [r3, #5]
 804d51a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 804d51e:	4a8a      	ldr	r2, [pc, #552]	; (804d748 <Ymodem_Receive+0x294>)
 804d520:	9301      	str	r3, [sp, #4]
 804d522:	1c51      	adds	r1, r2, #1
 804d524:	f10b 33ff 	add.w	r3, fp, #4294967295
 804d528:	fa11 f383 	uxtah	r3, r1, r3
      crc = crc_update(crc, *pdata & i);
 804d52c:	f812 cf01 	ldrb.w	ip, [r2, #1]!
 804d530:	2008      	movs	r0, #8
    for (i = 0x80; i; i >>= 1)
 804d532:	2180      	movs	r1, #128	; 0x80
  uint16_t xor = crc_in >> 15;
 804d534:	ea4f 3bd4 	mov.w	fp, r4, lsr #15
  uint16_t out = crc_in << 1;
 804d538:	0064      	lsls	r4, r4, #1
 804d53a:	b2a4      	uxth	r4, r4
  if (incr)
 804d53c:	ea1c 0f01 	tst.w	ip, r1
    out++;
 804d540:	bf1c      	itt	ne
 804d542:	3401      	addne	r4, #1
 804d544:	b2a4      	uxthne	r4, r4
  if (xor)
 804d546:	f1bb 0f00 	cmp.w	fp, #0
 804d54a:	d001      	beq.n	804d550 <Ymodem_Receive+0x9c>
    out ^= 0x1021;
 804d54c:	ea84 040e 	eor.w	r4, r4, lr
    for (i = 0x80; i; i >>= 1)
 804d550:	3801      	subs	r0, #1
 804d552:	ea4f 0151 	mov.w	r1, r1, lsr #1
 804d556:	d1ed      	bne.n	804d534 <Ymodem_Receive+0x80>
  for (crc = 0; size > 0; size--, pdata++)
 804d558:	429a      	cmp	r2, r3
 804d55a:	d1e7      	bne.n	804d52c <Ymodem_Receive+0x78>
 804d55c:	2310      	movs	r3, #16
    out ^= 0x1021;
 804d55e:	f241 0221 	movw	r2, #4129	; 0x1021
  uint16_t xor = crc_in >> 15;
 804d562:	0be1      	lsrs	r1, r4, #15
  uint16_t out = crc_in << 1;
 804d564:	0064      	lsls	r4, r4, #1
 804d566:	b2a4      	uxth	r4, r4
  if (xor)
 804d568:	b101      	cbz	r1, 804d56c <Ymodem_Receive+0xb8>
    out ^= 0x1021;
 804d56a:	4054      	eors	r4, r2
 804d56c:	3b01      	subs	r3, #1
  for (i = 0; i < 16; i++)
 804d56e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 804d572:	d1f6      	bne.n	804d562 <Ymodem_Receive+0xae>
          if (crc16(&pData[PACKET_DATA_INDEX], packet_size) != crc)
 804d574:	9b01      	ldr	r3, [sp, #4]
 804d576:	42a3      	cmp	r3, r4
 804d578:	d139      	bne.n	804d5ee <Ymodem_Receive+0x13a>
              *puSize = filesize;
              file_done = 1U;           /* file reception ended */
              break;
            default:
              /* Normal packet */
              if (m_aPacketData[PACKET_NUMBER_INDEX] != (packets_received & 0xff))
 804d57a:	78ba      	ldrb	r2, [r7, #2]
 804d57c:	b2f3      	uxtb	r3, r6
 804d57e:	429a      	cmp	r2, r3
 804d580:	d17f      	bne.n	804d682 <Ymodem_Receive+0x1ce>
                /* Serial_PutByte(NAK); */
              }
              else
              {
                /* first packet : header (file name + file size) */
                if (packets_received == 0U)
 804d582:	2e00      	cmp	r6, #0
 804d584:	f040 80b8 	bne.w	804d6f8 <Ymodem_Receive+0x244>
                {
                  /* File name packet */
                  if (m_aPacketData[PACKET_DATA_INDEX] != 0U)
 804d588:	793b      	ldrb	r3, [r7, #4]
 804d58a:	2b00      	cmp	r3, #0
 804d58c:	f040 809b 	bne.w	804d6c6 <Ymodem_Receive+0x212>

                  }
                  /* File header packet is empty, end session */
                  else
                  {
                    Serial_PutByte(ACK);
 804d590:	2006      	movs	r0, #6
 804d592:	f7fe faac 	bl	804baee <Serial_PutByte>
 804d596:	4630      	mov	r0, r6
          break;
      }
    }
  }
  return e_result;
}
 804d598:	b00d      	add	sp, #52	; 0x34
 804d59a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((COM_Receive(&char1, 1U, uTimeout) == HAL_OK) && (char1 == CA))
 804d59e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 804d5a2:	2101      	movs	r1, #1
 804d5a4:	f10d 0017 	add.w	r0, sp, #23
 804d5a8:	f7ff ff72 	bl	804d490 <COM_Receive>
 804d5ac:	4604      	mov	r4, r0
 804d5ae:	b9c8      	cbnz	r0, 804d5e4 <Ymodem_Receive+0x130>
 804d5b0:	f89d 3017 	ldrb.w	r3, [sp, #23]
          packet_size = 2U;                               /* specific packet_size to indicate transmission aborted */
 804d5b4:	2b18      	cmp	r3, #24
 804d5b6:	bf16      	itet	ne
 804d5b8:	2500      	movne	r5, #0
 804d5ba:	2502      	moveq	r5, #2
 804d5bc:	2401      	movne	r4, #1
 804d5be:	e790      	b.n	804d4e2 <Ymodem_Receive+0x2e>
        COM_Receive(&char1, 1U, uTimeout);                /* Ymodem startup sequence : rb ==> 0x72 + 0x62 + 0x0D */
 804d5c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 804d5c4:	2101      	movs	r1, #1
 804d5c6:	f10d 0017 	add.w	r0, sp, #23
 804d5ca:	f7ff ff61 	bl	804d490 <COM_Receive>
        COM_Receive(&char1, 1U, uTimeout);
 804d5ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 804d5d2:	2101      	movs	r1, #1
 804d5d4:	f10d 0017 	add.w	r0, sp, #23
 804d5d8:	f7ff ff5a 	bl	804d490 <COM_Receive>
        packet_size = 3U;                                 /* specific packet_size to indicate transmission started */
 804d5dc:	2503      	movs	r5, #3
 804d5de:	e780      	b.n	804d4e2 <Ymodem_Receive+0x2e>
        status = HAL_ERROR;
 804d5e0:	2401      	movs	r4, #1
 804d5e2:	e77a      	b.n	804d4da <Ymodem_Receive+0x26>
          status = HAL_ERROR;
 804d5e4:	2401      	movs	r4, #1
 804d5e6:	e77c      	b.n	804d4e2 <Ymodem_Receive+0x2e>
      switch (ReceivePacket(m_aPacketData, &packet_length, DOWNLOAD_TIMEOUT))
 804d5e8:	b17c      	cbz	r4, 804d60a <Ymodem_Receive+0x156>
 804d5ea:	2c02      	cmp	r4, #2
 804d5ec:	d008      	beq.n	804d600 <Ymodem_Receive+0x14c>
          if (session_begin > 0U)
 804d5ee:	f1b9 0f00 	cmp.w	r9, #0
 804d5f2:	d001      	beq.n	804d5f8 <Ymodem_Receive+0x144>
            errors ++;
 804d5f4:	f108 0801 	add.w	r8, r8, #1
          if (errors > MAX_ERRORS)
 804d5f8:	f1b8 0f05 	cmp.w	r8, #5
 804d5fc:	f240 8098 	bls.w	804d730 <Ymodem_Receive+0x27c>
          Serial_PutByte(CA);
 804d600:	2018      	movs	r0, #24
 804d602:	f7fe fa74 	bl	804baee <Serial_PutByte>
          Serial_PutByte(CA);
 804d606:	2018      	movs	r0, #24
 804d608:	e00d      	b.n	804d626 <Ymodem_Receive+0x172>
          switch (packet_length)
 804d60a:	2d02      	cmp	r5, #2
 804d60c:	d00a      	beq.n	804d624 <Ymodem_Receive+0x170>
 804d60e:	2d03      	cmp	r5, #3
 804d610:	d037      	beq.n	804d682 <Ymodem_Receive+0x1ce>
 804d612:	2d00      	cmp	r5, #0
 804d614:	d1b1      	bne.n	804d57a <Ymodem_Receive+0xc6>
              Serial_PutByte(ACK);
 804d616:	2006      	movs	r0, #6
 804d618:	f7fe fa69 	bl	804baee <Serial_PutByte>
              *puSize = filesize;
 804d61c:	9a02      	ldr	r2, [sp, #8]
 804d61e:	9b06      	ldr	r3, [sp, #24]
 804d620:	6013      	str	r3, [r2, #0]
 804d622:	e750      	b.n	804d4c6 <Ymodem_Receive+0x12>
              Serial_PutByte(ACK);
 804d624:	2006      	movs	r0, #6
          Serial_PutByte(CA);
 804d626:	f7fe fa62 	bl	804baee <Serial_PutByte>
          break;
 804d62a:	e063      	b.n	804d6f4 <Ymodem_Receive+0x240>
                      m_aFileName[i++] = *file_ptr++;
 804d62c:	5483      	strb	r3, [r0, r2]
 804d62e:	3201      	adds	r2, #1
                    while ((*file_ptr != 0U) && (i < FILE_NAME_LENGTH))
 804d630:	f811 3b01 	ldrb.w	r3, [r1], #1
 804d634:	b10b      	cbz	r3, 804d63a <Ymodem_Receive+0x186>
 804d636:	2a40      	cmp	r2, #64	; 0x40
 804d638:	d1f8      	bne.n	804d62c <Ymodem_Receive+0x178>
                    m_aFileName[i++] = '\0';
 804d63a:	2300      	movs	r3, #0
 804d63c:	5483      	strb	r3, [r0, r2]
 804d63e:	a807      	add	r0, sp, #28
                    while ((*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 804d640:	5cca      	ldrb	r2, [r1, r3]
 804d642:	2a20      	cmp	r2, #32
 804d644:	d001      	beq.n	804d64a <Ymodem_Receive+0x196>
 804d646:	2b10      	cmp	r3, #16
 804d648:	d141      	bne.n	804d6ce <Ymodem_Receive+0x21a>
                    file_size[i++] = '\0';
 804d64a:	aa0c      	add	r2, sp, #48	; 0x30
 804d64c:	4413      	add	r3, r2
                    Str2Int(file_size, &filesize);
 804d64e:	a906      	add	r1, sp, #24
                    file_size[i++] = '\0';
 804d650:	2200      	movs	r2, #0
 804d652:	f803 2c14 	strb.w	r2, [r3, #-20]
                    Str2Int(file_size, &filesize);
 804d656:	f7fe f9fc 	bl	804ba52 <Str2Int>
                    if (appCb->Ymodem_HeaderPktRxCpltCallback((uint32_t) filesize) == HAL_OK)
 804d65a:	f8da 3000 	ldr.w	r3, [sl]
 804d65e:	9806      	ldr	r0, [sp, #24]
 804d660:	4798      	blx	r3
 804d662:	4604      	mov	r4, r0
 804d664:	bbb0      	cbnz	r0, 804d6d4 <Ymodem_Receive+0x220>
                      Serial_PutByte(ACK);
 804d666:	2006      	movs	r0, #6
 804d668:	f7fe fa41 	bl	804baee <Serial_PutByte>
                      COM_Flush();
 804d66c:	f7ff ff18 	bl	804d4a0 <COM_Flush>
                      Serial_PutByte(CRC16);
 804d670:	2043      	movs	r0, #67	; 0x43
                    Serial_PutByte(ACK);
 804d672:	f7fe fa3c 	bl	804baee <Serial_PutByte>
 804d676:	4620      	mov	r0, r4
                packets_received ++;
 804d678:	3601      	adds	r6, #1
                session_begin = 1U;
 804d67a:	f04f 0901 	mov.w	r9, #1
    while ((file_done == 0U) && (e_result == COM_OK))
 804d67e:	2800      	cmp	r0, #0
 804d680:	d18a      	bne.n	804d598 <Ymodem_Receive+0xe4>
 804d682:	f04f 0800 	mov.w	r8, #0
  WRITE_REG(IWDG->KR, IWDG_KEY_RELOAD);
 804d686:	4b31      	ldr	r3, [pc, #196]	; (804d74c <Ymodem_Receive+0x298>)
 804d688:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 804d68c:	601a      	str	r2, [r3, #0]
  status = (HAL_StatusTypeDef)COM_Receive(&char1, 1, uTimeout);
 804d68e:	2101      	movs	r1, #1
 804d690:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 804d694:	f10d 0017 	add.w	r0, sp, #23
 804d698:	f7ff fefa 	bl	804d490 <COM_Receive>
 804d69c:	4604      	mov	r4, r0
 804d69e:	4605      	mov	r5, r0
  if (status == HAL_OK)
 804d6a0:	2800      	cmp	r0, #0
 804d6a2:	d1a2      	bne.n	804d5ea <Ymodem_Receive+0x136>
    switch (char1)
 804d6a4:	f89d 3017 	ldrb.w	r3, [sp, #23]
 804d6a8:	2b18      	cmp	r3, #24
 804d6aa:	f43f af78 	beq.w	804d59e <Ymodem_Receive+0xea>
 804d6ae:	f63f af0c 	bhi.w	804d4ca <Ymodem_Receive+0x16>
 804d6b2:	2b02      	cmp	r3, #2
 804d6b4:	f43f af13 	beq.w	804d4de <Ymodem_Receive+0x2a>
 804d6b8:	2b04      	cmp	r3, #4
 804d6ba:	f43f af0e 	beq.w	804d4da <Ymodem_Receive+0x26>
 804d6be:	2b01      	cmp	r3, #1
 804d6c0:	d18e      	bne.n	804d5e0 <Ymodem_Receive+0x12c>
        packet_size = PACKET_SIZE;
 804d6c2:	2580      	movs	r5, #128	; 0x80
 804d6c4:	e70d      	b.n	804d4e2 <Ymodem_Receive+0x2e>
 804d6c6:	4632      	mov	r2, r6
                    file_ptr = m_aPacketData + PACKET_DATA_INDEX;
 804d6c8:	4921      	ldr	r1, [pc, #132]	; (804d750 <Ymodem_Receive+0x29c>)
 804d6ca:	4822      	ldr	r0, [pc, #136]	; (804d754 <Ymodem_Receive+0x2a0>)
 804d6cc:	e7b0      	b.n	804d630 <Ymodem_Receive+0x17c>
                      file_size[i++] = *file_ptr++;
 804d6ce:	54c2      	strb	r2, [r0, r3]
 804d6d0:	3301      	adds	r3, #1
 804d6d2:	e7b5      	b.n	804d640 <Ymodem_Receive+0x18c>
                      tmp = CA;
 804d6d4:	ac0c      	add	r4, sp, #48	; 0x30
 804d6d6:	2318      	movs	r3, #24
 804d6d8:	f804 3d1a 	strb.w	r3, [r4, #-26]!
                      COM_Transmit(&tmp, 1U, NAK_TIMEOUT);
 804d6dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 804d6e0:	2101      	movs	r1, #1
 804d6e2:	4620      	mov	r0, r4
 804d6e4:	f7ff fecc 	bl	804d480 <COM_Transmit>
                      COM_Transmit(&tmp, 1U, NAK_TIMEOUT);
 804d6e8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 804d6ec:	2101      	movs	r1, #1
 804d6ee:	4620      	mov	r0, r4
 804d6f0:	f7ff fec6 	bl	804d480 <COM_Transmit>
                session_begin = 1U;
 804d6f4:	2002      	movs	r0, #2
  return e_result;
 804d6f6:	e74f      	b.n	804d598 <Ymodem_Receive+0xe4>
                  if (appCb->Ymodem_DataPktRxCpltCallback((uint8_t *) ramsource, uFlashDestination,
 804d6f8:	f8da 3004 	ldr.w	r3, [sl, #4]
 804d6fc:	9903      	ldr	r1, [sp, #12]
 804d6fe:	4814      	ldr	r0, [pc, #80]	; (804d750 <Ymodem_Receive+0x29c>)
 804d700:	462a      	mov	r2, r5
 804d702:	4798      	blx	r3
 804d704:	4604      	mov	r4, r0
 804d706:	b908      	cbnz	r0, 804d70c <Ymodem_Receive+0x258>
                    Serial_PutByte(ACK);
 804d708:	2006      	movs	r0, #6
 804d70a:	e7b2      	b.n	804d672 <Ymodem_Receive+0x1be>
                    tmp = CA;
 804d70c:	ac0c      	add	r4, sp, #48	; 0x30
 804d70e:	2318      	movs	r3, #24
 804d710:	f804 3d1a 	strb.w	r3, [r4, #-26]!
                    COM_Transmit(&tmp, 1U, NAK_TIMEOUT);
 804d714:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 804d718:	2101      	movs	r1, #1
 804d71a:	4620      	mov	r0, r4
 804d71c:	f7ff feb0 	bl	804d480 <COM_Transmit>
                    COM_Transmit(&tmp, 1U, NAK_TIMEOUT);
 804d720:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 804d724:	2101      	movs	r1, #1
 804d726:	4620      	mov	r0, r4
 804d728:	f7ff feaa 	bl	804d480 <COM_Transmit>
                    e_result = COM_ERROR;
 804d72c:	2001      	movs	r0, #1
 804d72e:	e7a3      	b.n	804d678 <Ymodem_Receive+0x1c4>
            Serial_PutByte(CRC16); /* Ask for a packet */
 804d730:	2043      	movs	r0, #67	; 0x43
 804d732:	f7fe f9dc 	bl	804baee <Serial_PutByte>
            printf("\b.");         /* Replace C char by . on display console */
 804d736:	4808      	ldr	r0, [pc, #32]	; (804d758 <Ymodem_Receive+0x2a4>)
 804d738:	f000 f856 	bl	804d7e8 <iprintf>
 804d73c:	e7a3      	b.n	804d686 <Ymodem_Receive+0x1d2>
 804d73e:	bf00      	nop
 804d740:	2000b118 	.word	0x2000b118
 804d744:	2000b11a 	.word	0x2000b11a
 804d748:	2000b11b 	.word	0x2000b11b
 804d74c:	40003000 	.word	0x40003000
 804d750:	2000b11c 	.word	0x2000b11c
 804d754:	20014fe0 	.word	0x20014fe0
 804d758:	080500bc 	.word	0x080500bc

0804d75c <__libc_init_array>:
 804d75c:	b570      	push	{r4, r5, r6, lr}
 804d75e:	4e0d      	ldr	r6, [pc, #52]	; (804d794 <__libc_init_array+0x38>)
 804d760:	4c0d      	ldr	r4, [pc, #52]	; (804d798 <__libc_init_array+0x3c>)
 804d762:	1ba4      	subs	r4, r4, r6
 804d764:	10a4      	asrs	r4, r4, #2
 804d766:	2500      	movs	r5, #0
 804d768:	42a5      	cmp	r5, r4
 804d76a:	d109      	bne.n	804d780 <__libc_init_array+0x24>
 804d76c:	4e0b      	ldr	r6, [pc, #44]	; (804d79c <__libc_init_array+0x40>)
 804d76e:	4c0c      	ldr	r4, [pc, #48]	; (804d7a0 <__libc_init_array+0x44>)
 804d770:	f001 fb9a 	bl	804eea8 <_init>
 804d774:	1ba4      	subs	r4, r4, r6
 804d776:	10a4      	asrs	r4, r4, #2
 804d778:	2500      	movs	r5, #0
 804d77a:	42a5      	cmp	r5, r4
 804d77c:	d105      	bne.n	804d78a <__libc_init_array+0x2e>
 804d77e:	bd70      	pop	{r4, r5, r6, pc}
 804d780:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 804d784:	4798      	blx	r3
 804d786:	3501      	adds	r5, #1
 804d788:	e7ee      	b.n	804d768 <__libc_init_array+0xc>
 804d78a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 804d78e:	4798      	blx	r3
 804d790:	3501      	adds	r5, #1
 804d792:	e7f2      	b.n	804d77a <__libc_init_array+0x1e>
 804d794:	08050160 	.word	0x08050160
 804d798:	08050160 	.word	0x08050160
 804d79c:	08050160 	.word	0x08050160
 804d7a0:	08050164 	.word	0x08050164

0804d7a4 <memcmp>:
 804d7a4:	b530      	push	{r4, r5, lr}
 804d7a6:	2400      	movs	r4, #0
 804d7a8:	42a2      	cmp	r2, r4
 804d7aa:	d101      	bne.n	804d7b0 <memcmp+0xc>
 804d7ac:	2000      	movs	r0, #0
 804d7ae:	e007      	b.n	804d7c0 <memcmp+0x1c>
 804d7b0:	5d03      	ldrb	r3, [r0, r4]
 804d7b2:	3401      	adds	r4, #1
 804d7b4:	190d      	adds	r5, r1, r4
 804d7b6:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 804d7ba:	42ab      	cmp	r3, r5
 804d7bc:	d0f4      	beq.n	804d7a8 <memcmp+0x4>
 804d7be:	1b58      	subs	r0, r3, r5
 804d7c0:	bd30      	pop	{r4, r5, pc}

0804d7c2 <memcpy>:
 804d7c2:	b510      	push	{r4, lr}
 804d7c4:	1e43      	subs	r3, r0, #1
 804d7c6:	440a      	add	r2, r1
 804d7c8:	4291      	cmp	r1, r2
 804d7ca:	d100      	bne.n	804d7ce <memcpy+0xc>
 804d7cc:	bd10      	pop	{r4, pc}
 804d7ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 804d7d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 804d7d6:	e7f7      	b.n	804d7c8 <memcpy+0x6>

0804d7d8 <memset>:
 804d7d8:	4402      	add	r2, r0
 804d7da:	4603      	mov	r3, r0
 804d7dc:	4293      	cmp	r3, r2
 804d7de:	d100      	bne.n	804d7e2 <memset+0xa>
 804d7e0:	4770      	bx	lr
 804d7e2:	f803 1b01 	strb.w	r1, [r3], #1
 804d7e6:	e7f9      	b.n	804d7dc <memset+0x4>

0804d7e8 <iprintf>:
 804d7e8:	b40f      	push	{r0, r1, r2, r3}
 804d7ea:	4b0a      	ldr	r3, [pc, #40]	; (804d814 <iprintf+0x2c>)
 804d7ec:	b513      	push	{r0, r1, r4, lr}
 804d7ee:	681c      	ldr	r4, [r3, #0]
 804d7f0:	b124      	cbz	r4, 804d7fc <iprintf+0x14>
 804d7f2:	69a3      	ldr	r3, [r4, #24]
 804d7f4:	b913      	cbnz	r3, 804d7fc <iprintf+0x14>
 804d7f6:	4620      	mov	r0, r4
 804d7f8:	f000 fb0a 	bl	804de10 <__sinit>
 804d7fc:	ab05      	add	r3, sp, #20
 804d7fe:	9a04      	ldr	r2, [sp, #16]
 804d800:	68a1      	ldr	r1, [r4, #8]
 804d802:	9301      	str	r3, [sp, #4]
 804d804:	4620      	mov	r0, r4
 804d806:	f000 fe1d 	bl	804e444 <_vfiprintf_r>
 804d80a:	b002      	add	sp, #8
 804d80c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 804d810:	b004      	add	sp, #16
 804d812:	4770      	bx	lr
 804d814:	2000122c 	.word	0x2000122c

0804d818 <_puts_r>:
 804d818:	b570      	push	{r4, r5, r6, lr}
 804d81a:	460e      	mov	r6, r1
 804d81c:	4605      	mov	r5, r0
 804d81e:	b118      	cbz	r0, 804d828 <_puts_r+0x10>
 804d820:	6983      	ldr	r3, [r0, #24]
 804d822:	b90b      	cbnz	r3, 804d828 <_puts_r+0x10>
 804d824:	f000 faf4 	bl	804de10 <__sinit>
 804d828:	69ab      	ldr	r3, [r5, #24]
 804d82a:	68ac      	ldr	r4, [r5, #8]
 804d82c:	b913      	cbnz	r3, 804d834 <_puts_r+0x1c>
 804d82e:	4628      	mov	r0, r5
 804d830:	f000 faee 	bl	804de10 <__sinit>
 804d834:	4b23      	ldr	r3, [pc, #140]	; (804d8c4 <_puts_r+0xac>)
 804d836:	429c      	cmp	r4, r3
 804d838:	d117      	bne.n	804d86a <_puts_r+0x52>
 804d83a:	686c      	ldr	r4, [r5, #4]
 804d83c:	89a3      	ldrh	r3, [r4, #12]
 804d83e:	071b      	lsls	r3, r3, #28
 804d840:	d51d      	bpl.n	804d87e <_puts_r+0x66>
 804d842:	6923      	ldr	r3, [r4, #16]
 804d844:	b1db      	cbz	r3, 804d87e <_puts_r+0x66>
 804d846:	3e01      	subs	r6, #1
 804d848:	68a3      	ldr	r3, [r4, #8]
 804d84a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 804d84e:	3b01      	subs	r3, #1
 804d850:	60a3      	str	r3, [r4, #8]
 804d852:	b9e9      	cbnz	r1, 804d890 <_puts_r+0x78>
 804d854:	2b00      	cmp	r3, #0
 804d856:	da2e      	bge.n	804d8b6 <_puts_r+0x9e>
 804d858:	4622      	mov	r2, r4
 804d85a:	210a      	movs	r1, #10
 804d85c:	4628      	mov	r0, r5
 804d85e:	f000 f927 	bl	804dab0 <__swbuf_r>
 804d862:	3001      	adds	r0, #1
 804d864:	d011      	beq.n	804d88a <_puts_r+0x72>
 804d866:	200a      	movs	r0, #10
 804d868:	e011      	b.n	804d88e <_puts_r+0x76>
 804d86a:	4b17      	ldr	r3, [pc, #92]	; (804d8c8 <_puts_r+0xb0>)
 804d86c:	429c      	cmp	r4, r3
 804d86e:	d101      	bne.n	804d874 <_puts_r+0x5c>
 804d870:	68ac      	ldr	r4, [r5, #8]
 804d872:	e7e3      	b.n	804d83c <_puts_r+0x24>
 804d874:	4b15      	ldr	r3, [pc, #84]	; (804d8cc <_puts_r+0xb4>)
 804d876:	429c      	cmp	r4, r3
 804d878:	bf08      	it	eq
 804d87a:	68ec      	ldreq	r4, [r5, #12]
 804d87c:	e7de      	b.n	804d83c <_puts_r+0x24>
 804d87e:	4621      	mov	r1, r4
 804d880:	4628      	mov	r0, r5
 804d882:	f000 f967 	bl	804db54 <__swsetup_r>
 804d886:	2800      	cmp	r0, #0
 804d888:	d0dd      	beq.n	804d846 <_puts_r+0x2e>
 804d88a:	f04f 30ff 	mov.w	r0, #4294967295
 804d88e:	bd70      	pop	{r4, r5, r6, pc}
 804d890:	2b00      	cmp	r3, #0
 804d892:	da04      	bge.n	804d89e <_puts_r+0x86>
 804d894:	69a2      	ldr	r2, [r4, #24]
 804d896:	429a      	cmp	r2, r3
 804d898:	dc06      	bgt.n	804d8a8 <_puts_r+0x90>
 804d89a:	290a      	cmp	r1, #10
 804d89c:	d004      	beq.n	804d8a8 <_puts_r+0x90>
 804d89e:	6823      	ldr	r3, [r4, #0]
 804d8a0:	1c5a      	adds	r2, r3, #1
 804d8a2:	6022      	str	r2, [r4, #0]
 804d8a4:	7019      	strb	r1, [r3, #0]
 804d8a6:	e7cf      	b.n	804d848 <_puts_r+0x30>
 804d8a8:	4622      	mov	r2, r4
 804d8aa:	4628      	mov	r0, r5
 804d8ac:	f000 f900 	bl	804dab0 <__swbuf_r>
 804d8b0:	3001      	adds	r0, #1
 804d8b2:	d1c9      	bne.n	804d848 <_puts_r+0x30>
 804d8b4:	e7e9      	b.n	804d88a <_puts_r+0x72>
 804d8b6:	6823      	ldr	r3, [r4, #0]
 804d8b8:	200a      	movs	r0, #10
 804d8ba:	1c5a      	adds	r2, r3, #1
 804d8bc:	6022      	str	r2, [r4, #0]
 804d8be:	7018      	strb	r0, [r3, #0]
 804d8c0:	e7e5      	b.n	804d88e <_puts_r+0x76>
 804d8c2:	bf00      	nop
 804d8c4:	080500e4 	.word	0x080500e4
 804d8c8:	08050104 	.word	0x08050104
 804d8cc:	080500c4 	.word	0x080500c4

0804d8d0 <puts>:
 804d8d0:	4b02      	ldr	r3, [pc, #8]	; (804d8dc <puts+0xc>)
 804d8d2:	4601      	mov	r1, r0
 804d8d4:	6818      	ldr	r0, [r3, #0]
 804d8d6:	f7ff bf9f 	b.w	804d818 <_puts_r>
 804d8da:	bf00      	nop
 804d8dc:	2000122c 	.word	0x2000122c

0804d8e0 <setvbuf>:
 804d8e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 804d8e4:	461d      	mov	r5, r3
 804d8e6:	4b51      	ldr	r3, [pc, #324]	; (804da2c <setvbuf+0x14c>)
 804d8e8:	681e      	ldr	r6, [r3, #0]
 804d8ea:	4604      	mov	r4, r0
 804d8ec:	460f      	mov	r7, r1
 804d8ee:	4690      	mov	r8, r2
 804d8f0:	b126      	cbz	r6, 804d8fc <setvbuf+0x1c>
 804d8f2:	69b3      	ldr	r3, [r6, #24]
 804d8f4:	b913      	cbnz	r3, 804d8fc <setvbuf+0x1c>
 804d8f6:	4630      	mov	r0, r6
 804d8f8:	f000 fa8a 	bl	804de10 <__sinit>
 804d8fc:	4b4c      	ldr	r3, [pc, #304]	; (804da30 <setvbuf+0x150>)
 804d8fe:	429c      	cmp	r4, r3
 804d900:	d152      	bne.n	804d9a8 <setvbuf+0xc8>
 804d902:	6874      	ldr	r4, [r6, #4]
 804d904:	f1b8 0f02 	cmp.w	r8, #2
 804d908:	d006      	beq.n	804d918 <setvbuf+0x38>
 804d90a:	f1b8 0f01 	cmp.w	r8, #1
 804d90e:	f200 8089 	bhi.w	804da24 <setvbuf+0x144>
 804d912:	2d00      	cmp	r5, #0
 804d914:	f2c0 8086 	blt.w	804da24 <setvbuf+0x144>
 804d918:	4621      	mov	r1, r4
 804d91a:	4630      	mov	r0, r6
 804d91c:	f000 fa0e 	bl	804dd3c <_fflush_r>
 804d920:	6b61      	ldr	r1, [r4, #52]	; 0x34
 804d922:	b141      	cbz	r1, 804d936 <setvbuf+0x56>
 804d924:	f104 0344 	add.w	r3, r4, #68	; 0x44
 804d928:	4299      	cmp	r1, r3
 804d92a:	d002      	beq.n	804d932 <setvbuf+0x52>
 804d92c:	4630      	mov	r0, r6
 804d92e:	f000 fb65 	bl	804dffc <_free_r>
 804d932:	2300      	movs	r3, #0
 804d934:	6363      	str	r3, [r4, #52]	; 0x34
 804d936:	2300      	movs	r3, #0
 804d938:	61a3      	str	r3, [r4, #24]
 804d93a:	6063      	str	r3, [r4, #4]
 804d93c:	89a3      	ldrh	r3, [r4, #12]
 804d93e:	061b      	lsls	r3, r3, #24
 804d940:	d503      	bpl.n	804d94a <setvbuf+0x6a>
 804d942:	6921      	ldr	r1, [r4, #16]
 804d944:	4630      	mov	r0, r6
 804d946:	f000 fb59 	bl	804dffc <_free_r>
 804d94a:	89a3      	ldrh	r3, [r4, #12]
 804d94c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 804d950:	f023 0303 	bic.w	r3, r3, #3
 804d954:	f1b8 0f02 	cmp.w	r8, #2
 804d958:	81a3      	strh	r3, [r4, #12]
 804d95a:	d05d      	beq.n	804da18 <setvbuf+0x138>
 804d95c:	ab01      	add	r3, sp, #4
 804d95e:	466a      	mov	r2, sp
 804d960:	4621      	mov	r1, r4
 804d962:	4630      	mov	r0, r6
 804d964:	f000 fade 	bl	804df24 <__swhatbuf_r>
 804d968:	89a3      	ldrh	r3, [r4, #12]
 804d96a:	4318      	orrs	r0, r3
 804d96c:	81a0      	strh	r0, [r4, #12]
 804d96e:	bb2d      	cbnz	r5, 804d9bc <setvbuf+0xdc>
 804d970:	9d00      	ldr	r5, [sp, #0]
 804d972:	4628      	mov	r0, r5
 804d974:	f000 fb3a 	bl	804dfec <malloc>
 804d978:	4607      	mov	r7, r0
 804d97a:	2800      	cmp	r0, #0
 804d97c:	d14e      	bne.n	804da1c <setvbuf+0x13c>
 804d97e:	f8dd 9000 	ldr.w	r9, [sp]
 804d982:	45a9      	cmp	r9, r5
 804d984:	d13c      	bne.n	804da00 <setvbuf+0x120>
 804d986:	f04f 30ff 	mov.w	r0, #4294967295
 804d98a:	89a3      	ldrh	r3, [r4, #12]
 804d98c:	f043 0302 	orr.w	r3, r3, #2
 804d990:	81a3      	strh	r3, [r4, #12]
 804d992:	2300      	movs	r3, #0
 804d994:	60a3      	str	r3, [r4, #8]
 804d996:	f104 0347 	add.w	r3, r4, #71	; 0x47
 804d99a:	6023      	str	r3, [r4, #0]
 804d99c:	6123      	str	r3, [r4, #16]
 804d99e:	2301      	movs	r3, #1
 804d9a0:	6163      	str	r3, [r4, #20]
 804d9a2:	b003      	add	sp, #12
 804d9a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 804d9a8:	4b22      	ldr	r3, [pc, #136]	; (804da34 <setvbuf+0x154>)
 804d9aa:	429c      	cmp	r4, r3
 804d9ac:	d101      	bne.n	804d9b2 <setvbuf+0xd2>
 804d9ae:	68b4      	ldr	r4, [r6, #8]
 804d9b0:	e7a8      	b.n	804d904 <setvbuf+0x24>
 804d9b2:	4b21      	ldr	r3, [pc, #132]	; (804da38 <setvbuf+0x158>)
 804d9b4:	429c      	cmp	r4, r3
 804d9b6:	bf08      	it	eq
 804d9b8:	68f4      	ldreq	r4, [r6, #12]
 804d9ba:	e7a3      	b.n	804d904 <setvbuf+0x24>
 804d9bc:	2f00      	cmp	r7, #0
 804d9be:	d0d8      	beq.n	804d972 <setvbuf+0x92>
 804d9c0:	69b3      	ldr	r3, [r6, #24]
 804d9c2:	b913      	cbnz	r3, 804d9ca <setvbuf+0xea>
 804d9c4:	4630      	mov	r0, r6
 804d9c6:	f000 fa23 	bl	804de10 <__sinit>
 804d9ca:	f1b8 0f01 	cmp.w	r8, #1
 804d9ce:	bf08      	it	eq
 804d9d0:	89a3      	ldrheq	r3, [r4, #12]
 804d9d2:	6027      	str	r7, [r4, #0]
 804d9d4:	bf04      	itt	eq
 804d9d6:	f043 0301 	orreq.w	r3, r3, #1
 804d9da:	81a3      	strheq	r3, [r4, #12]
 804d9dc:	89a3      	ldrh	r3, [r4, #12]
 804d9de:	f013 0008 	ands.w	r0, r3, #8
 804d9e2:	e9c4 7504 	strd	r7, r5, [r4, #16]
 804d9e6:	d01b      	beq.n	804da20 <setvbuf+0x140>
 804d9e8:	f013 0001 	ands.w	r0, r3, #1
 804d9ec:	bf18      	it	ne
 804d9ee:	426d      	negne	r5, r5
 804d9f0:	f04f 0300 	mov.w	r3, #0
 804d9f4:	bf1d      	ittte	ne
 804d9f6:	60a3      	strne	r3, [r4, #8]
 804d9f8:	61a5      	strne	r5, [r4, #24]
 804d9fa:	4618      	movne	r0, r3
 804d9fc:	60a5      	streq	r5, [r4, #8]
 804d9fe:	e7d0      	b.n	804d9a2 <setvbuf+0xc2>
 804da00:	4648      	mov	r0, r9
 804da02:	f000 faf3 	bl	804dfec <malloc>
 804da06:	4607      	mov	r7, r0
 804da08:	2800      	cmp	r0, #0
 804da0a:	d0bc      	beq.n	804d986 <setvbuf+0xa6>
 804da0c:	89a3      	ldrh	r3, [r4, #12]
 804da0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 804da12:	81a3      	strh	r3, [r4, #12]
 804da14:	464d      	mov	r5, r9
 804da16:	e7d3      	b.n	804d9c0 <setvbuf+0xe0>
 804da18:	2000      	movs	r0, #0
 804da1a:	e7b6      	b.n	804d98a <setvbuf+0xaa>
 804da1c:	46a9      	mov	r9, r5
 804da1e:	e7f5      	b.n	804da0c <setvbuf+0x12c>
 804da20:	60a0      	str	r0, [r4, #8]
 804da22:	e7be      	b.n	804d9a2 <setvbuf+0xc2>
 804da24:	f04f 30ff 	mov.w	r0, #4294967295
 804da28:	e7bb      	b.n	804d9a2 <setvbuf+0xc2>
 804da2a:	bf00      	nop
 804da2c:	2000122c 	.word	0x2000122c
 804da30:	080500e4 	.word	0x080500e4
 804da34:	08050104 	.word	0x08050104
 804da38:	080500c4 	.word	0x080500c4

0804da3c <_vsniprintf_r>:
 804da3c:	b530      	push	{r4, r5, lr}
 804da3e:	1e14      	subs	r4, r2, #0
 804da40:	4605      	mov	r5, r0
 804da42:	b09b      	sub	sp, #108	; 0x6c
 804da44:	4618      	mov	r0, r3
 804da46:	da05      	bge.n	804da54 <_vsniprintf_r+0x18>
 804da48:	238b      	movs	r3, #139	; 0x8b
 804da4a:	602b      	str	r3, [r5, #0]
 804da4c:	f04f 30ff 	mov.w	r0, #4294967295
 804da50:	b01b      	add	sp, #108	; 0x6c
 804da52:	bd30      	pop	{r4, r5, pc}
 804da54:	f44f 7302 	mov.w	r3, #520	; 0x208
 804da58:	f8ad 300c 	strh.w	r3, [sp, #12]
 804da5c:	bf14      	ite	ne
 804da5e:	f104 33ff 	addne.w	r3, r4, #4294967295
 804da62:	4623      	moveq	r3, r4
 804da64:	9302      	str	r3, [sp, #8]
 804da66:	9305      	str	r3, [sp, #20]
 804da68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 804da6c:	9100      	str	r1, [sp, #0]
 804da6e:	9104      	str	r1, [sp, #16]
 804da70:	f8ad 300e 	strh.w	r3, [sp, #14]
 804da74:	4602      	mov	r2, r0
 804da76:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 804da78:	4669      	mov	r1, sp
 804da7a:	4628      	mov	r0, r5
 804da7c:	f000 fbc0 	bl	804e200 <_svfiprintf_r>
 804da80:	1c43      	adds	r3, r0, #1
 804da82:	bfbc      	itt	lt
 804da84:	238b      	movlt	r3, #139	; 0x8b
 804da86:	602b      	strlt	r3, [r5, #0]
 804da88:	2c00      	cmp	r4, #0
 804da8a:	d0e1      	beq.n	804da50 <_vsniprintf_r+0x14>
 804da8c:	9b00      	ldr	r3, [sp, #0]
 804da8e:	2200      	movs	r2, #0
 804da90:	701a      	strb	r2, [r3, #0]
 804da92:	e7dd      	b.n	804da50 <_vsniprintf_r+0x14>

0804da94 <vsniprintf>:
 804da94:	b507      	push	{r0, r1, r2, lr}
 804da96:	9300      	str	r3, [sp, #0]
 804da98:	4613      	mov	r3, r2
 804da9a:	460a      	mov	r2, r1
 804da9c:	4601      	mov	r1, r0
 804da9e:	4803      	ldr	r0, [pc, #12]	; (804daac <vsniprintf+0x18>)
 804daa0:	6800      	ldr	r0, [r0, #0]
 804daa2:	f7ff ffcb 	bl	804da3c <_vsniprintf_r>
 804daa6:	b003      	add	sp, #12
 804daa8:	f85d fb04 	ldr.w	pc, [sp], #4
 804daac:	2000122c 	.word	0x2000122c

0804dab0 <__swbuf_r>:
 804dab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804dab2:	460e      	mov	r6, r1
 804dab4:	4614      	mov	r4, r2
 804dab6:	4605      	mov	r5, r0
 804dab8:	b118      	cbz	r0, 804dac2 <__swbuf_r+0x12>
 804daba:	6983      	ldr	r3, [r0, #24]
 804dabc:	b90b      	cbnz	r3, 804dac2 <__swbuf_r+0x12>
 804dabe:	f000 f9a7 	bl	804de10 <__sinit>
 804dac2:	4b21      	ldr	r3, [pc, #132]	; (804db48 <__swbuf_r+0x98>)
 804dac4:	429c      	cmp	r4, r3
 804dac6:	d12a      	bne.n	804db1e <__swbuf_r+0x6e>
 804dac8:	686c      	ldr	r4, [r5, #4]
 804daca:	69a3      	ldr	r3, [r4, #24]
 804dacc:	60a3      	str	r3, [r4, #8]
 804dace:	89a3      	ldrh	r3, [r4, #12]
 804dad0:	071a      	lsls	r2, r3, #28
 804dad2:	d52e      	bpl.n	804db32 <__swbuf_r+0x82>
 804dad4:	6923      	ldr	r3, [r4, #16]
 804dad6:	b363      	cbz	r3, 804db32 <__swbuf_r+0x82>
 804dad8:	6923      	ldr	r3, [r4, #16]
 804dada:	6820      	ldr	r0, [r4, #0]
 804dadc:	1ac0      	subs	r0, r0, r3
 804dade:	6963      	ldr	r3, [r4, #20]
 804dae0:	b2f6      	uxtb	r6, r6
 804dae2:	4283      	cmp	r3, r0
 804dae4:	4637      	mov	r7, r6
 804dae6:	dc04      	bgt.n	804daf2 <__swbuf_r+0x42>
 804dae8:	4621      	mov	r1, r4
 804daea:	4628      	mov	r0, r5
 804daec:	f000 f926 	bl	804dd3c <_fflush_r>
 804daf0:	bb28      	cbnz	r0, 804db3e <__swbuf_r+0x8e>
 804daf2:	68a3      	ldr	r3, [r4, #8]
 804daf4:	3b01      	subs	r3, #1
 804daf6:	60a3      	str	r3, [r4, #8]
 804daf8:	6823      	ldr	r3, [r4, #0]
 804dafa:	1c5a      	adds	r2, r3, #1
 804dafc:	6022      	str	r2, [r4, #0]
 804dafe:	701e      	strb	r6, [r3, #0]
 804db00:	6963      	ldr	r3, [r4, #20]
 804db02:	3001      	adds	r0, #1
 804db04:	4283      	cmp	r3, r0
 804db06:	d004      	beq.n	804db12 <__swbuf_r+0x62>
 804db08:	89a3      	ldrh	r3, [r4, #12]
 804db0a:	07db      	lsls	r3, r3, #31
 804db0c:	d519      	bpl.n	804db42 <__swbuf_r+0x92>
 804db0e:	2e0a      	cmp	r6, #10
 804db10:	d117      	bne.n	804db42 <__swbuf_r+0x92>
 804db12:	4621      	mov	r1, r4
 804db14:	4628      	mov	r0, r5
 804db16:	f000 f911 	bl	804dd3c <_fflush_r>
 804db1a:	b190      	cbz	r0, 804db42 <__swbuf_r+0x92>
 804db1c:	e00f      	b.n	804db3e <__swbuf_r+0x8e>
 804db1e:	4b0b      	ldr	r3, [pc, #44]	; (804db4c <__swbuf_r+0x9c>)
 804db20:	429c      	cmp	r4, r3
 804db22:	d101      	bne.n	804db28 <__swbuf_r+0x78>
 804db24:	68ac      	ldr	r4, [r5, #8]
 804db26:	e7d0      	b.n	804daca <__swbuf_r+0x1a>
 804db28:	4b09      	ldr	r3, [pc, #36]	; (804db50 <__swbuf_r+0xa0>)
 804db2a:	429c      	cmp	r4, r3
 804db2c:	bf08      	it	eq
 804db2e:	68ec      	ldreq	r4, [r5, #12]
 804db30:	e7cb      	b.n	804daca <__swbuf_r+0x1a>
 804db32:	4621      	mov	r1, r4
 804db34:	4628      	mov	r0, r5
 804db36:	f000 f80d 	bl	804db54 <__swsetup_r>
 804db3a:	2800      	cmp	r0, #0
 804db3c:	d0cc      	beq.n	804dad8 <__swbuf_r+0x28>
 804db3e:	f04f 37ff 	mov.w	r7, #4294967295
 804db42:	4638      	mov	r0, r7
 804db44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804db46:	bf00      	nop
 804db48:	080500e4 	.word	0x080500e4
 804db4c:	08050104 	.word	0x08050104
 804db50:	080500c4 	.word	0x080500c4

0804db54 <__swsetup_r>:
 804db54:	4b32      	ldr	r3, [pc, #200]	; (804dc20 <__swsetup_r+0xcc>)
 804db56:	b570      	push	{r4, r5, r6, lr}
 804db58:	681d      	ldr	r5, [r3, #0]
 804db5a:	4606      	mov	r6, r0
 804db5c:	460c      	mov	r4, r1
 804db5e:	b125      	cbz	r5, 804db6a <__swsetup_r+0x16>
 804db60:	69ab      	ldr	r3, [r5, #24]
 804db62:	b913      	cbnz	r3, 804db6a <__swsetup_r+0x16>
 804db64:	4628      	mov	r0, r5
 804db66:	f000 f953 	bl	804de10 <__sinit>
 804db6a:	4b2e      	ldr	r3, [pc, #184]	; (804dc24 <__swsetup_r+0xd0>)
 804db6c:	429c      	cmp	r4, r3
 804db6e:	d10f      	bne.n	804db90 <__swsetup_r+0x3c>
 804db70:	686c      	ldr	r4, [r5, #4]
 804db72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804db76:	b29a      	uxth	r2, r3
 804db78:	0715      	lsls	r5, r2, #28
 804db7a:	d42c      	bmi.n	804dbd6 <__swsetup_r+0x82>
 804db7c:	06d0      	lsls	r0, r2, #27
 804db7e:	d411      	bmi.n	804dba4 <__swsetup_r+0x50>
 804db80:	2209      	movs	r2, #9
 804db82:	6032      	str	r2, [r6, #0]
 804db84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804db88:	81a3      	strh	r3, [r4, #12]
 804db8a:	f04f 30ff 	mov.w	r0, #4294967295
 804db8e:	e03e      	b.n	804dc0e <__swsetup_r+0xba>
 804db90:	4b25      	ldr	r3, [pc, #148]	; (804dc28 <__swsetup_r+0xd4>)
 804db92:	429c      	cmp	r4, r3
 804db94:	d101      	bne.n	804db9a <__swsetup_r+0x46>
 804db96:	68ac      	ldr	r4, [r5, #8]
 804db98:	e7eb      	b.n	804db72 <__swsetup_r+0x1e>
 804db9a:	4b24      	ldr	r3, [pc, #144]	; (804dc2c <__swsetup_r+0xd8>)
 804db9c:	429c      	cmp	r4, r3
 804db9e:	bf08      	it	eq
 804dba0:	68ec      	ldreq	r4, [r5, #12]
 804dba2:	e7e6      	b.n	804db72 <__swsetup_r+0x1e>
 804dba4:	0751      	lsls	r1, r2, #29
 804dba6:	d512      	bpl.n	804dbce <__swsetup_r+0x7a>
 804dba8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 804dbaa:	b141      	cbz	r1, 804dbbe <__swsetup_r+0x6a>
 804dbac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 804dbb0:	4299      	cmp	r1, r3
 804dbb2:	d002      	beq.n	804dbba <__swsetup_r+0x66>
 804dbb4:	4630      	mov	r0, r6
 804dbb6:	f000 fa21 	bl	804dffc <_free_r>
 804dbba:	2300      	movs	r3, #0
 804dbbc:	6363      	str	r3, [r4, #52]	; 0x34
 804dbbe:	89a3      	ldrh	r3, [r4, #12]
 804dbc0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 804dbc4:	81a3      	strh	r3, [r4, #12]
 804dbc6:	2300      	movs	r3, #0
 804dbc8:	6063      	str	r3, [r4, #4]
 804dbca:	6923      	ldr	r3, [r4, #16]
 804dbcc:	6023      	str	r3, [r4, #0]
 804dbce:	89a3      	ldrh	r3, [r4, #12]
 804dbd0:	f043 0308 	orr.w	r3, r3, #8
 804dbd4:	81a3      	strh	r3, [r4, #12]
 804dbd6:	6923      	ldr	r3, [r4, #16]
 804dbd8:	b94b      	cbnz	r3, 804dbee <__swsetup_r+0x9a>
 804dbda:	89a3      	ldrh	r3, [r4, #12]
 804dbdc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 804dbe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804dbe4:	d003      	beq.n	804dbee <__swsetup_r+0x9a>
 804dbe6:	4621      	mov	r1, r4
 804dbe8:	4630      	mov	r0, r6
 804dbea:	f000 f9bf 	bl	804df6c <__smakebuf_r>
 804dbee:	89a2      	ldrh	r2, [r4, #12]
 804dbf0:	f012 0301 	ands.w	r3, r2, #1
 804dbf4:	d00c      	beq.n	804dc10 <__swsetup_r+0xbc>
 804dbf6:	2300      	movs	r3, #0
 804dbf8:	60a3      	str	r3, [r4, #8]
 804dbfa:	6963      	ldr	r3, [r4, #20]
 804dbfc:	425b      	negs	r3, r3
 804dbfe:	61a3      	str	r3, [r4, #24]
 804dc00:	6923      	ldr	r3, [r4, #16]
 804dc02:	b953      	cbnz	r3, 804dc1a <__swsetup_r+0xc6>
 804dc04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804dc08:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 804dc0c:	d1ba      	bne.n	804db84 <__swsetup_r+0x30>
 804dc0e:	bd70      	pop	{r4, r5, r6, pc}
 804dc10:	0792      	lsls	r2, r2, #30
 804dc12:	bf58      	it	pl
 804dc14:	6963      	ldrpl	r3, [r4, #20]
 804dc16:	60a3      	str	r3, [r4, #8]
 804dc18:	e7f2      	b.n	804dc00 <__swsetup_r+0xac>
 804dc1a:	2000      	movs	r0, #0
 804dc1c:	e7f7      	b.n	804dc0e <__swsetup_r+0xba>
 804dc1e:	bf00      	nop
 804dc20:	2000122c 	.word	0x2000122c
 804dc24:	080500e4 	.word	0x080500e4
 804dc28:	08050104 	.word	0x08050104
 804dc2c:	080500c4 	.word	0x080500c4

0804dc30 <__sflush_r>:
 804dc30:	898a      	ldrh	r2, [r1, #12]
 804dc32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804dc36:	4605      	mov	r5, r0
 804dc38:	0710      	lsls	r0, r2, #28
 804dc3a:	460c      	mov	r4, r1
 804dc3c:	d458      	bmi.n	804dcf0 <__sflush_r+0xc0>
 804dc3e:	684b      	ldr	r3, [r1, #4]
 804dc40:	2b00      	cmp	r3, #0
 804dc42:	dc05      	bgt.n	804dc50 <__sflush_r+0x20>
 804dc44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 804dc46:	2b00      	cmp	r3, #0
 804dc48:	dc02      	bgt.n	804dc50 <__sflush_r+0x20>
 804dc4a:	2000      	movs	r0, #0
 804dc4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804dc50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 804dc52:	2e00      	cmp	r6, #0
 804dc54:	d0f9      	beq.n	804dc4a <__sflush_r+0x1a>
 804dc56:	2300      	movs	r3, #0
 804dc58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 804dc5c:	682f      	ldr	r7, [r5, #0]
 804dc5e:	6a21      	ldr	r1, [r4, #32]
 804dc60:	602b      	str	r3, [r5, #0]
 804dc62:	d032      	beq.n	804dcca <__sflush_r+0x9a>
 804dc64:	6d60      	ldr	r0, [r4, #84]	; 0x54
 804dc66:	89a3      	ldrh	r3, [r4, #12]
 804dc68:	075a      	lsls	r2, r3, #29
 804dc6a:	d505      	bpl.n	804dc78 <__sflush_r+0x48>
 804dc6c:	6863      	ldr	r3, [r4, #4]
 804dc6e:	1ac0      	subs	r0, r0, r3
 804dc70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 804dc72:	b10b      	cbz	r3, 804dc78 <__sflush_r+0x48>
 804dc74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 804dc76:	1ac0      	subs	r0, r0, r3
 804dc78:	2300      	movs	r3, #0
 804dc7a:	4602      	mov	r2, r0
 804dc7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 804dc7e:	6a21      	ldr	r1, [r4, #32]
 804dc80:	4628      	mov	r0, r5
 804dc82:	47b0      	blx	r6
 804dc84:	1c43      	adds	r3, r0, #1
 804dc86:	89a3      	ldrh	r3, [r4, #12]
 804dc88:	d106      	bne.n	804dc98 <__sflush_r+0x68>
 804dc8a:	6829      	ldr	r1, [r5, #0]
 804dc8c:	291d      	cmp	r1, #29
 804dc8e:	d848      	bhi.n	804dd22 <__sflush_r+0xf2>
 804dc90:	4a29      	ldr	r2, [pc, #164]	; (804dd38 <__sflush_r+0x108>)
 804dc92:	40ca      	lsrs	r2, r1
 804dc94:	07d6      	lsls	r6, r2, #31
 804dc96:	d544      	bpl.n	804dd22 <__sflush_r+0xf2>
 804dc98:	2200      	movs	r2, #0
 804dc9a:	6062      	str	r2, [r4, #4]
 804dc9c:	04d9      	lsls	r1, r3, #19
 804dc9e:	6922      	ldr	r2, [r4, #16]
 804dca0:	6022      	str	r2, [r4, #0]
 804dca2:	d504      	bpl.n	804dcae <__sflush_r+0x7e>
 804dca4:	1c42      	adds	r2, r0, #1
 804dca6:	d101      	bne.n	804dcac <__sflush_r+0x7c>
 804dca8:	682b      	ldr	r3, [r5, #0]
 804dcaa:	b903      	cbnz	r3, 804dcae <__sflush_r+0x7e>
 804dcac:	6560      	str	r0, [r4, #84]	; 0x54
 804dcae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 804dcb0:	602f      	str	r7, [r5, #0]
 804dcb2:	2900      	cmp	r1, #0
 804dcb4:	d0c9      	beq.n	804dc4a <__sflush_r+0x1a>
 804dcb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 804dcba:	4299      	cmp	r1, r3
 804dcbc:	d002      	beq.n	804dcc4 <__sflush_r+0x94>
 804dcbe:	4628      	mov	r0, r5
 804dcc0:	f000 f99c 	bl	804dffc <_free_r>
 804dcc4:	2000      	movs	r0, #0
 804dcc6:	6360      	str	r0, [r4, #52]	; 0x34
 804dcc8:	e7c0      	b.n	804dc4c <__sflush_r+0x1c>
 804dcca:	2301      	movs	r3, #1
 804dccc:	4628      	mov	r0, r5
 804dcce:	47b0      	blx	r6
 804dcd0:	1c41      	adds	r1, r0, #1
 804dcd2:	d1c8      	bne.n	804dc66 <__sflush_r+0x36>
 804dcd4:	682b      	ldr	r3, [r5, #0]
 804dcd6:	2b00      	cmp	r3, #0
 804dcd8:	d0c5      	beq.n	804dc66 <__sflush_r+0x36>
 804dcda:	2b1d      	cmp	r3, #29
 804dcdc:	d001      	beq.n	804dce2 <__sflush_r+0xb2>
 804dcde:	2b16      	cmp	r3, #22
 804dce0:	d101      	bne.n	804dce6 <__sflush_r+0xb6>
 804dce2:	602f      	str	r7, [r5, #0]
 804dce4:	e7b1      	b.n	804dc4a <__sflush_r+0x1a>
 804dce6:	89a3      	ldrh	r3, [r4, #12]
 804dce8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804dcec:	81a3      	strh	r3, [r4, #12]
 804dcee:	e7ad      	b.n	804dc4c <__sflush_r+0x1c>
 804dcf0:	690f      	ldr	r7, [r1, #16]
 804dcf2:	2f00      	cmp	r7, #0
 804dcf4:	d0a9      	beq.n	804dc4a <__sflush_r+0x1a>
 804dcf6:	0793      	lsls	r3, r2, #30
 804dcf8:	680e      	ldr	r6, [r1, #0]
 804dcfa:	bf08      	it	eq
 804dcfc:	694b      	ldreq	r3, [r1, #20]
 804dcfe:	600f      	str	r7, [r1, #0]
 804dd00:	bf18      	it	ne
 804dd02:	2300      	movne	r3, #0
 804dd04:	eba6 0807 	sub.w	r8, r6, r7
 804dd08:	608b      	str	r3, [r1, #8]
 804dd0a:	f1b8 0f00 	cmp.w	r8, #0
 804dd0e:	dd9c      	ble.n	804dc4a <__sflush_r+0x1a>
 804dd10:	4643      	mov	r3, r8
 804dd12:	463a      	mov	r2, r7
 804dd14:	6a21      	ldr	r1, [r4, #32]
 804dd16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 804dd18:	4628      	mov	r0, r5
 804dd1a:	47b0      	blx	r6
 804dd1c:	2800      	cmp	r0, #0
 804dd1e:	dc06      	bgt.n	804dd2e <__sflush_r+0xfe>
 804dd20:	89a3      	ldrh	r3, [r4, #12]
 804dd22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804dd26:	81a3      	strh	r3, [r4, #12]
 804dd28:	f04f 30ff 	mov.w	r0, #4294967295
 804dd2c:	e78e      	b.n	804dc4c <__sflush_r+0x1c>
 804dd2e:	4407      	add	r7, r0
 804dd30:	eba8 0800 	sub.w	r8, r8, r0
 804dd34:	e7e9      	b.n	804dd0a <__sflush_r+0xda>
 804dd36:	bf00      	nop
 804dd38:	20400001 	.word	0x20400001

0804dd3c <_fflush_r>:
 804dd3c:	b538      	push	{r3, r4, r5, lr}
 804dd3e:	690b      	ldr	r3, [r1, #16]
 804dd40:	4605      	mov	r5, r0
 804dd42:	460c      	mov	r4, r1
 804dd44:	b1db      	cbz	r3, 804dd7e <_fflush_r+0x42>
 804dd46:	b118      	cbz	r0, 804dd50 <_fflush_r+0x14>
 804dd48:	6983      	ldr	r3, [r0, #24]
 804dd4a:	b90b      	cbnz	r3, 804dd50 <_fflush_r+0x14>
 804dd4c:	f000 f860 	bl	804de10 <__sinit>
 804dd50:	4b0c      	ldr	r3, [pc, #48]	; (804dd84 <_fflush_r+0x48>)
 804dd52:	429c      	cmp	r4, r3
 804dd54:	d109      	bne.n	804dd6a <_fflush_r+0x2e>
 804dd56:	686c      	ldr	r4, [r5, #4]
 804dd58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804dd5c:	b17b      	cbz	r3, 804dd7e <_fflush_r+0x42>
 804dd5e:	4621      	mov	r1, r4
 804dd60:	4628      	mov	r0, r5
 804dd62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 804dd66:	f7ff bf63 	b.w	804dc30 <__sflush_r>
 804dd6a:	4b07      	ldr	r3, [pc, #28]	; (804dd88 <_fflush_r+0x4c>)
 804dd6c:	429c      	cmp	r4, r3
 804dd6e:	d101      	bne.n	804dd74 <_fflush_r+0x38>
 804dd70:	68ac      	ldr	r4, [r5, #8]
 804dd72:	e7f1      	b.n	804dd58 <_fflush_r+0x1c>
 804dd74:	4b05      	ldr	r3, [pc, #20]	; (804dd8c <_fflush_r+0x50>)
 804dd76:	429c      	cmp	r4, r3
 804dd78:	bf08      	it	eq
 804dd7a:	68ec      	ldreq	r4, [r5, #12]
 804dd7c:	e7ec      	b.n	804dd58 <_fflush_r+0x1c>
 804dd7e:	2000      	movs	r0, #0
 804dd80:	bd38      	pop	{r3, r4, r5, pc}
 804dd82:	bf00      	nop
 804dd84:	080500e4 	.word	0x080500e4
 804dd88:	08050104 	.word	0x08050104
 804dd8c:	080500c4 	.word	0x080500c4

0804dd90 <std>:
 804dd90:	2300      	movs	r3, #0
 804dd92:	b510      	push	{r4, lr}
 804dd94:	4604      	mov	r4, r0
 804dd96:	e9c0 3300 	strd	r3, r3, [r0]
 804dd9a:	6083      	str	r3, [r0, #8]
 804dd9c:	8181      	strh	r1, [r0, #12]
 804dd9e:	6643      	str	r3, [r0, #100]	; 0x64
 804dda0:	81c2      	strh	r2, [r0, #14]
 804dda2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 804dda6:	6183      	str	r3, [r0, #24]
 804dda8:	4619      	mov	r1, r3
 804ddaa:	2208      	movs	r2, #8
 804ddac:	305c      	adds	r0, #92	; 0x5c
 804ddae:	f7ff fd13 	bl	804d7d8 <memset>
 804ddb2:	4b05      	ldr	r3, [pc, #20]	; (804ddc8 <std+0x38>)
 804ddb4:	6263      	str	r3, [r4, #36]	; 0x24
 804ddb6:	4b05      	ldr	r3, [pc, #20]	; (804ddcc <std+0x3c>)
 804ddb8:	62a3      	str	r3, [r4, #40]	; 0x28
 804ddba:	4b05      	ldr	r3, [pc, #20]	; (804ddd0 <std+0x40>)
 804ddbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 804ddbe:	4b05      	ldr	r3, [pc, #20]	; (804ddd4 <std+0x44>)
 804ddc0:	6224      	str	r4, [r4, #32]
 804ddc2:	6323      	str	r3, [r4, #48]	; 0x30
 804ddc4:	bd10      	pop	{r4, pc}
 804ddc6:	bf00      	nop
 804ddc8:	0804e9a1 	.word	0x0804e9a1
 804ddcc:	0804e9c3 	.word	0x0804e9c3
 804ddd0:	0804e9fb 	.word	0x0804e9fb
 804ddd4:	0804ea1f 	.word	0x0804ea1f

0804ddd8 <_cleanup_r>:
 804ddd8:	4901      	ldr	r1, [pc, #4]	; (804dde0 <_cleanup_r+0x8>)
 804ddda:	f000 b885 	b.w	804dee8 <_fwalk_reent>
 804ddde:	bf00      	nop
 804dde0:	0804dd3d 	.word	0x0804dd3d

0804dde4 <__sfmoreglue>:
 804dde4:	b570      	push	{r4, r5, r6, lr}
 804dde6:	1e4a      	subs	r2, r1, #1
 804dde8:	2568      	movs	r5, #104	; 0x68
 804ddea:	4355      	muls	r5, r2
 804ddec:	460e      	mov	r6, r1
 804ddee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 804ddf2:	f000 f951 	bl	804e098 <_malloc_r>
 804ddf6:	4604      	mov	r4, r0
 804ddf8:	b140      	cbz	r0, 804de0c <__sfmoreglue+0x28>
 804ddfa:	2100      	movs	r1, #0
 804ddfc:	e9c0 1600 	strd	r1, r6, [r0]
 804de00:	300c      	adds	r0, #12
 804de02:	60a0      	str	r0, [r4, #8]
 804de04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 804de08:	f7ff fce6 	bl	804d7d8 <memset>
 804de0c:	4620      	mov	r0, r4
 804de0e:	bd70      	pop	{r4, r5, r6, pc}

0804de10 <__sinit>:
 804de10:	6983      	ldr	r3, [r0, #24]
 804de12:	b510      	push	{r4, lr}
 804de14:	4604      	mov	r4, r0
 804de16:	bb33      	cbnz	r3, 804de66 <__sinit+0x56>
 804de18:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 804de1c:	6503      	str	r3, [r0, #80]	; 0x50
 804de1e:	4b12      	ldr	r3, [pc, #72]	; (804de68 <__sinit+0x58>)
 804de20:	4a12      	ldr	r2, [pc, #72]	; (804de6c <__sinit+0x5c>)
 804de22:	681b      	ldr	r3, [r3, #0]
 804de24:	6282      	str	r2, [r0, #40]	; 0x28
 804de26:	4298      	cmp	r0, r3
 804de28:	bf04      	itt	eq
 804de2a:	2301      	moveq	r3, #1
 804de2c:	6183      	streq	r3, [r0, #24]
 804de2e:	f000 f81f 	bl	804de70 <__sfp>
 804de32:	6060      	str	r0, [r4, #4]
 804de34:	4620      	mov	r0, r4
 804de36:	f000 f81b 	bl	804de70 <__sfp>
 804de3a:	60a0      	str	r0, [r4, #8]
 804de3c:	4620      	mov	r0, r4
 804de3e:	f000 f817 	bl	804de70 <__sfp>
 804de42:	2200      	movs	r2, #0
 804de44:	60e0      	str	r0, [r4, #12]
 804de46:	2104      	movs	r1, #4
 804de48:	6860      	ldr	r0, [r4, #4]
 804de4a:	f7ff ffa1 	bl	804dd90 <std>
 804de4e:	2201      	movs	r2, #1
 804de50:	2109      	movs	r1, #9
 804de52:	68a0      	ldr	r0, [r4, #8]
 804de54:	f7ff ff9c 	bl	804dd90 <std>
 804de58:	2202      	movs	r2, #2
 804de5a:	2112      	movs	r1, #18
 804de5c:	68e0      	ldr	r0, [r4, #12]
 804de5e:	f7ff ff97 	bl	804dd90 <std>
 804de62:	2301      	movs	r3, #1
 804de64:	61a3      	str	r3, [r4, #24]
 804de66:	bd10      	pop	{r4, pc}
 804de68:	080500c0 	.word	0x080500c0
 804de6c:	0804ddd9 	.word	0x0804ddd9

0804de70 <__sfp>:
 804de70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804de72:	4b1b      	ldr	r3, [pc, #108]	; (804dee0 <__sfp+0x70>)
 804de74:	681e      	ldr	r6, [r3, #0]
 804de76:	69b3      	ldr	r3, [r6, #24]
 804de78:	4607      	mov	r7, r0
 804de7a:	b913      	cbnz	r3, 804de82 <__sfp+0x12>
 804de7c:	4630      	mov	r0, r6
 804de7e:	f7ff ffc7 	bl	804de10 <__sinit>
 804de82:	3648      	adds	r6, #72	; 0x48
 804de84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 804de88:	3b01      	subs	r3, #1
 804de8a:	d503      	bpl.n	804de94 <__sfp+0x24>
 804de8c:	6833      	ldr	r3, [r6, #0]
 804de8e:	b133      	cbz	r3, 804de9e <__sfp+0x2e>
 804de90:	6836      	ldr	r6, [r6, #0]
 804de92:	e7f7      	b.n	804de84 <__sfp+0x14>
 804de94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 804de98:	b16d      	cbz	r5, 804deb6 <__sfp+0x46>
 804de9a:	3468      	adds	r4, #104	; 0x68
 804de9c:	e7f4      	b.n	804de88 <__sfp+0x18>
 804de9e:	2104      	movs	r1, #4
 804dea0:	4638      	mov	r0, r7
 804dea2:	f7ff ff9f 	bl	804dde4 <__sfmoreglue>
 804dea6:	6030      	str	r0, [r6, #0]
 804dea8:	2800      	cmp	r0, #0
 804deaa:	d1f1      	bne.n	804de90 <__sfp+0x20>
 804deac:	230c      	movs	r3, #12
 804deae:	603b      	str	r3, [r7, #0]
 804deb0:	4604      	mov	r4, r0
 804deb2:	4620      	mov	r0, r4
 804deb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804deb6:	4b0b      	ldr	r3, [pc, #44]	; (804dee4 <__sfp+0x74>)
 804deb8:	6665      	str	r5, [r4, #100]	; 0x64
 804deba:	e9c4 5500 	strd	r5, r5, [r4]
 804debe:	60a5      	str	r5, [r4, #8]
 804dec0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 804dec4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 804dec8:	2208      	movs	r2, #8
 804deca:	4629      	mov	r1, r5
 804decc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 804ded0:	f7ff fc82 	bl	804d7d8 <memset>
 804ded4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 804ded8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 804dedc:	e7e9      	b.n	804deb2 <__sfp+0x42>
 804dede:	bf00      	nop
 804dee0:	080500c0 	.word	0x080500c0
 804dee4:	ffff0001 	.word	0xffff0001

0804dee8 <_fwalk_reent>:
 804dee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 804deec:	4680      	mov	r8, r0
 804deee:	4689      	mov	r9, r1
 804def0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 804def4:	2600      	movs	r6, #0
 804def6:	b914      	cbnz	r4, 804defe <_fwalk_reent+0x16>
 804def8:	4630      	mov	r0, r6
 804defa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 804defe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 804df02:	3f01      	subs	r7, #1
 804df04:	d501      	bpl.n	804df0a <_fwalk_reent+0x22>
 804df06:	6824      	ldr	r4, [r4, #0]
 804df08:	e7f5      	b.n	804def6 <_fwalk_reent+0xe>
 804df0a:	89ab      	ldrh	r3, [r5, #12]
 804df0c:	2b01      	cmp	r3, #1
 804df0e:	d907      	bls.n	804df20 <_fwalk_reent+0x38>
 804df10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 804df14:	3301      	adds	r3, #1
 804df16:	d003      	beq.n	804df20 <_fwalk_reent+0x38>
 804df18:	4629      	mov	r1, r5
 804df1a:	4640      	mov	r0, r8
 804df1c:	47c8      	blx	r9
 804df1e:	4306      	orrs	r6, r0
 804df20:	3568      	adds	r5, #104	; 0x68
 804df22:	e7ee      	b.n	804df02 <_fwalk_reent+0x1a>

0804df24 <__swhatbuf_r>:
 804df24:	b570      	push	{r4, r5, r6, lr}
 804df26:	460e      	mov	r6, r1
 804df28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804df2c:	2900      	cmp	r1, #0
 804df2e:	b096      	sub	sp, #88	; 0x58
 804df30:	4614      	mov	r4, r2
 804df32:	461d      	mov	r5, r3
 804df34:	da07      	bge.n	804df46 <__swhatbuf_r+0x22>
 804df36:	2300      	movs	r3, #0
 804df38:	602b      	str	r3, [r5, #0]
 804df3a:	89b3      	ldrh	r3, [r6, #12]
 804df3c:	061a      	lsls	r2, r3, #24
 804df3e:	d410      	bmi.n	804df62 <__swhatbuf_r+0x3e>
 804df40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 804df44:	e00e      	b.n	804df64 <__swhatbuf_r+0x40>
 804df46:	466a      	mov	r2, sp
 804df48:	f000 fd90 	bl	804ea6c <_fstat_r>
 804df4c:	2800      	cmp	r0, #0
 804df4e:	dbf2      	blt.n	804df36 <__swhatbuf_r+0x12>
 804df50:	9a01      	ldr	r2, [sp, #4]
 804df52:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 804df56:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 804df5a:	425a      	negs	r2, r3
 804df5c:	415a      	adcs	r2, r3
 804df5e:	602a      	str	r2, [r5, #0]
 804df60:	e7ee      	b.n	804df40 <__swhatbuf_r+0x1c>
 804df62:	2340      	movs	r3, #64	; 0x40
 804df64:	2000      	movs	r0, #0
 804df66:	6023      	str	r3, [r4, #0]
 804df68:	b016      	add	sp, #88	; 0x58
 804df6a:	bd70      	pop	{r4, r5, r6, pc}

0804df6c <__smakebuf_r>:
 804df6c:	898b      	ldrh	r3, [r1, #12]
 804df6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 804df70:	079d      	lsls	r5, r3, #30
 804df72:	4606      	mov	r6, r0
 804df74:	460c      	mov	r4, r1
 804df76:	d507      	bpl.n	804df88 <__smakebuf_r+0x1c>
 804df78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 804df7c:	6023      	str	r3, [r4, #0]
 804df7e:	6123      	str	r3, [r4, #16]
 804df80:	2301      	movs	r3, #1
 804df82:	6163      	str	r3, [r4, #20]
 804df84:	b002      	add	sp, #8
 804df86:	bd70      	pop	{r4, r5, r6, pc}
 804df88:	ab01      	add	r3, sp, #4
 804df8a:	466a      	mov	r2, sp
 804df8c:	f7ff ffca 	bl	804df24 <__swhatbuf_r>
 804df90:	9900      	ldr	r1, [sp, #0]
 804df92:	4605      	mov	r5, r0
 804df94:	4630      	mov	r0, r6
 804df96:	f000 f87f 	bl	804e098 <_malloc_r>
 804df9a:	b948      	cbnz	r0, 804dfb0 <__smakebuf_r+0x44>
 804df9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804dfa0:	059a      	lsls	r2, r3, #22
 804dfa2:	d4ef      	bmi.n	804df84 <__smakebuf_r+0x18>
 804dfa4:	f023 0303 	bic.w	r3, r3, #3
 804dfa8:	f043 0302 	orr.w	r3, r3, #2
 804dfac:	81a3      	strh	r3, [r4, #12]
 804dfae:	e7e3      	b.n	804df78 <__smakebuf_r+0xc>
 804dfb0:	4b0d      	ldr	r3, [pc, #52]	; (804dfe8 <__smakebuf_r+0x7c>)
 804dfb2:	62b3      	str	r3, [r6, #40]	; 0x28
 804dfb4:	89a3      	ldrh	r3, [r4, #12]
 804dfb6:	6020      	str	r0, [r4, #0]
 804dfb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 804dfbc:	81a3      	strh	r3, [r4, #12]
 804dfbe:	9b00      	ldr	r3, [sp, #0]
 804dfc0:	6163      	str	r3, [r4, #20]
 804dfc2:	9b01      	ldr	r3, [sp, #4]
 804dfc4:	6120      	str	r0, [r4, #16]
 804dfc6:	b15b      	cbz	r3, 804dfe0 <__smakebuf_r+0x74>
 804dfc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 804dfcc:	4630      	mov	r0, r6
 804dfce:	f000 fd5f 	bl	804ea90 <_isatty_r>
 804dfd2:	b128      	cbz	r0, 804dfe0 <__smakebuf_r+0x74>
 804dfd4:	89a3      	ldrh	r3, [r4, #12]
 804dfd6:	f023 0303 	bic.w	r3, r3, #3
 804dfda:	f043 0301 	orr.w	r3, r3, #1
 804dfde:	81a3      	strh	r3, [r4, #12]
 804dfe0:	89a3      	ldrh	r3, [r4, #12]
 804dfe2:	431d      	orrs	r5, r3
 804dfe4:	81a5      	strh	r5, [r4, #12]
 804dfe6:	e7cd      	b.n	804df84 <__smakebuf_r+0x18>
 804dfe8:	0804ddd9 	.word	0x0804ddd9

0804dfec <malloc>:
 804dfec:	4b02      	ldr	r3, [pc, #8]	; (804dff8 <malloc+0xc>)
 804dfee:	4601      	mov	r1, r0
 804dff0:	6818      	ldr	r0, [r3, #0]
 804dff2:	f000 b851 	b.w	804e098 <_malloc_r>
 804dff6:	bf00      	nop
 804dff8:	2000122c 	.word	0x2000122c

0804dffc <_free_r>:
 804dffc:	b538      	push	{r3, r4, r5, lr}
 804dffe:	4605      	mov	r5, r0
 804e000:	2900      	cmp	r1, #0
 804e002:	d045      	beq.n	804e090 <_free_r+0x94>
 804e004:	f851 3c04 	ldr.w	r3, [r1, #-4]
 804e008:	1f0c      	subs	r4, r1, #4
 804e00a:	2b00      	cmp	r3, #0
 804e00c:	bfb8      	it	lt
 804e00e:	18e4      	addlt	r4, r4, r3
 804e010:	f000 fd79 	bl	804eb06 <__malloc_lock>
 804e014:	4a1f      	ldr	r2, [pc, #124]	; (804e094 <_free_r+0x98>)
 804e016:	6813      	ldr	r3, [r2, #0]
 804e018:	4610      	mov	r0, r2
 804e01a:	b933      	cbnz	r3, 804e02a <_free_r+0x2e>
 804e01c:	6063      	str	r3, [r4, #4]
 804e01e:	6014      	str	r4, [r2, #0]
 804e020:	4628      	mov	r0, r5
 804e022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 804e026:	f000 bd6f 	b.w	804eb08 <__malloc_unlock>
 804e02a:	42a3      	cmp	r3, r4
 804e02c:	d90c      	bls.n	804e048 <_free_r+0x4c>
 804e02e:	6821      	ldr	r1, [r4, #0]
 804e030:	1862      	adds	r2, r4, r1
 804e032:	4293      	cmp	r3, r2
 804e034:	bf04      	itt	eq
 804e036:	681a      	ldreq	r2, [r3, #0]
 804e038:	685b      	ldreq	r3, [r3, #4]
 804e03a:	6063      	str	r3, [r4, #4]
 804e03c:	bf04      	itt	eq
 804e03e:	1852      	addeq	r2, r2, r1
 804e040:	6022      	streq	r2, [r4, #0]
 804e042:	6004      	str	r4, [r0, #0]
 804e044:	e7ec      	b.n	804e020 <_free_r+0x24>
 804e046:	4613      	mov	r3, r2
 804e048:	685a      	ldr	r2, [r3, #4]
 804e04a:	b10a      	cbz	r2, 804e050 <_free_r+0x54>
 804e04c:	42a2      	cmp	r2, r4
 804e04e:	d9fa      	bls.n	804e046 <_free_r+0x4a>
 804e050:	6819      	ldr	r1, [r3, #0]
 804e052:	1858      	adds	r0, r3, r1
 804e054:	42a0      	cmp	r0, r4
 804e056:	d10b      	bne.n	804e070 <_free_r+0x74>
 804e058:	6820      	ldr	r0, [r4, #0]
 804e05a:	4401      	add	r1, r0
 804e05c:	1858      	adds	r0, r3, r1
 804e05e:	4282      	cmp	r2, r0
 804e060:	6019      	str	r1, [r3, #0]
 804e062:	d1dd      	bne.n	804e020 <_free_r+0x24>
 804e064:	6810      	ldr	r0, [r2, #0]
 804e066:	6852      	ldr	r2, [r2, #4]
 804e068:	605a      	str	r2, [r3, #4]
 804e06a:	4401      	add	r1, r0
 804e06c:	6019      	str	r1, [r3, #0]
 804e06e:	e7d7      	b.n	804e020 <_free_r+0x24>
 804e070:	d902      	bls.n	804e078 <_free_r+0x7c>
 804e072:	230c      	movs	r3, #12
 804e074:	602b      	str	r3, [r5, #0]
 804e076:	e7d3      	b.n	804e020 <_free_r+0x24>
 804e078:	6820      	ldr	r0, [r4, #0]
 804e07a:	1821      	adds	r1, r4, r0
 804e07c:	428a      	cmp	r2, r1
 804e07e:	bf04      	itt	eq
 804e080:	6811      	ldreq	r1, [r2, #0]
 804e082:	6852      	ldreq	r2, [r2, #4]
 804e084:	6062      	str	r2, [r4, #4]
 804e086:	bf04      	itt	eq
 804e088:	1809      	addeq	r1, r1, r0
 804e08a:	6021      	streq	r1, [r4, #0]
 804e08c:	605c      	str	r4, [r3, #4]
 804e08e:	e7c7      	b.n	804e020 <_free_r+0x24>
 804e090:	bd38      	pop	{r3, r4, r5, pc}
 804e092:	bf00      	nop
 804e094:	2000b520 	.word	0x2000b520

0804e098 <_malloc_r>:
 804e098:	b570      	push	{r4, r5, r6, lr}
 804e09a:	1ccd      	adds	r5, r1, #3
 804e09c:	f025 0503 	bic.w	r5, r5, #3
 804e0a0:	3508      	adds	r5, #8
 804e0a2:	2d0c      	cmp	r5, #12
 804e0a4:	bf38      	it	cc
 804e0a6:	250c      	movcc	r5, #12
 804e0a8:	2d00      	cmp	r5, #0
 804e0aa:	4606      	mov	r6, r0
 804e0ac:	db01      	blt.n	804e0b2 <_malloc_r+0x1a>
 804e0ae:	42a9      	cmp	r1, r5
 804e0b0:	d903      	bls.n	804e0ba <_malloc_r+0x22>
 804e0b2:	230c      	movs	r3, #12
 804e0b4:	6033      	str	r3, [r6, #0]
 804e0b6:	2000      	movs	r0, #0
 804e0b8:	bd70      	pop	{r4, r5, r6, pc}
 804e0ba:	f000 fd24 	bl	804eb06 <__malloc_lock>
 804e0be:	4a21      	ldr	r2, [pc, #132]	; (804e144 <_malloc_r+0xac>)
 804e0c0:	6814      	ldr	r4, [r2, #0]
 804e0c2:	4621      	mov	r1, r4
 804e0c4:	b991      	cbnz	r1, 804e0ec <_malloc_r+0x54>
 804e0c6:	4c20      	ldr	r4, [pc, #128]	; (804e148 <_malloc_r+0xb0>)
 804e0c8:	6823      	ldr	r3, [r4, #0]
 804e0ca:	b91b      	cbnz	r3, 804e0d4 <_malloc_r+0x3c>
 804e0cc:	4630      	mov	r0, r6
 804e0ce:	f000 fc57 	bl	804e980 <_sbrk_r>
 804e0d2:	6020      	str	r0, [r4, #0]
 804e0d4:	4629      	mov	r1, r5
 804e0d6:	4630      	mov	r0, r6
 804e0d8:	f000 fc52 	bl	804e980 <_sbrk_r>
 804e0dc:	1c43      	adds	r3, r0, #1
 804e0de:	d124      	bne.n	804e12a <_malloc_r+0x92>
 804e0e0:	230c      	movs	r3, #12
 804e0e2:	6033      	str	r3, [r6, #0]
 804e0e4:	4630      	mov	r0, r6
 804e0e6:	f000 fd0f 	bl	804eb08 <__malloc_unlock>
 804e0ea:	e7e4      	b.n	804e0b6 <_malloc_r+0x1e>
 804e0ec:	680b      	ldr	r3, [r1, #0]
 804e0ee:	1b5b      	subs	r3, r3, r5
 804e0f0:	d418      	bmi.n	804e124 <_malloc_r+0x8c>
 804e0f2:	2b0b      	cmp	r3, #11
 804e0f4:	d90f      	bls.n	804e116 <_malloc_r+0x7e>
 804e0f6:	600b      	str	r3, [r1, #0]
 804e0f8:	50cd      	str	r5, [r1, r3]
 804e0fa:	18cc      	adds	r4, r1, r3
 804e0fc:	4630      	mov	r0, r6
 804e0fe:	f000 fd03 	bl	804eb08 <__malloc_unlock>
 804e102:	f104 000b 	add.w	r0, r4, #11
 804e106:	1d23      	adds	r3, r4, #4
 804e108:	f020 0007 	bic.w	r0, r0, #7
 804e10c:	1ac3      	subs	r3, r0, r3
 804e10e:	d0d3      	beq.n	804e0b8 <_malloc_r+0x20>
 804e110:	425a      	negs	r2, r3
 804e112:	50e2      	str	r2, [r4, r3]
 804e114:	e7d0      	b.n	804e0b8 <_malloc_r+0x20>
 804e116:	428c      	cmp	r4, r1
 804e118:	684b      	ldr	r3, [r1, #4]
 804e11a:	bf16      	itet	ne
 804e11c:	6063      	strne	r3, [r4, #4]
 804e11e:	6013      	streq	r3, [r2, #0]
 804e120:	460c      	movne	r4, r1
 804e122:	e7eb      	b.n	804e0fc <_malloc_r+0x64>
 804e124:	460c      	mov	r4, r1
 804e126:	6849      	ldr	r1, [r1, #4]
 804e128:	e7cc      	b.n	804e0c4 <_malloc_r+0x2c>
 804e12a:	1cc4      	adds	r4, r0, #3
 804e12c:	f024 0403 	bic.w	r4, r4, #3
 804e130:	42a0      	cmp	r0, r4
 804e132:	d005      	beq.n	804e140 <_malloc_r+0xa8>
 804e134:	1a21      	subs	r1, r4, r0
 804e136:	4630      	mov	r0, r6
 804e138:	f000 fc22 	bl	804e980 <_sbrk_r>
 804e13c:	3001      	adds	r0, #1
 804e13e:	d0cf      	beq.n	804e0e0 <_malloc_r+0x48>
 804e140:	6025      	str	r5, [r4, #0]
 804e142:	e7db      	b.n	804e0fc <_malloc_r+0x64>
 804e144:	2000b520 	.word	0x2000b520
 804e148:	2000b524 	.word	0x2000b524

0804e14c <__ssputs_r>:
 804e14c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804e150:	688e      	ldr	r6, [r1, #8]
 804e152:	429e      	cmp	r6, r3
 804e154:	4682      	mov	sl, r0
 804e156:	460c      	mov	r4, r1
 804e158:	4690      	mov	r8, r2
 804e15a:	4699      	mov	r9, r3
 804e15c:	d837      	bhi.n	804e1ce <__ssputs_r+0x82>
 804e15e:	898a      	ldrh	r2, [r1, #12]
 804e160:	f412 6f90 	tst.w	r2, #1152	; 0x480
 804e164:	d031      	beq.n	804e1ca <__ssputs_r+0x7e>
 804e166:	6825      	ldr	r5, [r4, #0]
 804e168:	6909      	ldr	r1, [r1, #16]
 804e16a:	1a6f      	subs	r7, r5, r1
 804e16c:	6965      	ldr	r5, [r4, #20]
 804e16e:	2302      	movs	r3, #2
 804e170:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 804e174:	fb95 f5f3 	sdiv	r5, r5, r3
 804e178:	f109 0301 	add.w	r3, r9, #1
 804e17c:	443b      	add	r3, r7
 804e17e:	429d      	cmp	r5, r3
 804e180:	bf38      	it	cc
 804e182:	461d      	movcc	r5, r3
 804e184:	0553      	lsls	r3, r2, #21
 804e186:	d530      	bpl.n	804e1ea <__ssputs_r+0x9e>
 804e188:	4629      	mov	r1, r5
 804e18a:	f7ff ff85 	bl	804e098 <_malloc_r>
 804e18e:	4606      	mov	r6, r0
 804e190:	b950      	cbnz	r0, 804e1a8 <__ssputs_r+0x5c>
 804e192:	230c      	movs	r3, #12
 804e194:	f8ca 3000 	str.w	r3, [sl]
 804e198:	89a3      	ldrh	r3, [r4, #12]
 804e19a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804e19e:	81a3      	strh	r3, [r4, #12]
 804e1a0:	f04f 30ff 	mov.w	r0, #4294967295
 804e1a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804e1a8:	463a      	mov	r2, r7
 804e1aa:	6921      	ldr	r1, [r4, #16]
 804e1ac:	f7ff fb09 	bl	804d7c2 <memcpy>
 804e1b0:	89a3      	ldrh	r3, [r4, #12]
 804e1b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 804e1b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 804e1ba:	81a3      	strh	r3, [r4, #12]
 804e1bc:	6126      	str	r6, [r4, #16]
 804e1be:	6165      	str	r5, [r4, #20]
 804e1c0:	443e      	add	r6, r7
 804e1c2:	1bed      	subs	r5, r5, r7
 804e1c4:	6026      	str	r6, [r4, #0]
 804e1c6:	60a5      	str	r5, [r4, #8]
 804e1c8:	464e      	mov	r6, r9
 804e1ca:	454e      	cmp	r6, r9
 804e1cc:	d900      	bls.n	804e1d0 <__ssputs_r+0x84>
 804e1ce:	464e      	mov	r6, r9
 804e1d0:	4632      	mov	r2, r6
 804e1d2:	4641      	mov	r1, r8
 804e1d4:	6820      	ldr	r0, [r4, #0]
 804e1d6:	f000 fc7d 	bl	804ead4 <memmove>
 804e1da:	68a3      	ldr	r3, [r4, #8]
 804e1dc:	1b9b      	subs	r3, r3, r6
 804e1de:	60a3      	str	r3, [r4, #8]
 804e1e0:	6823      	ldr	r3, [r4, #0]
 804e1e2:	441e      	add	r6, r3
 804e1e4:	6026      	str	r6, [r4, #0]
 804e1e6:	2000      	movs	r0, #0
 804e1e8:	e7dc      	b.n	804e1a4 <__ssputs_r+0x58>
 804e1ea:	462a      	mov	r2, r5
 804e1ec:	f000 fc8d 	bl	804eb0a <_realloc_r>
 804e1f0:	4606      	mov	r6, r0
 804e1f2:	2800      	cmp	r0, #0
 804e1f4:	d1e2      	bne.n	804e1bc <__ssputs_r+0x70>
 804e1f6:	6921      	ldr	r1, [r4, #16]
 804e1f8:	4650      	mov	r0, sl
 804e1fa:	f7ff feff 	bl	804dffc <_free_r>
 804e1fe:	e7c8      	b.n	804e192 <__ssputs_r+0x46>

0804e200 <_svfiprintf_r>:
 804e200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804e204:	461d      	mov	r5, r3
 804e206:	898b      	ldrh	r3, [r1, #12]
 804e208:	061f      	lsls	r7, r3, #24
 804e20a:	b09d      	sub	sp, #116	; 0x74
 804e20c:	4680      	mov	r8, r0
 804e20e:	460c      	mov	r4, r1
 804e210:	4616      	mov	r6, r2
 804e212:	d50f      	bpl.n	804e234 <_svfiprintf_r+0x34>
 804e214:	690b      	ldr	r3, [r1, #16]
 804e216:	b96b      	cbnz	r3, 804e234 <_svfiprintf_r+0x34>
 804e218:	2140      	movs	r1, #64	; 0x40
 804e21a:	f7ff ff3d 	bl	804e098 <_malloc_r>
 804e21e:	6020      	str	r0, [r4, #0]
 804e220:	6120      	str	r0, [r4, #16]
 804e222:	b928      	cbnz	r0, 804e230 <_svfiprintf_r+0x30>
 804e224:	230c      	movs	r3, #12
 804e226:	f8c8 3000 	str.w	r3, [r8]
 804e22a:	f04f 30ff 	mov.w	r0, #4294967295
 804e22e:	e0c8      	b.n	804e3c2 <_svfiprintf_r+0x1c2>
 804e230:	2340      	movs	r3, #64	; 0x40
 804e232:	6163      	str	r3, [r4, #20]
 804e234:	2300      	movs	r3, #0
 804e236:	9309      	str	r3, [sp, #36]	; 0x24
 804e238:	2320      	movs	r3, #32
 804e23a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 804e23e:	2330      	movs	r3, #48	; 0x30
 804e240:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 804e244:	9503      	str	r5, [sp, #12]
 804e246:	f04f 0b01 	mov.w	fp, #1
 804e24a:	4637      	mov	r7, r6
 804e24c:	463d      	mov	r5, r7
 804e24e:	f815 3b01 	ldrb.w	r3, [r5], #1
 804e252:	b10b      	cbz	r3, 804e258 <_svfiprintf_r+0x58>
 804e254:	2b25      	cmp	r3, #37	; 0x25
 804e256:	d13e      	bne.n	804e2d6 <_svfiprintf_r+0xd6>
 804e258:	ebb7 0a06 	subs.w	sl, r7, r6
 804e25c:	d00b      	beq.n	804e276 <_svfiprintf_r+0x76>
 804e25e:	4653      	mov	r3, sl
 804e260:	4632      	mov	r2, r6
 804e262:	4621      	mov	r1, r4
 804e264:	4640      	mov	r0, r8
 804e266:	f7ff ff71 	bl	804e14c <__ssputs_r>
 804e26a:	3001      	adds	r0, #1
 804e26c:	f000 80a4 	beq.w	804e3b8 <_svfiprintf_r+0x1b8>
 804e270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804e272:	4453      	add	r3, sl
 804e274:	9309      	str	r3, [sp, #36]	; 0x24
 804e276:	783b      	ldrb	r3, [r7, #0]
 804e278:	2b00      	cmp	r3, #0
 804e27a:	f000 809d 	beq.w	804e3b8 <_svfiprintf_r+0x1b8>
 804e27e:	2300      	movs	r3, #0
 804e280:	f04f 32ff 	mov.w	r2, #4294967295
 804e284:	e9cd 2305 	strd	r2, r3, [sp, #20]
 804e288:	9304      	str	r3, [sp, #16]
 804e28a:	9307      	str	r3, [sp, #28]
 804e28c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 804e290:	931a      	str	r3, [sp, #104]	; 0x68
 804e292:	462f      	mov	r7, r5
 804e294:	2205      	movs	r2, #5
 804e296:	f817 1b01 	ldrb.w	r1, [r7], #1
 804e29a:	4850      	ldr	r0, [pc, #320]	; (804e3dc <_svfiprintf_r+0x1dc>)
 804e29c:	f7f2 f8d0 	bl	8040440 <memchr>
 804e2a0:	9b04      	ldr	r3, [sp, #16]
 804e2a2:	b9d0      	cbnz	r0, 804e2da <_svfiprintf_r+0xda>
 804e2a4:	06d9      	lsls	r1, r3, #27
 804e2a6:	bf44      	itt	mi
 804e2a8:	2220      	movmi	r2, #32
 804e2aa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 804e2ae:	071a      	lsls	r2, r3, #28
 804e2b0:	bf44      	itt	mi
 804e2b2:	222b      	movmi	r2, #43	; 0x2b
 804e2b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 804e2b8:	782a      	ldrb	r2, [r5, #0]
 804e2ba:	2a2a      	cmp	r2, #42	; 0x2a
 804e2bc:	d015      	beq.n	804e2ea <_svfiprintf_r+0xea>
 804e2be:	9a07      	ldr	r2, [sp, #28]
 804e2c0:	462f      	mov	r7, r5
 804e2c2:	2000      	movs	r0, #0
 804e2c4:	250a      	movs	r5, #10
 804e2c6:	4639      	mov	r1, r7
 804e2c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 804e2cc:	3b30      	subs	r3, #48	; 0x30
 804e2ce:	2b09      	cmp	r3, #9
 804e2d0:	d94d      	bls.n	804e36e <_svfiprintf_r+0x16e>
 804e2d2:	b1b8      	cbz	r0, 804e304 <_svfiprintf_r+0x104>
 804e2d4:	e00f      	b.n	804e2f6 <_svfiprintf_r+0xf6>
 804e2d6:	462f      	mov	r7, r5
 804e2d8:	e7b8      	b.n	804e24c <_svfiprintf_r+0x4c>
 804e2da:	4a40      	ldr	r2, [pc, #256]	; (804e3dc <_svfiprintf_r+0x1dc>)
 804e2dc:	1a80      	subs	r0, r0, r2
 804e2de:	fa0b f000 	lsl.w	r0, fp, r0
 804e2e2:	4318      	orrs	r0, r3
 804e2e4:	9004      	str	r0, [sp, #16]
 804e2e6:	463d      	mov	r5, r7
 804e2e8:	e7d3      	b.n	804e292 <_svfiprintf_r+0x92>
 804e2ea:	9a03      	ldr	r2, [sp, #12]
 804e2ec:	1d11      	adds	r1, r2, #4
 804e2ee:	6812      	ldr	r2, [r2, #0]
 804e2f0:	9103      	str	r1, [sp, #12]
 804e2f2:	2a00      	cmp	r2, #0
 804e2f4:	db01      	blt.n	804e2fa <_svfiprintf_r+0xfa>
 804e2f6:	9207      	str	r2, [sp, #28]
 804e2f8:	e004      	b.n	804e304 <_svfiprintf_r+0x104>
 804e2fa:	4252      	negs	r2, r2
 804e2fc:	f043 0302 	orr.w	r3, r3, #2
 804e300:	9207      	str	r2, [sp, #28]
 804e302:	9304      	str	r3, [sp, #16]
 804e304:	783b      	ldrb	r3, [r7, #0]
 804e306:	2b2e      	cmp	r3, #46	; 0x2e
 804e308:	d10c      	bne.n	804e324 <_svfiprintf_r+0x124>
 804e30a:	787b      	ldrb	r3, [r7, #1]
 804e30c:	2b2a      	cmp	r3, #42	; 0x2a
 804e30e:	d133      	bne.n	804e378 <_svfiprintf_r+0x178>
 804e310:	9b03      	ldr	r3, [sp, #12]
 804e312:	1d1a      	adds	r2, r3, #4
 804e314:	681b      	ldr	r3, [r3, #0]
 804e316:	9203      	str	r2, [sp, #12]
 804e318:	2b00      	cmp	r3, #0
 804e31a:	bfb8      	it	lt
 804e31c:	f04f 33ff 	movlt.w	r3, #4294967295
 804e320:	3702      	adds	r7, #2
 804e322:	9305      	str	r3, [sp, #20]
 804e324:	4d2e      	ldr	r5, [pc, #184]	; (804e3e0 <_svfiprintf_r+0x1e0>)
 804e326:	7839      	ldrb	r1, [r7, #0]
 804e328:	2203      	movs	r2, #3
 804e32a:	4628      	mov	r0, r5
 804e32c:	f7f2 f888 	bl	8040440 <memchr>
 804e330:	b138      	cbz	r0, 804e342 <_svfiprintf_r+0x142>
 804e332:	2340      	movs	r3, #64	; 0x40
 804e334:	1b40      	subs	r0, r0, r5
 804e336:	fa03 f000 	lsl.w	r0, r3, r0
 804e33a:	9b04      	ldr	r3, [sp, #16]
 804e33c:	4303      	orrs	r3, r0
 804e33e:	3701      	adds	r7, #1
 804e340:	9304      	str	r3, [sp, #16]
 804e342:	7839      	ldrb	r1, [r7, #0]
 804e344:	4827      	ldr	r0, [pc, #156]	; (804e3e4 <_svfiprintf_r+0x1e4>)
 804e346:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 804e34a:	2206      	movs	r2, #6
 804e34c:	1c7e      	adds	r6, r7, #1
 804e34e:	f7f2 f877 	bl	8040440 <memchr>
 804e352:	2800      	cmp	r0, #0
 804e354:	d038      	beq.n	804e3c8 <_svfiprintf_r+0x1c8>
 804e356:	4b24      	ldr	r3, [pc, #144]	; (804e3e8 <_svfiprintf_r+0x1e8>)
 804e358:	bb13      	cbnz	r3, 804e3a0 <_svfiprintf_r+0x1a0>
 804e35a:	9b03      	ldr	r3, [sp, #12]
 804e35c:	3307      	adds	r3, #7
 804e35e:	f023 0307 	bic.w	r3, r3, #7
 804e362:	3308      	adds	r3, #8
 804e364:	9303      	str	r3, [sp, #12]
 804e366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804e368:	444b      	add	r3, r9
 804e36a:	9309      	str	r3, [sp, #36]	; 0x24
 804e36c:	e76d      	b.n	804e24a <_svfiprintf_r+0x4a>
 804e36e:	fb05 3202 	mla	r2, r5, r2, r3
 804e372:	2001      	movs	r0, #1
 804e374:	460f      	mov	r7, r1
 804e376:	e7a6      	b.n	804e2c6 <_svfiprintf_r+0xc6>
 804e378:	2300      	movs	r3, #0
 804e37a:	3701      	adds	r7, #1
 804e37c:	9305      	str	r3, [sp, #20]
 804e37e:	4619      	mov	r1, r3
 804e380:	250a      	movs	r5, #10
 804e382:	4638      	mov	r0, r7
 804e384:	f810 2b01 	ldrb.w	r2, [r0], #1
 804e388:	3a30      	subs	r2, #48	; 0x30
 804e38a:	2a09      	cmp	r2, #9
 804e38c:	d903      	bls.n	804e396 <_svfiprintf_r+0x196>
 804e38e:	2b00      	cmp	r3, #0
 804e390:	d0c8      	beq.n	804e324 <_svfiprintf_r+0x124>
 804e392:	9105      	str	r1, [sp, #20]
 804e394:	e7c6      	b.n	804e324 <_svfiprintf_r+0x124>
 804e396:	fb05 2101 	mla	r1, r5, r1, r2
 804e39a:	2301      	movs	r3, #1
 804e39c:	4607      	mov	r7, r0
 804e39e:	e7f0      	b.n	804e382 <_svfiprintf_r+0x182>
 804e3a0:	ab03      	add	r3, sp, #12
 804e3a2:	9300      	str	r3, [sp, #0]
 804e3a4:	4622      	mov	r2, r4
 804e3a6:	4b11      	ldr	r3, [pc, #68]	; (804e3ec <_svfiprintf_r+0x1ec>)
 804e3a8:	a904      	add	r1, sp, #16
 804e3aa:	4640      	mov	r0, r8
 804e3ac:	f3af 8000 	nop.w
 804e3b0:	f1b0 3fff 	cmp.w	r0, #4294967295
 804e3b4:	4681      	mov	r9, r0
 804e3b6:	d1d6      	bne.n	804e366 <_svfiprintf_r+0x166>
 804e3b8:	89a3      	ldrh	r3, [r4, #12]
 804e3ba:	065b      	lsls	r3, r3, #25
 804e3bc:	f53f af35 	bmi.w	804e22a <_svfiprintf_r+0x2a>
 804e3c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 804e3c2:	b01d      	add	sp, #116	; 0x74
 804e3c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804e3c8:	ab03      	add	r3, sp, #12
 804e3ca:	9300      	str	r3, [sp, #0]
 804e3cc:	4622      	mov	r2, r4
 804e3ce:	4b07      	ldr	r3, [pc, #28]	; (804e3ec <_svfiprintf_r+0x1ec>)
 804e3d0:	a904      	add	r1, sp, #16
 804e3d2:	4640      	mov	r0, r8
 804e3d4:	f000 f9c2 	bl	804e75c <_printf_i>
 804e3d8:	e7ea      	b.n	804e3b0 <_svfiprintf_r+0x1b0>
 804e3da:	bf00      	nop
 804e3dc:	08050124 	.word	0x08050124
 804e3e0:	0805012a 	.word	0x0805012a
 804e3e4:	0805012e 	.word	0x0805012e
 804e3e8:	00000000 	.word	0x00000000
 804e3ec:	0804e14d 	.word	0x0804e14d

0804e3f0 <__sfputc_r>:
 804e3f0:	6893      	ldr	r3, [r2, #8]
 804e3f2:	3b01      	subs	r3, #1
 804e3f4:	2b00      	cmp	r3, #0
 804e3f6:	b410      	push	{r4}
 804e3f8:	6093      	str	r3, [r2, #8]
 804e3fa:	da08      	bge.n	804e40e <__sfputc_r+0x1e>
 804e3fc:	6994      	ldr	r4, [r2, #24]
 804e3fe:	42a3      	cmp	r3, r4
 804e400:	db01      	blt.n	804e406 <__sfputc_r+0x16>
 804e402:	290a      	cmp	r1, #10
 804e404:	d103      	bne.n	804e40e <__sfputc_r+0x1e>
 804e406:	f85d 4b04 	ldr.w	r4, [sp], #4
 804e40a:	f7ff bb51 	b.w	804dab0 <__swbuf_r>
 804e40e:	6813      	ldr	r3, [r2, #0]
 804e410:	1c58      	adds	r0, r3, #1
 804e412:	6010      	str	r0, [r2, #0]
 804e414:	7019      	strb	r1, [r3, #0]
 804e416:	4608      	mov	r0, r1
 804e418:	f85d 4b04 	ldr.w	r4, [sp], #4
 804e41c:	4770      	bx	lr

0804e41e <__sfputs_r>:
 804e41e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804e420:	4606      	mov	r6, r0
 804e422:	460f      	mov	r7, r1
 804e424:	4614      	mov	r4, r2
 804e426:	18d5      	adds	r5, r2, r3
 804e428:	42ac      	cmp	r4, r5
 804e42a:	d101      	bne.n	804e430 <__sfputs_r+0x12>
 804e42c:	2000      	movs	r0, #0
 804e42e:	e007      	b.n	804e440 <__sfputs_r+0x22>
 804e430:	463a      	mov	r2, r7
 804e432:	f814 1b01 	ldrb.w	r1, [r4], #1
 804e436:	4630      	mov	r0, r6
 804e438:	f7ff ffda 	bl	804e3f0 <__sfputc_r>
 804e43c:	1c43      	adds	r3, r0, #1
 804e43e:	d1f3      	bne.n	804e428 <__sfputs_r+0xa>
 804e440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0804e444 <_vfiprintf_r>:
 804e444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804e448:	460c      	mov	r4, r1
 804e44a:	b09d      	sub	sp, #116	; 0x74
 804e44c:	4617      	mov	r7, r2
 804e44e:	461d      	mov	r5, r3
 804e450:	4606      	mov	r6, r0
 804e452:	b118      	cbz	r0, 804e45c <_vfiprintf_r+0x18>
 804e454:	6983      	ldr	r3, [r0, #24]
 804e456:	b90b      	cbnz	r3, 804e45c <_vfiprintf_r+0x18>
 804e458:	f7ff fcda 	bl	804de10 <__sinit>
 804e45c:	4b7c      	ldr	r3, [pc, #496]	; (804e650 <_vfiprintf_r+0x20c>)
 804e45e:	429c      	cmp	r4, r3
 804e460:	d158      	bne.n	804e514 <_vfiprintf_r+0xd0>
 804e462:	6874      	ldr	r4, [r6, #4]
 804e464:	89a3      	ldrh	r3, [r4, #12]
 804e466:	0718      	lsls	r0, r3, #28
 804e468:	d55e      	bpl.n	804e528 <_vfiprintf_r+0xe4>
 804e46a:	6923      	ldr	r3, [r4, #16]
 804e46c:	2b00      	cmp	r3, #0
 804e46e:	d05b      	beq.n	804e528 <_vfiprintf_r+0xe4>
 804e470:	2300      	movs	r3, #0
 804e472:	9309      	str	r3, [sp, #36]	; 0x24
 804e474:	2320      	movs	r3, #32
 804e476:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 804e47a:	2330      	movs	r3, #48	; 0x30
 804e47c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 804e480:	9503      	str	r5, [sp, #12]
 804e482:	f04f 0b01 	mov.w	fp, #1
 804e486:	46b8      	mov	r8, r7
 804e488:	4645      	mov	r5, r8
 804e48a:	f815 3b01 	ldrb.w	r3, [r5], #1
 804e48e:	b10b      	cbz	r3, 804e494 <_vfiprintf_r+0x50>
 804e490:	2b25      	cmp	r3, #37	; 0x25
 804e492:	d154      	bne.n	804e53e <_vfiprintf_r+0xfa>
 804e494:	ebb8 0a07 	subs.w	sl, r8, r7
 804e498:	d00b      	beq.n	804e4b2 <_vfiprintf_r+0x6e>
 804e49a:	4653      	mov	r3, sl
 804e49c:	463a      	mov	r2, r7
 804e49e:	4621      	mov	r1, r4
 804e4a0:	4630      	mov	r0, r6
 804e4a2:	f7ff ffbc 	bl	804e41e <__sfputs_r>
 804e4a6:	3001      	adds	r0, #1
 804e4a8:	f000 80c2 	beq.w	804e630 <_vfiprintf_r+0x1ec>
 804e4ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804e4ae:	4453      	add	r3, sl
 804e4b0:	9309      	str	r3, [sp, #36]	; 0x24
 804e4b2:	f898 3000 	ldrb.w	r3, [r8]
 804e4b6:	2b00      	cmp	r3, #0
 804e4b8:	f000 80ba 	beq.w	804e630 <_vfiprintf_r+0x1ec>
 804e4bc:	2300      	movs	r3, #0
 804e4be:	f04f 32ff 	mov.w	r2, #4294967295
 804e4c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 804e4c6:	9304      	str	r3, [sp, #16]
 804e4c8:	9307      	str	r3, [sp, #28]
 804e4ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 804e4ce:	931a      	str	r3, [sp, #104]	; 0x68
 804e4d0:	46a8      	mov	r8, r5
 804e4d2:	2205      	movs	r2, #5
 804e4d4:	f818 1b01 	ldrb.w	r1, [r8], #1
 804e4d8:	485e      	ldr	r0, [pc, #376]	; (804e654 <_vfiprintf_r+0x210>)
 804e4da:	f7f1 ffb1 	bl	8040440 <memchr>
 804e4de:	9b04      	ldr	r3, [sp, #16]
 804e4e0:	bb78      	cbnz	r0, 804e542 <_vfiprintf_r+0xfe>
 804e4e2:	06d9      	lsls	r1, r3, #27
 804e4e4:	bf44      	itt	mi
 804e4e6:	2220      	movmi	r2, #32
 804e4e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 804e4ec:	071a      	lsls	r2, r3, #28
 804e4ee:	bf44      	itt	mi
 804e4f0:	222b      	movmi	r2, #43	; 0x2b
 804e4f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 804e4f6:	782a      	ldrb	r2, [r5, #0]
 804e4f8:	2a2a      	cmp	r2, #42	; 0x2a
 804e4fa:	d02a      	beq.n	804e552 <_vfiprintf_r+0x10e>
 804e4fc:	9a07      	ldr	r2, [sp, #28]
 804e4fe:	46a8      	mov	r8, r5
 804e500:	2000      	movs	r0, #0
 804e502:	250a      	movs	r5, #10
 804e504:	4641      	mov	r1, r8
 804e506:	f811 3b01 	ldrb.w	r3, [r1], #1
 804e50a:	3b30      	subs	r3, #48	; 0x30
 804e50c:	2b09      	cmp	r3, #9
 804e50e:	d969      	bls.n	804e5e4 <_vfiprintf_r+0x1a0>
 804e510:	b360      	cbz	r0, 804e56c <_vfiprintf_r+0x128>
 804e512:	e024      	b.n	804e55e <_vfiprintf_r+0x11a>
 804e514:	4b50      	ldr	r3, [pc, #320]	; (804e658 <_vfiprintf_r+0x214>)
 804e516:	429c      	cmp	r4, r3
 804e518:	d101      	bne.n	804e51e <_vfiprintf_r+0xda>
 804e51a:	68b4      	ldr	r4, [r6, #8]
 804e51c:	e7a2      	b.n	804e464 <_vfiprintf_r+0x20>
 804e51e:	4b4f      	ldr	r3, [pc, #316]	; (804e65c <_vfiprintf_r+0x218>)
 804e520:	429c      	cmp	r4, r3
 804e522:	bf08      	it	eq
 804e524:	68f4      	ldreq	r4, [r6, #12]
 804e526:	e79d      	b.n	804e464 <_vfiprintf_r+0x20>
 804e528:	4621      	mov	r1, r4
 804e52a:	4630      	mov	r0, r6
 804e52c:	f7ff fb12 	bl	804db54 <__swsetup_r>
 804e530:	2800      	cmp	r0, #0
 804e532:	d09d      	beq.n	804e470 <_vfiprintf_r+0x2c>
 804e534:	f04f 30ff 	mov.w	r0, #4294967295
 804e538:	b01d      	add	sp, #116	; 0x74
 804e53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804e53e:	46a8      	mov	r8, r5
 804e540:	e7a2      	b.n	804e488 <_vfiprintf_r+0x44>
 804e542:	4a44      	ldr	r2, [pc, #272]	; (804e654 <_vfiprintf_r+0x210>)
 804e544:	1a80      	subs	r0, r0, r2
 804e546:	fa0b f000 	lsl.w	r0, fp, r0
 804e54a:	4318      	orrs	r0, r3
 804e54c:	9004      	str	r0, [sp, #16]
 804e54e:	4645      	mov	r5, r8
 804e550:	e7be      	b.n	804e4d0 <_vfiprintf_r+0x8c>
 804e552:	9a03      	ldr	r2, [sp, #12]
 804e554:	1d11      	adds	r1, r2, #4
 804e556:	6812      	ldr	r2, [r2, #0]
 804e558:	9103      	str	r1, [sp, #12]
 804e55a:	2a00      	cmp	r2, #0
 804e55c:	db01      	blt.n	804e562 <_vfiprintf_r+0x11e>
 804e55e:	9207      	str	r2, [sp, #28]
 804e560:	e004      	b.n	804e56c <_vfiprintf_r+0x128>
 804e562:	4252      	negs	r2, r2
 804e564:	f043 0302 	orr.w	r3, r3, #2
 804e568:	9207      	str	r2, [sp, #28]
 804e56a:	9304      	str	r3, [sp, #16]
 804e56c:	f898 3000 	ldrb.w	r3, [r8]
 804e570:	2b2e      	cmp	r3, #46	; 0x2e
 804e572:	d10e      	bne.n	804e592 <_vfiprintf_r+0x14e>
 804e574:	f898 3001 	ldrb.w	r3, [r8, #1]
 804e578:	2b2a      	cmp	r3, #42	; 0x2a
 804e57a:	d138      	bne.n	804e5ee <_vfiprintf_r+0x1aa>
 804e57c:	9b03      	ldr	r3, [sp, #12]
 804e57e:	1d1a      	adds	r2, r3, #4
 804e580:	681b      	ldr	r3, [r3, #0]
 804e582:	9203      	str	r2, [sp, #12]
 804e584:	2b00      	cmp	r3, #0
 804e586:	bfb8      	it	lt
 804e588:	f04f 33ff 	movlt.w	r3, #4294967295
 804e58c:	f108 0802 	add.w	r8, r8, #2
 804e590:	9305      	str	r3, [sp, #20]
 804e592:	4d33      	ldr	r5, [pc, #204]	; (804e660 <_vfiprintf_r+0x21c>)
 804e594:	f898 1000 	ldrb.w	r1, [r8]
 804e598:	2203      	movs	r2, #3
 804e59a:	4628      	mov	r0, r5
 804e59c:	f7f1 ff50 	bl	8040440 <memchr>
 804e5a0:	b140      	cbz	r0, 804e5b4 <_vfiprintf_r+0x170>
 804e5a2:	2340      	movs	r3, #64	; 0x40
 804e5a4:	1b40      	subs	r0, r0, r5
 804e5a6:	fa03 f000 	lsl.w	r0, r3, r0
 804e5aa:	9b04      	ldr	r3, [sp, #16]
 804e5ac:	4303      	orrs	r3, r0
 804e5ae:	f108 0801 	add.w	r8, r8, #1
 804e5b2:	9304      	str	r3, [sp, #16]
 804e5b4:	f898 1000 	ldrb.w	r1, [r8]
 804e5b8:	482a      	ldr	r0, [pc, #168]	; (804e664 <_vfiprintf_r+0x220>)
 804e5ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 804e5be:	2206      	movs	r2, #6
 804e5c0:	f108 0701 	add.w	r7, r8, #1
 804e5c4:	f7f1 ff3c 	bl	8040440 <memchr>
 804e5c8:	2800      	cmp	r0, #0
 804e5ca:	d037      	beq.n	804e63c <_vfiprintf_r+0x1f8>
 804e5cc:	4b26      	ldr	r3, [pc, #152]	; (804e668 <_vfiprintf_r+0x224>)
 804e5ce:	bb1b      	cbnz	r3, 804e618 <_vfiprintf_r+0x1d4>
 804e5d0:	9b03      	ldr	r3, [sp, #12]
 804e5d2:	3307      	adds	r3, #7
 804e5d4:	f023 0307 	bic.w	r3, r3, #7
 804e5d8:	3308      	adds	r3, #8
 804e5da:	9303      	str	r3, [sp, #12]
 804e5dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804e5de:	444b      	add	r3, r9
 804e5e0:	9309      	str	r3, [sp, #36]	; 0x24
 804e5e2:	e750      	b.n	804e486 <_vfiprintf_r+0x42>
 804e5e4:	fb05 3202 	mla	r2, r5, r2, r3
 804e5e8:	2001      	movs	r0, #1
 804e5ea:	4688      	mov	r8, r1
 804e5ec:	e78a      	b.n	804e504 <_vfiprintf_r+0xc0>
 804e5ee:	2300      	movs	r3, #0
 804e5f0:	f108 0801 	add.w	r8, r8, #1
 804e5f4:	9305      	str	r3, [sp, #20]
 804e5f6:	4619      	mov	r1, r3
 804e5f8:	250a      	movs	r5, #10
 804e5fa:	4640      	mov	r0, r8
 804e5fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 804e600:	3a30      	subs	r2, #48	; 0x30
 804e602:	2a09      	cmp	r2, #9
 804e604:	d903      	bls.n	804e60e <_vfiprintf_r+0x1ca>
 804e606:	2b00      	cmp	r3, #0
 804e608:	d0c3      	beq.n	804e592 <_vfiprintf_r+0x14e>
 804e60a:	9105      	str	r1, [sp, #20]
 804e60c:	e7c1      	b.n	804e592 <_vfiprintf_r+0x14e>
 804e60e:	fb05 2101 	mla	r1, r5, r1, r2
 804e612:	2301      	movs	r3, #1
 804e614:	4680      	mov	r8, r0
 804e616:	e7f0      	b.n	804e5fa <_vfiprintf_r+0x1b6>
 804e618:	ab03      	add	r3, sp, #12
 804e61a:	9300      	str	r3, [sp, #0]
 804e61c:	4622      	mov	r2, r4
 804e61e:	4b13      	ldr	r3, [pc, #76]	; (804e66c <_vfiprintf_r+0x228>)
 804e620:	a904      	add	r1, sp, #16
 804e622:	4630      	mov	r0, r6
 804e624:	f3af 8000 	nop.w
 804e628:	f1b0 3fff 	cmp.w	r0, #4294967295
 804e62c:	4681      	mov	r9, r0
 804e62e:	d1d5      	bne.n	804e5dc <_vfiprintf_r+0x198>
 804e630:	89a3      	ldrh	r3, [r4, #12]
 804e632:	065b      	lsls	r3, r3, #25
 804e634:	f53f af7e 	bmi.w	804e534 <_vfiprintf_r+0xf0>
 804e638:	9809      	ldr	r0, [sp, #36]	; 0x24
 804e63a:	e77d      	b.n	804e538 <_vfiprintf_r+0xf4>
 804e63c:	ab03      	add	r3, sp, #12
 804e63e:	9300      	str	r3, [sp, #0]
 804e640:	4622      	mov	r2, r4
 804e642:	4b0a      	ldr	r3, [pc, #40]	; (804e66c <_vfiprintf_r+0x228>)
 804e644:	a904      	add	r1, sp, #16
 804e646:	4630      	mov	r0, r6
 804e648:	f000 f888 	bl	804e75c <_printf_i>
 804e64c:	e7ec      	b.n	804e628 <_vfiprintf_r+0x1e4>
 804e64e:	bf00      	nop
 804e650:	080500e4 	.word	0x080500e4
 804e654:	08050124 	.word	0x08050124
 804e658:	08050104 	.word	0x08050104
 804e65c:	080500c4 	.word	0x080500c4
 804e660:	0805012a 	.word	0x0805012a
 804e664:	0805012e 	.word	0x0805012e
 804e668:	00000000 	.word	0x00000000
 804e66c:	0804e41f 	.word	0x0804e41f

0804e670 <_printf_common>:
 804e670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804e674:	4691      	mov	r9, r2
 804e676:	461f      	mov	r7, r3
 804e678:	688a      	ldr	r2, [r1, #8]
 804e67a:	690b      	ldr	r3, [r1, #16]
 804e67c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 804e680:	4293      	cmp	r3, r2
 804e682:	bfb8      	it	lt
 804e684:	4613      	movlt	r3, r2
 804e686:	f8c9 3000 	str.w	r3, [r9]
 804e68a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 804e68e:	4606      	mov	r6, r0
 804e690:	460c      	mov	r4, r1
 804e692:	b112      	cbz	r2, 804e69a <_printf_common+0x2a>
 804e694:	3301      	adds	r3, #1
 804e696:	f8c9 3000 	str.w	r3, [r9]
 804e69a:	6823      	ldr	r3, [r4, #0]
 804e69c:	0699      	lsls	r1, r3, #26
 804e69e:	bf42      	ittt	mi
 804e6a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 804e6a4:	3302      	addmi	r3, #2
 804e6a6:	f8c9 3000 	strmi.w	r3, [r9]
 804e6aa:	6825      	ldr	r5, [r4, #0]
 804e6ac:	f015 0506 	ands.w	r5, r5, #6
 804e6b0:	d107      	bne.n	804e6c2 <_printf_common+0x52>
 804e6b2:	f104 0a19 	add.w	sl, r4, #25
 804e6b6:	68e3      	ldr	r3, [r4, #12]
 804e6b8:	f8d9 2000 	ldr.w	r2, [r9]
 804e6bc:	1a9b      	subs	r3, r3, r2
 804e6be:	42ab      	cmp	r3, r5
 804e6c0:	dc28      	bgt.n	804e714 <_printf_common+0xa4>
 804e6c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 804e6c6:	6822      	ldr	r2, [r4, #0]
 804e6c8:	3300      	adds	r3, #0
 804e6ca:	bf18      	it	ne
 804e6cc:	2301      	movne	r3, #1
 804e6ce:	0692      	lsls	r2, r2, #26
 804e6d0:	d42d      	bmi.n	804e72e <_printf_common+0xbe>
 804e6d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 804e6d6:	4639      	mov	r1, r7
 804e6d8:	4630      	mov	r0, r6
 804e6da:	47c0      	blx	r8
 804e6dc:	3001      	adds	r0, #1
 804e6de:	d020      	beq.n	804e722 <_printf_common+0xb2>
 804e6e0:	6823      	ldr	r3, [r4, #0]
 804e6e2:	68e5      	ldr	r5, [r4, #12]
 804e6e4:	f8d9 2000 	ldr.w	r2, [r9]
 804e6e8:	f003 0306 	and.w	r3, r3, #6
 804e6ec:	2b04      	cmp	r3, #4
 804e6ee:	bf08      	it	eq
 804e6f0:	1aad      	subeq	r5, r5, r2
 804e6f2:	68a3      	ldr	r3, [r4, #8]
 804e6f4:	6922      	ldr	r2, [r4, #16]
 804e6f6:	bf0c      	ite	eq
 804e6f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 804e6fc:	2500      	movne	r5, #0
 804e6fe:	4293      	cmp	r3, r2
 804e700:	bfc4      	itt	gt
 804e702:	1a9b      	subgt	r3, r3, r2
 804e704:	18ed      	addgt	r5, r5, r3
 804e706:	f04f 0900 	mov.w	r9, #0
 804e70a:	341a      	adds	r4, #26
 804e70c:	454d      	cmp	r5, r9
 804e70e:	d11a      	bne.n	804e746 <_printf_common+0xd6>
 804e710:	2000      	movs	r0, #0
 804e712:	e008      	b.n	804e726 <_printf_common+0xb6>
 804e714:	2301      	movs	r3, #1
 804e716:	4652      	mov	r2, sl
 804e718:	4639      	mov	r1, r7
 804e71a:	4630      	mov	r0, r6
 804e71c:	47c0      	blx	r8
 804e71e:	3001      	adds	r0, #1
 804e720:	d103      	bne.n	804e72a <_printf_common+0xba>
 804e722:	f04f 30ff 	mov.w	r0, #4294967295
 804e726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804e72a:	3501      	adds	r5, #1
 804e72c:	e7c3      	b.n	804e6b6 <_printf_common+0x46>
 804e72e:	18e1      	adds	r1, r4, r3
 804e730:	1c5a      	adds	r2, r3, #1
 804e732:	2030      	movs	r0, #48	; 0x30
 804e734:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 804e738:	4422      	add	r2, r4
 804e73a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 804e73e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 804e742:	3302      	adds	r3, #2
 804e744:	e7c5      	b.n	804e6d2 <_printf_common+0x62>
 804e746:	2301      	movs	r3, #1
 804e748:	4622      	mov	r2, r4
 804e74a:	4639      	mov	r1, r7
 804e74c:	4630      	mov	r0, r6
 804e74e:	47c0      	blx	r8
 804e750:	3001      	adds	r0, #1
 804e752:	d0e6      	beq.n	804e722 <_printf_common+0xb2>
 804e754:	f109 0901 	add.w	r9, r9, #1
 804e758:	e7d8      	b.n	804e70c <_printf_common+0x9c>
	...

0804e75c <_printf_i>:
 804e75c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 804e760:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 804e764:	460c      	mov	r4, r1
 804e766:	7e09      	ldrb	r1, [r1, #24]
 804e768:	b085      	sub	sp, #20
 804e76a:	296e      	cmp	r1, #110	; 0x6e
 804e76c:	4617      	mov	r7, r2
 804e76e:	4606      	mov	r6, r0
 804e770:	4698      	mov	r8, r3
 804e772:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 804e774:	f000 80b3 	beq.w	804e8de <_printf_i+0x182>
 804e778:	d822      	bhi.n	804e7c0 <_printf_i+0x64>
 804e77a:	2963      	cmp	r1, #99	; 0x63
 804e77c:	d036      	beq.n	804e7ec <_printf_i+0x90>
 804e77e:	d80a      	bhi.n	804e796 <_printf_i+0x3a>
 804e780:	2900      	cmp	r1, #0
 804e782:	f000 80b9 	beq.w	804e8f8 <_printf_i+0x19c>
 804e786:	2958      	cmp	r1, #88	; 0x58
 804e788:	f000 8083 	beq.w	804e892 <_printf_i+0x136>
 804e78c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 804e790:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 804e794:	e032      	b.n	804e7fc <_printf_i+0xa0>
 804e796:	2964      	cmp	r1, #100	; 0x64
 804e798:	d001      	beq.n	804e79e <_printf_i+0x42>
 804e79a:	2969      	cmp	r1, #105	; 0x69
 804e79c:	d1f6      	bne.n	804e78c <_printf_i+0x30>
 804e79e:	6820      	ldr	r0, [r4, #0]
 804e7a0:	6813      	ldr	r3, [r2, #0]
 804e7a2:	0605      	lsls	r5, r0, #24
 804e7a4:	f103 0104 	add.w	r1, r3, #4
 804e7a8:	d52a      	bpl.n	804e800 <_printf_i+0xa4>
 804e7aa:	681b      	ldr	r3, [r3, #0]
 804e7ac:	6011      	str	r1, [r2, #0]
 804e7ae:	2b00      	cmp	r3, #0
 804e7b0:	da03      	bge.n	804e7ba <_printf_i+0x5e>
 804e7b2:	222d      	movs	r2, #45	; 0x2d
 804e7b4:	425b      	negs	r3, r3
 804e7b6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 804e7ba:	486f      	ldr	r0, [pc, #444]	; (804e978 <_printf_i+0x21c>)
 804e7bc:	220a      	movs	r2, #10
 804e7be:	e039      	b.n	804e834 <_printf_i+0xd8>
 804e7c0:	2973      	cmp	r1, #115	; 0x73
 804e7c2:	f000 809d 	beq.w	804e900 <_printf_i+0x1a4>
 804e7c6:	d808      	bhi.n	804e7da <_printf_i+0x7e>
 804e7c8:	296f      	cmp	r1, #111	; 0x6f
 804e7ca:	d020      	beq.n	804e80e <_printf_i+0xb2>
 804e7cc:	2970      	cmp	r1, #112	; 0x70
 804e7ce:	d1dd      	bne.n	804e78c <_printf_i+0x30>
 804e7d0:	6823      	ldr	r3, [r4, #0]
 804e7d2:	f043 0320 	orr.w	r3, r3, #32
 804e7d6:	6023      	str	r3, [r4, #0]
 804e7d8:	e003      	b.n	804e7e2 <_printf_i+0x86>
 804e7da:	2975      	cmp	r1, #117	; 0x75
 804e7dc:	d017      	beq.n	804e80e <_printf_i+0xb2>
 804e7de:	2978      	cmp	r1, #120	; 0x78
 804e7e0:	d1d4      	bne.n	804e78c <_printf_i+0x30>
 804e7e2:	2378      	movs	r3, #120	; 0x78
 804e7e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 804e7e8:	4864      	ldr	r0, [pc, #400]	; (804e97c <_printf_i+0x220>)
 804e7ea:	e055      	b.n	804e898 <_printf_i+0x13c>
 804e7ec:	6813      	ldr	r3, [r2, #0]
 804e7ee:	1d19      	adds	r1, r3, #4
 804e7f0:	681b      	ldr	r3, [r3, #0]
 804e7f2:	6011      	str	r1, [r2, #0]
 804e7f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 804e7f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 804e7fc:	2301      	movs	r3, #1
 804e7fe:	e08c      	b.n	804e91a <_printf_i+0x1be>
 804e800:	681b      	ldr	r3, [r3, #0]
 804e802:	6011      	str	r1, [r2, #0]
 804e804:	f010 0f40 	tst.w	r0, #64	; 0x40
 804e808:	bf18      	it	ne
 804e80a:	b21b      	sxthne	r3, r3
 804e80c:	e7cf      	b.n	804e7ae <_printf_i+0x52>
 804e80e:	6813      	ldr	r3, [r2, #0]
 804e810:	6825      	ldr	r5, [r4, #0]
 804e812:	1d18      	adds	r0, r3, #4
 804e814:	6010      	str	r0, [r2, #0]
 804e816:	0628      	lsls	r0, r5, #24
 804e818:	d501      	bpl.n	804e81e <_printf_i+0xc2>
 804e81a:	681b      	ldr	r3, [r3, #0]
 804e81c:	e002      	b.n	804e824 <_printf_i+0xc8>
 804e81e:	0668      	lsls	r0, r5, #25
 804e820:	d5fb      	bpl.n	804e81a <_printf_i+0xbe>
 804e822:	881b      	ldrh	r3, [r3, #0]
 804e824:	4854      	ldr	r0, [pc, #336]	; (804e978 <_printf_i+0x21c>)
 804e826:	296f      	cmp	r1, #111	; 0x6f
 804e828:	bf14      	ite	ne
 804e82a:	220a      	movne	r2, #10
 804e82c:	2208      	moveq	r2, #8
 804e82e:	2100      	movs	r1, #0
 804e830:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 804e834:	6865      	ldr	r5, [r4, #4]
 804e836:	60a5      	str	r5, [r4, #8]
 804e838:	2d00      	cmp	r5, #0
 804e83a:	f2c0 8095 	blt.w	804e968 <_printf_i+0x20c>
 804e83e:	6821      	ldr	r1, [r4, #0]
 804e840:	f021 0104 	bic.w	r1, r1, #4
 804e844:	6021      	str	r1, [r4, #0]
 804e846:	2b00      	cmp	r3, #0
 804e848:	d13d      	bne.n	804e8c6 <_printf_i+0x16a>
 804e84a:	2d00      	cmp	r5, #0
 804e84c:	f040 808e 	bne.w	804e96c <_printf_i+0x210>
 804e850:	4665      	mov	r5, ip
 804e852:	2a08      	cmp	r2, #8
 804e854:	d10b      	bne.n	804e86e <_printf_i+0x112>
 804e856:	6823      	ldr	r3, [r4, #0]
 804e858:	07db      	lsls	r3, r3, #31
 804e85a:	d508      	bpl.n	804e86e <_printf_i+0x112>
 804e85c:	6923      	ldr	r3, [r4, #16]
 804e85e:	6862      	ldr	r2, [r4, #4]
 804e860:	429a      	cmp	r2, r3
 804e862:	bfde      	ittt	le
 804e864:	2330      	movle	r3, #48	; 0x30
 804e866:	f805 3c01 	strble.w	r3, [r5, #-1]
 804e86a:	f105 35ff 	addle.w	r5, r5, #4294967295
 804e86e:	ebac 0305 	sub.w	r3, ip, r5
 804e872:	6123      	str	r3, [r4, #16]
 804e874:	f8cd 8000 	str.w	r8, [sp]
 804e878:	463b      	mov	r3, r7
 804e87a:	aa03      	add	r2, sp, #12
 804e87c:	4621      	mov	r1, r4
 804e87e:	4630      	mov	r0, r6
 804e880:	f7ff fef6 	bl	804e670 <_printf_common>
 804e884:	3001      	adds	r0, #1
 804e886:	d14d      	bne.n	804e924 <_printf_i+0x1c8>
 804e888:	f04f 30ff 	mov.w	r0, #4294967295
 804e88c:	b005      	add	sp, #20
 804e88e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 804e892:	4839      	ldr	r0, [pc, #228]	; (804e978 <_printf_i+0x21c>)
 804e894:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 804e898:	6813      	ldr	r3, [r2, #0]
 804e89a:	6821      	ldr	r1, [r4, #0]
 804e89c:	1d1d      	adds	r5, r3, #4
 804e89e:	681b      	ldr	r3, [r3, #0]
 804e8a0:	6015      	str	r5, [r2, #0]
 804e8a2:	060a      	lsls	r2, r1, #24
 804e8a4:	d50b      	bpl.n	804e8be <_printf_i+0x162>
 804e8a6:	07ca      	lsls	r2, r1, #31
 804e8a8:	bf44      	itt	mi
 804e8aa:	f041 0120 	orrmi.w	r1, r1, #32
 804e8ae:	6021      	strmi	r1, [r4, #0]
 804e8b0:	b91b      	cbnz	r3, 804e8ba <_printf_i+0x15e>
 804e8b2:	6822      	ldr	r2, [r4, #0]
 804e8b4:	f022 0220 	bic.w	r2, r2, #32
 804e8b8:	6022      	str	r2, [r4, #0]
 804e8ba:	2210      	movs	r2, #16
 804e8bc:	e7b7      	b.n	804e82e <_printf_i+0xd2>
 804e8be:	064d      	lsls	r5, r1, #25
 804e8c0:	bf48      	it	mi
 804e8c2:	b29b      	uxthmi	r3, r3
 804e8c4:	e7ef      	b.n	804e8a6 <_printf_i+0x14a>
 804e8c6:	4665      	mov	r5, ip
 804e8c8:	fbb3 f1f2 	udiv	r1, r3, r2
 804e8cc:	fb02 3311 	mls	r3, r2, r1, r3
 804e8d0:	5cc3      	ldrb	r3, [r0, r3]
 804e8d2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 804e8d6:	460b      	mov	r3, r1
 804e8d8:	2900      	cmp	r1, #0
 804e8da:	d1f5      	bne.n	804e8c8 <_printf_i+0x16c>
 804e8dc:	e7b9      	b.n	804e852 <_printf_i+0xf6>
 804e8de:	6813      	ldr	r3, [r2, #0]
 804e8e0:	6825      	ldr	r5, [r4, #0]
 804e8e2:	6961      	ldr	r1, [r4, #20]
 804e8e4:	1d18      	adds	r0, r3, #4
 804e8e6:	6010      	str	r0, [r2, #0]
 804e8e8:	0628      	lsls	r0, r5, #24
 804e8ea:	681b      	ldr	r3, [r3, #0]
 804e8ec:	d501      	bpl.n	804e8f2 <_printf_i+0x196>
 804e8ee:	6019      	str	r1, [r3, #0]
 804e8f0:	e002      	b.n	804e8f8 <_printf_i+0x19c>
 804e8f2:	066a      	lsls	r2, r5, #25
 804e8f4:	d5fb      	bpl.n	804e8ee <_printf_i+0x192>
 804e8f6:	8019      	strh	r1, [r3, #0]
 804e8f8:	2300      	movs	r3, #0
 804e8fa:	6123      	str	r3, [r4, #16]
 804e8fc:	4665      	mov	r5, ip
 804e8fe:	e7b9      	b.n	804e874 <_printf_i+0x118>
 804e900:	6813      	ldr	r3, [r2, #0]
 804e902:	1d19      	adds	r1, r3, #4
 804e904:	6011      	str	r1, [r2, #0]
 804e906:	681d      	ldr	r5, [r3, #0]
 804e908:	6862      	ldr	r2, [r4, #4]
 804e90a:	2100      	movs	r1, #0
 804e90c:	4628      	mov	r0, r5
 804e90e:	f7f1 fd97 	bl	8040440 <memchr>
 804e912:	b108      	cbz	r0, 804e918 <_printf_i+0x1bc>
 804e914:	1b40      	subs	r0, r0, r5
 804e916:	6060      	str	r0, [r4, #4]
 804e918:	6863      	ldr	r3, [r4, #4]
 804e91a:	6123      	str	r3, [r4, #16]
 804e91c:	2300      	movs	r3, #0
 804e91e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 804e922:	e7a7      	b.n	804e874 <_printf_i+0x118>
 804e924:	6923      	ldr	r3, [r4, #16]
 804e926:	462a      	mov	r2, r5
 804e928:	4639      	mov	r1, r7
 804e92a:	4630      	mov	r0, r6
 804e92c:	47c0      	blx	r8
 804e92e:	3001      	adds	r0, #1
 804e930:	d0aa      	beq.n	804e888 <_printf_i+0x12c>
 804e932:	6823      	ldr	r3, [r4, #0]
 804e934:	079b      	lsls	r3, r3, #30
 804e936:	d413      	bmi.n	804e960 <_printf_i+0x204>
 804e938:	68e0      	ldr	r0, [r4, #12]
 804e93a:	9b03      	ldr	r3, [sp, #12]
 804e93c:	4298      	cmp	r0, r3
 804e93e:	bfb8      	it	lt
 804e940:	4618      	movlt	r0, r3
 804e942:	e7a3      	b.n	804e88c <_printf_i+0x130>
 804e944:	2301      	movs	r3, #1
 804e946:	464a      	mov	r2, r9
 804e948:	4639      	mov	r1, r7
 804e94a:	4630      	mov	r0, r6
 804e94c:	47c0      	blx	r8
 804e94e:	3001      	adds	r0, #1
 804e950:	d09a      	beq.n	804e888 <_printf_i+0x12c>
 804e952:	3501      	adds	r5, #1
 804e954:	68e3      	ldr	r3, [r4, #12]
 804e956:	9a03      	ldr	r2, [sp, #12]
 804e958:	1a9b      	subs	r3, r3, r2
 804e95a:	42ab      	cmp	r3, r5
 804e95c:	dcf2      	bgt.n	804e944 <_printf_i+0x1e8>
 804e95e:	e7eb      	b.n	804e938 <_printf_i+0x1dc>
 804e960:	2500      	movs	r5, #0
 804e962:	f104 0919 	add.w	r9, r4, #25
 804e966:	e7f5      	b.n	804e954 <_printf_i+0x1f8>
 804e968:	2b00      	cmp	r3, #0
 804e96a:	d1ac      	bne.n	804e8c6 <_printf_i+0x16a>
 804e96c:	7803      	ldrb	r3, [r0, #0]
 804e96e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 804e972:	f104 0542 	add.w	r5, r4, #66	; 0x42
 804e976:	e76c      	b.n	804e852 <_printf_i+0xf6>
 804e978:	08050135 	.word	0x08050135
 804e97c:	08050146 	.word	0x08050146

0804e980 <_sbrk_r>:
 804e980:	b538      	push	{r3, r4, r5, lr}
 804e982:	4c06      	ldr	r4, [pc, #24]	; (804e99c <_sbrk_r+0x1c>)
 804e984:	2300      	movs	r3, #0
 804e986:	4605      	mov	r5, r0
 804e988:	4608      	mov	r0, r1
 804e98a:	6023      	str	r3, [r4, #0]
 804e98c:	f000 fa76 	bl	804ee7c <_sbrk>
 804e990:	1c43      	adds	r3, r0, #1
 804e992:	d102      	bne.n	804e99a <_sbrk_r+0x1a>
 804e994:	6823      	ldr	r3, [r4, #0]
 804e996:	b103      	cbz	r3, 804e99a <_sbrk_r+0x1a>
 804e998:	602b      	str	r3, [r5, #0]
 804e99a:	bd38      	pop	{r3, r4, r5, pc}
 804e99c:	20015024 	.word	0x20015024

0804e9a0 <__sread>:
 804e9a0:	b510      	push	{r4, lr}
 804e9a2:	460c      	mov	r4, r1
 804e9a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804e9a8:	f000 f8d6 	bl	804eb58 <_read_r>
 804e9ac:	2800      	cmp	r0, #0
 804e9ae:	bfab      	itete	ge
 804e9b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 804e9b2:	89a3      	ldrhlt	r3, [r4, #12]
 804e9b4:	181b      	addge	r3, r3, r0
 804e9b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 804e9ba:	bfac      	ite	ge
 804e9bc:	6563      	strge	r3, [r4, #84]	; 0x54
 804e9be:	81a3      	strhlt	r3, [r4, #12]
 804e9c0:	bd10      	pop	{r4, pc}

0804e9c2 <__swrite>:
 804e9c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804e9c6:	461f      	mov	r7, r3
 804e9c8:	898b      	ldrh	r3, [r1, #12]
 804e9ca:	05db      	lsls	r3, r3, #23
 804e9cc:	4605      	mov	r5, r0
 804e9ce:	460c      	mov	r4, r1
 804e9d0:	4616      	mov	r6, r2
 804e9d2:	d505      	bpl.n	804e9e0 <__swrite+0x1e>
 804e9d4:	2302      	movs	r3, #2
 804e9d6:	2200      	movs	r2, #0
 804e9d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804e9dc:	f000 f868 	bl	804eab0 <_lseek_r>
 804e9e0:	89a3      	ldrh	r3, [r4, #12]
 804e9e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 804e9e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 804e9ea:	81a3      	strh	r3, [r4, #12]
 804e9ec:	4632      	mov	r2, r6
 804e9ee:	463b      	mov	r3, r7
 804e9f0:	4628      	mov	r0, r5
 804e9f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 804e9f6:	f000 b817 	b.w	804ea28 <_write_r>

0804e9fa <__sseek>:
 804e9fa:	b510      	push	{r4, lr}
 804e9fc:	460c      	mov	r4, r1
 804e9fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804ea02:	f000 f855 	bl	804eab0 <_lseek_r>
 804ea06:	1c43      	adds	r3, r0, #1
 804ea08:	89a3      	ldrh	r3, [r4, #12]
 804ea0a:	bf15      	itete	ne
 804ea0c:	6560      	strne	r0, [r4, #84]	; 0x54
 804ea0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 804ea12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 804ea16:	81a3      	strheq	r3, [r4, #12]
 804ea18:	bf18      	it	ne
 804ea1a:	81a3      	strhne	r3, [r4, #12]
 804ea1c:	bd10      	pop	{r4, pc}

0804ea1e <__sclose>:
 804ea1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804ea22:	f000 b813 	b.w	804ea4c <_close_r>
	...

0804ea28 <_write_r>:
 804ea28:	b538      	push	{r3, r4, r5, lr}
 804ea2a:	4c07      	ldr	r4, [pc, #28]	; (804ea48 <_write_r+0x20>)
 804ea2c:	4605      	mov	r5, r0
 804ea2e:	4608      	mov	r0, r1
 804ea30:	4611      	mov	r1, r2
 804ea32:	2200      	movs	r2, #0
 804ea34:	6022      	str	r2, [r4, #0]
 804ea36:	461a      	mov	r2, r3
 804ea38:	f000 fa2e 	bl	804ee98 <_write>
 804ea3c:	1c43      	adds	r3, r0, #1
 804ea3e:	d102      	bne.n	804ea46 <_write_r+0x1e>
 804ea40:	6823      	ldr	r3, [r4, #0]
 804ea42:	b103      	cbz	r3, 804ea46 <_write_r+0x1e>
 804ea44:	602b      	str	r3, [r5, #0]
 804ea46:	bd38      	pop	{r3, r4, r5, pc}
 804ea48:	20015024 	.word	0x20015024

0804ea4c <_close_r>:
 804ea4c:	b538      	push	{r3, r4, r5, lr}
 804ea4e:	4c06      	ldr	r4, [pc, #24]	; (804ea68 <_close_r+0x1c>)
 804ea50:	2300      	movs	r3, #0
 804ea52:	4605      	mov	r5, r0
 804ea54:	4608      	mov	r0, r1
 804ea56:	6023      	str	r3, [r4, #0]
 804ea58:	f000 f9e8 	bl	804ee2c <_close>
 804ea5c:	1c43      	adds	r3, r0, #1
 804ea5e:	d102      	bne.n	804ea66 <_close_r+0x1a>
 804ea60:	6823      	ldr	r3, [r4, #0]
 804ea62:	b103      	cbz	r3, 804ea66 <_close_r+0x1a>
 804ea64:	602b      	str	r3, [r5, #0]
 804ea66:	bd38      	pop	{r3, r4, r5, pc}
 804ea68:	20015024 	.word	0x20015024

0804ea6c <_fstat_r>:
 804ea6c:	b538      	push	{r3, r4, r5, lr}
 804ea6e:	4c07      	ldr	r4, [pc, #28]	; (804ea8c <_fstat_r+0x20>)
 804ea70:	2300      	movs	r3, #0
 804ea72:	4605      	mov	r5, r0
 804ea74:	4608      	mov	r0, r1
 804ea76:	4611      	mov	r1, r2
 804ea78:	6023      	str	r3, [r4, #0]
 804ea7a:	f000 f9df 	bl	804ee3c <_fstat>
 804ea7e:	1c43      	adds	r3, r0, #1
 804ea80:	d102      	bne.n	804ea88 <_fstat_r+0x1c>
 804ea82:	6823      	ldr	r3, [r4, #0]
 804ea84:	b103      	cbz	r3, 804ea88 <_fstat_r+0x1c>
 804ea86:	602b      	str	r3, [r5, #0]
 804ea88:	bd38      	pop	{r3, r4, r5, pc}
 804ea8a:	bf00      	nop
 804ea8c:	20015024 	.word	0x20015024

0804ea90 <_isatty_r>:
 804ea90:	b538      	push	{r3, r4, r5, lr}
 804ea92:	4c06      	ldr	r4, [pc, #24]	; (804eaac <_isatty_r+0x1c>)
 804ea94:	2300      	movs	r3, #0
 804ea96:	4605      	mov	r5, r0
 804ea98:	4608      	mov	r0, r1
 804ea9a:	6023      	str	r3, [r4, #0]
 804ea9c:	f000 f9d6 	bl	804ee4c <_isatty>
 804eaa0:	1c43      	adds	r3, r0, #1
 804eaa2:	d102      	bne.n	804eaaa <_isatty_r+0x1a>
 804eaa4:	6823      	ldr	r3, [r4, #0]
 804eaa6:	b103      	cbz	r3, 804eaaa <_isatty_r+0x1a>
 804eaa8:	602b      	str	r3, [r5, #0]
 804eaaa:	bd38      	pop	{r3, r4, r5, pc}
 804eaac:	20015024 	.word	0x20015024

0804eab0 <_lseek_r>:
 804eab0:	b538      	push	{r3, r4, r5, lr}
 804eab2:	4c07      	ldr	r4, [pc, #28]	; (804ead0 <_lseek_r+0x20>)
 804eab4:	4605      	mov	r5, r0
 804eab6:	4608      	mov	r0, r1
 804eab8:	4611      	mov	r1, r2
 804eaba:	2200      	movs	r2, #0
 804eabc:	6022      	str	r2, [r4, #0]
 804eabe:	461a      	mov	r2, r3
 804eac0:	f000 f9cc 	bl	804ee5c <_lseek>
 804eac4:	1c43      	adds	r3, r0, #1
 804eac6:	d102      	bne.n	804eace <_lseek_r+0x1e>
 804eac8:	6823      	ldr	r3, [r4, #0]
 804eaca:	b103      	cbz	r3, 804eace <_lseek_r+0x1e>
 804eacc:	602b      	str	r3, [r5, #0]
 804eace:	bd38      	pop	{r3, r4, r5, pc}
 804ead0:	20015024 	.word	0x20015024

0804ead4 <memmove>:
 804ead4:	4288      	cmp	r0, r1
 804ead6:	b510      	push	{r4, lr}
 804ead8:	eb01 0302 	add.w	r3, r1, r2
 804eadc:	d807      	bhi.n	804eaee <memmove+0x1a>
 804eade:	1e42      	subs	r2, r0, #1
 804eae0:	4299      	cmp	r1, r3
 804eae2:	d00a      	beq.n	804eafa <memmove+0x26>
 804eae4:	f811 4b01 	ldrb.w	r4, [r1], #1
 804eae8:	f802 4f01 	strb.w	r4, [r2, #1]!
 804eaec:	e7f8      	b.n	804eae0 <memmove+0xc>
 804eaee:	4283      	cmp	r3, r0
 804eaf0:	d9f5      	bls.n	804eade <memmove+0xa>
 804eaf2:	1881      	adds	r1, r0, r2
 804eaf4:	1ad2      	subs	r2, r2, r3
 804eaf6:	42d3      	cmn	r3, r2
 804eaf8:	d100      	bne.n	804eafc <memmove+0x28>
 804eafa:	bd10      	pop	{r4, pc}
 804eafc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 804eb00:	f801 4d01 	strb.w	r4, [r1, #-1]!
 804eb04:	e7f7      	b.n	804eaf6 <memmove+0x22>

0804eb06 <__malloc_lock>:
 804eb06:	4770      	bx	lr

0804eb08 <__malloc_unlock>:
 804eb08:	4770      	bx	lr

0804eb0a <_realloc_r>:
 804eb0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804eb0c:	4607      	mov	r7, r0
 804eb0e:	4614      	mov	r4, r2
 804eb10:	460e      	mov	r6, r1
 804eb12:	b921      	cbnz	r1, 804eb1e <_realloc_r+0x14>
 804eb14:	4611      	mov	r1, r2
 804eb16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 804eb1a:	f7ff babd 	b.w	804e098 <_malloc_r>
 804eb1e:	b922      	cbnz	r2, 804eb2a <_realloc_r+0x20>
 804eb20:	f7ff fa6c 	bl	804dffc <_free_r>
 804eb24:	4625      	mov	r5, r4
 804eb26:	4628      	mov	r0, r5
 804eb28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804eb2a:	f000 f827 	bl	804eb7c <_malloc_usable_size_r>
 804eb2e:	42a0      	cmp	r0, r4
 804eb30:	d20f      	bcs.n	804eb52 <_realloc_r+0x48>
 804eb32:	4621      	mov	r1, r4
 804eb34:	4638      	mov	r0, r7
 804eb36:	f7ff faaf 	bl	804e098 <_malloc_r>
 804eb3a:	4605      	mov	r5, r0
 804eb3c:	2800      	cmp	r0, #0
 804eb3e:	d0f2      	beq.n	804eb26 <_realloc_r+0x1c>
 804eb40:	4631      	mov	r1, r6
 804eb42:	4622      	mov	r2, r4
 804eb44:	f7fe fe3d 	bl	804d7c2 <memcpy>
 804eb48:	4631      	mov	r1, r6
 804eb4a:	4638      	mov	r0, r7
 804eb4c:	f7ff fa56 	bl	804dffc <_free_r>
 804eb50:	e7e9      	b.n	804eb26 <_realloc_r+0x1c>
 804eb52:	4635      	mov	r5, r6
 804eb54:	e7e7      	b.n	804eb26 <_realloc_r+0x1c>
	...

0804eb58 <_read_r>:
 804eb58:	b538      	push	{r3, r4, r5, lr}
 804eb5a:	4c07      	ldr	r4, [pc, #28]	; (804eb78 <_read_r+0x20>)
 804eb5c:	4605      	mov	r5, r0
 804eb5e:	4608      	mov	r0, r1
 804eb60:	4611      	mov	r1, r2
 804eb62:	2200      	movs	r2, #0
 804eb64:	6022      	str	r2, [r4, #0]
 804eb66:	461a      	mov	r2, r3
 804eb68:	f000 f980 	bl	804ee6c <_read>
 804eb6c:	1c43      	adds	r3, r0, #1
 804eb6e:	d102      	bne.n	804eb76 <_read_r+0x1e>
 804eb70:	6823      	ldr	r3, [r4, #0]
 804eb72:	b103      	cbz	r3, 804eb76 <_read_r+0x1e>
 804eb74:	602b      	str	r3, [r5, #0]
 804eb76:	bd38      	pop	{r3, r4, r5, pc}
 804eb78:	20015024 	.word	0x20015024

0804eb7c <_malloc_usable_size_r>:
 804eb7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 804eb80:	1f18      	subs	r0, r3, #4
 804eb82:	2b00      	cmp	r3, #0
 804eb84:	bfbc      	itt	lt
 804eb86:	580b      	ldrlt	r3, [r1, r0]
 804eb88:	18c0      	addlt	r0, r0, r3
 804eb8a:	4770      	bx	lr
 804eb8c:	0000      	movs	r0, r0
	...

0804eb90 <ceil>:
 804eb90:	ec51 0b10 	vmov	r0, r1, d0
 804eb94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804eb98:	f3c1 570a 	ubfx	r7, r1, #20, #11
 804eb9c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 804eba0:	2e13      	cmp	r6, #19
 804eba2:	460c      	mov	r4, r1
 804eba4:	ee10 5a10 	vmov	r5, s0
 804eba8:	4680      	mov	r8, r0
 804ebaa:	dc30      	bgt.n	804ec0e <ceil+0x7e>
 804ebac:	2e00      	cmp	r6, #0
 804ebae:	da12      	bge.n	804ebd6 <ceil+0x46>
 804ebb0:	a333      	add	r3, pc, #204	; (adr r3, 804ec80 <ceil+0xf0>)
 804ebb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 804ebb6:	f7f1 fc99 	bl	80404ec <__adddf3>
 804ebba:	2200      	movs	r2, #0
 804ebbc:	2300      	movs	r3, #0
 804ebbe:	f7f2 f8db 	bl	8040d78 <__aeabi_dcmpgt>
 804ebc2:	b128      	cbz	r0, 804ebd0 <ceil+0x40>
 804ebc4:	2c00      	cmp	r4, #0
 804ebc6:	db55      	blt.n	804ec74 <ceil+0xe4>
 804ebc8:	432c      	orrs	r4, r5
 804ebca:	d057      	beq.n	804ec7c <ceil+0xec>
 804ebcc:	4c2e      	ldr	r4, [pc, #184]	; (804ec88 <ceil+0xf8>)
 804ebce:	2500      	movs	r5, #0
 804ebd0:	4621      	mov	r1, r4
 804ebd2:	4628      	mov	r0, r5
 804ebd4:	e025      	b.n	804ec22 <ceil+0x92>
 804ebd6:	4f2d      	ldr	r7, [pc, #180]	; (804ec8c <ceil+0xfc>)
 804ebd8:	4137      	asrs	r7, r6
 804ebda:	ea01 0307 	and.w	r3, r1, r7
 804ebde:	4303      	orrs	r3, r0
 804ebe0:	d01f      	beq.n	804ec22 <ceil+0x92>
 804ebe2:	a327      	add	r3, pc, #156	; (adr r3, 804ec80 <ceil+0xf0>)
 804ebe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 804ebe8:	f7f1 fc80 	bl	80404ec <__adddf3>
 804ebec:	2200      	movs	r2, #0
 804ebee:	2300      	movs	r3, #0
 804ebf0:	f7f2 f8c2 	bl	8040d78 <__aeabi_dcmpgt>
 804ebf4:	2800      	cmp	r0, #0
 804ebf6:	d0eb      	beq.n	804ebd0 <ceil+0x40>
 804ebf8:	2c00      	cmp	r4, #0
 804ebfa:	bfc2      	ittt	gt
 804ebfc:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 804ec00:	fa43 f606 	asrgt.w	r6, r3, r6
 804ec04:	19a4      	addgt	r4, r4, r6
 804ec06:	ea24 0407 	bic.w	r4, r4, r7
 804ec0a:	2500      	movs	r5, #0
 804ec0c:	e7e0      	b.n	804ebd0 <ceil+0x40>
 804ec0e:	2e33      	cmp	r6, #51	; 0x33
 804ec10:	dd0b      	ble.n	804ec2a <ceil+0x9a>
 804ec12:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 804ec16:	d104      	bne.n	804ec22 <ceil+0x92>
 804ec18:	ee10 2a10 	vmov	r2, s0
 804ec1c:	460b      	mov	r3, r1
 804ec1e:	f7f1 fc65 	bl	80404ec <__adddf3>
 804ec22:	ec41 0b10 	vmov	d0, r0, r1
 804ec26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804ec2a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 804ec2e:	f04f 33ff 	mov.w	r3, #4294967295
 804ec32:	fa23 f707 	lsr.w	r7, r3, r7
 804ec36:	4207      	tst	r7, r0
 804ec38:	d0f3      	beq.n	804ec22 <ceil+0x92>
 804ec3a:	a311      	add	r3, pc, #68	; (adr r3, 804ec80 <ceil+0xf0>)
 804ec3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 804ec40:	f7f1 fc54 	bl	80404ec <__adddf3>
 804ec44:	2200      	movs	r2, #0
 804ec46:	2300      	movs	r3, #0
 804ec48:	f7f2 f896 	bl	8040d78 <__aeabi_dcmpgt>
 804ec4c:	2800      	cmp	r0, #0
 804ec4e:	d0bf      	beq.n	804ebd0 <ceil+0x40>
 804ec50:	2c00      	cmp	r4, #0
 804ec52:	dd02      	ble.n	804ec5a <ceil+0xca>
 804ec54:	2e14      	cmp	r6, #20
 804ec56:	d103      	bne.n	804ec60 <ceil+0xd0>
 804ec58:	3401      	adds	r4, #1
 804ec5a:	ea25 0507 	bic.w	r5, r5, r7
 804ec5e:	e7b7      	b.n	804ebd0 <ceil+0x40>
 804ec60:	2301      	movs	r3, #1
 804ec62:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 804ec66:	fa03 f606 	lsl.w	r6, r3, r6
 804ec6a:	4435      	add	r5, r6
 804ec6c:	4545      	cmp	r5, r8
 804ec6e:	bf38      	it	cc
 804ec70:	18e4      	addcc	r4, r4, r3
 804ec72:	e7f2      	b.n	804ec5a <ceil+0xca>
 804ec74:	2500      	movs	r5, #0
 804ec76:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 804ec7a:	e7a9      	b.n	804ebd0 <ceil+0x40>
 804ec7c:	4625      	mov	r5, r4
 804ec7e:	e7a7      	b.n	804ebd0 <ceil+0x40>
 804ec80:	8800759c 	.word	0x8800759c
 804ec84:	7e37e43c 	.word	0x7e37e43c
 804ec88:	3ff00000 	.word	0x3ff00000
 804ec8c:	000fffff 	.word	0x000fffff

0804ec90 <floor>:
 804ec90:	ec51 0b10 	vmov	r0, r1, d0
 804ec94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804ec98:	f3c1 570a 	ubfx	r7, r1, #20, #11
 804ec9c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 804eca0:	2e13      	cmp	r6, #19
 804eca2:	460c      	mov	r4, r1
 804eca4:	ee10 5a10 	vmov	r5, s0
 804eca8:	4680      	mov	r8, r0
 804ecaa:	dc34      	bgt.n	804ed16 <floor+0x86>
 804ecac:	2e00      	cmp	r6, #0
 804ecae:	da16      	bge.n	804ecde <floor+0x4e>
 804ecb0:	a335      	add	r3, pc, #212	; (adr r3, 804ed88 <floor+0xf8>)
 804ecb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 804ecb6:	f7f1 fc19 	bl	80404ec <__adddf3>
 804ecba:	2200      	movs	r2, #0
 804ecbc:	2300      	movs	r3, #0
 804ecbe:	f7f2 f85b 	bl	8040d78 <__aeabi_dcmpgt>
 804ecc2:	b148      	cbz	r0, 804ecd8 <floor+0x48>
 804ecc4:	2c00      	cmp	r4, #0
 804ecc6:	da59      	bge.n	804ed7c <floor+0xec>
 804ecc8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 804eccc:	4a30      	ldr	r2, [pc, #192]	; (804ed90 <floor+0x100>)
 804ecce:	432b      	orrs	r3, r5
 804ecd0:	2500      	movs	r5, #0
 804ecd2:	42ab      	cmp	r3, r5
 804ecd4:	bf18      	it	ne
 804ecd6:	4614      	movne	r4, r2
 804ecd8:	4621      	mov	r1, r4
 804ecda:	4628      	mov	r0, r5
 804ecdc:	e025      	b.n	804ed2a <floor+0x9a>
 804ecde:	4f2d      	ldr	r7, [pc, #180]	; (804ed94 <floor+0x104>)
 804ece0:	4137      	asrs	r7, r6
 804ece2:	ea01 0307 	and.w	r3, r1, r7
 804ece6:	4303      	orrs	r3, r0
 804ece8:	d01f      	beq.n	804ed2a <floor+0x9a>
 804ecea:	a327      	add	r3, pc, #156	; (adr r3, 804ed88 <floor+0xf8>)
 804ecec:	e9d3 2300 	ldrd	r2, r3, [r3]
 804ecf0:	f7f1 fbfc 	bl	80404ec <__adddf3>
 804ecf4:	2200      	movs	r2, #0
 804ecf6:	2300      	movs	r3, #0
 804ecf8:	f7f2 f83e 	bl	8040d78 <__aeabi_dcmpgt>
 804ecfc:	2800      	cmp	r0, #0
 804ecfe:	d0eb      	beq.n	804ecd8 <floor+0x48>
 804ed00:	2c00      	cmp	r4, #0
 804ed02:	bfbe      	ittt	lt
 804ed04:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 804ed08:	fa43 f606 	asrlt.w	r6, r3, r6
 804ed0c:	19a4      	addlt	r4, r4, r6
 804ed0e:	ea24 0407 	bic.w	r4, r4, r7
 804ed12:	2500      	movs	r5, #0
 804ed14:	e7e0      	b.n	804ecd8 <floor+0x48>
 804ed16:	2e33      	cmp	r6, #51	; 0x33
 804ed18:	dd0b      	ble.n	804ed32 <floor+0xa2>
 804ed1a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 804ed1e:	d104      	bne.n	804ed2a <floor+0x9a>
 804ed20:	ee10 2a10 	vmov	r2, s0
 804ed24:	460b      	mov	r3, r1
 804ed26:	f7f1 fbe1 	bl	80404ec <__adddf3>
 804ed2a:	ec41 0b10 	vmov	d0, r0, r1
 804ed2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804ed32:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 804ed36:	f04f 33ff 	mov.w	r3, #4294967295
 804ed3a:	fa23 f707 	lsr.w	r7, r3, r7
 804ed3e:	4207      	tst	r7, r0
 804ed40:	d0f3      	beq.n	804ed2a <floor+0x9a>
 804ed42:	a311      	add	r3, pc, #68	; (adr r3, 804ed88 <floor+0xf8>)
 804ed44:	e9d3 2300 	ldrd	r2, r3, [r3]
 804ed48:	f7f1 fbd0 	bl	80404ec <__adddf3>
 804ed4c:	2200      	movs	r2, #0
 804ed4e:	2300      	movs	r3, #0
 804ed50:	f7f2 f812 	bl	8040d78 <__aeabi_dcmpgt>
 804ed54:	2800      	cmp	r0, #0
 804ed56:	d0bf      	beq.n	804ecd8 <floor+0x48>
 804ed58:	2c00      	cmp	r4, #0
 804ed5a:	da02      	bge.n	804ed62 <floor+0xd2>
 804ed5c:	2e14      	cmp	r6, #20
 804ed5e:	d103      	bne.n	804ed68 <floor+0xd8>
 804ed60:	3401      	adds	r4, #1
 804ed62:	ea25 0507 	bic.w	r5, r5, r7
 804ed66:	e7b7      	b.n	804ecd8 <floor+0x48>
 804ed68:	2301      	movs	r3, #1
 804ed6a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 804ed6e:	fa03 f606 	lsl.w	r6, r3, r6
 804ed72:	4435      	add	r5, r6
 804ed74:	4545      	cmp	r5, r8
 804ed76:	bf38      	it	cc
 804ed78:	18e4      	addcc	r4, r4, r3
 804ed7a:	e7f2      	b.n	804ed62 <floor+0xd2>
 804ed7c:	2500      	movs	r5, #0
 804ed7e:	462c      	mov	r4, r5
 804ed80:	e7aa      	b.n	804ecd8 <floor+0x48>
 804ed82:	bf00      	nop
 804ed84:	f3af 8000 	nop.w
 804ed88:	8800759c 	.word	0x8800759c
 804ed8c:	7e37e43c 	.word	0x7e37e43c
 804ed90:	bff00000 	.word	0xbff00000
 804ed94:	000fffff 	.word	0x000fffff

0804ed98 <round>:
 804ed98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804ed9a:	ec57 6b10 	vmov	r6, r7, d0
 804ed9e:	f3c7 500a 	ubfx	r0, r7, #20, #11
 804eda2:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 804eda6:	2c13      	cmp	r4, #19
 804eda8:	463b      	mov	r3, r7
 804edaa:	463d      	mov	r5, r7
 804edac:	dc17      	bgt.n	804edde <round+0x46>
 804edae:	2c00      	cmp	r4, #0
 804edb0:	da09      	bge.n	804edc6 <round+0x2e>
 804edb2:	3401      	adds	r4, #1
 804edb4:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 804edb8:	d103      	bne.n	804edc2 <round+0x2a>
 804edba:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 804edbe:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 804edc2:	2100      	movs	r1, #0
 804edc4:	e02c      	b.n	804ee20 <round+0x88>
 804edc6:	4a18      	ldr	r2, [pc, #96]	; (804ee28 <round+0x90>)
 804edc8:	4122      	asrs	r2, r4
 804edca:	4217      	tst	r7, r2
 804edcc:	d100      	bne.n	804edd0 <round+0x38>
 804edce:	b19e      	cbz	r6, 804edf8 <round+0x60>
 804edd0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 804edd4:	4123      	asrs	r3, r4
 804edd6:	442b      	add	r3, r5
 804edd8:	ea23 0302 	bic.w	r3, r3, r2
 804eddc:	e7f1      	b.n	804edc2 <round+0x2a>
 804edde:	2c33      	cmp	r4, #51	; 0x33
 804ede0:	dd0d      	ble.n	804edfe <round+0x66>
 804ede2:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 804ede6:	d107      	bne.n	804edf8 <round+0x60>
 804ede8:	4630      	mov	r0, r6
 804edea:	4639      	mov	r1, r7
 804edec:	ee10 2a10 	vmov	r2, s0
 804edf0:	f7f1 fb7c 	bl	80404ec <__adddf3>
 804edf4:	4606      	mov	r6, r0
 804edf6:	460f      	mov	r7, r1
 804edf8:	ec47 6b10 	vmov	d0, r6, r7
 804edfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804edfe:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 804ee02:	f04f 30ff 	mov.w	r0, #4294967295
 804ee06:	40d0      	lsrs	r0, r2
 804ee08:	4206      	tst	r6, r0
 804ee0a:	d0f5      	beq.n	804edf8 <round+0x60>
 804ee0c:	2201      	movs	r2, #1
 804ee0e:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 804ee12:	fa02 f404 	lsl.w	r4, r2, r4
 804ee16:	1931      	adds	r1, r6, r4
 804ee18:	bf28      	it	cs
 804ee1a:	189b      	addcs	r3, r3, r2
 804ee1c:	ea21 0100 	bic.w	r1, r1, r0
 804ee20:	461f      	mov	r7, r3
 804ee22:	460e      	mov	r6, r1
 804ee24:	e7e8      	b.n	804edf8 <round+0x60>
 804ee26:	bf00      	nop
 804ee28:	000fffff 	.word	0x000fffff

0804ee2c <_close>:
 804ee2c:	4b02      	ldr	r3, [pc, #8]	; (804ee38 <_close+0xc>)
 804ee2e:	2258      	movs	r2, #88	; 0x58
 804ee30:	601a      	str	r2, [r3, #0]
 804ee32:	f04f 30ff 	mov.w	r0, #4294967295
 804ee36:	4770      	bx	lr
 804ee38:	20015024 	.word	0x20015024

0804ee3c <_fstat>:
 804ee3c:	4b02      	ldr	r3, [pc, #8]	; (804ee48 <_fstat+0xc>)
 804ee3e:	2258      	movs	r2, #88	; 0x58
 804ee40:	601a      	str	r2, [r3, #0]
 804ee42:	f04f 30ff 	mov.w	r0, #4294967295
 804ee46:	4770      	bx	lr
 804ee48:	20015024 	.word	0x20015024

0804ee4c <_isatty>:
 804ee4c:	4b02      	ldr	r3, [pc, #8]	; (804ee58 <_isatty+0xc>)
 804ee4e:	2258      	movs	r2, #88	; 0x58
 804ee50:	601a      	str	r2, [r3, #0]
 804ee52:	2000      	movs	r0, #0
 804ee54:	4770      	bx	lr
 804ee56:	bf00      	nop
 804ee58:	20015024 	.word	0x20015024

0804ee5c <_lseek>:
 804ee5c:	4b02      	ldr	r3, [pc, #8]	; (804ee68 <_lseek+0xc>)
 804ee5e:	2258      	movs	r2, #88	; 0x58
 804ee60:	601a      	str	r2, [r3, #0]
 804ee62:	f04f 30ff 	mov.w	r0, #4294967295
 804ee66:	4770      	bx	lr
 804ee68:	20015024 	.word	0x20015024

0804ee6c <_read>:
 804ee6c:	4b02      	ldr	r3, [pc, #8]	; (804ee78 <_read+0xc>)
 804ee6e:	2258      	movs	r2, #88	; 0x58
 804ee70:	601a      	str	r2, [r3, #0]
 804ee72:	f04f 30ff 	mov.w	r0, #4294967295
 804ee76:	4770      	bx	lr
 804ee78:	20015024 	.word	0x20015024

0804ee7c <_sbrk>:
 804ee7c:	4b04      	ldr	r3, [pc, #16]	; (804ee90 <_sbrk+0x14>)
 804ee7e:	6819      	ldr	r1, [r3, #0]
 804ee80:	4602      	mov	r2, r0
 804ee82:	b909      	cbnz	r1, 804ee88 <_sbrk+0xc>
 804ee84:	4903      	ldr	r1, [pc, #12]	; (804ee94 <_sbrk+0x18>)
 804ee86:	6019      	str	r1, [r3, #0]
 804ee88:	6818      	ldr	r0, [r3, #0]
 804ee8a:	4402      	add	r2, r0
 804ee8c:	601a      	str	r2, [r3, #0]
 804ee8e:	4770      	bx	lr
 804ee90:	2000b528 	.word	0x2000b528
 804ee94:	20015028 	.word	0x20015028

0804ee98 <_write>:
 804ee98:	4b02      	ldr	r3, [pc, #8]	; (804eea4 <_write+0xc>)
 804ee9a:	2258      	movs	r2, #88	; 0x58
 804ee9c:	601a      	str	r2, [r3, #0]
 804ee9e:	f04f 30ff 	mov.w	r0, #4294967295
 804eea2:	4770      	bx	lr
 804eea4:	20015024 	.word	0x20015024

0804eea8 <_init>:
 804eea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804eeaa:	bf00      	nop
 804eeac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804eeae:	bc08      	pop	{r3}
 804eeb0:	469e      	mov	lr, r3
 804eeb2:	4770      	bx	lr

0804eeb4 <_fini>:
 804eeb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804eeb6:	bf00      	nop
 804eeb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804eeba:	bc08      	pop	{r3}
 804eebc:	469e      	mov	lr, r3
 804eebe:	4770      	bx	lr
