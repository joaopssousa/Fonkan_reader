
UserApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000200  08040200  08040200  00000200  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd18  08040400  08040400  00000400  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d20  0804e118  0804e118  0000e118  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0804ee38  0804ee38  0001efb0  2**0
                  CONTENTS
  4 .ARM          00000008  0804ee38  0804ee38  0000ee38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0804ee40  0804ee40  0001efb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0804ee40  0804ee40  0000ee40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0804ee48  0804ee48  0000ee48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20001000  0804ee50  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .align16      00000010  0804efa0  0804efa0  0001efa0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000b23c  20001150  20001150  00021150  2**2
                  ALLOC
 11 ._user_heap_stack 00001204  2000c38c  2000c38c  00021150  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001efb0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00063ac9  00000000  00000000  0001efe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000bfb0  00000000  00000000  00082aa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001ef9b  00000000  00000000  0008ea59  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00002400  00000000  00000000  000ad9f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00003648  00000000  00000000  000afdf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0001407f  00000000  00000000  000b3440  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0003537a  00000000  00000000  000c74bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000fe1f5  00000000  00000000  000fc839  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  001faa2e  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000787c  00000000  00000000  001faaac  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stab         0000009c  00000000  00000000  00202328  2**2
                  CONTENTS, READONLY, DEBUGGING
 24 .stabstr      0000014d  00000000  00000000  002023c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08040400 <__do_global_dtors_aux>:
 8040400:	b510      	push	{r4, lr}
 8040402:	4c05      	ldr	r4, [pc, #20]	; (8040418 <APPLI_region_ROM_start+0x18>)
 8040404:	7823      	ldrb	r3, [r4, #0]
 8040406:	b933      	cbnz	r3, 8040416 <__do_global_dtors_aux+0x16>
 8040408:	4b04      	ldr	r3, [pc, #16]	; (804041c <APPLI_region_ROM_start+0x1c>)
 804040a:	b113      	cbz	r3, 8040412 <__do_global_dtors_aux+0x12>
 804040c:	4804      	ldr	r0, [pc, #16]	; (8040420 <APPLI_region_ROM_start+0x20>)
 804040e:	f3af 8000 	nop.w
 8040412:	2301      	movs	r3, #1
 8040414:	7023      	strb	r3, [r4, #0]
 8040416:	bd10      	pop	{r4, pc}
 8040418:	20001150 	.word	0x20001150
 804041c:	00000000 	.word	0x00000000
 8040420:	0804e100 	.word	0x0804e100

08040424 <frame_dummy>:
 8040424:	b508      	push	{r3, lr}
 8040426:	4b03      	ldr	r3, [pc, #12]	; (8040434 <frame_dummy+0x10>)
 8040428:	b11b      	cbz	r3, 8040432 <frame_dummy+0xe>
 804042a:	4903      	ldr	r1, [pc, #12]	; (8040438 <frame_dummy+0x14>)
 804042c:	4803      	ldr	r0, [pc, #12]	; (804043c <frame_dummy+0x18>)
 804042e:	f3af 8000 	nop.w
 8040432:	bd08      	pop	{r3, pc}
 8040434:	00000000 	.word	0x00000000
 8040438:	20001154 	.word	0x20001154
 804043c:	0804e100 	.word	0x0804e100

08040440 <memchr>:
 8040440:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8040444:	2a10      	cmp	r2, #16
 8040446:	db2b      	blt.n	80404a0 <memchr+0x60>
 8040448:	f010 0f07 	tst.w	r0, #7
 804044c:	d008      	beq.n	8040460 <memchr+0x20>
 804044e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040452:	3a01      	subs	r2, #1
 8040454:	428b      	cmp	r3, r1
 8040456:	d02d      	beq.n	80404b4 <memchr+0x74>
 8040458:	f010 0f07 	tst.w	r0, #7
 804045c:	b342      	cbz	r2, 80404b0 <memchr+0x70>
 804045e:	d1f6      	bne.n	804044e <memchr+0xe>
 8040460:	b4f0      	push	{r4, r5, r6, r7}
 8040462:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8040466:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 804046a:	f022 0407 	bic.w	r4, r2, #7
 804046e:	f07f 0700 	mvns.w	r7, #0
 8040472:	2300      	movs	r3, #0
 8040474:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8040478:	3c08      	subs	r4, #8
 804047a:	ea85 0501 	eor.w	r5, r5, r1
 804047e:	ea86 0601 	eor.w	r6, r6, r1
 8040482:	fa85 f547 	uadd8	r5, r5, r7
 8040486:	faa3 f587 	sel	r5, r3, r7
 804048a:	fa86 f647 	uadd8	r6, r6, r7
 804048e:	faa5 f687 	sel	r6, r5, r7
 8040492:	b98e      	cbnz	r6, 80404b8 <memchr+0x78>
 8040494:	d1ee      	bne.n	8040474 <memchr+0x34>
 8040496:	bcf0      	pop	{r4, r5, r6, r7}
 8040498:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 804049c:	f002 0207 	and.w	r2, r2, #7
 80404a0:	b132      	cbz	r2, 80404b0 <memchr+0x70>
 80404a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80404a6:	3a01      	subs	r2, #1
 80404a8:	ea83 0301 	eor.w	r3, r3, r1
 80404ac:	b113      	cbz	r3, 80404b4 <memchr+0x74>
 80404ae:	d1f8      	bne.n	80404a2 <memchr+0x62>
 80404b0:	2000      	movs	r0, #0
 80404b2:	4770      	bx	lr
 80404b4:	3801      	subs	r0, #1
 80404b6:	4770      	bx	lr
 80404b8:	2d00      	cmp	r5, #0
 80404ba:	bf06      	itte	eq
 80404bc:	4635      	moveq	r5, r6
 80404be:	3803      	subeq	r0, #3
 80404c0:	3807      	subne	r0, #7
 80404c2:	f015 0f01 	tst.w	r5, #1
 80404c6:	d107      	bne.n	80404d8 <memchr+0x98>
 80404c8:	3001      	adds	r0, #1
 80404ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80404ce:	bf02      	ittt	eq
 80404d0:	3001      	addeq	r0, #1
 80404d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80404d6:	3001      	addeq	r0, #1
 80404d8:	bcf0      	pop	{r4, r5, r6, r7}
 80404da:	3801      	subs	r0, #1
 80404dc:	4770      	bx	lr
 80404de:	bf00      	nop

080404e0 <__aeabi_drsub>:
 80404e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80404e4:	e002      	b.n	80404ec <__adddf3>
 80404e6:	bf00      	nop

080404e8 <__aeabi_dsub>:
 80404e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080404ec <__adddf3>:
 80404ec:	b530      	push	{r4, r5, lr}
 80404ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80404f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80404f6:	ea94 0f05 	teq	r4, r5
 80404fa:	bf08      	it	eq
 80404fc:	ea90 0f02 	teqeq	r0, r2
 8040500:	bf1f      	itttt	ne
 8040502:	ea54 0c00 	orrsne.w	ip, r4, r0
 8040506:	ea55 0c02 	orrsne.w	ip, r5, r2
 804050a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 804050e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8040512:	f000 80e2 	beq.w	80406da <__adddf3+0x1ee>
 8040516:	ea4f 5454 	mov.w	r4, r4, lsr #21
 804051a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 804051e:	bfb8      	it	lt
 8040520:	426d      	neglt	r5, r5
 8040522:	dd0c      	ble.n	804053e <__adddf3+0x52>
 8040524:	442c      	add	r4, r5
 8040526:	ea80 0202 	eor.w	r2, r0, r2
 804052a:	ea81 0303 	eor.w	r3, r1, r3
 804052e:	ea82 0000 	eor.w	r0, r2, r0
 8040532:	ea83 0101 	eor.w	r1, r3, r1
 8040536:	ea80 0202 	eor.w	r2, r0, r2
 804053a:	ea81 0303 	eor.w	r3, r1, r3
 804053e:	2d36      	cmp	r5, #54	; 0x36
 8040540:	bf88      	it	hi
 8040542:	bd30      	pophi	{r4, r5, pc}
 8040544:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8040548:	ea4f 3101 	mov.w	r1, r1, lsl #12
 804054c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8040550:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8040554:	d002      	beq.n	804055c <__adddf3+0x70>
 8040556:	4240      	negs	r0, r0
 8040558:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 804055c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8040560:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8040564:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8040568:	d002      	beq.n	8040570 <__adddf3+0x84>
 804056a:	4252      	negs	r2, r2
 804056c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8040570:	ea94 0f05 	teq	r4, r5
 8040574:	f000 80a7 	beq.w	80406c6 <__adddf3+0x1da>
 8040578:	f1a4 0401 	sub.w	r4, r4, #1
 804057c:	f1d5 0e20 	rsbs	lr, r5, #32
 8040580:	db0d      	blt.n	804059e <__adddf3+0xb2>
 8040582:	fa02 fc0e 	lsl.w	ip, r2, lr
 8040586:	fa22 f205 	lsr.w	r2, r2, r5
 804058a:	1880      	adds	r0, r0, r2
 804058c:	f141 0100 	adc.w	r1, r1, #0
 8040590:	fa03 f20e 	lsl.w	r2, r3, lr
 8040594:	1880      	adds	r0, r0, r2
 8040596:	fa43 f305 	asr.w	r3, r3, r5
 804059a:	4159      	adcs	r1, r3
 804059c:	e00e      	b.n	80405bc <__adddf3+0xd0>
 804059e:	f1a5 0520 	sub.w	r5, r5, #32
 80405a2:	f10e 0e20 	add.w	lr, lr, #32
 80405a6:	2a01      	cmp	r2, #1
 80405a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80405ac:	bf28      	it	cs
 80405ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80405b2:	fa43 f305 	asr.w	r3, r3, r5
 80405b6:	18c0      	adds	r0, r0, r3
 80405b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80405bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80405c0:	d507      	bpl.n	80405d2 <__adddf3+0xe6>
 80405c2:	f04f 0e00 	mov.w	lr, #0
 80405c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80405ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80405ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80405d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80405d6:	d31b      	bcc.n	8040610 <__adddf3+0x124>
 80405d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80405dc:	d30c      	bcc.n	80405f8 <__adddf3+0x10c>
 80405de:	0849      	lsrs	r1, r1, #1
 80405e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80405e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80405e8:	f104 0401 	add.w	r4, r4, #1
 80405ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80405f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80405f4:	f080 809a 	bcs.w	804072c <__adddf3+0x240>
 80405f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80405fc:	bf08      	it	eq
 80405fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8040602:	f150 0000 	adcs.w	r0, r0, #0
 8040606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 804060a:	ea41 0105 	orr.w	r1, r1, r5
 804060e:	bd30      	pop	{r4, r5, pc}
 8040610:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8040614:	4140      	adcs	r0, r0
 8040616:	eb41 0101 	adc.w	r1, r1, r1
 804061a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 804061e:	f1a4 0401 	sub.w	r4, r4, #1
 8040622:	d1e9      	bne.n	80405f8 <__adddf3+0x10c>
 8040624:	f091 0f00 	teq	r1, #0
 8040628:	bf04      	itt	eq
 804062a:	4601      	moveq	r1, r0
 804062c:	2000      	moveq	r0, #0
 804062e:	fab1 f381 	clz	r3, r1
 8040632:	bf08      	it	eq
 8040634:	3320      	addeq	r3, #32
 8040636:	f1a3 030b 	sub.w	r3, r3, #11
 804063a:	f1b3 0220 	subs.w	r2, r3, #32
 804063e:	da0c      	bge.n	804065a <__adddf3+0x16e>
 8040640:	320c      	adds	r2, #12
 8040642:	dd08      	ble.n	8040656 <__adddf3+0x16a>
 8040644:	f102 0c14 	add.w	ip, r2, #20
 8040648:	f1c2 020c 	rsb	r2, r2, #12
 804064c:	fa01 f00c 	lsl.w	r0, r1, ip
 8040650:	fa21 f102 	lsr.w	r1, r1, r2
 8040654:	e00c      	b.n	8040670 <__adddf3+0x184>
 8040656:	f102 0214 	add.w	r2, r2, #20
 804065a:	bfd8      	it	le
 804065c:	f1c2 0c20 	rsble	ip, r2, #32
 8040660:	fa01 f102 	lsl.w	r1, r1, r2
 8040664:	fa20 fc0c 	lsr.w	ip, r0, ip
 8040668:	bfdc      	itt	le
 804066a:	ea41 010c 	orrle.w	r1, r1, ip
 804066e:	4090      	lslle	r0, r2
 8040670:	1ae4      	subs	r4, r4, r3
 8040672:	bfa2      	ittt	ge
 8040674:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8040678:	4329      	orrge	r1, r5
 804067a:	bd30      	popge	{r4, r5, pc}
 804067c:	ea6f 0404 	mvn.w	r4, r4
 8040680:	3c1f      	subs	r4, #31
 8040682:	da1c      	bge.n	80406be <__adddf3+0x1d2>
 8040684:	340c      	adds	r4, #12
 8040686:	dc0e      	bgt.n	80406a6 <__adddf3+0x1ba>
 8040688:	f104 0414 	add.w	r4, r4, #20
 804068c:	f1c4 0220 	rsb	r2, r4, #32
 8040690:	fa20 f004 	lsr.w	r0, r0, r4
 8040694:	fa01 f302 	lsl.w	r3, r1, r2
 8040698:	ea40 0003 	orr.w	r0, r0, r3
 804069c:	fa21 f304 	lsr.w	r3, r1, r4
 80406a0:	ea45 0103 	orr.w	r1, r5, r3
 80406a4:	bd30      	pop	{r4, r5, pc}
 80406a6:	f1c4 040c 	rsb	r4, r4, #12
 80406aa:	f1c4 0220 	rsb	r2, r4, #32
 80406ae:	fa20 f002 	lsr.w	r0, r0, r2
 80406b2:	fa01 f304 	lsl.w	r3, r1, r4
 80406b6:	ea40 0003 	orr.w	r0, r0, r3
 80406ba:	4629      	mov	r1, r5
 80406bc:	bd30      	pop	{r4, r5, pc}
 80406be:	fa21 f004 	lsr.w	r0, r1, r4
 80406c2:	4629      	mov	r1, r5
 80406c4:	bd30      	pop	{r4, r5, pc}
 80406c6:	f094 0f00 	teq	r4, #0
 80406ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80406ce:	bf06      	itte	eq
 80406d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80406d4:	3401      	addeq	r4, #1
 80406d6:	3d01      	subne	r5, #1
 80406d8:	e74e      	b.n	8040578 <__adddf3+0x8c>
 80406da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80406de:	bf18      	it	ne
 80406e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80406e4:	d029      	beq.n	804073a <__adddf3+0x24e>
 80406e6:	ea94 0f05 	teq	r4, r5
 80406ea:	bf08      	it	eq
 80406ec:	ea90 0f02 	teqeq	r0, r2
 80406f0:	d005      	beq.n	80406fe <__adddf3+0x212>
 80406f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80406f6:	bf04      	itt	eq
 80406f8:	4619      	moveq	r1, r3
 80406fa:	4610      	moveq	r0, r2
 80406fc:	bd30      	pop	{r4, r5, pc}
 80406fe:	ea91 0f03 	teq	r1, r3
 8040702:	bf1e      	ittt	ne
 8040704:	2100      	movne	r1, #0
 8040706:	2000      	movne	r0, #0
 8040708:	bd30      	popne	{r4, r5, pc}
 804070a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 804070e:	d105      	bne.n	804071c <__adddf3+0x230>
 8040710:	0040      	lsls	r0, r0, #1
 8040712:	4149      	adcs	r1, r1
 8040714:	bf28      	it	cs
 8040716:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 804071a:	bd30      	pop	{r4, r5, pc}
 804071c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8040720:	bf3c      	itt	cc
 8040722:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8040726:	bd30      	popcc	{r4, r5, pc}
 8040728:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 804072c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8040730:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8040734:	f04f 0000 	mov.w	r0, #0
 8040738:	bd30      	pop	{r4, r5, pc}
 804073a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 804073e:	bf1a      	itte	ne
 8040740:	4619      	movne	r1, r3
 8040742:	4610      	movne	r0, r2
 8040744:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8040748:	bf1c      	itt	ne
 804074a:	460b      	movne	r3, r1
 804074c:	4602      	movne	r2, r0
 804074e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8040752:	bf06      	itte	eq
 8040754:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8040758:	ea91 0f03 	teqeq	r1, r3
 804075c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8040760:	bd30      	pop	{r4, r5, pc}
 8040762:	bf00      	nop

08040764 <__aeabi_ui2d>:
 8040764:	f090 0f00 	teq	r0, #0
 8040768:	bf04      	itt	eq
 804076a:	2100      	moveq	r1, #0
 804076c:	4770      	bxeq	lr
 804076e:	b530      	push	{r4, r5, lr}
 8040770:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8040774:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8040778:	f04f 0500 	mov.w	r5, #0
 804077c:	f04f 0100 	mov.w	r1, #0
 8040780:	e750      	b.n	8040624 <__adddf3+0x138>
 8040782:	bf00      	nop

08040784 <__aeabi_i2d>:
 8040784:	f090 0f00 	teq	r0, #0
 8040788:	bf04      	itt	eq
 804078a:	2100      	moveq	r1, #0
 804078c:	4770      	bxeq	lr
 804078e:	b530      	push	{r4, r5, lr}
 8040790:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8040794:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8040798:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 804079c:	bf48      	it	mi
 804079e:	4240      	negmi	r0, r0
 80407a0:	f04f 0100 	mov.w	r1, #0
 80407a4:	e73e      	b.n	8040624 <__adddf3+0x138>
 80407a6:	bf00      	nop

080407a8 <__aeabi_f2d>:
 80407a8:	0042      	lsls	r2, r0, #1
 80407aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80407ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80407b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80407b6:	bf1f      	itttt	ne
 80407b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80407bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80407c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80407c4:	4770      	bxne	lr
 80407c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80407ca:	bf08      	it	eq
 80407cc:	4770      	bxeq	lr
 80407ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80407d2:	bf04      	itt	eq
 80407d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80407d8:	4770      	bxeq	lr
 80407da:	b530      	push	{r4, r5, lr}
 80407dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80407e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80407e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80407e8:	e71c      	b.n	8040624 <__adddf3+0x138>
 80407ea:	bf00      	nop

080407ec <__aeabi_ul2d>:
 80407ec:	ea50 0201 	orrs.w	r2, r0, r1
 80407f0:	bf08      	it	eq
 80407f2:	4770      	bxeq	lr
 80407f4:	b530      	push	{r4, r5, lr}
 80407f6:	f04f 0500 	mov.w	r5, #0
 80407fa:	e00a      	b.n	8040812 <__aeabi_l2d+0x16>

080407fc <__aeabi_l2d>:
 80407fc:	ea50 0201 	orrs.w	r2, r0, r1
 8040800:	bf08      	it	eq
 8040802:	4770      	bxeq	lr
 8040804:	b530      	push	{r4, r5, lr}
 8040806:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 804080a:	d502      	bpl.n	8040812 <__aeabi_l2d+0x16>
 804080c:	4240      	negs	r0, r0
 804080e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8040812:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8040816:	f104 0432 	add.w	r4, r4, #50	; 0x32
 804081a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 804081e:	f43f aed8 	beq.w	80405d2 <__adddf3+0xe6>
 8040822:	f04f 0203 	mov.w	r2, #3
 8040826:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 804082a:	bf18      	it	ne
 804082c:	3203      	addne	r2, #3
 804082e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8040832:	bf18      	it	ne
 8040834:	3203      	addne	r2, #3
 8040836:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 804083a:	f1c2 0320 	rsb	r3, r2, #32
 804083e:	fa00 fc03 	lsl.w	ip, r0, r3
 8040842:	fa20 f002 	lsr.w	r0, r0, r2
 8040846:	fa01 fe03 	lsl.w	lr, r1, r3
 804084a:	ea40 000e 	orr.w	r0, r0, lr
 804084e:	fa21 f102 	lsr.w	r1, r1, r2
 8040852:	4414      	add	r4, r2
 8040854:	e6bd      	b.n	80405d2 <__adddf3+0xe6>
 8040856:	bf00      	nop

08040858 <__aeabi_dmul>:
 8040858:	b570      	push	{r4, r5, r6, lr}
 804085a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 804085e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8040862:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8040866:	bf1d      	ittte	ne
 8040868:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 804086c:	ea94 0f0c 	teqne	r4, ip
 8040870:	ea95 0f0c 	teqne	r5, ip
 8040874:	f000 f8de 	bleq	8040a34 <__aeabi_dmul+0x1dc>
 8040878:	442c      	add	r4, r5
 804087a:	ea81 0603 	eor.w	r6, r1, r3
 804087e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8040882:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8040886:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 804088a:	bf18      	it	ne
 804088c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8040890:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8040894:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8040898:	d038      	beq.n	804090c <__aeabi_dmul+0xb4>
 804089a:	fba0 ce02 	umull	ip, lr, r0, r2
 804089e:	f04f 0500 	mov.w	r5, #0
 80408a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80408a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80408aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80408ae:	f04f 0600 	mov.w	r6, #0
 80408b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80408b6:	f09c 0f00 	teq	ip, #0
 80408ba:	bf18      	it	ne
 80408bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80408c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80408c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80408c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80408cc:	d204      	bcs.n	80408d8 <__aeabi_dmul+0x80>
 80408ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80408d2:	416d      	adcs	r5, r5
 80408d4:	eb46 0606 	adc.w	r6, r6, r6
 80408d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80408dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80408e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80408e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80408e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80408ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80408f0:	bf88      	it	hi
 80408f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80408f6:	d81e      	bhi.n	8040936 <__aeabi_dmul+0xde>
 80408f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80408fc:	bf08      	it	eq
 80408fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8040902:	f150 0000 	adcs.w	r0, r0, #0
 8040906:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 804090a:	bd70      	pop	{r4, r5, r6, pc}
 804090c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8040910:	ea46 0101 	orr.w	r1, r6, r1
 8040914:	ea40 0002 	orr.w	r0, r0, r2
 8040918:	ea81 0103 	eor.w	r1, r1, r3
 804091c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8040920:	bfc2      	ittt	gt
 8040922:	ebd4 050c 	rsbsgt	r5, r4, ip
 8040926:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 804092a:	bd70      	popgt	{r4, r5, r6, pc}
 804092c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8040930:	f04f 0e00 	mov.w	lr, #0
 8040934:	3c01      	subs	r4, #1
 8040936:	f300 80ab 	bgt.w	8040a90 <__aeabi_dmul+0x238>
 804093a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 804093e:	bfde      	ittt	le
 8040940:	2000      	movle	r0, #0
 8040942:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8040946:	bd70      	pople	{r4, r5, r6, pc}
 8040948:	f1c4 0400 	rsb	r4, r4, #0
 804094c:	3c20      	subs	r4, #32
 804094e:	da35      	bge.n	80409bc <__aeabi_dmul+0x164>
 8040950:	340c      	adds	r4, #12
 8040952:	dc1b      	bgt.n	804098c <__aeabi_dmul+0x134>
 8040954:	f104 0414 	add.w	r4, r4, #20
 8040958:	f1c4 0520 	rsb	r5, r4, #32
 804095c:	fa00 f305 	lsl.w	r3, r0, r5
 8040960:	fa20 f004 	lsr.w	r0, r0, r4
 8040964:	fa01 f205 	lsl.w	r2, r1, r5
 8040968:	ea40 0002 	orr.w	r0, r0, r2
 804096c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8040970:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8040974:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8040978:	fa21 f604 	lsr.w	r6, r1, r4
 804097c:	eb42 0106 	adc.w	r1, r2, r6
 8040980:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8040984:	bf08      	it	eq
 8040986:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 804098a:	bd70      	pop	{r4, r5, r6, pc}
 804098c:	f1c4 040c 	rsb	r4, r4, #12
 8040990:	f1c4 0520 	rsb	r5, r4, #32
 8040994:	fa00 f304 	lsl.w	r3, r0, r4
 8040998:	fa20 f005 	lsr.w	r0, r0, r5
 804099c:	fa01 f204 	lsl.w	r2, r1, r4
 80409a0:	ea40 0002 	orr.w	r0, r0, r2
 80409a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80409a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80409ac:	f141 0100 	adc.w	r1, r1, #0
 80409b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80409b4:	bf08      	it	eq
 80409b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80409ba:	bd70      	pop	{r4, r5, r6, pc}
 80409bc:	f1c4 0520 	rsb	r5, r4, #32
 80409c0:	fa00 f205 	lsl.w	r2, r0, r5
 80409c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80409c8:	fa20 f304 	lsr.w	r3, r0, r4
 80409cc:	fa01 f205 	lsl.w	r2, r1, r5
 80409d0:	ea43 0302 	orr.w	r3, r3, r2
 80409d4:	fa21 f004 	lsr.w	r0, r1, r4
 80409d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80409dc:	fa21 f204 	lsr.w	r2, r1, r4
 80409e0:	ea20 0002 	bic.w	r0, r0, r2
 80409e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80409e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80409ec:	bf08      	it	eq
 80409ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80409f2:	bd70      	pop	{r4, r5, r6, pc}
 80409f4:	f094 0f00 	teq	r4, #0
 80409f8:	d10f      	bne.n	8040a1a <__aeabi_dmul+0x1c2>
 80409fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80409fe:	0040      	lsls	r0, r0, #1
 8040a00:	eb41 0101 	adc.w	r1, r1, r1
 8040a04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8040a08:	bf08      	it	eq
 8040a0a:	3c01      	subeq	r4, #1
 8040a0c:	d0f7      	beq.n	80409fe <__aeabi_dmul+0x1a6>
 8040a0e:	ea41 0106 	orr.w	r1, r1, r6
 8040a12:	f095 0f00 	teq	r5, #0
 8040a16:	bf18      	it	ne
 8040a18:	4770      	bxne	lr
 8040a1a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8040a1e:	0052      	lsls	r2, r2, #1
 8040a20:	eb43 0303 	adc.w	r3, r3, r3
 8040a24:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8040a28:	bf08      	it	eq
 8040a2a:	3d01      	subeq	r5, #1
 8040a2c:	d0f7      	beq.n	8040a1e <__aeabi_dmul+0x1c6>
 8040a2e:	ea43 0306 	orr.w	r3, r3, r6
 8040a32:	4770      	bx	lr
 8040a34:	ea94 0f0c 	teq	r4, ip
 8040a38:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8040a3c:	bf18      	it	ne
 8040a3e:	ea95 0f0c 	teqne	r5, ip
 8040a42:	d00c      	beq.n	8040a5e <__aeabi_dmul+0x206>
 8040a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8040a48:	bf18      	it	ne
 8040a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8040a4e:	d1d1      	bne.n	80409f4 <__aeabi_dmul+0x19c>
 8040a50:	ea81 0103 	eor.w	r1, r1, r3
 8040a54:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8040a58:	f04f 0000 	mov.w	r0, #0
 8040a5c:	bd70      	pop	{r4, r5, r6, pc}
 8040a5e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8040a62:	bf06      	itte	eq
 8040a64:	4610      	moveq	r0, r2
 8040a66:	4619      	moveq	r1, r3
 8040a68:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8040a6c:	d019      	beq.n	8040aa2 <__aeabi_dmul+0x24a>
 8040a6e:	ea94 0f0c 	teq	r4, ip
 8040a72:	d102      	bne.n	8040a7a <__aeabi_dmul+0x222>
 8040a74:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8040a78:	d113      	bne.n	8040aa2 <__aeabi_dmul+0x24a>
 8040a7a:	ea95 0f0c 	teq	r5, ip
 8040a7e:	d105      	bne.n	8040a8c <__aeabi_dmul+0x234>
 8040a80:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8040a84:	bf1c      	itt	ne
 8040a86:	4610      	movne	r0, r2
 8040a88:	4619      	movne	r1, r3
 8040a8a:	d10a      	bne.n	8040aa2 <__aeabi_dmul+0x24a>
 8040a8c:	ea81 0103 	eor.w	r1, r1, r3
 8040a90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8040a94:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8040a98:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8040a9c:	f04f 0000 	mov.w	r0, #0
 8040aa0:	bd70      	pop	{r4, r5, r6, pc}
 8040aa2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8040aa6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8040aaa:	bd70      	pop	{r4, r5, r6, pc}

08040aac <__aeabi_ddiv>:
 8040aac:	b570      	push	{r4, r5, r6, lr}
 8040aae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8040ab2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8040ab6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8040aba:	bf1d      	ittte	ne
 8040abc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8040ac0:	ea94 0f0c 	teqne	r4, ip
 8040ac4:	ea95 0f0c 	teqne	r5, ip
 8040ac8:	f000 f8a7 	bleq	8040c1a <__aeabi_ddiv+0x16e>
 8040acc:	eba4 0405 	sub.w	r4, r4, r5
 8040ad0:	ea81 0e03 	eor.w	lr, r1, r3
 8040ad4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8040ad8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8040adc:	f000 8088 	beq.w	8040bf0 <__aeabi_ddiv+0x144>
 8040ae0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8040ae4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8040ae8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8040aec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8040af0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8040af4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8040af8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8040afc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8040b00:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8040b04:	429d      	cmp	r5, r3
 8040b06:	bf08      	it	eq
 8040b08:	4296      	cmpeq	r6, r2
 8040b0a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8040b0e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8040b12:	d202      	bcs.n	8040b1a <__aeabi_ddiv+0x6e>
 8040b14:	085b      	lsrs	r3, r3, #1
 8040b16:	ea4f 0232 	mov.w	r2, r2, rrx
 8040b1a:	1ab6      	subs	r6, r6, r2
 8040b1c:	eb65 0503 	sbc.w	r5, r5, r3
 8040b20:	085b      	lsrs	r3, r3, #1
 8040b22:	ea4f 0232 	mov.w	r2, r2, rrx
 8040b26:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8040b2a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8040b2e:	ebb6 0e02 	subs.w	lr, r6, r2
 8040b32:	eb75 0e03 	sbcs.w	lr, r5, r3
 8040b36:	bf22      	ittt	cs
 8040b38:	1ab6      	subcs	r6, r6, r2
 8040b3a:	4675      	movcs	r5, lr
 8040b3c:	ea40 000c 	orrcs.w	r0, r0, ip
 8040b40:	085b      	lsrs	r3, r3, #1
 8040b42:	ea4f 0232 	mov.w	r2, r2, rrx
 8040b46:	ebb6 0e02 	subs.w	lr, r6, r2
 8040b4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8040b4e:	bf22      	ittt	cs
 8040b50:	1ab6      	subcs	r6, r6, r2
 8040b52:	4675      	movcs	r5, lr
 8040b54:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8040b58:	085b      	lsrs	r3, r3, #1
 8040b5a:	ea4f 0232 	mov.w	r2, r2, rrx
 8040b5e:	ebb6 0e02 	subs.w	lr, r6, r2
 8040b62:	eb75 0e03 	sbcs.w	lr, r5, r3
 8040b66:	bf22      	ittt	cs
 8040b68:	1ab6      	subcs	r6, r6, r2
 8040b6a:	4675      	movcs	r5, lr
 8040b6c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8040b70:	085b      	lsrs	r3, r3, #1
 8040b72:	ea4f 0232 	mov.w	r2, r2, rrx
 8040b76:	ebb6 0e02 	subs.w	lr, r6, r2
 8040b7a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8040b7e:	bf22      	ittt	cs
 8040b80:	1ab6      	subcs	r6, r6, r2
 8040b82:	4675      	movcs	r5, lr
 8040b84:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8040b88:	ea55 0e06 	orrs.w	lr, r5, r6
 8040b8c:	d018      	beq.n	8040bc0 <__aeabi_ddiv+0x114>
 8040b8e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8040b92:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8040b96:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8040b9a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8040b9e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8040ba2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8040ba6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8040baa:	d1c0      	bne.n	8040b2e <__aeabi_ddiv+0x82>
 8040bac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8040bb0:	d10b      	bne.n	8040bca <__aeabi_ddiv+0x11e>
 8040bb2:	ea41 0100 	orr.w	r1, r1, r0
 8040bb6:	f04f 0000 	mov.w	r0, #0
 8040bba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8040bbe:	e7b6      	b.n	8040b2e <__aeabi_ddiv+0x82>
 8040bc0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8040bc4:	bf04      	itt	eq
 8040bc6:	4301      	orreq	r1, r0
 8040bc8:	2000      	moveq	r0, #0
 8040bca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8040bce:	bf88      	it	hi
 8040bd0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8040bd4:	f63f aeaf 	bhi.w	8040936 <__aeabi_dmul+0xde>
 8040bd8:	ebb5 0c03 	subs.w	ip, r5, r3
 8040bdc:	bf04      	itt	eq
 8040bde:	ebb6 0c02 	subseq.w	ip, r6, r2
 8040be2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8040be6:	f150 0000 	adcs.w	r0, r0, #0
 8040bea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8040bee:	bd70      	pop	{r4, r5, r6, pc}
 8040bf0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8040bf4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8040bf8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8040bfc:	bfc2      	ittt	gt
 8040bfe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8040c02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8040c06:	bd70      	popgt	{r4, r5, r6, pc}
 8040c08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8040c0c:	f04f 0e00 	mov.w	lr, #0
 8040c10:	3c01      	subs	r4, #1
 8040c12:	e690      	b.n	8040936 <__aeabi_dmul+0xde>
 8040c14:	ea45 0e06 	orr.w	lr, r5, r6
 8040c18:	e68d      	b.n	8040936 <__aeabi_dmul+0xde>
 8040c1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8040c1e:	ea94 0f0c 	teq	r4, ip
 8040c22:	bf08      	it	eq
 8040c24:	ea95 0f0c 	teqeq	r5, ip
 8040c28:	f43f af3b 	beq.w	8040aa2 <__aeabi_dmul+0x24a>
 8040c2c:	ea94 0f0c 	teq	r4, ip
 8040c30:	d10a      	bne.n	8040c48 <__aeabi_ddiv+0x19c>
 8040c32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8040c36:	f47f af34 	bne.w	8040aa2 <__aeabi_dmul+0x24a>
 8040c3a:	ea95 0f0c 	teq	r5, ip
 8040c3e:	f47f af25 	bne.w	8040a8c <__aeabi_dmul+0x234>
 8040c42:	4610      	mov	r0, r2
 8040c44:	4619      	mov	r1, r3
 8040c46:	e72c      	b.n	8040aa2 <__aeabi_dmul+0x24a>
 8040c48:	ea95 0f0c 	teq	r5, ip
 8040c4c:	d106      	bne.n	8040c5c <__aeabi_ddiv+0x1b0>
 8040c4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8040c52:	f43f aefd 	beq.w	8040a50 <__aeabi_dmul+0x1f8>
 8040c56:	4610      	mov	r0, r2
 8040c58:	4619      	mov	r1, r3
 8040c5a:	e722      	b.n	8040aa2 <__aeabi_dmul+0x24a>
 8040c5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8040c60:	bf18      	it	ne
 8040c62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8040c66:	f47f aec5 	bne.w	80409f4 <__aeabi_dmul+0x19c>
 8040c6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8040c6e:	f47f af0d 	bne.w	8040a8c <__aeabi_dmul+0x234>
 8040c72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8040c76:	f47f aeeb 	bne.w	8040a50 <__aeabi_dmul+0x1f8>
 8040c7a:	e712      	b.n	8040aa2 <__aeabi_dmul+0x24a>

08040c7c <__gedf2>:
 8040c7c:	f04f 3cff 	mov.w	ip, #4294967295
 8040c80:	e006      	b.n	8040c90 <__cmpdf2+0x4>
 8040c82:	bf00      	nop

08040c84 <__ledf2>:
 8040c84:	f04f 0c01 	mov.w	ip, #1
 8040c88:	e002      	b.n	8040c90 <__cmpdf2+0x4>
 8040c8a:	bf00      	nop

08040c8c <__cmpdf2>:
 8040c8c:	f04f 0c01 	mov.w	ip, #1
 8040c90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8040c94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8040c98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040c9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8040ca0:	bf18      	it	ne
 8040ca2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8040ca6:	d01b      	beq.n	8040ce0 <__cmpdf2+0x54>
 8040ca8:	b001      	add	sp, #4
 8040caa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8040cae:	bf0c      	ite	eq
 8040cb0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8040cb4:	ea91 0f03 	teqne	r1, r3
 8040cb8:	bf02      	ittt	eq
 8040cba:	ea90 0f02 	teqeq	r0, r2
 8040cbe:	2000      	moveq	r0, #0
 8040cc0:	4770      	bxeq	lr
 8040cc2:	f110 0f00 	cmn.w	r0, #0
 8040cc6:	ea91 0f03 	teq	r1, r3
 8040cca:	bf58      	it	pl
 8040ccc:	4299      	cmppl	r1, r3
 8040cce:	bf08      	it	eq
 8040cd0:	4290      	cmpeq	r0, r2
 8040cd2:	bf2c      	ite	cs
 8040cd4:	17d8      	asrcs	r0, r3, #31
 8040cd6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8040cda:	f040 0001 	orr.w	r0, r0, #1
 8040cde:	4770      	bx	lr
 8040ce0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8040ce4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040ce8:	d102      	bne.n	8040cf0 <__cmpdf2+0x64>
 8040cea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8040cee:	d107      	bne.n	8040d00 <__cmpdf2+0x74>
 8040cf0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8040cf4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040cf8:	d1d6      	bne.n	8040ca8 <__cmpdf2+0x1c>
 8040cfa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8040cfe:	d0d3      	beq.n	8040ca8 <__cmpdf2+0x1c>
 8040d00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8040d04:	4770      	bx	lr
 8040d06:	bf00      	nop

08040d08 <__aeabi_cdrcmple>:
 8040d08:	4684      	mov	ip, r0
 8040d0a:	4610      	mov	r0, r2
 8040d0c:	4662      	mov	r2, ip
 8040d0e:	468c      	mov	ip, r1
 8040d10:	4619      	mov	r1, r3
 8040d12:	4663      	mov	r3, ip
 8040d14:	e000      	b.n	8040d18 <__aeabi_cdcmpeq>
 8040d16:	bf00      	nop

08040d18 <__aeabi_cdcmpeq>:
 8040d18:	b501      	push	{r0, lr}
 8040d1a:	f7ff ffb7 	bl	8040c8c <__cmpdf2>
 8040d1e:	2800      	cmp	r0, #0
 8040d20:	bf48      	it	mi
 8040d22:	f110 0f00 	cmnmi.w	r0, #0
 8040d26:	bd01      	pop	{r0, pc}

08040d28 <__aeabi_dcmpeq>:
 8040d28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040d2c:	f7ff fff4 	bl	8040d18 <__aeabi_cdcmpeq>
 8040d30:	bf0c      	ite	eq
 8040d32:	2001      	moveq	r0, #1
 8040d34:	2000      	movne	r0, #0
 8040d36:	f85d fb08 	ldr.w	pc, [sp], #8
 8040d3a:	bf00      	nop

08040d3c <__aeabi_dcmplt>:
 8040d3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040d40:	f7ff ffea 	bl	8040d18 <__aeabi_cdcmpeq>
 8040d44:	bf34      	ite	cc
 8040d46:	2001      	movcc	r0, #1
 8040d48:	2000      	movcs	r0, #0
 8040d4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8040d4e:	bf00      	nop

08040d50 <__aeabi_dcmple>:
 8040d50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040d54:	f7ff ffe0 	bl	8040d18 <__aeabi_cdcmpeq>
 8040d58:	bf94      	ite	ls
 8040d5a:	2001      	movls	r0, #1
 8040d5c:	2000      	movhi	r0, #0
 8040d5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8040d62:	bf00      	nop

08040d64 <__aeabi_dcmpge>:
 8040d64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040d68:	f7ff ffce 	bl	8040d08 <__aeabi_cdrcmple>
 8040d6c:	bf94      	ite	ls
 8040d6e:	2001      	movls	r0, #1
 8040d70:	2000      	movhi	r0, #0
 8040d72:	f85d fb08 	ldr.w	pc, [sp], #8
 8040d76:	bf00      	nop

08040d78 <__aeabi_dcmpgt>:
 8040d78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040d7c:	f7ff ffc4 	bl	8040d08 <__aeabi_cdrcmple>
 8040d80:	bf34      	ite	cc
 8040d82:	2001      	movcc	r0, #1
 8040d84:	2000      	movcs	r0, #0
 8040d86:	f85d fb08 	ldr.w	pc, [sp], #8
 8040d8a:	bf00      	nop

08040d8c <__aeabi_d2iz>:
 8040d8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8040d90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8040d94:	d215      	bcs.n	8040dc2 <__aeabi_d2iz+0x36>
 8040d96:	d511      	bpl.n	8040dbc <__aeabi_d2iz+0x30>
 8040d98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8040d9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8040da0:	d912      	bls.n	8040dc8 <__aeabi_d2iz+0x3c>
 8040da2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8040da6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8040daa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8040dae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8040db2:	fa23 f002 	lsr.w	r0, r3, r2
 8040db6:	bf18      	it	ne
 8040db8:	4240      	negne	r0, r0
 8040dba:	4770      	bx	lr
 8040dbc:	f04f 0000 	mov.w	r0, #0
 8040dc0:	4770      	bx	lr
 8040dc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8040dc6:	d105      	bne.n	8040dd4 <__aeabi_d2iz+0x48>
 8040dc8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8040dcc:	bf08      	it	eq
 8040dce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8040dd2:	4770      	bx	lr
 8040dd4:	f04f 0000 	mov.w	r0, #0
 8040dd8:	4770      	bx	lr
 8040dda:	bf00      	nop

08040ddc <__aeabi_d2uiz>:
 8040ddc:	004a      	lsls	r2, r1, #1
 8040dde:	d211      	bcs.n	8040e04 <__aeabi_d2uiz+0x28>
 8040de0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8040de4:	d211      	bcs.n	8040e0a <__aeabi_d2uiz+0x2e>
 8040de6:	d50d      	bpl.n	8040e04 <__aeabi_d2uiz+0x28>
 8040de8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8040dec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8040df0:	d40e      	bmi.n	8040e10 <__aeabi_d2uiz+0x34>
 8040df2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8040df6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8040dfa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8040dfe:	fa23 f002 	lsr.w	r0, r3, r2
 8040e02:	4770      	bx	lr
 8040e04:	f04f 0000 	mov.w	r0, #0
 8040e08:	4770      	bx	lr
 8040e0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8040e0e:	d102      	bne.n	8040e16 <__aeabi_d2uiz+0x3a>
 8040e10:	f04f 30ff 	mov.w	r0, #4294967295
 8040e14:	4770      	bx	lr
 8040e16:	f04f 0000 	mov.w	r0, #0
 8040e1a:	4770      	bx	lr

08040e1c <__aeabi_uldivmod>:
 8040e1c:	b953      	cbnz	r3, 8040e34 <__aeabi_uldivmod+0x18>
 8040e1e:	b94a      	cbnz	r2, 8040e34 <__aeabi_uldivmod+0x18>
 8040e20:	2900      	cmp	r1, #0
 8040e22:	bf08      	it	eq
 8040e24:	2800      	cmpeq	r0, #0
 8040e26:	bf1c      	itt	ne
 8040e28:	f04f 31ff 	movne.w	r1, #4294967295
 8040e2c:	f04f 30ff 	movne.w	r0, #4294967295
 8040e30:	f000 b972 	b.w	8041118 <__aeabi_idiv0>
 8040e34:	f1ad 0c08 	sub.w	ip, sp, #8
 8040e38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8040e3c:	f000 f806 	bl	8040e4c <__udivmoddi4>
 8040e40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040e44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8040e48:	b004      	add	sp, #16
 8040e4a:	4770      	bx	lr

08040e4c <__udivmoddi4>:
 8040e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8040e50:	9e08      	ldr	r6, [sp, #32]
 8040e52:	4604      	mov	r4, r0
 8040e54:	4688      	mov	r8, r1
 8040e56:	2b00      	cmp	r3, #0
 8040e58:	d14b      	bne.n	8040ef2 <__udivmoddi4+0xa6>
 8040e5a:	428a      	cmp	r2, r1
 8040e5c:	4615      	mov	r5, r2
 8040e5e:	d967      	bls.n	8040f30 <__udivmoddi4+0xe4>
 8040e60:	fab2 f282 	clz	r2, r2
 8040e64:	b14a      	cbz	r2, 8040e7a <__udivmoddi4+0x2e>
 8040e66:	f1c2 0720 	rsb	r7, r2, #32
 8040e6a:	fa01 f302 	lsl.w	r3, r1, r2
 8040e6e:	fa20 f707 	lsr.w	r7, r0, r7
 8040e72:	4095      	lsls	r5, r2
 8040e74:	ea47 0803 	orr.w	r8, r7, r3
 8040e78:	4094      	lsls	r4, r2
 8040e7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8040e7e:	0c23      	lsrs	r3, r4, #16
 8040e80:	fbb8 f7fe 	udiv	r7, r8, lr
 8040e84:	fa1f fc85 	uxth.w	ip, r5
 8040e88:	fb0e 8817 	mls	r8, lr, r7, r8
 8040e8c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8040e90:	fb07 f10c 	mul.w	r1, r7, ip
 8040e94:	4299      	cmp	r1, r3
 8040e96:	d909      	bls.n	8040eac <__udivmoddi4+0x60>
 8040e98:	18eb      	adds	r3, r5, r3
 8040e9a:	f107 30ff 	add.w	r0, r7, #4294967295
 8040e9e:	f080 811b 	bcs.w	80410d8 <__udivmoddi4+0x28c>
 8040ea2:	4299      	cmp	r1, r3
 8040ea4:	f240 8118 	bls.w	80410d8 <__udivmoddi4+0x28c>
 8040ea8:	3f02      	subs	r7, #2
 8040eaa:	442b      	add	r3, r5
 8040eac:	1a5b      	subs	r3, r3, r1
 8040eae:	b2a4      	uxth	r4, r4
 8040eb0:	fbb3 f0fe 	udiv	r0, r3, lr
 8040eb4:	fb0e 3310 	mls	r3, lr, r0, r3
 8040eb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8040ebc:	fb00 fc0c 	mul.w	ip, r0, ip
 8040ec0:	45a4      	cmp	ip, r4
 8040ec2:	d909      	bls.n	8040ed8 <__udivmoddi4+0x8c>
 8040ec4:	192c      	adds	r4, r5, r4
 8040ec6:	f100 33ff 	add.w	r3, r0, #4294967295
 8040eca:	f080 8107 	bcs.w	80410dc <__udivmoddi4+0x290>
 8040ece:	45a4      	cmp	ip, r4
 8040ed0:	f240 8104 	bls.w	80410dc <__udivmoddi4+0x290>
 8040ed4:	3802      	subs	r0, #2
 8040ed6:	442c      	add	r4, r5
 8040ed8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8040edc:	eba4 040c 	sub.w	r4, r4, ip
 8040ee0:	2700      	movs	r7, #0
 8040ee2:	b11e      	cbz	r6, 8040eec <__udivmoddi4+0xa0>
 8040ee4:	40d4      	lsrs	r4, r2
 8040ee6:	2300      	movs	r3, #0
 8040ee8:	e9c6 4300 	strd	r4, r3, [r6]
 8040eec:	4639      	mov	r1, r7
 8040eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040ef2:	428b      	cmp	r3, r1
 8040ef4:	d909      	bls.n	8040f0a <__udivmoddi4+0xbe>
 8040ef6:	2e00      	cmp	r6, #0
 8040ef8:	f000 80eb 	beq.w	80410d2 <__udivmoddi4+0x286>
 8040efc:	2700      	movs	r7, #0
 8040efe:	e9c6 0100 	strd	r0, r1, [r6]
 8040f02:	4638      	mov	r0, r7
 8040f04:	4639      	mov	r1, r7
 8040f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040f0a:	fab3 f783 	clz	r7, r3
 8040f0e:	2f00      	cmp	r7, #0
 8040f10:	d147      	bne.n	8040fa2 <__udivmoddi4+0x156>
 8040f12:	428b      	cmp	r3, r1
 8040f14:	d302      	bcc.n	8040f1c <__udivmoddi4+0xd0>
 8040f16:	4282      	cmp	r2, r0
 8040f18:	f200 80fa 	bhi.w	8041110 <__udivmoddi4+0x2c4>
 8040f1c:	1a84      	subs	r4, r0, r2
 8040f1e:	eb61 0303 	sbc.w	r3, r1, r3
 8040f22:	2001      	movs	r0, #1
 8040f24:	4698      	mov	r8, r3
 8040f26:	2e00      	cmp	r6, #0
 8040f28:	d0e0      	beq.n	8040eec <__udivmoddi4+0xa0>
 8040f2a:	e9c6 4800 	strd	r4, r8, [r6]
 8040f2e:	e7dd      	b.n	8040eec <__udivmoddi4+0xa0>
 8040f30:	b902      	cbnz	r2, 8040f34 <__udivmoddi4+0xe8>
 8040f32:	deff      	udf	#255	; 0xff
 8040f34:	fab2 f282 	clz	r2, r2
 8040f38:	2a00      	cmp	r2, #0
 8040f3a:	f040 808f 	bne.w	804105c <__udivmoddi4+0x210>
 8040f3e:	1b49      	subs	r1, r1, r5
 8040f40:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8040f44:	fa1f f885 	uxth.w	r8, r5
 8040f48:	2701      	movs	r7, #1
 8040f4a:	fbb1 fcfe 	udiv	ip, r1, lr
 8040f4e:	0c23      	lsrs	r3, r4, #16
 8040f50:	fb0e 111c 	mls	r1, lr, ip, r1
 8040f54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8040f58:	fb08 f10c 	mul.w	r1, r8, ip
 8040f5c:	4299      	cmp	r1, r3
 8040f5e:	d907      	bls.n	8040f70 <__udivmoddi4+0x124>
 8040f60:	18eb      	adds	r3, r5, r3
 8040f62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8040f66:	d202      	bcs.n	8040f6e <__udivmoddi4+0x122>
 8040f68:	4299      	cmp	r1, r3
 8040f6a:	f200 80cd 	bhi.w	8041108 <__udivmoddi4+0x2bc>
 8040f6e:	4684      	mov	ip, r0
 8040f70:	1a59      	subs	r1, r3, r1
 8040f72:	b2a3      	uxth	r3, r4
 8040f74:	fbb1 f0fe 	udiv	r0, r1, lr
 8040f78:	fb0e 1410 	mls	r4, lr, r0, r1
 8040f7c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8040f80:	fb08 f800 	mul.w	r8, r8, r0
 8040f84:	45a0      	cmp	r8, r4
 8040f86:	d907      	bls.n	8040f98 <__udivmoddi4+0x14c>
 8040f88:	192c      	adds	r4, r5, r4
 8040f8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8040f8e:	d202      	bcs.n	8040f96 <__udivmoddi4+0x14a>
 8040f90:	45a0      	cmp	r8, r4
 8040f92:	f200 80b6 	bhi.w	8041102 <__udivmoddi4+0x2b6>
 8040f96:	4618      	mov	r0, r3
 8040f98:	eba4 0408 	sub.w	r4, r4, r8
 8040f9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8040fa0:	e79f      	b.n	8040ee2 <__udivmoddi4+0x96>
 8040fa2:	f1c7 0c20 	rsb	ip, r7, #32
 8040fa6:	40bb      	lsls	r3, r7
 8040fa8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8040fac:	ea4e 0e03 	orr.w	lr, lr, r3
 8040fb0:	fa01 f407 	lsl.w	r4, r1, r7
 8040fb4:	fa20 f50c 	lsr.w	r5, r0, ip
 8040fb8:	fa21 f30c 	lsr.w	r3, r1, ip
 8040fbc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8040fc0:	4325      	orrs	r5, r4
 8040fc2:	fbb3 f9f8 	udiv	r9, r3, r8
 8040fc6:	0c2c      	lsrs	r4, r5, #16
 8040fc8:	fb08 3319 	mls	r3, r8, r9, r3
 8040fcc:	fa1f fa8e 	uxth.w	sl, lr
 8040fd0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8040fd4:	fb09 f40a 	mul.w	r4, r9, sl
 8040fd8:	429c      	cmp	r4, r3
 8040fda:	fa02 f207 	lsl.w	r2, r2, r7
 8040fde:	fa00 f107 	lsl.w	r1, r0, r7
 8040fe2:	d90b      	bls.n	8040ffc <__udivmoddi4+0x1b0>
 8040fe4:	eb1e 0303 	adds.w	r3, lr, r3
 8040fe8:	f109 30ff 	add.w	r0, r9, #4294967295
 8040fec:	f080 8087 	bcs.w	80410fe <__udivmoddi4+0x2b2>
 8040ff0:	429c      	cmp	r4, r3
 8040ff2:	f240 8084 	bls.w	80410fe <__udivmoddi4+0x2b2>
 8040ff6:	f1a9 0902 	sub.w	r9, r9, #2
 8040ffa:	4473      	add	r3, lr
 8040ffc:	1b1b      	subs	r3, r3, r4
 8040ffe:	b2ad      	uxth	r5, r5
 8041000:	fbb3 f0f8 	udiv	r0, r3, r8
 8041004:	fb08 3310 	mls	r3, r8, r0, r3
 8041008:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 804100c:	fb00 fa0a 	mul.w	sl, r0, sl
 8041010:	45a2      	cmp	sl, r4
 8041012:	d908      	bls.n	8041026 <__udivmoddi4+0x1da>
 8041014:	eb1e 0404 	adds.w	r4, lr, r4
 8041018:	f100 33ff 	add.w	r3, r0, #4294967295
 804101c:	d26b      	bcs.n	80410f6 <__udivmoddi4+0x2aa>
 804101e:	45a2      	cmp	sl, r4
 8041020:	d969      	bls.n	80410f6 <__udivmoddi4+0x2aa>
 8041022:	3802      	subs	r0, #2
 8041024:	4474      	add	r4, lr
 8041026:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 804102a:	fba0 8902 	umull	r8, r9, r0, r2
 804102e:	eba4 040a 	sub.w	r4, r4, sl
 8041032:	454c      	cmp	r4, r9
 8041034:	46c2      	mov	sl, r8
 8041036:	464b      	mov	r3, r9
 8041038:	d354      	bcc.n	80410e4 <__udivmoddi4+0x298>
 804103a:	d051      	beq.n	80410e0 <__udivmoddi4+0x294>
 804103c:	2e00      	cmp	r6, #0
 804103e:	d069      	beq.n	8041114 <__udivmoddi4+0x2c8>
 8041040:	ebb1 050a 	subs.w	r5, r1, sl
 8041044:	eb64 0403 	sbc.w	r4, r4, r3
 8041048:	fa04 fc0c 	lsl.w	ip, r4, ip
 804104c:	40fd      	lsrs	r5, r7
 804104e:	40fc      	lsrs	r4, r7
 8041050:	ea4c 0505 	orr.w	r5, ip, r5
 8041054:	e9c6 5400 	strd	r5, r4, [r6]
 8041058:	2700      	movs	r7, #0
 804105a:	e747      	b.n	8040eec <__udivmoddi4+0xa0>
 804105c:	f1c2 0320 	rsb	r3, r2, #32
 8041060:	fa20 f703 	lsr.w	r7, r0, r3
 8041064:	4095      	lsls	r5, r2
 8041066:	fa01 f002 	lsl.w	r0, r1, r2
 804106a:	fa21 f303 	lsr.w	r3, r1, r3
 804106e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8041072:	4338      	orrs	r0, r7
 8041074:	0c01      	lsrs	r1, r0, #16
 8041076:	fbb3 f7fe 	udiv	r7, r3, lr
 804107a:	fa1f f885 	uxth.w	r8, r5
 804107e:	fb0e 3317 	mls	r3, lr, r7, r3
 8041082:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8041086:	fb07 f308 	mul.w	r3, r7, r8
 804108a:	428b      	cmp	r3, r1
 804108c:	fa04 f402 	lsl.w	r4, r4, r2
 8041090:	d907      	bls.n	80410a2 <__udivmoddi4+0x256>
 8041092:	1869      	adds	r1, r5, r1
 8041094:	f107 3cff 	add.w	ip, r7, #4294967295
 8041098:	d22f      	bcs.n	80410fa <__udivmoddi4+0x2ae>
 804109a:	428b      	cmp	r3, r1
 804109c:	d92d      	bls.n	80410fa <__udivmoddi4+0x2ae>
 804109e:	3f02      	subs	r7, #2
 80410a0:	4429      	add	r1, r5
 80410a2:	1acb      	subs	r3, r1, r3
 80410a4:	b281      	uxth	r1, r0
 80410a6:	fbb3 f0fe 	udiv	r0, r3, lr
 80410aa:	fb0e 3310 	mls	r3, lr, r0, r3
 80410ae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80410b2:	fb00 f308 	mul.w	r3, r0, r8
 80410b6:	428b      	cmp	r3, r1
 80410b8:	d907      	bls.n	80410ca <__udivmoddi4+0x27e>
 80410ba:	1869      	adds	r1, r5, r1
 80410bc:	f100 3cff 	add.w	ip, r0, #4294967295
 80410c0:	d217      	bcs.n	80410f2 <__udivmoddi4+0x2a6>
 80410c2:	428b      	cmp	r3, r1
 80410c4:	d915      	bls.n	80410f2 <__udivmoddi4+0x2a6>
 80410c6:	3802      	subs	r0, #2
 80410c8:	4429      	add	r1, r5
 80410ca:	1ac9      	subs	r1, r1, r3
 80410cc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80410d0:	e73b      	b.n	8040f4a <__udivmoddi4+0xfe>
 80410d2:	4637      	mov	r7, r6
 80410d4:	4630      	mov	r0, r6
 80410d6:	e709      	b.n	8040eec <__udivmoddi4+0xa0>
 80410d8:	4607      	mov	r7, r0
 80410da:	e6e7      	b.n	8040eac <__udivmoddi4+0x60>
 80410dc:	4618      	mov	r0, r3
 80410de:	e6fb      	b.n	8040ed8 <__udivmoddi4+0x8c>
 80410e0:	4541      	cmp	r1, r8
 80410e2:	d2ab      	bcs.n	804103c <__udivmoddi4+0x1f0>
 80410e4:	ebb8 0a02 	subs.w	sl, r8, r2
 80410e8:	eb69 020e 	sbc.w	r2, r9, lr
 80410ec:	3801      	subs	r0, #1
 80410ee:	4613      	mov	r3, r2
 80410f0:	e7a4      	b.n	804103c <__udivmoddi4+0x1f0>
 80410f2:	4660      	mov	r0, ip
 80410f4:	e7e9      	b.n	80410ca <__udivmoddi4+0x27e>
 80410f6:	4618      	mov	r0, r3
 80410f8:	e795      	b.n	8041026 <__udivmoddi4+0x1da>
 80410fa:	4667      	mov	r7, ip
 80410fc:	e7d1      	b.n	80410a2 <__udivmoddi4+0x256>
 80410fe:	4681      	mov	r9, r0
 8041100:	e77c      	b.n	8040ffc <__udivmoddi4+0x1b0>
 8041102:	3802      	subs	r0, #2
 8041104:	442c      	add	r4, r5
 8041106:	e747      	b.n	8040f98 <__udivmoddi4+0x14c>
 8041108:	f1ac 0c02 	sub.w	ip, ip, #2
 804110c:	442b      	add	r3, r5
 804110e:	e72f      	b.n	8040f70 <__udivmoddi4+0x124>
 8041110:	4638      	mov	r0, r7
 8041112:	e708      	b.n	8040f26 <__udivmoddi4+0xda>
 8041114:	4637      	mov	r7, r6
 8041116:	e6e9      	b.n	8040eec <__udivmoddi4+0xa0>

08041118 <__aeabi_idiv0>:
 8041118:	4770      	bx	lr
 804111a:	bf00      	nop

0804111c <assert_version>:
		return true;
	return false;
}

bool assert_version(uint8_t major_version, uint8_t minor_version, uint8_t patch_version){
	if(MAJOR_FIRMWARE_VERSION == major_version){ // Criar define para posições da versão
 804111c:	2801      	cmp	r0, #1
 804111e:	d105      	bne.n	804112c <assert_version+0x10>
		if (MINOR_FIRMWARE_VERSION == minor_version){
 8041120:	b939      	cbnz	r1, 8041132 <assert_version+0x16>
			if (PATCH_FIRMWARE_VERSION < patch_version){
 8041122:	2a04      	cmp	r2, #4
 8041124:	bf94      	ite	ls
 8041126:	2000      	movls	r0, #0
 8041128:	2001      	movhi	r0, #1
 804112a:	4770      	bx	lr
		}
		else if(MINOR_FIRMWARE_VERSION < minor_version){
			return true;
		}
	}
	else if (MAJOR_FIRMWARE_VERSION < major_version){
 804112c:	bf8c      	ite	hi
 804112e:	2001      	movhi	r0, #1
 8041130:	2000      	movls	r0, #0
		return true;
	}
	return false;
}
 8041132:	4770      	bx	lr

08041134 <break_connection>:
//	 if (comVAR==length)
//		 	return 1;
//	 else 	return 0;
//}

void break_connection(){
 8041134:	b510      	push	{r4, lr}

	HAL_GPIO_WritePin(BLE_BRK_GPIO_Port, BLE_BRK_Pin, RESET);		// Aciona o pino que interrompe a possível conexão errada.
 8041136:	4c07      	ldr	r4, [pc, #28]	; (8041154 <break_connection+0x20>)
 8041138:	2200      	movs	r2, #0
 804113a:	4620      	mov	r0, r4
 804113c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8041140:	f002 fcd2 	bl	8043ae8 <HAL_GPIO_WritePin>

	uint32_t aux = 0;
	while(aux<1*100000)
		aux++;

	HAL_GPIO_WritePin(BLE_BRK_GPIO_Port, BLE_BRK_Pin, SET);			// Se a conexão for quebrada, restaura a forma original.
 8041144:	4620      	mov	r0, r4
 8041146:	2201      	movs	r2, #1
 8041148:	f44f 7180 	mov.w	r1, #256	; 0x100

}
 804114c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(BLE_BRK_GPIO_Port, BLE_BRK_Pin, SET);			// Se a conexão for quebrada, restaura a forma original.
 8041150:	f002 bcca 	b.w	8043ae8 <HAL_GPIO_WritePin>
 8041154:	40020000 	.word	0x40020000

08041158 <clear_buffers>:

#if (DEVICE_TYPE == CURRAL)
void clear_buffers(){
	last_TAG = EMPTY_QUEUE;
 8041158:	4b04      	ldr	r3, [pc, #16]	; (804116c <clear_buffers+0x14>)
	memset(&store_TAG, 0, sizeof(store_TAG));
 804115a:	4805      	ldr	r0, [pc, #20]	; (8041170 <clear_buffers+0x18>)
	last_TAG = EMPTY_QUEUE;
 804115c:	f04f 32ff 	mov.w	r2, #4294967295
 8041160:	601a      	str	r2, [r3, #0]
	memset(&store_TAG, 0, sizeof(store_TAG));
 8041162:	2100      	movs	r1, #0
 8041164:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8041168:	f00b bc64 	b.w	804ca34 <memset>
 804116c:	20001000 	.word	0x20001000
 8041170:	20005274 	.word	0x20005274

08041174 <message_handler>:
{
 8041174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(TAG, message, pkg_length);					// Copia a TAG lida para o vetor
 8041178:	460a      	mov	r2, r1
{
 804117a:	460c      	mov	r4, r1
 804117c:	4680      	mov	r8, r0
	memcpy(TAG, message, pkg_length);					// Copia a TAG lida para o vetor
 804117e:	4601      	mov	r1, r0
 8041180:	4829      	ldr	r0, [pc, #164]	; (8041228 <message_handler+0xb4>)
 8041182:	4d29      	ldr	r5, [pc, #164]	; (8041228 <message_handler+0xb4>)
 8041184:	f00b fc4b 	bl	804ca1e <memcpy>
	if(pkg_length >= TAG_SIZE + 4/*- 1*/)
 8041188:	2c27      	cmp	r4, #39	; 0x27
 804118a:	dd43      	ble.n	8041214 <message_handler+0xa0>
		if(last_TAG>0){
 804118c:	4e27      	ldr	r6, [pc, #156]	; (804122c <message_handler+0xb8>)
		PRINTF("Tamanho = %d \r\n", pkg_length);
 804118e:	4828      	ldr	r0, [pc, #160]	; (8041230 <message_handler+0xbc>)
 8041190:	4621      	mov	r1, r4
 8041192:	f009 fcd7 	bl	804ab44 <TraceSend>
		if(last_TAG>0){
 8041196:	6837      	ldr	r7, [r6, #0]
 8041198:	2f00      	cmp	r7, #0
 804119a:	dd16      	ble.n	80411ca <message_handler+0x56>
			if(memcmp(&store_TAG[last_TAG-1], TAG, TAG_SIZE) != 0)	// Como a comparação é feita aqui, deve-se limpar o buffer 'message' depois
 804119c:	4825      	ldr	r0, [pc, #148]	; (8041234 <message_handler+0xc0>)
 804119e:	1e7b      	subs	r3, r7, #1
 80411a0:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 80411a4:	2224      	movs	r2, #36	; 0x24
 80411a6:	4629      	mov	r1, r5
 80411a8:	fb0c 0003 	mla	r0, ip, r3, r0
 80411ac:	f00b fc28 	bl	804ca00 <memcmp>
 80411b0:	b138      	cbz	r0, 80411c2 <message_handler+0x4e>
				memset(message, 0, TAG_SIZE);				// Limpa buffer de mensagem para nova recepção
 80411b2:	2224      	movs	r2, #36	; 0x24
 80411b4:	2100      	movs	r1, #0
 80411b6:	4640      	mov	r0, r8
 80411b8:	f00b fc3c 	bl	804ca34 <memset>
				return 2;									// Código de retorno quando a TAG lida é igual a lida anteriormente
 80411bc:	2002      	movs	r0, #2
}
 80411be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if(last_TAG == STORAGE_SIZE - 1){			// Se for vista a ultima TAG, então começa a sobreescrever
 80411c2:	2fc7      	cmp	r7, #199	; 0xc7
 80411c4:	d101      	bne.n	80411ca <message_handler+0x56>
			clear_buffers();
 80411c6:	f7ff ffc7 	bl	8041158 <clear_buffers>
	uint8_t total_de_brincos = (pkg_length - 4) / TAG_SIZE;
 80411ca:	2324      	movs	r3, #36	; 0x24
			memcpy(store_TAG[++last_TAG].N_TAG, &TAG[(i*TAG_SIZE)], TAG_SIZE-1);
 80411cc:	f8df c064 	ldr.w	ip, [pc, #100]	; 8041234 <message_handler+0xc0>
	uint8_t total_de_brincos = (pkg_length - 4) / TAG_SIZE;
 80411d0:	3c04      	subs	r4, #4
 80411d2:	2100      	movs	r1, #0
 80411d4:	fb94 f4f3 	sdiv	r4, r4, r3
			memcpy(store_TAG[++last_TAG].N_TAG, &TAG[(i*TAG_SIZE)], TAG_SIZE-1);
 80411d8:	273c      	movs	r7, #60	; 0x3c
 80411da:	b2e4      	uxtb	r4, r4
 80411dc:	4618      	mov	r0, r3
		for (int i=0; i<total_de_brincos;i++){
 80411de:	42a1      	cmp	r1, r4
 80411e0:	db01      	blt.n	80411e6 <message_handler+0x72>
		return 1;							// Confirmação que foi lida e armazenada uma TAG
 80411e2:	2001      	movs	r0, #1
 80411e4:	e7eb      	b.n	80411be <message_handler+0x4a>
			memcpy(store_TAG[++last_TAG].N_TAG, &TAG[(i*TAG_SIZE)], TAG_SIZE-1);
 80411e6:	6833      	ldr	r3, [r6, #0]
 80411e8:	fb00 5201 	mla	r2, r0, r1, r5
 80411ec:	3301      	adds	r3, #1
 80411ee:	6033      	str	r3, [r6, #0]
 80411f0:	f102 0e20 	add.w	lr, r2, #32
 80411f4:	fb07 c303 	mla	r3, r7, r3, ip
 80411f8:	f852 8b04 	ldr.w	r8, [r2], #4
 80411fc:	f843 8b04 	str.w	r8, [r3], #4
 8041200:	4572      	cmp	r2, lr
 8041202:	d1f9      	bne.n	80411f8 <message_handler+0x84>
 8041204:	f8b2 e000 	ldrh.w	lr, [r2]
 8041208:	f8a3 e000 	strh.w	lr, [r3]
 804120c:	7892      	ldrb	r2, [r2, #2]
 804120e:	709a      	strb	r2, [r3, #2]
		for (int i=0; i<total_de_brincos;i++){
 8041210:	3101      	adds	r1, #1
 8041212:	e7e4      	b.n	80411de <message_handler+0x6a>
		if (pkg_length == MSG_RFID_SIZE+1) // Em caso de retorno padrão, sem leitura de TAG. Passa 0xFF ao vetor TAG
 8041214:	2c04      	cmp	r4, #4
 8041216:	d104      	bne.n	8041222 <message_handler+0xae>
			memset(TAG, 255, TAG_SIZE);
 8041218:	2224      	movs	r2, #36	; 0x24
 804121a:	21ff      	movs	r1, #255	; 0xff
 804121c:	4628      	mov	r0, r5
 804121e:	f00b fc09 	bl	804ca34 <memset>
		return 0;                            // Sinaliza retorno padrão ou de ID
 8041222:	2000      	movs	r0, #0
 8041224:	e7cb      	b.n	80411be <message_handler+0x4a>
 8041226:	bf00      	nop
 8041228:	2000116c 	.word	0x2000116c
 804122c:	20001000 	.word	0x20001000
 8041230:	0804e6fc 	.word	0x0804e6fc
 8041234:	20005274 	.word	0x20005274

08041238 <ble_handler>:
{
 8041238:	b538      	push	{r3, r4, r5, lr}
	switch (message[1]) {
 804123a:	7842      	ldrb	r2, [r0, #1]
 804123c:	2a60      	cmp	r2, #96	; 0x60
{
 804123e:	4603      	mov	r3, r0
	switch (message[1]) {
 8041240:	d019      	beq.n	8041276 <ble_handler+0x3e>
 8041242:	d809      	bhi.n	8041258 <ble_handler+0x20>
 8041244:	2a21      	cmp	r2, #33	; 0x21
 8041246:	d05f      	beq.n	8041308 <ble_handler+0xd0>
 8041248:	2a22      	cmp	r2, #34	; 0x22
 804124a:	d061      	beq.n	8041310 <ble_handler+0xd8>
 804124c:	2a20      	cmp	r2, #32
 804124e:	d124      	bne.n	804129a <ble_handler+0x62>
			HAL_UART_Transmit(&huart1, (uint8_t *) &answer_firmware_version_buffer, sizeof(answer_firmware_version_buffer), 100);
 8041250:	2364      	movs	r3, #100	; 0x64
 8041252:	2206      	movs	r2, #6
 8041254:	493b      	ldr	r1, [pc, #236]	; (8041344 <ble_handler+0x10c>)
 8041256:	e053      	b.n	8041300 <ble_handler+0xc8>
	switch (message[1]) {
 8041258:	2a65      	cmp	r2, #101	; 0x65
 804125a:	d03b      	beq.n	80412d4 <ble_handler+0x9c>
 804125c:	2a6f      	cmp	r2, #111	; 0x6f
 804125e:	d028      	beq.n	80412b2 <ble_handler+0x7a>
 8041260:	2a61      	cmp	r2, #97	; 0x61
 8041262:	d11a      	bne.n	804129a <ble_handler+0x62>
			flags_ble.confirm = SET;
 8041264:	4a38      	ldr	r2, [pc, #224]	; (8041348 <ble_handler+0x110>)
			PRINTF("====>   confirm = SET \r\n");
 8041266:	4839      	ldr	r0, [pc, #228]	; (804134c <ble_handler+0x114>)
			flags_ble.confirm = SET;
 8041268:	7813      	ldrb	r3, [r2, #0]
 804126a:	f043 0304 	orr.w	r3, r3, #4
 804126e:	7013      	strb	r3, [r2, #0]
			PRINTF("====>   confirm = SET \r\n");
 8041270:	f009 fc68 	bl	804ab44 <TraceSend>
			break;
 8041274:	e011      	b.n	804129a <ble_handler+0x62>
			if(flags_ble.connection == SET)
 8041276:	4c34      	ldr	r4, [pc, #208]	; (8041348 <ble_handler+0x110>)
 8041278:	7823      	ldrb	r3, [r4, #0]
 804127a:	f013 0508 	ands.w	r5, r3, #8
 804127e:	d00e      	beq.n	804129e <ble_handler+0x66>
				HAL_UART_Transmit(&huart1, (uint8_t *)BLE_ESTABLISHED_CONNECTION, MSG_CONNECTION_ESTABLISHED_SIZE, 100);
 8041280:	2364      	movs	r3, #100	; 0x64
 8041282:	2203      	movs	r2, #3
 8041284:	4932      	ldr	r1, [pc, #200]	; (8041350 <ble_handler+0x118>)
 8041286:	4833      	ldr	r0, [pc, #204]	; (8041354 <ble_handler+0x11c>)
 8041288:	f004 fc64 	bl	8045b54 <HAL_UART_Transmit>
			  	HAL_TIM_Base_Start_IT(&htim2);			// Inicia o timer que envia as requisições para o módulo RFID
 804128c:	4832      	ldr	r0, [pc, #200]	; (8041358 <ble_handler+0x120>)
 804128e:	f004 f946 	bl	804551e <HAL_TIM_Base_Start_IT>
			  	flags_ble.start = SET;
 8041292:	7823      	ldrb	r3, [r4, #0]
 8041294:	f043 0301 	orr.w	r3, r3, #1
 8041298:	7023      	strb	r3, [r4, #0]
}
 804129a:	2000      	movs	r0, #0
 804129c:	bd38      	pop	{r3, r4, r5, pc}
				HAL_TIM_Base_Stop_IT(&htim2);			// Para momentâneamente as requisições e leituras de TAG para requisição do ID do RFID
 804129e:	482e      	ldr	r0, [pc, #184]	; (8041358 <ble_handler+0x120>)
 80412a0:	f004 f94d 	bl	804553e <HAL_TIM_Base_Stop_IT>
				flags_ble.start = RESET;						// Reseta a flag de inicio da comunicação
 80412a4:	7823      	ldrb	r3, [r4, #0]
 80412a6:	f365 0300 	bfi	r3, r5, #0, #1
 80412aa:	7023      	strb	r3, [r4, #0]
			break_connection();						// Função de quebra de conexão
 80412ac:	f7ff ff42 	bl	8041134 <break_connection>
			break;
 80412b0:	e7f3      	b.n	804129a <ble_handler+0x62>
			HAL_TIM_Base_Stop_IT(&htim2);			// Para momentâneamente as requisições e leituras de TAG
 80412b2:	4829      	ldr	r0, [pc, #164]	; (8041358 <ble_handler+0x120>)
 80412b4:	f004 f943 	bl	804553e <HAL_TIM_Base_Stop_IT>
			flags_ble.start = RESET;						// Reseta a flag de inicio da comunicação
 80412b8:	4b23      	ldr	r3, [pc, #140]	; (8041348 <ble_handler+0x110>)
			HAL_UART_Transmit(&huart1, (uint8_t *) answer_end_connection, 3, 100);
 80412ba:	4928      	ldr	r1, [pc, #160]	; (804135c <ble_handler+0x124>)
			flags_ble.start = RESET;						// Reseta a flag de inicio da comunicação
 80412bc:	781a      	ldrb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, (uint8_t *) answer_end_connection, 3, 100);
 80412be:	4825      	ldr	r0, [pc, #148]	; (8041354 <ble_handler+0x11c>)
			flags_ble.start = RESET;						// Reseta a flag de inicio da comunicação
 80412c0:	f36f 0200 	bfc	r2, #0, #1
 80412c4:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, (uint8_t *) answer_end_connection, 3, 100);
 80412c6:	2364      	movs	r3, #100	; 0x64
 80412c8:	2203      	movs	r2, #3
 80412ca:	f004 fc43 	bl	8045b54 <HAL_UART_Transmit>
		  	clear_buffers();
 80412ce:	f7ff ff43 	bl	8041158 <clear_buffers>
 80412d2:	e7eb      	b.n	80412ac <ble_handler+0x74>
	switch (message[1]) {
 80412d4:	2102      	movs	r1, #2
				if(message[sizeofEarring] == 0x0D)
 80412d6:	5c58      	ldrb	r0, [r3, r1]
 80412d8:	280d      	cmp	r0, #13
 80412da:	b2ca      	uxtb	r2, r1
 80412dc:	d003      	beq.n	80412e6 <ble_handler+0xae>
 80412de:	3101      	adds	r1, #1
			for (sizeofEarring=2; sizeofEarring<TAG_SIZE; sizeofEarring++)
 80412e0:	2924      	cmp	r1, #36	; 0x24
 80412e2:	d1f8      	bne.n	80412d6 <ble_handler+0x9e>
 80412e4:	460a      	mov	r2, r1
			sizeofEarring -= 2;
 80412e6:	3a02      	subs	r2, #2
 80412e8:	b2d2      	uxtb	r2, r2
			memcpy(&MSG_WRITE_EARRING[initialPosition], &message[2], sizeofEarring );
 80412ea:	4c1d      	ldr	r4, [pc, #116]	; (8041360 <ble_handler+0x128>)
			initialPosition = (MSG_WRITE_EARRING_SIZE-1) - sizeofEarring;
 80412ec:	f1c2 0020 	rsb	r0, r2, #32
			memcpy(&MSG_WRITE_EARRING[initialPosition], &message[2], sizeofEarring );
 80412f0:	1c99      	adds	r1, r3, #2
 80412f2:	fa54 f080 	uxtab	r0, r4, r0
 80412f6:	f00b fb92 	bl	804ca1e <memcpy>
			HAL_UART_Transmit(&huart1, (uint8_t *) MSG_WRITE_EARRING, MSG_WRITE_EARRING_SIZE, 100);
 80412fa:	2364      	movs	r3, #100	; 0x64
 80412fc:	2221      	movs	r2, #33	; 0x21
 80412fe:	4621      	mov	r1, r4
				HAL_UART_Transmit(&huart1, (uint8_t *) &answer_wrong_file_buffer, sizeof(answer_wrong_file_buffer), 100);
 8041300:	4814      	ldr	r0, [pc, #80]	; (8041354 <ble_handler+0x11c>)
 8041302:	f004 fc27 	bl	8045b54 <HAL_UART_Transmit>
 8041306:	e7c8      	b.n	804129a <ble_handler+0x62>
			HAL_UART_Transmit(&huart1, (uint8_t *) &answer_device_type,sizeof(answer_device_type),100);
 8041308:	2364      	movs	r3, #100	; 0x64
 804130a:	2204      	movs	r2, #4
 804130c:	4915      	ldr	r1, [pc, #84]	; (8041364 <ble_handler+0x12c>)
 804130e:	e7f7      	b.n	8041300 <ble_handler+0xc8>
			if(assert_version(message[2], message[3], message[4])){
 8041310:	7902      	ldrb	r2, [r0, #4]
 8041312:	78c1      	ldrb	r1, [r0, #3]
 8041314:	7880      	ldrb	r0, [r0, #2]
 8041316:	f7ff ff01 	bl	804111c <assert_version>
 804131a:	b178      	cbz	r0, 804133c <ble_handler+0x104>
	if (DEVICE_TYPE == device_type)
 804131c:	795b      	ldrb	r3, [r3, #5]
 804131e:	2b02      	cmp	r3, #2
 8041320:	d108      	bne.n	8041334 <ble_handler+0xfc>
					flags_ble.update_mode = SET;
 8041322:	4a09      	ldr	r2, [pc, #36]	; (8041348 <ble_handler+0x110>)
					HAL_UART_Transmit(&huart1, (uint8_t *) &answer_execute_update_buffer, sizeof(answer_execute_update_buffer), 100);
 8041324:	4910      	ldr	r1, [pc, #64]	; (8041368 <ble_handler+0x130>)
					flags_ble.update_mode = SET;
 8041326:	7813      	ldrb	r3, [r2, #0]
 8041328:	f043 0310 	orr.w	r3, r3, #16
 804132c:	7013      	strb	r3, [r2, #0]
					HAL_UART_Transmit(&huart1, (uint8_t *) &answer_execute_update_buffer, sizeof(answer_execute_update_buffer), 100);
 804132e:	2364      	movs	r3, #100	; 0x64
 8041330:	2203      	movs	r2, #3
 8041332:	e7e5      	b.n	8041300 <ble_handler+0xc8>
					HAL_UART_Transmit(&huart1, (uint8_t *) &answer_wrong_device_type, sizeof(answer_wrong_device_type),100);
 8041334:	2364      	movs	r3, #100	; 0x64
 8041336:	2203      	movs	r2, #3
 8041338:	490c      	ldr	r1, [pc, #48]	; (804136c <ble_handler+0x134>)
 804133a:	e7e1      	b.n	8041300 <ble_handler+0xc8>
				HAL_UART_Transmit(&huart1, (uint8_t *) &answer_wrong_file_buffer, sizeof(answer_wrong_file_buffer), 100);
 804133c:	2364      	movs	r3, #100	; 0x64
 804133e:	2203      	movs	r2, #3
 8041340:	490b      	ldr	r1, [pc, #44]	; (8041370 <ble_handler+0x138>)
 8041342:	e7dd      	b.n	8041300 <ble_handler+0xc8>
 8041344:	2000102f 	.word	0x2000102f
 8041348:	20009b48 	.word	0x20009b48
 804134c:	0804e70c 	.word	0x0804e70c
 8041350:	20001004 	.word	0x20001004
 8041354:	20009b4c 	.word	0x20009b4c
 8041358:	2000bda0 	.word	0x2000bda0
 804135c:	20001007 	.word	0x20001007
 8041360:	2000100a 	.word	0x2000100a
 8041364:	2000102b 	.word	0x2000102b
 8041368:	20001035 	.word	0x20001035
 804136c:	20001038 	.word	0x20001038
 8041370:	2000103b 	.word	0x2000103b

08041374 <MX_USART1_UART_Init>:
  * @retval None
  */
void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 8041374:	480b      	ldr	r0, [pc, #44]	; (80413a4 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 9600;
 8041376:	4a0c      	ldr	r2, [pc, #48]	; (80413a8 <MX_USART1_UART_Init+0x34>)
{
 8041378:	b508      	push	{r3, lr}
  huart1.Init.BaudRate = 9600;
 804137a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 804137e:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8041382:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8041384:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8041386:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 804138a:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 804138c:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8041390:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8041392:	f004 fb99 	bl	8045ac8 <HAL_UART_Init>
 8041396:	b118      	cbz	r0, 80413a0 <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8041398:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 804139c:	f009 bcd0 	b.w	804ad40 <Error_Handler>
}
 80413a0:	bd08      	pop	{r3, pc}
 80413a2:	bf00      	nop
 80413a4:	20009b4c 	.word	0x20009b4c
 80413a8:	40011000 	.word	0x40011000

080413ac <MX_USART2_UART_Init>:
  * @retval None
  */
void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
 80413ac:	480b      	ldr	r0, [pc, #44]	; (80413dc <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 38400;
 80413ae:	4a0c      	ldr	r2, [pc, #48]	; (80413e0 <MX_USART2_UART_Init+0x34>)
{
 80413b0:	b508      	push	{r3, lr}
  huart2.Init.BaudRate = 38400;
 80413b2:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80413b6:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80413ba:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80413bc:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80413be:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Parity = UART_PARITY_NONE;
 80413c2:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80413c4:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80413c8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80413ca:	f004 fb7d 	bl	8045ac8 <HAL_UART_Init>
 80413ce:	b118      	cbz	r0, 80413d8 <MX_USART2_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 80413d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80413d4:	f009 bcb4 	b.w	804ad40 <Error_Handler>
}
 80413d8:	bd08      	pop	{r3, pc}
 80413da:	bf00      	nop
 80413dc:	20009b8c 	.word	0x20009b8c
 80413e0:	40004400 	.word	0x40004400

080413e4 <Ble_Init_GPIO>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void Ble_Init_GPIO(void)
{
 80413e4:	b530      	push	{r4, r5, lr}
 80413e6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80413e8:	2214      	movs	r2, #20
 80413ea:	2100      	movs	r1, #0
 80413ec:	a803      	add	r0, sp, #12
 80413ee:	f00b fb21 	bl	804ca34 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80413f2:	2400      	movs	r4, #0
 80413f4:	4b18      	ldr	r3, [pc, #96]	; (8041458 <Ble_Init_GPIO+0x74>)
 80413f6:	9401      	str	r4, [sp, #4]
 80413f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_BRK_GPIO_Port, BLE_BRK_Pin, GPIO_PIN_SET);
 80413fa:	4d18      	ldr	r5, [pc, #96]	; (804145c <Ble_Init_GPIO+0x78>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80413fc:	f042 0201 	orr.w	r2, r2, #1
 8041400:	631a      	str	r2, [r3, #48]	; 0x30
 8041402:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8041404:	f002 0201 	and.w	r2, r2, #1
 8041408:	9201      	str	r2, [sp, #4]
 804140a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 804140c:	9402      	str	r4, [sp, #8]
 804140e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8041410:	f042 0202 	orr.w	r2, r2, #2
 8041414:	631a      	str	r2, [r3, #48]	; 0x30
 8041416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041418:	f003 0302 	and.w	r3, r3, #2
 804141c:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(BLE_BRK_GPIO_Port, BLE_BRK_Pin, GPIO_PIN_SET);
 804141e:	4628      	mov	r0, r5
 8041420:	2201      	movs	r2, #1
 8041422:	f44f 7180 	mov.w	r1, #256	; 0x100
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8041426:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(BLE_BRK_GPIO_Port, BLE_BRK_Pin, GPIO_PIN_SET);
 8041428:	f002 fb5e 	bl	8043ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLE_BRK_Pin */
  GPIO_InitStruct.Pin = BLE_BRK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 804142c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8041430:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(BLE_BRK_GPIO_Port, &GPIO_InitStruct);
 8041432:	a903      	add	r1, sp, #12
 8041434:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8041436:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804143a:	e9cd 3405 	strd	r3, r4, [sp, #20]
  HAL_GPIO_Init(BLE_BRK_GPIO_Port, &GPIO_InitStruct);
 804143e:	f002 f9df 	bl	8043800 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_STATE_Pin */
  GPIO_InitStruct.Pin = BLE_STATE_Pin;
 8041442:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BLE_STATE_GPIO_Port, &GPIO_InitStruct);
 8041446:	a903      	add	r1, sp, #12
 8041448:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 804144a:	e9cd 3403 	strd	r3, r4, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 804144e:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(BLE_STATE_GPIO_Port, &GPIO_InitStruct);
 8041450:	f002 f9d6 	bl	8043800 <HAL_GPIO_Init>

}
 8041454:	b009      	add	sp, #36	; 0x24
 8041456:	bd30      	pop	{r4, r5, pc}
 8041458:	40023800 	.word	0x40023800
 804145c:	40020000 	.word	0x40020000

08041460 <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8041460:	b510      	push	{r4, lr}
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 8041462:	4909      	ldr	r1, [pc, #36]	; (8041488 <GetFskBandwidthRegValue+0x28>)
{
 8041464:	2300      	movs	r3, #0
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 8041466:	f851 4033 	ldr.w	r4, [r1, r3, lsl #3]
 804146a:	4284      	cmp	r4, r0
 804146c:	ea4f 02c3 	mov.w	r2, r3, lsl #3
 8041470:	d803      	bhi.n	804147a <GetFskBandwidthRegValue+0x1a>
 8041472:	440a      	add	r2, r1
 8041474:	6894      	ldr	r4, [r2, #8]
 8041476:	4284      	cmp	r4, r0
 8041478:	d803      	bhi.n	8041482 <GetFskBandwidthRegValue+0x22>
 804147a:	3301      	adds	r3, #1
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 804147c:	2b15      	cmp	r3, #21
 804147e:	d1f2      	bne.n	8041466 <GetFskBandwidthRegValue+0x6>
 8041480:	e7fe      	b.n	8041480 <GetFskBandwidthRegValue+0x20>
        {
            return FskBandwidths[i].RegValue;
 8041482:	7910      	ldrb	r0, [r2, #4]
        }
    }
    // ERROR: Value not found
    while( 1 );
}
 8041484:	bd10      	pop	{r4, pc}
 8041486:	bf00      	nop
 8041488:	0804e118 	.word	0x0804e118

0804148c <SX1276OnDio4Irq>:
    }
}

void SX1276OnDio4Irq( void* context )
{
    switch( SX1276.Settings.Modem )
 804148c:	4b04      	ldr	r3, [pc, #16]	; (80414a0 <SX1276OnDio4Irq+0x14>)
 804148e:	795a      	ldrb	r2, [r3, #5]
 8041490:	b92a      	cbnz	r2, 804149e <SX1276OnDio4Irq+0x12>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8041492:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8041496:	b912      	cbnz	r2, 804149e <SX1276OnDio4Irq+0x12>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8041498:	2201      	movs	r2, #1
 804149a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 804149e:	4770      	bx	lr
 80414a0:	20009c00 	.word	0x20009c00

080414a4 <SX1276BoardInit>:
    LoRaBoardCallbacks =callbacks;
 80414a4:	4b01      	ldr	r3, [pc, #4]	; (80414ac <SX1276BoardInit+0x8>)
 80414a6:	6018      	str	r0, [r3, #0]
}
 80414a8:	4770      	bx	lr
 80414aa:	bf00      	nop
 80414ac:	20008380 	.word	0x20008380

080414b0 <SX1276GetStatus>:
}
 80414b0:	4b01      	ldr	r3, [pc, #4]	; (80414b8 <SX1276GetStatus+0x8>)
 80414b2:	7918      	ldrb	r0, [r3, #4]
 80414b4:	4770      	bx	lr
 80414b6:	bf00      	nop
 80414b8:	20009c00 	.word	0x20009c00

080414bc <SX1276Reset>:
{
 80414bc:	b530      	push	{r4, r5, lr}
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 80414be:	4d12      	ldr	r5, [pc, #72]	; (8041508 <SX1276Reset+0x4c>)
{
 80414c0:	b087      	sub	sp, #28
    initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 80414c2:	2401      	movs	r4, #1
    GPIO_InitTypeDef initStruct = { 0 };
 80414c4:	2214      	movs	r2, #20
 80414c6:	2100      	movs	r1, #0
 80414c8:	a801      	add	r0, sp, #4
 80414ca:	f00b fab3 	bl	804ca34 <memset>
    initStruct.Speed = GPIO_SPEED_HIGH;
 80414ce:	2303      	movs	r3, #3
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 80414d0:	aa01      	add	r2, sp, #4
 80414d2:	4621      	mov	r1, r4
 80414d4:	4628      	mov	r0, r5
    initStruct.Speed = GPIO_SPEED_HIGH;
 80414d6:	9304      	str	r3, [sp, #16]
    initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 80414d8:	9402      	str	r4, [sp, #8]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 80414da:	f009 fe0f 	bl	804b0fc <HW_GPIO_Init>
    HW_GPIO_Write( RADIO_RESET_PORT, RADIO_RESET_PIN, 0 );
 80414de:	4621      	mov	r1, r4
 80414e0:	2200      	movs	r2, #0
 80414e2:	4628      	mov	r0, r5
 80414e4:	f009 fe8c 	bl	804b200 <HW_GPIO_Write>
    DelayMs( 1 );
 80414e8:	4620      	mov	r0, r4
 80414ea:	f00a fc45 	bl	804bd78 <HAL_Delay>
    initStruct.Mode = GPIO_NOPULL;
 80414ee:	2300      	movs	r3, #0
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 80414f0:	aa01      	add	r2, sp, #4
 80414f2:	4621      	mov	r1, r4
 80414f4:	4628      	mov	r0, r5
    initStruct.Mode = GPIO_NOPULL;
 80414f6:	9302      	str	r3, [sp, #8]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 80414f8:	f009 fe00 	bl	804b0fc <HW_GPIO_Init>
    DelayMs( 6 );
 80414fc:	2006      	movs	r0, #6
 80414fe:	f00a fc3b 	bl	804bd78 <HAL_Delay>
}
 8041502:	b007      	add	sp, #28
 8041504:	bd30      	pop	{r4, r5, pc}
 8041506:	bf00      	nop
 8041508:	40020400 	.word	0x40020400

0804150c <SX1276WriteBuffer>:
{
 804150c:	b570      	push	{r4, r5, r6, lr}
 804150e:	4606      	mov	r6, r0
 8041510:	460c      	mov	r4, r1
 8041512:	4615      	mov	r5, r2
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 8041514:	2102      	movs	r1, #2
 8041516:	2200      	movs	r2, #0
 8041518:	480b      	ldr	r0, [pc, #44]	; (8041548 <SX1276WriteBuffer+0x3c>)
 804151a:	f009 fe71 	bl	804b200 <HW_GPIO_Write>
    HW_SPI_InOut( addr | 0x80 );
 804151e:	f046 0080 	orr.w	r0, r6, #128	; 0x80
 8041522:	f00a f911 	bl	804b748 <HW_SPI_InOut>
 8041526:	3c01      	subs	r4, #1
 8041528:	4425      	add	r5, r4
    for( i = 0; i < size; i++ )
 804152a:	42ac      	cmp	r4, r5
 804152c:	d106      	bne.n	804153c <SX1276WriteBuffer+0x30>
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 804152e:	2201      	movs	r2, #1
 8041530:	2102      	movs	r1, #2
 8041532:	4805      	ldr	r0, [pc, #20]	; (8041548 <SX1276WriteBuffer+0x3c>)
}
 8041534:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 8041538:	f009 be62 	b.w	804b200 <HW_GPIO_Write>
        HW_SPI_InOut( buffer[i] );
 804153c:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8041540:	f00a f902 	bl	804b748 <HW_SPI_InOut>
 8041544:	e7f1      	b.n	804152a <SX1276WriteBuffer+0x1e>
 8041546:	bf00      	nop
 8041548:	40020400 	.word	0x40020400

0804154c <SX1276Write>:
{
 804154c:	b507      	push	{r0, r1, r2, lr}
 804154e:	ab02      	add	r3, sp, #8
    SX1276WriteBuffer( addr, &data, 1 );
 8041550:	2201      	movs	r2, #1
{
 8041552:	f803 1d01 	strb.w	r1, [r3, #-1]!
    SX1276WriteBuffer( addr, &data, 1 );
 8041556:	4619      	mov	r1, r3
 8041558:	f7ff ffd8 	bl	804150c <SX1276WriteBuffer>
}
 804155c:	b003      	add	sp, #12
 804155e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08041564 <SX1276SetChannel>:
    SX1276.Settings.Channel = freq;
 8041564:	4b10      	ldr	r3, [pc, #64]	; (80415a8 <SX1276SetChannel+0x44>)
{
 8041566:	b510      	push	{r4, lr}
    SX1276.Settings.Channel = freq;
 8041568:	6098      	str	r0, [r3, #8]
    SX_FREQ_TO_CHANNEL( channel, freq );
 804156a:	f643 5309 	movw	r3, #15625	; 0x3d09
 804156e:	f641 6484 	movw	r4, #7812	; 0x1e84
 8041572:	fbb0 f2f3 	udiv	r2, r0, r3
 8041576:	fb03 0012 	mls	r0, r3, r2, r0
 804157a:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 804157e:	fbb4 f4f3 	udiv	r4, r4, r3
 8041582:	eb04 2402 	add.w	r4, r4, r2, lsl #8
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 8041586:	f3c4 4107 	ubfx	r1, r4, #16, #8
 804158a:	2006      	movs	r0, #6
 804158c:	f7ff ffde 	bl	804154c <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 8041590:	f3c4 2107 	ubfx	r1, r4, #8, #8
 8041594:	2007      	movs	r0, #7
 8041596:	f7ff ffd9 	bl	804154c <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 804159a:	b2e1      	uxtb	r1, r4
 804159c:	2008      	movs	r0, #8
}
 804159e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 80415a2:	f7ff bfd3 	b.w	804154c <SX1276Write>
 80415a6:	bf00      	nop
 80415a8:	20009c00 	.word	0x20009c00

080415ac <SX1276ReadBuffer>:
{
 80415ac:	b570      	push	{r4, r5, r6, lr}
 80415ae:	4606      	mov	r6, r0
 80415b0:	460c      	mov	r4, r1
 80415b2:	4615      	mov	r5, r2
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 80415b4:	2102      	movs	r1, #2
 80415b6:	2200      	movs	r2, #0
 80415b8:	480b      	ldr	r0, [pc, #44]	; (80415e8 <SX1276ReadBuffer+0x3c>)
 80415ba:	f009 fe21 	bl	804b200 <HW_GPIO_Write>
    HW_SPI_InOut( addr & 0x7F );
 80415be:	f006 007f 	and.w	r0, r6, #127	; 0x7f
 80415c2:	f00a f8c1 	bl	804b748 <HW_SPI_InOut>
 80415c6:	3c01      	subs	r4, #1
 80415c8:	4425      	add	r5, r4
    for( i = 0; i < size; i++ )
 80415ca:	42ac      	cmp	r4, r5
 80415cc:	d106      	bne.n	80415dc <SX1276ReadBuffer+0x30>
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 80415ce:	2201      	movs	r2, #1
 80415d0:	2102      	movs	r1, #2
 80415d2:	4805      	ldr	r0, [pc, #20]	; (80415e8 <SX1276ReadBuffer+0x3c>)
}
 80415d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 80415d8:	f009 be12 	b.w	804b200 <HW_GPIO_Write>
        buffer[i] = HW_SPI_InOut( 0 );
 80415dc:	2000      	movs	r0, #0
 80415de:	f00a f8b3 	bl	804b748 <HW_SPI_InOut>
 80415e2:	f804 0f01 	strb.w	r0, [r4, #1]!
 80415e6:	e7f0      	b.n	80415ca <SX1276ReadBuffer+0x1e>
 80415e8:	40020400 	.word	0x40020400

080415ec <SX1276Read>:
{
 80415ec:	b507      	push	{r0, r1, r2, lr}
    SX1276ReadBuffer( addr, &data, 1 );
 80415ee:	2201      	movs	r2, #1
 80415f0:	f10d 0107 	add.w	r1, sp, #7
 80415f4:	f7ff ffda 	bl	80415ac <SX1276ReadBuffer>
}
 80415f8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80415fc:	b003      	add	sp, #12
 80415fe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08041604 <RxChainCalibration>:
{
 8041604:	b538      	push	{r3, r4, r5, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 8041606:	2009      	movs	r0, #9
 8041608:	f7ff fff0 	bl	80415ec <SX1276Read>
 804160c:	4605      	mov	r5, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 804160e:	2006      	movs	r0, #6
 8041610:	f7ff ffec 	bl	80415ec <SX1276Read>
 8041614:	4604      	mov	r4, r0
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 8041616:	2007      	movs	r0, #7
 8041618:	f7ff ffe8 	bl	80415ec <SX1276Read>
 804161c:	0200      	lsls	r0, r0, #8
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 804161e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 8041622:	2008      	movs	r0, #8
 8041624:	f7ff ffe2 	bl	80415ec <SX1276Read>
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8041628:	4320      	orrs	r0, r4
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 804162a:	f643 5309 	movw	r3, #15625	; 0x3d09
 804162e:	b2c4      	uxtb	r4, r0
 8041630:	435c      	muls	r4, r3
 8041632:	0a00      	lsrs	r0, r0, #8
 8041634:	4358      	muls	r0, r3
 8041636:	3480      	adds	r4, #128	; 0x80
    SX1276Write( REG_PACONFIG, 0x00 );
 8041638:	2100      	movs	r1, #0
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 804163a:	eb00 2414 	add.w	r4, r0, r4, lsr #8
    SX1276Write( REG_PACONFIG, 0x00 );
 804163e:	2009      	movs	r0, #9
 8041640:	f7ff ff84 	bl	804154c <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8041644:	203b      	movs	r0, #59	; 0x3b
 8041646:	f7ff ffd1 	bl	80415ec <SX1276Read>
 804164a:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 804164e:	b2c9      	uxtb	r1, r1
 8041650:	203b      	movs	r0, #59	; 0x3b
 8041652:	f7ff ff7b 	bl	804154c <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8041656:	203b      	movs	r0, #59	; 0x3b
 8041658:	f7ff ffc8 	bl	80415ec <SX1276Read>
 804165c:	0682      	lsls	r2, r0, #26
 804165e:	d4fa      	bmi.n	8041656 <RxChainCalibration+0x52>
    SX1276SetChannel( 915000000 ); //was 868 J.P.
 8041660:	480e      	ldr	r0, [pc, #56]	; (804169c <RxChainCalibration+0x98>)
 8041662:	f7ff ff7f 	bl	8041564 <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8041666:	203b      	movs	r0, #59	; 0x3b
 8041668:	f7ff ffc0 	bl	80415ec <SX1276Read>
 804166c:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8041670:	b2c9      	uxtb	r1, r1
 8041672:	203b      	movs	r0, #59	; 0x3b
 8041674:	f7ff ff6a 	bl	804154c <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8041678:	203b      	movs	r0, #59	; 0x3b
 804167a:	f7ff ffb7 	bl	80415ec <SX1276Read>
 804167e:	0683      	lsls	r3, r0, #26
 8041680:	d4fa      	bmi.n	8041678 <RxChainCalibration+0x74>
    PRINTF("Reg PA: %d \r\n", regPaConfigInitVal);
 8041682:	4629      	mov	r1, r5
 8041684:	4806      	ldr	r0, [pc, #24]	; (80416a0 <RxChainCalibration+0x9c>)
 8041686:	f009 fa5d 	bl	804ab44 <TraceSend>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 804168a:	4629      	mov	r1, r5
 804168c:	2009      	movs	r0, #9
 804168e:	f7ff ff5d 	bl	804154c <SX1276Write>
    SX1276SetChannel( initialFreq );
 8041692:	4620      	mov	r0, r4
}
 8041694:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    SX1276SetChannel( initialFreq );
 8041698:	f7ff bf64 	b.w	8041564 <SX1276SetChannel>
 804169c:	3689cac0 	.word	0x3689cac0
 80416a0:	0804e725 	.word	0x0804e725
 80416a4:	00000000 	.word	0x00000000

080416a8 <SX1276GetTimeOnAir>:
{
 80416a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80416ac:	4688      	mov	r8, r1
    switch( modem )
 80416ae:	b118      	cbz	r0, 80416b8 <SX1276GetTimeOnAir+0x10>
 80416b0:	2801      	cmp	r0, #1
 80416b2:	d058      	beq.n	8041766 <SX1276GetTimeOnAir+0xbe>
    uint32_t airTime = 0;
 80416b4:	2000      	movs	r0, #0
    return airTime;
 80416b6:	e04e      	b.n	8041756 <SX1276GetTimeOnAir+0xae>
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 80416b8:	4c75      	ldr	r4, [pc, #468]	; (8041890 <SX1276GetTimeOnAir+0x1e8>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 80416ba:	2027      	movs	r0, #39	; 0x27
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 80416bc:	8c25      	ldrh	r5, [r4, #32]
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 80416be:	f7ff ff95 	bl	80415ec <SX1276Read>
 80416c2:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 80416c6:	3001      	adds	r0, #1
 80416c8:	4428      	add	r0, r5
 80416ca:	f7ff f85b 	bl	8040784 <__aeabi_i2d>
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 80416ce:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80416d2:	2200      	movs	r2, #0
 80416d4:	2b00      	cmp	r3, #0
 80416d6:	d141      	bne.n	804175c <SX1276GetTimeOnAir+0xb4>
 80416d8:	4b6e      	ldr	r3, [pc, #440]	; (8041894 <SX1276GetTimeOnAir+0x1ec>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 80416da:	f7fe ff07 	bl	80404ec <__adddf3>
 80416de:	4606      	mov	r6, r0
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 80416e0:	2030      	movs	r0, #48	; 0x30
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 80416e2:	460f      	mov	r7, r1
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 80416e4:	f7ff ff82 	bl	80415ec <SX1276Read>
 80416e8:	f030 03f9 	bics.w	r3, r0, #249	; 0xf9
 80416ec:	bf0c      	ite	eq
 80416ee:	2300      	moveq	r3, #0
 80416f0:	4b68      	ldrne	r3, [pc, #416]	; (8041894 <SX1276GetTimeOnAir+0x1ec>)
 80416f2:	2200      	movs	r2, #0
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 80416f4:	4630      	mov	r0, r6
 80416f6:	4639      	mov	r1, r7
 80416f8:	f7fe fef8 	bl	80404ec <__adddf3>
 80416fc:	4606      	mov	r6, r0
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 80416fe:	4640      	mov	r0, r8
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8041700:	460f      	mov	r7, r1
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8041702:	f7ff f83f 	bl	8040784 <__aeabi_i2d>
 8041706:	4602      	mov	r2, r0
 8041708:	460b      	mov	r3, r1
 804170a:	4630      	mov	r0, r6
 804170c:	4639      	mov	r1, r7
 804170e:	f7fe feed 	bl	80404ec <__adddf3>
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8041712:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8041716:	2200      	movs	r2, #0
 8041718:	bb13      	cbnz	r3, 8041760 <SX1276GetTimeOnAir+0xb8>
 804171a:	2300      	movs	r3, #0
                                     pktLen +
 804171c:	f7fe fee6 	bl	80404ec <__adddf3>
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8041720:	2200      	movs	r2, #0
 8041722:	4b5d      	ldr	r3, [pc, #372]	; (8041898 <SX1276GetTimeOnAir+0x1f0>)
 8041724:	f7ff f898 	bl	8040858 <__aeabi_dmul>
 8041728:	4606      	mov	r6, r0
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 804172a:	69e0      	ldr	r0, [r4, #28]
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 804172c:	460f      	mov	r7, r1
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 804172e:	f7ff f819 	bl	8040764 <__aeabi_ui2d>
 8041732:	4602      	mov	r2, r0
 8041734:	460b      	mov	r3, r1
 8041736:	4630      	mov	r0, r6
 8041738:	4639      	mov	r1, r7
 804173a:	f7ff f9b7 	bl	8040aac <__aeabi_ddiv>
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 804173e:	2200      	movs	r2, #0
 8041740:	4b56      	ldr	r3, [pc, #344]	; (804189c <SX1276GetTimeOnAir+0x1f4>)
 8041742:	f7ff f889 	bl	8040858 <__aeabi_dmul>
 8041746:	ec41 0b10 	vmov	d0, r0, r1
 804174a:	f00c fc51 	bl	804dff0 <round>
            airTime = (uint32_t) floor( tOnAir * 1000 + 0.999 );
 804174e:	ec51 0b10 	vmov	r0, r1, d0
 8041752:	f7ff fb43 	bl	8040ddc <__aeabi_d2uiz>
}
 8041756:	b003      	add	sp, #12
 8041758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 804175c:	2300      	movs	r3, #0
 804175e:	e7bc      	b.n	80416da <SX1276GetTimeOnAir+0x32>
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8041760:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8041764:	e7da      	b.n	804171c <SX1276GetTimeOnAir+0x74>
            switch( SX1276.Settings.LoRa.Bandwidth )
 8041766:	4a4a      	ldr	r2, [pc, #296]	; (8041890 <SX1276GetTimeOnAir+0x1e8>)
 8041768:	6c53      	ldr	r3, [r2, #68]	; 0x44
 804176a:	3b07      	subs	r3, #7
 804176c:	2b02      	cmp	r3, #2
 804176e:	4692      	mov	sl, r2
 8041770:	f200 8082 	bhi.w	8041878 <SX1276GetTimeOnAir+0x1d0>
 8041774:	4a4a      	ldr	r2, [pc, #296]	; (80418a0 <SX1276GetTimeOnAir+0x1f8>)
 8041776:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 804177a:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 804177e:	f8da b048 	ldr.w	fp, [sl, #72]	; 0x48
 8041782:	2001      	movs	r0, #1
 8041784:	fa00 f00b 	lsl.w	r0, r0, fp
 8041788:	f7fe fffc 	bl	8040784 <__aeabi_i2d>
 804178c:	4602      	mov	r2, r0
 804178e:	460b      	mov	r3, r1
 8041790:	4620      	mov	r0, r4
 8041792:	4629      	mov	r1, r5
 8041794:	f7ff f98a 	bl	8040aac <__aeabi_ddiv>
            double ts = 1 / rs;
 8041798:	4602      	mov	r2, r0
 804179a:	460b      	mov	r3, r1
 804179c:	2000      	movs	r0, #0
 804179e:	493d      	ldr	r1, [pc, #244]	; (8041894 <SX1276GetTimeOnAir+0x1ec>)
 80417a0:	f7ff f984 	bl	8040aac <__aeabi_ddiv>
 80417a4:	4604      	mov	r4, r0
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 80417a6:	f8ba 004e 	ldrh.w	r0, [sl, #78]	; 0x4e
            double ts = 1 / rs;
 80417aa:	460d      	mov	r5, r1
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 80417ac:	f7fe ffea 	bl	8040784 <__aeabi_i2d>
 80417b0:	2200      	movs	r2, #0
 80417b2:	4b3c      	ldr	r3, [pc, #240]	; (80418a4 <SX1276GetTimeOnAir+0x1fc>)
 80417b4:	f7fe fe9a 	bl	80404ec <__adddf3>
 80417b8:	4622      	mov	r2, r4
 80417ba:	462b      	mov	r3, r5
 80417bc:	f7ff f84c 	bl	8040858 <__aeabi_dmul>
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 80417c0:	f89a 3050 	ldrb.w	r3, [sl, #80]	; 0x50
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 80417c4:	4606      	mov	r6, r0
 80417c6:	460f      	mov	r7, r1
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 80417c8:	f89a 0052 	ldrb.w	r0, [sl, #82]	; 0x52
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80417cc:	ea4f 018b 	mov.w	r1, fp, lsl #2
 80417d0:	f1c1 011c 	rsb	r1, r1, #28
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 80417d4:	2b00      	cmp	r3, #0
 80417d6:	eb01 1100 	add.w	r1, r1, r0, lsl #4
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 80417da:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 80417de:	bf14      	ite	ne
 80417e0:	2014      	movne	r0, #20
 80417e2:	2000      	moveq	r0, #0
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80417e4:	1a08      	subs	r0, r1, r0
 80417e6:	f7fe ffbd 	bl	8040764 <__aeabi_ui2d>
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 80417ea:	f89a 304c 	ldrb.w	r3, [sl, #76]	; 0x4c
 80417ee:	2b00      	cmp	r3, #0
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80417f0:	4680      	mov	r8, r0
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 80417f2:	bf14      	ite	ne
 80417f4:	2002      	movne	r0, #2
 80417f6:	2000      	moveq	r0, #0
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 80417f8:	ebab 0000 	sub.w	r0, fp, r0
 80417fc:	0080      	lsls	r0, r0, #2
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80417fe:	4689      	mov	r9, r1
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 8041800:	f7fe ffb0 	bl	8040764 <__aeabi_ui2d>
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8041804:	4602      	mov	r2, r0
 8041806:	460b      	mov	r3, r1
 8041808:	4640      	mov	r0, r8
 804180a:	4649      	mov	r1, r9
 804180c:	f7ff f94e 	bl	8040aac <__aeabi_ddiv>
 8041810:	ec41 0b10 	vmov	d0, r0, r1
 8041814:	f00c fae8 	bl	804dde8 <ceil>
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
 8041818:	f89a 004d 	ldrb.w	r0, [sl, #77]	; 0x4d
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 804181c:	ec53 2b10 	vmov	r2, r3, d0
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8041820:	3004      	adds	r0, #4
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8041822:	e9cd 2300 	strd	r2, r3, [sp]
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8041826:	f7fe ffad 	bl	8040784 <__aeabi_i2d>
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 804182a:	e9dd 2300 	ldrd	r2, r3, [sp]
 804182e:	f7ff f813 	bl	8040858 <__aeabi_dmul>
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 8041832:	2200      	movs	r2, #0
 8041834:	2300      	movs	r3, #0
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8041836:	4680      	mov	r8, r0
 8041838:	4689      	mov	r9, r1
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 804183a:	f7ff fa9d 	bl	8040d78 <__aeabi_dcmpgt>
 804183e:	b1f0      	cbz	r0, 804187e <SX1276GetTimeOnAir+0x1d6>
 8041840:	2200      	movs	r2, #0
 8041842:	4b15      	ldr	r3, [pc, #84]	; (8041898 <SX1276GetTimeOnAir+0x1f0>)
 8041844:	4640      	mov	r0, r8
 8041846:	4649      	mov	r1, r9
 8041848:	f7fe fe50 	bl	80404ec <__adddf3>
            double tPayload = nPayload * ts;
 804184c:	4622      	mov	r2, r4
 804184e:	462b      	mov	r3, r5
 8041850:	f7ff f802 	bl	8040858 <__aeabi_dmul>
            double tOnAir = tPreamble + tPayload;
 8041854:	4632      	mov	r2, r6
 8041856:	463b      	mov	r3, r7
 8041858:	f7fe fe48 	bl	80404ec <__adddf3>
            airTime = (uint32_t) floor( tOnAir * 1000 + 0.999 );
 804185c:	2200      	movs	r2, #0
 804185e:	4b0f      	ldr	r3, [pc, #60]	; (804189c <SX1276GetTimeOnAir+0x1f4>)
 8041860:	f7fe fffa 	bl	8040858 <__aeabi_dmul>
 8041864:	a308      	add	r3, pc, #32	; (adr r3, 8041888 <SX1276GetTimeOnAir+0x1e0>)
 8041866:	e9d3 2300 	ldrd	r2, r3, [r3]
 804186a:	f7fe fe3f 	bl	80404ec <__adddf3>
 804186e:	ec41 0b10 	vmov	d0, r0, r1
 8041872:	f00c fb39 	bl	804dee8 <floor>
 8041876:	e76a      	b.n	804174e <SX1276GetTimeOnAir+0xa6>
            switch( SX1276.Settings.LoRa.Bandwidth )
 8041878:	2400      	movs	r4, #0
 804187a:	2500      	movs	r5, #0
 804187c:	e77f      	b.n	804177e <SX1276GetTimeOnAir+0xd6>
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 804187e:	2000      	movs	r0, #0
 8041880:	4905      	ldr	r1, [pc, #20]	; (8041898 <SX1276GetTimeOnAir+0x1f0>)
 8041882:	e7e3      	b.n	804184c <SX1276GetTimeOnAir+0x1a4>
 8041884:	f3af 8000 	nop.w
 8041888:	d916872b 	.word	0xd916872b
 804188c:	3feff7ce 	.word	0x3feff7ce
 8041890:	20009c00 	.word	0x20009c00
 8041894:	3ff00000 	.word	0x3ff00000
 8041898:	40200000 	.word	0x40200000
 804189c:	408f4000 	.word	0x408f4000
 80418a0:	0804e118 	.word	0x0804e118
 80418a4:	40110000 	.word	0x40110000

080418a8 <SX1276ReadRssi>:
{
 80418a8:	b508      	push	{r3, lr}
    switch( modem )
 80418aa:	b120      	cbz	r0, 80418b6 <SX1276ReadRssi+0xe>
 80418ac:	2801      	cmp	r0, #1
 80418ae:	d00a      	beq.n	80418c6 <SX1276ReadRssi+0x1e>
        rssi = -1;
 80418b0:	f04f 30ff 	mov.w	r0, #4294967295
 80418b4:	e006      	b.n	80418c4 <SX1276ReadRssi+0x1c>
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 80418b6:	2011      	movs	r0, #17
 80418b8:	f7ff fe98 	bl	80415ec <SX1276Read>
 80418bc:	f3c0 0047 	ubfx	r0, r0, #1, #8
 80418c0:	4240      	negs	r0, r0
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 80418c2:	b200      	sxth	r0, r0
}
 80418c4:	bd08      	pop	{r3, pc}
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80418c6:	4b07      	ldr	r3, [pc, #28]	; (80418e4 <SX1276ReadRssi+0x3c>)
 80418c8:	689a      	ldr	r2, [r3, #8]
 80418ca:	4b07      	ldr	r3, [pc, #28]	; (80418e8 <SX1276ReadRssi+0x40>)
 80418cc:	429a      	cmp	r2, r3
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 80418ce:	f04f 001b 	mov.w	r0, #27
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80418d2:	d903      	bls.n	80418dc <SX1276ReadRssi+0x34>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 80418d4:	f7ff fe8a 	bl	80415ec <SX1276Read>
 80418d8:	389d      	subs	r0, #157	; 0x9d
 80418da:	e7f2      	b.n	80418c2 <SX1276ReadRssi+0x1a>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 80418dc:	f7ff fe86 	bl	80415ec <SX1276Read>
 80418e0:	38a4      	subs	r0, #164	; 0xa4
 80418e2:	e7ee      	b.n	80418c2 <SX1276ReadRssi+0x1a>
 80418e4:	20009c00 	.word	0x20009c00
 80418e8:	1f4add40 	.word	0x1f4add40

080418ec <SX1276SetOpMode.part.2>:
void SX1276SetOpMode( uint8_t opMode )
 80418ec:	b510      	push	{r4, lr}
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 80418ee:	2001      	movs	r0, #1
 80418f0:	f7ff fe7c 	bl	80415ec <SX1276Read>
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( true );
 80418f4:	4c07      	ldr	r4, [pc, #28]	; (8041914 <SX1276SetOpMode.part.2+0x28>)
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 80418f6:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
 80418fa:	2001      	movs	r0, #1
 80418fc:	f7ff fe26 	bl	804154c <SX1276Write>
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( true );
 8041900:	6823      	ldr	r3, [r4, #0]
 8041902:	2001      	movs	r0, #1
 8041904:	691b      	ldr	r3, [r3, #16]
 8041906:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetXO( RESET ); 
 8041908:	6823      	ldr	r3, [r4, #0]
 804190a:	2000      	movs	r0, #0
 804190c:	681b      	ldr	r3, [r3, #0]
}
 804190e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      LoRaBoardCallbacks->SX1276BoardSetXO( RESET ); 
 8041912:	4718      	bx	r3
 8041914:	20008380 	.word	0x20008380

08041918 <SX1276SetSleep>:
{
 8041918:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
 804191a:	480a      	ldr	r0, [pc, #40]	; (8041944 <SX1276SetSleep+0x2c>)
 804191c:	f009 f888 	bl	804aa30 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8041920:	4809      	ldr	r0, [pc, #36]	; (8041948 <SX1276SetSleep+0x30>)
 8041922:	f009 f885 	bl	804aa30 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 8041926:	4809      	ldr	r0, [pc, #36]	; (804194c <SX1276SetSleep+0x34>)
 8041928:	f009 f882 	bl	804aa30 <TimerStop>
 804192c:	f7ff ffde 	bl	80418ec <SX1276SetOpMode.part.2>
    LoRaBoardCallbacks->SX1276BoardSetXO( RESET );
 8041930:	4b07      	ldr	r3, [pc, #28]	; (8041950 <SX1276SetSleep+0x38>)
 8041932:	681b      	ldr	r3, [r3, #0]
 8041934:	2000      	movs	r0, #0
 8041936:	681b      	ldr	r3, [r3, #0]
 8041938:	4798      	blx	r3
    SX1276.Settings.State = RF_IDLE;
 804193a:	4b06      	ldr	r3, [pc, #24]	; (8041954 <SX1276SetSleep+0x3c>)
 804193c:	2200      	movs	r2, #0
 804193e:	711a      	strb	r2, [r3, #4]
}
 8041940:	bd08      	pop	{r3, pc}
 8041942:	bf00      	nop
 8041944:	20009c68 	.word	0x20009c68
 8041948:	20009bd0 	.word	0x20009bd0
 804194c:	20009be8 	.word	0x20009be8
 8041950:	20008380 	.word	0x20008380
 8041954:	20009c00 	.word	0x20009c00

08041958 <SX1276SetOpMode>:
{
 8041958:	b538      	push	{r3, r4, r5, lr}
    if( opMode == RF_OPMODE_SLEEP )
 804195a:	4604      	mov	r4, r0
 804195c:	b918      	cbnz	r0, 8041966 <SX1276SetOpMode+0xe>
}
 804195e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8041962:	f7ff bfc3 	b.w	80418ec <SX1276SetOpMode.part.2>
      LoRaBoardCallbacks->SX1276BoardSetXO( SET ); 
 8041966:	4d0c      	ldr	r5, [pc, #48]	; (8041998 <SX1276SetOpMode+0x40>)
 8041968:	682b      	ldr	r3, [r5, #0]
 804196a:	2001      	movs	r0, #1
 804196c:	681b      	ldr	r3, [r3, #0]
 804196e:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( false );
 8041970:	682b      	ldr	r3, [r5, #0]
 8041972:	2000      	movs	r0, #0
 8041974:	691b      	ldr	r3, [r3, #16]
 8041976:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSw( opMode );
 8041978:	682b      	ldr	r3, [r5, #0]
 804197a:	4620      	mov	r0, r4
 804197c:	695b      	ldr	r3, [r3, #20]
 804197e:	4798      	blx	r3
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8041980:	2001      	movs	r0, #1
 8041982:	f7ff fe33 	bl	80415ec <SX1276Read>
 8041986:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
 804198a:	4321      	orrs	r1, r4
 804198c:	2001      	movs	r0, #1
}
 804198e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8041992:	f7ff bddb 	b.w	804154c <SX1276Write>
 8041996:	bf00      	nop
 8041998:	20008380 	.word	0x20008380

0804199c <SX1276SetStby>:
{
 804199c:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
 804199e:	4808      	ldr	r0, [pc, #32]	; (80419c0 <SX1276SetStby+0x24>)
 80419a0:	f009 f846 	bl	804aa30 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 80419a4:	4807      	ldr	r0, [pc, #28]	; (80419c4 <SX1276SetStby+0x28>)
 80419a6:	f009 f843 	bl	804aa30 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 80419aa:	4807      	ldr	r0, [pc, #28]	; (80419c8 <SX1276SetStby+0x2c>)
 80419ac:	f009 f840 	bl	804aa30 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
 80419b0:	2001      	movs	r0, #1
 80419b2:	f7ff ffd1 	bl	8041958 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 80419b6:	4b05      	ldr	r3, [pc, #20]	; (80419cc <SX1276SetStby+0x30>)
 80419b8:	2200      	movs	r2, #0
 80419ba:	711a      	strb	r2, [r3, #4]
}
 80419bc:	bd08      	pop	{r3, pc}
 80419be:	bf00      	nop
 80419c0:	20009c68 	.word	0x20009c68
 80419c4:	20009bd0 	.word	0x20009bd0
 80419c8:	20009be8 	.word	0x20009be8
 80419cc:	20009c00 	.word	0x20009c00

080419d0 <SX1276SetRx>:
{
 80419d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch( SX1276.Settings.Modem )
 80419d2:	4c79      	ldr	r4, [pc, #484]	; (8041bb8 <SX1276SetRx+0x1e8>)
{
 80419d4:	4607      	mov	r7, r0
    TimerStop( &TxTimeoutTimer );
 80419d6:	4879      	ldr	r0, [pc, #484]	; (8041bbc <SX1276SetRx+0x1ec>)
 80419d8:	f009 f82a 	bl	804aa30 <TimerStop>
    switch( SX1276.Settings.Modem )
 80419dc:	7965      	ldrb	r5, [r4, #5]
 80419de:	b11d      	cbz	r5, 80419e8 <SX1276SetRx+0x18>
 80419e0:	2d01      	cmp	r5, #1
 80419e2:	d044      	beq.n	8041a6e <SX1276SetRx+0x9e>
    bool rxContinuous = false;
 80419e4:	2600      	movs	r6, #0
 80419e6:	e022      	b.n	8041a2e <SX1276SetRx+0x5e>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80419e8:	2040      	movs	r0, #64	; 0x40
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 80419ea:	f894 6026 	ldrb.w	r6, [r4, #38]	; 0x26
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80419ee:	f7ff fdfd 	bl	80415ec <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO0_00 |
 80419f2:	f000 0103 	and.w	r1, r0, #3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80419f6:	f041 010c 	orr.w	r1, r1, #12
 80419fa:	2040      	movs	r0, #64	; 0x40
 80419fc:	f7ff fda6 	bl	804154c <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8041a00:	2041      	movs	r0, #65	; 0x41
 8041a02:	f7ff fdf3 	bl	80415ec <SX1276Read>
 8041a06:	f060 013e 	orn	r1, r0, #62	; 0x3e
 8041a0a:	b2c9      	uxtb	r1, r1
 8041a0c:	2041      	movs	r0, #65	; 0x41
 8041a0e:	f7ff fd9d 	bl	804154c <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8041a12:	2035      	movs	r0, #53	; 0x35
 8041a14:	f7ff fdea 	bl	80415ec <SX1276Read>
 8041a18:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8041a1c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 8041a20:	211e      	movs	r1, #30
 8041a22:	200d      	movs	r0, #13
 8041a24:	f7ff fd92 	bl	804154c <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8041a28:	8625      	strh	r5, [r4, #48]	; 0x30
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8041a2a:	87a5      	strh	r5, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8041a2c:	8765      	strh	r5, [r4, #58]	; 0x3a
    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 8041a2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8041a32:	2100      	movs	r1, #0
 8041a34:	4862      	ldr	r0, [pc, #392]	; (8041bc0 <SX1276SetRx+0x1f0>)
 8041a36:	f00a fffd 	bl	804ca34 <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
 8041a3a:	2301      	movs	r3, #1
 8041a3c:	7123      	strb	r3, [r4, #4]
    if( timeout != 0 )
 8041a3e:	b137      	cbz	r7, 8041a4e <SX1276SetRx+0x7e>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8041a40:	4860      	ldr	r0, [pc, #384]	; (8041bc4 <SX1276SetRx+0x1f4>)
 8041a42:	4639      	mov	r1, r7
 8041a44:	f009 f81c 	bl	804aa80 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8041a48:	485e      	ldr	r0, [pc, #376]	; (8041bc4 <SX1276SetRx+0x1f4>)
 8041a4a:	f008 ff7f 	bl	804a94c <TimerStart>
    if( SX1276.Settings.Modem == MODEM_FSK )
 8041a4e:	7963      	ldrb	r3, [r4, #5]
 8041a50:	2b00      	cmp	r3, #0
 8041a52:	f040 80a9 	bne.w	8041ba8 <SX1276SetRx+0x1d8>
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8041a56:	2005      	movs	r0, #5
 8041a58:	f7ff ff7e 	bl	8041958 <SX1276SetOpMode>
        TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 8041a5c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8041a5e:	485a      	ldr	r0, [pc, #360]	; (8041bc8 <SX1276SetRx+0x1f8>)
 8041a60:	f009 f80e 	bl	804aa80 <TimerSetValue>
        TimerStart( &RxTimeoutSyncWord );
 8041a64:	4858      	ldr	r0, [pc, #352]	; (8041bc8 <SX1276SetRx+0x1f8>)
}
 8041a66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        TimerStart( &RxTimeoutSyncWord );
 8041a6a:	f008 bf6f 	b.w	804a94c <TimerStart>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8041a6e:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8041a72:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 8041a74:	b32b      	cbz	r3, 8041ac2 <SX1276SetRx+0xf2>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8041a76:	f7ff fdb9 	bl	80415ec <SX1276Read>
 8041a7a:	f040 0141 	orr.w	r1, r0, #65	; 0x41
 8041a7e:	b2c9      	uxtb	r1, r1
 8041a80:	2033      	movs	r0, #51	; 0x33
 8041a82:	f7ff fd63 	bl	804154c <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8041a86:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8041a88:	203b      	movs	r0, #59	; 0x3b
 8041a8a:	f7ff fd5f 	bl	804154c <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8041a8e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8041a90:	2b08      	cmp	r3, #8
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8041a92:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8041a96:	d876      	bhi.n	8041b86 <SX1276SetRx+0x1b6>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8041a98:	f7ff fda8 	bl	80415ec <SX1276Read>
 8041a9c:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8041aa0:	2031      	movs	r0, #49	; 0x31
 8041aa2:	f7ff fd53 	bl	804154c <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 8041aa6:	2100      	movs	r1, #0
 8041aa8:	2030      	movs	r0, #48	; 0x30
 8041aaa:	f7ff fd4f 	bl	804154c <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 8041aae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8041ab0:	2b08      	cmp	r3, #8
 8041ab2:	d81b      	bhi.n	8041aec <SX1276SetRx+0x11c>
 8041ab4:	e8df f003 	tbb	[pc, r3]
 8041ab8:	473e3510 	.word	0x473e3510
 8041abc:	62625950 	.word	0x62625950
 8041ac0:	62          	.byte	0x62
 8041ac1:	00          	.byte	0x00
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8041ac2:	f7ff fd93 	bl	80415ec <SX1276Read>
 8041ac6:	f000 01be 	and.w	r1, r0, #190	; 0xbe
 8041aca:	f041 0101 	orr.w	r1, r1, #1
 8041ace:	2033      	movs	r0, #51	; 0x33
 8041ad0:	f7ff fd3c 	bl	804154c <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8041ad4:	211d      	movs	r1, #29
 8041ad6:	e7d7      	b.n	8041a88 <SX1276SetRx+0xb8>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 8041ad8:	202f      	movs	r0, #47	; 0x2f
 8041ada:	2148      	movs	r1, #72	; 0x48
 8041adc:	f7ff fd36 	bl	804154c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 8041ae0:	68a0      	ldr	r0, [r4, #8]
 8041ae2:	f500 50f4 	add.w	r0, r0, #7808	; 0x1e80
 8041ae6:	3002      	adds	r0, #2
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8041ae8:	f7ff fd3c 	bl	8041564 <SX1276SetChannel>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8041aec:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 8041af0:	f894 6056 	ldrb.w	r6, [r4, #86]	; 0x56
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8041af4:	2b00      	cmp	r3, #0
 8041af6:	d04d      	beq.n	8041b94 <SX1276SetRx+0x1c4>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8041af8:	211d      	movs	r1, #29
 8041afa:	2011      	movs	r0, #17
 8041afc:	f7ff fd26 	bl	804154c <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8041b00:	2040      	movs	r0, #64	; 0x40
 8041b02:	f7ff fd73 	bl	80415ec <SX1276Read>
 8041b06:	f000 0133 	and.w	r1, r0, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8041b0a:	2040      	movs	r0, #64	; 0x40
 8041b0c:	f7ff fd1e 	bl	804154c <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8041b10:	2100      	movs	r1, #0
 8041b12:	200f      	movs	r0, #15
 8041b14:	f7ff fd1a 	bl	804154c <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8041b18:	2100      	movs	r1, #0
 8041b1a:	200d      	movs	r0, #13
 8041b1c:	f7ff fd16 	bl	804154c <SX1276Write>
        break;
 8041b20:	e785      	b.n	8041a2e <SX1276SetRx+0x5e>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8041b22:	202f      	movs	r0, #47	; 0x2f
 8041b24:	2144      	movs	r1, #68	; 0x44
 8041b26:	f7ff fd11 	bl	804154c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 8041b2a:	68a0      	ldr	r0, [r4, #8]
 8041b2c:	f500 5022 	add.w	r0, r0, #10368	; 0x2880
 8041b30:	3034      	adds	r0, #52	; 0x34
 8041b32:	e7d9      	b.n	8041ae8 <SX1276SetRx+0x118>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8041b34:	202f      	movs	r0, #47	; 0x2f
 8041b36:	2144      	movs	r1, #68	; 0x44
 8041b38:	f7ff fd08 	bl	804154c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 8041b3c:	68a0      	ldr	r0, [r4, #8]
 8041b3e:	f500 5074 	add.w	r0, r0, #15616	; 0x3d00
 8041b42:	3004      	adds	r0, #4
 8041b44:	e7d0      	b.n	8041ae8 <SX1276SetRx+0x118>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8041b46:	202f      	movs	r0, #47	; 0x2f
 8041b48:	2144      	movs	r1, #68	; 0x44
 8041b4a:	f7ff fcff 	bl	804154c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 8041b4e:	68a0      	ldr	r0, [r4, #8]
 8041b50:	f500 40a2 	add.w	r0, r0, #20736	; 0x5100
 8041b54:	305e      	adds	r0, #94	; 0x5e
 8041b56:	e7c7      	b.n	8041ae8 <SX1276SetRx+0x118>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8041b58:	202f      	movs	r0, #47	; 0x2f
 8041b5a:	2144      	movs	r1, #68	; 0x44
 8041b5c:	f7ff fcf6 	bl	804154c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 8041b60:	68a0      	ldr	r0, [r4, #8]
 8041b62:	f500 40f4 	add.w	r0, r0, #31232	; 0x7a00
 8041b66:	3012      	adds	r0, #18
 8041b68:	e7be      	b.n	8041ae8 <SX1276SetRx+0x118>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8041b6a:	202f      	movs	r0, #47	; 0x2f
 8041b6c:	2144      	movs	r1, #68	; 0x44
 8041b6e:	f7ff fced 	bl	804154c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8041b72:	68a0      	ldr	r0, [r4, #8]
 8041b74:	f500 4022 	add.w	r0, r0, #41472	; 0xa200
 8041b78:	30c6      	adds	r0, #198	; 0xc6
 8041b7a:	e7b5      	b.n	8041ae8 <SX1276SetRx+0x118>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8041b7c:	2140      	movs	r1, #64	; 0x40
 8041b7e:	202f      	movs	r0, #47	; 0x2f
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 8041b80:	f7ff fce4 	bl	804154c <SX1276Write>
 8041b84:	e7b2      	b.n	8041aec <SX1276SetRx+0x11c>
 8041b86:	f7ff fd31 	bl	80415ec <SX1276Read>
 8041b8a:	f060 017f 	orn	r1, r0, #127	; 0x7f
 8041b8e:	b2c9      	uxtb	r1, r1
 8041b90:	2031      	movs	r0, #49	; 0x31
 8041b92:	e7f5      	b.n	8041b80 <SX1276SetRx+0x1b0>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8041b94:	211f      	movs	r1, #31
 8041b96:	2011      	movs	r0, #17
 8041b98:	f7ff fcd8 	bl	804154c <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8041b9c:	2040      	movs	r0, #64	; 0x40
 8041b9e:	f7ff fd25 	bl	80415ec <SX1276Read>
 8041ba2:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 8041ba6:	e7b0      	b.n	8041b0a <SX1276SetRx+0x13a>
        if( rxContinuous == true )
 8041ba8:	b126      	cbz	r6, 8041bb4 <SX1276SetRx+0x1e4>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 8041baa:	2005      	movs	r0, #5
}
 8041bac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8041bb0:	f7ff bed2 	b.w	8041958 <SX1276SetOpMode>
 8041bb4:	2006      	movs	r0, #6
 8041bb6:	e7f9      	b.n	8041bac <SX1276SetRx+0x1dc>
 8041bb8:	20009c00 	.word	0x20009c00
 8041bbc:	20009bd0 	.word	0x20009bd0
 8041bc0:	20008384 	.word	0x20008384
 8041bc4:	20009c68 	.word	0x20009c68
 8041bc8:	20009be8 	.word	0x20009be8

08041bcc <SX1276SetTx>:
{
 8041bcc:	b510      	push	{r4, lr}
 8041bce:	4604      	mov	r4, r0
    TimerStop( &RxTimeoutTimer );
 8041bd0:	4825      	ldr	r0, [pc, #148]	; (8041c68 <SX1276SetTx+0x9c>)
 8041bd2:	f008 ff2d 	bl	804aa30 <TimerStop>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8041bd6:	4621      	mov	r1, r4
    switch( SX1276.Settings.Modem )
 8041bd8:	4c24      	ldr	r4, [pc, #144]	; (8041c6c <SX1276SetTx+0xa0>)
    TimerSetValue( &TxTimeoutTimer, timeout );
 8041bda:	4825      	ldr	r0, [pc, #148]	; (8041c70 <SX1276SetTx+0xa4>)
 8041bdc:	f008 ff50 	bl	804aa80 <TimerSetValue>
    switch( SX1276.Settings.Modem )
 8041be0:	7963      	ldrb	r3, [r4, #5]
 8041be2:	b15b      	cbz	r3, 8041bfc <SX1276SetTx+0x30>
 8041be4:	2b01      	cmp	r3, #1
 8041be6:	d023      	beq.n	8041c30 <SX1276SetTx+0x64>
    SX1276.Settings.State = RF_TX_RUNNING;
 8041be8:	2302      	movs	r3, #2
    TimerStart( &TxTimeoutTimer );
 8041bea:	4821      	ldr	r0, [pc, #132]	; (8041c70 <SX1276SetTx+0xa4>)
    SX1276.Settings.State = RF_TX_RUNNING;
 8041bec:	7123      	strb	r3, [r4, #4]
    TimerStart( &TxTimeoutTimer );
 8041bee:	f008 fead 	bl	804a94c <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8041bf2:	2003      	movs	r0, #3
}
 8041bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8041bf8:	f7ff beae 	b.w	8041958 <SX1276SetOpMode>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8041bfc:	2040      	movs	r0, #64	; 0x40
 8041bfe:	f7ff fcf5 	bl	80415ec <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 8041c02:	f000 0103 	and.w	r1, r0, #3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8041c06:	f041 0110 	orr.w	r1, r1, #16
 8041c0a:	2040      	movs	r0, #64	; 0x40
 8041c0c:	f7ff fc9e 	bl	804154c <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8041c10:	2041      	movs	r0, #65	; 0x41
 8041c12:	f7ff fceb 	bl	80415ec <SX1276Read>
 8041c16:	f000 013e 	and.w	r1, r0, #62	; 0x3e
 8041c1a:	2041      	movs	r0, #65	; 0x41
 8041c1c:	f7ff fc96 	bl	804154c <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8041c20:	2035      	movs	r0, #53	; 0x35
 8041c22:	f7ff fce3 	bl	80415ec <SX1276Read>
 8041c26:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8041c2a:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
        break;
 8041c2e:	e7db      	b.n	8041be8 <SX1276SetTx+0x1c>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8041c30:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 8041c34:	b173      	cbz	r3, 8041c54 <SX1276SetTx+0x88>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8041c36:	21f5      	movs	r1, #245	; 0xf5
 8041c38:	2011      	movs	r0, #17
 8041c3a:	f7ff fc87 	bl	804154c <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8041c3e:	2040      	movs	r0, #64	; 0x40
 8041c40:	f7ff fcd4 	bl	80415ec <SX1276Read>
 8041c44:	f000 0133 	and.w	r1, r0, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8041c48:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8041c4c:	2040      	movs	r0, #64	; 0x40
 8041c4e:	f7ff fc7d 	bl	804154c <SX1276Write>
 8041c52:	e7c9      	b.n	8041be8 <SX1276SetTx+0x1c>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8041c54:	21f7      	movs	r1, #247	; 0xf7
 8041c56:	2011      	movs	r0, #17
 8041c58:	f7ff fc78 	bl	804154c <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8041c5c:	2040      	movs	r0, #64	; 0x40
 8041c5e:	f7ff fcc5 	bl	80415ec <SX1276Read>
 8041c62:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 8041c66:	e7ef      	b.n	8041c48 <SX1276SetTx+0x7c>
 8041c68:	20009c68 	.word	0x20009c68
 8041c6c:	20009c00 	.word	0x20009c00
 8041c70:	20009bd0 	.word	0x20009bd0

08041c74 <SX1276StartCad>:
{
 8041c74:	b510      	push	{r4, lr}
    switch( SX1276.Settings.Modem )
 8041c76:	4c0c      	ldr	r4, [pc, #48]	; (8041ca8 <SX1276StartCad+0x34>)
 8041c78:	7963      	ldrb	r3, [r4, #5]
 8041c7a:	2b01      	cmp	r3, #1
 8041c7c:	d112      	bne.n	8041ca4 <SX1276StartCad+0x30>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8041c7e:	21fa      	movs	r1, #250	; 0xfa
 8041c80:	2011      	movs	r0, #17
 8041c82:	f7ff fc63 	bl	804154c <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 8041c86:	2040      	movs	r0, #64	; 0x40
 8041c88:	f7ff fcb0 	bl	80415ec <SX1276Read>
 8041c8c:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
 8041c90:	2040      	movs	r0, #64	; 0x40
 8041c92:	f7ff fc5b 	bl	804154c <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 8041c96:	2303      	movs	r3, #3
 8041c98:	7123      	strb	r3, [r4, #4]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 8041c9a:	2007      	movs	r0, #7
}
 8041c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 8041ca0:	f7ff be5a 	b.w	8041958 <SX1276SetOpMode>
}
 8041ca4:	bd10      	pop	{r4, pc}
 8041ca6:	bf00      	nop
 8041ca8:	20009c00 	.word	0x20009c00

08041cac <SX1276SetModem>:
{
 8041cac:	b510      	push	{r4, lr}
 8041cae:	4604      	mov	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 8041cb0:	2001      	movs	r0, #1
 8041cb2:	f7ff fc9b 	bl	80415ec <SX1276Read>
 8041cb6:	4b19      	ldr	r3, [pc, #100]	; (8041d1c <SX1276SetModem+0x70>)
 8041cb8:	f010 0f80 	tst.w	r0, #128	; 0x80
        SX1276.Settings.Modem = MODEM_LORA;
 8041cbc:	bf14      	ite	ne
 8041cbe:	2201      	movne	r2, #1
        SX1276.Settings.Modem = MODEM_FSK;
 8041cc0:	2200      	moveq	r2, #0
 8041cc2:	715a      	strb	r2, [r3, #5]
    if( SX1276.Settings.Modem == modem )
 8041cc4:	795a      	ldrb	r2, [r3, #5]
 8041cc6:	42a2      	cmp	r2, r4
 8041cc8:	d027      	beq.n	8041d1a <SX1276SetModem+0x6e>
    switch( SX1276.Settings.Modem )
 8041cca:	2c01      	cmp	r4, #1
    SX1276.Settings.Modem = modem;
 8041ccc:	715c      	strb	r4, [r3, #5]
    switch( SX1276.Settings.Modem )
 8041cce:	d013      	beq.n	8041cf8 <SX1276SetModem+0x4c>
 8041cd0:	f7ff fe0c 	bl	80418ec <SX1276SetOpMode.part.2>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8041cd4:	2001      	movs	r0, #1
 8041cd6:	f7ff fc89 	bl	80415ec <SX1276Read>
 8041cda:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8041cde:	2001      	movs	r0, #1
 8041ce0:	f7ff fc34 	bl	804154c <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8041ce4:	2100      	movs	r1, #0
 8041ce6:	2040      	movs	r0, #64	; 0x40
 8041ce8:	f7ff fc30 	bl	804154c <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8041cec:	2130      	movs	r1, #48	; 0x30
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8041cee:	2041      	movs	r0, #65	; 0x41
}
 8041cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8041cf4:	f7ff bc2a 	b.w	804154c <SX1276Write>
 8041cf8:	f7ff fdf8 	bl	80418ec <SX1276SetOpMode.part.2>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8041cfc:	4620      	mov	r0, r4
 8041cfe:	f7ff fc75 	bl	80415ec <SX1276Read>
 8041d02:	f060 017f 	orn	r1, r0, #127	; 0x7f
 8041d06:	b2c9      	uxtb	r1, r1
 8041d08:	4620      	mov	r0, r4
 8041d0a:	f7ff fc1f 	bl	804154c <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8041d0e:	2100      	movs	r1, #0
 8041d10:	2040      	movs	r0, #64	; 0x40
 8041d12:	f7ff fc1b 	bl	804154c <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8041d16:	2100      	movs	r1, #0
 8041d18:	e7e9      	b.n	8041cee <SX1276SetModem+0x42>
}
 8041d1a:	bd10      	pop	{r4, pc}
 8041d1c:	20009c00 	.word	0x20009c00

08041d20 <SX1276Init>:
{
 8041d20:	b570      	push	{r4, r5, r6, lr}
    RadioEvents = events;
 8041d22:	4d1b      	ldr	r5, [pc, #108]	; (8041d90 <SX1276Init+0x70>)
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8041d24:	491b      	ldr	r1, [pc, #108]	; (8041d94 <SX1276Init+0x74>)
    RadioEvents = events;
 8041d26:	f8c5 0104 	str.w	r0, [r5, #260]	; 0x104
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8041d2a:	481b      	ldr	r0, [pc, #108]	; (8041d98 <SX1276Init+0x78>)
 8041d2c:	4c1b      	ldr	r4, [pc, #108]	; (8041d9c <SX1276Init+0x7c>)
 8041d2e:	f008 fe03 	bl	804a938 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 8041d32:	4918      	ldr	r1, [pc, #96]	; (8041d94 <SX1276Init+0x74>)
 8041d34:	481a      	ldr	r0, [pc, #104]	; (8041da0 <SX1276Init+0x80>)
 8041d36:	f008 fdff 	bl	804a938 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 8041d3a:	4916      	ldr	r1, [pc, #88]	; (8041d94 <SX1276Init+0x74>)
 8041d3c:	4819      	ldr	r0, [pc, #100]	; (8041da4 <SX1276Init+0x84>)
 8041d3e:	f008 fdfb 	bl	804a938 <TimerInit>
    LoRaBoardCallbacks->SX1276BoardSetXO( SET );
 8041d42:	682b      	ldr	r3, [r5, #0]
 8041d44:	2001      	movs	r0, #1
 8041d46:	681b      	ldr	r3, [r3, #0]
 8041d48:	4798      	blx	r3
    SX1276Reset( );
 8041d4a:	f7ff fbb7 	bl	80414bc <SX1276Reset>
    RxChainCalibration( );
 8041d4e:	f7ff fc59 	bl	8041604 <RxChainCalibration>
 8041d52:	f7ff fdcb 	bl	80418ec <SX1276SetOpMode.part.2>
    LoRaBoardCallbacks->SX1276BoardIoIrqInit( DioIrq );
 8041d56:	682b      	ldr	r3, [r5, #0]
 8041d58:	4813      	ldr	r0, [pc, #76]	; (8041da8 <SX1276Init+0x88>)
 8041d5a:	689b      	ldr	r3, [r3, #8]
 8041d5c:	4798      	blx	r3
 8041d5e:	f104 0630 	add.w	r6, r4, #48	; 0x30
        SX1276SetModem( RadioRegsInit[i].Modem );
 8041d62:	7820      	ldrb	r0, [r4, #0]
 8041d64:	f7ff ffa2 	bl	8041cac <SX1276SetModem>
 8041d68:	3403      	adds	r4, #3
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8041d6a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8041d6e:	f814 0c02 	ldrb.w	r0, [r4, #-2]
 8041d72:	f7ff fbeb 	bl	804154c <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8041d76:	42b4      	cmp	r4, r6
 8041d78:	d1f3      	bne.n	8041d62 <SX1276Init+0x42>
    SX1276SetModem( MODEM_FSK );
 8041d7a:	2000      	movs	r0, #0
 8041d7c:	f7ff ff96 	bl	8041cac <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 8041d80:	4b0a      	ldr	r3, [pc, #40]	; (8041dac <SX1276Init+0x8c>)
 8041d82:	2200      	movs	r2, #0
 8041d84:	711a      	strb	r2, [r3, #4]
    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 8041d86:	682b      	ldr	r3, [r5, #0]
 8041d88:	685b      	ldr	r3, [r3, #4]
 8041d8a:	4798      	blx	r3
}
 8041d8c:	3002      	adds	r0, #2
 8041d8e:	bd70      	pop	{r4, r5, r6, pc}
 8041d90:	20008380 	.word	0x20008380
 8041d94:	080429f9 	.word	0x080429f9
 8041d98:	20009bd0 	.word	0x20009bd0
 8041d9c:	0804e1e0 	.word	0x0804e1e0
 8041da0:	20009c68 	.word	0x20009c68
 8041da4:	20009be8 	.word	0x20009be8
 8041da8:	2000105c 	.word	0x2000105c
 8041dac:	20009c00 	.word	0x20009c00

08041db0 <SX1276IsChannelFree>:
{
 8041db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8041db2:	461c      	mov	r4, r3
    return SX1276.Settings.State;
 8041db4:	4b13      	ldr	r3, [pc, #76]	; (8041e04 <SX1276IsChannelFree+0x54>)
    if( SX1276GetStatus( ) != RF_IDLE )
 8041db6:	791b      	ldrb	r3, [r3, #4]
{
 8041db8:	4606      	mov	r6, r0
 8041dba:	460d      	mov	r5, r1
 8041dbc:	4617      	mov	r7, r2
    if( SX1276GetStatus( ) != RF_IDLE )
 8041dbe:	b9f3      	cbnz	r3, 8041dfe <SX1276IsChannelFree+0x4e>
    SX1276SetModem( modem );
 8041dc0:	f7ff ff74 	bl	8041cac <SX1276SetModem>
    SX1276SetChannel( freq );
 8041dc4:	4628      	mov	r0, r5
 8041dc6:	f7ff fbcd 	bl	8041564 <SX1276SetChannel>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8041dca:	2005      	movs	r0, #5
 8041dcc:	f7ff fdc4 	bl	8041958 <SX1276SetOpMode>
    DelayMs( 1 );
 8041dd0:	2001      	movs	r0, #1
 8041dd2:	f009 ffd1 	bl	804bd78 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 8041dd6:	f008 fe64 	bl	804aaa2 <TimerGetCurrentTime>
 8041dda:	4605      	mov	r5, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8041ddc:	4628      	mov	r0, r5
 8041dde:	f008 fe67 	bl	804aab0 <TimerGetElapsedTime>
 8041de2:	42a0      	cmp	r0, r4
 8041de4:	d304      	bcc.n	8041df0 <SX1276IsChannelFree+0x40>
    bool status = true;
 8041de6:	2401      	movs	r4, #1
    SX1276SetSleep( );
 8041de8:	f7ff fd96 	bl	8041918 <SX1276SetSleep>
}
 8041dec:	4620      	mov	r0, r4
 8041dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rssi = SX1276ReadRssi( modem );
 8041df0:	4630      	mov	r0, r6
 8041df2:	f7ff fd59 	bl	80418a8 <SX1276ReadRssi>
        if( rssi > rssiThresh )
 8041df6:	42b8      	cmp	r0, r7
 8041df8:	ddf0      	ble.n	8041ddc <SX1276IsChannelFree+0x2c>
            status = false;
 8041dfa:	2400      	movs	r4, #0
 8041dfc:	e7f4      	b.n	8041de8 <SX1276IsChannelFree+0x38>
        return false;
 8041dfe:	2400      	movs	r4, #0
 8041e00:	e7f4      	b.n	8041dec <SX1276IsChannelFree+0x3c>
 8041e02:	bf00      	nop
 8041e04:	20009c00 	.word	0x20009c00

08041e08 <SX1276Random>:
{
 8041e08:	b538      	push	{r3, r4, r5, lr}
    SX1276SetModem( MODEM_LORA );
 8041e0a:	2001      	movs	r0, #1
 8041e0c:	f7ff ff4e 	bl	8041cac <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8041e10:	21ff      	movs	r1, #255	; 0xff
 8041e12:	2011      	movs	r0, #17
 8041e14:	f7ff fb9a 	bl	804154c <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8041e18:	2005      	movs	r0, #5
 8041e1a:	f7ff fd9d 	bl	8041958 <SX1276SetOpMode>
 8041e1e:	2400      	movs	r4, #0
    uint32_t rnd = 0;
 8041e20:	4625      	mov	r5, r4
        DelayMs( 1 );
 8041e22:	2001      	movs	r0, #1
 8041e24:	f009 ffa8 	bl	804bd78 <HAL_Delay>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8041e28:	202c      	movs	r0, #44	; 0x2c
 8041e2a:	f7ff fbdf 	bl	80415ec <SX1276Read>
 8041e2e:	f000 0001 	and.w	r0, r0, #1
 8041e32:	40a0      	lsls	r0, r4
 8041e34:	3401      	adds	r4, #1
    for( i = 0; i < 32; i++ )
 8041e36:	2c20      	cmp	r4, #32
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8041e38:	ea45 0500 	orr.w	r5, r5, r0
    for( i = 0; i < 32; i++ )
 8041e3c:	d1f1      	bne.n	8041e22 <SX1276Random+0x1a>
    SX1276SetSleep( );
 8041e3e:	f7ff fd6b 	bl	8041918 <SX1276SetSleep>
}
 8041e42:	4628      	mov	r0, r5
 8041e44:	bd38      	pop	{r3, r4, r5, pc}
	...

08041e48 <SX1276SetRxConfig>:
{
 8041e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8041e4c:	b089      	sub	sp, #36	; 0x24
 8041e4e:	4604      	mov	r4, r0
 8041e50:	9300      	str	r3, [sp, #0]
 8041e52:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8041e56:	9304      	str	r3, [sp, #16]
 8041e58:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8041e5c:	9302      	str	r3, [sp, #8]
 8041e5e:	468a      	mov	sl, r1
 8041e60:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8041e64:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
 8041e68:	9305      	str	r3, [sp, #20]
 8041e6a:	4615      	mov	r5, r2
 8041e6c:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 8041e70:	9206      	str	r2, [sp, #24]
 8041e72:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 8041e76:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8041e7a:	f89d 8054 	ldrb.w	r8, [sp, #84]	; 0x54
 8041e7e:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
 8041e82:	f89d 605c 	ldrb.w	r6, [sp, #92]	; 0x5c
 8041e86:	9107      	str	r1, [sp, #28]
    SX1276SetModem( modem );
 8041e88:	f7ff ff10 	bl	8041cac <SX1276SetModem>
    switch( modem )
 8041e8c:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8041e90:	b134      	cbz	r4, 8041ea0 <SX1276SetRxConfig+0x58>
 8041e92:	2c01      	cmp	r4, #1
 8041e94:	9907      	ldr	r1, [sp, #28]
 8041e96:	f000 8083 	beq.w	8041fa0 <SX1276SetRxConfig+0x158>
}
 8041e9a:	b009      	add	sp, #36	; 0x24
 8041e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8041ea0:	4ca1      	ldr	r4, [pc, #644]	; (8042128 <SX1276SetRxConfig+0x2e0>)
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 8041ea2:	4628      	mov	r0, r5
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8041ea4:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8041ea8:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8041eac:	f8c4 a014 	str.w	sl, [r4, #20]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8041eb0:	e9c4 9506 	strd	r9, r5, [r4, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8041eb4:	f884 8022 	strb.w	r8, [r4, #34]	; 0x22
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8041eb8:	f884 b023 	strb.w	fp, [r4, #35]	; 0x23
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8041ebc:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8041ec0:	8427      	strh	r7, [r4, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 8041ec2:	f7fe fc4f 	bl	8040764 <__aeabi_ui2d>
 8041ec6:	e9cd 0100 	strd	r0, r1, [sp]
 8041eca:	4602      	mov	r2, r0
 8041ecc:	460b      	mov	r3, r1
 8041ece:	2000      	movs	r0, #0
 8041ed0:	4996      	ldr	r1, [pc, #600]	; (804212c <SX1276SetRxConfig+0x2e4>)
 8041ed2:	f7fe fdeb 	bl	8040aac <__aeabi_ddiv>
 8041ed6:	2200      	movs	r2, #0
 8041ed8:	4b95      	ldr	r3, [pc, #596]	; (8042130 <SX1276SetRxConfig+0x2e8>)
 8041eda:	f7fe fcbd 	bl	8040858 <__aeabi_dmul>
 8041ede:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8041ee2:	9804      	ldr	r0, [sp, #16]
 8041ee4:	f7fe fc4e 	bl	8040784 <__aeabi_i2d>
 8041ee8:	4602      	mov	r2, r0
 8041eea:	460b      	mov	r3, r1
 8041eec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8041ef0:	f7fe fcb2 	bl	8040858 <__aeabi_dmul>
 8041ef4:	2200      	movs	r2, #0
 8041ef6:	4b8f      	ldr	r3, [pc, #572]	; (8042134 <SX1276SetRxConfig+0x2ec>)
 8041ef8:	f7fe fcae 	bl	8040858 <__aeabi_dmul>
 8041efc:	f7fe ff6e 	bl	8040ddc <__aeabi_d2uiz>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8041f00:	e9dd 2300 	ldrd	r2, r3, [sp]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 8041f04:	62e0      	str	r0, [r4, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8041f06:	a186      	add	r1, pc, #536	; (adr r1, 8042120 <SX1276SetRxConfig+0x2d8>)
 8041f08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8041f0c:	f7fe fdce 	bl	8040aac <__aeabi_ddiv>
 8041f10:	f7fe ff64 	bl	8040ddc <__aeabi_d2uiz>
 8041f14:	b284      	uxth	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8041f16:	0a21      	lsrs	r1, r4, #8
 8041f18:	2002      	movs	r0, #2
 8041f1a:	f7ff fb17 	bl	804154c <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8041f1e:	b2e1      	uxtb	r1, r4
 8041f20:	2003      	movs	r0, #3
 8041f22:	f7ff fb13 	bl	804154c <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8041f26:	4650      	mov	r0, sl
 8041f28:	f7ff fa9a 	bl	8041460 <GetFskBandwidthRegValue>
 8041f2c:	4601      	mov	r1, r0
 8041f2e:	2012      	movs	r0, #18
 8041f30:	f7ff fb0c 	bl	804154c <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8041f34:	4648      	mov	r0, r9
 8041f36:	f7ff fa93 	bl	8041460 <GetFskBandwidthRegValue>
 8041f3a:	4601      	mov	r1, r0
 8041f3c:	2013      	movs	r0, #19
 8041f3e:	f7ff fb05 	bl	804154c <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8041f42:	0a39      	lsrs	r1, r7, #8
 8041f44:	2025      	movs	r0, #37	; 0x25
 8041f46:	f7ff fb01 	bl	804154c <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8041f4a:	b2f9      	uxtb	r1, r7
 8041f4c:	2026      	movs	r0, #38	; 0x26
 8041f4e:	f7ff fafd 	bl	804154c <SX1276Write>
            if( fixLen == 1 )
 8041f52:	f1b8 0f00 	cmp.w	r8, #0
 8041f56:	d021      	beq.n	8041f9c <SX1276SetRxConfig+0x154>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8041f58:	4659      	mov	r1, fp
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8041f5a:	2032      	movs	r0, #50	; 0x32
 8041f5c:	f7ff faf6 	bl	804154c <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8041f60:	2030      	movs	r0, #48	; 0x30
 8041f62:	f7ff fb43 	bl	80415ec <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8041f66:	f1b8 0f00 	cmp.w	r8, #0
                           RF_PACKETCONFIG1_CRC_MASK &
 8041f6a:	f000 006f 	and.w	r0, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8041f6e:	bf14      	ite	ne
 8041f70:	2100      	movne	r1, #0
 8041f72:	f06f 017f 	mvneq.w	r1, #127	; 0x7f
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8041f76:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
 8041f7a:	4301      	orrs	r1, r0
            SX1276Write( REG_PACKETCONFIG1,
 8041f7c:	b2c9      	uxtb	r1, r1
 8041f7e:	2030      	movs	r0, #48	; 0x30
 8041f80:	f7ff fae4 	bl	804154c <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8041f84:	2031      	movs	r0, #49	; 0x31
 8041f86:	f7ff fb31 	bl	80415ec <SX1276Read>
 8041f8a:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8041f8e:	b2c9      	uxtb	r1, r1
 8041f90:	2031      	movs	r0, #49	; 0x31
}
 8041f92:	b009      	add	sp, #36	; 0x24
 8041f94:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8041f98:	f7ff bad8 	b.w	804154c <SX1276Write>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8041f9c:	21ff      	movs	r1, #255	; 0xff
 8041f9e:	e7dc      	b.n	8041f5a <SX1276SetRxConfig+0x112>
            if( bandwidth > 2 )
 8041fa0:	f1ba 0f02 	cmp.w	sl, #2
 8041fa4:	d900      	bls.n	8041fa8 <SX1276SetRxConfig+0x160>
 8041fa6:	e7fe      	b.n	8041fa6 <SX1276SetRxConfig+0x15e>
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8041fa8:	4c5f      	ldr	r4, [pc, #380]	; (8042128 <SX1276SetRxConfig+0x2e0>)
            SX1276.Settings.LoRa.Coderate = coderate;
 8041faa:	9800      	ldr	r0, [sp, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8041fac:	f884 1053 	strb.w	r1, [r4, #83]	; 0x53
            bandwidth += 7;
 8041fb0:	f10a 0907 	add.w	r9, sl, #7
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8041fb4:	9902      	ldr	r1, [sp, #8]
            SX1276.Settings.LoRa.Coderate = coderate;
 8041fb6:	f884 004d 	strb.w	r0, [r4, #77]	; 0x4d
            if( datarate > 12 )
 8041fba:	2d0c      	cmp	r5, #12
            SX1276.Settings.LoRa.Datarate = datarate;
 8041fbc:	e9c4 9511 	strd	r9, r5, [r4, #68]	; 0x44
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8041fc0:	f8a4 704e 	strh.w	r7, [r4, #78]	; 0x4e
            SX1276.Settings.LoRa.FixLen = fixLen;
 8041fc4:	f884 8050 	strb.w	r8, [r4, #80]	; 0x50
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8041fc8:	f884 b051 	strb.w	fp, [r4, #81]	; 0x51
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8041fcc:	f884 6052 	strb.w	r6, [r4, #82]	; 0x52
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8041fd0:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8041fd4:	f884 2055 	strb.w	r2, [r4, #85]	; 0x55
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8041fd8:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
            if( datarate > 12 )
 8041fdc:	f200 8098 	bhi.w	8042110 <SX1276SetRxConfig+0x2c8>
            else if( datarate < 6 )
 8041fe0:	2d05      	cmp	r5, #5
 8041fe2:	f240 8081 	bls.w	80420e8 <SX1276SetRxConfig+0x2a0>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8041fe6:	f1b9 0f07 	cmp.w	r9, #7
 8041fea:	d176      	bne.n	80420da <SX1276SetRxConfig+0x292>
 8041fec:	f1a5 030b 	sub.w	r3, r5, #11
 8041ff0:	2b01      	cmp	r3, #1
 8041ff2:	d877      	bhi.n	80420e4 <SX1276SetRxConfig+0x29c>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8041ff4:	2301      	movs	r3, #1
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8041ff6:	201d      	movs	r0, #29
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8041ff8:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8041ffc:	f7ff faf6 	bl	80415ec <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8042000:	9b00      	ldr	r3, [sp, #0]
 8042002:	ea48 0143 	orr.w	r1, r8, r3, lsl #1
 8042006:	ea41 1109 	orr.w	r1, r1, r9, lsl #4
            SX1276Write( REG_LR_MODEMCONFIG1,
 804200a:	b2c9      	uxtb	r1, r1
 804200c:	201d      	movs	r0, #29
 804200e:	f7ff fa9d 	bl	804154c <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8042012:	201e      	movs	r0, #30
 8042014:	f7ff faea 	bl	80415ec <SX1276Read>
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8042018:	9b04      	ldr	r3, [sp, #16]
 804201a:	f3c3 2101 	ubfx	r1, r3, #8, #2
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 804201e:	f000 0008 	and.w	r0, r0, #8
            SX1276Write( REG_LR_MODEMCONFIG2,
 8042022:	ea41 0186 	orr.w	r1, r1, r6, lsl #2
 8042026:	4301      	orrs	r1, r0
 8042028:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 804202c:	b2c9      	uxtb	r1, r1
 804202e:	201e      	movs	r0, #30
 8042030:	f7ff fa8c 	bl	804154c <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8042034:	2026      	movs	r0, #38	; 0x26
 8042036:	f7ff fad9 	bl	80415ec <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 804203a:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 804203e:	f020 0008 	bic.w	r0, r0, #8
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8042042:	ea40 01c1 	orr.w	r1, r0, r1, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8042046:	b2c9      	uxtb	r1, r1
 8042048:	2026      	movs	r0, #38	; 0x26
 804204a:	f7ff fa7f 	bl	804154c <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 804204e:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8042052:	201f      	movs	r0, #31
 8042054:	f7ff fa7a 	bl	804154c <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8042058:	0a39      	lsrs	r1, r7, #8
 804205a:	2020      	movs	r0, #32
 804205c:	f7ff fa76 	bl	804154c <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8042060:	b2f9      	uxtb	r1, r7
 8042062:	2021      	movs	r0, #33	; 0x21
 8042064:	f7ff fa72 	bl	804154c <SX1276Write>
            if( fixLen == 1 )
 8042068:	f1b8 0f00 	cmp.w	r8, #0
 804206c:	d003      	beq.n	8042076 <SX1276SetRxConfig+0x22e>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 804206e:	4659      	mov	r1, fp
 8042070:	2022      	movs	r0, #34	; 0x22
 8042072:	f7ff fa6b 	bl	804154c <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8042076:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 804207a:	b16b      	cbz	r3, 8042098 <SX1276SetRxConfig+0x250>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 804207c:	2044      	movs	r0, #68	; 0x44
 804207e:	f7ff fab5 	bl	80415ec <SX1276Read>
 8042082:	f060 017f 	orn	r1, r0, #127	; 0x7f
 8042086:	b2c9      	uxtb	r1, r1
 8042088:	2044      	movs	r0, #68	; 0x44
 804208a:	f7ff fa5f 	bl	804154c <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 804208e:	f894 1054 	ldrb.w	r1, [r4, #84]	; 0x54
 8042092:	2024      	movs	r0, #36	; 0x24
 8042094:	f7ff fa5a 	bl	804154c <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8042098:	f1b9 0f09 	cmp.w	r9, #9
 804209c:	d12a      	bne.n	80420f4 <SX1276SetRxConfig+0x2ac>
 804209e:	68a2      	ldr	r2, [r4, #8]
 80420a0:	4b25      	ldr	r3, [pc, #148]	; (8042138 <SX1276SetRxConfig+0x2f0>)
 80420a2:	429a      	cmp	r2, r3
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 80420a4:	f04f 0102 	mov.w	r1, #2
 80420a8:	f04f 0036 	mov.w	r0, #54	; 0x36
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 80420ac:	d91e      	bls.n	80420ec <SX1276SetRxConfig+0x2a4>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 80420ae:	f7ff fa4d 	bl	804154c <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 80420b2:	2164      	movs	r1, #100	; 0x64
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 80420b4:	203a      	movs	r0, #58	; 0x3a
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 80420b6:	f7ff fa49 	bl	804154c <SX1276Write>
            if( datarate == 6 )
 80420ba:	2d06      	cmp	r5, #6
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80420bc:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( datarate == 6 )
 80420c0:	d11b      	bne.n	80420fa <SX1276SetRxConfig+0x2b2>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80420c2:	f7ff fa93 	bl	80415ec <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80420c6:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80420ca:	f041 0105 	orr.w	r1, r1, #5
 80420ce:	2031      	movs	r0, #49	; 0x31
 80420d0:	f7ff fa3c 	bl	804154c <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80420d4:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80420d6:	2037      	movs	r0, #55	; 0x37
 80420d8:	e75b      	b.n	8041f92 <SX1276SetRxConfig+0x14a>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80420da:	f1b9 0f08 	cmp.w	r9, #8
 80420de:	d101      	bne.n	80420e4 <SX1276SetRxConfig+0x29c>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 80420e0:	2d0c      	cmp	r5, #12
 80420e2:	d087      	beq.n	8041ff4 <SX1276SetRxConfig+0x1ac>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80420e4:	2300      	movs	r3, #0
 80420e6:	e786      	b.n	8041ff6 <SX1276SetRxConfig+0x1ae>
                datarate = 6;
 80420e8:	2506      	movs	r5, #6
 80420ea:	e7fb      	b.n	80420e4 <SX1276SetRxConfig+0x29c>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 80420ec:	f7ff fa2e 	bl	804154c <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 80420f0:	217f      	movs	r1, #127	; 0x7f
 80420f2:	e7df      	b.n	80420b4 <SX1276SetRxConfig+0x26c>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 80420f4:	2103      	movs	r1, #3
 80420f6:	2036      	movs	r0, #54	; 0x36
 80420f8:	e7dd      	b.n	80420b6 <SX1276SetRxConfig+0x26e>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80420fa:	f7ff fa77 	bl	80415ec <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80420fe:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8042102:	f041 0103 	orr.w	r1, r1, #3
 8042106:	2031      	movs	r0, #49	; 0x31
 8042108:	f7ff fa20 	bl	804154c <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 804210c:	210a      	movs	r1, #10
 804210e:	e7e2      	b.n	80420d6 <SX1276SetRxConfig+0x28e>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8042110:	f1ba 0f02 	cmp.w	sl, #2
 8042114:	f04f 050c 	mov.w	r5, #12
 8042118:	d0e4      	beq.n	80420e4 <SX1276SetRxConfig+0x29c>
 804211a:	e76b      	b.n	8041ff4 <SX1276SetRxConfig+0x1ac>
 804211c:	f3af 8000 	nop.w
 8042120:	00000000 	.word	0x00000000
 8042124:	417e8480 	.word	0x417e8480
 8042128:	20009c00 	.word	0x20009c00
 804212c:	3ff00000 	.word	0x3ff00000
 8042130:	40200000 	.word	0x40200000
 8042134:	408f4000 	.word	0x408f4000
 8042138:	1f4add40 	.word	0x1f4add40
 804213c:	00000000 	.word	0x00000000

08042140 <SX1276SetTxConfig>:
{
 8042140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8042144:	b087      	sub	sp, #28
 8042146:	4699      	mov	r9, r3
 8042148:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 804214c:	9301      	str	r3, [sp, #4]
 804214e:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8042152:	9302      	str	r3, [sp, #8]
 8042154:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8042158:	9304      	str	r3, [sp, #16]
 804215a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 804215c:	9205      	str	r2, [sp, #20]
 804215e:	4688      	mov	r8, r1
 8042160:	4683      	mov	fp, r0
 8042162:	9303      	str	r3, [sp, #12]
 8042164:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8042166:	f8bd 7048 	ldrh.w	r7, [sp, #72]	; 0x48
 804216a:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 804216e:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8042172:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
    SX1276SetModem( modem );
 8042176:	f7ff fd99 	bl	8041cac <SX1276SetModem>
    LoRaBoardCallbacks->SX1276BoardSetRfTxPower( power );
 804217a:	4987      	ldr	r1, [pc, #540]	; (8042398 <SX1276SetTxConfig+0x258>)
 804217c:	6809      	ldr	r1, [r1, #0]
 804217e:	4640      	mov	r0, r8
 8042180:	68c9      	ldr	r1, [r1, #12]
 8042182:	4788      	blx	r1
    switch( modem )
 8042184:	9a05      	ldr	r2, [sp, #20]
 8042186:	f1bb 0f00 	cmp.w	fp, #0
 804218a:	d005      	beq.n	8042198 <SX1276SetTxConfig+0x58>
 804218c:	f1bb 0f01 	cmp.w	fp, #1
 8042190:	d061      	beq.n	8042256 <SX1276SetTxConfig+0x116>
}
 8042192:	b007      	add	sp, #28
 8042194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Power = power;
 8042198:	4980      	ldr	r1, [pc, #512]	; (804239c <SX1276SetTxConfig+0x25c>)
            SX1276.Settings.Fsk.TxTimeout = timeout;
 804219a:	9b03      	ldr	r3, [sp, #12]
            SX1276.Settings.Fsk.Power = power;
 804219c:	f881 800c 	strb.w	r8, [r1, #12]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80421a0:	e9c1 2904 	strd	r2, r9, [r1, #16]
            SX1276.Settings.Fsk.Datarate = datarate;
 80421a4:	61cc      	str	r4, [r1, #28]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 80421a6:	f881 5024 	strb.w	r5, [r1, #36]	; 0x24
            SX1276.Settings.Fsk.TxTimeout = timeout;
 80421aa:	628b      	str	r3, [r1, #40]	; 0x28
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 80421ac:	4610      	mov	r0, r2
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 80421ae:	840f      	strh	r7, [r1, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 80421b0:	f881 6022 	strb.w	r6, [r1, #34]	; 0x22
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 80421b4:	f881 a025 	strb.w	sl, [r1, #37]	; 0x25
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 80421b8:	f7fe fad4 	bl	8040764 <__aeabi_ui2d>
 80421bc:	a372      	add	r3, pc, #456	; (adr r3, 8042388 <SX1276SetTxConfig+0x248>)
 80421be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80421c2:	f7fe fc73 	bl	8040aac <__aeabi_ddiv>
 80421c6:	f7fe fe09 	bl	8040ddc <__aeabi_d2uiz>
 80421ca:	fa1f f880 	uxth.w	r8, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 80421ce:	ea4f 2118 	mov.w	r1, r8, lsr #8
 80421d2:	2004      	movs	r0, #4
 80421d4:	f7ff f9ba 	bl	804154c <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 80421d8:	fa5f f188 	uxtb.w	r1, r8
 80421dc:	2005      	movs	r0, #5
 80421de:	f7ff f9b5 	bl	804154c <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 80421e2:	4620      	mov	r0, r4
 80421e4:	f7fe fabe 	bl	8040764 <__aeabi_ui2d>
 80421e8:	4602      	mov	r2, r0
 80421ea:	460b      	mov	r3, r1
 80421ec:	a168      	add	r1, pc, #416	; (adr r1, 8042390 <SX1276SetTxConfig+0x250>)
 80421ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80421f2:	f7fe fc5b 	bl	8040aac <__aeabi_ddiv>
 80421f6:	f7fe fdf1 	bl	8040ddc <__aeabi_d2uiz>
 80421fa:	b284      	uxth	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 80421fc:	0a21      	lsrs	r1, r4, #8
 80421fe:	2002      	movs	r0, #2
 8042200:	f7ff f9a4 	bl	804154c <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8042204:	b2e1      	uxtb	r1, r4
 8042206:	2003      	movs	r0, #3
 8042208:	f7ff f9a0 	bl	804154c <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 804220c:	0a39      	lsrs	r1, r7, #8
 804220e:	2025      	movs	r0, #37	; 0x25
 8042210:	f7ff f99c 	bl	804154c <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8042214:	b2f9      	uxtb	r1, r7
 8042216:	2026      	movs	r0, #38	; 0x26
 8042218:	f7ff f998 	bl	804154c <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 804221c:	2030      	movs	r0, #48	; 0x30
 804221e:	f7ff f9e5 	bl	80415ec <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8042222:	2e00      	cmp	r6, #0
                           RF_PACKETCONFIG1_CRC_MASK &
 8042224:	f000 006f 	and.w	r0, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8042228:	bf14      	ite	ne
 804222a:	2100      	movne	r1, #0
 804222c:	f06f 017f 	mvneq.w	r1, #127	; 0x7f
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8042230:	ea40 1505 	orr.w	r5, r0, r5, lsl #4
 8042234:	4329      	orrs	r1, r5
            SX1276Write( REG_PACKETCONFIG1,
 8042236:	b2c9      	uxtb	r1, r1
 8042238:	2030      	movs	r0, #48	; 0x30
 804223a:	f7ff f987 	bl	804154c <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 804223e:	2031      	movs	r0, #49	; 0x31
 8042240:	f7ff f9d4 	bl	80415ec <SX1276Read>
 8042244:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8042248:	b2c9      	uxtb	r1, r1
 804224a:	2031      	movs	r0, #49	; 0x31
}
 804224c:	b007      	add	sp, #28
 804224e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8042252:	f7ff b97b 	b.w	804154c <SX1276Write>
        	PRINTF("SETTXCONFIG power %d\r\n", power);
 8042256:	4641      	mov	r1, r8
 8042258:	4851      	ldr	r0, [pc, #324]	; (80423a0 <SX1276SetTxConfig+0x260>)
 804225a:	f008 fc73 	bl	804ab44 <TraceSend>
            SX1276.Settings.LoRa.Power = power;
 804225e:	4a4f      	ldr	r2, [pc, #316]	; (804239c <SX1276SetTxConfig+0x25c>)
            if( bandwidth > 2 )
 8042260:	f1b9 0f02 	cmp.w	r9, #2
            SX1276.Settings.LoRa.Power = power;
 8042264:	f882 8040 	strb.w	r8, [r2, #64]	; 0x40
 8042268:	4690      	mov	r8, r2
            if( bandwidth > 2 )
 804226a:	d900      	bls.n	804226e <SX1276SetTxConfig+0x12e>
 804226c:	e7fe      	b.n	804226c <SX1276SetTxConfig+0x12c>
            SX1276.Settings.LoRa.Coderate = coderate;
 804226e:	9b01      	ldr	r3, [sp, #4]
 8042270:	f882 304d 	strb.w	r3, [r2, #77]	; 0x4d
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8042274:	9b02      	ldr	r3, [sp, #8]
 8042276:	f882 3053 	strb.w	r3, [r2, #83]	; 0x53
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 804227a:	9b04      	ldr	r3, [sp, #16]
 804227c:	f882 3054 	strb.w	r3, [r2, #84]	; 0x54
            bandwidth += 7;
 8042280:	f109 0b07 	add.w	fp, r9, #7
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8042284:	9b03      	ldr	r3, [sp, #12]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8042286:	f8a2 704e 	strh.w	r7, [r2, #78]	; 0x4e
            if( datarate > 12 )
 804228a:	2c0c      	cmp	r4, #12
            SX1276.Settings.LoRa.Datarate = datarate;
 804228c:	e9c2 b411 	strd	fp, r4, [r2, #68]	; 0x44
            SX1276.Settings.LoRa.FixLen = fixLen;
 8042290:	f882 6050 	strb.w	r6, [r2, #80]	; 0x50
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8042294:	f882 5052 	strb.w	r5, [r2, #82]	; 0x52
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8042298:	f882 a055 	strb.w	sl, [r2, #85]	; 0x55
            SX1276.Settings.LoRa.TxTimeout = timeout;
 804229c:	6593      	str	r3, [r2, #88]	; 0x58
            if( datarate > 12 )
 804229e:	d86d      	bhi.n	804237c <SX1276SetTxConfig+0x23c>
            else if( datarate < 6 )
 80422a0:	2c05      	cmp	r4, #5
 80422a2:	d95e      	bls.n	8042362 <SX1276SetTxConfig+0x222>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80422a4:	f1bb 0f07 	cmp.w	fp, #7
 80422a8:	d154      	bne.n	8042354 <SX1276SetTxConfig+0x214>
 80422aa:	f1a4 030b 	sub.w	r3, r4, #11
 80422ae:	2b01      	cmp	r3, #1
 80422b0:	d855      	bhi.n	804235e <SX1276SetTxConfig+0x21e>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 80422b2:	2301      	movs	r3, #1
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80422b4:	f888 304c 	strb.w	r3, [r8, #76]	; 0x4c
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80422b8:	9b02      	ldr	r3, [sp, #8]
 80422ba:	b16b      	cbz	r3, 80422d8 <SX1276SetTxConfig+0x198>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 80422bc:	2044      	movs	r0, #68	; 0x44
 80422be:	f7ff f995 	bl	80415ec <SX1276Read>
 80422c2:	f060 017f 	orn	r1, r0, #127	; 0x7f
 80422c6:	b2c9      	uxtb	r1, r1
 80422c8:	2044      	movs	r0, #68	; 0x44
 80422ca:	f7ff f93f 	bl	804154c <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 80422ce:	f898 1054 	ldrb.w	r1, [r8, #84]	; 0x54
 80422d2:	2024      	movs	r0, #36	; 0x24
 80422d4:	f7ff f93a 	bl	804154c <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 80422d8:	201d      	movs	r0, #29
 80422da:	f7ff f987 	bl	80415ec <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80422de:	9b01      	ldr	r3, [sp, #4]
 80422e0:	ea46 0643 	orr.w	r6, r6, r3, lsl #1
 80422e4:	ea46 110b 	orr.w	r1, r6, fp, lsl #4
            SX1276Write( REG_LR_MODEMCONFIG1,
 80422e8:	b2c9      	uxtb	r1, r1
 80422ea:	201d      	movs	r0, #29
 80422ec:	f7ff f92e 	bl	804154c <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 80422f0:	201e      	movs	r0, #30
 80422f2:	f7ff f97b 	bl	80415ec <SX1276Read>
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 80422f6:	00ad      	lsls	r5, r5, #2
                           RFLR_MODEMCONFIG2_SF_MASK &
 80422f8:	f000 000b 	and.w	r0, r0, #11
            SX1276Write( REG_LR_MODEMCONFIG2,
 80422fc:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
 8042300:	4305      	orrs	r5, r0
 8042302:	b2e9      	uxtb	r1, r5
 8042304:	201e      	movs	r0, #30
 8042306:	f7ff f921 	bl	804154c <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 804230a:	2026      	movs	r0, #38	; 0x26
 804230c:	f7ff f96e 	bl	80415ec <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8042310:	f898 104c 	ldrb.w	r1, [r8, #76]	; 0x4c
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8042314:	f020 0008 	bic.w	r0, r0, #8
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8042318:	ea40 01c1 	orr.w	r1, r0, r1, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
 804231c:	b2c9      	uxtb	r1, r1
 804231e:	2026      	movs	r0, #38	; 0x26
 8042320:	f7ff f914 	bl	804154c <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8042324:	0a39      	lsrs	r1, r7, #8
 8042326:	2020      	movs	r0, #32
 8042328:	f7ff f910 	bl	804154c <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 804232c:	2021      	movs	r0, #33	; 0x21
 804232e:	b2f9      	uxtb	r1, r7
 8042330:	f7ff f90c 	bl	804154c <SX1276Write>
            if( datarate == 6 )
 8042334:	2c06      	cmp	r4, #6
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8042336:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( datarate == 6 )
 804233a:	d114      	bne.n	8042366 <SX1276SetTxConfig+0x226>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 804233c:	f7ff f956 	bl	80415ec <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8042340:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8042344:	f041 0105 	orr.w	r1, r1, #5
 8042348:	2031      	movs	r0, #49	; 0x31
 804234a:	f7ff f8ff 	bl	804154c <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 804234e:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8042350:	2037      	movs	r0, #55	; 0x37
 8042352:	e77b      	b.n	804224c <SX1276SetTxConfig+0x10c>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8042354:	f1bb 0f08 	cmp.w	fp, #8
 8042358:	d101      	bne.n	804235e <SX1276SetTxConfig+0x21e>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 804235a:	2c0c      	cmp	r4, #12
 804235c:	d0a9      	beq.n	80422b2 <SX1276SetTxConfig+0x172>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 804235e:	2300      	movs	r3, #0
 8042360:	e7a8      	b.n	80422b4 <SX1276SetTxConfig+0x174>
                datarate = 6;
 8042362:	2406      	movs	r4, #6
 8042364:	e7fb      	b.n	804235e <SX1276SetTxConfig+0x21e>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8042366:	f7ff f941 	bl	80415ec <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 804236a:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 804236e:	f041 0103 	orr.w	r1, r1, #3
 8042372:	2031      	movs	r0, #49	; 0x31
 8042374:	f7ff f8ea 	bl	804154c <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8042378:	210a      	movs	r1, #10
 804237a:	e7e9      	b.n	8042350 <SX1276SetTxConfig+0x210>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 804237c:	f1b9 0f02 	cmp.w	r9, #2
 8042380:	f04f 040c 	mov.w	r4, #12
 8042384:	d0eb      	beq.n	804235e <SX1276SetTxConfig+0x21e>
 8042386:	e794      	b.n	80422b2 <SX1276SetTxConfig+0x172>
 8042388:	00000000 	.word	0x00000000
 804238c:	404e8480 	.word	0x404e8480
 8042390:	00000000 	.word	0x00000000
 8042394:	417e8480 	.word	0x417e8480
 8042398:	20008380 	.word	0x20008380
 804239c:	20009c00 	.word	0x20009c00
 80423a0:	0804e733 	.word	0x0804e733

080423a4 <SX1276SetTxContinuousWave>:
{
 80423a4:	b570      	push	{r4, r5, r6, lr}
 80423a6:	4606      	mov	r6, r0
 80423a8:	b08a      	sub	sp, #40	; 0x28
    uint32_t timeout = ( uint32_t )( time * 1000 );
 80423aa:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    PRINTF("SX1276SetTxContinuousWave : power = %d\r\n", power);
 80423ae:	481d      	ldr	r0, [pc, #116]	; (8042424 <SX1276SetTxContinuousWave+0x80>)
    uint32_t timeout = ( uint32_t )( time * 1000 );
 80423b0:	4354      	muls	r4, r2
{
 80423b2:	460d      	mov	r5, r1
    PRINTF("SX1276SetTxContinuousWave : power = %d\r\n", power);
 80423b4:	f008 fbc6 	bl	804ab44 <TraceSend>
    SX1276SetChannel( freq );
 80423b8:	4630      	mov	r0, r6
 80423ba:	f7ff f8d3 	bl	8041564 <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 80423be:	2300      	movs	r3, #0
 80423c0:	2205      	movs	r2, #5
 80423c2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80423c6:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 80423ca:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80423ce:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80423d2:	9303      	str	r3, [sp, #12]
 80423d4:	4618      	mov	r0, r3
 80423d6:	4629      	mov	r1, r5
 80423d8:	9200      	str	r2, [sp, #0]
 80423da:	9408      	str	r4, [sp, #32]
 80423dc:	461a      	mov	r2, r3
 80423de:	f7ff feaf 	bl	8042140 <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 80423e2:	2031      	movs	r0, #49	; 0x31
 80423e4:	f7ff f902 	bl	80415ec <SX1276Read>
 80423e8:	f000 01bf 	and.w	r1, r0, #191	; 0xbf
 80423ec:	2031      	movs	r0, #49	; 0x31
 80423ee:	f7ff f8ad 	bl	804154c <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 80423f2:	4d0d      	ldr	r5, [pc, #52]	; (8042428 <SX1276SetTxContinuousWave+0x84>)
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 80423f4:	21f0      	movs	r1, #240	; 0xf0
 80423f6:	2040      	movs	r0, #64	; 0x40
 80423f8:	f7ff f8a8 	bl	804154c <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 80423fc:	21a0      	movs	r1, #160	; 0xa0
 80423fe:	2041      	movs	r0, #65	; 0x41
 8042400:	f7ff f8a4 	bl	804154c <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8042404:	4621      	mov	r1, r4
 8042406:	4628      	mov	r0, r5
 8042408:	f008 fb3a 	bl	804aa80 <TimerSetValue>
    SX1276.Settings.State = RF_TX_RUNNING;
 804240c:	4b07      	ldr	r3, [pc, #28]	; (804242c <SX1276SetTxContinuousWave+0x88>)
 804240e:	2202      	movs	r2, #2
    TimerStart( &TxTimeoutTimer );
 8042410:	4628      	mov	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 8042412:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 8042414:	f008 fa9a 	bl	804a94c <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8042418:	2003      	movs	r0, #3
}
 804241a:	b00a      	add	sp, #40	; 0x28
 804241c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8042420:	f7ff ba9a 	b.w	8041958 <SX1276SetOpMode>
 8042424:	0804e74a 	.word	0x0804e74a
 8042428:	20009bd0 	.word	0x20009bd0
 804242c:	20009c00 	.word	0x20009c00

08042430 <SX1276OnDio2Irq>:
{
 8042430:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8042432:	4c2d      	ldr	r4, [pc, #180]	; (80424e8 <SX1276OnDio2Irq+0xb8>)
    PRINTF("DIO2Irq\r\n");
 8042434:	482d      	ldr	r0, [pc, #180]	; (80424ec <SX1276OnDio2Irq+0xbc>)
 8042436:	f008 fb85 	bl	804ab44 <TraceSend>
    switch( SX1276.Settings.State )
 804243a:	7921      	ldrb	r1, [r4, #4]
 804243c:	2901      	cmp	r1, #1
 804243e:	d002      	beq.n	8042446 <SX1276OnDio2Irq+0x16>
 8042440:	2902      	cmp	r1, #2
 8042442:	d048      	beq.n	80424d6 <SX1276OnDio2Irq+0xa6>
}
 8042444:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 8042446:	7963      	ldrb	r3, [r4, #5]
 8042448:	b1d3      	cbz	r3, 8042480 <SX1276OnDio2Irq+0x50>
 804244a:	2b01      	cmp	r3, #1
 804244c:	d1fa      	bne.n	8042444 <SX1276OnDio2Irq+0x14>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 804244e:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 8042452:	2b00      	cmp	r3, #0
 8042454:	d0f6      	beq.n	8042444 <SX1276OnDio2Irq+0x14>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8042456:	2102      	movs	r1, #2
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8042458:	2012      	movs	r0, #18
 804245a:	f7ff f877 	bl	804154c <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 804245e:	4b24      	ldr	r3, [pc, #144]	; (80424f0 <SX1276OnDio2Irq+0xc0>)
 8042460:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8042464:	2b00      	cmp	r3, #0
 8042466:	d0ed      	beq.n	8042444 <SX1276OnDio2Irq+0x14>
 8042468:	695c      	ldr	r4, [r3, #20]
 804246a:	2c00      	cmp	r4, #0
 804246c:	d0ea      	beq.n	8042444 <SX1276OnDio2Irq+0x14>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 804246e:	201c      	movs	r0, #28
 8042470:	f7ff f8bc 	bl	80415ec <SX1276Read>
 8042474:	4623      	mov	r3, r4
 8042476:	f000 003f 	and.w	r0, r0, #63	; 0x3f
}
 804247a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 804247e:	4718      	bx	r3
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8042480:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
 8042484:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 8042486:	2d01      	cmp	r5, #1
 8042488:	d1dc      	bne.n	8042444 <SX1276OnDio2Irq+0x14>
                    TimerStop( &RxTimeoutSyncWord );
 804248a:	481a      	ldr	r0, [pc, #104]	; (80424f4 <SX1276OnDio2Irq+0xc4>)
 804248c:	f008 fad0 	bl	804aa30 <TimerStop>
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8042490:	2011      	movs	r0, #17
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 8042492:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8042496:	f7ff f8a9 	bl	80415ec <SX1276Read>
 804249a:	0840      	lsrs	r0, r0, #1
 804249c:	4240      	negs	r0, r0
 804249e:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 80424a2:	201b      	movs	r0, #27
 80424a4:	f7ff f8a2 	bl	80415ec <SX1276Read>
 80424a8:	4605      	mov	r5, r0
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 80424aa:	201c      	movs	r0, #28
 80424ac:	f7ff f89e 	bl	80415ec <SX1276Read>
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 80424b0:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 80424b4:	b2c2      	uxtb	r2, r0
 80424b6:	f643 5309 	movw	r3, #15625	; 0x3d09
 80424ba:	435a      	muls	r2, r3
 80424bc:	0a00      	lsrs	r0, r0, #8
 80424be:	3280      	adds	r2, #128	; 0x80
 80424c0:	4343      	muls	r3, r0
 80424c2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 80424c6:	200c      	movs	r0, #12
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 80424c8:	6363      	str	r3, [r4, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 80424ca:	f7ff f88f 	bl	80415ec <SX1276Read>
 80424ce:	0940      	lsrs	r0, r0, #5
 80424d0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
 80424d4:	e7b6      	b.n	8042444 <SX1276OnDio2Irq+0x14>
            switch( SX1276.Settings.Modem )
 80424d6:	7963      	ldrb	r3, [r4, #5]
 80424d8:	2b01      	cmp	r3, #1
 80424da:	d1b3      	bne.n	8042444 <SX1276OnDio2Irq+0x14>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 80424dc:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 80424e0:	2b00      	cmp	r3, #0
 80424e2:	d0af      	beq.n	8042444 <SX1276OnDio2Irq+0x14>
 80424e4:	e7b8      	b.n	8042458 <SX1276OnDio2Irq+0x28>
 80424e6:	bf00      	nop
 80424e8:	20009c00 	.word	0x20009c00
 80424ec:	0804e773 	.word	0x0804e773
 80424f0:	20008380 	.word	0x20008380
 80424f4:	20009be8 	.word	0x20009be8

080424f8 <SX1276OnDio3Irq>:
{
 80424f8:	b570      	push	{r4, r5, r6, lr}
	PRINTF("DIO3Irq\r\n");
 80424fa:	4813      	ldr	r0, [pc, #76]	; (8042548 <SX1276OnDio3Irq+0x50>)
 80424fc:	f008 fb22 	bl	804ab44 <TraceSend>
    switch( SX1276.Settings.Modem )
 8042500:	4b12      	ldr	r3, [pc, #72]	; (804254c <SX1276OnDio3Irq+0x54>)
 8042502:	795d      	ldrb	r5, [r3, #5]
 8042504:	2d01      	cmp	r5, #1
 8042506:	d11e      	bne.n	8042546 <SX1276OnDio3Irq+0x4e>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8042508:	2012      	movs	r0, #18
 804250a:	f7ff f86f 	bl	80415ec <SX1276Read>
 804250e:	f010 0601 	ands.w	r6, r0, #1
 8042512:	4c0f      	ldr	r4, [pc, #60]	; (8042550 <SX1276OnDio3Irq+0x58>)
 8042514:	d00c      	beq.n	8042530 <SX1276OnDio3Irq+0x38>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 8042516:	2105      	movs	r1, #5
 8042518:	2012      	movs	r0, #18
 804251a:	f7ff f817 	bl	804154c <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 804251e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8042522:	b183      	cbz	r3, 8042546 <SX1276OnDio3Irq+0x4e>
 8042524:	699b      	ldr	r3, [r3, #24]
 8042526:	b173      	cbz	r3, 8042546 <SX1276OnDio3Irq+0x4e>
                RadioEvents->CadDone( true );
 8042528:	4628      	mov	r0, r5
}
 804252a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                RadioEvents->CadDone( false );
 804252e:	4718      	bx	r3
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 8042530:	2104      	movs	r1, #4
 8042532:	2012      	movs	r0, #18
 8042534:	f7ff f80a 	bl	804154c <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8042538:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 804253c:	b11b      	cbz	r3, 8042546 <SX1276OnDio3Irq+0x4e>
 804253e:	699b      	ldr	r3, [r3, #24]
 8042540:	b10b      	cbz	r3, 8042546 <SX1276OnDio3Irq+0x4e>
                RadioEvents->CadDone( false );
 8042542:	4630      	mov	r0, r6
 8042544:	e7f1      	b.n	804252a <SX1276OnDio3Irq+0x32>
}
 8042546:	bd70      	pop	{r4, r5, r6, pc}
 8042548:	0804e77d 	.word	0x0804e77d
 804254c:	20009c00 	.word	0x20009c00
 8042550:	20008380 	.word	0x20008380

08042554 <SX1276WriteFifo>:
    SX1276WriteBuffer( 0, buffer, size );
 8042554:	460a      	mov	r2, r1
 8042556:	4601      	mov	r1, r0
 8042558:	2000      	movs	r0, #0
 804255a:	f7fe bfd7 	b.w	804150c <SX1276WriteBuffer>
	...

08042560 <SX1276Send>:
{
 8042560:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch( SX1276.Settings.Modem )
 8042562:	4c39      	ldr	r4, [pc, #228]	; (8042648 <SX1276Send+0xe8>)
{
 8042564:	f88d 1007 	strb.w	r1, [sp, #7]
    switch( SX1276.Settings.Modem )
 8042568:	7963      	ldrb	r3, [r4, #5]
{
 804256a:	4605      	mov	r5, r0
    switch( SX1276.Settings.Modem )
 804256c:	b11b      	cbz	r3, 8042576 <SX1276Send+0x16>
 804256e:	2b01      	cmp	r3, #1
 8042570:	d02f      	beq.n	80425d2 <SX1276Send+0x72>
    uint32_t txTimeout = 0;
 8042572:	2000      	movs	r0, #0
 8042574:	e01d      	b.n	80425b2 <SX1276Send+0x52>
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8042576:	87a3      	strh	r3, [r4, #60]	; 0x3c
            if( SX1276.Settings.Fsk.FixLen == false )
 8042578:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
            SX1276.Settings.FskPacketHandler.Size = size;
 804257c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8042580:	8761      	strh	r1, [r4, #58]	; 0x3a
            if( SX1276.Settings.Fsk.FixLen == false )
 8042582:	b9d3      	cbnz	r3, 80425ba <SX1276Send+0x5a>
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 8042584:	2101      	movs	r1, #1
 8042586:	f10d 0007 	add.w	r0, sp, #7
 804258a:	f7ff ffe3 	bl	8042554 <SX1276WriteFifo>
            if( ( size > 0 ) && ( size <= 64 ) )
 804258e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8042592:	1e53      	subs	r3, r2, #1
 8042594:	2b3f      	cmp	r3, #63	; 0x3f
 8042596:	d814      	bhi.n	80425c2 <SX1276Send+0x62>
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8042598:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 804259c:	4628      	mov	r0, r5
 804259e:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
 80425a2:	f7ff ffd7 	bl	8042554 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 80425a6:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 80425a8:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 80425ac:	6aa0      	ldr	r0, [r4, #40]	; 0x28
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 80425ae:	4413      	add	r3, r2
 80425b0:	87a3      	strh	r3, [r4, #60]	; 0x3c
    SX1276SetTx( txTimeout );
 80425b2:	f7ff fb0b 	bl	8041bcc <SX1276SetTx>
}
 80425b6:	b003      	add	sp, #12
 80425b8:	bd30      	pop	{r4, r5, pc}
                SX1276Write( REG_PAYLOADLENGTH, size );
 80425ba:	2032      	movs	r0, #50	; 0x32
 80425bc:	f7fe ffc6 	bl	804154c <SX1276Write>
 80425c0:	e7e5      	b.n	804258e <SX1276Send+0x2e>
                memcpy1( RxTxBuffer, buffer, size );
 80425c2:	4629      	mov	r1, r5
 80425c4:	4821      	ldr	r0, [pc, #132]	; (804264c <SX1276Send+0xec>)
 80425c6:	f008 fb1c 	bl	804ac02 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 80425ca:	2320      	movs	r3, #32
 80425cc:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80425d0:	e7e4      	b.n	804259c <SX1276Send+0x3c>
            if( SX1276.Settings.LoRa.IqInverted == true )
 80425d2:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 80425d6:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 80425d8:	b35b      	cbz	r3, 8042632 <SX1276Send+0xd2>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 80425da:	f7ff f807 	bl	80415ec <SX1276Read>
 80425de:	f000 01be 	and.w	r1, r0, #190	; 0xbe
 80425e2:	2033      	movs	r0, #51	; 0x33
 80425e4:	f7fe ffb2 	bl	804154c <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 80425e8:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80425ea:	203b      	movs	r0, #59	; 0x3b
 80425ec:	f7fe ffae 	bl	804154c <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 80425f0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80425f4:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 80425f8:	2022      	movs	r0, #34	; 0x22
 80425fa:	f7fe ffa7 	bl	804154c <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 80425fe:	2100      	movs	r1, #0
 8042600:	200e      	movs	r0, #14
 8042602:	f7fe ffa3 	bl	804154c <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8042606:	2100      	movs	r1, #0
 8042608:	200d      	movs	r0, #13
 804260a:	f7fe ff9f 	bl	804154c <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 804260e:	2001      	movs	r0, #1
 8042610:	f7fe ffec 	bl	80415ec <SX1276Read>
 8042614:	f030 03f8 	bics.w	r3, r0, #248	; 0xf8
 8042618:	d104      	bne.n	8042624 <SX1276Send+0xc4>
                SX1276SetStby( );
 804261a:	f7ff f9bf 	bl	804199c <SX1276SetStby>
                DelayMs( 1 );
 804261e:	2001      	movs	r0, #1
 8042620:	f009 fbaa 	bl	804bd78 <HAL_Delay>
            SX1276WriteFifo( buffer, size );
 8042624:	4628      	mov	r0, r5
 8042626:	f89d 1007 	ldrb.w	r1, [sp, #7]
 804262a:	f7ff ff93 	bl	8042554 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 804262e:	6da0      	ldr	r0, [r4, #88]	; 0x58
        break;
 8042630:	e7bf      	b.n	80425b2 <SX1276Send+0x52>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8042632:	f7fe ffdb 	bl	80415ec <SX1276Read>
 8042636:	f000 01be 	and.w	r1, r0, #190	; 0xbe
 804263a:	f041 0101 	orr.w	r1, r1, #1
 804263e:	2033      	movs	r0, #51	; 0x33
 8042640:	f7fe ff84 	bl	804154c <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8042644:	211d      	movs	r1, #29
 8042646:	e7d0      	b.n	80425ea <SX1276Send+0x8a>
 8042648:	20009c00 	.word	0x20009c00
 804264c:	20008384 	.word	0x20008384

08042650 <SX1276ReadFifo>:
    SX1276ReadBuffer( 0, buffer, size );
 8042650:	460a      	mov	r2, r1
 8042652:	4601      	mov	r1, r0
 8042654:	2000      	movs	r0, #0
 8042656:	f7fe bfa9 	b.w	80415ac <SX1276ReadBuffer>
	...

0804265c <SX1276OnDio0Irq>:
{
 804265c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 804265e:	4e8b      	ldr	r6, [pc, #556]	; (804288c <SX1276OnDio0Irq+0x230>)
    PRINTF("DIO0Irq\r\n");
 8042660:	488b      	ldr	r0, [pc, #556]	; (8042890 <SX1276OnDio0Irq+0x234>)
    volatile uint8_t irqFlags = 0;
 8042662:	2300      	movs	r3, #0
 8042664:	f88d 3007 	strb.w	r3, [sp, #7]
    PRINTF("DIO0Irq\r\n");
 8042668:	f008 fa6c 	bl	804ab44 <TraceSend>
    switch( SX1276.Settings.State )
 804266c:	7933      	ldrb	r3, [r6, #4]
 804266e:	2b01      	cmp	r3, #1
 8042670:	4634      	mov	r4, r6
 8042672:	d004      	beq.n	804267e <SX1276OnDio0Irq+0x22>
 8042674:	2b02      	cmp	r3, #2
 8042676:	f000 80f4 	beq.w	8042862 <SX1276OnDio0Irq+0x206>
}
 804267a:	b002      	add	sp, #8
 804267c:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 804267e:	7973      	ldrb	r3, [r6, #5]
 8042680:	b33b      	cbz	r3, 80426d2 <SX1276OnDio0Irq+0x76>
 8042682:	2b01      	cmp	r3, #1
 8042684:	d1f9      	bne.n	804267a <SX1276OnDio0Irq+0x1e>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 8042686:	2140      	movs	r1, #64	; 0x40
 8042688:	2012      	movs	r0, #18
 804268a:	f7fe ff5f 	bl	804154c <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 804268e:	2012      	movs	r0, #18
 8042690:	f7fe ffac 	bl	80415ec <SX1276Read>
 8042694:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8042698:	f89d 3007 	ldrb.w	r3, [sp, #7]
 804269c:	4d7d      	ldr	r5, [pc, #500]	; (8042894 <SX1276OnDio0Irq+0x238>)
 804269e:	f013 0f20 	tst.w	r3, #32
 80426a2:	f000 808d 	beq.w	80427c0 <SX1276OnDio0Irq+0x164>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 80426a6:	2120      	movs	r1, #32
 80426a8:	2012      	movs	r0, #18
 80426aa:	f7fe ff4f 	bl	804154c <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 80426ae:	f896 3056 	ldrb.w	r3, [r6, #86]	; 0x56
 80426b2:	b903      	cbnz	r3, 80426b6 <SX1276OnDio0Irq+0x5a>
                            SX1276.Settings.State = RF_IDLE;
 80426b4:	7133      	strb	r3, [r6, #4]
                        TimerStop( &RxTimeoutTimer );
 80426b6:	4878      	ldr	r0, [pc, #480]	; (8042898 <SX1276OnDio0Irq+0x23c>)
 80426b8:	f008 f9ba 	bl	804aa30 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 80426bc:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
 80426c0:	2b00      	cmp	r3, #0
 80426c2:	d0da      	beq.n	804267a <SX1276OnDio0Irq+0x1e>
 80426c4:	691b      	ldr	r3, [r3, #16]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80426c6:	2b00      	cmp	r3, #0
 80426c8:	d0d7      	beq.n	804267a <SX1276OnDio0Irq+0x1e>
}
 80426ca:	b002      	add	sp, #8
 80426cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    RadioEvents->TxDone( );
 80426d0:	4718      	bx	r3
                if( SX1276.Settings.Fsk.CrcOn == true )
 80426d2:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
 80426d6:	4d6f      	ldr	r5, [pc, #444]	; (8042894 <SX1276OnDio0Irq+0x238>)
 80426d8:	b393      	cbz	r3, 8042740 <SX1276OnDio0Irq+0xe4>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 80426da:	203f      	movs	r0, #63	; 0x3f
 80426dc:	f7fe ff86 	bl	80415ec <SX1276Read>
 80426e0:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 80426e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80426e8:	079b      	lsls	r3, r3, #30
 80426ea:	d429      	bmi.n	8042740 <SX1276OnDio0Irq+0xe4>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 80426ec:	210b      	movs	r1, #11
 80426ee:	203e      	movs	r0, #62	; 0x3e
 80426f0:	f7fe ff2c 	bl	804154c <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 80426f4:	2110      	movs	r1, #16
 80426f6:	203f      	movs	r0, #63	; 0x3f
 80426f8:	f7fe ff28 	bl	804154c <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 80426fc:	4866      	ldr	r0, [pc, #408]	; (8042898 <SX1276OnDio0Irq+0x23c>)
 80426fe:	f008 f997 	bl	804aa30 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 8042702:	f896 6026 	ldrb.w	r6, [r6, #38]	; 0x26
 8042706:	b976      	cbnz	r6, 8042726 <SX1276OnDio0Irq+0xca>
                            TimerStop( &RxTimeoutSyncWord );
 8042708:	4864      	ldr	r0, [pc, #400]	; (804289c <SX1276OnDio0Irq+0x240>)
 804270a:	f008 f991 	bl	804aa30 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 804270e:	7126      	strb	r6, [r4, #4]
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8042710:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
 8042714:	b113      	cbz	r3, 804271c <SX1276OnDio0Irq+0xc0>
 8042716:	691b      	ldr	r3, [r3, #16]
 8042718:	b103      	cbz	r3, 804271c <SX1276OnDio0Irq+0xc0>
                            RadioEvents->RxError( );
 804271a:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 804271c:	2300      	movs	r3, #0
 804271e:	8623      	strh	r3, [r4, #48]	; 0x30
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8042720:	87a3      	strh	r3, [r4, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 8042722:	8763      	strh	r3, [r4, #58]	; 0x3a
                        break;
 8042724:	e7a9      	b.n	804267a <SX1276OnDio0Irq+0x1e>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8042726:	200d      	movs	r0, #13
 8042728:	f7fe ff60 	bl	80415ec <SX1276Read>
 804272c:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8042730:	b2c9      	uxtb	r1, r1
 8042732:	200d      	movs	r0, #13
 8042734:	f7fe ff0a 	bl	804154c <SX1276Write>
                            TimerStart( &RxTimeoutSyncWord );
 8042738:	4858      	ldr	r0, [pc, #352]	; (804289c <SX1276OnDio0Irq+0x240>)
 804273a:	f008 f907 	bl	804a94c <TimerStart>
 804273e:	e7e7      	b.n	8042710 <SX1276OnDio0Irq+0xb4>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8042740:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 8042742:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 8042744:	4e56      	ldr	r6, [pc, #344]	; (80428a0 <SX1276OnDio0Irq+0x244>)
 8042746:	b951      	cbnz	r1, 804275e <SX1276OnDio0Irq+0x102>
 8042748:	b948      	cbnz	r0, 804275e <SX1276OnDio0Irq+0x102>
                    if( SX1276.Settings.Fsk.FixLen == false )
 804274a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 804274e:	bb2b      	cbnz	r3, 804279c <SX1276OnDio0Irq+0x140>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8042750:	2101      	movs	r1, #1
 8042752:	4854      	ldr	r0, [pc, #336]	; (80428a4 <SX1276OnDio0Irq+0x248>)
 8042754:	f7ff ff7c 	bl	8042650 <SX1276ReadFifo>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8042758:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 804275a:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 804275e:	1a09      	subs	r1, r1, r0
 8042760:	b2c9      	uxtb	r1, r1
 8042762:	4430      	add	r0, r6
 8042764:	f7ff ff74 	bl	8042650 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8042768:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
                TimerStop( &RxTimeoutTimer );
 804276a:	484b      	ldr	r0, [pc, #300]	; (8042898 <SX1276OnDio0Irq+0x23c>)
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 804276c:	87a3      	strh	r3, [r4, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 804276e:	f008 f95f 	bl	804aa30 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 8042772:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8042776:	b9b3      	cbnz	r3, 80427a6 <SX1276OnDio0Irq+0x14a>
                    TimerStop( &RxTimeoutSyncWord );
 8042778:	4848      	ldr	r0, [pc, #288]	; (804289c <SX1276OnDio0Irq+0x240>)
                    SX1276.Settings.State = RF_IDLE;
 804277a:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutSyncWord );
 804277c:	f008 f958 	bl	804aa30 <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8042780:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
 8042784:	2b00      	cmp	r3, #0
 8042786:	d0c9      	beq.n	804271c <SX1276OnDio0Irq+0xc0>
 8042788:	689d      	ldr	r5, [r3, #8]
 804278a:	2d00      	cmp	r5, #0
 804278c:	d0c6      	beq.n	804271c <SX1276OnDio0Irq+0xc0>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 804278e:	2300      	movs	r3, #0
 8042790:	f994 2032 	ldrsb.w	r2, [r4, #50]	; 0x32
 8042794:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 8042796:	4842      	ldr	r0, [pc, #264]	; (80428a0 <SX1276OnDio0Irq+0x244>)
 8042798:	47a8      	blx	r5
 804279a:	e7bf      	b.n	804271c <SX1276OnDio0Irq+0xc0>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 804279c:	2032      	movs	r0, #50	; 0x32
 804279e:	f7fe ff25 	bl	80415ec <SX1276Read>
 80427a2:	8760      	strh	r0, [r4, #58]	; 0x3a
 80427a4:	e7d8      	b.n	8042758 <SX1276OnDio0Irq+0xfc>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80427a6:	200d      	movs	r0, #13
 80427a8:	f7fe ff20 	bl	80415ec <SX1276Read>
 80427ac:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 80427b0:	b2c9      	uxtb	r1, r1
 80427b2:	200d      	movs	r0, #13
 80427b4:	f7fe feca 	bl	804154c <SX1276Write>
                    TimerStart( &RxTimeoutSyncWord );
 80427b8:	4838      	ldr	r0, [pc, #224]	; (804289c <SX1276OnDio0Irq+0x240>)
 80427ba:	f008 f8c7 	bl	804a94c <TimerStart>
 80427be:	e7df      	b.n	8042780 <SX1276OnDio0Irq+0x124>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 80427c0:	2019      	movs	r0, #25
 80427c2:	f7fe ff13 	bl	80415ec <SX1276Read>
 80427c6:	b240      	sxtb	r0, r0
 80427c8:	3002      	adds	r0, #2
 80427ca:	1080      	asrs	r0, r0, #2
 80427cc:	f886 0060 	strb.w	r0, [r6, #96]	; 0x60
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 80427d0:	201a      	movs	r0, #26
 80427d2:	f7fe ff0b 	bl	80415ec <SX1276Read>
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 80427d6:	f996 3060 	ldrsb.w	r3, [r6, #96]	; 0x60
 80427da:	4933      	ldr	r1, [pc, #204]	; (80428a8 <SX1276OnDio0Irq+0x24c>)
 80427dc:	f340 120b 	sbfx	r2, r0, #4, #12
 80427e0:	2b00      	cmp	r3, #0
 80427e2:	b292      	uxth	r2, r2
 80427e4:	b280      	uxth	r0, r0
 80427e6:	da36      	bge.n	8042856 <SX1276OnDio0Irq+0x1fa>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80427e8:	68b6      	ldr	r6, [r6, #8]
 80427ea:	b29b      	uxth	r3, r3
 80427ec:	428e      	cmp	r6, r1
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 80427ee:	bf8c      	ite	hi
 80427f0:	3b9d      	subhi	r3, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 80427f2:	3ba4      	subls	r3, #164	; 0xa4
 80427f4:	4418      	add	r0, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 80427f6:	4410      	add	r0, r2
 80427f8:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 80427fc:	2013      	movs	r0, #19
 80427fe:	f7fe fef5 	bl	80415ec <SX1276Read>
 8042802:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 8042806:	2010      	movs	r0, #16
 8042808:	f7fe fef0 	bl	80415ec <SX1276Read>
 804280c:	4601      	mov	r1, r0
 804280e:	200d      	movs	r0, #13
 8042810:	f7fe fe9c 	bl	804154c <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 8042814:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
 8042818:	4821      	ldr	r0, [pc, #132]	; (80428a0 <SX1276OnDio0Irq+0x244>)
 804281a:	f7ff ff19 	bl	8042650 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 804281e:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
 8042822:	b903      	cbnz	r3, 8042826 <SX1276OnDio0Irq+0x1ca>
                        SX1276.Settings.State = RF_IDLE;
 8042824:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutTimer );
 8042826:	481c      	ldr	r0, [pc, #112]	; (8042898 <SX1276OnDio0Irq+0x23c>)
 8042828:	f008 f902 	bl	804aa30 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 804282c:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
 8042830:	2b00      	cmp	r3, #0
 8042832:	f43f af22 	beq.w	804267a <SX1276OnDio0Irq+0x1e>
 8042836:	689d      	ldr	r5, [r3, #8]
 8042838:	2d00      	cmp	r5, #0
 804283a:	f43f af1e 	beq.w	804267a <SX1276OnDio0Irq+0x1e>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 804283e:	f994 3060 	ldrsb.w	r3, [r4, #96]	; 0x60
 8042842:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	; 0x62
 8042846:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
 804284a:	4815      	ldr	r0, [pc, #84]	; (80428a0 <SX1276OnDio0Irq+0x244>)
 804284c:	46ac      	mov	ip, r5
}
 804284e:	b002      	add	sp, #8
 8042850:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 8042854:	4760      	bx	ip
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8042856:	68b3      	ldr	r3, [r6, #8]
 8042858:	428b      	cmp	r3, r1
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 804285a:	bf8c      	ite	hi
 804285c:	389d      	subhi	r0, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 804285e:	38a4      	subls	r0, #164	; 0xa4
 8042860:	e7c9      	b.n	80427f6 <SX1276OnDio0Irq+0x19a>
            TimerStop( &TxTimeoutTimer );
 8042862:	4812      	ldr	r0, [pc, #72]	; (80428ac <SX1276OnDio0Irq+0x250>)
 8042864:	f008 f8e4 	bl	804aa30 <TimerStop>
            switch( SX1276.Settings.Modem )
 8042868:	7973      	ldrb	r3, [r6, #5]
 804286a:	2b01      	cmp	r3, #1
 804286c:	d103      	bne.n	8042876 <SX1276OnDio0Irq+0x21a>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 804286e:	2108      	movs	r1, #8
 8042870:	2012      	movs	r0, #18
 8042872:	f7fe fe6b 	bl	804154c <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8042876:	2300      	movs	r3, #0
 8042878:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 804287a:	4b06      	ldr	r3, [pc, #24]	; (8042894 <SX1276OnDio0Irq+0x238>)
 804287c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8042880:	2b00      	cmp	r3, #0
 8042882:	f43f aefa 	beq.w	804267a <SX1276OnDio0Irq+0x1e>
 8042886:	681b      	ldr	r3, [r3, #0]
 8042888:	e71d      	b.n	80426c6 <SX1276OnDio0Irq+0x6a>
 804288a:	bf00      	nop
 804288c:	20009c00 	.word	0x20009c00
 8042890:	0804e787 	.word	0x0804e787
 8042894:	20008380 	.word	0x20008380
 8042898:	20009c68 	.word	0x20009c68
 804289c:	20009be8 	.word	0x20009be8
 80428a0:	20008384 	.word	0x20008384
 80428a4:	20009c3a 	.word	0x20009c3a
 80428a8:	1f4add40 	.word	0x1f4add40
 80428ac:	20009bd0 	.word	0x20009bd0

080428b0 <SX1276OnDio1Irq>:
{
 80428b0:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 80428b2:	4c34      	ldr	r4, [pc, #208]	; (8042984 <SX1276OnDio1Irq+0xd4>)
	PRINTF("DIO1Irq\r\n");
 80428b4:	4834      	ldr	r0, [pc, #208]	; (8042988 <SX1276OnDio1Irq+0xd8>)
 80428b6:	f008 f945 	bl	804ab44 <TraceSend>
    switch( SX1276.Settings.State )
 80428ba:	7926      	ldrb	r6, [r4, #4]
 80428bc:	2e01      	cmp	r6, #1
 80428be:	4625      	mov	r5, r4
 80428c0:	d002      	beq.n	80428c8 <SX1276OnDio1Irq+0x18>
 80428c2:	2e02      	cmp	r6, #2
 80428c4:	d045      	beq.n	8042952 <SX1276OnDio1Irq+0xa2>
}
 80428c6:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 80428c8:	7963      	ldrb	r3, [r4, #5]
 80428ca:	b1ab      	cbz	r3, 80428f8 <SX1276OnDio1Irq+0x48>
 80428cc:	2b01      	cmp	r3, #1
 80428ce:	d1fa      	bne.n	80428c6 <SX1276OnDio1Irq+0x16>
                TimerStop( &RxTimeoutTimer );
 80428d0:	482e      	ldr	r0, [pc, #184]	; (804298c <SX1276OnDio1Irq+0xdc>)
 80428d2:	f008 f8ad 	bl	804aa30 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 80428d6:	2180      	movs	r1, #128	; 0x80
 80428d8:	2012      	movs	r0, #18
 80428da:	f7fe fe37 	bl	804154c <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 80428de:	2300      	movs	r3, #0
 80428e0:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80428e2:	4b2b      	ldr	r3, [pc, #172]	; (8042990 <SX1276OnDio1Irq+0xe0>)
 80428e4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80428e8:	2b00      	cmp	r3, #0
 80428ea:	d0ec      	beq.n	80428c6 <SX1276OnDio1Irq+0x16>
 80428ec:	68db      	ldr	r3, [r3, #12]
 80428ee:	2b00      	cmp	r3, #0
 80428f0:	d0e9      	beq.n	80428c6 <SX1276OnDio1Irq+0x16>
}
 80428f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    RadioEvents->RxTimeout( );
 80428f6:	4718      	bx	r3
                TimerStop( &RxTimeoutSyncWord );
 80428f8:	4826      	ldr	r0, [pc, #152]	; (8042994 <SX1276OnDio1Irq+0xe4>)
 80428fa:	f008 f899 	bl	804aa30 <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 80428fe:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8042900:	b94b      	cbnz	r3, 8042916 <SX1276OnDio1Irq+0x66>
 8042902:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8042904:	b93b      	cbnz	r3, 8042916 <SX1276OnDio1Irq+0x66>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8042906:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 804290a:	b9c3      	cbnz	r3, 804293e <SX1276OnDio1Irq+0x8e>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 804290c:	4631      	mov	r1, r6
 804290e:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8042912:	f7ff fe9d 	bl	8042650 <SX1276ReadFifo>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8042916:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
 8042918:	8f69      	ldrh	r1, [r5, #58]	; 0x3a
 804291a:	f895 303e 	ldrb.w	r3, [r5, #62]	; 0x3e
 804291e:	481e      	ldr	r0, [pc, #120]	; (8042998 <SX1276OnDio1Irq+0xe8>)
 8042920:	1a89      	subs	r1, r1, r2
 8042922:	4299      	cmp	r1, r3
 8042924:	4410      	add	r0, r2
 8042926:	db0f      	blt.n	8042948 <SX1276OnDio1Irq+0x98>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 8042928:	1e59      	subs	r1, r3, #1
 804292a:	b2c9      	uxtb	r1, r1
 804292c:	f7ff fe90 	bl	8042650 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 8042930:	8fab      	ldrh	r3, [r5, #60]	; 0x3c
 8042932:	1e5a      	subs	r2, r3, #1
 8042934:	f895 303e 	ldrb.w	r3, [r5, #62]	; 0x3e
 8042938:	4413      	add	r3, r2
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 804293a:	87ab      	strh	r3, [r5, #60]	; 0x3c
 804293c:	e7c3      	b.n	80428c6 <SX1276OnDio1Irq+0x16>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 804293e:	2032      	movs	r0, #50	; 0x32
 8042940:	f7fe fe54 	bl	80415ec <SX1276Read>
 8042944:	8760      	strh	r0, [r4, #58]	; 0x3a
 8042946:	e7e6      	b.n	8042916 <SX1276OnDio1Irq+0x66>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8042948:	b2c9      	uxtb	r1, r1
 804294a:	f7ff fe81 	bl	8042650 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 804294e:	8f6b      	ldrh	r3, [r5, #58]	; 0x3a
 8042950:	e7f3      	b.n	804293a <SX1276OnDio1Irq+0x8a>
            switch( SX1276.Settings.Modem )
 8042952:	7963      	ldrb	r3, [r4, #5]
 8042954:	2b00      	cmp	r3, #0
 8042956:	d1b6      	bne.n	80428c6 <SX1276OnDio1Irq+0x16>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 8042958:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 804295a:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 804295c:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
 8042960:	480d      	ldr	r0, [pc, #52]	; (8042998 <SX1276OnDio1Irq+0xe8>)
 8042962:	1a9b      	subs	r3, r3, r2
 8042964:	428b      	cmp	r3, r1
 8042966:	4410      	add	r0, r2
 8042968:	dd07      	ble.n	804297a <SX1276OnDio1Irq+0xca>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 804296a:	f7ff fdf3 	bl	8042554 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 804296e:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8042972:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8042974:	4413      	add	r3, r2
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8042976:	87a3      	strh	r3, [r4, #60]	; 0x3c
}
 8042978:	e7a5      	b.n	80428c6 <SX1276OnDio1Irq+0x16>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 804297a:	b2d9      	uxtb	r1, r3
 804297c:	f7ff fdea 	bl	8042554 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8042980:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8042982:	e7f8      	b.n	8042976 <SX1276OnDio1Irq+0xc6>
 8042984:	20009c00 	.word	0x20009c00
 8042988:	0804e791 	.word	0x0804e791
 804298c:	20009c68 	.word	0x20009c68
 8042990:	20008380 	.word	0x20008380
 8042994:	20009be8 	.word	0x20009be8
 8042998:	20008384 	.word	0x20008384

0804299c <SX1276SetMaxPayloadLength>:
{
 804299c:	b538      	push	{r3, r4, r5, lr}
 804299e:	4605      	mov	r5, r0
 80429a0:	460c      	mov	r4, r1
    SX1276SetModem( modem );
 80429a2:	f7ff f983 	bl	8041cac <SX1276SetModem>
    switch( modem )
 80429a6:	b115      	cbz	r5, 80429ae <SX1276SetMaxPayloadLength+0x12>
 80429a8:	2d01      	cmp	r5, #1
 80429aa:	d00b      	beq.n	80429c4 <SX1276SetMaxPayloadLength+0x28>
}
 80429ac:	bd38      	pop	{r3, r4, r5, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
 80429ae:	4b07      	ldr	r3, [pc, #28]	; (80429cc <SX1276SetMaxPayloadLength+0x30>)
 80429b0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80429b4:	2b00      	cmp	r3, #0
 80429b6:	d1f9      	bne.n	80429ac <SX1276SetMaxPayloadLength+0x10>
            SX1276Write( REG_PAYLOADLENGTH, max );
 80429b8:	4621      	mov	r1, r4
 80429ba:	2032      	movs	r0, #50	; 0x32
}
 80429bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 80429c0:	f7fe bdc4 	b.w	804154c <SX1276Write>
 80429c4:	4621      	mov	r1, r4
 80429c6:	2023      	movs	r0, #35	; 0x23
 80429c8:	e7f8      	b.n	80429bc <SX1276SetMaxPayloadLength+0x20>
 80429ca:	bf00      	nop
 80429cc:	20009c00 	.word	0x20009c00

080429d0 <SX1276SetPublicNetwork>:
{
 80429d0:	b510      	push	{r4, lr}
 80429d2:	4604      	mov	r4, r0
    SX1276SetModem( MODEM_LORA );
 80429d4:	2001      	movs	r0, #1
 80429d6:	f7ff f969 	bl	8041cac <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 80429da:	4b06      	ldr	r3, [pc, #24]	; (80429f4 <SX1276SetPublicNetwork+0x24>)
 80429dc:	f883 405c 	strb.w	r4, [r3, #92]	; 0x5c
    if( enable == true )
 80429e0:	b12c      	cbz	r4, 80429ee <SX1276SetPublicNetwork+0x1e>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 80429e2:	2134      	movs	r1, #52	; 0x34
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 80429e4:	2039      	movs	r0, #57	; 0x39
}
 80429e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 80429ea:	f7fe bdaf 	b.w	804154c <SX1276Write>
 80429ee:	2112      	movs	r1, #18
 80429f0:	e7f8      	b.n	80429e4 <SX1276SetPublicNetwork+0x14>
 80429f2:	bf00      	nop
 80429f4:	20009c00 	.word	0x20009c00

080429f8 <SX1276OnTimeoutIrq>:
{
 80429f8:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 80429fa:	4c2c      	ldr	r4, [pc, #176]	; (8042aac <SX1276OnTimeoutIrq+0xb4>)
 80429fc:	7923      	ldrb	r3, [r4, #4]
 80429fe:	2b01      	cmp	r3, #1
 8042a00:	4625      	mov	r5, r4
 8042a02:	d002      	beq.n	8042a0a <SX1276OnTimeoutIrq+0x12>
 8042a04:	2b02      	cmp	r3, #2
 8042a06:	d02c      	beq.n	8042a62 <SX1276OnTimeoutIrq+0x6a>
}
 8042a08:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
 8042a0a:	7963      	ldrb	r3, [r4, #5]
 8042a0c:	b9cb      	cbnz	r3, 8042a42 <SX1276OnTimeoutIrq+0x4a>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8042a0e:	8623      	strh	r3, [r4, #48]	; 0x30
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8042a10:	210b      	movs	r1, #11
 8042a12:	203e      	movs	r0, #62	; 0x3e
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8042a14:	87a3      	strh	r3, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8042a16:	8763      	strh	r3, [r4, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8042a18:	f7fe fd98 	bl	804154c <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8042a1c:	2110      	movs	r1, #16
 8042a1e:	203f      	movs	r0, #63	; 0x3f
 8042a20:	f7fe fd94 	bl	804154c <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 8042a24:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8042a28:	b1b3      	cbz	r3, 8042a58 <SX1276OnTimeoutIrq+0x60>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8042a2a:	200d      	movs	r0, #13
 8042a2c:	f7fe fdde 	bl	80415ec <SX1276Read>
 8042a30:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8042a34:	b2c9      	uxtb	r1, r1
 8042a36:	200d      	movs	r0, #13
 8042a38:	f7fe fd88 	bl	804154c <SX1276Write>
                TimerStart( &RxTimeoutSyncWord );
 8042a3c:	481c      	ldr	r0, [pc, #112]	; (8042ab0 <SX1276OnTimeoutIrq+0xb8>)
 8042a3e:	f007 ff85 	bl	804a94c <TimerStart>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8042a42:	4b1c      	ldr	r3, [pc, #112]	; (8042ab4 <SX1276OnTimeoutIrq+0xbc>)
 8042a44:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8042a48:	2b00      	cmp	r3, #0
 8042a4a:	d0dd      	beq.n	8042a08 <SX1276OnTimeoutIrq+0x10>
 8042a4c:	68db      	ldr	r3, [r3, #12]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8042a4e:	2b00      	cmp	r3, #0
 8042a50:	d0da      	beq.n	8042a08 <SX1276OnTimeoutIrq+0x10>
}
 8042a52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            RadioEvents->TxTimeout( );
 8042a56:	4718      	bx	r3
                TimerStop( &RxTimeoutSyncWord );
 8042a58:	4815      	ldr	r0, [pc, #84]	; (8042ab0 <SX1276OnTimeoutIrq+0xb8>)
                SX1276.Settings.State = RF_IDLE;
 8042a5a:	7123      	strb	r3, [r4, #4]
                TimerStop( &RxTimeoutSyncWord );
 8042a5c:	f007 ffe8 	bl	804aa30 <TimerStop>
 8042a60:	e7ef      	b.n	8042a42 <SX1276OnTimeoutIrq+0x4a>
        SX1276Reset( );
 8042a62:	f7fe fd2b 	bl	80414bc <SX1276Reset>
 8042a66:	4c14      	ldr	r4, [pc, #80]	; (8042ab8 <SX1276OnTimeoutIrq+0xc0>)
        RxChainCalibration( );
 8042a68:	f7fe fdcc 	bl	8041604 <RxChainCalibration>
 8042a6c:	f7fe ff3e 	bl	80418ec <SX1276SetOpMode.part.2>
 8042a70:	f104 0630 	add.w	r6, r4, #48	; 0x30
            SX1276SetModem( RadioRegsInit[i].Modem );
 8042a74:	7820      	ldrb	r0, [r4, #0]
 8042a76:	f7ff f919 	bl	8041cac <SX1276SetModem>
 8042a7a:	3403      	adds	r4, #3
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8042a7c:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8042a80:	f814 0c02 	ldrb.w	r0, [r4, #-2]
 8042a84:	f7fe fd62 	bl	804154c <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8042a88:	42b4      	cmp	r4, r6
 8042a8a:	d1f3      	bne.n	8042a74 <SX1276OnTimeoutIrq+0x7c>
        SX1276SetModem( MODEM_FSK );
 8042a8c:	2000      	movs	r0, #0
 8042a8e:	f7ff f90d 	bl	8041cac <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 8042a92:	f895 005c 	ldrb.w	r0, [r5, #92]	; 0x5c
 8042a96:	f7ff ff9b 	bl	80429d0 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 8042a9a:	2300      	movs	r3, #0
 8042a9c:	712b      	strb	r3, [r5, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8042a9e:	4b05      	ldr	r3, [pc, #20]	; (8042ab4 <SX1276OnTimeoutIrq+0xbc>)
 8042aa0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8042aa4:	2b00      	cmp	r3, #0
 8042aa6:	d0af      	beq.n	8042a08 <SX1276OnTimeoutIrq+0x10>
 8042aa8:	685b      	ldr	r3, [r3, #4]
 8042aaa:	e7d0      	b.n	8042a4e <SX1276OnTimeoutIrq+0x56>
 8042aac:	20009c00 	.word	0x20009c00
 8042ab0:	20009be8 	.word	0x20009be8
 8042ab4:	20008380 	.word	0x20008380
 8042ab8:	0804e1e0 	.word	0x0804e1e0

08042abc <SX1276GetWakeupTime>:
{
 8042abc:	b508      	push	{r3, lr}
    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 8042abe:	4b03      	ldr	r3, [pc, #12]	; (8042acc <SX1276GetWakeupTime+0x10>)
 8042ac0:	681b      	ldr	r3, [r3, #0]
 8042ac2:	685b      	ldr	r3, [r3, #4]
 8042ac4:	4798      	blx	r3
}
 8042ac6:	3002      	adds	r0, #2
 8042ac8:	bd08      	pop	{r3, pc}
 8042aca:	bf00      	nop
 8042acc:	20008380 	.word	0x20008380

08042ad0 <SX1276GetWakeTime>:
};

uint32_t SX1276GetWakeTime( void )
{
  return  BOARD_WAKEUP_TIME;
}
 8042ad0:	2000      	movs	r0, #0
 8042ad2:	4770      	bx	lr

08042ad4 <SX1276SetXO>:

void SX1276SetXO( uint8_t state )
{
}
 8042ad4:	4770      	bx	lr

08042ad6 <SX1276CheckRfFrequency>:

bool SX1276CheckRfFrequency( uint32_t frequency )
{
    // Implement check. Currently all frequencies are supported
    return true;
}
 8042ad6:	2001      	movs	r0, #1
 8042ad8:	4770      	bx	lr

08042ada <SX1276SetRfTxPower>:
{
 8042ada:	b538      	push	{r3, r4, r5, lr}
 8042adc:	4605      	mov	r5, r0
    paConfig = SX1276Read( REG_PACONFIG );
 8042ade:	2009      	movs	r0, #9
 8042ae0:	f7fe fd84 	bl	80415ec <SX1276Read>
 8042ae4:	4604      	mov	r4, r0
    paDac = SX1276Read( REG_PADAC );
 8042ae6:	204d      	movs	r0, #77	; 0x4d
 8042ae8:	f7fe fd80 	bl	80415ec <SX1276Read>
        if( power > 17 )
 8042aec:	2d11      	cmp	r5, #17
    paConfig |= RF_PACONFIG_PASELECT_PABOOST;
 8042aee:	f064 037f 	orn	r3, r4, #127	; 0x7f
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 8042af2:	bfcb      	itete	gt
 8042af4:	f040 0407 	orrgt.w	r4, r0, #7
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 8042af8:	f000 04f8 	andle.w	r4, r0, #248	; 0xf8
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 8042afc:	b2e4      	uxtbgt	r4, r4
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 8042afe:	f044 0404 	orrle.w	r4, r4, #4
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 8042b02:	f004 0207 	and.w	r2, r4, #7
    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8042b06:	b25b      	sxtb	r3, r3
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 8042b08:	2a07      	cmp	r2, #7
 8042b0a:	f023 030f 	bic.w	r3, r3, #15
 8042b0e:	d111      	bne.n	8042b34 <SX1276SetRfTxPower+0x5a>
 8042b10:	2d14      	cmp	r5, #20
 8042b12:	bfa8      	it	ge
 8042b14:	2514      	movge	r5, #20
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 8042b16:	2d05      	cmp	r5, #5
 8042b18:	bfb8      	it	lt
 8042b1a:	2505      	movlt	r5, #5
 8042b1c:	1f69      	subs	r1, r5, #5
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 8042b1e:	4319      	orrs	r1, r3
 8042b20:	b2c9      	uxtb	r1, r1
    SX1276Write( REG_PACONFIG, paConfig );
 8042b22:	2009      	movs	r0, #9
 8042b24:	f7fe fd12 	bl	804154c <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 8042b28:	4621      	mov	r1, r4
 8042b2a:	204d      	movs	r0, #77	; 0x4d
}
 8042b2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    SX1276Write( REG_PADAC, paDac );
 8042b30:	f7fe bd0c 	b.w	804154c <SX1276Write>
 8042b34:	2d11      	cmp	r5, #17
 8042b36:	bfa8      	it	ge
 8042b38:	2511      	movge	r5, #17
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 8042b3a:	2d02      	cmp	r5, #2
 8042b3c:	bfb8      	it	lt
 8042b3e:	2502      	movlt	r5, #2
 8042b40:	1ea9      	subs	r1, r5, #2
 8042b42:	e7ec      	b.n	8042b1e <SX1276SetRfTxPower+0x44>

08042b44 <SX1276IoInit>:
{
 8042b44:	b510      	push	{r4, lr}
 8042b46:	b086      	sub	sp, #24
  GPIO_InitTypeDef initStruct={0};
 8042b48:	2214      	movs	r2, #20
 8042b4a:	2100      	movs	r1, #0
 8042b4c:	a801      	add	r0, sp, #4
 8042b4e:	f009 ff71 	bl	804ca34 <memset>
  SX1276BoardInit( &BoardCallbacks );
 8042b52:	4811      	ldr	r0, [pc, #68]	; (8042b98 <SX1276IoInit+0x54>)
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8042b54:	4c11      	ldr	r4, [pc, #68]	; (8042b9c <SX1276IoInit+0x58>)
  SX1276BoardInit( &BoardCallbacks );
 8042b56:	f7fe fca5 	bl	80414a4 <SX1276BoardInit>
  initStruct.Pull = GPIO_PULLDOWN;
 8042b5a:	4a11      	ldr	r2, [pc, #68]	; (8042ba0 <SX1276IoInit+0x5c>)
 8042b5c:	2302      	movs	r3, #2
 8042b5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8042b62:	4620      	mov	r0, r4
  initStruct.Speed = GPIO_SPEED_HIGH;
 8042b64:	2303      	movs	r3, #3
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8042b66:	aa01      	add	r2, sp, #4
 8042b68:	f44f 7100 	mov.w	r1, #512	; 0x200
  initStruct.Speed = GPIO_SPEED_HIGH;
 8042b6c:	9304      	str	r3, [sp, #16]
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8042b6e:	f008 fac5 	bl	804b0fc <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 8042b72:	aa01      	add	r2, sp, #4
 8042b74:	4620      	mov	r0, r4
 8042b76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8042b7a:	f008 fabf 	bl	804b0fc <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 8042b7e:	aa01      	add	r2, sp, #4
 8042b80:	4620      	mov	r0, r4
 8042b82:	2180      	movs	r1, #128	; 0x80
 8042b84:	f008 faba 	bl	804b0fc <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 8042b88:	aa01      	add	r2, sp, #4
 8042b8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8042b8e:	4620      	mov	r0, r4
 8042b90:	f008 fab4 	bl	804b0fc <HW_GPIO_Init>
}
 8042b94:	b006      	add	sp, #24
 8042b96:	bd10      	pop	{r4, pc}
 8042b98:	20001074 	.word	0x20001074
 8042b9c:	40021000 	.word	0x40021000
 8042ba0:	10110000 	.word	0x10110000

08042ba4 <SX1276IoDeInit>:
{
 8042ba4:	b510      	push	{r4, lr}
 8042ba6:	b086      	sub	sp, #24
  GPIO_InitTypeDef initStruct={0};
 8042ba8:	2214      	movs	r2, #20
 8042baa:	2100      	movs	r1, #0
 8042bac:	a801      	add	r0, sp, #4
 8042bae:	f009 ff41 	bl	804ca34 <memset>
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8042bb2:	4c0f      	ldr	r4, [pc, #60]	; (8042bf0 <SX1276IoDeInit+0x4c>)
  initStruct.Pull = GPIO_PULLDOWN;
 8042bb4:	4a0f      	ldr	r2, [pc, #60]	; (8042bf4 <SX1276IoDeInit+0x50>)
 8042bb6:	2302      	movs	r3, #2
 8042bb8:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8042bbc:	4620      	mov	r0, r4
 8042bbe:	aa01      	add	r2, sp, #4
 8042bc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8042bc4:	f008 fa9a 	bl	804b0fc <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 8042bc8:	aa01      	add	r2, sp, #4
 8042bca:	4620      	mov	r0, r4
 8042bcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8042bd0:	f008 fa94 	bl	804b0fc <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 8042bd4:	aa01      	add	r2, sp, #4
 8042bd6:	4620      	mov	r0, r4
 8042bd8:	2180      	movs	r1, #128	; 0x80
 8042bda:	f008 fa8f 	bl	804b0fc <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 8042bde:	aa01      	add	r2, sp, #4
 8042be0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8042be4:	4620      	mov	r0, r4
 8042be6:	f008 fa89 	bl	804b0fc <HW_GPIO_Init>
}
 8042bea:	b006      	add	sp, #24
 8042bec:	bd10      	pop	{r4, pc}
 8042bee:	bf00      	nop
 8042bf0:	40021000 	.word	0x40021000
 8042bf4:	10110000 	.word	0x10110000

08042bf8 <SX1276IoIrqInit>:
{
 8042bf8:	b570      	push	{r4, r5, r6, lr}
  HW_GPIO_SetIrq( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 8042bfa:	4c0f      	ldr	r4, [pc, #60]	; (8042c38 <SX1276IoIrqInit+0x40>)
 8042bfc:	6803      	ldr	r3, [r0, #0]
{
 8042bfe:	4605      	mov	r5, r0
  HW_GPIO_SetIrq( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 8042c00:	2200      	movs	r2, #0
 8042c02:	4620      	mov	r0, r4
 8042c04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8042c08:	f008 fad2 	bl	804b1b0 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, IRQ_HIGH_PRIORITY, irqHandlers[1] );
 8042c0c:	686b      	ldr	r3, [r5, #4]
 8042c0e:	4620      	mov	r0, r4
 8042c10:	2200      	movs	r2, #0
 8042c12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8042c16:	f008 facb 	bl	804b1b0 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, IRQ_HIGH_PRIORITY, irqHandlers[2] );
 8042c1a:	68ab      	ldr	r3, [r5, #8]
 8042c1c:	4620      	mov	r0, r4
 8042c1e:	2200      	movs	r2, #0
 8042c20:	2180      	movs	r1, #128	; 0x80
 8042c22:	f008 fac5 	bl	804b1b0 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, IRQ_HIGH_PRIORITY, irqHandlers[3] );
 8042c26:	68eb      	ldr	r3, [r5, #12]
 8042c28:	4620      	mov	r0, r4
 8042c2a:	2200      	movs	r2, #0
 8042c2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
}
 8042c30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HW_GPIO_SetIrq( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, IRQ_HIGH_PRIORITY, irqHandlers[3] );
 8042c34:	f008 babc 	b.w	804b1b0 <HW_GPIO_SetIrq>
 8042c38:	40021000 	.word	0x40021000

08042c3c <SX1276SetAntSwLowPower>:
{
 8042c3c:	b510      	push	{r4, lr}
    if( RadioIsActive != status )
 8042c3e:	4b14      	ldr	r3, [pc, #80]	; (8042c90 <SX1276SetAntSwLowPower+0x54>)
 8042c40:	781a      	ldrb	r2, [r3, #0]
 8042c42:	4282      	cmp	r2, r0
{
 8042c44:	b086      	sub	sp, #24
    if( RadioIsActive != status )
 8042c46:	d017      	beq.n	8042c78 <SX1276SetAntSwLowPower+0x3c>
        RadioIsActive = status;
 8042c48:	7018      	strb	r0, [r3, #0]
  GPIO_InitTypeDef initStruct={0};
 8042c4a:	2214      	movs	r2, #20
        if( status == false )
 8042c4c:	b9b0      	cbnz	r0, 8042c7c <SX1276SetAntSwLowPower+0x40>
  GPIO_InitTypeDef initStruct={0};
 8042c4e:	4601      	mov	r1, r0
 8042c50:	a801      	add	r0, sp, #4
 8042c52:	f009 feef 	bl	804ca34 <memset>
  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8042c56:	2301      	movs	r3, #1
 8042c58:	9302      	str	r3, [sp, #8]
  PRINTF("Antenna Init\r\n");
 8042c5a:	480e      	ldr	r0, [pc, #56]	; (8042c94 <SX1276SetAntSwLowPower+0x58>)
  initStruct.Speed = GPIO_SPEED_HIGH;
 8042c5c:	2303      	movs	r3, #3
 8042c5e:	9304      	str	r3, [sp, #16]
  PRINTF("Antenna Init\r\n");
 8042c60:	f007 ff70 	bl	804ab44 <TraceSend>
  HW_GPIO_Init(  RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, &initStruct ); 
 8042c64:	aa01      	add	r2, sp, #4
 8042c66:	2102      	movs	r1, #2
 8042c68:	480b      	ldr	r0, [pc, #44]	; (8042c98 <SX1276SetAntSwLowPower+0x5c>)
 8042c6a:	f008 fa47 	bl	804b0fc <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, 0);
 8042c6e:	2200      	movs	r2, #0
 8042c70:	2102      	movs	r1, #2
 8042c72:	4809      	ldr	r0, [pc, #36]	; (8042c98 <SX1276SetAntSwLowPower+0x5c>)
 8042c74:	f008 fac4 	bl	804b200 <HW_GPIO_Write>
}
 8042c78:	b006      	add	sp, #24
 8042c7a:	bd10      	pop	{r4, pc}
  GPIO_InitTypeDef initStruct={0};
 8042c7c:	2100      	movs	r1, #0
 8042c7e:	a801      	add	r0, sp, #4
 8042c80:	f009 fed8 	bl	804ca34 <memset>
  initStruct.Mode = GPIO_MODE_OUTPUT_PP ;
 8042c84:	2301      	movs	r3, #1
 8042c86:	9302      	str	r3, [sp, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8042c88:	2303      	movs	r3, #3
 8042c8a:	9304      	str	r3, [sp, #16]
 8042c8c:	e7ea      	b.n	8042c64 <SX1276SetAntSwLowPower+0x28>
 8042c8e:	bf00      	nop
 8042c90:	20008488 	.word	0x20008488
 8042c94:	0804e79b 	.word	0x0804e79b
 8042c98:	40020800 	.word	0x40020800

08042c9c <SX1276SetAntSw>:
    switch( opMode )
 8042c9c:	2803      	cmp	r0, #3
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, RADIO_ANT_SWITCH_SET_TX);
 8042c9e:	bf0c      	ite	eq
 8042ca0:	2201      	moveq	r2, #1
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, RADIO_ANT_SWITCH_SET_RX);
 8042ca2:	2200      	movne	r2, #0
 8042ca4:	2102      	movs	r1, #2
 8042ca6:	4801      	ldr	r0, [pc, #4]	; (8042cac <SX1276SetAntSw+0x10>)
 8042ca8:	f008 baaa 	b.w	804b200 <HW_GPIO_Write>
 8042cac:	40020800 	.word	0x40020800

08042cb0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8042cb0:	490e      	ldr	r1, [pc, #56]	; (8042cec <SystemInit+0x3c>)
 8042cb2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8042cb6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8042cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8042cbe:	4b0c      	ldr	r3, [pc, #48]	; (8042cf0 <SystemInit+0x40>)
 8042cc0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8042cc2:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8042cc4:	f042 0201 	orr.w	r2, r2, #1
 8042cc8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8042cca:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8042ccc:	681a      	ldr	r2, [r3, #0]
 8042cce:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8042cd2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8042cd6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8042cd8:	4a06      	ldr	r2, [pc, #24]	; (8042cf4 <SystemInit+0x44>)
 8042cda:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8042cdc:	681a      	ldr	r2, [r3, #0]
 8042cde:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8042ce2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8042ce4:	60d8      	str	r0, [r3, #12]
#if defined (DATA_IN_ExtSRAM) || defined (DATA_IN_ExtSDRAM)
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location  ------------------*/
  SCB->VTOR = INTVECT_START;
 8042ce6:	4b04      	ldr	r3, [pc, #16]	; (8042cf8 <SystemInit+0x48>)
 8042ce8:	608b      	str	r3, [r1, #8]
}
 8042cea:	4770      	bx	lr
 8042cec:	e000ed00 	.word	0xe000ed00
 8042cf0:	40023800 	.word	0x40023800
 8042cf4:	24003010 	.word	0x24003010
 8042cf8:	08040200 	.word	0x08040200

08042cfc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8042cfc:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8042cfe:	4613      	mov	r3, r2
 8042d00:	460a      	mov	r2, r1
 8042d02:	4601      	mov	r1, r0
 8042d04:	4803      	ldr	r0, [pc, #12]	; (8042d14 <BSP_SD_ReadBlocks_DMA+0x18>)
 8042d06:	f001 fd57 	bl	80447b8 <HAL_SD_ReadBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8042d0a:	3000      	adds	r0, #0
 8042d0c:	bf18      	it	ne
 8042d0e:	2001      	movne	r0, #1
 8042d10:	bd08      	pop	{r3, pc}
 8042d12:	bf00      	nop
 8042d14:	2000c2c0 	.word	0x2000c2c0

08042d18 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8042d18:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8042d1a:	4613      	mov	r3, r2
 8042d1c:	460a      	mov	r2, r1
 8042d1e:	4601      	mov	r1, r0
 8042d20:	4803      	ldr	r0, [pc, #12]	; (8042d30 <BSP_SD_WriteBlocks_DMA+0x18>)
 8042d22:	f001 fddf 	bl	80448e4 <HAL_SD_WriteBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8042d26:	3000      	adds	r0, #0
 8042d28:	bf18      	it	ne
 8042d2a:	2001      	movne	r0, #1
 8042d2c:	bd08      	pop	{r3, pc}
 8042d2e:	bf00      	nop
 8042d30:	2000c2c0 	.word	0x2000c2c0

08042d34 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8042d34:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8042d36:	4803      	ldr	r0, [pc, #12]	; (8042d44 <BSP_SD_GetCardState+0x10>)
 8042d38:	f002 f8ea 	bl	8044f10 <HAL_SD_GetCardState>
}
 8042d3c:	3804      	subs	r0, #4
 8042d3e:	bf18      	it	ne
 8042d40:	2001      	movne	r0, #1
 8042d42:	bd08      	pop	{r3, pc}
 8042d44:	2000c2c0 	.word	0x2000c2c0

08042d48 <BSP_SD_GetCardInfo>:
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8042d48:	4601      	mov	r1, r0
 8042d4a:	4801      	ldr	r0, [pc, #4]	; (8042d50 <BSP_SD_GetCardInfo+0x8>)
 8042d4c:	f002 b849 	b.w	8044de2 <HAL_SD_GetCardInfo>
 8042d50:	2000c2c0 	.word	0x2000c2c0

08042d54 <BSP_SD_AbortCallback>:
 8042d54:	4770      	bx	lr

08042d56 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8042d56:	b508      	push	{r3, lr}
  BSP_SD_AbortCallback();
 8042d58:	f7ff fffc 	bl	8042d54 <BSP_SD_AbortCallback>
}
 8042d5c:	bd08      	pop	{r3, pc}

08042d5e <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8042d5e:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 8042d60:	f000 f90a 	bl	8042f78 <BSP_SD_WriteCpltCallback>
}
 8042d64:	bd08      	pop	{r3, pc}

08042d66 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8042d66:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 8042d68:	f000 f90c 	bl	8042f84 <BSP_SD_ReadCpltCallback>
}
 8042d6c:	bd08      	pop	{r3, pc}

08042d6e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8042d6e:	b507      	push	{r0, r1, r2, lr}
  __IO uint8_t status = SD_PRESENT;
 8042d70:	2301      	movs	r3, #1
 8042d72:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8042d76:	f000 f82d 	bl	8042dd4 <BSP_PlatformIsDetected>
 8042d7a:	b908      	cbnz	r0, 8042d80 <BSP_SD_IsDetected+0x12>
  {
    status = SD_NOT_PRESENT;
 8042d7c:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 8042d80:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8042d84:	b003      	add	sp, #12
 8042d86:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08042d8c <BSP_SD_Init>:
{
 8042d8c:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8042d8e:	f7ff ffee 	bl	8042d6e <BSP_SD_IsDetected>
 8042d92:	2801      	cmp	r0, #1
 8042d94:	d10c      	bne.n	8042db0 <BSP_SD_Init+0x24>
  sd_state = HAL_SD_Init(&hsd);
 8042d96:	4807      	ldr	r0, [pc, #28]	; (8042db4 <BSP_SD_Init+0x28>)
 8042d98:	f002 f808 	bl	8044dac <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8042d9c:	b938      	cbnz	r0, 8042dae <BSP_SD_Init+0x22>
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8042d9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8042da2:	4804      	ldr	r0, [pc, #16]	; (8042db4 <BSP_SD_Init+0x28>)
 8042da4:	f002 f830 	bl	8044e08 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR;
 8042da8:	3000      	adds	r0, #0
 8042daa:	bf18      	it	ne
 8042dac:	2001      	movne	r0, #1
}
 8042dae:	bd08      	pop	{r3, pc}
    return MSD_ERROR;
 8042db0:	2001      	movs	r0, #1
 8042db2:	e7fc      	b.n	8042dae <BSP_SD_Init+0x22>
 8042db4:	2000c2c0 	.word	0x2000c2c0

08042db8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8042db8:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8042dba:	4903      	ldr	r1, [pc, #12]	; (8042dc8 <MX_FATFS_Init+0x10>)
 8042dbc:	4803      	ldr	r0, [pc, #12]	; (8042dcc <MX_FATFS_Init+0x14>)
 8042dbe:	f003 ffb5 	bl	8046d2c <FATFS_LinkDriver>
 8042dc2:	4b03      	ldr	r3, [pc, #12]	; (8042dd0 <MX_FATFS_Init+0x18>)
 8042dc4:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8042dc6:	bd08      	pop	{r3, pc}
 8042dc8:	20009c81 	.word	0x20009c81
 8042dcc:	0804e29c 	.word	0x0804e29c
 8042dd0:	20009c80 	.word	0x20009c80

08042dd4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8042dd4:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8042dd6:	2180      	movs	r1, #128	; 0x80
 8042dd8:	4803      	ldr	r0, [pc, #12]	; (8042de8 <BSP_PlatformIsDetected+0x14>)
 8042dda:	f000 fe7f 	bl	8043adc <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 8042dde:	fab0 f080 	clz	r0, r0
 8042de2:	0940      	lsrs	r0, r0, #5
 8042de4:	bd08      	pop	{r3, pc}
 8042de6:	bf00      	nop
 8042de8:	40020800 	.word	0x40020800

08042dec <SD_CheckStatus.isra.0>:
  }

  return -1;
}

static DSTATUS SD_CheckStatus(BYTE lun)
 8042dec:	b510      	push	{r4, lr}
{
  Stat = STA_NOINIT;
 8042dee:	4c06      	ldr	r4, [pc, #24]	; (8042e08 <SD_CheckStatus.isra.0+0x1c>)
 8042df0:	2301      	movs	r3, #1
 8042df2:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8042df4:	f7ff ff9e 	bl	8042d34 <BSP_SD_GetCardState>
 8042df8:	4623      	mov	r3, r4
 8042dfa:	b918      	cbnz	r0, 8042e04 <SD_CheckStatus.isra.0+0x18>
  {
    Stat &= ~STA_NOINIT;
 8042dfc:	7822      	ldrb	r2, [r4, #0]
 8042dfe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8042e02:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 8042e04:	7818      	ldrb	r0, [r3, #0]
}
 8042e06:	bd10      	pop	{r4, pc}
 8042e08:	20001090 	.word	0x20001090

08042e0c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8042e0c:	b510      	push	{r4, lr}

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8042e0e:	f7ff ffbd 	bl	8042d8c <BSP_SD_Init>
 8042e12:	4c03      	ldr	r4, [pc, #12]	; (8042e20 <SD_initialize+0x14>)
 8042e14:	b910      	cbnz	r0, 8042e1c <SD_initialize+0x10>
  {
    Stat = SD_CheckStatus(lun);
 8042e16:	f7ff ffe9 	bl	8042dec <SD_CheckStatus.isra.0>
 8042e1a:	7020      	strb	r0, [r4, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8042e1c:	7820      	ldrb	r0, [r4, #0]
}
 8042e1e:	bd10      	pop	{r4, pc}
 8042e20:	20001090 	.word	0x20001090

08042e24 <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  return SD_CheckStatus(lun);
 8042e24:	f7ff bfe2 	b.w	8042dec <SD_CheckStatus.isra.0>

08042e28 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8042e28:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8042e2a:	4b12      	ldr	r3, [pc, #72]	; (8042e74 <SD_ioctl+0x4c>)
 8042e2c:	781b      	ldrb	r3, [r3, #0]
 8042e2e:	07db      	lsls	r3, r3, #31
{
 8042e30:	b088      	sub	sp, #32
 8042e32:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8042e34:	d41b      	bmi.n	8042e6e <SD_ioctl+0x46>

  switch (cmd)
 8042e36:	2903      	cmp	r1, #3
 8042e38:	d803      	bhi.n	8042e42 <SD_ioctl+0x1a>
 8042e3a:	e8df f001 	tbb	[pc, r1]
 8042e3e:	0510      	.short	0x0510
 8042e40:	120b      	.short	0x120b
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
    res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 8042e42:	2004      	movs	r0, #4
  }

  return res;
}
 8042e44:	b008      	add	sp, #32
 8042e46:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8042e48:	4668      	mov	r0, sp
 8042e4a:	f7ff ff7d 	bl	8042d48 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8042e4e:	9b06      	ldr	r3, [sp, #24]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8042e50:	6023      	str	r3, [r4, #0]
 8042e52:	e004      	b.n	8042e5e <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 8042e54:	4668      	mov	r0, sp
 8042e56:	f7ff ff77 	bl	8042d48 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8042e5a:	9b07      	ldr	r3, [sp, #28]
 8042e5c:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 8042e5e:	2000      	movs	r0, #0
 8042e60:	e7f0      	b.n	8042e44 <SD_ioctl+0x1c>
    BSP_SD_GetCardInfo(&CardInfo);
 8042e62:	4668      	mov	r0, sp
 8042e64:	f7ff ff70 	bl	8042d48 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8042e68:	9b07      	ldr	r3, [sp, #28]
 8042e6a:	0a5b      	lsrs	r3, r3, #9
 8042e6c:	e7f0      	b.n	8042e50 <SD_ioctl+0x28>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8042e6e:	2003      	movs	r0, #3
 8042e70:	e7e8      	b.n	8042e44 <SD_ioctl+0x1c>
 8042e72:	bf00      	nop
 8042e74:	20001090 	.word	0x20001090

08042e78 <SD_CheckStatusWithTimeout.constprop.4>:
static int SD_CheckStatusWithTimeout(uint32_t timeout)
 8042e78:	b538      	push	{r3, r4, r5, lr}
  uint32_t timer = HAL_GetTick();
 8042e7a:	f000 f8af 	bl	8042fdc <HAL_GetTick>
  while(HAL_GetTick() - timer < timeout)
 8042e7e:	f247 542f 	movw	r4, #29999	; 0x752f
  uint32_t timer = HAL_GetTick();
 8042e82:	4605      	mov	r5, r0
  while(HAL_GetTick() - timer < timeout)
 8042e84:	f000 f8aa 	bl	8042fdc <HAL_GetTick>
 8042e88:	1b40      	subs	r0, r0, r5
 8042e8a:	42a0      	cmp	r0, r4
 8042e8c:	d902      	bls.n	8042e94 <SD_CheckStatusWithTimeout.constprop.4+0x1c>
  return -1;
 8042e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8042e92:	e003      	b.n	8042e9c <SD_CheckStatusWithTimeout.constprop.4+0x24>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8042e94:	f7ff ff4e 	bl	8042d34 <BSP_SD_GetCardState>
 8042e98:	2800      	cmp	r0, #0
 8042e9a:	d1f3      	bne.n	8042e84 <SD_CheckStatusWithTimeout.constprop.4+0xc>
}
 8042e9c:	bd38      	pop	{r3, r4, r5, pc}
	...

08042ea0 <SD_write>:
{
 8042ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   WriteStatus = 0;
 8042ea2:	4c19      	ldr	r4, [pc, #100]	; (8042f08 <SD_write+0x68>)
{
 8042ea4:	461f      	mov	r7, r3
   WriteStatus = 0;
 8042ea6:	2300      	movs	r3, #0
{
 8042ea8:	460d      	mov	r5, r1
 8042eaa:	4616      	mov	r6, r2
   WriteStatus = 0;
 8042eac:	6023      	str	r3, [r4, #0]
  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8042eae:	f7ff ffe3 	bl	8042e78 <SD_CheckStatusWithTimeout.constprop.4>
 8042eb2:	2800      	cmp	r0, #0
 8042eb4:	da01      	bge.n	8042eba <SD_write+0x1a>
    return res;
 8042eb6:	2001      	movs	r0, #1
}
 8042eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8042eba:	463a      	mov	r2, r7
 8042ebc:	4631      	mov	r1, r6
 8042ebe:	4628      	mov	r0, r5
 8042ec0:	f7ff ff2a 	bl	8042d18 <BSP_SD_WriteBlocks_DMA>
 8042ec4:	2800      	cmp	r0, #0
 8042ec6:	d1f6      	bne.n	8042eb6 <SD_write+0x16>
      timeout = HAL_GetTick();
 8042ec8:	f000 f888 	bl	8042fdc <HAL_GetTick>
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8042ecc:	f247 552f 	movw	r5, #29999	; 0x752f
      timeout = HAL_GetTick();
 8042ed0:	4606      	mov	r6, r0
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8042ed2:	6823      	ldr	r3, [r4, #0]
 8042ed4:	b923      	cbnz	r3, 8042ee0 <SD_write+0x40>
 8042ed6:	f000 f881 	bl	8042fdc <HAL_GetTick>
 8042eda:	1b80      	subs	r0, r0, r6
 8042edc:	42a8      	cmp	r0, r5
 8042ede:	d9f8      	bls.n	8042ed2 <SD_write+0x32>
      if (WriteStatus == 0)
 8042ee0:	6823      	ldr	r3, [r4, #0]
 8042ee2:	2b00      	cmp	r3, #0
 8042ee4:	d0e7      	beq.n	8042eb6 <SD_write+0x16>
        WriteStatus = 0;
 8042ee6:	2300      	movs	r3, #0
 8042ee8:	6023      	str	r3, [r4, #0]
        timeout = HAL_GetTick();
 8042eea:	f000 f877 	bl	8042fdc <HAL_GetTick>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8042eee:	f247 542f 	movw	r4, #29999	; 0x752f
        timeout = HAL_GetTick();
 8042ef2:	4605      	mov	r5, r0
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8042ef4:	f000 f872 	bl	8042fdc <HAL_GetTick>
 8042ef8:	1b40      	subs	r0, r0, r5
 8042efa:	42a0      	cmp	r0, r4
 8042efc:	d8db      	bhi.n	8042eb6 <SD_write+0x16>
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8042efe:	f7ff ff19 	bl	8042d34 <BSP_SD_GetCardState>
 8042f02:	2800      	cmp	r0, #0
 8042f04:	d1f6      	bne.n	8042ef4 <SD_write+0x54>
 8042f06:	e7d7      	b.n	8042eb8 <SD_write+0x18>
 8042f08:	2000848c 	.word	0x2000848c

08042f0c <SD_read>:
{
 8042f0c:	b570      	push	{r4, r5, r6, lr}
 8042f0e:	460c      	mov	r4, r1
 8042f10:	4615      	mov	r5, r2
 8042f12:	461e      	mov	r6, r3
  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8042f14:	f7ff ffb0 	bl	8042e78 <SD_CheckStatusWithTimeout.constprop.4>
 8042f18:	2800      	cmp	r0, #0
 8042f1a:	da01      	bge.n	8042f20 <SD_read+0x14>
    return res;
 8042f1c:	2001      	movs	r0, #1
}
 8042f1e:	bd70      	pop	{r4, r5, r6, pc}
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8042f20:	4632      	mov	r2, r6
 8042f22:	4629      	mov	r1, r5
 8042f24:	4620      	mov	r0, r4
 8042f26:	f7ff fee9 	bl	8042cfc <BSP_SD_ReadBlocks_DMA>
 8042f2a:	2800      	cmp	r0, #0
 8042f2c:	d1f6      	bne.n	8042f1c <SD_read+0x10>
      ReadStatus = 0;
 8042f2e:	4c11      	ldr	r4, [pc, #68]	; (8042f74 <SD_read+0x68>)
 8042f30:	6060      	str	r0, [r4, #4]
      timeout = HAL_GetTick();
 8042f32:	f000 f853 	bl	8042fdc <HAL_GetTick>
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8042f36:	f247 552f 	movw	r5, #29999	; 0x752f
      timeout = HAL_GetTick();
 8042f3a:	4606      	mov	r6, r0
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8042f3c:	6863      	ldr	r3, [r4, #4]
 8042f3e:	b923      	cbnz	r3, 8042f4a <SD_read+0x3e>
 8042f40:	f000 f84c 	bl	8042fdc <HAL_GetTick>
 8042f44:	1b80      	subs	r0, r0, r6
 8042f46:	42a8      	cmp	r0, r5
 8042f48:	d9f8      	bls.n	8042f3c <SD_read+0x30>
      if (ReadStatus == 0)
 8042f4a:	6863      	ldr	r3, [r4, #4]
 8042f4c:	2b00      	cmp	r3, #0
 8042f4e:	d0e5      	beq.n	8042f1c <SD_read+0x10>
        ReadStatus = 0;
 8042f50:	2300      	movs	r3, #0
 8042f52:	6063      	str	r3, [r4, #4]
        timeout = HAL_GetTick();
 8042f54:	f000 f842 	bl	8042fdc <HAL_GetTick>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8042f58:	f247 542f 	movw	r4, #29999	; 0x752f
        timeout = HAL_GetTick();
 8042f5c:	4605      	mov	r5, r0
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8042f5e:	f000 f83d 	bl	8042fdc <HAL_GetTick>
 8042f62:	1b40      	subs	r0, r0, r5
 8042f64:	42a0      	cmp	r0, r4
 8042f66:	d8d9      	bhi.n	8042f1c <SD_read+0x10>
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8042f68:	f7ff fee4 	bl	8042d34 <BSP_SD_GetCardState>
 8042f6c:	2800      	cmp	r0, #0
 8042f6e:	d1f6      	bne.n	8042f5e <SD_read+0x52>
 8042f70:	e7d5      	b.n	8042f1e <SD_read+0x12>
 8042f72:	bf00      	nop
 8042f74:	2000848c 	.word	0x2000848c

08042f78 <BSP_SD_WriteCpltCallback>:
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{

  WriteStatus = 1;
 8042f78:	4b01      	ldr	r3, [pc, #4]	; (8042f80 <BSP_SD_WriteCpltCallback+0x8>)
 8042f7a:	2201      	movs	r2, #1
 8042f7c:	601a      	str	r2, [r3, #0]
}
 8042f7e:	4770      	bx	lr
 8042f80:	2000848c 	.word	0x2000848c

08042f84 <BSP_SD_ReadCpltCallback>:
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
  ReadStatus = 1;
 8042f84:	4b01      	ldr	r3, [pc, #4]	; (8042f8c <BSP_SD_ReadCpltCallback+0x8>)
 8042f86:	2201      	movs	r2, #1
 8042f88:	605a      	str	r2, [r3, #4]
}
 8042f8a:	4770      	bx	lr
 8042f8c:	2000848c 	.word	0x2000848c

08042f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8042f90:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8042f92:	4b0b      	ldr	r3, [pc, #44]	; (8042fc0 <HAL_Init+0x30>)
 8042f94:	681a      	ldr	r2, [r3, #0]
 8042f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8042f9a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8042f9c:	681a      	ldr	r2, [r3, #0]
 8042f9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8042fa2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8042fa4:	681a      	ldr	r2, [r3, #0]
 8042fa6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8042faa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8042fac:	2003      	movs	r0, #3
 8042fae:	f000 f81b 	bl	8042fe8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8042fb2:	2000      	movs	r0, #0
 8042fb4:	f008 fede 	bl	804bd74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8042fb8:	f008 fee4 	bl	804bd84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8042fbc:	2000      	movs	r0, #0
 8042fbe:	bd08      	pop	{r3, pc}
 8042fc0:	40023c00 	.word	0x40023c00

08042fc4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8042fc4:	4a03      	ldr	r2, [pc, #12]	; (8042fd4 <HAL_IncTick+0x10>)
 8042fc6:	4b04      	ldr	r3, [pc, #16]	; (8042fd8 <HAL_IncTick+0x14>)
 8042fc8:	6811      	ldr	r1, [r2, #0]
 8042fca:	781b      	ldrb	r3, [r3, #0]
 8042fcc:	440b      	add	r3, r1
 8042fce:	6013      	str	r3, [r2, #0]
}
 8042fd0:	4770      	bx	lr
 8042fd2:	bf00      	nop
 8042fd4:	2000bcf0 	.word	0x2000bcf0
 8042fd8:	20001094 	.word	0x20001094

08042fdc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8042fdc:	4b01      	ldr	r3, [pc, #4]	; (8042fe4 <HAL_GetTick+0x8>)
 8042fde:	6818      	ldr	r0, [r3, #0]
}
 8042fe0:	4770      	bx	lr
 8042fe2:	bf00      	nop
 8042fe4:	2000bcf0 	.word	0x2000bcf0

08042fe8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8042fe8:	4a07      	ldr	r2, [pc, #28]	; (8043008 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8042fea:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8042fec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8042ff0:	041b      	lsls	r3, r3, #16
 8042ff2:	0c1b      	lsrs	r3, r3, #16
 8042ff4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8042ff8:	0200      	lsls	r0, r0, #8
 8042ffa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8042ffe:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8043002:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8043004:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8043006:	4770      	bx	lr
 8043008:	e000ed00 	.word	0xe000ed00

0804300c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 804300c:	4b17      	ldr	r3, [pc, #92]	; (804306c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 804300e:	b570      	push	{r4, r5, r6, lr}
 8043010:	68dc      	ldr	r4, [r3, #12]
 8043012:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8043016:	f1c4 0507 	rsb	r5, r4, #7
 804301a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 804301c:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8043020:	bf28      	it	cs
 8043022:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8043024:	f04f 36ff 	mov.w	r6, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8043028:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 804302a:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 804302e:	bf8c      	ite	hi
 8043030:	3c03      	subhi	r4, #3
 8043032:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8043034:	ea21 0303 	bic.w	r3, r1, r3
 8043038:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 804303a:	fa06 f404 	lsl.w	r4, r6, r4
 804303e:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8043042:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8043044:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8043048:	bfa8      	it	ge
 804304a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 804304e:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8043052:	bfbc      	itt	lt
 8043054:	f000 000f 	andlt.w	r0, r0, #15
 8043058:	4a05      	ldrlt	r2, [pc, #20]	; (8043070 <HAL_NVIC_SetPriority+0x64>)
 804305a:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 804305c:	bfaa      	itet	ge
 804305e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8043062:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8043064:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8043068:	bd70      	pop	{r4, r5, r6, pc}
 804306a:	bf00      	nop
 804306c:	e000ed00 	.word	0xe000ed00
 8043070:	e000ed14 	.word	0xe000ed14

08043074 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8043074:	2800      	cmp	r0, #0
 8043076:	db08      	blt.n	804308a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8043078:	0942      	lsrs	r2, r0, #5
 804307a:	2301      	movs	r3, #1
 804307c:	f000 001f 	and.w	r0, r0, #31
 8043080:	fa03 f000 	lsl.w	r0, r3, r0
 8043084:	4b01      	ldr	r3, [pc, #4]	; (804308c <HAL_NVIC_EnableIRQ+0x18>)
 8043086:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 804308a:	4770      	bx	lr
 804308c:	e000e100 	.word	0xe000e100

08043090 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8043090:	2800      	cmp	r0, #0
 8043092:	db0d      	blt.n	80430b0 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8043094:	0943      	lsrs	r3, r0, #5
 8043096:	2201      	movs	r2, #1
 8043098:	f000 001f 	and.w	r0, r0, #31
 804309c:	fa02 f000 	lsl.w	r0, r2, r0
 80430a0:	3320      	adds	r3, #32
 80430a2:	4a04      	ldr	r2, [pc, #16]	; (80430b4 <HAL_NVIC_DisableIRQ+0x24>)
 80430a4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80430a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80430ac:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80430b0:	4770      	bx	lr
 80430b2:	bf00      	nop
 80430b4:	e000e100 	.word	0xe000e100

080430b8 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 80430b8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80430bc:	4905      	ldr	r1, [pc, #20]	; (80430d4 <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80430be:	4b06      	ldr	r3, [pc, #24]	; (80430d8 <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80430c0:	68ca      	ldr	r2, [r1, #12]
 80430c2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80430c6:	4313      	orrs	r3, r2
 80430c8:	60cb      	str	r3, [r1, #12]
 80430ca:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80430ce:	bf00      	nop
 80430d0:	e7fd      	b.n	80430ce <HAL_NVIC_SystemReset+0x16>
 80430d2:	bf00      	nop
 80430d4:	e000ed00 	.word	0xe000ed00
 80430d8:	05fa0004 	.word	0x05fa0004

080430dc <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80430dc:	2800      	cmp	r0, #0
 80430de:	db09      	blt.n	80430f4 <HAL_NVIC_ClearPendingIRQ+0x18>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80430e0:	0943      	lsrs	r3, r0, #5
 80430e2:	2201      	movs	r2, #1
 80430e4:	f000 001f 	and.w	r0, r0, #31
 80430e8:	fa02 f000 	lsl.w	r0, r2, r0
 80430ec:	3360      	adds	r3, #96	; 0x60
 80430ee:	4a02      	ldr	r2, [pc, #8]	; (80430f8 <HAL_NVIC_ClearPendingIRQ+0x1c>)
 80430f0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 80430f4:	4770      	bx	lr
 80430f6:	bf00      	nop
 80430f8:	e000e100 	.word	0xe000e100

080430fc <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80430fc:	6803      	ldr	r3, [r0, #0]
 80430fe:	b2da      	uxtb	r2, r3
 8043100:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8043104:	f023 0303 	bic.w	r3, r3, #3
 8043108:	2118      	movs	r1, #24
 804310a:	3a10      	subs	r2, #16
 804310c:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8043110:	4904      	ldr	r1, [pc, #16]	; (8043124 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8043112:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8043114:	bf88      	it	hi
 8043116:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8043118:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 804311a:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 804311c:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 804311e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8043120:	4770      	bx	lr
 8043122:	bf00      	nop
 8043124:	0804e2b0 	.word	0x0804e2b0

08043128 <HAL_DMA_Init>:
{
 8043128:	b570      	push	{r4, r5, r6, lr}
 804312a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 804312c:	f7ff ff56 	bl	8042fdc <HAL_GetTick>
 8043130:	4605      	mov	r5, r0
  if(hdma == NULL)
 8043132:	2c00      	cmp	r4, #0
 8043134:	d071      	beq.n	804321a <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8043136:	2300      	movs	r3, #0
 8043138:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 804313c:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 804313e:	2302      	movs	r3, #2
 8043140:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8043144:	6813      	ldr	r3, [r2, #0]
 8043146:	f023 0301 	bic.w	r3, r3, #1
 804314a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 804314c:	6821      	ldr	r1, [r4, #0]
 804314e:	680b      	ldr	r3, [r1, #0]
 8043150:	07d8      	lsls	r0, r3, #31
 8043152:	d43c      	bmi.n	80431ce <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8043154:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8043156:	4d32      	ldr	r5, [pc, #200]	; (8043220 <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8043158:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 804315a:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 804315c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8043160:	4313      	orrs	r3, r2
 8043162:	68e2      	ldr	r2, [r4, #12]
 8043164:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8043166:	6922      	ldr	r2, [r4, #16]
 8043168:	4313      	orrs	r3, r2
 804316a:	6962      	ldr	r2, [r4, #20]
 804316c:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 804316e:	69e2      	ldr	r2, [r4, #28]
 8043170:	4303      	orrs	r3, r0
 8043172:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8043174:	6a22      	ldr	r2, [r4, #32]
 8043176:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8043178:	6a62      	ldr	r2, [r4, #36]	; 0x24
 804317a:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 804317c:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8043180:	bf02      	ittt	eq
 8043182:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8043186:	4335      	orreq	r5, r6
 8043188:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 804318a:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 804318c:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 804318e:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8043190:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8043194:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8043198:	d10b      	bne.n	80431b2 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 804319a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 804319c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 804319e:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80431a0:	b13d      	cbz	r5, 80431b2 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80431a2:	b9f8      	cbnz	r0, 80431e4 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 80431a4:	2a01      	cmp	r2, #1
 80431a6:	d02d      	beq.n	8043204 <HAL_DMA_Init+0xdc>
 80431a8:	d301      	bcc.n	80431ae <HAL_DMA_Init+0x86>
 80431aa:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80431ac:	d101      	bne.n	80431b2 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80431ae:	01ea      	lsls	r2, r5, #7
 80431b0:	d42b      	bmi.n	804320a <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 80431b2:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80431b4:	4620      	mov	r0, r4
 80431b6:	f7ff ffa1 	bl	80430fc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80431ba:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80431bc:	233f      	movs	r3, #63	; 0x3f
 80431be:	4093      	lsls	r3, r2
 80431c0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80431c2:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80431c4:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80431c6:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80431c8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80431cc:	e009      	b.n	80431e2 <HAL_DMA_Init+0xba>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80431ce:	f7ff ff05 	bl	8042fdc <HAL_GetTick>
 80431d2:	1b40      	subs	r0, r0, r5
 80431d4:	2805      	cmp	r0, #5
 80431d6:	d9b9      	bls.n	804314c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80431d8:	2320      	movs	r3, #32
 80431da:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80431dc:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 80431de:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80431e2:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80431e4:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80431e8:	d113      	bne.n	8043212 <HAL_DMA_Init+0xea>
    switch (tmp)
 80431ea:	2a03      	cmp	r2, #3
 80431ec:	d8e1      	bhi.n	80431b2 <HAL_DMA_Init+0x8a>
 80431ee:	a001      	add	r0, pc, #4	; (adr r0, 80431f4 <HAL_DMA_Init+0xcc>)
 80431f0:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80431f4:	0804320b 	.word	0x0804320b
 80431f8:	080431af 	.word	0x080431af
 80431fc:	0804320b 	.word	0x0804320b
 8043200:	08043205 	.word	0x08043205
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8043204:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8043208:	d1d3      	bne.n	80431b2 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 804320a:	2340      	movs	r3, #64	; 0x40
 804320c:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 804320e:	2001      	movs	r0, #1
 8043210:	e7e5      	b.n	80431de <HAL_DMA_Init+0xb6>
    switch (tmp)
 8043212:	2a02      	cmp	r2, #2
 8043214:	d9f9      	bls.n	804320a <HAL_DMA_Init+0xe2>
 8043216:	2a03      	cmp	r2, #3
 8043218:	e7c8      	b.n	80431ac <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 804321a:	2001      	movs	r0, #1
 804321c:	e7e1      	b.n	80431e2 <HAL_DMA_Init+0xba>
 804321e:	bf00      	nop
 8043220:	f010803f 	.word	0xf010803f

08043224 <HAL_DMA_DeInit>:
{
 8043224:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 8043226:	4605      	mov	r5, r0
 8043228:	b320      	cbz	r0, 8043274 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 804322a:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 804322e:	b2e4      	uxtb	r4, r4
 8043230:	2c02      	cmp	r4, #2
 8043232:	d01d      	beq.n	8043270 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 8043234:	6803      	ldr	r3, [r0, #0]
 8043236:	681a      	ldr	r2, [r3, #0]
 8043238:	f022 0201 	bic.w	r2, r2, #1
  hdma->Instance->CR   = 0U;
 804323c:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 804323e:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = 0x00000021U;
 8043240:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 8043242:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8043244:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8043246:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8043248:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 804324a:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 804324c:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 804324e:	f7ff ff55 	bl	80430fc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8043252:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8043254:	233f      	movs	r3, #63	; 0x3f
 8043256:	4093      	lsls	r3, r2
  hdma->XferHalfCpltCallback = NULL;
 8043258:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 804325c:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;
 8043260:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8043264:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8043266:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8043268:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 804326c:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
    return HAL_BUSY;
 8043270:	4620      	mov	r0, r4
 8043272:	e000      	b.n	8043276 <HAL_DMA_DeInit+0x52>
    return HAL_ERROR;
 8043274:	2001      	movs	r0, #1
}
 8043276:	bd38      	pop	{r3, r4, r5, pc}

08043278 <HAL_DMA_Start_IT>:
{
 8043278:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 804327a:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 804327e:	2c01      	cmp	r4, #1
 8043280:	d032      	beq.n	80432e8 <HAL_DMA_Start_IT+0x70>
 8043282:	2401      	movs	r4, #1
 8043284:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8043288:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 804328c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 804328e:	2c01      	cmp	r4, #1
 8043290:	f04f 0500 	mov.w	r5, #0
 8043294:	f04f 0402 	mov.w	r4, #2
 8043298:	d124      	bne.n	80432e4 <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 804329a:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 804329e:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80432a0:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80432a2:	6825      	ldr	r5, [r4, #0]
 80432a4:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 80432a8:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80432aa:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80432ac:	6883      	ldr	r3, [r0, #8]
 80432ae:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 80432b0:	bf0e      	itee	eq
 80432b2:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 80432b4:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 80432b6:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80432b8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 80432ba:	bf08      	it	eq
 80432bc:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80432be:	233f      	movs	r3, #63	; 0x3f
 80432c0:	4093      	lsls	r3, r2
 80432c2:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80432c4:	6823      	ldr	r3, [r4, #0]
 80432c6:	f043 0316 	orr.w	r3, r3, #22
 80432ca:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80432cc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80432ce:	b11b      	cbz	r3, 80432d8 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 80432d0:	6823      	ldr	r3, [r4, #0]
 80432d2:	f043 0308 	orr.w	r3, r3, #8
 80432d6:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80432d8:	6823      	ldr	r3, [r4, #0]
 80432da:	f043 0301 	orr.w	r3, r3, #1
 80432de:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80432e0:	2000      	movs	r0, #0
}
 80432e2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 80432e4:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 80432e8:	2002      	movs	r0, #2
 80432ea:	e7fa      	b.n	80432e2 <HAL_DMA_Start_IT+0x6a>

080432ec <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80432ec:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80432f0:	2b02      	cmp	r3, #2
 80432f2:	d003      	beq.n	80432fc <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80432f4:	2380      	movs	r3, #128	; 0x80
 80432f6:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80432f8:	2001      	movs	r0, #1
 80432fa:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80432fc:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80432fe:	2305      	movs	r3, #5
 8043300:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8043304:	6813      	ldr	r3, [r2, #0]
 8043306:	f023 0301 	bic.w	r3, r3, #1
 804330a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 804330c:	2000      	movs	r0, #0
}
 804330e:	4770      	bx	lr

08043310 <HAL_DMA_IRQHandler>:
{
 8043310:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8043312:	2300      	movs	r3, #0
 8043314:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8043316:	4b5c      	ldr	r3, [pc, #368]	; (8043488 <HAL_DMA_IRQHandler+0x178>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8043318:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 804331a:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 804331c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 804331e:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8043320:	2208      	movs	r2, #8
 8043322:	409a      	lsls	r2, r3
 8043324:	4232      	tst	r2, r6
{
 8043326:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8043328:	d00c      	beq.n	8043344 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 804332a:	6801      	ldr	r1, [r0, #0]
 804332c:	6808      	ldr	r0, [r1, #0]
 804332e:	0740      	lsls	r0, r0, #29
 8043330:	d508      	bpl.n	8043344 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8043332:	6808      	ldr	r0, [r1, #0]
 8043334:	f020 0004 	bic.w	r0, r0, #4
 8043338:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 804333a:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 804333c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 804333e:	f042 0201 	orr.w	r2, r2, #1
 8043342:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8043344:	2201      	movs	r2, #1
 8043346:	409a      	lsls	r2, r3
 8043348:	4232      	tst	r2, r6
 804334a:	d008      	beq.n	804335e <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 804334c:	6821      	ldr	r1, [r4, #0]
 804334e:	6949      	ldr	r1, [r1, #20]
 8043350:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8043352:	bf41      	itttt	mi
 8043354:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8043356:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8043358:	f042 0202 	orrmi.w	r2, r2, #2
 804335c:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 804335e:	2204      	movs	r2, #4
 8043360:	409a      	lsls	r2, r3
 8043362:	4232      	tst	r2, r6
 8043364:	d008      	beq.n	8043378 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8043366:	6821      	ldr	r1, [r4, #0]
 8043368:	6809      	ldr	r1, [r1, #0]
 804336a:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 804336c:	bf41      	itttt	mi
 804336e:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8043370:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8043372:	f042 0204 	orrmi.w	r2, r2, #4
 8043376:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8043378:	2210      	movs	r2, #16
 804337a:	409a      	lsls	r2, r3
 804337c:	4232      	tst	r2, r6
 804337e:	d010      	beq.n	80433a2 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8043380:	6823      	ldr	r3, [r4, #0]
 8043382:	6819      	ldr	r1, [r3, #0]
 8043384:	0709      	lsls	r1, r1, #28
 8043386:	d50c      	bpl.n	80433a2 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8043388:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 804338a:	681a      	ldr	r2, [r3, #0]
 804338c:	0350      	lsls	r0, r2, #13
 804338e:	d537      	bpl.n	8043400 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8043390:	681b      	ldr	r3, [r3, #0]
 8043392:	0319      	lsls	r1, r3, #12
 8043394:	d401      	bmi.n	804339a <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8043396:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8043398:	e000      	b.n	804339c <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 804339a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 804339c:	b10b      	cbz	r3, 80433a2 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 804339e:	4620      	mov	r0, r4
 80433a0:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80433a2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80433a4:	2220      	movs	r2, #32
 80433a6:	408a      	lsls	r2, r1
 80433a8:	4232      	tst	r2, r6
 80433aa:	d03a      	beq.n	8043422 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80433ac:	6823      	ldr	r3, [r4, #0]
 80433ae:	6818      	ldr	r0, [r3, #0]
 80433b0:	06c6      	lsls	r6, r0, #27
 80433b2:	d536      	bpl.n	8043422 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80433b4:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80433b6:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80433ba:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80433bc:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80433be:	d127      	bne.n	8043410 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80433c0:	f022 0216 	bic.w	r2, r2, #22
 80433c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80433c6:	695a      	ldr	r2, [r3, #20]
 80433c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80433cc:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80433ce:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80433d0:	b90a      	cbnz	r2, 80433d6 <HAL_DMA_IRQHandler+0xc6>
 80433d2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80433d4:	b11a      	cbz	r2, 80433de <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80433d6:	681a      	ldr	r2, [r3, #0]
 80433d8:	f022 0208 	bic.w	r2, r2, #8
 80433dc:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80433de:	233f      	movs	r3, #63	; 0x3f
 80433e0:	408b      	lsls	r3, r1
 80433e2:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 80433e4:	2300      	movs	r3, #0
 80433e6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80433ea:	2301      	movs	r3, #1
 80433ec:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80433f0:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 80433f2:	2b00      	cmp	r3, #0
 80433f4:	d045      	beq.n	8043482 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 80433f6:	4620      	mov	r0, r4
}
 80433f8:	b003      	add	sp, #12
 80433fa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 80433fe:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8043400:	681a      	ldr	r2, [r3, #0]
 8043402:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8043404:	bf5e      	ittt	pl
 8043406:	681a      	ldrpl	r2, [r3, #0]
 8043408:	f022 0208 	bicpl.w	r2, r2, #8
 804340c:	601a      	strpl	r2, [r3, #0]
 804340e:	e7c2      	b.n	8043396 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8043410:	0350      	lsls	r0, r2, #13
 8043412:	d527      	bpl.n	8043464 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8043414:	681b      	ldr	r3, [r3, #0]
 8043416:	0319      	lsls	r1, r3, #12
 8043418:	d431      	bmi.n	804347e <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 804341a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 804341c:	b10b      	cbz	r3, 8043422 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 804341e:	4620      	mov	r0, r4
 8043420:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8043422:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8043424:	b36b      	cbz	r3, 8043482 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8043426:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8043428:	07da      	lsls	r2, r3, #31
 804342a:	d519      	bpl.n	8043460 <HAL_DMA_IRQHandler+0x150>
      hdma->State = HAL_DMA_STATE_ABORT;
 804342c:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 804342e:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8043430:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8043434:	6813      	ldr	r3, [r2, #0]
 8043436:	f023 0301 	bic.w	r3, r3, #1
 804343a:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 804343c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8043440:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8043444:	9b01      	ldr	r3, [sp, #4]
 8043446:	3301      	adds	r3, #1
 8043448:	42bb      	cmp	r3, r7
 804344a:	9301      	str	r3, [sp, #4]
 804344c:	d802      	bhi.n	8043454 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 804344e:	6813      	ldr	r3, [r2, #0]
 8043450:	07db      	lsls	r3, r3, #31
 8043452:	d4f7      	bmi.n	8043444 <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 8043454:	2300      	movs	r3, #0
 8043456:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 804345a:	2301      	movs	r3, #1
 804345c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8043460:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8043462:	e7c6      	b.n	80433f2 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8043464:	681a      	ldr	r2, [r3, #0]
 8043466:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 804346a:	d108      	bne.n	804347e <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 804346c:	6819      	ldr	r1, [r3, #0]
 804346e:	f021 0110 	bic.w	r1, r1, #16
 8043472:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8043474:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8043476:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 804347a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 804347e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8043480:	e7cc      	b.n	804341c <HAL_DMA_IRQHandler+0x10c>
}
 8043482:	b003      	add	sp, #12
 8043484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8043486:	bf00      	nop
 8043488:	2000108c 	.word	0x2000108c

0804348c <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 804348c:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 804348e:	4770      	bx	lr

08043490 <FLASH_Program_DoubleWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8043490:	4909      	ldr	r1, [pc, #36]	; (80434b8 <FLASH_Program_DoubleWord+0x28>)
{
 8043492:	b510      	push	{r4, lr}
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8043494:	690c      	ldr	r4, [r1, #16]
 8043496:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 804349a:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 804349c:	690c      	ldr	r4, [r1, #16]
 804349e:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 80434a2:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 80434a4:	690c      	ldr	r4, [r1, #16]
 80434a6:	f044 0401 	orr.w	r4, r4, #1
 80434aa:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80434ac:	6002      	str	r2, [r0, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80434ae:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80434b2:	6043      	str	r3, [r0, #4]
}
 80434b4:	bd10      	pop	{r4, pc}
 80434b6:	bf00      	nop
 80434b8:	40023c00 	.word	0x40023c00

080434bc <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80434bc:	4b07      	ldr	r3, [pc, #28]	; (80434dc <FLASH_Program_Word+0x20>)
 80434be:	691a      	ldr	r2, [r3, #16]
 80434c0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80434c4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80434c6:	691a      	ldr	r2, [r3, #16]
 80434c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80434cc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80434ce:	691a      	ldr	r2, [r3, #16]
 80434d0:	f042 0201 	orr.w	r2, r2, #1
 80434d4:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 80434d6:	6001      	str	r1, [r0, #0]
}
 80434d8:	4770      	bx	lr
 80434da:	bf00      	nop
 80434dc:	40023c00 	.word	0x40023c00

080434e0 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80434e0:	4b07      	ldr	r3, [pc, #28]	; (8043500 <FLASH_Program_HalfWord+0x20>)
 80434e2:	691a      	ldr	r2, [r3, #16]
 80434e4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80434e8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80434ea:	691a      	ldr	r2, [r3, #16]
 80434ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80434f0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80434f2:	691a      	ldr	r2, [r3, #16]
 80434f4:	f042 0201 	orr.w	r2, r2, #1
 80434f8:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 80434fa:	8001      	strh	r1, [r0, #0]
}
 80434fc:	4770      	bx	lr
 80434fe:	bf00      	nop
 8043500:	40023c00 	.word	0x40023c00

08043504 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8043504:	4b1a      	ldr	r3, [pc, #104]	; (8043570 <FLASH_SetErrorCode+0x6c>)
 8043506:	68da      	ldr	r2, [r3, #12]
 8043508:	06d2      	lsls	r2, r2, #27
 804350a:	d506      	bpl.n	804351a <FLASH_SetErrorCode+0x16>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 804350c:	4919      	ldr	r1, [pc, #100]	; (8043574 <FLASH_SetErrorCode+0x70>)
 804350e:	69ca      	ldr	r2, [r1, #28]
 8043510:	f042 0210 	orr.w	r2, r2, #16
 8043514:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8043516:	2210      	movs	r2, #16
 8043518:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 804351a:	68da      	ldr	r2, [r3, #12]
 804351c:	0690      	lsls	r0, r2, #26
 804351e:	d506      	bpl.n	804352e <FLASH_SetErrorCode+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8043520:	4914      	ldr	r1, [pc, #80]	; (8043574 <FLASH_SetErrorCode+0x70>)
 8043522:	69ca      	ldr	r2, [r1, #28]
 8043524:	f042 0208 	orr.w	r2, r2, #8
 8043528:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 804352a:	2220      	movs	r2, #32
 804352c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 804352e:	4b10      	ldr	r3, [pc, #64]	; (8043570 <FLASH_SetErrorCode+0x6c>)
 8043530:	68da      	ldr	r2, [r3, #12]
 8043532:	0651      	lsls	r1, r2, #25
 8043534:	d506      	bpl.n	8043544 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8043536:	490f      	ldr	r1, [pc, #60]	; (8043574 <FLASH_SetErrorCode+0x70>)
 8043538:	69ca      	ldr	r2, [r1, #28]
 804353a:	f042 0204 	orr.w	r2, r2, #4
 804353e:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8043540:	2240      	movs	r2, #64	; 0x40
 8043542:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8043544:	68da      	ldr	r2, [r3, #12]
 8043546:	0612      	lsls	r2, r2, #24
 8043548:	d506      	bpl.n	8043558 <FLASH_SetErrorCode+0x54>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 804354a:	490a      	ldr	r1, [pc, #40]	; (8043574 <FLASH_SetErrorCode+0x70>)
 804354c:	69ca      	ldr	r2, [r1, #28]
 804354e:	f042 0202 	orr.w	r2, r2, #2
 8043552:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8043554:	2280      	movs	r2, #128	; 0x80
 8043556:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8043558:	4a05      	ldr	r2, [pc, #20]	; (8043570 <FLASH_SetErrorCode+0x6c>)
 804355a:	68d3      	ldr	r3, [r2, #12]
 804355c:	079b      	lsls	r3, r3, #30
 804355e:	d506      	bpl.n	804356e <FLASH_SetErrorCode+0x6a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8043560:	4904      	ldr	r1, [pc, #16]	; (8043574 <FLASH_SetErrorCode+0x70>)
 8043562:	69cb      	ldr	r3, [r1, #28]
 8043564:	f043 0320 	orr.w	r3, r3, #32
 8043568:	61cb      	str	r3, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 804356a:	2302      	movs	r3, #2
 804356c:	60d3      	str	r3, [r2, #12]
  }
}
 804356e:	4770      	bx	lr
 8043570:	40023c00 	.word	0x40023c00
 8043574:	2000bcf4 	.word	0x2000bcf4

08043578 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8043578:	4b06      	ldr	r3, [pc, #24]	; (8043594 <HAL_FLASH_Unlock+0x1c>)
 804357a:	691a      	ldr	r2, [r3, #16]
 804357c:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 804357e:	bfbf      	itttt	lt
 8043580:	4a05      	ldrlt	r2, [pc, #20]	; (8043598 <HAL_FLASH_Unlock+0x20>)
 8043582:	605a      	strlt	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8043584:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 8043588:	605a      	strlt	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 804358a:	bfba      	itte	lt
 804358c:	6918      	ldrlt	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 804358e:	0fc0      	lsrlt	r0, r0, #31
 8043590:	2000      	movge	r0, #0
}
 8043592:	4770      	bx	lr
 8043594:	40023c00 	.word	0x40023c00
 8043598:	45670123 	.word	0x45670123

0804359c <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 804359c:	4a03      	ldr	r2, [pc, #12]	; (80435ac <HAL_FLASH_Lock+0x10>)
 804359e:	6913      	ldr	r3, [r2, #16]
 80435a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80435a4:	6113      	str	r3, [r2, #16]
}
 80435a6:	2000      	movs	r0, #0
 80435a8:	4770      	bx	lr
 80435aa:	bf00      	nop
 80435ac:	40023c00 	.word	0x40023c00

080435b0 <HAL_FLASH_GetError>:
   return pFlash.ErrorCode;
 80435b0:	4b01      	ldr	r3, [pc, #4]	; (80435b8 <HAL_FLASH_GetError+0x8>)
 80435b2:	69d8      	ldr	r0, [r3, #28]
}  
 80435b4:	4770      	bx	lr
 80435b6:	bf00      	nop
 80435b8:	2000bcf4 	.word	0x2000bcf4

080435bc <FLASH_WaitForLastOperation>:
{ 
 80435bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80435be:	4b12      	ldr	r3, [pc, #72]	; (8043608 <FLASH_WaitForLastOperation+0x4c>)
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80435c0:	4c12      	ldr	r4, [pc, #72]	; (804360c <FLASH_WaitForLastOperation+0x50>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80435c2:	2200      	movs	r2, #0
{ 
 80435c4:	4605      	mov	r5, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80435c6:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 80435c8:	f7ff fd08 	bl	8042fdc <HAL_GetTick>
 80435cc:	4626      	mov	r6, r4
 80435ce:	4607      	mov	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80435d0:	68e3      	ldr	r3, [r4, #12]
 80435d2:	03da      	lsls	r2, r3, #15
 80435d4:	d40c      	bmi.n	80435f0 <FLASH_WaitForLastOperation+0x34>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80435d6:	68e3      	ldr	r3, [r4, #12]
 80435d8:	07db      	lsls	r3, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80435da:	bf44      	itt	mi
 80435dc:	2301      	movmi	r3, #1
 80435de:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80435e0:	68f0      	ldr	r0, [r6, #12]
 80435e2:	f010 00f2 	ands.w	r0, r0, #242	; 0xf2
 80435e6:	d007      	beq.n	80435f8 <FLASH_WaitForLastOperation+0x3c>
    FLASH_SetErrorCode();
 80435e8:	f7ff ff8c 	bl	8043504 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80435ec:	2001      	movs	r0, #1
 80435ee:	e003      	b.n	80435f8 <FLASH_WaitForLastOperation+0x3c>
    if(Timeout != HAL_MAX_DELAY)
 80435f0:	1c69      	adds	r1, r5, #1
 80435f2:	d0ed      	beq.n	80435d0 <FLASH_WaitForLastOperation+0x14>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80435f4:	b90d      	cbnz	r5, 80435fa <FLASH_WaitForLastOperation+0x3e>
        return HAL_TIMEOUT;
 80435f6:	2003      	movs	r0, #3
}  
 80435f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80435fa:	f7ff fcef 	bl	8042fdc <HAL_GetTick>
 80435fe:	1bc0      	subs	r0, r0, r7
 8043600:	42a8      	cmp	r0, r5
 8043602:	d9e5      	bls.n	80435d0 <FLASH_WaitForLastOperation+0x14>
 8043604:	e7f7      	b.n	80435f6 <FLASH_WaitForLastOperation+0x3a>
 8043606:	bf00      	nop
 8043608:	2000bcf4 	.word	0x2000bcf4
 804360c:	40023c00 	.word	0x40023c00

08043610 <HAL_FLASH_Program>:
{
 8043610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8043614:	4d1f      	ldr	r5, [pc, #124]	; (8043694 <HAL_FLASH_Program+0x84>)
{
 8043616:	4698      	mov	r8, r3
  __HAL_LOCK(&pFlash);
 8043618:	7e2b      	ldrb	r3, [r5, #24]
 804361a:	2b01      	cmp	r3, #1
{
 804361c:	4607      	mov	r7, r0
 804361e:	460e      	mov	r6, r1
 8043620:	4614      	mov	r4, r2
  __HAL_LOCK(&pFlash);
 8043622:	d035      	beq.n	8043690 <HAL_FLASH_Program+0x80>
 8043624:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8043626:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 804362a:	762b      	strb	r3, [r5, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 804362c:	f7ff ffc6 	bl	80435bc <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8043630:	b9b0      	cbnz	r0, 8043660 <HAL_FLASH_Program+0x50>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8043632:	b9cf      	cbnz	r7, 8043668 <HAL_FLASH_Program+0x58>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8043634:	4b18      	ldr	r3, [pc, #96]	; (8043698 <HAL_FLASH_Program+0x88>)
 8043636:	691a      	ldr	r2, [r3, #16]
 8043638:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 804363c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 804363e:	691a      	ldr	r2, [r3, #16]
 8043640:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8043642:	691a      	ldr	r2, [r3, #16]
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8043644:	b2e4      	uxtb	r4, r4
  FLASH->CR |= FLASH_CR_PG;
 8043646:	f042 0201 	orr.w	r2, r2, #1
 804364a:	611a      	str	r2, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 804364c:	7034      	strb	r4, [r6, #0]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 804364e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8043652:	f7ff ffb3 	bl	80435bc <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 8043656:	4a10      	ldr	r2, [pc, #64]	; (8043698 <HAL_FLASH_Program+0x88>)
 8043658:	6913      	ldr	r3, [r2, #16]
 804365a:	f023 0301 	bic.w	r3, r3, #1
 804365e:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8043660:	2300      	movs	r3, #0
 8043662:	762b      	strb	r3, [r5, #24]
}
 8043664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8043668:	2f01      	cmp	r7, #1
 804366a:	d104      	bne.n	8043676 <HAL_FLASH_Program+0x66>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 804366c:	b2a1      	uxth	r1, r4
 804366e:	4630      	mov	r0, r6
 8043670:	f7ff ff36 	bl	80434e0 <FLASH_Program_HalfWord>
 8043674:	e7eb      	b.n	804364e <HAL_FLASH_Program+0x3e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8043676:	2f02      	cmp	r7, #2
 8043678:	d104      	bne.n	8043684 <HAL_FLASH_Program+0x74>
      FLASH_Program_Word(Address, (uint32_t) Data);
 804367a:	4621      	mov	r1, r4
 804367c:	4630      	mov	r0, r6
 804367e:	f7ff ff1d 	bl	80434bc <FLASH_Program_Word>
 8043682:	e7e4      	b.n	804364e <HAL_FLASH_Program+0x3e>
      FLASH_Program_DoubleWord(Address, Data);
 8043684:	4622      	mov	r2, r4
 8043686:	4643      	mov	r3, r8
 8043688:	4630      	mov	r0, r6
 804368a:	f7ff ff01 	bl	8043490 <FLASH_Program_DoubleWord>
 804368e:	e7de      	b.n	804364e <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
 8043690:	2002      	movs	r0, #2
 8043692:	e7e7      	b.n	8043664 <HAL_FLASH_Program+0x54>
 8043694:	2000bcf4 	.word	0x2000bcf4
 8043698:	40023c00 	.word	0x40023c00

0804369c <FLASH_MassErase.isra.0>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 804369c:	4b07      	ldr	r3, [pc, #28]	; (80436bc <FLASH_MassErase.isra.0+0x20>)
 804369e:	691a      	ldr	r2, [r3, #16]
 80436a0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80436a4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 80436a6:	691a      	ldr	r2, [r3, #16]
 80436a8:	f042 0204 	orr.w	r2, r2, #4
 80436ac:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 80436ae:	691a      	ldr	r2, [r3, #16]
 80436b0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80436b4:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 80436b8:	6118      	str	r0, [r3, #16]
}
 80436ba:	4770      	bx	lr
 80436bc:	40023c00 	.word	0x40023c00

080436c0 <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80436c0:	b139      	cbz	r1, 80436d2 <FLASH_Erase_Sector+0x12>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80436c2:	2901      	cmp	r1, #1
 80436c4:	d01c      	beq.n	8043700 <FLASH_Erase_Sector+0x40>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80436c6:	2902      	cmp	r1, #2
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80436c8:	bf0c      	ite	eq
 80436ca:	f44f 7100 	moveq.w	r1, #512	; 0x200
 80436ce:	f44f 7140 	movne.w	r1, #768	; 0x300
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80436d2:	4b0d      	ldr	r3, [pc, #52]	; (8043708 <FLASH_Erase_Sector+0x48>)
 80436d4:	691a      	ldr	r2, [r3, #16]
 80436d6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80436da:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 80436dc:	691a      	ldr	r2, [r3, #16]
 80436de:	4311      	orrs	r1, r2
 80436e0:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80436e2:	691a      	ldr	r2, [r3, #16]
 80436e4:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80436e8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80436ea:	691a      	ldr	r2, [r3, #16]
 80436ec:	f042 0202 	orr.w	r2, r2, #2
 80436f0:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 80436f4:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80436f6:	691a      	ldr	r2, [r3, #16]
 80436f8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80436fc:	611a      	str	r2, [r3, #16]
}
 80436fe:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8043700:	f44f 7180 	mov.w	r1, #256	; 0x100
 8043704:	e7e5      	b.n	80436d2 <FLASH_Erase_Sector+0x12>
 8043706:	bf00      	nop
 8043708:	40023c00 	.word	0x40023c00

0804370c <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 804370c:	4b14      	ldr	r3, [pc, #80]	; (8043760 <FLASH_FlushCaches+0x54>)
 804370e:	681a      	ldr	r2, [r3, #0]
 8043710:	0591      	lsls	r1, r2, #22
 8043712:	d50f      	bpl.n	8043734 <FLASH_FlushCaches+0x28>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8043714:	681a      	ldr	r2, [r3, #0]
 8043716:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 804371a:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 804371c:	681a      	ldr	r2, [r3, #0]
 804371e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8043722:	601a      	str	r2, [r3, #0]
 8043724:	681a      	ldr	r2, [r3, #0]
 8043726:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 804372a:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 804372c:	681a      	ldr	r2, [r3, #0]
 804372e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8043732:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8043734:	4b0a      	ldr	r3, [pc, #40]	; (8043760 <FLASH_FlushCaches+0x54>)
 8043736:	681a      	ldr	r2, [r3, #0]
 8043738:	0552      	lsls	r2, r2, #21
 804373a:	d50f      	bpl.n	804375c <FLASH_FlushCaches+0x50>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 804373c:	681a      	ldr	r2, [r3, #0]
 804373e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8043742:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8043744:	681a      	ldr	r2, [r3, #0]
 8043746:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 804374a:	601a      	str	r2, [r3, #0]
 804374c:	681a      	ldr	r2, [r3, #0]
 804374e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8043752:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8043754:	681a      	ldr	r2, [r3, #0]
 8043756:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 804375a:	601a      	str	r2, [r3, #0]
  }
}
 804375c:	4770      	bx	lr
 804375e:	bf00      	nop
 8043760:	40023c00 	.word	0x40023c00

08043764 <HAL_FLASHEx_Erase>:
{
 8043764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8043768:	4e23      	ldr	r6, [pc, #140]	; (80437f8 <HAL_FLASHEx_Erase+0x94>)
 804376a:	7e33      	ldrb	r3, [r6, #24]
 804376c:	2b01      	cmp	r3, #1
{
 804376e:	4604      	mov	r4, r0
 8043770:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8043772:	d03f      	beq.n	80437f4 <HAL_FLASHEx_Erase+0x90>
 8043774:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8043776:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 804377a:	7633      	strb	r3, [r6, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 804377c:	f7ff ff1e 	bl	80435bc <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8043780:	4605      	mov	r5, r0
 8043782:	b9a8      	cbnz	r0, 80437b0 <HAL_FLASHEx_Erase+0x4c>
    *SectorError = 0xFFFFFFFFU;
 8043784:	f04f 33ff 	mov.w	r3, #4294967295
 8043788:	f8c8 3000 	str.w	r3, [r8]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 804378c:	6823      	ldr	r3, [r4, #0]
 804378e:	2b01      	cmp	r3, #1
 8043790:	d113      	bne.n	80437ba <HAL_FLASHEx_Erase+0x56>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8043792:	7c20      	ldrb	r0, [r4, #16]
 8043794:	f7ff ff82 	bl	804369c <FLASH_MassErase.isra.0>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8043798:	f24c 3050 	movw	r0, #50000	; 0xc350
 804379c:	f7ff ff0e 	bl	80435bc <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 80437a0:	4a16      	ldr	r2, [pc, #88]	; (80437fc <HAL_FLASHEx_Erase+0x98>)
 80437a2:	6913      	ldr	r3, [r2, #16]
 80437a4:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80437a8:	4605      	mov	r5, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 80437aa:	6113      	str	r3, [r2, #16]
    FLASH_FlushCaches();    
 80437ac:	f7ff ffae 	bl	804370c <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 80437b0:	2300      	movs	r3, #0
 80437b2:	7633      	strb	r3, [r6, #24]
}
 80437b4:	4628      	mov	r0, r5
 80437b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80437ba:	68a7      	ldr	r7, [r4, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80437bc:	f8df 903c 	ldr.w	r9, [pc, #60]	; 80437fc <HAL_FLASHEx_Erase+0x98>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80437c0:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80437c4:	4413      	add	r3, r2
 80437c6:	42bb      	cmp	r3, r7
 80437c8:	d9f0      	bls.n	80437ac <HAL_FLASHEx_Erase+0x48>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80437ca:	7c21      	ldrb	r1, [r4, #16]
 80437cc:	4638      	mov	r0, r7
 80437ce:	f7ff ff77 	bl	80436c0 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80437d2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80437d6:	f7ff fef1 	bl	80435bc <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80437da:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80437de:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80437e2:	f8c9 3010 	str.w	r3, [r9, #16]
        if(status != HAL_OK) 
 80437e6:	b118      	cbz	r0, 80437f0 <HAL_FLASHEx_Erase+0x8c>
          *SectorError = index;
 80437e8:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80437ec:	4605      	mov	r5, r0
          break;
 80437ee:	e7dd      	b.n	80437ac <HAL_FLASHEx_Erase+0x48>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80437f0:	3701      	adds	r7, #1
 80437f2:	e7e5      	b.n	80437c0 <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 80437f4:	2502      	movs	r5, #2
 80437f6:	e7dd      	b.n	80437b4 <HAL_FLASHEx_Erase+0x50>
 80437f8:	2000bcf4 	.word	0x2000bcf4
 80437fc:	40023c00 	.word	0x40023c00

08043800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8043800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8043804:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8043806:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8043808:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80439b8 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 804380c:	4a68      	ldr	r2, [pc, #416]	; (80439b0 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 804380e:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80439bc <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8043812:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8043814:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8043816:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8043818:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 804381a:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 804381c:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 804381e:	42ac      	cmp	r4, r5
 8043820:	f040 80b0 	bne.w	8043984 <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8043824:	684c      	ldr	r4, [r1, #4]
 8043826:	f024 0c10 	bic.w	ip, r4, #16
 804382a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 804382e:	2603      	movs	r6, #3
 8043830:	f10c 37ff 	add.w	r7, ip, #4294967295
 8043834:	fa06 f60e 	lsl.w	r6, r6, lr
 8043838:	2f01      	cmp	r7, #1
 804383a:	ea6f 0606 	mvn.w	r6, r6
 804383e:	d811      	bhi.n	8043864 <HAL_GPIO_Init+0x64>
        temp = GPIOx->OSPEEDR; 
 8043840:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8043842:	ea07 0a06 	and.w	sl, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8043846:	68cf      	ldr	r7, [r1, #12]
 8043848:	fa07 f70e 	lsl.w	r7, r7, lr
 804384c:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8043850:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8043852:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8043854:	ea27 0a05 	bic.w	sl, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8043858:	f3c4 1700 	ubfx	r7, r4, #4, #1
 804385c:	409f      	lsls	r7, r3
 804385e:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8043862:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8043864:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8043866:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 804386a:	688f      	ldr	r7, [r1, #8]
 804386c:	fa07 f70e 	lsl.w	r7, r7, lr
 8043870:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8043874:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8043878:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 804387a:	d116      	bne.n	80438aa <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 804387c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8043880:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8043884:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8043888:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 804388c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8043890:	f04f 0c0f 	mov.w	ip, #15
 8043894:	fa0c fc0b 	lsl.w	ip, ip, fp
 8043898:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 804389c:	690f      	ldr	r7, [r1, #16]
 804389e:	fa07 f70b 	lsl.w	r7, r7, fp
 80438a2:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 80438a6:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 80438aa:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80438ac:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80438ae:	f004 0703 	and.w	r7, r4, #3
 80438b2:	fa07 fe0e 	lsl.w	lr, r7, lr
 80438b6:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 80438ba:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80438bc:	00e6      	lsls	r6, r4, #3
 80438be:	d561      	bpl.n	8043984 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80438c0:	f04f 0b00 	mov.w	fp, #0
 80438c4:	f8cd b00c 	str.w	fp, [sp, #12]
 80438c8:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80438cc:	4e39      	ldr	r6, [pc, #228]	; (80439b4 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80438ce:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80438d2:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80438d6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80438da:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80438de:	9703      	str	r7, [sp, #12]
 80438e0:	9f03      	ldr	r7, [sp, #12]
 80438e2:	f023 0703 	bic.w	r7, r3, #3
 80438e6:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80438ea:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80438ee:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80438f2:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80438f6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80438fa:	f04f 0c0f 	mov.w	ip, #15
 80438fe:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8043902:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8043904:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8043908:	d043      	beq.n	8043992 <HAL_GPIO_Init+0x192>
 804390a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 804390e:	42b0      	cmp	r0, r6
 8043910:	d041      	beq.n	8043996 <HAL_GPIO_Init+0x196>
 8043912:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8043916:	42b0      	cmp	r0, r6
 8043918:	d03f      	beq.n	804399a <HAL_GPIO_Init+0x19a>
 804391a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 804391e:	42b0      	cmp	r0, r6
 8043920:	d03d      	beq.n	804399e <HAL_GPIO_Init+0x19e>
 8043922:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8043926:	42b0      	cmp	r0, r6
 8043928:	d03b      	beq.n	80439a2 <HAL_GPIO_Init+0x1a2>
 804392a:	4548      	cmp	r0, r9
 804392c:	d03b      	beq.n	80439a6 <HAL_GPIO_Init+0x1a6>
 804392e:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8043932:	42b0      	cmp	r0, r6
 8043934:	d039      	beq.n	80439aa <HAL_GPIO_Init+0x1aa>
 8043936:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 804393a:	42b0      	cmp	r0, r6
 804393c:	bf14      	ite	ne
 804393e:	2608      	movne	r6, #8
 8043940:	2607      	moveq	r6, #7
 8043942:	fa06 f60e 	lsl.w	r6, r6, lr
 8043946:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 804394a:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 804394c:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 804394e:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8043950:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8043954:	bf0c      	ite	eq
 8043956:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8043958:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 804395a:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 804395c:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 804395e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8043962:	bf0c      	ite	eq
 8043964:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8043966:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8043968:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 804396a:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 804396c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8043970:	bf0c      	ite	eq
 8043972:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8043974:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8043976:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8043978:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 804397a:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 804397c:	bf54      	ite	pl
 804397e:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8043980:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8043982:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8043984:	3301      	adds	r3, #1
 8043986:	2b10      	cmp	r3, #16
 8043988:	f47f af45 	bne.w	8043816 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 804398c:	b005      	add	sp, #20
 804398e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8043992:	465e      	mov	r6, fp
 8043994:	e7d5      	b.n	8043942 <HAL_GPIO_Init+0x142>
 8043996:	2601      	movs	r6, #1
 8043998:	e7d3      	b.n	8043942 <HAL_GPIO_Init+0x142>
 804399a:	2602      	movs	r6, #2
 804399c:	e7d1      	b.n	8043942 <HAL_GPIO_Init+0x142>
 804399e:	2603      	movs	r6, #3
 80439a0:	e7cf      	b.n	8043942 <HAL_GPIO_Init+0x142>
 80439a2:	2604      	movs	r6, #4
 80439a4:	e7cd      	b.n	8043942 <HAL_GPIO_Init+0x142>
 80439a6:	2605      	movs	r6, #5
 80439a8:	e7cb      	b.n	8043942 <HAL_GPIO_Init+0x142>
 80439aa:	2606      	movs	r6, #6
 80439ac:	e7c9      	b.n	8043942 <HAL_GPIO_Init+0x142>
 80439ae:	bf00      	nop
 80439b0:	40013c00 	.word	0x40013c00
 80439b4:	40020000 	.word	0x40020000
 80439b8:	40023800 	.word	0x40023800
 80439bc:	40021400 	.word	0x40021400

080439c0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80439c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80439c4:	4d40      	ldr	r5, [pc, #256]	; (8043ac8 <HAL_GPIO_DeInit+0x108>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80439c6:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8043ad0 <HAL_GPIO_DeInit+0x110>
 80439ca:	f8df a108 	ldr.w	sl, [pc, #264]	; 8043ad4 <HAL_GPIO_DeInit+0x114>
 80439ce:	f8df b108 	ldr.w	fp, [pc, #264]	; 8043ad8 <HAL_GPIO_DeInit+0x118>
  for(position = 0U; position < GPIO_NUMBER; position++)
 80439d2:	2200      	movs	r2, #0
    ioposition = 0x01U << position;
 80439d4:	2301      	movs	r3, #1
 80439d6:	fa03 fe02 	lsl.w	lr, r3, r2
    iocurrent = (GPIO_Pin) & ioposition;
 80439da:	ea0e 0401 	and.w	r4, lr, r1
    if(iocurrent == ioposition)
 80439de:	45a6      	cmp	lr, r4
 80439e0:	d15f      	bne.n	8043aa2 <HAL_GPIO_DeInit+0xe2>
 80439e2:	f022 0603 	bic.w	r6, r2, #3
 80439e6:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80439ea:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80439ee:	f002 0c03 	and.w	ip, r2, #3
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80439f2:	4b36      	ldr	r3, [pc, #216]	; (8043acc <HAL_GPIO_DeInit+0x10c>)
      tmp = SYSCFG->EXTICR[position >> 2U];
 80439f4:	f8d6 8008 	ldr.w	r8, [r6, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80439f8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80439fc:	270f      	movs	r7, #15
 80439fe:	fa07 f70c 	lsl.w	r7, r7, ip
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8043a02:	4298      	cmp	r0, r3
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8043a04:	ea07 0808 	and.w	r8, r7, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8043a08:	d050      	beq.n	8043aac <HAL_GPIO_DeInit+0xec>
 8043a0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8043a0e:	4298      	cmp	r0, r3
 8043a10:	d04e      	beq.n	8043ab0 <HAL_GPIO_DeInit+0xf0>
 8043a12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8043a16:	4298      	cmp	r0, r3
 8043a18:	d04c      	beq.n	8043ab4 <HAL_GPIO_DeInit+0xf4>
 8043a1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8043a1e:	4298      	cmp	r0, r3
 8043a20:	d04a      	beq.n	8043ab8 <HAL_GPIO_DeInit+0xf8>
 8043a22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8043a26:	4298      	cmp	r0, r3
 8043a28:	d048      	beq.n	8043abc <HAL_GPIO_DeInit+0xfc>
 8043a2a:	4548      	cmp	r0, r9
 8043a2c:	d048      	beq.n	8043ac0 <HAL_GPIO_DeInit+0x100>
 8043a2e:	4550      	cmp	r0, sl
 8043a30:	d048      	beq.n	8043ac4 <HAL_GPIO_DeInit+0x104>
 8043a32:	4558      	cmp	r0, fp
 8043a34:	bf0c      	ite	eq
 8043a36:	2307      	moveq	r3, #7
 8043a38:	2308      	movne	r3, #8
 8043a3a:	fa03 f30c 	lsl.w	r3, r3, ip
 8043a3e:	4543      	cmp	r3, r8
 8043a40:	d110      	bne.n	8043a64 <HAL_GPIO_DeInit+0xa4>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8043a42:	682b      	ldr	r3, [r5, #0]
 8043a44:	43e4      	mvns	r4, r4
 8043a46:	4023      	ands	r3, r4
 8043a48:	602b      	str	r3, [r5, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8043a4a:	686b      	ldr	r3, [r5, #4]
 8043a4c:	4023      	ands	r3, r4
 8043a4e:	606b      	str	r3, [r5, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8043a50:	68ab      	ldr	r3, [r5, #8]
 8043a52:	4023      	ands	r3, r4
 8043a54:	60ab      	str	r3, [r5, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8043a56:	68eb      	ldr	r3, [r5, #12]
 8043a58:	401c      	ands	r4, r3
 8043a5a:	60ec      	str	r4, [r5, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8043a5c:	68b3      	ldr	r3, [r6, #8]
 8043a5e:	ea23 0707 	bic.w	r7, r3, r7
 8043a62:	60b7      	str	r7, [r6, #8]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8043a64:	0056      	lsls	r6, r2, #1
 8043a66:	2303      	movs	r3, #3
 8043a68:	6804      	ldr	r4, [r0, #0]
 8043a6a:	40b3      	lsls	r3, r6
 8043a6c:	43db      	mvns	r3, r3
 8043a6e:	401c      	ands	r4, r3
 8043a70:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8043a72:	08d4      	lsrs	r4, r2, #3
 8043a74:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8043a78:	f002 0c07 	and.w	ip, r2, #7
 8043a7c:	6a26      	ldr	r6, [r4, #32]
 8043a7e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8043a82:	270f      	movs	r7, #15
 8043a84:	fa07 f70c 	lsl.w	r7, r7, ip
 8043a88:	ea26 0707 	bic.w	r7, r6, r7
 8043a8c:	6227      	str	r7, [r4, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8043a8e:	68c4      	ldr	r4, [r0, #12]
 8043a90:	401c      	ands	r4, r3
 8043a92:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8043a94:	6844      	ldr	r4, [r0, #4]
 8043a96:	ea24 040e 	bic.w	r4, r4, lr
 8043a9a:	6044      	str	r4, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8043a9c:	6884      	ldr	r4, [r0, #8]
 8043a9e:	4023      	ands	r3, r4
 8043aa0:	6083      	str	r3, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8043aa2:	3201      	adds	r2, #1
 8043aa4:	2a10      	cmp	r2, #16
 8043aa6:	d195      	bne.n	80439d4 <HAL_GPIO_DeInit+0x14>
    }
  }
}
 8043aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8043aac:	2300      	movs	r3, #0
 8043aae:	e7c4      	b.n	8043a3a <HAL_GPIO_DeInit+0x7a>
 8043ab0:	2301      	movs	r3, #1
 8043ab2:	e7c2      	b.n	8043a3a <HAL_GPIO_DeInit+0x7a>
 8043ab4:	2302      	movs	r3, #2
 8043ab6:	e7c0      	b.n	8043a3a <HAL_GPIO_DeInit+0x7a>
 8043ab8:	2303      	movs	r3, #3
 8043aba:	e7be      	b.n	8043a3a <HAL_GPIO_DeInit+0x7a>
 8043abc:	2304      	movs	r3, #4
 8043abe:	e7bc      	b.n	8043a3a <HAL_GPIO_DeInit+0x7a>
 8043ac0:	2305      	movs	r3, #5
 8043ac2:	e7ba      	b.n	8043a3a <HAL_GPIO_DeInit+0x7a>
 8043ac4:	2306      	movs	r3, #6
 8043ac6:	e7b8      	b.n	8043a3a <HAL_GPIO_DeInit+0x7a>
 8043ac8:	40013c00 	.word	0x40013c00
 8043acc:	40020000 	.word	0x40020000
 8043ad0:	40021400 	.word	0x40021400
 8043ad4:	40021800 	.word	0x40021800
 8043ad8:	40021c00 	.word	0x40021c00

08043adc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8043adc:	6903      	ldr	r3, [r0, #16]
 8043ade:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8043ae0:	bf14      	ite	ne
 8043ae2:	2001      	movne	r0, #1
 8043ae4:	2000      	moveq	r0, #0
 8043ae6:	4770      	bx	lr

08043ae8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8043ae8:	b10a      	cbz	r2, 8043aee <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8043aea:	6181      	str	r1, [r0, #24]
  }
}
 8043aec:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8043aee:	0409      	lsls	r1, r1, #16
 8043af0:	e7fb      	b.n	8043aea <HAL_GPIO_WritePin+0x2>
	...

08043af4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8043af4:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8043af6:	4b04      	ldr	r3, [pc, #16]	; (8043b08 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8043af8:	6959      	ldr	r1, [r3, #20]
 8043afa:	4201      	tst	r1, r0
 8043afc:	d002      	beq.n	8043b04 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8043afe:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8043b00:	f008 f986 	bl	804be10 <HAL_GPIO_EXTI_Callback>
  }
}
 8043b04:	bd08      	pop	{r3, pc}
 8043b06:	bf00      	nop
 8043b08:	40013c00 	.word	0x40013c00

08043b0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8043b0c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8043b10:	4604      	mov	r4, r0
 8043b12:	b908      	cbnz	r0, 8043b18 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8043b14:	2001      	movs	r0, #1
 8043b16:	e03f      	b.n	8043b98 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8043b18:	6803      	ldr	r3, [r0, #0]
 8043b1a:	07dd      	lsls	r5, r3, #31
 8043b1c:	d410      	bmi.n	8043b40 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8043b1e:	6823      	ldr	r3, [r4, #0]
 8043b20:	0798      	lsls	r0, r3, #30
 8043b22:	d45a      	bmi.n	8043bda <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8043b24:	6823      	ldr	r3, [r4, #0]
 8043b26:	071a      	lsls	r2, r3, #28
 8043b28:	f100 809c 	bmi.w	8043c64 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8043b2c:	6823      	ldr	r3, [r4, #0]
 8043b2e:	075b      	lsls	r3, r3, #29
 8043b30:	f100 80ba 	bmi.w	8043ca8 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8043b34:	69a0      	ldr	r0, [r4, #24]
 8043b36:	2800      	cmp	r0, #0
 8043b38:	f040 811b 	bne.w	8043d72 <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8043b3c:	2000      	movs	r0, #0
 8043b3e:	e02b      	b.n	8043b98 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8043b40:	4ba7      	ldr	r3, [pc, #668]	; (8043de0 <HAL_RCC_OscConfig+0x2d4>)
 8043b42:	689a      	ldr	r2, [r3, #8]
 8043b44:	f002 020c 	and.w	r2, r2, #12
 8043b48:	2a04      	cmp	r2, #4
 8043b4a:	d007      	beq.n	8043b5c <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8043b4c:	689a      	ldr	r2, [r3, #8]
 8043b4e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8043b52:	2a08      	cmp	r2, #8
 8043b54:	d10a      	bne.n	8043b6c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8043b56:	685b      	ldr	r3, [r3, #4]
 8043b58:	0259      	lsls	r1, r3, #9
 8043b5a:	d507      	bpl.n	8043b6c <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8043b5c:	4ba0      	ldr	r3, [pc, #640]	; (8043de0 <HAL_RCC_OscConfig+0x2d4>)
 8043b5e:	681b      	ldr	r3, [r3, #0]
 8043b60:	039a      	lsls	r2, r3, #14
 8043b62:	d5dc      	bpl.n	8043b1e <HAL_RCC_OscConfig+0x12>
 8043b64:	6863      	ldr	r3, [r4, #4]
 8043b66:	2b00      	cmp	r3, #0
 8043b68:	d1d9      	bne.n	8043b1e <HAL_RCC_OscConfig+0x12>
 8043b6a:	e7d3      	b.n	8043b14 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8043b6c:	6863      	ldr	r3, [r4, #4]
 8043b6e:	4d9c      	ldr	r5, [pc, #624]	; (8043de0 <HAL_RCC_OscConfig+0x2d4>)
 8043b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8043b74:	d113      	bne.n	8043b9e <HAL_RCC_OscConfig+0x92>
 8043b76:	682b      	ldr	r3, [r5, #0]
 8043b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8043b7c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8043b7e:	f7ff fa2d 	bl	8042fdc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8043b82:	4d97      	ldr	r5, [pc, #604]	; (8043de0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8043b84:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8043b86:	682b      	ldr	r3, [r5, #0]
 8043b88:	039b      	lsls	r3, r3, #14
 8043b8a:	d4c8      	bmi.n	8043b1e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8043b8c:	f7ff fa26 	bl	8042fdc <HAL_GetTick>
 8043b90:	1b80      	subs	r0, r0, r6
 8043b92:	2864      	cmp	r0, #100	; 0x64
 8043b94:	d9f7      	bls.n	8043b86 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8043b96:	2003      	movs	r0, #3
}
 8043b98:	b002      	add	sp, #8
 8043b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8043b9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8043ba2:	d104      	bne.n	8043bae <HAL_RCC_OscConfig+0xa2>
 8043ba4:	682b      	ldr	r3, [r5, #0]
 8043ba6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8043baa:	602b      	str	r3, [r5, #0]
 8043bac:	e7e3      	b.n	8043b76 <HAL_RCC_OscConfig+0x6a>
 8043bae:	682a      	ldr	r2, [r5, #0]
 8043bb0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8043bb4:	602a      	str	r2, [r5, #0]
 8043bb6:	682a      	ldr	r2, [r5, #0]
 8043bb8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8043bbc:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8043bbe:	2b00      	cmp	r3, #0
 8043bc0:	d1dd      	bne.n	8043b7e <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8043bc2:	f7ff fa0b 	bl	8042fdc <HAL_GetTick>
 8043bc6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8043bc8:	682b      	ldr	r3, [r5, #0]
 8043bca:	039f      	lsls	r7, r3, #14
 8043bcc:	d5a7      	bpl.n	8043b1e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8043bce:	f7ff fa05 	bl	8042fdc <HAL_GetTick>
 8043bd2:	1b80      	subs	r0, r0, r6
 8043bd4:	2864      	cmp	r0, #100	; 0x64
 8043bd6:	d9f7      	bls.n	8043bc8 <HAL_RCC_OscConfig+0xbc>
 8043bd8:	e7dd      	b.n	8043b96 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8043bda:	4b81      	ldr	r3, [pc, #516]	; (8043de0 <HAL_RCC_OscConfig+0x2d4>)
 8043bdc:	689a      	ldr	r2, [r3, #8]
 8043bde:	f012 0f0c 	tst.w	r2, #12
 8043be2:	d007      	beq.n	8043bf4 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8043be4:	689a      	ldr	r2, [r3, #8]
 8043be6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8043bea:	2a08      	cmp	r2, #8
 8043bec:	d111      	bne.n	8043c12 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8043bee:	685b      	ldr	r3, [r3, #4]
 8043bf0:	025e      	lsls	r6, r3, #9
 8043bf2:	d40e      	bmi.n	8043c12 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8043bf4:	4b7a      	ldr	r3, [pc, #488]	; (8043de0 <HAL_RCC_OscConfig+0x2d4>)
 8043bf6:	681a      	ldr	r2, [r3, #0]
 8043bf8:	0795      	lsls	r5, r2, #30
 8043bfa:	d502      	bpl.n	8043c02 <HAL_RCC_OscConfig+0xf6>
 8043bfc:	68e2      	ldr	r2, [r4, #12]
 8043bfe:	2a01      	cmp	r2, #1
 8043c00:	d188      	bne.n	8043b14 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8043c02:	681a      	ldr	r2, [r3, #0]
 8043c04:	6921      	ldr	r1, [r4, #16]
 8043c06:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8043c0a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8043c0e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8043c10:	e788      	b.n	8043b24 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8043c12:	68e2      	ldr	r2, [r4, #12]
 8043c14:	4b73      	ldr	r3, [pc, #460]	; (8043de4 <HAL_RCC_OscConfig+0x2d8>)
 8043c16:	b1b2      	cbz	r2, 8043c46 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8043c18:	2201      	movs	r2, #1
 8043c1a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8043c1c:	f7ff f9de 	bl	8042fdc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8043c20:	4d6f      	ldr	r5, [pc, #444]	; (8043de0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8043c22:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8043c24:	682b      	ldr	r3, [r5, #0]
 8043c26:	0798      	lsls	r0, r3, #30
 8043c28:	d507      	bpl.n	8043c3a <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8043c2a:	682b      	ldr	r3, [r5, #0]
 8043c2c:	6922      	ldr	r2, [r4, #16]
 8043c2e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8043c32:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8043c36:	602b      	str	r3, [r5, #0]
 8043c38:	e774      	b.n	8043b24 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8043c3a:	f7ff f9cf 	bl	8042fdc <HAL_GetTick>
 8043c3e:	1b80      	subs	r0, r0, r6
 8043c40:	2802      	cmp	r0, #2
 8043c42:	d9ef      	bls.n	8043c24 <HAL_RCC_OscConfig+0x118>
 8043c44:	e7a7      	b.n	8043b96 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8043c46:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8043c48:	f7ff f9c8 	bl	8042fdc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8043c4c:	4d64      	ldr	r5, [pc, #400]	; (8043de0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8043c4e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8043c50:	682b      	ldr	r3, [r5, #0]
 8043c52:	0799      	lsls	r1, r3, #30
 8043c54:	f57f af66 	bpl.w	8043b24 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8043c58:	f7ff f9c0 	bl	8042fdc <HAL_GetTick>
 8043c5c:	1b80      	subs	r0, r0, r6
 8043c5e:	2802      	cmp	r0, #2
 8043c60:	d9f6      	bls.n	8043c50 <HAL_RCC_OscConfig+0x144>
 8043c62:	e798      	b.n	8043b96 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8043c64:	6962      	ldr	r2, [r4, #20]
 8043c66:	4b60      	ldr	r3, [pc, #384]	; (8043de8 <HAL_RCC_OscConfig+0x2dc>)
 8043c68:	b17a      	cbz	r2, 8043c8a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8043c6a:	2201      	movs	r2, #1
 8043c6c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8043c6e:	f7ff f9b5 	bl	8042fdc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8043c72:	4d5b      	ldr	r5, [pc, #364]	; (8043de0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8043c74:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8043c76:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8043c78:	079f      	lsls	r7, r3, #30
 8043c7a:	f53f af57 	bmi.w	8043b2c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8043c7e:	f7ff f9ad 	bl	8042fdc <HAL_GetTick>
 8043c82:	1b80      	subs	r0, r0, r6
 8043c84:	2802      	cmp	r0, #2
 8043c86:	d9f6      	bls.n	8043c76 <HAL_RCC_OscConfig+0x16a>
 8043c88:	e785      	b.n	8043b96 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8043c8a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8043c8c:	f7ff f9a6 	bl	8042fdc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8043c90:	4d53      	ldr	r5, [pc, #332]	; (8043de0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8043c92:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8043c94:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8043c96:	0798      	lsls	r0, r3, #30
 8043c98:	f57f af48 	bpl.w	8043b2c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8043c9c:	f7ff f99e 	bl	8042fdc <HAL_GetTick>
 8043ca0:	1b80      	subs	r0, r0, r6
 8043ca2:	2802      	cmp	r0, #2
 8043ca4:	d9f6      	bls.n	8043c94 <HAL_RCC_OscConfig+0x188>
 8043ca6:	e776      	b.n	8043b96 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8043ca8:	4b4d      	ldr	r3, [pc, #308]	; (8043de0 <HAL_RCC_OscConfig+0x2d4>)
 8043caa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8043cac:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8043cb0:	d128      	bne.n	8043d04 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8043cb2:	9201      	str	r2, [sp, #4]
 8043cb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8043cb6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8043cba:	641a      	str	r2, [r3, #64]	; 0x40
 8043cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8043cc2:	9301      	str	r3, [sp, #4]
 8043cc4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8043cc6:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8043cc8:	4d48      	ldr	r5, [pc, #288]	; (8043dec <HAL_RCC_OscConfig+0x2e0>)
 8043cca:	682b      	ldr	r3, [r5, #0]
 8043ccc:	05d9      	lsls	r1, r3, #23
 8043cce:	d51b      	bpl.n	8043d08 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8043cd0:	68a3      	ldr	r3, [r4, #8]
 8043cd2:	4d43      	ldr	r5, [pc, #268]	; (8043de0 <HAL_RCC_OscConfig+0x2d4>)
 8043cd4:	2b01      	cmp	r3, #1
 8043cd6:	d127      	bne.n	8043d28 <HAL_RCC_OscConfig+0x21c>
 8043cd8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8043cda:	f043 0301 	orr.w	r3, r3, #1
 8043cde:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8043ce0:	f7ff f97c 	bl	8042fdc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8043ce4:	4d3e      	ldr	r5, [pc, #248]	; (8043de0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8043ce6:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8043ce8:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8043cec:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8043cee:	079b      	lsls	r3, r3, #30
 8043cf0:	d539      	bpl.n	8043d66 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8043cf2:	2e00      	cmp	r6, #0
 8043cf4:	f43f af1e 	beq.w	8043b34 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8043cf8:	4a39      	ldr	r2, [pc, #228]	; (8043de0 <HAL_RCC_OscConfig+0x2d4>)
 8043cfa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8043cfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8043d00:	6413      	str	r3, [r2, #64]	; 0x40
 8043d02:	e717      	b.n	8043b34 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8043d04:	2600      	movs	r6, #0
 8043d06:	e7df      	b.n	8043cc8 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8043d08:	682b      	ldr	r3, [r5, #0]
 8043d0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8043d0e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8043d10:	f7ff f964 	bl	8042fdc <HAL_GetTick>
 8043d14:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8043d16:	682b      	ldr	r3, [r5, #0]
 8043d18:	05da      	lsls	r2, r3, #23
 8043d1a:	d4d9      	bmi.n	8043cd0 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8043d1c:	f7ff f95e 	bl	8042fdc <HAL_GetTick>
 8043d20:	1bc0      	subs	r0, r0, r7
 8043d22:	2802      	cmp	r0, #2
 8043d24:	d9f7      	bls.n	8043d16 <HAL_RCC_OscConfig+0x20a>
 8043d26:	e736      	b.n	8043b96 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8043d28:	2b05      	cmp	r3, #5
 8043d2a:	d104      	bne.n	8043d36 <HAL_RCC_OscConfig+0x22a>
 8043d2c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8043d2e:	f043 0304 	orr.w	r3, r3, #4
 8043d32:	672b      	str	r3, [r5, #112]	; 0x70
 8043d34:	e7d0      	b.n	8043cd8 <HAL_RCC_OscConfig+0x1cc>
 8043d36:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8043d38:	f022 0201 	bic.w	r2, r2, #1
 8043d3c:	672a      	str	r2, [r5, #112]	; 0x70
 8043d3e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8043d40:	f022 0204 	bic.w	r2, r2, #4
 8043d44:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8043d46:	2b00      	cmp	r3, #0
 8043d48:	d1ca      	bne.n	8043ce0 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8043d4a:	f7ff f947 	bl	8042fdc <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8043d4e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8043d52:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8043d54:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8043d56:	0798      	lsls	r0, r3, #30
 8043d58:	d5cb      	bpl.n	8043cf2 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8043d5a:	f7ff f93f 	bl	8042fdc <HAL_GetTick>
 8043d5e:	1bc0      	subs	r0, r0, r7
 8043d60:	4540      	cmp	r0, r8
 8043d62:	d9f7      	bls.n	8043d54 <HAL_RCC_OscConfig+0x248>
 8043d64:	e717      	b.n	8043b96 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8043d66:	f7ff f939 	bl	8042fdc <HAL_GetTick>
 8043d6a:	1bc0      	subs	r0, r0, r7
 8043d6c:	4540      	cmp	r0, r8
 8043d6e:	d9bd      	bls.n	8043cec <HAL_RCC_OscConfig+0x1e0>
 8043d70:	e711      	b.n	8043b96 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8043d72:	4d1b      	ldr	r5, [pc, #108]	; (8043de0 <HAL_RCC_OscConfig+0x2d4>)
 8043d74:	68ab      	ldr	r3, [r5, #8]
 8043d76:	f003 030c 	and.w	r3, r3, #12
 8043d7a:	2b08      	cmp	r3, #8
 8043d7c:	d047      	beq.n	8043e0e <HAL_RCC_OscConfig+0x302>
 8043d7e:	4e1c      	ldr	r6, [pc, #112]	; (8043df0 <HAL_RCC_OscConfig+0x2e4>)
 8043d80:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8043d82:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8043d84:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8043d86:	d135      	bne.n	8043df4 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8043d88:	f7ff f928 	bl	8042fdc <HAL_GetTick>
 8043d8c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8043d8e:	682b      	ldr	r3, [r5, #0]
 8043d90:	0199      	lsls	r1, r3, #6
 8043d92:	d41e      	bmi.n	8043dd2 <HAL_RCC_OscConfig+0x2c6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8043d94:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8043d98:	4313      	orrs	r3, r2
 8043d9a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8043d9c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8043da0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8043da2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8043da6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8043da8:	4c0d      	ldr	r4, [pc, #52]	; (8043de0 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8043daa:	0852      	lsrs	r2, r2, #1
 8043dac:	3a01      	subs	r2, #1
 8043dae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8043db2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8043db4:	2301      	movs	r3, #1
 8043db6:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8043db8:	f7ff f910 	bl	8042fdc <HAL_GetTick>
 8043dbc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8043dbe:	6823      	ldr	r3, [r4, #0]
 8043dc0:	019a      	lsls	r2, r3, #6
 8043dc2:	f53f aebb 	bmi.w	8043b3c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8043dc6:	f7ff f909 	bl	8042fdc <HAL_GetTick>
 8043dca:	1b40      	subs	r0, r0, r5
 8043dcc:	2802      	cmp	r0, #2
 8043dce:	d9f6      	bls.n	8043dbe <HAL_RCC_OscConfig+0x2b2>
 8043dd0:	e6e1      	b.n	8043b96 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8043dd2:	f7ff f903 	bl	8042fdc <HAL_GetTick>
 8043dd6:	1bc0      	subs	r0, r0, r7
 8043dd8:	2802      	cmp	r0, #2
 8043dda:	d9d8      	bls.n	8043d8e <HAL_RCC_OscConfig+0x282>
 8043ddc:	e6db      	b.n	8043b96 <HAL_RCC_OscConfig+0x8a>
 8043dde:	bf00      	nop
 8043de0:	40023800 	.word	0x40023800
 8043de4:	42470000 	.word	0x42470000
 8043de8:	42470e80 	.word	0x42470e80
 8043dec:	40007000 	.word	0x40007000
 8043df0:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8043df4:	f7ff f8f2 	bl	8042fdc <HAL_GetTick>
 8043df8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8043dfa:	682b      	ldr	r3, [r5, #0]
 8043dfc:	019b      	lsls	r3, r3, #6
 8043dfe:	f57f ae9d 	bpl.w	8043b3c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8043e02:	f7ff f8eb 	bl	8042fdc <HAL_GetTick>
 8043e06:	1b00      	subs	r0, r0, r4
 8043e08:	2802      	cmp	r0, #2
 8043e0a:	d9f6      	bls.n	8043dfa <HAL_RCC_OscConfig+0x2ee>
 8043e0c:	e6c3      	b.n	8043b96 <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8043e0e:	2801      	cmp	r0, #1
 8043e10:	f43f aec2 	beq.w	8043b98 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->PLLCFGR;
 8043e14:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8043e16:	69e3      	ldr	r3, [r4, #28]
 8043e18:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8043e1c:	429a      	cmp	r2, r3
 8043e1e:	f47f ae79 	bne.w	8043b14 <HAL_RCC_OscConfig+0x8>
 8043e22:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8043e24:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8043e28:	4293      	cmp	r3, r2
 8043e2a:	f47f ae73 	bne.w	8043b14 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8043e2e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8043e30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8043e34:	4003      	ands	r3, r0
 8043e36:	4293      	cmp	r3, r2
 8043e38:	f47f ae6c 	bne.w	8043b14 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8043e3c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8043e3e:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8043e42:	4293      	cmp	r3, r2
 8043e44:	f47f ae66 	bne.w	8043b14 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8043e48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8043e4a:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8043e4e:	1ac0      	subs	r0, r0, r3
 8043e50:	bf18      	it	ne
 8043e52:	2001      	movne	r0, #1
 8043e54:	e6a0      	b.n	8043b98 <HAL_RCC_OscConfig+0x8c>
 8043e56:	bf00      	nop

08043e58 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8043e58:	4913      	ldr	r1, [pc, #76]	; (8043ea8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8043e5a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8043e5c:	688b      	ldr	r3, [r1, #8]
 8043e5e:	f003 030c 	and.w	r3, r3, #12
 8043e62:	2b04      	cmp	r3, #4
 8043e64:	d003      	beq.n	8043e6e <HAL_RCC_GetSysClockFreq+0x16>
 8043e66:	2b08      	cmp	r3, #8
 8043e68:	d003      	beq.n	8043e72 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8043e6a:	4810      	ldr	r0, [pc, #64]	; (8043eac <HAL_RCC_GetSysClockFreq+0x54>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 8043e6c:	e000      	b.n	8043e70 <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 8043e6e:	4810      	ldr	r0, [pc, #64]	; (8043eb0 <HAL_RCC_GetSysClockFreq+0x58>)
}
 8043e70:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8043e72:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8043e74:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8043e76:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8043e78:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8043e7c:	bf14      	ite	ne
 8043e7e:	480c      	ldrne	r0, [pc, #48]	; (8043eb0 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8043e80:	480a      	ldreq	r0, [pc, #40]	; (8043eac <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8043e82:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8043e86:	bf18      	it	ne
 8043e88:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8043e8a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8043e8e:	fba1 0100 	umull	r0, r1, r1, r0
 8043e92:	f7fc ffc3 	bl	8040e1c <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8043e96:	4b04      	ldr	r3, [pc, #16]	; (8043ea8 <HAL_RCC_GetSysClockFreq+0x50>)
 8043e98:	685b      	ldr	r3, [r3, #4]
 8043e9a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8043e9e:	3301      	adds	r3, #1
 8043ea0:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8043ea2:	fbb0 f0f3 	udiv	r0, r0, r3
 8043ea6:	e7e3      	b.n	8043e70 <HAL_RCC_GetSysClockFreq+0x18>
 8043ea8:	40023800 	.word	0x40023800
 8043eac:	00f42400 	.word	0x00f42400
 8043eb0:	007a1200 	.word	0x007a1200

08043eb4 <HAL_RCC_ClockConfig>:
{
 8043eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8043eb8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8043eba:	4604      	mov	r4, r0
 8043ebc:	b910      	cbnz	r0, 8043ec4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8043ebe:	2001      	movs	r0, #1
}
 8043ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8043ec4:	4b43      	ldr	r3, [pc, #268]	; (8043fd4 <HAL_RCC_ClockConfig+0x120>)
 8043ec6:	681a      	ldr	r2, [r3, #0]
 8043ec8:	f002 020f 	and.w	r2, r2, #15
 8043ecc:	428a      	cmp	r2, r1
 8043ece:	d328      	bcc.n	8043f22 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8043ed0:	6821      	ldr	r1, [r4, #0]
 8043ed2:	078f      	lsls	r7, r1, #30
 8043ed4:	d42d      	bmi.n	8043f32 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8043ed6:	07c8      	lsls	r0, r1, #31
 8043ed8:	d440      	bmi.n	8043f5c <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8043eda:	4b3e      	ldr	r3, [pc, #248]	; (8043fd4 <HAL_RCC_ClockConfig+0x120>)
 8043edc:	681a      	ldr	r2, [r3, #0]
 8043ede:	f002 020f 	and.w	r2, r2, #15
 8043ee2:	42aa      	cmp	r2, r5
 8043ee4:	d865      	bhi.n	8043fb2 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8043ee6:	6822      	ldr	r2, [r4, #0]
 8043ee8:	0751      	lsls	r1, r2, #29
 8043eea:	d46b      	bmi.n	8043fc4 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8043eec:	0713      	lsls	r3, r2, #28
 8043eee:	d507      	bpl.n	8043f00 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8043ef0:	4a39      	ldr	r2, [pc, #228]	; (8043fd8 <HAL_RCC_ClockConfig+0x124>)
 8043ef2:	6921      	ldr	r1, [r4, #16]
 8043ef4:	6893      	ldr	r3, [r2, #8]
 8043ef6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8043efa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8043efe:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8043f00:	f7ff ffaa 	bl	8043e58 <HAL_RCC_GetSysClockFreq>
 8043f04:	4b34      	ldr	r3, [pc, #208]	; (8043fd8 <HAL_RCC_ClockConfig+0x124>)
 8043f06:	4a35      	ldr	r2, [pc, #212]	; (8043fdc <HAL_RCC_ClockConfig+0x128>)
 8043f08:	689b      	ldr	r3, [r3, #8]
 8043f0a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8043f0e:	5cd3      	ldrb	r3, [r2, r3]
 8043f10:	40d8      	lsrs	r0, r3
 8043f12:	4b33      	ldr	r3, [pc, #204]	; (8043fe0 <HAL_RCC_ClockConfig+0x12c>)
 8043f14:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8043f16:	4b33      	ldr	r3, [pc, #204]	; (8043fe4 <HAL_RCC_ClockConfig+0x130>)
 8043f18:	6818      	ldr	r0, [r3, #0]
 8043f1a:	f007 ff2b 	bl	804bd74 <HAL_InitTick>
  return HAL_OK;
 8043f1e:	2000      	movs	r0, #0
 8043f20:	e7ce      	b.n	8043ec0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8043f22:	b2ca      	uxtb	r2, r1
 8043f24:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8043f26:	681b      	ldr	r3, [r3, #0]
 8043f28:	f003 030f 	and.w	r3, r3, #15
 8043f2c:	428b      	cmp	r3, r1
 8043f2e:	d1c6      	bne.n	8043ebe <HAL_RCC_ClockConfig+0xa>
 8043f30:	e7ce      	b.n	8043ed0 <HAL_RCC_ClockConfig+0x1c>
 8043f32:	4b29      	ldr	r3, [pc, #164]	; (8043fd8 <HAL_RCC_ClockConfig+0x124>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8043f34:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8043f38:	bf1e      	ittt	ne
 8043f3a:	689a      	ldrne	r2, [r3, #8]
 8043f3c:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8043f40:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8043f42:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8043f44:	bf42      	ittt	mi
 8043f46:	689a      	ldrmi	r2, [r3, #8]
 8043f48:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8043f4c:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8043f4e:	689a      	ldr	r2, [r3, #8]
 8043f50:	68a0      	ldr	r0, [r4, #8]
 8043f52:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8043f56:	4302      	orrs	r2, r0
 8043f58:	609a      	str	r2, [r3, #8]
 8043f5a:	e7bc      	b.n	8043ed6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8043f5c:	6862      	ldr	r2, [r4, #4]
 8043f5e:	4b1e      	ldr	r3, [pc, #120]	; (8043fd8 <HAL_RCC_ClockConfig+0x124>)
 8043f60:	2a01      	cmp	r2, #1
 8043f62:	d11c      	bne.n	8043f9e <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8043f64:	681b      	ldr	r3, [r3, #0]
 8043f66:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8043f6a:	d0a8      	beq.n	8043ebe <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8043f6c:	4e1a      	ldr	r6, [pc, #104]	; (8043fd8 <HAL_RCC_ClockConfig+0x124>)
 8043f6e:	68b3      	ldr	r3, [r6, #8]
 8043f70:	f023 0303 	bic.w	r3, r3, #3
 8043f74:	4313      	orrs	r3, r2
 8043f76:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8043f78:	f7ff f830 	bl	8042fdc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8043f7c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8043f80:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8043f82:	68b3      	ldr	r3, [r6, #8]
 8043f84:	6862      	ldr	r2, [r4, #4]
 8043f86:	f003 030c 	and.w	r3, r3, #12
 8043f8a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8043f8e:	d0a4      	beq.n	8043eda <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8043f90:	f7ff f824 	bl	8042fdc <HAL_GetTick>
 8043f94:	1bc0      	subs	r0, r0, r7
 8043f96:	4540      	cmp	r0, r8
 8043f98:	d9f3      	bls.n	8043f82 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8043f9a:	2003      	movs	r0, #3
 8043f9c:	e790      	b.n	8043ec0 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8043f9e:	1e91      	subs	r1, r2, #2
 8043fa0:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8043fa2:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8043fa4:	d802      	bhi.n	8043fac <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8043fa6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8043faa:	e7de      	b.n	8043f6a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8043fac:	f013 0f02 	tst.w	r3, #2
 8043fb0:	e7db      	b.n	8043f6a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8043fb2:	b2ea      	uxtb	r2, r5
 8043fb4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8043fb6:	681b      	ldr	r3, [r3, #0]
 8043fb8:	f003 030f 	and.w	r3, r3, #15
 8043fbc:	42ab      	cmp	r3, r5
 8043fbe:	f47f af7e 	bne.w	8043ebe <HAL_RCC_ClockConfig+0xa>
 8043fc2:	e790      	b.n	8043ee6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8043fc4:	4904      	ldr	r1, [pc, #16]	; (8043fd8 <HAL_RCC_ClockConfig+0x124>)
 8043fc6:	68e0      	ldr	r0, [r4, #12]
 8043fc8:	688b      	ldr	r3, [r1, #8]
 8043fca:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8043fce:	4303      	orrs	r3, r0
 8043fd0:	608b      	str	r3, [r1, #8]
 8043fd2:	e78b      	b.n	8043eec <HAL_RCC_ClockConfig+0x38>
 8043fd4:	40023c00 	.word	0x40023c00
 8043fd8:	40023800 	.word	0x40023800
 8043fdc:	0804e284 	.word	0x0804e284
 8043fe0:	2000108c 	.word	0x2000108c
 8043fe4:	20001098 	.word	0x20001098

08043fe8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8043fe8:	4b04      	ldr	r3, [pc, #16]	; (8043ffc <HAL_RCC_GetPCLK1Freq+0x14>)
 8043fea:	4a05      	ldr	r2, [pc, #20]	; (8044000 <HAL_RCC_GetPCLK1Freq+0x18>)
 8043fec:	689b      	ldr	r3, [r3, #8]
 8043fee:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8043ff2:	5cd3      	ldrb	r3, [r2, r3]
 8043ff4:	4a03      	ldr	r2, [pc, #12]	; (8044004 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8043ff6:	6810      	ldr	r0, [r2, #0]
}
 8043ff8:	40d8      	lsrs	r0, r3
 8043ffa:	4770      	bx	lr
 8043ffc:	40023800 	.word	0x40023800
 8044000:	0804e294 	.word	0x0804e294
 8044004:	2000108c 	.word	0x2000108c

08044008 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8044008:	4b04      	ldr	r3, [pc, #16]	; (804401c <HAL_RCC_GetPCLK2Freq+0x14>)
 804400a:	4a05      	ldr	r2, [pc, #20]	; (8044020 <HAL_RCC_GetPCLK2Freq+0x18>)
 804400c:	689b      	ldr	r3, [r3, #8]
 804400e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8044012:	5cd3      	ldrb	r3, [r2, r3]
 8044014:	4a03      	ldr	r2, [pc, #12]	; (8044024 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8044016:	6810      	ldr	r0, [r2, #0]
}
 8044018:	40d8      	lsrs	r0, r3
 804401a:	4770      	bx	lr
 804401c:	40023800 	.word	0x40023800
 8044020:	0804e294 	.word	0x0804e294
 8044024:	2000108c 	.word	0x2000108c

08044028 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8044028:	6803      	ldr	r3, [r0, #0]
 804402a:	f013 0f05 	tst.w	r3, #5
{
 804402e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8044030:	4605      	mov	r5, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8044032:	d105      	bne.n	8044040 <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8044034:	6828      	ldr	r0, [r5, #0]
 8044036:	f010 0002 	ands.w	r0, r0, #2
 804403a:	d128      	bne.n	804408e <HAL_RCCEx_PeriphCLKConfig+0x66>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
}
 804403c:	b003      	add	sp, #12
 804403e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8044040:	4c41      	ldr	r4, [pc, #260]	; (8044148 <HAL_RCCEx_PeriphCLKConfig+0x120>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8044042:	4e42      	ldr	r6, [pc, #264]	; (804414c <HAL_RCCEx_PeriphCLKConfig+0x124>)
    __HAL_RCC_PLLI2S_DISABLE();
 8044044:	2300      	movs	r3, #0
 8044046:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8044048:	f7fe ffc8 	bl	8042fdc <HAL_GetTick>
 804404c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 804404e:	6833      	ldr	r3, [r6, #0]
 8044050:	011b      	lsls	r3, r3, #4
 8044052:	d415      	bmi.n	8044080 <HAL_RCCEx_PeriphCLKConfig+0x58>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8044054:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 8044058:	071b      	lsls	r3, r3, #28
 804405a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 804405e:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8044062:	2301      	movs	r3, #1
 8044064:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8044066:	f7fe ffb9 	bl	8042fdc <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 804406a:	4c38      	ldr	r4, [pc, #224]	; (804414c <HAL_RCCEx_PeriphCLKConfig+0x124>)
    tickstart = HAL_GetTick();
 804406c:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 804406e:	6823      	ldr	r3, [r4, #0]
 8044070:	0118      	lsls	r0, r3, #4
 8044072:	d4df      	bmi.n	8044034 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8044074:	f7fe ffb2 	bl	8042fdc <HAL_GetTick>
 8044078:	1b80      	subs	r0, r0, r6
 804407a:	2802      	cmp	r0, #2
 804407c:	d9f7      	bls.n	804406e <HAL_RCCEx_PeriphCLKConfig+0x46>
 804407e:	e004      	b.n	804408a <HAL_RCCEx_PeriphCLKConfig+0x62>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8044080:	f7fe ffac 	bl	8042fdc <HAL_GetTick>
 8044084:	1bc0      	subs	r0, r0, r7
 8044086:	2802      	cmp	r0, #2
 8044088:	d9e1      	bls.n	804404e <HAL_RCCEx_PeriphCLKConfig+0x26>
        return HAL_TIMEOUT;
 804408a:	2003      	movs	r0, #3
 804408c:	e7d6      	b.n	804403c <HAL_RCCEx_PeriphCLKConfig+0x14>
    __HAL_RCC_PWR_CLK_ENABLE();
 804408e:	2300      	movs	r3, #0
 8044090:	9301      	str	r3, [sp, #4]
 8044092:	4b2e      	ldr	r3, [pc, #184]	; (804414c <HAL_RCCEx_PeriphCLKConfig+0x124>)
    PWR->CR |= PWR_CR_DBP;
 8044094:	4c2e      	ldr	r4, [pc, #184]	; (8044150 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8044096:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8044098:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 804409c:	641a      	str	r2, [r3, #64]	; 0x40
 804409e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80440a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80440a4:	9301      	str	r3, [sp, #4]
 80440a6:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80440a8:	6823      	ldr	r3, [r4, #0]
 80440aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80440ae:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80440b0:	f7fe ff94 	bl	8042fdc <HAL_GetTick>
 80440b4:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80440b6:	6823      	ldr	r3, [r4, #0]
 80440b8:	05d9      	lsls	r1, r3, #23
 80440ba:	d51b      	bpl.n	80440f4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80440bc:	4c23      	ldr	r4, [pc, #140]	; (804414c <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80440be:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80440c0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80440c4:	d11c      	bne.n	8044100 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80440c6:	68eb      	ldr	r3, [r5, #12]
 80440c8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80440cc:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80440d0:	4a1e      	ldr	r2, [pc, #120]	; (804414c <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80440d2:	d134      	bne.n	804413e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80440d4:	6891      	ldr	r1, [r2, #8]
 80440d6:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80440da:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80440de:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80440e2:	4301      	orrs	r1, r0
 80440e4:	6091      	str	r1, [r2, #8]
 80440e6:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80440e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80440ec:	430b      	orrs	r3, r1
 80440ee:	6713      	str	r3, [r2, #112]	; 0x70
  return HAL_OK;
 80440f0:	2000      	movs	r0, #0
 80440f2:	e7a3      	b.n	804403c <HAL_RCCEx_PeriphCLKConfig+0x14>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80440f4:	f7fe ff72 	bl	8042fdc <HAL_GetTick>
 80440f8:	1b80      	subs	r0, r0, r6
 80440fa:	2802      	cmp	r0, #2
 80440fc:	d9db      	bls.n	80440b6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 80440fe:	e7c4      	b.n	804408a <HAL_RCCEx_PeriphCLKConfig+0x62>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8044100:	68ea      	ldr	r2, [r5, #12]
 8044102:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8044106:	4293      	cmp	r3, r2
 8044108:	d0dd      	beq.n	80440c6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 804410a:	6f23      	ldr	r3, [r4, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 804410c:	4a11      	ldr	r2, [pc, #68]	; (8044154 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 804410e:	2101      	movs	r1, #1
 8044110:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8044112:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8044116:	2100      	movs	r1, #0
 8044118:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 804411a:	6723      	str	r3, [r4, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 804411c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 804411e:	07da      	lsls	r2, r3, #31
 8044120:	d5d1      	bpl.n	80440c6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
        tickstart = HAL_GetTick();
 8044122:	f7fe ff5b 	bl	8042fdc <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8044126:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 804412a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 804412c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 804412e:	079b      	lsls	r3, r3, #30
 8044130:	d4c9      	bmi.n	80440c6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8044132:	f7fe ff53 	bl	8042fdc <HAL_GetTick>
 8044136:	1b80      	subs	r0, r0, r6
 8044138:	42b8      	cmp	r0, r7
 804413a:	d9f7      	bls.n	804412c <HAL_RCCEx_PeriphCLKConfig+0x104>
 804413c:	e7a5      	b.n	804408a <HAL_RCCEx_PeriphCLKConfig+0x62>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 804413e:	6891      	ldr	r1, [r2, #8]
 8044140:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8044144:	e7ce      	b.n	80440e4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
 8044146:	bf00      	nop
 8044148:	42470068 	.word	0x42470068
 804414c:	40023800 	.word	0x40023800
 8044150:	40007000 	.word	0x40007000
 8044154:	42470e40 	.word	0x42470e40

08044158 <HAL_RTC_DeactivateAlarm>:

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8044158:	7f03      	ldrb	r3, [r0, #28]
 804415a:	2b01      	cmp	r3, #1
{
 804415c:	b570      	push	{r4, r5, r6, lr}
 804415e:	4604      	mov	r4, r0
 8044160:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8044164:	d021      	beq.n	80441aa <HAL_RTC_DeactivateAlarm+0x52>
 8044166:	2301      	movs	r3, #1
 8044168:	7723      	strb	r3, [r4, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 804416a:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 804416c:	7760      	strb	r0, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 804416e:	22ca      	movs	r2, #202	; 0xca
 8044170:	625a      	str	r2, [r3, #36]	; 0x24
 8044172:	2253      	movs	r2, #83	; 0x53
 8044174:	625a      	str	r2, [r3, #36]	; 0x24

  if(Alarm == RTC_ALARM_A)
 8044176:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 804417a:	689a      	ldr	r2, [r3, #8]
  if(Alarm == RTC_ALARM_A)
 804417c:	d123      	bne.n	80441c6 <HAL_RTC_DeactivateAlarm+0x6e>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 804417e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8044182:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8044184:	689a      	ldr	r2, [r3, #8]
 8044186:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 804418a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 804418c:	f7fe ff26 	bl	8042fdc <HAL_GetTick>
 8044190:	4606      	mov	r6, r0

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8044192:	6823      	ldr	r3, [r4, #0]
 8044194:	68dd      	ldr	r5, [r3, #12]
 8044196:	f015 0501 	ands.w	r5, r5, #1
 804419a:	d007      	beq.n	80441ac <HAL_RTC_DeactivateAlarm+0x54>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 804419c:	6823      	ldr	r3, [r4, #0]
 804419e:	22ff      	movs	r2, #255	; 0xff
 80441a0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80441a2:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY;
 80441a4:	2301      	movs	r3, #1
 80441a6:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hrtc);
 80441a8:	7720      	strb	r0, [r4, #28]

  return HAL_OK;
}
 80441aa:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80441ac:	f7fe ff16 	bl	8042fdc <HAL_GetTick>
 80441b0:	1b80      	subs	r0, r0, r6
 80441b2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80441b6:	d9ec      	bls.n	8044192 <HAL_RTC_DeactivateAlarm+0x3a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80441b8:	6823      	ldr	r3, [r4, #0]
 80441ba:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80441bc:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80441be:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80441c0:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 80441c2:	7725      	strb	r5, [r4, #28]
        return HAL_TIMEOUT;
 80441c4:	e7f1      	b.n	80441aa <HAL_RTC_DeactivateAlarm+0x52>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80441c6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80441ca:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc,RTC_IT_ALRB);
 80441cc:	689a      	ldr	r2, [r3, #8]
 80441ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80441d2:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80441d4:	f7fe ff02 	bl	8042fdc <HAL_GetTick>
 80441d8:	4606      	mov	r6, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80441da:	6823      	ldr	r3, [r4, #0]
 80441dc:	68dd      	ldr	r5, [r3, #12]
 80441de:	f015 0502 	ands.w	r5, r5, #2
 80441e2:	d1db      	bne.n	804419c <HAL_RTC_DeactivateAlarm+0x44>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80441e4:	f7fe fefa 	bl	8042fdc <HAL_GetTick>
 80441e8:	1b80      	subs	r0, r0, r6
 80441ea:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80441ee:	d9f4      	bls.n	80441da <HAL_RTC_DeactivateAlarm+0x82>
 80441f0:	e7e2      	b.n	80441b8 <HAL_RTC_DeactivateAlarm+0x60>

080441f2 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80441f2:	6802      	ldr	r2, [r0, #0]
{
 80441f4:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80441f6:	68d3      	ldr	r3, [r2, #12]
 80441f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80441fc:	60d3      	str	r3, [r2, #12]
{
 80441fe:	4604      	mov	r4, r0

    /* Get tick */
    tickstart = HAL_GetTick();
 8044200:	f7fe feec 	bl	8042fdc <HAL_GetTick>
 8044204:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8044206:	6823      	ldr	r3, [r4, #0]
 8044208:	68db      	ldr	r3, [r3, #12]
 804420a:	069b      	lsls	r3, r3, #26
 804420c:	d501      	bpl.n	8044212 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 804420e:	2000      	movs	r0, #0
}
 8044210:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8044212:	f7fe fee3 	bl	8042fdc <HAL_GetTick>
 8044216:	1b40      	subs	r0, r0, r5
 8044218:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 804421c:	d9f3      	bls.n	8044206 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 804421e:	2003      	movs	r0, #3
 8044220:	e7f6      	b.n	8044210 <HAL_RTC_WaitForSynchro+0x1e>

08044222 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8044222:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8044224:	6803      	ldr	r3, [r0, #0]
 8044226:	68da      	ldr	r2, [r3, #12]
 8044228:	0652      	lsls	r2, r2, #25
{
 804422a:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 804422c:	d501      	bpl.n	8044232 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 804422e:	2000      	movs	r0, #0
}
 8044230:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8044232:	f04f 32ff 	mov.w	r2, #4294967295
 8044236:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8044238:	f7fe fed0 	bl	8042fdc <HAL_GetTick>
 804423c:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 804423e:	6823      	ldr	r3, [r4, #0]
 8044240:	68db      	ldr	r3, [r3, #12]
 8044242:	065b      	lsls	r3, r3, #25
 8044244:	d4f3      	bmi.n	804422e <RTC_EnterInitMode+0xc>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8044246:	f7fe fec9 	bl	8042fdc <HAL_GetTick>
 804424a:	1b40      	subs	r0, r0, r5
 804424c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8044250:	d9f5      	bls.n	804423e <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8044252:	2003      	movs	r0, #3
 8044254:	e7ec      	b.n	8044230 <RTC_EnterInitMode+0xe>

08044256 <HAL_RTC_Init>:
{
 8044256:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8044258:	4604      	mov	r4, r0
 804425a:	b1b8      	cbz	r0, 804428c <HAL_RTC_Init+0x36>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 804425c:	7f43      	ldrb	r3, [r0, #29]
 804425e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8044262:	b913      	cbnz	r3, 804426a <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8044264:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8044266:	f007 fd9f 	bl	804bda8 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 804426a:	2302      	movs	r3, #2
 804426c:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 804426e:	6823      	ldr	r3, [r4, #0]
 8044270:	22ca      	movs	r2, #202	; 0xca
 8044272:	625a      	str	r2, [r3, #36]	; 0x24
 8044274:	2253      	movs	r2, #83	; 0x53
 8044276:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8044278:	4620      	mov	r0, r4
 804427a:	f7ff ffd2 	bl	8044222 <RTC_EnterInitMode>
 804427e:	6823      	ldr	r3, [r4, #0]
 8044280:	4605      	mov	r5, r0
 8044282:	b128      	cbz	r0, 8044290 <HAL_RTC_Init+0x3a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8044284:	22ff      	movs	r2, #255	; 0xff
 8044286:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8044288:	2304      	movs	r3, #4
 804428a:	7763      	strb	r3, [r4, #29]
     return HAL_ERROR;
 804428c:	2501      	movs	r5, #1
 804428e:	e02e      	b.n	80442ee <HAL_RTC_Init+0x98>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8044290:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8044292:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8044294:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8044298:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 804429c:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 804429e:	6862      	ldr	r2, [r4, #4]
 80442a0:	6899      	ldr	r1, [r3, #8]
 80442a2:	4302      	orrs	r2, r0
 80442a4:	6960      	ldr	r0, [r4, #20]
 80442a6:	4302      	orrs	r2, r0
 80442a8:	430a      	orrs	r2, r1
 80442aa:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80442ac:	68e2      	ldr	r2, [r4, #12]
 80442ae:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80442b0:	691a      	ldr	r2, [r3, #16]
 80442b2:	68a1      	ldr	r1, [r4, #8]
 80442b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80442b8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80442ba:	68da      	ldr	r2, [r3, #12]
 80442bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80442c0:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80442c2:	689b      	ldr	r3, [r3, #8]
 80442c4:	069b      	lsls	r3, r3, #26
 80442c6:	d405      	bmi.n	80442d4 <HAL_RTC_Init+0x7e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80442c8:	4620      	mov	r0, r4
 80442ca:	f7ff ff92 	bl	80441f2 <HAL_RTC_WaitForSynchro>
 80442ce:	b108      	cbz	r0, 80442d4 <HAL_RTC_Init+0x7e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80442d0:	6823      	ldr	r3, [r4, #0]
 80442d2:	e7d7      	b.n	8044284 <HAL_RTC_Init+0x2e>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80442d4:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80442d6:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80442d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80442da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80442de:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80442e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80442e2:	430a      	orrs	r2, r1
 80442e4:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80442e6:	22ff      	movs	r2, #255	; 0xff
 80442e8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80442ea:	2301      	movs	r3, #1
 80442ec:	7763      	strb	r3, [r4, #29]
}
 80442ee:	4628      	mov	r0, r5
 80442f0:	bd38      	pop	{r3, r4, r5, pc}

080442f2 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 80442f2:	2300      	movs	r3, #0

  while(Value >= 10U)
 80442f4:	2809      	cmp	r0, #9
 80442f6:	d803      	bhi.n	8044300 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80442f8:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 80442fc:	b2c0      	uxtb	r0, r0
 80442fe:	4770      	bx	lr
    Value -= 10U;
 8044300:	380a      	subs	r0, #10
    bcdhigh++;
 8044302:	3301      	adds	r3, #1
    Value -= 10U;
 8044304:	b2c0      	uxtb	r0, r0
 8044306:	e7f5      	b.n	80442f4 <RTC_ByteToBcd2+0x2>

08044308 <HAL_RTC_SetTime>:
  __HAL_LOCK(hrtc);
 8044308:	7f03      	ldrb	r3, [r0, #28]
 804430a:	2b01      	cmp	r3, #1
{
 804430c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8044310:	4606      	mov	r6, r0
 8044312:	460f      	mov	r7, r1
 8044314:	f04f 0502 	mov.w	r5, #2
  __HAL_LOCK(hrtc);
 8044318:	d02e      	beq.n	8044378 <HAL_RTC_SetTime+0x70>
 804431a:	2301      	movs	r3, #1
 804431c:	6801      	ldr	r1, [r0, #0]
 804431e:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8044320:	7745      	strb	r5, [r0, #29]
 8044322:	7838      	ldrb	r0, [r7, #0]
 8044324:	787d      	ldrb	r5, [r7, #1]
 8044326:	78bc      	ldrb	r4, [r7, #2]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8044328:	688b      	ldr	r3, [r1, #8]
  if(Format == RTC_FORMAT_BIN)
 804432a:	bb42      	cbnz	r2, 804437e <HAL_RTC_SetTime+0x76>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 804432c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sTime->TimeFormat = 0x00U;
 8044330:	bf08      	it	eq
 8044332:	70fb      	strbeq	r3, [r7, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8044334:	f7ff ffdd 	bl	80442f2 <RTC_ByteToBcd2>
 8044338:	4680      	mov	r8, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 804433a:	4628      	mov	r0, r5
 804433c:	f7ff ffd9 	bl	80442f2 <RTC_ByteToBcd2>
 8044340:	4602      	mov	r2, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8044342:	4620      	mov	r0, r4
 8044344:	f7ff ffd5 	bl	80442f2 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8044348:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 804434a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 804434e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8044352:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8044356:	23ca      	movs	r3, #202	; 0xca
 8044358:	624b      	str	r3, [r1, #36]	; 0x24
 804435a:	2353      	movs	r3, #83	; 0x53
 804435c:	624b      	str	r3, [r1, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 804435e:	4630      	mov	r0, r6
 8044360:	f7ff ff5f 	bl	8044222 <RTC_EnterInitMode>
 8044364:	6833      	ldr	r3, [r6, #0]
 8044366:	4605      	mov	r5, r0
 8044368:	b1b0      	cbz	r0, 8044398 <HAL_RTC_SetTime+0x90>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 804436a:	22ff      	movs	r2, #255	; 0xff
 804436c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 804436e:	2304      	movs	r3, #4
 8044370:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 8044372:	2300      	movs	r3, #0
 8044374:	7733      	strb	r3, [r6, #28]
        return HAL_ERROR;
 8044376:	2501      	movs	r5, #1
}
 8044378:	4628      	mov	r0, r5
 804437a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 804437e:	f013 0340 	ands.w	r3, r3, #64	; 0x40
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8044382:	ea4f 2505 	mov.w	r5, r5, lsl #8
      sTime->TimeFormat = 0x00U;
 8044386:	bf08      	it	eq
 8044388:	70fb      	strbeq	r3, [r7, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 804438a:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 804438e:	4320      	orrs	r0, r4
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8044390:	78fc      	ldrb	r4, [r7, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8044392:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8044396:	e7de      	b.n	8044356 <HAL_RTC_SetTime+0x4e>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8044398:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 804439c:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 80443a0:	601c      	str	r4, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80443a2:	689a      	ldr	r2, [r3, #8]
 80443a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80443a8:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80443aa:	e9d7 2003 	ldrd	r2, r0, [r7, #12]
 80443ae:	6899      	ldr	r1, [r3, #8]
 80443b0:	4302      	orrs	r2, r0
 80443b2:	430a      	orrs	r2, r1
 80443b4:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80443b6:	68da      	ldr	r2, [r3, #12]
 80443b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80443bc:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80443be:	689b      	ldr	r3, [r3, #8]
 80443c0:	069b      	lsls	r3, r3, #26
 80443c2:	d40a      	bmi.n	80443da <HAL_RTC_SetTime+0xd2>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80443c4:	4630      	mov	r0, r6
 80443c6:	f7ff ff14 	bl	80441f2 <HAL_RTC_WaitForSynchro>
 80443ca:	b130      	cbz	r0, 80443da <HAL_RTC_SetTime+0xd2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80443cc:	6833      	ldr	r3, [r6, #0]
 80443ce:	22ff      	movs	r2, #255	; 0xff
 80443d0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80443d2:	2304      	movs	r3, #4
 80443d4:	7773      	strb	r3, [r6, #29]
        __HAL_UNLOCK(hrtc);
 80443d6:	7735      	strb	r5, [r6, #28]
 80443d8:	e7cd      	b.n	8044376 <HAL_RTC_SetTime+0x6e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80443da:	6833      	ldr	r3, [r6, #0]
 80443dc:	22ff      	movs	r2, #255	; 0xff
 80443de:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 80443e0:	2301      	movs	r3, #1
 80443e2:	7773      	strb	r3, [r6, #29]
   __HAL_UNLOCK(hrtc);
 80443e4:	2300      	movs	r3, #0
 80443e6:	7733      	strb	r3, [r6, #28]
   return HAL_OK;
 80443e8:	e7c6      	b.n	8044378 <HAL_RTC_SetTime+0x70>

080443ea <HAL_RTC_SetDate>:
{
 80443ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 80443ec:	7f03      	ldrb	r3, [r0, #28]
 80443ee:	2b01      	cmp	r3, #1
{
 80443f0:	4606      	mov	r6, r0
 80443f2:	f04f 0502 	mov.w	r5, #2
 __HAL_LOCK(hrtc);
 80443f6:	d030      	beq.n	804445a <HAL_RTC_SetDate+0x70>
 80443f8:	2301      	movs	r3, #1
 80443fa:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80443fc:	7745      	strb	r5, [r0, #29]
 80443fe:	780d      	ldrb	r5, [r1, #0]
 8044400:	78c8      	ldrb	r0, [r1, #3]
 8044402:	784c      	ldrb	r4, [r1, #1]
 8044404:	788f      	ldrb	r7, [r1, #2]
 8044406:	036d      	lsls	r5, r5, #13
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8044408:	2a00      	cmp	r2, #0
 804440a:	d147      	bne.n	804449c <HAL_RTC_SetDate+0xb2>
 804440c:	06e2      	lsls	r2, r4, #27
 804440e:	d503      	bpl.n	8044418 <HAL_RTC_SetDate+0x2e>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8044410:	f024 0410 	bic.w	r4, r4, #16
 8044414:	340a      	adds	r4, #10
 8044416:	704c      	strb	r4, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8044418:	f7ff ff6b 	bl	80442f2 <RTC_ByteToBcd2>
 804441c:	4602      	mov	r2, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 804441e:	7848      	ldrb	r0, [r1, #1]
 8044420:	f7ff ff67 	bl	80442f2 <RTC_ByteToBcd2>
 8044424:	4604      	mov	r4, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8044426:	4638      	mov	r0, r7
 8044428:	f7ff ff63 	bl	80442f2 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 804442c:	4328      	orrs	r0, r5
 804442e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8044432:	6833      	ldr	r3, [r6, #0]
 8044434:	22ca      	movs	r2, #202	; 0xca
 8044436:	625a      	str	r2, [r3, #36]	; 0x24
 8044438:	2253      	movs	r2, #83	; 0x53
 804443a:	625a      	str	r2, [r3, #36]	; 0x24
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 804443c:	ea40 2404 	orr.w	r4, r0, r4, lsl #8
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8044440:	4630      	mov	r0, r6
 8044442:	f7ff feee 	bl	8044222 <RTC_EnterInitMode>
 8044446:	6833      	ldr	r3, [r6, #0]
 8044448:	4605      	mov	r5, r0
 804444a:	b140      	cbz	r0, 804445e <HAL_RTC_SetDate+0x74>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 804444c:	22ff      	movs	r2, #255	; 0xff
 804444e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8044450:	2304      	movs	r3, #4
 8044452:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 8044454:	2300      	movs	r3, #0
 8044456:	7733      	strb	r3, [r6, #28]
        return HAL_ERROR;
 8044458:	2501      	movs	r5, #1
}
 804445a:	4628      	mov	r0, r5
 804445c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 804445e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8044462:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 8044466:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8044468:	68da      	ldr	r2, [r3, #12]
 804446a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 804446e:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8044470:	689b      	ldr	r3, [r3, #8]
 8044472:	069b      	lsls	r3, r3, #26
 8044474:	d40a      	bmi.n	804448c <HAL_RTC_SetDate+0xa2>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8044476:	4630      	mov	r0, r6
 8044478:	f7ff febb 	bl	80441f2 <HAL_RTC_WaitForSynchro>
 804447c:	b130      	cbz	r0, 804448c <HAL_RTC_SetDate+0xa2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 804447e:	6833      	ldr	r3, [r6, #0]
 8044480:	22ff      	movs	r2, #255	; 0xff
 8044482:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8044484:	2304      	movs	r3, #4
 8044486:	7773      	strb	r3, [r6, #29]
        __HAL_UNLOCK(hrtc);
 8044488:	7735      	strb	r5, [r6, #28]
 804448a:	e7e5      	b.n	8044458 <HAL_RTC_SetDate+0x6e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 804448c:	6833      	ldr	r3, [r6, #0]
 804448e:	22ff      	movs	r2, #255	; 0xff
 8044490:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8044492:	2301      	movs	r3, #1
 8044494:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 8044496:	2300      	movs	r3, #0
 8044498:	7733      	strb	r3, [r6, #28]
    return HAL_OK;
 804449a:	e7de      	b.n	804445a <HAL_RTC_SetDate+0x70>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 804449c:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
 80444a0:	4338      	orrs	r0, r7
 80444a2:	e7c6      	b.n	8044432 <HAL_RTC_SetDate+0x48>

080444a4 <HAL_RTC_SetAlarm_IT>:
{
 80444a4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 80444a8:	4b53      	ldr	r3, [pc, #332]	; (80445f8 <HAL_RTC_SetAlarm_IT+0x154>)
{
 80444aa:	4606      	mov	r6, r0
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 80444ac:	681b      	ldr	r3, [r3, #0]
 80444ae:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 80444b2:	fbb3 f0f0 	udiv	r0, r3, r0
 80444b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80444ba:	4343      	muls	r3, r0
 80444bc:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hrtc);
 80444be:	7f33      	ldrb	r3, [r6, #28]
 80444c0:	2b01      	cmp	r3, #1
 80444c2:	f04f 0002 	mov.w	r0, #2
 80444c6:	d04a      	beq.n	804455e <HAL_RTC_SetAlarm_IT+0xba>
 80444c8:	2301      	movs	r3, #1
 80444ca:	6834      	ldr	r4, [r6, #0]
 80444cc:	7733      	strb	r3, [r6, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80444ce:	7770      	strb	r0, [r6, #29]
 80444d0:	7808      	ldrb	r0, [r1, #0]
 80444d2:	f891 9001 	ldrb.w	r9, [r1, #1]
 80444d6:	f891 a002 	ldrb.w	sl, [r1, #2]
 80444da:	f891 7020 	ldrb.w	r7, [r1, #32]
 80444de:	69cd      	ldr	r5, [r1, #28]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80444e0:	68a3      	ldr	r3, [r4, #8]
  if(Format == RTC_FORMAT_BIN)
 80444e2:	2a00      	cmp	r2, #0
 80444e4:	d13e      	bne.n	8044564 <HAL_RTC_SetAlarm_IT+0xc0>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80444e6:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80444ea:	bf08      	it	eq
 80444ec:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80444ee:	f7ff ff00 	bl	80442f2 <RTC_ByteToBcd2>
 80444f2:	4680      	mov	r8, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80444f4:	4648      	mov	r0, r9
 80444f6:	f7ff fefc 	bl	80442f2 <RTC_ByteToBcd2>
 80444fa:	4602      	mov	r2, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80444fc:	4650      	mov	r0, sl
 80444fe:	f7ff fef8 	bl	80442f2 <RTC_ByteToBcd2>
 8044502:	4681      	mov	r9, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8044504:	4638      	mov	r0, r7
 8044506:	f7ff fef4 	bl	80442f2 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 804450a:	694b      	ldr	r3, [r1, #20]
 804450c:	432b      	orrs	r3, r5
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 804450e:	78cd      	ldrb	r5, [r1, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8044510:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8044514:	ea43 0309 	orr.w	r3, r3, r9
 8044518:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 804451c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8044520:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8044524:	698b      	ldr	r3, [r1, #24]
 8044526:	684a      	ldr	r2, [r1, #4]
 8044528:	431a      	orrs	r2, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 804452a:	23ca      	movs	r3, #202	; 0xca
 804452c:	6263      	str	r3, [r4, #36]	; 0x24
 804452e:	2353      	movs	r3, #83	; 0x53
 8044530:	6263      	str	r3, [r4, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 8044532:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8044534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8044538:	68a3      	ldr	r3, [r4, #8]
  if(sAlarm->Alarm == RTC_ALARM_A)
 804453a:	d142      	bne.n	80445c2 <HAL_RTC_SetAlarm_IT+0x11e>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 804453c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8044540:	60a3      	str	r3, [r4, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8044542:	68e3      	ldr	r3, [r4, #12]
 8044544:	b2db      	uxtb	r3, r3
 8044546:	f463 73c0 	orn	r3, r3, #384	; 0x180
 804454a:	60e3      	str	r3, [r4, #12]
      if (count-- == 0U)
 804454c:	9b01      	ldr	r3, [sp, #4]
 804454e:	1e59      	subs	r1, r3, #1
 8044550:	9101      	str	r1, [sp, #4]
 8044552:	b9cb      	cbnz	r3, 8044588 <HAL_RTC_SetAlarm_IT+0xe4>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8044554:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8044556:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8044558:	6262      	str	r2, [r4, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 804455a:	7770      	strb	r0, [r6, #29]
        __HAL_UNLOCK(hrtc);
 804455c:	7733      	strb	r3, [r6, #28]
}
 804455e:	b002      	add	sp, #8
 8044560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8044564:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8044568:	bf08      	it	eq
 804456a:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 804456c:	694b      	ldr	r3, [r1, #20]
 804456e:	431d      	orrs	r5, r3
 8044570:	ea45 050a 	orr.w	r5, r5, sl
 8044574:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8044578:	78cb      	ldrb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 804457a:	ea40 2009 	orr.w	r0, r0, r9, lsl #8
 804457e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8044582:	ea40 6007 	orr.w	r0, r0, r7, lsl #24
 8044586:	e7cd      	b.n	8044524 <HAL_RTC_SetAlarm_IT+0x80>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8044588:	68e3      	ldr	r3, [r4, #12]
 804458a:	07d9      	lsls	r1, r3, #31
 804458c:	d5de      	bpl.n	804454c <HAL_RTC_SetAlarm_IT+0xa8>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 804458e:	61e0      	str	r0, [r4, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8044590:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8044592:	68a3      	ldr	r3, [r4, #8]
 8044594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8044598:	60a3      	str	r3, [r4, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 804459a:	68a3      	ldr	r3, [r4, #8]
 804459c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80445a0:	60a3      	str	r3, [r4, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80445a2:	4b16      	ldr	r3, [pc, #88]	; (80445fc <HAL_RTC_SetAlarm_IT+0x158>)
 80445a4:	681a      	ldr	r2, [r3, #0]
 80445a6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80445aa:	601a      	str	r2, [r3, #0]
  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 80445ac:	689a      	ldr	r2, [r3, #8]
 80445ae:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80445b2:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80445b4:	23ff      	movs	r3, #255	; 0xff
 80445b6:	6263      	str	r3, [r4, #36]	; 0x24
  __HAL_UNLOCK(hrtc);
 80445b8:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY;
 80445ba:	2301      	movs	r3, #1
 80445bc:	7773      	strb	r3, [r6, #29]
  __HAL_UNLOCK(hrtc);
 80445be:	7730      	strb	r0, [r6, #28]
  return HAL_OK;
 80445c0:	e7cd      	b.n	804455e <HAL_RTC_SetAlarm_IT+0xba>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80445c2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80445c6:	60a3      	str	r3, [r4, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80445c8:	68e3      	ldr	r3, [r4, #12]
 80445ca:	b2db      	uxtb	r3, r3
 80445cc:	f463 7320 	orn	r3, r3, #640	; 0x280
 80445d0:	60e3      	str	r3, [r4, #12]
      if (count-- == 0U)
 80445d2:	9b01      	ldr	r3, [sp, #4]
 80445d4:	1e59      	subs	r1, r3, #1
 80445d6:	9101      	str	r1, [sp, #4]
 80445d8:	2b00      	cmp	r3, #0
 80445da:	d0bb      	beq.n	8044554 <HAL_RTC_SetAlarm_IT+0xb0>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 80445dc:	68e3      	ldr	r3, [r4, #12]
 80445de:	079b      	lsls	r3, r3, #30
 80445e0:	d5f7      	bpl.n	80445d2 <HAL_RTC_SetAlarm_IT+0x12e>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80445e2:	6220      	str	r0, [r4, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80445e4:	64a2      	str	r2, [r4, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80445e6:	68a3      	ldr	r3, [r4, #8]
 80445e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80445ec:	60a3      	str	r3, [r4, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80445ee:	68a3      	ldr	r3, [r4, #8]
 80445f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80445f4:	e7d4      	b.n	80445a0 <HAL_RTC_SetAlarm_IT+0xfc>
 80445f6:	bf00      	nop
 80445f8:	2000108c 	.word	0x2000108c
 80445fc:	40013c00 	.word	0x40013c00

08044600 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8044600:	0903      	lsrs	r3, r0, #4
 8044602:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8044606:	f000 000f 	and.w	r0, r0, #15
 804460a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 804460e:	b2c0      	uxtb	r0, r0
 8044610:	4770      	bx	lr

08044612 <HAL_RTC_GetTime>:
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8044612:	6803      	ldr	r3, [r0, #0]
 8044614:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8044616:	6048      	str	r0, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8044618:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 804461a:	681b      	ldr	r3, [r3, #0]
 804461c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8044620:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
{
 8044624:	b570      	push	{r4, r5, r6, lr}
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8044626:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 804462a:	0c1d      	lsrs	r5, r3, #16
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 804462c:	6088      	str	r0, [r1, #8]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 804462e:	f3c3 2606 	ubfx	r6, r3, #8, #7
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8044632:	f005 003f 	and.w	r0, r5, #63	; 0x3f
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8044636:	b2dc      	uxtb	r4, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8044638:	f005 0540 	and.w	r5, r5, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 804463c:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 804463e:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8044640:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8044642:	70cd      	strb	r5, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 8044644:	b952      	cbnz	r2, 804465c <HAL_RTC_GetTime+0x4a>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8044646:	f7ff ffdb 	bl	8044600 <RTC_Bcd2ToByte>
 804464a:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 804464c:	4630      	mov	r0, r6
 804464e:	f7ff ffd7 	bl	8044600 <RTC_Bcd2ToByte>
 8044652:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8044654:	4620      	mov	r0, r4
 8044656:	f7ff ffd3 	bl	8044600 <RTC_Bcd2ToByte>
 804465a:	7088      	strb	r0, [r1, #2]
}
 804465c:	2000      	movs	r0, #0
 804465e:	bd70      	pop	{r4, r5, r6, pc}

08044660 <HAL_RTC_GetDate>:
{
 8044660:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8044662:	6803      	ldr	r3, [r0, #0]
 8044664:	685b      	ldr	r3, [r3, #4]
 8044666:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 804466a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 804466e:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8044670:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8044674:	b2dc      	uxtb	r4, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8044676:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 804467a:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 804467c:	704d      	strb	r5, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 804467e:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8044680:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 8044682:	b952      	cbnz	r2, 804469a <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8044684:	f7ff ffbc 	bl	8044600 <RTC_Bcd2ToByte>
 8044688:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 804468a:	4628      	mov	r0, r5
 804468c:	f7ff ffb8 	bl	8044600 <RTC_Bcd2ToByte>
 8044690:	7048      	strb	r0, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8044692:	4620      	mov	r0, r4
 8044694:	f7ff ffb4 	bl	8044600 <RTC_Bcd2ToByte>
 8044698:	7088      	strb	r0, [r1, #2]
}
 804469a:	2000      	movs	r0, #0
 804469c:	bd38      	pop	{r3, r4, r5, pc}

0804469e <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 804469e:	6803      	ldr	r3, [r0, #0]
 80446a0:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80446a2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80446a6:	4770      	bx	lr

080446a8 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80446a8:	6803      	ldr	r3, [r0, #0]
 80446aa:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80446ac:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 80446b0:	4770      	bx	lr

080446b2 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80446b2:	7f03      	ldrb	r3, [r0, #28]
 80446b4:	2b01      	cmp	r3, #1
 80446b6:	f04f 0302 	mov.w	r3, #2
 80446ba:	d00f      	beq.n	80446dc <HAL_RTCEx_EnableBypassShadow+0x2a>

  hrtc->State = HAL_RTC_STATE_BUSY;
 80446bc:	7743      	strb	r3, [r0, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80446be:	6803      	ldr	r3, [r0, #0]
 80446c0:	22ca      	movs	r2, #202	; 0xca
 80446c2:	625a      	str	r2, [r3, #36]	; 0x24
 80446c4:	2253      	movs	r2, #83	; 0x53
 80446c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 80446c8:	689a      	ldr	r2, [r3, #8]
 80446ca:	f042 0220 	orr.w	r2, r2, #32
 80446ce:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80446d0:	22ff      	movs	r2, #255	; 0xff
 80446d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80446d4:	2301      	movs	r3, #1
 80446d6:	7743      	strb	r3, [r0, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80446d8:	2300      	movs	r3, #0
 80446da:	7703      	strb	r3, [r0, #28]
  __HAL_LOCK(hrtc);
 80446dc:	4618      	mov	r0, r3

  return HAL_OK;
}
 80446de:	4770      	bx	lr

080446e0 <SD_DMATransmitCplt>:
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80446e0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80446e2:	681a      	ldr	r2, [r3, #0]
 80446e4:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80446e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80446ea:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80446ec:	4770      	bx	lr

080446ee <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80446ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80446f2:	b089      	sub	sp, #36	; 0x24
 80446f4:	4605      	mov	r5, r0
 80446f6:	460e      	mov	r6, r1
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80446f8:	f7fe fc70 	bl	8042fdc <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 80446fc:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 80446fe:	4681      	mov	r9, r0
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8044700:	2108      	movs	r1, #8
 8044702:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2U] = {0U, 0U};
 8044704:	e9cd 3300 	strd	r3, r3, [sp]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8044708:	f001 fe55 	bl	80463b6 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 804470c:	4604      	mov	r4, r0
 804470e:	bb40      	cbnz	r0, 8044762 <SD_FindSCR+0x74>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8044710:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8044712:	6828      	ldr	r0, [r5, #0]
 8044714:	0409      	lsls	r1, r1, #16
 8044716:	f001 ff61 	bl	80465dc <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 804471a:	4604      	mov	r4, r0
 804471c:	bb08      	cbnz	r0, 8044762 <SD_FindSCR+0x74>
  {
    return errorstate;
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
  config.DataLength    = 8U;
 804471e:	f04f 32ff 	mov.w	r2, #4294967295
 8044722:	2308      	movs	r3, #8
 8044724:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8044728:	2130      	movs	r1, #48	; 0x30
 804472a:	2302      	movs	r3, #2
 804472c:	e9cd 1304 	strd	r1, r3, [sp, #16]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8044730:	9006      	str	r0, [sp, #24]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8044732:	2301      	movs	r3, #1
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8044734:	a902      	add	r1, sp, #8
 8044736:	6828      	ldr	r0, [r5, #0]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8044738:	9307      	str	r3, [sp, #28]
  (void)SDIO_ConfigData(hsd->Instance, &config);
 804473a:	f001 fe29 	bl	8046390 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 804473e:	6828      	ldr	r0, [r5, #0]
 8044740:	f001 ff95 	bl	804666e <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8044744:	4604      	mov	r4, r0
 8044746:	b960      	cbnz	r0, 8044762 <SD_FindSCR+0x74>
  uint32_t index = 0U;
 8044748:	4607      	mov	r7, r0
  {
    return errorstate;
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 804474a:	f240 482a 	movw	r8, #1066	; 0x42a
 804474e:	6828      	ldr	r0, [r5, #0]
 8044750:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8044752:	ea13 0f08 	tst.w	r3, r8
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8044756:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8044758:	d007      	beq.n	804476a <SD_FindSCR+0x7c>
    {
      return HAL_SD_ERROR_TIMEOUT;
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 804475a:	0719      	lsls	r1, r3, #28
 804475c:	d518      	bpl.n	8044790 <SD_FindSCR+0xa2>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 804475e:	2408      	movs	r4, #8

    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8044760:	6384      	str	r4, [r0, #56]	; 0x38
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8044762:	4620      	mov	r0, r4
 8044764:	b009      	add	sp, #36	; 0x24
 8044766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 804476a:	029b      	lsls	r3, r3, #10
 804476c:	d507      	bpl.n	804477e <SD_FindSCR+0x90>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 804476e:	f001 fde5 	bl	804633c <SDIO_ReadFIFO>
 8044772:	ab08      	add	r3, sp, #32
 8044774:	eb03 0387 	add.w	r3, r3, r7, lsl #2
      index++;
 8044778:	3701      	adds	r7, #1
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 804477a:	f843 0c20 	str.w	r0, [r3, #-32]
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 804477e:	f7fe fc2d 	bl	8042fdc <HAL_GetTick>
 8044782:	eba0 0009 	sub.w	r0, r0, r9
 8044786:	3001      	adds	r0, #1
 8044788:	d1e1      	bne.n	804474e <SD_FindSCR+0x60>
      return HAL_SD_ERROR_TIMEOUT;
 804478a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 804478e:	e7e8      	b.n	8044762 <SD_FindSCR+0x74>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8044790:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8044792:	079a      	lsls	r2, r3, #30
 8044794:	d501      	bpl.n	804479a <SD_FindSCR+0xac>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8044796:	2402      	movs	r4, #2
 8044798:	e7e2      	b.n	8044760 <SD_FindSCR+0x72>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 804479a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 804479c:	069b      	lsls	r3, r3, #26
 804479e:	d501      	bpl.n	80447a4 <SD_FindSCR+0xb6>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80447a0:	2420      	movs	r4, #32
 80447a2:	e7dd      	b.n	8044760 <SD_FindSCR+0x72>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80447a4:	f240 533a 	movw	r3, #1338	; 0x53a
 80447a8:	6383      	str	r3, [r0, #56]	; 0x38
 80447aa:	9b01      	ldr	r3, [sp, #4]
 80447ac:	ba1b      	rev	r3, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80447ae:	6033      	str	r3, [r6, #0]
 80447b0:	9b00      	ldr	r3, [sp, #0]
 80447b2:	ba1b      	rev	r3, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80447b4:	6073      	str	r3, [r6, #4]
  return HAL_SD_ERROR_NONE;
 80447b6:	e7d4      	b.n	8044762 <SD_FindSCR+0x74>

080447b8 <HAL_SD_ReadBlocks_DMA>:
{
 80447b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80447bc:	4604      	mov	r4, r0
 80447be:	b087      	sub	sp, #28
 80447c0:	4617      	mov	r7, r2
 80447c2:	4698      	mov	r8, r3
  if(NULL == pData)
 80447c4:	b941      	cbnz	r1, 80447d8 <HAL_SD_ReadBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80447c6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80447c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80447cc:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80447ce:	2501      	movs	r5, #1
}
 80447d0:	4628      	mov	r0, r5
 80447d2:	b007      	add	sp, #28
 80447d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 80447d8:	f890 6034 	ldrb.w	r6, [r0, #52]	; 0x34
 80447dc:	b2f6      	uxtb	r6, r6
 80447de:	2e01      	cmp	r6, #1
 80447e0:	d176      	bne.n	80448d0 <HAL_SD_ReadBlocks_DMA+0x118>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80447e2:	2200      	movs	r2, #0
 80447e4:	6382      	str	r2, [r0, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80447e6:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80447e8:	18fb      	adds	r3, r7, r3
 80447ea:	4283      	cmp	r3, r0
 80447ec:	d903      	bls.n	80447f6 <HAL_SD_ReadBlocks_DMA+0x3e>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80447ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80447f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80447f4:	e7ea      	b.n	80447cc <HAL_SD_ReadBlocks_DMA+0x14>
    hsd->Instance->DCTRL = 0U;
 80447f6:	6825      	ldr	r5, [r4, #0]
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80447f8:	6c20      	ldr	r0, [r4, #64]	; 0x40
    hsd->State = HAL_SD_STATE_BUSY;
 80447fa:	2303      	movs	r3, #3
 80447fc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8044800:	62ea      	str	r2, [r5, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8044802:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8044804:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8044808:	f043 0302 	orr.w	r3, r3, #2
 804480c:	63eb      	str	r3, [r5, #60]	; 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 804480e:	4b31      	ldr	r3, [pc, #196]	; (80448d4 <HAL_SD_ReadBlocks_DMA+0x11c>)
 8044810:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8044812:	4b31      	ldr	r3, [pc, #196]	; (80448d8 <HAL_SD_ReadBlocks_DMA+0x120>)
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8044814:	ea4f 2948 	mov.w	r9, r8, lsl #9
    hsd->hdmarx->XferAbortCallback = NULL;
 8044818:	e9c0 3213 	strd	r3, r2, [r0, #76]	; 0x4c
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 804481c:	460a      	mov	r2, r1
 804481e:	ea4f 0399 	mov.w	r3, r9, lsr #2
 8044822:	f105 0180 	add.w	r1, r5, #128	; 0x80
 8044826:	f7fe fd27 	bl	8043278 <HAL_DMA_Start_IT>
 804482a:	4605      	mov	r5, r0
 804482c:	b168      	cbz	r0, 804484a <HAL_SD_ReadBlocks_DMA+0x92>
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 804482e:	6823      	ldr	r3, [r4, #0]
 8044830:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8044832:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8044836:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8044838:	4a28      	ldr	r2, [pc, #160]	; (80448dc <HAL_SD_ReadBlocks_DMA+0x124>)
 804483a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 804483c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 804483e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8044842:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8044844:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
 8044848:	e7c1      	b.n	80447ce <HAL_SD_ReadBlocks_DMA+0x16>
      __HAL_SD_DMA_ENABLE(hsd);
 804484a:	4b25      	ldr	r3, [pc, #148]	; (80448e0 <HAL_SD_ReadBlocks_DMA+0x128>)
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 804484c:	6820      	ldr	r0, [r4, #0]
      __HAL_SD_DMA_ENABLE(hsd);
 804484e:	601e      	str	r6, [r3, #0]
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8044850:	6c63      	ldr	r3, [r4, #68]	; 0x44
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8044852:	f44f 7100 	mov.w	r1, #512	; 0x200
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8044856:	2b01      	cmp	r3, #1
        add *= 512U;
 8044858:	bf18      	it	ne
 804485a:	027f      	lslne	r7, r7, #9
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 804485c:	f001 fdab 	bl	80463b6 <SDMMC_CmdBlockLength>
      if(errorstate != HAL_SD_ERROR_NONE)
 8044860:	b148      	cbz	r0, 8044876 <HAL_SD_ReadBlocks_DMA+0xbe>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8044862:	6823      	ldr	r3, [r4, #0]
 8044864:	4a1d      	ldr	r2, [pc, #116]	; (80448dc <HAL_SD_ReadBlocks_DMA+0x124>)
 8044866:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8044868:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 804486a:	2501      	movs	r5, #1
        hsd->ErrorCode |= errorstate;
 804486c:	4318      	orrs	r0, r3
 804486e:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8044870:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
        return HAL_ERROR;
 8044874:	e7ac      	b.n	80447d0 <HAL_SD_ReadBlocks_DMA+0x18>
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8044876:	f04f 33ff 	mov.w	r3, #4294967295
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 804487a:	e9cd 3900 	strd	r3, r9, [sp]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 804487e:	2290      	movs	r2, #144	; 0x90
 8044880:	2302      	movs	r3, #2
 8044882:	e9cd 2302 	strd	r2, r3, [sp, #8]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8044886:	9004      	str	r0, [sp, #16]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8044888:	2301      	movs	r3, #1
      (void)SDIO_ConfigData(hsd->Instance, &config);
 804488a:	4669      	mov	r1, sp
 804488c:	6820      	ldr	r0, [r4, #0]
      config.DPSM          = SDIO_DPSM_ENABLE;
 804488e:	9305      	str	r3, [sp, #20]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8044890:	f001 fd7e 	bl	8046390 <SDIO_ConfigData>
      if(NumberOfBlocks > 1U)
 8044894:	f1b8 0f01 	cmp.w	r8, #1
 8044898:	d913      	bls.n	80448c2 <HAL_SD_ReadBlocks_DMA+0x10a>
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 804489a:	2382      	movs	r3, #130	; 0x82
 804489c:	6323      	str	r3, [r4, #48]	; 0x30
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 804489e:	4639      	mov	r1, r7
 80448a0:	6820      	ldr	r0, [r4, #0]
 80448a2:	f001 fdb8 	bl	8046416 <SDMMC_CmdReadMultiBlock>
      if(errorstate != HAL_SD_ERROR_NONE)
 80448a6:	2800      	cmp	r0, #0
 80448a8:	d092      	beq.n	80447d0 <HAL_SD_ReadBlocks_DMA+0x18>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80448aa:	6823      	ldr	r3, [r4, #0]
 80448ac:	4a0b      	ldr	r2, [pc, #44]	; (80448dc <HAL_SD_ReadBlocks_DMA+0x124>)
 80448ae:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80448b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80448b2:	2501      	movs	r5, #1
        hsd->ErrorCode |= errorstate;
 80448b4:	4318      	orrs	r0, r3
        hsd->Context = SD_CONTEXT_NONE;
 80448b6:	2300      	movs	r3, #0
        hsd->ErrorCode |= errorstate;
 80448b8:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80448ba:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80448be:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_ERROR;
 80448c0:	e786      	b.n	80447d0 <HAL_SD_ReadBlocks_DMA+0x18>
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80448c2:	2381      	movs	r3, #129	; 0x81
 80448c4:	6323      	str	r3, [r4, #48]	; 0x30
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80448c6:	4639      	mov	r1, r7
 80448c8:	6820      	ldr	r0, [r4, #0]
 80448ca:	f001 fd8c 	bl	80463e6 <SDMMC_CmdReadSingleBlock>
 80448ce:	e7ea      	b.n	80448a6 <HAL_SD_ReadBlocks_DMA+0xee>
    return HAL_BUSY;
 80448d0:	2502      	movs	r5, #2
 80448d2:	e77d      	b.n	80447d0 <HAL_SD_ReadBlocks_DMA+0x18>
 80448d4:	08044a17 	.word	0x08044a17
 80448d8:	08044f39 	.word	0x08044f39
 80448dc:	004005ff 	.word	0x004005ff
 80448e0:	4225858c 	.word	0x4225858c

080448e4 <HAL_SD_WriteBlocks_DMA>:
{
 80448e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80448e8:	4604      	mov	r4, r0
 80448ea:	b087      	sub	sp, #28
 80448ec:	4616      	mov	r6, r2
 80448ee:	461f      	mov	r7, r3
  if(NULL == pData)
 80448f0:	4689      	mov	r9, r1
 80448f2:	b941      	cbnz	r1, 8044906 <HAL_SD_WriteBlocks_DMA+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80448f4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80448f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80448fa:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 80448fc:	2501      	movs	r5, #1
}
 80448fe:	4628      	mov	r0, r5
 8044900:	b007      	add	sp, #28
 8044902:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 8044906:	f890 5034 	ldrb.w	r5, [r0, #52]	; 0x34
 804490a:	b2ed      	uxtb	r5, r5
 804490c:	2d01      	cmp	r5, #1
 804490e:	d177      	bne.n	8044a00 <HAL_SD_WriteBlocks_DMA+0x11c>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8044910:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8044912:	18f3      	adds	r3, r6, r3
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8044914:	2200      	movs	r2, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8044916:	428b      	cmp	r3, r1
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8044918:	6382      	str	r2, [r0, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 804491a:	d904      	bls.n	8044926 <HAL_SD_WriteBlocks_DMA+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 804491c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 804491e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8044922:	6383      	str	r3, [r0, #56]	; 0x38
      return HAL_ERROR;
 8044924:	e7eb      	b.n	80448fe <HAL_SD_WriteBlocks_DMA+0x1a>
    hsd->State = HAL_SD_STATE_BUSY;
 8044926:	2303      	movs	r3, #3
 8044928:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 804492c:	6800      	ldr	r0, [r0, #0]
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 804492e:	4935      	ldr	r1, [pc, #212]	; (8044a04 <HAL_SD_WriteBlocks_DMA+0x120>)
    hsd->Instance->DCTRL = 0U;
 8044930:	62c2      	str	r2, [r0, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8044932:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8044934:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8044938:	f043 0302 	orr.w	r3, r3, #2
 804493c:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 804493e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8044940:	63d9      	str	r1, [r3, #60]	; 0x3c
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8044942:	4931      	ldr	r1, [pc, #196]	; (8044a08 <HAL_SD_WriteBlocks_DMA+0x124>)
    hsd->hdmatx->XferAbortCallback = NULL;
 8044944:	e9c3 1213 	strd	r1, r2, [r3, #76]	; 0x4c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8044948:	6c63      	ldr	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 804494a:	f44f 7100 	mov.w	r1, #512	; 0x200
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 804494e:	2b01      	cmp	r3, #1
      add *= 512U;
 8044950:	bf18      	it	ne
 8044952:	0276      	lslne	r6, r6, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8044954:	f001 fd2f 	bl	80463b6 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8044958:	4602      	mov	r2, r0
 804495a:	6820      	ldr	r0, [r4, #0]
 804495c:	b142      	cbz	r2, 8044970 <HAL_SD_WriteBlocks_DMA+0x8c>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 804495e:	4b2b      	ldr	r3, [pc, #172]	; (8044a0c <HAL_SD_WriteBlocks_DMA+0x128>)
 8044960:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8044962:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8044964:	2501      	movs	r5, #1
      hsd->ErrorCode |= errorstate;
 8044966:	4313      	orrs	r3, r2
 8044968:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 804496a:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
      return HAL_ERROR;
 804496e:	e7c6      	b.n	80448fe <HAL_SD_WriteBlocks_DMA+0x1a>
    if(NumberOfBlocks > 1U)
 8044970:	2f01      	cmp	r7, #1
 8044972:	d912      	bls.n	804499a <HAL_SD_WriteBlocks_DMA+0xb6>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8044974:	23a0      	movs	r3, #160	; 0xa0
 8044976:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8044978:	4631      	mov	r1, r6
 804497a:	f001 fd7c 	bl	8046476 <SDMMC_CmdWriteMultiBlock>
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 804497e:	4606      	mov	r6, r0
 8044980:	6822      	ldr	r2, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 8044982:	b180      	cbz	r0, 80449a6 <HAL_SD_WriteBlocks_DMA+0xc2>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8044984:	4b21      	ldr	r3, [pc, #132]	; (8044a0c <HAL_SD_WriteBlocks_DMA+0x128>)
 8044986:	6393      	str	r3, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8044988:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 804498a:	2501      	movs	r5, #1
      hsd->ErrorCode |= errorstate;
 804498c:	431e      	orrs	r6, r3
      hsd->Context = SD_CONTEXT_NONE;
 804498e:	2300      	movs	r3, #0
      hsd->ErrorCode |= errorstate;
 8044990:	63a6      	str	r6, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8044992:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8044996:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8044998:	e7b1      	b.n	80448fe <HAL_SD_WriteBlocks_DMA+0x1a>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 804499a:	2390      	movs	r3, #144	; 0x90
 804499c:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 804499e:	4631      	mov	r1, r6
 80449a0:	f001 fd51 	bl	8046446 <SDMMC_CmdWriteSingleBlock>
 80449a4:	e7eb      	b.n	804497e <HAL_SD_WriteBlocks_DMA+0x9a>
    __HAL_SD_DMA_ENABLE(hsd);
 80449a6:	4b1a      	ldr	r3, [pc, #104]	; (8044a10 <HAL_SD_WriteBlocks_DMA+0x12c>)
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80449a8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    __HAL_SD_DMA_ENABLE(hsd);
 80449aa:	f04f 0801 	mov.w	r8, #1
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80449ae:	027f      	lsls	r7, r7, #9
    __HAL_SD_DMA_ENABLE(hsd);
 80449b0:	f8c3 8000 	str.w	r8, [r3]
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80449b4:	3280      	adds	r2, #128	; 0x80
 80449b6:	08bb      	lsrs	r3, r7, #2
 80449b8:	4649      	mov	r1, r9
 80449ba:	f7fe fc5d 	bl	8043278 <HAL_DMA_Start_IT>
 80449be:	4605      	mov	r5, r0
 80449c0:	b180      	cbz	r0, 80449e4 <HAL_SD_WriteBlocks_DMA+0x100>
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80449c2:	6822      	ldr	r2, [r4, #0]
 80449c4:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80449c6:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80449ca:	f023 0302 	bic.w	r3, r3, #2
 80449ce:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80449d0:	4b0e      	ldr	r3, [pc, #56]	; (8044a0c <HAL_SD_WriteBlocks_DMA+0x128>)
 80449d2:	6393      	str	r3, [r2, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80449d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80449d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80449da:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80449dc:	f884 8034 	strb.w	r8, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80449e0:	6326      	str	r6, [r4, #48]	; 0x30
 80449e2:	e78b      	b.n	80448fc <HAL_SD_WriteBlocks_DMA+0x18>
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80449e4:	f04f 33ff 	mov.w	r3, #4294967295
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80449e8:	e9cd 3700 	strd	r3, r7, [sp]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80449ec:	4669      	mov	r1, sp
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80449ee:	2390      	movs	r3, #144	; 0x90
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80449f0:	6820      	ldr	r0, [r4, #0]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80449f2:	e9cd 3602 	strd	r3, r6, [sp, #8]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80449f6:	e9cd 6804 	strd	r6, r8, [sp, #16]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80449fa:	f001 fcc9 	bl	8046390 <SDIO_ConfigData>
      return HAL_OK;
 80449fe:	e77e      	b.n	80448fe <HAL_SD_WriteBlocks_DMA+0x1a>
    return HAL_BUSY;
 8044a00:	2502      	movs	r5, #2
 8044a02:	e77c      	b.n	80448fe <HAL_SD_WriteBlocks_DMA+0x1a>
 8044a04:	080446e1 	.word	0x080446e1
 8044a08:	08044f39 	.word	0x08044f39
 8044a0c:	004005ff 	.word	0x004005ff
 8044a10:	4225858c 	.word	0x4225858c

08044a14 <HAL_SD_ErrorCallback>:
 8044a14:	4770      	bx	lr

08044a16 <SD_DMAReceiveCplt>:
{
 8044a16:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8044a18:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8044a1a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8044a1c:	2b82      	cmp	r3, #130	; 0x82
 8044a1e:	d109      	bne.n	8044a34 <SD_DMAReceiveCplt+0x1e>
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8044a20:	6820      	ldr	r0, [r4, #0]
 8044a22:	f001 fd41 	bl	80464a8 <SDMMC_CmdStopTransfer>
    if(errorstate != HAL_SD_ERROR_NONE)
 8044a26:	b128      	cbz	r0, 8044a34 <SD_DMAReceiveCplt+0x1e>
      hsd->ErrorCode |= errorstate;
 8044a28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8044a2a:	4318      	orrs	r0, r3
 8044a2c:	63a0      	str	r0, [r4, #56]	; 0x38
      HAL_SD_ErrorCallback(hsd);
 8044a2e:	4620      	mov	r0, r4
 8044a30:	f7ff fff0 	bl	8044a14 <HAL_SD_ErrorCallback>
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8044a34:	6823      	ldr	r3, [r4, #0]
 8044a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8044a38:	f022 0208 	bic.w	r2, r2, #8
 8044a3c:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8044a3e:	f240 523a 	movw	r2, #1338	; 0x53a
 8044a42:	639a      	str	r2, [r3, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 8044a44:	2301      	movs	r3, #1
 8044a46:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8044a4a:	2300      	movs	r3, #0
 8044a4c:	6323      	str	r3, [r4, #48]	; 0x30
  HAL_SD_RxCpltCallback(hsd);
 8044a4e:	4620      	mov	r0, r4
 8044a50:	f7fe f989 	bl	8042d66 <HAL_SD_RxCpltCallback>
}
 8044a54:	bd10      	pop	{r4, pc}
	...

08044a58 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8044a58:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8044a5a:	0f9a      	lsrs	r2, r3, #30
 8044a5c:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8044a5e:	f3c3 6283 	ubfx	r2, r3, #26, #4
 8044a62:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8044a64:	f3c3 6201 	ubfx	r2, r3, #24, #2
 8044a68:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8044a6a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8044a6e:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8044a70:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8044a74:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8044a76:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8044a78:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8044a7a:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8044a7c:	0d1a      	lsrs	r2, r3, #20
 8044a7e:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8044a80:	f3c3 4203 	ubfx	r2, r3, #16, #4
 8044a84:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8044a86:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8044a8a:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8044a8c:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8044a90:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8044a92:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8044a96:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8044a98:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8044a9c:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8044a9e:	2200      	movs	r2, #0
 8044aa0:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8044aa2:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 8044aa4:	b510      	push	{r4, lr}
  if(hsd->SdCard.CardType == CARD_SDSC)
 8044aa6:	2a00      	cmp	r2, #0
 8044aa8:	d16b      	bne.n	8044b82 <HAL_SD_GetCardCSD+0x12a>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8044aaa:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8044aac:	f640 74fc 	movw	r4, #4092	; 0xffc
 8044ab0:	ea04 0383 	and.w	r3, r4, r3, lsl #2
 8044ab4:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8044ab8:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8044aba:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 8044abe:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8044ac0:	f3c2 6302 	ubfx	r3, r2, #24, #3
 8044ac4:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8044ac6:	f3c2 5342 	ubfx	r3, r2, #21, #3
 8044aca:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8044acc:	f3c2 4382 	ubfx	r3, r2, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8044ad0:	f3c2 32c2 	ubfx	r2, r2, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8044ad4:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8044ad6:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8044ad8:	690b      	ldr	r3, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8044ada:	7e0a      	ldrb	r2, [r1, #24]
 8044adc:	f002 0207 	and.w	r2, r2, #7
 8044ae0:	3202      	adds	r2, #2
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8044ae2:	3301      	adds	r3, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8044ae4:	4093      	lsls	r3, r2
 8044ae6:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8044ae8:	7a0a      	ldrb	r2, [r1, #8]
 8044aea:	f002 040f 	and.w	r4, r2, #15
 8044aee:	2201      	movs	r2, #1
 8044af0:	40a2      	lsls	r2, r4
 8044af2:	6582      	str	r2, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8044af4:	0a52      	lsrs	r2, r2, #9
 8044af6:	4353      	muls	r3, r2
 8044af8:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8044afa:	f44f 7300 	mov.w	r3, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8044afe:	6603      	str	r3, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8044b00:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8044b02:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8044b06:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8044b08:	f3c3 12c6 	ubfx	r2, r3, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8044b0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8044b10:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8044b12:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8044b14:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8044b16:	0fda      	lsrs	r2, r3, #31
 8044b18:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8044b1a:	f3c3 7241 	ubfx	r2, r3, #29, #2
 8044b1e:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8044b20:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8044b24:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8044b26:	f3c3 5283 	ubfx	r2, r3, #22, #4
 8044b2a:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8044b2c:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8044b30:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 8044b34:	2000      	movs	r0, #0
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8044b36:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3 = 0;
 8044b3a:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8044b3e:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8044b42:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8044b46:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8044b4a:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8044b4e:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8044b52:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8044b56:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8044b5a:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8044b5e:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8044b62:	f3c3 2281 	ubfx	r2, r3, #10, #2
 8044b66:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8044b6a:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8044b6e:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8044b72:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8044b76:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8044b7a:	2301      	movs	r3, #1
 8044b7c:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 8044b80:	bd10      	pop	{r4, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8044b82:	2a01      	cmp	r2, #1
 8044b84:	d10f      	bne.n	8044ba6 <HAL_SD_GetCardCSD+0x14e>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8044b86:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 8044b8a:	041b      	lsls	r3, r3, #16
 8044b8c:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8044b90:	4313      	orrs	r3, r2
 8044b92:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8044b94:	690b      	ldr	r3, [r1, #16]
 8044b96:	3301      	adds	r3, #1
 8044b98:	029b      	lsls	r3, r3, #10
 8044b9a:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8044b9c:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8044b9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8044ba2:	6583      	str	r3, [r0, #88]	; 0x58
 8044ba4:	e7ab      	b.n	8044afe <HAL_SD_GetCardCSD+0xa6>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8044ba6:	6803      	ldr	r3, [r0, #0]
 8044ba8:	4a05      	ldr	r2, [pc, #20]	; (8044bc0 <HAL_SD_GetCardCSD+0x168>)
 8044baa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8044bac:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8044bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8044bb2:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8044bb4:	2301      	movs	r3, #1
 8044bb6:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8044bba:	4618      	mov	r0, r3
 8044bbc:	e7e0      	b.n	8044b80 <HAL_SD_GetCardCSD+0x128>
 8044bbe:	bf00      	nop
 8044bc0:	004005ff 	.word	0x004005ff

08044bc4 <HAL_SD_InitCard>:
{
 8044bc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8044bc8:	2300      	movs	r3, #0
{
 8044bca:	b099      	sub	sp, #100	; 0x64
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8044bcc:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8044bd0:	e9cd 3307 	strd	r3, r3, [sp, #28]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8044bd4:	930b      	str	r3, [sp, #44]	; 0x2c
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8044bd6:	2376      	movs	r3, #118	; 0x76
 8044bd8:	930c      	str	r3, [sp, #48]	; 0x30
  status = SDIO_Init(hsd->Instance, Init);
 8044bda:	ab0a      	add	r3, sp, #40	; 0x28
{
 8044bdc:	4604      	mov	r4, r0
  status = SDIO_Init(hsd->Instance, Init);
 8044bde:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8044be2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8044be6:	ab07      	add	r3, sp, #28
 8044be8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8044bea:	6820      	ldr	r0, [r4, #0]
 8044bec:	f001 fb8a 	bl	8046304 <SDIO_Init>
  if(status != HAL_OK)
 8044bf0:	4605      	mov	r5, r0
 8044bf2:	2800      	cmp	r0, #0
 8044bf4:	f040 80d4 	bne.w	8044da0 <HAL_SD_InitCard+0x1dc>
  __HAL_SD_DISABLE(hsd);
 8044bf8:	4f6a      	ldr	r7, [pc, #424]	; (8044da4 <HAL_SD_InitCard+0x1e0>)
  __HAL_SD_ENABLE(hsd);
 8044bfa:	2601      	movs	r6, #1
  __HAL_SD_DISABLE(hsd);
 8044bfc:	6038      	str	r0, [r7, #0]
  (void)SDIO_PowerState_ON(hsd->Instance);
 8044bfe:	6820      	ldr	r0, [r4, #0]
 8044c00:	f001 fba4 	bl	804634c <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8044c04:	603e      	str	r6, [r7, #0]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8044c06:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 8044c08:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8044c0a:	f001 fc7f 	bl	804650c <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8044c0e:	4605      	mov	r5, r0
 8044c10:	b940      	cbnz	r0, 8044c24 <HAL_SD_InitCard+0x60>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8044c12:	6820      	ldr	r0, [r4, #0]
 8044c14:	f001 fca2 	bl	804655c <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8044c18:	b158      	cbz	r0, 8044c32 <HAL_SD_InitCard+0x6e>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8044c1a:	64a5      	str	r5, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8044c1c:	6820      	ldr	r0, [r4, #0]
 8044c1e:	f001 fc75 	bl	804650c <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8044c22:	b138      	cbz	r0, 8044c34 <HAL_SD_InitCard+0x70>
    hsd->State = HAL_SD_STATE_READY;
 8044c24:	2501      	movs	r5, #1
 8044c26:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8044c2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8044c2c:	4318      	orrs	r0, r3
    hsd->ErrorCode |= errorstate;
 8044c2e:	63a0      	str	r0, [r4, #56]	; 0x38
 8044c30:	e084      	b.n	8044d3c <HAL_SD_InitCard+0x178>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8044c32:	64a6      	str	r6, [r4, #72]	; 0x48
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8044c34:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8044c36:	2b01      	cmp	r3, #1
 8044c38:	d134      	bne.n	8044ca4 <HAL_SD_InitCard+0xe0>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8044c3a:	2100      	movs	r1, #0
 8044c3c:	6820      	ldr	r0, [r4, #0]
 8044c3e:	f001 fccd 	bl	80465dc <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8044c42:	b378      	cbz	r0, 8044ca4 <HAL_SD_InitCard+0xe0>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8044c44:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8044c48:	e7ec      	b.n	8044c24 <HAL_SD_InitCard+0x60>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8044c4a:	4631      	mov	r1, r6
 8044c4c:	6820      	ldr	r0, [r4, #0]
 8044c4e:	f001 fcc5 	bl	80465dc <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8044c52:	2800      	cmp	r0, #0
 8044c54:	d1e6      	bne.n	8044c24 <HAL_SD_InitCard+0x60>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8044c56:	4649      	mov	r1, r9
 8044c58:	6820      	ldr	r0, [r4, #0]
 8044c5a:	f001 fcd7 	bl	804660c <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8044c5e:	2800      	cmp	r0, #0
 8044c60:	d1f0      	bne.n	8044c44 <HAL_SD_InitCard+0x80>
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8044c62:	4631      	mov	r1, r6
 8044c64:	6820      	ldr	r0, [r4, #0]
 8044c66:	f001 fb90 	bl	804638a <SDIO_GetResponse>
    count++;
 8044c6a:	9b06      	ldr	r3, [sp, #24]
 8044c6c:	3301      	adds	r3, #1
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8044c6e:	4605      	mov	r5, r0
    count++;
 8044c70:	9306      	str	r3, [sp, #24]
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8044c72:	0fc6      	lsrs	r6, r0, #31
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8044c74:	9b06      	ldr	r3, [sp, #24]
 8044c76:	42bb      	cmp	r3, r7
 8044c78:	d801      	bhi.n	8044c7e <HAL_SD_InitCard+0xba>
 8044c7a:	2e00      	cmp	r6, #0
 8044c7c:	d0e5      	beq.n	8044c4a <HAL_SD_InitCard+0x86>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8044c7e:	9b06      	ldr	r3, [sp, #24]
 8044c80:	4543      	cmp	r3, r8
 8044c82:	d816      	bhi.n	8044cb2 <HAL_SD_InitCard+0xee>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8044c84:	f015 4580 	ands.w	r5, r5, #1073741824	; 0x40000000
 8044c88:	f04f 0301 	mov.w	r3, #1
 8044c8c:	bf18      	it	ne
 8044c8e:	461d      	movne	r5, r3
 8044c90:	6465      	str	r5, [r4, #68]	; 0x44
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8044c92:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1U;
 8044c94:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8044c98:	f001 fb60 	bl	804635c <SDIO_GetPowerState>
 8044c9c:	b960      	cbnz	r0, 8044cb8 <HAL_SD_InitCard+0xf4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8044c9e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8044ca2:	e056      	b.n	8044d52 <HAL_SD_InitCard+0x18e>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8044ca4:	f64f 77fe 	movw	r7, #65534	; 0xfffe
{
 8044ca8:	2600      	movs	r6, #0
 8044caa:	46b8      	mov	r8, r7
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8044cac:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8044da8 <HAL_SD_InitCard+0x1e4>
 8044cb0:	e7e0      	b.n	8044c74 <HAL_SD_InitCard+0xb0>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8044cb2:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8044cb6:	e7b5      	b.n	8044c24 <HAL_SD_InitCard+0x60>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8044cb8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8044cba:	2b03      	cmp	r3, #3
 8044cbc:	d019      	beq.n	8044cf2 <HAL_SD_InitCard+0x12e>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8044cbe:	6820      	ldr	r0, [r4, #0]
 8044cc0:	f001 fced 	bl	804669e <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8044cc4:	2800      	cmp	r0, #0
 8044cc6:	d144      	bne.n	8044d52 <HAL_SD_InitCard+0x18e>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8044cc8:	4601      	mov	r1, r0
 8044cca:	6820      	ldr	r0, [r4, #0]
 8044ccc:	f001 fb5d 	bl	804638a <SDIO_GetResponse>
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8044cd0:	2104      	movs	r1, #4
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8044cd2:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8044cd4:	6820      	ldr	r0, [r4, #0]
 8044cd6:	f001 fb58 	bl	804638a <SDIO_GetResponse>
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8044cda:	2108      	movs	r1, #8
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8044cdc:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8044cde:	6820      	ldr	r0, [r4, #0]
 8044ce0:	f001 fb53 	bl	804638a <SDIO_GetResponse>
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8044ce4:	210c      	movs	r1, #12
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8044ce6:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8044ce8:	6820      	ldr	r0, [r4, #0]
 8044cea:	f001 fb4e 	bl	804638a <SDIO_GetResponse>
 8044cee:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED)
 8044cf2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8044cf4:	2b03      	cmp	r3, #3
 8044cf6:	d125      	bne.n	8044d44 <HAL_SD_InitCard+0x180>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8044cf8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8044cfa:	2b03      	cmp	r3, #3
 8044cfc:	d12f      	bne.n	8044d5e <HAL_SD_InitCard+0x19a>
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8044cfe:	2104      	movs	r1, #4
 8044d00:	6820      	ldr	r0, [r4, #0]
 8044d02:	f001 fb42 	bl	804638a <SDIO_GetResponse>
 8044d06:	0d00      	lsrs	r0, r0, #20
 8044d08:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8044d0a:	a90d      	add	r1, sp, #52	; 0x34
 8044d0c:	4620      	mov	r0, r4
 8044d0e:	f7ff fea3 	bl	8044a58 <HAL_SD_GetCardCSD>
 8044d12:	4605      	mov	r5, r0
 8044d14:	2800      	cmp	r0, #0
 8044d16:	d140      	bne.n	8044d9a <HAL_SD_InitCard+0x1d6>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8044d18:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8044d1a:	4603      	mov	r3, r0
 8044d1c:	0412      	lsls	r2, r2, #16
 8044d1e:	6820      	ldr	r0, [r4, #0]
 8044d20:	f001 fbdc 	bl	80464dc <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8044d24:	b9a8      	cbnz	r0, 8044d52 <HAL_SD_InitCard+0x18e>
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8044d26:	f104 0310 	add.w	r3, r4, #16
 8044d2a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8044d2e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8044d32:	1d23      	adds	r3, r4, #4
 8044d34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8044d36:	6820      	ldr	r0, [r4, #0]
 8044d38:	f001 fae4 	bl	8046304 <SDIO_Init>
}
 8044d3c:	4628      	mov	r0, r5
 8044d3e:	b019      	add	sp, #100	; 0x64
 8044d40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8044d44:	f10d 0116 	add.w	r1, sp, #22
 8044d48:	6820      	ldr	r0, [r4, #0]
 8044d4a:	f001 fcd3 	bl	80466f4 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8044d4e:	2800      	cmp	r0, #0
 8044d50:	d0d2      	beq.n	8044cf8 <HAL_SD_InitCard+0x134>
    hsd->State = HAL_SD_STATE_READY;
 8044d52:	2501      	movs	r5, #1
 8044d54:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8044d58:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8044d5a:	4308      	orrs	r0, r1
 8044d5c:	e767      	b.n	8044c2e <HAL_SD_InitCard+0x6a>
    hsd->SdCard.RelCardAdd = sd_rca;
 8044d5e:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8044d62:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8044d64:	6820      	ldr	r0, [r4, #0]
 8044d66:	0409      	lsls	r1, r1, #16
 8044d68:	f001 fcae 	bl	80466c8 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8044d6c:	2800      	cmp	r0, #0
 8044d6e:	d1f0      	bne.n	8044d52 <HAL_SD_InitCard+0x18e>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8044d70:	4601      	mov	r1, r0
 8044d72:	6820      	ldr	r0, [r4, #0]
 8044d74:	f001 fb09 	bl	804638a <SDIO_GetResponse>
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8044d78:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8044d7a:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8044d7c:	6820      	ldr	r0, [r4, #0]
 8044d7e:	f001 fb04 	bl	804638a <SDIO_GetResponse>
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8044d82:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8044d84:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8044d86:	6820      	ldr	r0, [r4, #0]
 8044d88:	f001 faff 	bl	804638a <SDIO_GetResponse>
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8044d8c:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8044d8e:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8044d90:	6820      	ldr	r0, [r4, #0]
 8044d92:	f001 fafa 	bl	804638a <SDIO_GetResponse>
 8044d96:	6720      	str	r0, [r4, #112]	; 0x70
 8044d98:	e7b1      	b.n	8044cfe <HAL_SD_InitCard+0x13a>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8044d9a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8044d9e:	e7d8      	b.n	8044d52 <HAL_SD_InitCard+0x18e>
    return HAL_ERROR;
 8044da0:	2501      	movs	r5, #1
 8044da2:	e7cb      	b.n	8044d3c <HAL_SD_InitCard+0x178>
 8044da4:	422580a0 	.word	0x422580a0
 8044da8:	c1100000 	.word	0xc1100000

08044dac <HAL_SD_Init>:
{
 8044dac:	b510      	push	{r4, lr}
  if(hsd == NULL)
 8044dae:	4604      	mov	r4, r0
 8044db0:	b908      	cbnz	r0, 8044db6 <HAL_SD_Init+0xa>
    return HAL_ERROR;
 8044db2:	2001      	movs	r0, #1
}
 8044db4:	bd10      	pop	{r4, pc}
  if(hsd->State == HAL_SD_STATE_RESET)
 8044db6:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8044dba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8044dbe:	b913      	cbnz	r3, 8044dc6 <HAL_SD_Init+0x1a>
    hsd->Lock = HAL_UNLOCKED;
 8044dc0:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8044dc2:	f006 fea7 	bl	804bb14 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 8044dc6:	2303      	movs	r3, #3
 8044dc8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8044dcc:	4620      	mov	r0, r4
 8044dce:	f7ff fef9 	bl	8044bc4 <HAL_SD_InitCard>
 8044dd2:	2800      	cmp	r0, #0
 8044dd4:	d1ed      	bne.n	8044db2 <HAL_SD_Init+0x6>
  hsd->State = HAL_SD_STATE_READY;
 8044dd6:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8044dd8:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8044dda:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8044ddc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8044de0:	e7e8      	b.n	8044db4 <HAL_SD_Init+0x8>

08044de2 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8044de2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8044de4:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8044de6:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8044de8:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8044dea:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8044dec:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8044dee:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8044df0:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8044df2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8044df4:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8044df6:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8044df8:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8044dfa:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8044dfc:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8044dfe:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8044e00:	61cb      	str	r3, [r1, #28]
}
 8044e02:	2000      	movs	r0, #0
 8044e04:	4770      	bx	lr
	...

08044e08 <HAL_SD_ConfigWideBusOperation>:
{
 8044e08:	b5f0      	push	{r4, r5, r6, r7, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 8044e0a:	2303      	movs	r3, #3
 8044e0c:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 8044e10:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8044e12:	2b03      	cmp	r3, #3
{
 8044e14:	b08b      	sub	sp, #44	; 0x2c
 8044e16:	4604      	mov	r4, r0
 8044e18:	460e      	mov	r6, r1
  if(hsd->SdCard.CardType != CARD_SECURED)
 8044e1a:	d002      	beq.n	8044e22 <HAL_SD_ConfigWideBusOperation+0x1a>
    if(WideMode == SDIO_BUS_WIDE_8B)
 8044e1c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8044e20:	d103      	bne.n	8044e2a <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8044e22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8044e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8044e28:	e053      	b.n	8044ed2 <HAL_SD_ConfigWideBusOperation+0xca>
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8044e2a:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8044e2e:	6800      	ldr	r0, [r0, #0]
 8044e30:	d12a      	bne.n	8044e88 <HAL_SD_ConfigWideBusOperation+0x80>
  uint32_t scr[2U] = {0U, 0U};
 8044e32:	2100      	movs	r1, #0
 8044e34:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8044e38:	f001 faa7 	bl	804638a <SDIO_GetResponse>
 8044e3c:	0180      	lsls	r0, r0, #6
 8044e3e:	d41e      	bmi.n	8044e7e <HAL_SD_ConfigWideBusOperation+0x76>
  errorstate = SD_FindSCR(hsd, scr);
 8044e40:	a904      	add	r1, sp, #16
 8044e42:	4620      	mov	r0, r4
 8044e44:	f7ff fc53 	bl	80446ee <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8044e48:	b960      	cbnz	r0, 8044e64 <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8044e4a:	9b05      	ldr	r3, [sp, #20]
 8044e4c:	0359      	lsls	r1, r3, #13
 8044e4e:	d518      	bpl.n	8044e82 <HAL_SD_ConfigWideBusOperation+0x7a>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8044e50:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8044e52:	6820      	ldr	r0, [r4, #0]
 8044e54:	0409      	lsls	r1, r1, #16
 8044e56:	f001 fbc1 	bl	80465dc <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8044e5a:	b918      	cbnz	r0, 8044e64 <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8044e5c:	2102      	movs	r1, #2
 8044e5e:	6820      	ldr	r0, [r4, #0]
 8044e60:	f001 fbed 	bl	804663e <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8044e64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8044e66:	4318      	orrs	r0, r3
      hsd->ErrorCode |= errorstate;
 8044e68:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8044e6a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8044e6c:	6827      	ldr	r7, [r4, #0]
 8044e6e:	b395      	cbz	r5, 8044ed6 <HAL_SD_ConfigWideBusOperation+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8044e70:	4b26      	ldr	r3, [pc, #152]	; (8044f0c <HAL_SD_ConfigWideBusOperation+0x104>)
 8044e72:	63bb      	str	r3, [r7, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8044e74:	2001      	movs	r0, #1
 8044e76:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 8044e7a:	b00b      	add	sp, #44	; 0x2c
 8044e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8044e7e:	4630      	mov	r0, r6
 8044e80:	e7f0      	b.n	8044e64 <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8044e82:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8044e86:	e7ed      	b.n	8044e64 <HAL_SD_ConfigWideBusOperation+0x5c>
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8044e88:	bb01      	cbnz	r1, 8044ecc <HAL_SD_ConfigWideBusOperation+0xc4>
  uint32_t scr[2U] = {0U, 0U};
 8044e8a:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8044e8e:	f001 fa7c 	bl	804638a <SDIO_GetResponse>
 8044e92:	0182      	lsls	r2, r0, #6
 8044e94:	d414      	bmi.n	8044ec0 <HAL_SD_ConfigWideBusOperation+0xb8>
  errorstate = SD_FindSCR(hsd, scr);
 8044e96:	a904      	add	r1, sp, #16
 8044e98:	4620      	mov	r0, r4
 8044e9a:	f7ff fc28 	bl	80446ee <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8044e9e:	b960      	cbnz	r0, 8044eba <HAL_SD_ConfigWideBusOperation+0xb2>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8044ea0:	9b05      	ldr	r3, [sp, #20]
 8044ea2:	03db      	lsls	r3, r3, #15
 8044ea4:	d50f      	bpl.n	8044ec6 <HAL_SD_ConfigWideBusOperation+0xbe>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8044ea6:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8044ea8:	6820      	ldr	r0, [r4, #0]
 8044eaa:	0409      	lsls	r1, r1, #16
 8044eac:	f001 fb96 	bl	80465dc <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8044eb0:	b918      	cbnz	r0, 8044eba <HAL_SD_ConfigWideBusOperation+0xb2>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8044eb2:	4601      	mov	r1, r0
 8044eb4:	6820      	ldr	r0, [r4, #0]
 8044eb6:	f001 fbc2 	bl	804663e <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8044eba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8044ebc:	4308      	orrs	r0, r1
 8044ebe:	e7d3      	b.n	8044e68 <HAL_SD_ConfigWideBusOperation+0x60>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8044ec0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8044ec4:	e7f9      	b.n	8044eba <HAL_SD_ConfigWideBusOperation+0xb2>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8044ec6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8044eca:	e7f6      	b.n	8044eba <HAL_SD_ConfigWideBusOperation+0xb2>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8044ecc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8044ece:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8044ed2:	63a3      	str	r3, [r4, #56]	; 0x38
 8044ed4:	e7c9      	b.n	8044e6a <HAL_SD_ConfigWideBusOperation+0x62>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8044ed6:	6863      	ldr	r3, [r4, #4]
 8044ed8:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8044eda:	68a3      	ldr	r3, [r4, #8]
 8044edc:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8044ede:	68e3      	ldr	r3, [r4, #12]
    Init.BusWide             = WideMode;
 8044ee0:	e9cd 3606 	strd	r3, r6, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8044ee4:	6963      	ldr	r3, [r4, #20]
 8044ee6:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8044ee8:	69a3      	ldr	r3, [r4, #24]
 8044eea:	9309      	str	r3, [sp, #36]	; 0x24
    (void)SDIO_Init(hsd->Instance, Init);
 8044eec:	ab0a      	add	r3, sp, #40	; 0x28
 8044eee:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8044ef2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8044ef6:	ab04      	add	r3, sp, #16
 8044ef8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8044efa:	4638      	mov	r0, r7
 8044efc:	f001 fa02 	bl	8046304 <SDIO_Init>
  hsd->State = HAL_SD_STATE_READY;
 8044f00:	2301      	movs	r3, #1
 8044f02:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8044f06:	4628      	mov	r0, r5
 8044f08:	e7b7      	b.n	8044e7a <HAL_SD_ConfigWideBusOperation+0x72>
 8044f0a:	bf00      	nop
 8044f0c:	004005ff 	.word	0x004005ff

08044f10 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8044f10:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 8044f12:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8044f14:	0409      	lsls	r1, r1, #16
{
 8044f16:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8044f18:	6800      	ldr	r0, [r0, #0]
 8044f1a:	f001 fc3b 	bl	8046794 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8044f1e:	4601      	mov	r1, r0
 8044f20:	b928      	cbnz	r0, 8044f2e <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8044f22:	6820      	ldr	r0, [r4, #0]
 8044f24:	f001 fa31 	bl	804638a <SDIO_GetResponse>
}
 8044f28:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8044f2c:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 8044f2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8044f30:	4319      	orrs	r1, r3
 8044f32:	63a1      	str	r1, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 8044f34:	2000      	movs	r0, #0
 8044f36:	e7f7      	b.n	8044f28 <HAL_SD_GetCardState+0x18>

08044f38 <SD_DMAError>:
{
 8044f38:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8044f3a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8044f3c:	f7fe faa6 	bl	804348c <HAL_DMA_GetError>
 8044f40:	2802      	cmp	r0, #2
 8044f42:	d026      	beq.n	8044f92 <SD_DMAError+0x5a>
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8044f44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8044f46:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8044f48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8044f4a:	2a01      	cmp	r2, #1
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8044f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8044f4e:	d001      	beq.n	8044f54 <SD_DMAError+0x1c>
 8044f50:	2b01      	cmp	r3, #1
 8044f52:	d11b      	bne.n	8044f8c <SD_DMAError+0x54>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8044f54:	6823      	ldr	r3, [r4, #0]
 8044f56:	4a0f      	ldr	r2, [pc, #60]	; (8044f94 <SD_DMAError+0x5c>)
 8044f58:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8044f5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8044f5c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8044f60:	63da      	str	r2, [r3, #60]	; 0x3c
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8044f62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8044f64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8044f68:	63a3      	str	r3, [r4, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8044f6a:	4620      	mov	r0, r4
 8044f6c:	f7ff ffd0 	bl	8044f10 <HAL_SD_GetCardState>
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8044f70:	3805      	subs	r0, #5
 8044f72:	2801      	cmp	r0, #1
 8044f74:	d805      	bhi.n	8044f82 <SD_DMAError+0x4a>
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8044f76:	6820      	ldr	r0, [r4, #0]
 8044f78:	f001 fa96 	bl	80464a8 <SDMMC_CmdStopTransfer>
 8044f7c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8044f7e:	4318      	orrs	r0, r3
 8044f80:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8044f82:	2301      	movs	r3, #1
 8044f84:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8044f88:	2300      	movs	r3, #0
 8044f8a:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_SD_ErrorCallback(hsd);
 8044f8c:	4620      	mov	r0, r4
 8044f8e:	f7ff fd41 	bl	8044a14 <HAL_SD_ErrorCallback>
}
 8044f92:	bd10      	pop	{r4, pc}
 8044f94:	004005ff 	.word	0x004005ff

08044f98 <SD_DMATxAbort>:
{
 8044f98:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8044f9a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8044f9c:	6823      	ldr	r3, [r4, #0]
 8044f9e:	f240 523a 	movw	r2, #1338	; 0x53a
 8044fa2:	639a      	str	r2, [r3, #56]	; 0x38
  CardState = HAL_SD_GetCardState(hsd);
 8044fa4:	4620      	mov	r0, r4
 8044fa6:	f7ff ffb3 	bl	8044f10 <HAL_SD_GetCardState>
  hsd->State = HAL_SD_STATE_READY;
 8044faa:	2301      	movs	r3, #1
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8044fac:	3805      	subs	r0, #5
  hsd->State = HAL_SD_STATE_READY;
 8044fae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8044fb2:	2801      	cmp	r0, #1
  hsd->Context = SD_CONTEXT_NONE;
 8044fb4:	f04f 0300 	mov.w	r3, #0
 8044fb8:	6323      	str	r3, [r4, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8044fba:	d805      	bhi.n	8044fc8 <SD_DMATxAbort+0x30>
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8044fbc:	6820      	ldr	r0, [r4, #0]
 8044fbe:	f001 fa73 	bl	80464a8 <SDMMC_CmdStopTransfer>
 8044fc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8044fc4:	4318      	orrs	r0, r3
 8044fc6:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8044fc8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    HAL_SD_AbortCallback(hsd);
 8044fca:	4620      	mov	r0, r4
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8044fcc:	b913      	cbnz	r3, 8044fd4 <SD_DMATxAbort+0x3c>
    HAL_SD_AbortCallback(hsd);
 8044fce:	f7fd fec2 	bl	8042d56 <HAL_SD_AbortCallback>
}
 8044fd2:	bd10      	pop	{r4, pc}
    HAL_SD_ErrorCallback(hsd);
 8044fd4:	f7ff fd1e 	bl	8044a14 <HAL_SD_ErrorCallback>
}
 8044fd8:	e7fb      	b.n	8044fd2 <SD_DMATxAbort+0x3a>
	...

08044fdc <HAL_SD_IRQHandler>:
{
 8044fdc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t context = hsd->Context;
 8044fe0:	6b05      	ldr	r5, [r0, #48]	; 0x30
{
 8044fe2:	4604      	mov	r4, r0
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8044fe4:	6800      	ldr	r0, [r0, #0]
 8044fe6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8044fe8:	041a      	lsls	r2, r3, #16
 8044fea:	d51f      	bpl.n	804502c <HAL_SD_IRQHandler+0x50>
 8044fec:	072b      	lsls	r3, r5, #28
 8044fee:	d51d      	bpl.n	804502c <HAL_SD_IRQHandler+0x50>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
  dataremaining = hsd->RxXferSize;
 8044ff0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c

  if (dataremaining > 0U)
 8044ff2:	b1c7      	cbz	r7, 8045026 <HAL_SD_IRQHandler+0x4a>
  tmp = hsd->pRxBuffPtr;
 8044ff4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8044ff6:	1d35      	adds	r5, r6, #4
 8044ff8:	f106 0824 	add.w	r8, r6, #36	; 0x24
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8044ffc:	6820      	ldr	r0, [r4, #0]
 8044ffe:	f001 f99d 	bl	804633c <SDIO_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8045002:	0a03      	lsrs	r3, r0, #8
      *tmp = (uint8_t)(data & 0xFFU);
 8045004:	f805 0c04 	strb.w	r0, [r5, #-4]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8045008:	f805 3c03 	strb.w	r3, [r5, #-3]
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 804500c:	0c03      	lsrs	r3, r0, #16
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 804500e:	0e00      	lsrs	r0, r0, #24
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8045010:	f805 3c02 	strb.w	r3, [r5, #-2]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8045014:	f805 0c01 	strb.w	r0, [r5, #-1]
 8045018:	3504      	adds	r5, #4
    for(count = 0U; count < 8U; count++)
 804501a:	4545      	cmp	r5, r8
 804501c:	d1ee      	bne.n	8044ffc <HAL_SD_IRQHandler+0x20>
      tmp++;
      dataremaining--;
    }

    hsd->pRxBuffPtr = tmp;
 804501e:	3620      	adds	r6, #32
    hsd->RxXferSize = dataremaining;
 8045020:	3f20      	subs	r7, #32
    hsd->pRxBuffPtr = tmp;
 8045022:	62a6      	str	r6, [r4, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8045024:	62e7      	str	r7, [r4, #44]	; 0x2c
}
 8045026:	b002      	add	sp, #8
 8045028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 804502c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 804502e:	05df      	lsls	r7, r3, #23
 8045030:	d545      	bpl.n	80450be <HAL_SD_IRQHandler+0xe2>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8045032:	f44f 7380 	mov.w	r3, #256	; 0x100
 8045036:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8045038:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 804503a:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 804503e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8045042:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8045044:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 8045046:	072e      	lsls	r6, r5, #28
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8045048:	f023 0301 	bic.w	r3, r3, #1
 804504c:	62c3      	str	r3, [r0, #44]	; 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 804504e:	d51b      	bpl.n	8045088 <HAL_SD_IRQHandler+0xac>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8045050:	f015 0f22 	tst.w	r5, #34	; 0x22
 8045054:	d008      	beq.n	8045068 <HAL_SD_IRQHandler+0x8c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8045056:	f001 fa27 	bl	80464a8 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 804505a:	b128      	cbz	r0, 8045068 <HAL_SD_IRQHandler+0x8c>
          hsd->ErrorCode |= errorstate;
 804505c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 804505e:	4318      	orrs	r0, r3
 8045060:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8045062:	4620      	mov	r0, r4
 8045064:	f7ff fcd6 	bl	8044a14 <HAL_SD_ErrorCallback>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8045068:	6823      	ldr	r3, [r4, #0]
 804506a:	f240 523a 	movw	r2, #1338	; 0x53a
 804506e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8045070:	2301      	movs	r3, #1
 8045072:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8045076:	07a9      	lsls	r1, r5, #30
      hsd->Context = SD_CONTEXT_NONE;
 8045078:	f04f 0300 	mov.w	r3, #0
 804507c:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_SD_RxCpltCallback(hsd);
 804507e:	4620      	mov	r0, r4
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8045080:	d01a      	beq.n	80450b8 <HAL_SD_IRQHandler+0xdc>
        HAL_SD_RxCpltCallback(hsd);
 8045082:	f7fd fe70 	bl	8042d66 <HAL_SD_RxCpltCallback>
 8045086:	e7ce      	b.n	8045026 <HAL_SD_IRQHandler+0x4a>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8045088:	062a      	lsls	r2, r5, #24
 804508a:	d5cc      	bpl.n	8045026 <HAL_SD_IRQHandler+0x4a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 804508c:	06ab      	lsls	r3, r5, #26
 804508e:	d508      	bpl.n	80450a2 <HAL_SD_IRQHandler+0xc6>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8045090:	f001 fa0a 	bl	80464a8 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8045094:	b128      	cbz	r0, 80450a2 <HAL_SD_IRQHandler+0xc6>
          hsd->ErrorCode |= errorstate;
 8045096:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8045098:	4318      	orrs	r0, r3
 804509a:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 804509c:	4620      	mov	r0, r4
 804509e:	f7ff fcb9 	bl	8044a14 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80450a2:	07af      	lsls	r7, r5, #30
 80450a4:	d1bf      	bne.n	8045026 <HAL_SD_IRQHandler+0x4a>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80450a6:	6822      	ldr	r2, [r4, #0]
 80450a8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80450aa:	f023 0308 	bic.w	r3, r3, #8
 80450ae:	62d3      	str	r3, [r2, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80450b0:	2301      	movs	r3, #1
 80450b2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80450b6:	4620      	mov	r0, r4
 80450b8:	f7fd fe51 	bl	8042d5e <HAL_SD_TxCpltCallback>
 80450bc:	e7b3      	b.n	8045026 <HAL_SD_IRQHandler+0x4a>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80450be:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80450c0:	045e      	lsls	r6, r3, #17
 80450c2:	d526      	bpl.n	8045112 <HAL_SD_IRQHandler+0x136>
 80450c4:	0729      	lsls	r1, r5, #28
 80450c6:	d524      	bpl.n	8045112 <HAL_SD_IRQHandler+0x136>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
  dataremaining = hsd->TxXferSize;
 80450c8:	6a67      	ldr	r7, [r4, #36]	; 0x24

  if (dataremaining > 0U)
 80450ca:	2f00      	cmp	r7, #0
 80450cc:	d0ab      	beq.n	8045026 <HAL_SD_IRQHandler+0x4a>
  tmp = hsd->pTxBuffPtr;
 80450ce:	6a26      	ldr	r6, [r4, #32]
 80450d0:	1d35      	adds	r5, r6, #4
 80450d2:	f106 0824 	add.w	r8, r6, #36	; 0x24
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
    {
      data = (uint32_t)(*tmp);
 80450d6:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 80450da:	9301      	str	r3, [sp, #4]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 8U);
 80450dc:	f815 2c03 	ldrb.w	r2, [r5, #-3]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 24U);
      tmp++;
      dataremaining--;
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80450e0:	6820      	ldr	r0, [r4, #0]
      data |= ((uint32_t)(*tmp) << 8U);
 80450e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80450e6:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 80450e8:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 80450ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80450f0:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 80450f2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80450f6:	a901      	add	r1, sp, #4
      data |= ((uint32_t)(*tmp) << 24U);
 80450f8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80450fc:	3504      	adds	r5, #4
 80450fe:	9301      	str	r3, [sp, #4]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8045100:	f001 f91f 	bl	8046342 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8045104:	4545      	cmp	r5, r8
 8045106:	d1e6      	bne.n	80450d6 <HAL_SD_IRQHandler+0xfa>
    }

    hsd->pTxBuffPtr = tmp;
 8045108:	3620      	adds	r6, #32
    hsd->TxXferSize = dataremaining;
 804510a:	3f20      	subs	r7, #32
    hsd->pTxBuffPtr = tmp;
 804510c:	6226      	str	r6, [r4, #32]
    hsd->TxXferSize = dataremaining;
 804510e:	6267      	str	r7, [r4, #36]	; 0x24
 8045110:	e789      	b.n	8045026 <HAL_SD_IRQHandler+0x4a>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8045112:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8045114:	f240 233a 	movw	r3, #570	; 0x23a
 8045118:	421a      	tst	r2, r3
 804511a:	d084      	beq.n	8045026 <HAL_SD_IRQHandler+0x4a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 804511c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 804511e:	079a      	lsls	r2, r3, #30
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8045120:	bf42      	ittt	mi
 8045122:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8045124:	f043 0302 	orrmi.w	r3, r3, #2
 8045128:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 804512a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 804512c:	071b      	lsls	r3, r3, #28
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 804512e:	bf42      	ittt	mi
 8045130:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8045132:	f043 0308 	orrmi.w	r3, r3, #8
 8045136:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8045138:	6b43      	ldr	r3, [r0, #52]	; 0x34
 804513a:	069f      	lsls	r7, r3, #26
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 804513c:	bf42      	ittt	mi
 804513e:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8045140:	f043 0320 	orrmi.w	r3, r3, #32
 8045144:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8045146:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8045148:	06de      	lsls	r6, r3, #27
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 804514a:	bf42      	ittt	mi
 804514c:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 804514e:	f043 0310 	orrmi.w	r3, r3, #16
 8045152:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8045154:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8045156:	0599      	lsls	r1, r3, #22
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8045158:	bf42      	ittt	mi
 804515a:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 804515c:	f043 0308 	orrmi.w	r3, r3, #8
 8045160:	63a3      	strmi	r3, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8045162:	f240 733a 	movw	r3, #1850	; 0x73a
 8045166:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8045168:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 804516a:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 804516e:	f023 0302 	bic.w	r3, r3, #2
 8045172:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8045174:	f001 f998 	bl	80464a8 <SDMMC_CmdStopTransfer>
 8045178:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 804517a:	072a      	lsls	r2, r5, #28
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 804517c:	ea40 0003 	orr.w	r0, r0, r3
 8045180:	63a0      	str	r0, [r4, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8045182:	d508      	bpl.n	8045196 <HAL_SD_IRQHandler+0x1ba>
      hsd->State = HAL_SD_STATE_READY;
 8045184:	2301      	movs	r3, #1
 8045186:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 804518a:	2300      	movs	r3, #0
 804518c:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 804518e:	4620      	mov	r0, r4
 8045190:	f7ff fc40 	bl	8044a14 <HAL_SD_ErrorCallback>
 8045194:	e747      	b.n	8045026 <HAL_SD_IRQHandler+0x4a>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8045196:	062b      	lsls	r3, r5, #24
 8045198:	f57f af45 	bpl.w	8045026 <HAL_SD_IRQHandler+0x4a>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 804519c:	f015 0f30 	tst.w	r5, #48	; 0x30
 80451a0:	d00b      	beq.n	80451ba <HAL_SD_IRQHandler+0x1de>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80451a2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80451a4:	4b10      	ldr	r3, [pc, #64]	; (80451e8 <HAL_SD_IRQHandler+0x20c>)
 80451a6:	6503      	str	r3, [r0, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80451a8:	f7fe f8a0 	bl	80432ec <HAL_DMA_Abort_IT>
 80451ac:	2800      	cmp	r0, #0
 80451ae:	f43f af3a 	beq.w	8045026 <HAL_SD_IRQHandler+0x4a>
          SD_DMATxAbort(hsd->hdmatx);
 80451b2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
          SD_DMARxAbort(hsd->hdmarx);
 80451b4:	f7ff fef0 	bl	8044f98 <SD_DMATxAbort>
 80451b8:	e735      	b.n	8045026 <HAL_SD_IRQHandler+0x4a>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80451ba:	f015 0503 	ands.w	r5, r5, #3
 80451be:	d009      	beq.n	80451d4 <HAL_SD_IRQHandler+0x1f8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80451c0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80451c2:	4b0a      	ldr	r3, [pc, #40]	; (80451ec <HAL_SD_IRQHandler+0x210>)
 80451c4:	6503      	str	r3, [r0, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80451c6:	f7fe f891 	bl	80432ec <HAL_DMA_Abort_IT>
 80451ca:	2800      	cmp	r0, #0
 80451cc:	f43f af2b 	beq.w	8045026 <HAL_SD_IRQHandler+0x4a>
          SD_DMARxAbort(hsd->hdmarx);
 80451d0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80451d2:	e7ef      	b.n	80451b4 <HAL_SD_IRQHandler+0x1d8>
        hsd->State = HAL_SD_STATE_READY;
 80451d4:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80451d6:	63a5      	str	r5, [r4, #56]	; 0x38
        HAL_SD_AbortCallback(hsd);
 80451d8:	4620      	mov	r0, r4
        hsd->State = HAL_SD_STATE_READY;
 80451da:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80451de:	6325      	str	r5, [r4, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80451e0:	f7fd fdb9 	bl	8042d56 <HAL_SD_AbortCallback>
}
 80451e4:	e71f      	b.n	8045026 <HAL_SD_IRQHandler+0x4a>
 80451e6:	bf00      	nop
 80451e8:	08044f99 	.word	0x08044f99
 80451ec:	080451f1 	.word	0x080451f1

080451f0 <SD_DMARxAbort>:
 80451f0:	f7ff bed2 	b.w	8044f98 <SD_DMATxAbort>

080451f4 <SPI_WaitFlagStateUntilTimeout.constprop.7>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80451f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80451f6:	4604      	mov	r4, r0
 80451f8:	460e      	mov	r6, r1
 80451fa:	4615      	mov	r5, r2
 80451fc:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80451fe:	6821      	ldr	r1, [r4, #0]
 8045200:	688a      	ldr	r2, [r1, #8]
 8045202:	ea36 0302 	bics.w	r3, r6, r2
 8045206:	d001      	beq.n	804520c <SPI_WaitFlagStateUntilTimeout.constprop.7+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8045208:	2000      	movs	r0, #0
 804520a:	e02d      	b.n	8045268 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x74>
    if (Timeout != HAL_MAX_DELAY)
 804520c:	1c6b      	adds	r3, r5, #1
 804520e:	d0f7      	beq.n	8045200 <SPI_WaitFlagStateUntilTimeout.constprop.7+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8045210:	f7fd fee4 	bl	8042fdc <HAL_GetTick>
 8045214:	1bc0      	subs	r0, r0, r7
 8045216:	4285      	cmp	r5, r0
 8045218:	d8f1      	bhi.n	80451fe <SPI_WaitFlagStateUntilTimeout.constprop.7+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 804521a:	6823      	ldr	r3, [r4, #0]
 804521c:	685a      	ldr	r2, [r3, #4]
 804521e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8045222:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8045224:	6862      	ldr	r2, [r4, #4]
 8045226:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 804522a:	d10a      	bne.n	8045242 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x4e>
 804522c:	68a2      	ldr	r2, [r4, #8]
 804522e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8045232:	d002      	beq.n	804523a <SPI_WaitFlagStateUntilTimeout.constprop.7+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8045234:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8045238:	d103      	bne.n	8045242 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x4e>
          __HAL_SPI_DISABLE(hspi);
 804523a:	681a      	ldr	r2, [r3, #0]
 804523c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8045240:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8045242:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8045244:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8045248:	d107      	bne.n	804525a <SPI_WaitFlagStateUntilTimeout.constprop.7+0x66>
          SPI_RESET_CRC(hspi);
 804524a:	681a      	ldr	r2, [r3, #0]
 804524c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8045250:	601a      	str	r2, [r3, #0]
 8045252:	681a      	ldr	r2, [r3, #0]
 8045254:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8045258:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 804525a:	2301      	movs	r3, #1
 804525c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8045260:	2300      	movs	r3, #0
 8045262:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8045266:	2003      	movs	r0, #3
}
 8045268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0804526c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 804526c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 804526e:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8045270:	4a12      	ldr	r2, [pc, #72]	; (80452bc <SPI_EndRxTxTransaction+0x50>)
 8045272:	4e13      	ldr	r6, [pc, #76]	; (80452c0 <SPI_EndRxTxTransaction+0x54>)
 8045274:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8045276:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8045278:	fbb5 f6f6 	udiv	r6, r5, r6
 804527c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8045280:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8045282:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8045286:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8045288:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 804528a:	d10b      	bne.n	80452a4 <SPI_EndRxTxTransaction+0x38>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 804528c:	460a      	mov	r2, r1
 804528e:	2180      	movs	r1, #128	; 0x80
 8045290:	f7ff ffb0 	bl	80451f4 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 8045294:	b178      	cbz	r0, 80452b6 <SPI_EndRxTxTransaction+0x4a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8045296:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8045298:	f043 0320 	orr.w	r3, r3, #32
 804529c:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 804529e:	2003      	movs	r0, #3
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 80452a0:	b002      	add	sp, #8
 80452a2:	bd70      	pop	{r4, r5, r6, pc}
      if (count == 0U)
 80452a4:	9b01      	ldr	r3, [sp, #4]
 80452a6:	b133      	cbz	r3, 80452b6 <SPI_EndRxTxTransaction+0x4a>
      count--;
 80452a8:	9b01      	ldr	r3, [sp, #4]
 80452aa:	3b01      	subs	r3, #1
 80452ac:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80452ae:	6823      	ldr	r3, [r4, #0]
 80452b0:	689b      	ldr	r3, [r3, #8]
 80452b2:	061b      	lsls	r3, r3, #24
 80452b4:	d4f6      	bmi.n	80452a4 <SPI_EndRxTxTransaction+0x38>
  return HAL_OK;
 80452b6:	2000      	movs	r0, #0
 80452b8:	e7f2      	b.n	80452a0 <SPI_EndRxTxTransaction+0x34>
 80452ba:	bf00      	nop
 80452bc:	2000108c 	.word	0x2000108c
 80452c0:	016e3600 	.word	0x016e3600

080452c4 <HAL_SPI_Init>:
{
 80452c4:	b510      	push	{r4, lr}
  if (hspi == NULL)
 80452c6:	4604      	mov	r4, r0
 80452c8:	2800      	cmp	r0, #0
 80452ca:	d036      	beq.n	804533a <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80452cc:	2300      	movs	r3, #0
 80452ce:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80452d0:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80452d4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80452d8:	b91b      	cbnz	r3, 80452e2 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 80452da:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80452de:	f006 fcfb 	bl	804bcd8 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 80452e2:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80452e4:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 80452e6:	2302      	movs	r3, #2
 80452e8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80452ec:	680b      	ldr	r3, [r1, #0]
 80452ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80452f2:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80452f4:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 80452f8:	4303      	orrs	r3, r0
 80452fa:	68e0      	ldr	r0, [r4, #12]
 80452fc:	4303      	orrs	r3, r0
 80452fe:	6920      	ldr	r0, [r4, #16]
 8045300:	4303      	orrs	r3, r0
 8045302:	6960      	ldr	r0, [r4, #20]
 8045304:	4303      	orrs	r3, r0
 8045306:	69e0      	ldr	r0, [r4, #28]
 8045308:	4303      	orrs	r3, r0
 804530a:	6a20      	ldr	r0, [r4, #32]
 804530c:	4303      	orrs	r3, r0
 804530e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8045310:	4303      	orrs	r3, r0
 8045312:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8045316:	4303      	orrs	r3, r0
 8045318:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 804531a:	0c12      	lsrs	r2, r2, #16
 804531c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 804531e:	f002 0204 	and.w	r2, r2, #4
 8045322:	431a      	orrs	r2, r3
 8045324:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8045326:	69cb      	ldr	r3, [r1, #28]
 8045328:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 804532c:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 804532e:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8045330:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8045332:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8045334:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8045338:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 804533a:	2001      	movs	r0, #1
 804533c:	e7fc      	b.n	8045338 <HAL_SPI_Init+0x74>

0804533e <HAL_SPI_TransmitReceive>:
{
 804533e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8045342:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8045344:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8045348:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 804534a:	2b01      	cmp	r3, #1
{
 804534c:	4604      	mov	r4, r0
 804534e:	460d      	mov	r5, r1
 8045350:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8045352:	f000 80e2 	beq.w	804551a <HAL_SPI_TransmitReceive+0x1dc>
 8045356:	2301      	movs	r3, #1
 8045358:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 804535c:	f7fd fe3e 	bl	8042fdc <HAL_GetTick>
  tmp_state           = hspi->State;
 8045360:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8045364:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8045366:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8045368:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 804536a:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 804536c:	d00a      	beq.n	8045384 <HAL_SPI_TransmitReceive+0x46>
 804536e:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8045372:	f040 80d0 	bne.w	8045516 <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8045376:	68a0      	ldr	r0, [r4, #8]
 8045378:	2800      	cmp	r0, #0
 804537a:	f040 80cc 	bne.w	8045516 <HAL_SPI_TransmitReceive+0x1d8>
 804537e:	2b04      	cmp	r3, #4
 8045380:	f040 80c9 	bne.w	8045516 <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8045384:	2d00      	cmp	r5, #0
 8045386:	f000 80c4 	beq.w	8045512 <HAL_SPI_TransmitReceive+0x1d4>
 804538a:	f1b9 0f00 	cmp.w	r9, #0
 804538e:	f000 80c0 	beq.w	8045512 <HAL_SPI_TransmitReceive+0x1d4>
 8045392:	2e00      	cmp	r6, #0
 8045394:	f000 80bd 	beq.w	8045512 <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8045398:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 804539c:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80453a0:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80453a2:	bf1c      	itt	ne
 80453a4:	2305      	movne	r3, #5
 80453a6:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80453aa:	2300      	movs	r3, #0
 80453ac:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 80453ae:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80453b2:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 80453b4:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 80453b6:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80453b8:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 80453ba:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80453bc:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80453be:	bf58      	it	pl
 80453c0:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80453c2:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 80453c4:	bf58      	it	pl
 80453c6:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 80453ca:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 80453cc:	bf58      	it	pl
 80453ce:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80453d0:	68e2      	ldr	r2, [r4, #12]
 80453d2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80453d6:	d158      	bne.n	804548a <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80453d8:	b109      	cbz	r1, 80453de <HAL_SPI_TransmitReceive+0xa0>
 80453da:	2e01      	cmp	r6, #1
 80453dc:	d107      	bne.n	80453ee <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80453de:	f835 2b02 	ldrh.w	r2, [r5], #2
 80453e2:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80453e4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80453e6:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80453e8:	3b01      	subs	r3, #1
 80453ea:	b29b      	uxth	r3, r3
 80453ec:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80453ee:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80453f0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80453f2:	b29b      	uxth	r3, r3
 80453f4:	b9ab      	cbnz	r3, 8045422 <HAL_SPI_TransmitReceive+0xe4>
 80453f6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80453f8:	b29b      	uxth	r3, r3
 80453fa:	b993      	cbnz	r3, 8045422 <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80453fc:	4642      	mov	r2, r8
 80453fe:	4639      	mov	r1, r7
 8045400:	4620      	mov	r0, r4
 8045402:	f7ff ff33 	bl	804526c <SPI_EndRxTxTransaction>
 8045406:	2800      	cmp	r0, #0
 8045408:	f040 8081 	bne.w	804550e <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 804540c:	68a3      	ldr	r3, [r4, #8]
 804540e:	2b00      	cmp	r3, #0
 8045410:	d132      	bne.n	8045478 <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8045412:	6823      	ldr	r3, [r4, #0]
 8045414:	9001      	str	r0, [sp, #4]
 8045416:	68da      	ldr	r2, [r3, #12]
 8045418:	9201      	str	r2, [sp, #4]
 804541a:	689b      	ldr	r3, [r3, #8]
 804541c:	9301      	str	r3, [sp, #4]
 804541e:	9b01      	ldr	r3, [sp, #4]
 8045420:	e02a      	b.n	8045478 <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8045422:	6822      	ldr	r2, [r4, #0]
 8045424:	6893      	ldr	r3, [r2, #8]
 8045426:	0799      	lsls	r1, r3, #30
 8045428:	d50d      	bpl.n	8045446 <HAL_SPI_TransmitReceive+0x108>
 804542a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 804542c:	b29b      	uxth	r3, r3
 804542e:	b153      	cbz	r3, 8045446 <HAL_SPI_TransmitReceive+0x108>
 8045430:	b14d      	cbz	r5, 8045446 <HAL_SPI_TransmitReceive+0x108>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8045432:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8045434:	f833 1b02 	ldrh.w	r1, [r3], #2
 8045438:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 804543a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 804543c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 804543e:	3b01      	subs	r3, #1
 8045440:	b29b      	uxth	r3, r3
 8045442:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8045444:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8045446:	6893      	ldr	r3, [r2, #8]
 8045448:	07db      	lsls	r3, r3, #31
 804544a:	d50c      	bpl.n	8045466 <HAL_SPI_TransmitReceive+0x128>
 804544c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 804544e:	b29b      	uxth	r3, r3
 8045450:	b14b      	cbz	r3, 8045466 <HAL_SPI_TransmitReceive+0x128>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8045452:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8045454:	68d2      	ldr	r2, [r2, #12]
 8045456:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 804545a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 804545c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 804545e:	3b01      	subs	r3, #1
 8045460:	b29b      	uxth	r3, r3
 8045462:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8045464:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8045466:	f7fd fdb9 	bl	8042fdc <HAL_GetTick>
 804546a:	eba0 0008 	sub.w	r0, r0, r8
 804546e:	4287      	cmp	r7, r0
 8045470:	d8be      	bhi.n	80453f0 <HAL_SPI_TransmitReceive+0xb2>
 8045472:	1c7e      	adds	r6, r7, #1
 8045474:	d0bc      	beq.n	80453f0 <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 8045476:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8045478:	2301      	movs	r3, #1
 804547a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 804547e:	2300      	movs	r3, #0
 8045480:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8045484:	b003      	add	sp, #12
 8045486:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 804548a:	b109      	cbz	r1, 8045490 <HAL_SPI_TransmitReceive+0x152>
 804548c:	2e01      	cmp	r6, #1
 804548e:	d108      	bne.n	80454a2 <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8045490:	782a      	ldrb	r2, [r5, #0]
 8045492:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8045494:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8045496:	3301      	adds	r3, #1
 8045498:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 804549a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 804549c:	3b01      	subs	r3, #1
 804549e:	b29b      	uxth	r3, r3
 80454a0:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80454a2:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80454a4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80454a6:	b29b      	uxth	r3, r3
 80454a8:	b91b      	cbnz	r3, 80454b2 <HAL_SPI_TransmitReceive+0x174>
 80454aa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80454ac:	b29b      	uxth	r3, r3
 80454ae:	2b00      	cmp	r3, #0
 80454b0:	d0a4      	beq.n	80453fc <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80454b2:	6822      	ldr	r2, [r4, #0]
 80454b4:	6893      	ldr	r3, [r2, #8]
 80454b6:	0798      	lsls	r0, r3, #30
 80454b8:	d50e      	bpl.n	80454d8 <HAL_SPI_TransmitReceive+0x19a>
 80454ba:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80454bc:	b29b      	uxth	r3, r3
 80454be:	b15b      	cbz	r3, 80454d8 <HAL_SPI_TransmitReceive+0x19a>
 80454c0:	b155      	cbz	r5, 80454d8 <HAL_SPI_TransmitReceive+0x19a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80454c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80454c4:	781b      	ldrb	r3, [r3, #0]
 80454c6:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 80454c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80454ca:	3301      	adds	r3, #1
 80454cc:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80454ce:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80454d0:	3b01      	subs	r3, #1
 80454d2:	b29b      	uxth	r3, r3
 80454d4:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80454d6:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80454d8:	6822      	ldr	r2, [r4, #0]
 80454da:	6893      	ldr	r3, [r2, #8]
 80454dc:	07d9      	lsls	r1, r3, #31
 80454de:	d50d      	bpl.n	80454fc <HAL_SPI_TransmitReceive+0x1be>
 80454e0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80454e2:	b29b      	uxth	r3, r3
 80454e4:	b153      	cbz	r3, 80454fc <HAL_SPI_TransmitReceive+0x1be>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80454e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80454e8:	68d2      	ldr	r2, [r2, #12]
 80454ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80454ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80454ee:	3301      	adds	r3, #1
 80454f0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80454f2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80454f4:	3b01      	subs	r3, #1
 80454f6:	b29b      	uxth	r3, r3
 80454f8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80454fa:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80454fc:	f7fd fd6e 	bl	8042fdc <HAL_GetTick>
 8045500:	eba0 0008 	sub.w	r0, r0, r8
 8045504:	4287      	cmp	r7, r0
 8045506:	d8cd      	bhi.n	80454a4 <HAL_SPI_TransmitReceive+0x166>
 8045508:	1c7b      	adds	r3, r7, #1
 804550a:	d0cb      	beq.n	80454a4 <HAL_SPI_TransmitReceive+0x166>
 804550c:	e7b3      	b.n	8045476 <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 804550e:	2320      	movs	r3, #32
 8045510:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8045512:	2001      	movs	r0, #1
 8045514:	e7b0      	b.n	8045478 <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 8045516:	2002      	movs	r0, #2
 8045518:	e7ae      	b.n	8045478 <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 804551a:	2002      	movs	r0, #2
 804551c:	e7b2      	b.n	8045484 <HAL_SPI_TransmitReceive+0x146>

0804551e <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 804551e:	6803      	ldr	r3, [r0, #0]
 8045520:	68da      	ldr	r2, [r3, #12]
 8045522:	f042 0201 	orr.w	r2, r2, #1
 8045526:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8045528:	689a      	ldr	r2, [r3, #8]
 804552a:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 804552e:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8045530:	bf1e      	ittt	ne
 8045532:	681a      	ldrne	r2, [r3, #0]
 8045534:	f042 0201 	orrne.w	r2, r2, #1
 8045538:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 804553a:	2000      	movs	r0, #0
 804553c:	4770      	bx	lr

0804553e <HAL_TIM_Base_Stop_IT>:
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 804553e:	6803      	ldr	r3, [r0, #0]
 8045540:	68da      	ldr	r2, [r3, #12]
 8045542:	f022 0201 	bic.w	r2, r2, #1
 8045546:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8045548:	6a19      	ldr	r1, [r3, #32]
 804554a:	f241 1211 	movw	r2, #4369	; 0x1111
 804554e:	4211      	tst	r1, r2
 8045550:	d108      	bne.n	8045564 <HAL_TIM_Base_Stop_IT+0x26>
 8045552:	6a19      	ldr	r1, [r3, #32]
 8045554:	f240 4244 	movw	r2, #1092	; 0x444
 8045558:	4211      	tst	r1, r2
 804555a:	bf02      	ittt	eq
 804555c:	681a      	ldreq	r2, [r3, #0]
 804555e:	f022 0201 	biceq.w	r2, r2, #1
 8045562:	601a      	streq	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8045564:	2000      	movs	r0, #0
 8045566:	4770      	bx	lr

08045568 <HAL_TIM_PeriodElapsedCallback>:
 8045568:	4770      	bx	lr

0804556a <HAL_TIM_OC_DelayElapsedCallback>:
 804556a:	4770      	bx	lr

0804556c <HAL_TIM_IC_CaptureCallback>:
 804556c:	4770      	bx	lr

0804556e <HAL_TIM_PWM_PulseFinishedCallback>:
 804556e:	4770      	bx	lr

08045570 <HAL_TIM_TriggerCallback>:
 8045570:	4770      	bx	lr

08045572 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8045572:	6803      	ldr	r3, [r0, #0]
 8045574:	691a      	ldr	r2, [r3, #16]
 8045576:	0791      	lsls	r1, r2, #30
{
 8045578:	b510      	push	{r4, lr}
 804557a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 804557c:	d50e      	bpl.n	804559c <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 804557e:	68da      	ldr	r2, [r3, #12]
 8045580:	0792      	lsls	r2, r2, #30
 8045582:	d50b      	bpl.n	804559c <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8045584:	f06f 0202 	mvn.w	r2, #2
 8045588:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 804558a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 804558c:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 804558e:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8045590:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8045592:	d077      	beq.n	8045684 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8045594:	f7ff ffea 	bl	804556c <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8045598:	2300      	movs	r3, #0
 804559a:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 804559c:	6823      	ldr	r3, [r4, #0]
 804559e:	691a      	ldr	r2, [r3, #16]
 80455a0:	0750      	lsls	r0, r2, #29
 80455a2:	d510      	bpl.n	80455c6 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80455a4:	68da      	ldr	r2, [r3, #12]
 80455a6:	0751      	lsls	r1, r2, #29
 80455a8:	d50d      	bpl.n	80455c6 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80455aa:	f06f 0204 	mvn.w	r2, #4
 80455ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80455b0:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80455b2:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80455b4:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80455b8:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80455ba:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80455bc:	d068      	beq.n	8045690 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80455be:	f7ff ffd5 	bl	804556c <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80455c2:	2300      	movs	r3, #0
 80455c4:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80455c6:	6823      	ldr	r3, [r4, #0]
 80455c8:	691a      	ldr	r2, [r3, #16]
 80455ca:	0712      	lsls	r2, r2, #28
 80455cc:	d50f      	bpl.n	80455ee <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80455ce:	68da      	ldr	r2, [r3, #12]
 80455d0:	0710      	lsls	r0, r2, #28
 80455d2:	d50c      	bpl.n	80455ee <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80455d4:	f06f 0208 	mvn.w	r2, #8
 80455d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80455da:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80455dc:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80455de:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80455e0:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80455e2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80455e4:	d05a      	beq.n	804569c <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80455e6:	f7ff ffc1 	bl	804556c <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80455ea:	2300      	movs	r3, #0
 80455ec:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80455ee:	6823      	ldr	r3, [r4, #0]
 80455f0:	691a      	ldr	r2, [r3, #16]
 80455f2:	06d2      	lsls	r2, r2, #27
 80455f4:	d510      	bpl.n	8045618 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80455f6:	68da      	ldr	r2, [r3, #12]
 80455f8:	06d0      	lsls	r0, r2, #27
 80455fa:	d50d      	bpl.n	8045618 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80455fc:	f06f 0210 	mvn.w	r2, #16
 8045600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8045602:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8045604:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8045606:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 804560a:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 804560c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 804560e:	d04b      	beq.n	80456a8 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8045610:	f7ff ffac 	bl	804556c <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8045614:	2300      	movs	r3, #0
 8045616:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8045618:	6823      	ldr	r3, [r4, #0]
 804561a:	691a      	ldr	r2, [r3, #16]
 804561c:	07d1      	lsls	r1, r2, #31
 804561e:	d508      	bpl.n	8045632 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8045620:	68da      	ldr	r2, [r3, #12]
 8045622:	07d2      	lsls	r2, r2, #31
 8045624:	d505      	bpl.n	8045632 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8045626:	f06f 0201 	mvn.w	r2, #1
 804562a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 804562c:	4620      	mov	r0, r4
 804562e:	f7ff ff9b 	bl	8045568 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8045632:	6823      	ldr	r3, [r4, #0]
 8045634:	691a      	ldr	r2, [r3, #16]
 8045636:	0610      	lsls	r0, r2, #24
 8045638:	d508      	bpl.n	804564c <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 804563a:	68da      	ldr	r2, [r3, #12]
 804563c:	0611      	lsls	r1, r2, #24
 804563e:	d505      	bpl.n	804564c <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8045640:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8045644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8045646:	4620      	mov	r0, r4
 8045648:	f000 f997 	bl	804597a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 804564c:	6823      	ldr	r3, [r4, #0]
 804564e:	691a      	ldr	r2, [r3, #16]
 8045650:	0652      	lsls	r2, r2, #25
 8045652:	d508      	bpl.n	8045666 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8045654:	68da      	ldr	r2, [r3, #12]
 8045656:	0650      	lsls	r0, r2, #25
 8045658:	d505      	bpl.n	8045666 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 804565a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 804565e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8045660:	4620      	mov	r0, r4
 8045662:	f7ff ff85 	bl	8045570 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8045666:	6823      	ldr	r3, [r4, #0]
 8045668:	691a      	ldr	r2, [r3, #16]
 804566a:	0691      	lsls	r1, r2, #26
 804566c:	d522      	bpl.n	80456b4 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 804566e:	68da      	ldr	r2, [r3, #12]
 8045670:	0692      	lsls	r2, r2, #26
 8045672:	d51f      	bpl.n	80456b4 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8045674:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8045678:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 804567a:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 804567c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8045680:	f000 b97a 	b.w	8045978 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8045684:	f7ff ff71 	bl	804556a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8045688:	4620      	mov	r0, r4
 804568a:	f7ff ff70 	bl	804556e <HAL_TIM_PWM_PulseFinishedCallback>
 804568e:	e783      	b.n	8045598 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8045690:	f7ff ff6b 	bl	804556a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8045694:	4620      	mov	r0, r4
 8045696:	f7ff ff6a 	bl	804556e <HAL_TIM_PWM_PulseFinishedCallback>
 804569a:	e792      	b.n	80455c2 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 804569c:	f7ff ff65 	bl	804556a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80456a0:	4620      	mov	r0, r4
 80456a2:	f7ff ff64 	bl	804556e <HAL_TIM_PWM_PulseFinishedCallback>
 80456a6:	e7a0      	b.n	80455ea <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80456a8:	f7ff ff5f 	bl	804556a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80456ac:	4620      	mov	r0, r4
 80456ae:	f7ff ff5e 	bl	804556e <HAL_TIM_PWM_PulseFinishedCallback>
 80456b2:	e7af      	b.n	8045614 <HAL_TIM_IRQHandler+0xa2>
}
 80456b4:	bd10      	pop	{r4, pc}
	...

080456b8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80456b8:	4a30      	ldr	r2, [pc, #192]	; (804577c <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80456ba:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80456bc:	4290      	cmp	r0, r2
 80456be:	d012      	beq.n	80456e6 <TIM_Base_SetConfig+0x2e>
 80456c0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80456c4:	d00f      	beq.n	80456e6 <TIM_Base_SetConfig+0x2e>
 80456c6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80456ca:	4290      	cmp	r0, r2
 80456cc:	d00b      	beq.n	80456e6 <TIM_Base_SetConfig+0x2e>
 80456ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80456d2:	4290      	cmp	r0, r2
 80456d4:	d007      	beq.n	80456e6 <TIM_Base_SetConfig+0x2e>
 80456d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80456da:	4290      	cmp	r0, r2
 80456dc:	d003      	beq.n	80456e6 <TIM_Base_SetConfig+0x2e>
 80456de:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80456e2:	4290      	cmp	r0, r2
 80456e4:	d119      	bne.n	804571a <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80456e6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80456e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80456ec:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80456ee:	4a23      	ldr	r2, [pc, #140]	; (804577c <TIM_Base_SetConfig+0xc4>)
 80456f0:	4290      	cmp	r0, r2
 80456f2:	d029      	beq.n	8045748 <TIM_Base_SetConfig+0x90>
 80456f4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80456f8:	d026      	beq.n	8045748 <TIM_Base_SetConfig+0x90>
 80456fa:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80456fe:	4290      	cmp	r0, r2
 8045700:	d022      	beq.n	8045748 <TIM_Base_SetConfig+0x90>
 8045702:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8045706:	4290      	cmp	r0, r2
 8045708:	d01e      	beq.n	8045748 <TIM_Base_SetConfig+0x90>
 804570a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 804570e:	4290      	cmp	r0, r2
 8045710:	d01a      	beq.n	8045748 <TIM_Base_SetConfig+0x90>
 8045712:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8045716:	4290      	cmp	r0, r2
 8045718:	d016      	beq.n	8045748 <TIM_Base_SetConfig+0x90>
 804571a:	4a19      	ldr	r2, [pc, #100]	; (8045780 <TIM_Base_SetConfig+0xc8>)
 804571c:	4290      	cmp	r0, r2
 804571e:	d013      	beq.n	8045748 <TIM_Base_SetConfig+0x90>
 8045720:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8045724:	4290      	cmp	r0, r2
 8045726:	d00f      	beq.n	8045748 <TIM_Base_SetConfig+0x90>
 8045728:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 804572c:	4290      	cmp	r0, r2
 804572e:	d00b      	beq.n	8045748 <TIM_Base_SetConfig+0x90>
 8045730:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8045734:	4290      	cmp	r0, r2
 8045736:	d007      	beq.n	8045748 <TIM_Base_SetConfig+0x90>
 8045738:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 804573c:	4290      	cmp	r0, r2
 804573e:	d003      	beq.n	8045748 <TIM_Base_SetConfig+0x90>
 8045740:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8045744:	4290      	cmp	r0, r2
 8045746:	d103      	bne.n	8045750 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8045748:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 804574a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 804574e:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8045750:	694a      	ldr	r2, [r1, #20]
 8045752:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8045756:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8045758:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 804575a:	688b      	ldr	r3, [r1, #8]
 804575c:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 804575e:	680b      	ldr	r3, [r1, #0]
 8045760:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8045762:	4b06      	ldr	r3, [pc, #24]	; (804577c <TIM_Base_SetConfig+0xc4>)
 8045764:	4298      	cmp	r0, r3
 8045766:	d003      	beq.n	8045770 <TIM_Base_SetConfig+0xb8>
 8045768:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804576c:	4298      	cmp	r0, r3
 804576e:	d101      	bne.n	8045774 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8045770:	690b      	ldr	r3, [r1, #16]
 8045772:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8045774:	2301      	movs	r3, #1
 8045776:	6143      	str	r3, [r0, #20]
}
 8045778:	4770      	bx	lr
 804577a:	bf00      	nop
 804577c:	40010000 	.word	0x40010000
 8045780:	40014000 	.word	0x40014000

08045784 <HAL_TIM_Base_Init>:
{
 8045784:	b510      	push	{r4, lr}
  if (htim == NULL)
 8045786:	4604      	mov	r4, r0
 8045788:	b1a0      	cbz	r0, 80457b4 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 804578a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 804578e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8045792:	b91b      	cbnz	r3, 804579c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8045794:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8045798:	f006 f854 	bl	804b844 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 804579c:	2302      	movs	r3, #2
 804579e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80457a2:	6820      	ldr	r0, [r4, #0]
 80457a4:	1d21      	adds	r1, r4, #4
 80457a6:	f7ff ff87 	bl	80456b8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80457aa:	2301      	movs	r3, #1
 80457ac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80457b0:	2000      	movs	r0, #0
}
 80457b2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80457b4:	2001      	movs	r0, #1
 80457b6:	e7fc      	b.n	80457b2 <HAL_TIM_Base_Init+0x2e>

080457b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80457b8:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80457ba:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80457bc:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80457be:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80457c2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80457c6:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80457c8:	6083      	str	r3, [r0, #8]
}
 80457ca:	bd10      	pop	{r4, pc}

080457cc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80457cc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80457d0:	2b01      	cmp	r3, #1
{
 80457d2:	b570      	push	{r4, r5, r6, lr}
 80457d4:	4604      	mov	r4, r0
 80457d6:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80457da:	d019      	beq.n	8045810 <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 80457dc:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80457e0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80457e2:	2301      	movs	r3, #1
 80457e4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80457e8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80457ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80457ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80457f2:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80457f4:	680b      	ldr	r3, [r1, #0]
 80457f6:	2b40      	cmp	r3, #64	; 0x40
 80457f8:	d065      	beq.n	80458c6 <HAL_TIM_ConfigClockSource+0xfa>
 80457fa:	d815      	bhi.n	8045828 <HAL_TIM_ConfigClockSource+0x5c>
 80457fc:	2b10      	cmp	r3, #16
 80457fe:	d00c      	beq.n	804581a <HAL_TIM_ConfigClockSource+0x4e>
 8045800:	d807      	bhi.n	8045812 <HAL_TIM_ConfigClockSource+0x46>
 8045802:	b153      	cbz	r3, 804581a <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8045804:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8045806:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8045808:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 804580c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8045810:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8045812:	2b20      	cmp	r3, #32
 8045814:	d001      	beq.n	804581a <HAL_TIM_ConfigClockSource+0x4e>
 8045816:	2b30      	cmp	r3, #48	; 0x30
 8045818:	d1f4      	bne.n	8045804 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 804581a:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 804581c:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8045820:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8045824:	4313      	orrs	r3, r2
 8045826:	e01a      	b.n	804585e <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8045828:	2b60      	cmp	r3, #96	; 0x60
 804582a:	d034      	beq.n	8045896 <HAL_TIM_ConfigClockSource+0xca>
 804582c:	d819      	bhi.n	8045862 <HAL_TIM_ConfigClockSource+0x96>
 804582e:	2b50      	cmp	r3, #80	; 0x50
 8045830:	d1e8      	bne.n	8045804 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8045832:	684a      	ldr	r2, [r1, #4]
 8045834:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8045836:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8045838:	6a05      	ldr	r5, [r0, #32]
 804583a:	f025 0501 	bic.w	r5, r5, #1
 804583e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8045840:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8045842:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8045846:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 804584a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 804584e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8045850:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8045852:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8045854:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8045856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 804585a:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 804585e:	6083      	str	r3, [r0, #8]
 8045860:	e7d0      	b.n	8045804 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8045862:	2b70      	cmp	r3, #112	; 0x70
 8045864:	d00c      	beq.n	8045880 <HAL_TIM_ConfigClockSource+0xb4>
 8045866:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 804586a:	d1cb      	bne.n	8045804 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 804586c:	68cb      	ldr	r3, [r1, #12]
 804586e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8045872:	f7ff ffa1 	bl	80457b8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8045876:	6822      	ldr	r2, [r4, #0]
 8045878:	6893      	ldr	r3, [r2, #8]
 804587a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 804587e:	e008      	b.n	8045892 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8045880:	68cb      	ldr	r3, [r1, #12]
 8045882:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8045886:	f7ff ff97 	bl	80457b8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 804588a:	6822      	ldr	r2, [r4, #0]
 804588c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 804588e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8045892:	6093      	str	r3, [r2, #8]
      break;
 8045894:	e7b6      	b.n	8045804 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8045896:	684d      	ldr	r5, [r1, #4]
 8045898:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 804589a:	6a01      	ldr	r1, [r0, #32]
 804589c:	f021 0110 	bic.w	r1, r1, #16
 80458a0:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80458a2:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80458a4:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80458a6:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80458aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80458ae:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80458b2:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80458b6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80458b8:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80458ba:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80458bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80458c0:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80458c4:	e7cb      	b.n	804585e <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80458c6:	684a      	ldr	r2, [r1, #4]
 80458c8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80458ca:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80458cc:	6a05      	ldr	r5, [r0, #32]
 80458ce:	f025 0501 	bic.w	r5, r5, #1
 80458d2:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80458d4:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80458d6:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80458da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80458de:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80458e2:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80458e4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80458e6:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80458e8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80458ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80458ee:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80458f2:	e7b4      	b.n	804585e <HAL_TIM_ConfigClockSource+0x92>

080458f4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80458f4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80458f8:	2b01      	cmp	r3, #1
{
 80458fa:	b530      	push	{r4, r5, lr}
 80458fc:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8045900:	d035      	beq.n	804596e <HAL_TIMEx_MasterConfigSynchronization+0x7a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8045902:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8045906:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8045908:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 804590a:	685c      	ldr	r4, [r3, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 804590c:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  __HAL_LOCK(htim);
 8045910:	2201      	movs	r2, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8045912:	432c      	orrs	r4, r5
  __HAL_LOCK(htim);
 8045914:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8045918:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 804591a:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 804591c:	4c15      	ldr	r4, [pc, #84]	; (8045974 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 804591e:	42a3      	cmp	r3, r4
 8045920:	d01a      	beq.n	8045958 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8045922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8045926:	d017      	beq.n	8045958 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8045928:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 804592c:	42a3      	cmp	r3, r4
 804592e:	d013      	beq.n	8045958 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8045930:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8045934:	42a3      	cmp	r3, r4
 8045936:	d00f      	beq.n	8045958 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8045938:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 804593c:	42a3      	cmp	r3, r4
 804593e:	d00b      	beq.n	8045958 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8045940:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8045944:	42a3      	cmp	r3, r4
 8045946:	d007      	beq.n	8045958 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8045948:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 804594c:	42a3      	cmp	r3, r4
 804594e:	d003      	beq.n	8045958 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8045950:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8045954:	42a3      	cmp	r3, r4
 8045956:	d104      	bne.n	8045962 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8045958:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 804595a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 804595e:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8045960:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8045962:	2301      	movs	r3, #1
 8045964:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8045968:	2300      	movs	r3, #0
 804596a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 804596e:	4618      	mov	r0, r3

  return HAL_OK;
}
 8045970:	bd30      	pop	{r4, r5, pc}
 8045972:	bf00      	nop
 8045974:	40010000 	.word	0x40010000

08045978 <HAL_TIMEx_CommutCallback>:
 8045978:	4770      	bx	lr

0804597a <HAL_TIMEx_BreakCallback>:
 804597a:	4770      	bx	lr

0804597c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 804597c:	6803      	ldr	r3, [r0, #0]
 804597e:	68da      	ldr	r2, [r3, #12]
 8045980:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8045984:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8045986:	695a      	ldr	r2, [r3, #20]
 8045988:	f022 0201 	bic.w	r2, r2, #1
 804598c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 804598e:	2320      	movs	r3, #32
 8045990:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8045994:	4770      	bx	lr
	...

08045998 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8045998:	6803      	ldr	r3, [r0, #0]
 804599a:	68c1      	ldr	r1, [r0, #12]
 804599c:	691a      	ldr	r2, [r3, #16]
{
 804599e:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80459a0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
{
 80459a4:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80459a6:	430a      	orrs	r2, r1
 80459a8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80459aa:	6925      	ldr	r5, [r4, #16]
 80459ac:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 80459ae:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80459b0:	69c0      	ldr	r0, [r0, #28]
 80459b2:	432a      	orrs	r2, r5
 80459b4:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80459b6:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80459ba:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 80459bc:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80459c0:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80459c2:	430a      	orrs	r2, r1
 80459c4:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80459c6:	695a      	ldr	r2, [r3, #20]
 80459c8:	69a1      	ldr	r1, [r4, #24]
 80459ca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80459ce:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80459d0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80459d4:	615a      	str	r2, [r3, #20]
 80459d6:	4a26      	ldr	r2, [pc, #152]	; (8045a70 <UART_SetConfig+0xd8>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80459d8:	d129      	bne.n	8045a2e <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80459da:	4293      	cmp	r3, r2
 80459dc:	d003      	beq.n	80459e6 <UART_SetConfig+0x4e>
 80459de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80459e2:	4293      	cmp	r3, r2
 80459e4:	d120      	bne.n	8045a28 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80459e6:	f7fe fb0f 	bl	8044008 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80459ea:	6862      	ldr	r2, [r4, #4]
 80459ec:	2600      	movs	r6, #0
 80459ee:	1892      	adds	r2, r2, r2
 80459f0:	f04f 0119 	mov.w	r1, #25
 80459f4:	eb46 0306 	adc.w	r3, r6, r6
 80459f8:	fba0 0101 	umull	r0, r1, r0, r1
 80459fc:	f7fb fa0e 	bl	8040e1c <__aeabi_uldivmod>
 8045a00:	2164      	movs	r1, #100	; 0x64
 8045a02:	fbb0 f5f1 	udiv	r5, r0, r1
 8045a06:	fb01 0315 	mls	r3, r1, r5, r0
 8045a0a:	00db      	lsls	r3, r3, #3
 8045a0c:	3332      	adds	r3, #50	; 0x32
 8045a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8045a12:	f003 0207 	and.w	r2, r3, #7
 8045a16:	005b      	lsls	r3, r3, #1
 8045a18:	6821      	ldr	r1, [r4, #0]
 8045a1a:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8045a1e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8045a22:	4413      	add	r3, r2
 8045a24:	608b      	str	r3, [r1, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8045a26:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8045a28:	f7fe fade 	bl	8043fe8 <HAL_RCC_GetPCLK1Freq>
 8045a2c:	e7dd      	b.n	80459ea <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8045a2e:	4293      	cmp	r3, r2
 8045a30:	d002      	beq.n	8045a38 <UART_SetConfig+0xa0>
 8045a32:	4a10      	ldr	r2, [pc, #64]	; (8045a74 <UART_SetConfig+0xdc>)
 8045a34:	4293      	cmp	r3, r2
 8045a36:	d117      	bne.n	8045a68 <UART_SetConfig+0xd0>
      pclk = HAL_RCC_GetPCLK2Freq();
 8045a38:	f7fe fae6 	bl	8044008 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8045a3c:	6863      	ldr	r3, [r4, #4]
 8045a3e:	2119      	movs	r1, #25
 8045a40:	009a      	lsls	r2, r3, #2
 8045a42:	fba0 0101 	umull	r0, r1, r0, r1
 8045a46:	0f9b      	lsrs	r3, r3, #30
 8045a48:	f7fb f9e8 	bl	8040e1c <__aeabi_uldivmod>
 8045a4c:	2264      	movs	r2, #100	; 0x64
 8045a4e:	fbb0 f1f2 	udiv	r1, r0, r2
 8045a52:	fb02 0311 	mls	r3, r2, r1, r0
 8045a56:	6824      	ldr	r4, [r4, #0]
 8045a58:	011b      	lsls	r3, r3, #4
 8045a5a:	3332      	adds	r3, #50	; 0x32
 8045a5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8045a60:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8045a64:	60a3      	str	r3, [r4, #8]
}
 8045a66:	e7de      	b.n	8045a26 <UART_SetConfig+0x8e>
      pclk = HAL_RCC_GetPCLK1Freq();
 8045a68:	f7fe fabe 	bl	8043fe8 <HAL_RCC_GetPCLK1Freq>
 8045a6c:	e7e6      	b.n	8045a3c <UART_SetConfig+0xa4>
 8045a6e:	bf00      	nop
 8045a70:	40011000 	.word	0x40011000
 8045a74:	40011400 	.word	0x40011400

08045a78 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8045a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8045a7a:	4604      	mov	r4, r0
 8045a7c:	460e      	mov	r6, r1
 8045a7e:	4617      	mov	r7, r2
 8045a80:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8045a82:	6821      	ldr	r1, [r4, #0]
 8045a84:	680b      	ldr	r3, [r1, #0]
 8045a86:	ea36 0303 	bics.w	r3, r6, r3
 8045a8a:	d101      	bne.n	8045a90 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8045a8c:	2000      	movs	r0, #0
 8045a8e:	e014      	b.n	8045aba <UART_WaitOnFlagUntilTimeout.constprop.3+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8045a90:	1c6b      	adds	r3, r5, #1
 8045a92:	d0f7      	beq.n	8045a84 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8045a94:	b995      	cbnz	r5, 8045abc <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8045a96:	6823      	ldr	r3, [r4, #0]
 8045a98:	68da      	ldr	r2, [r3, #12]
 8045a9a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8045a9e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8045aa0:	695a      	ldr	r2, [r3, #20]
 8045aa2:	f022 0201 	bic.w	r2, r2, #1
 8045aa6:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8045aa8:	2320      	movs	r3, #32
 8045aaa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8045aae:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8045ab2:	2300      	movs	r3, #0
 8045ab4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8045ab8:	2003      	movs	r0, #3
}
 8045aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8045abc:	f7fd fa8e 	bl	8042fdc <HAL_GetTick>
 8045ac0:	1bc0      	subs	r0, r0, r7
 8045ac2:	4285      	cmp	r5, r0
 8045ac4:	d2dd      	bcs.n	8045a82 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8045ac6:	e7e6      	b.n	8045a96 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08045ac8 <HAL_UART_Init>:
{
 8045ac8:	b510      	push	{r4, lr}
  if (huart == NULL)
 8045aca:	4604      	mov	r4, r0
 8045acc:	b340      	cbz	r0, 8045b20 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8045ace:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8045ad2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8045ad6:	b91b      	cbnz	r3, 8045ae0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8045ad8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8045adc:	f006 fcae 	bl	804c43c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8045ae0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8045ae2:	2324      	movs	r3, #36	; 0x24
 8045ae4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8045ae8:	68d3      	ldr	r3, [r2, #12]
 8045aea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8045aee:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8045af0:	4620      	mov	r0, r4
 8045af2:	f7ff ff51 	bl	8045998 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8045af6:	6823      	ldr	r3, [r4, #0]
 8045af8:	691a      	ldr	r2, [r3, #16]
 8045afa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8045afe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8045b00:	695a      	ldr	r2, [r3, #20]
 8045b02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8045b06:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8045b08:	68da      	ldr	r2, [r3, #12]
 8045b0a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8045b0e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8045b10:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8045b12:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8045b14:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8045b16:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8045b1a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8045b1e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8045b20:	2001      	movs	r0, #1
 8045b22:	e7fc      	b.n	8045b1e <HAL_UART_Init+0x56>

08045b24 <HAL_UART_DeInit>:
{
 8045b24:	b510      	push	{r4, lr}
  if (huart == NULL)
 8045b26:	4604      	mov	r4, r0
 8045b28:	b190      	cbz	r0, 8045b50 <HAL_UART_DeInit+0x2c>
  __HAL_UART_DISABLE(huart);
 8045b2a:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8045b2c:	2324      	movs	r3, #36	; 0x24
 8045b2e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8045b32:	68d3      	ldr	r3, [r2, #12]
 8045b34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8045b38:	60d3      	str	r3, [r2, #12]
  HAL_UART_MspDeInit(huart);
 8045b3a:	f006 fd71 	bl	804c620 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8045b3e:	2000      	movs	r0, #0
 8045b40:	63e0      	str	r0, [r4, #60]	; 0x3c
  __HAL_UNLOCK(huart);
 8045b42:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  huart->gState = HAL_UART_STATE_RESET;
 8045b46:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 8045b4a:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
}
 8045b4e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8045b50:	2001      	movs	r0, #1
 8045b52:	e7fc      	b.n	8045b4e <HAL_UART_DeInit+0x2a>

08045b54 <HAL_UART_Transmit>:
{
 8045b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8045b58:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8045b5a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8045b5e:	2b20      	cmp	r3, #32
{
 8045b60:	4604      	mov	r4, r0
 8045b62:	460d      	mov	r5, r1
 8045b64:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8045b66:	d14f      	bne.n	8045c08 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 8045b68:	2900      	cmp	r1, #0
 8045b6a:	d04b      	beq.n	8045c04 <HAL_UART_Transmit+0xb0>
 8045b6c:	2a00      	cmp	r2, #0
 8045b6e:	d049      	beq.n	8045c04 <HAL_UART_Transmit+0xb0>
    __HAL_LOCK(huart);
 8045b70:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8045b74:	2b01      	cmp	r3, #1
 8045b76:	d047      	beq.n	8045c08 <HAL_UART_Transmit+0xb4>
 8045b78:	2301      	movs	r3, #1
 8045b7a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8045b7e:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8045b82:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8045b84:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8045b88:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8045b8c:	f7fd fa26 	bl	8042fdc <HAL_GetTick>
    huart->TxXferSize = Size;
 8045b90:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8045b94:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8045b96:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8045b9a:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 8045b9e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8045ba0:	b29b      	uxth	r3, r3
 8045ba2:	b953      	cbnz	r3, 8045bba <HAL_UART_Transmit+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8045ba4:	463b      	mov	r3, r7
 8045ba6:	4632      	mov	r2, r6
 8045ba8:	2140      	movs	r1, #64	; 0x40
 8045baa:	4620      	mov	r0, r4
 8045bac:	f7ff ff64 	bl	8045a78 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8045bb0:	b998      	cbnz	r0, 8045bda <HAL_UART_Transmit+0x86>
    huart->gState = HAL_UART_STATE_READY;
 8045bb2:	2320      	movs	r3, #32
 8045bb4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8045bb8:	e010      	b.n	8045bdc <HAL_UART_Transmit+0x88>
      huart->TxXferCount--;
 8045bba:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8045bbc:	3b01      	subs	r3, #1
 8045bbe:	b29b      	uxth	r3, r3
 8045bc0:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8045bc2:	68a3      	ldr	r3, [r4, #8]
 8045bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8045bc8:	4632      	mov	r2, r6
 8045bca:	463b      	mov	r3, r7
 8045bcc:	f04f 0180 	mov.w	r1, #128	; 0x80
 8045bd0:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8045bd2:	d10e      	bne.n	8045bf2 <HAL_UART_Transmit+0x9e>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8045bd4:	f7ff ff50 	bl	8045a78 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8045bd8:	b110      	cbz	r0, 8045be0 <HAL_UART_Transmit+0x8c>
          return HAL_TIMEOUT;
 8045bda:	2003      	movs	r0, #3
}
 8045bdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8045be0:	882b      	ldrh	r3, [r5, #0]
 8045be2:	6822      	ldr	r2, [r4, #0]
 8045be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8045be8:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8045bea:	6923      	ldr	r3, [r4, #16]
 8045bec:	b943      	cbnz	r3, 8045c00 <HAL_UART_Transmit+0xac>
          pData += 2U;
 8045bee:	3502      	adds	r5, #2
 8045bf0:	e7d5      	b.n	8045b9e <HAL_UART_Transmit+0x4a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8045bf2:	f7ff ff41 	bl	8045a78 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8045bf6:	2800      	cmp	r0, #0
 8045bf8:	d1ef      	bne.n	8045bda <HAL_UART_Transmit+0x86>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8045bfa:	6823      	ldr	r3, [r4, #0]
 8045bfc:	782a      	ldrb	r2, [r5, #0]
 8045bfe:	605a      	str	r2, [r3, #4]
 8045c00:	3501      	adds	r5, #1
 8045c02:	e7cc      	b.n	8045b9e <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 8045c04:	2001      	movs	r0, #1
 8045c06:	e7e9      	b.n	8045bdc <HAL_UART_Transmit+0x88>
    return HAL_BUSY;
 8045c08:	2002      	movs	r0, #2
 8045c0a:	e7e7      	b.n	8045bdc <HAL_UART_Transmit+0x88>

08045c0c <HAL_UART_Receive>:
{
 8045c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8045c10:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8045c12:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8045c16:	2b20      	cmp	r3, #32
{
 8045c18:	4604      	mov	r4, r0
 8045c1a:	460d      	mov	r5, r1
 8045c1c:	4690      	mov	r8, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8045c1e:	d155      	bne.n	8045ccc <HAL_UART_Receive+0xc0>
    if ((pData == NULL) || (Size == 0U))
 8045c20:	2900      	cmp	r1, #0
 8045c22:	d051      	beq.n	8045cc8 <HAL_UART_Receive+0xbc>
 8045c24:	2a00      	cmp	r2, #0
 8045c26:	d04f      	beq.n	8045cc8 <HAL_UART_Receive+0xbc>
    __HAL_LOCK(huart);
 8045c28:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8045c2c:	2b01      	cmp	r3, #1
 8045c2e:	d04d      	beq.n	8045ccc <HAL_UART_Receive+0xc0>
 8045c30:	2301      	movs	r3, #1
 8045c32:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8045c36:	f04f 0900 	mov.w	r9, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8045c3a:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8045c3c:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8045c40:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8045c44:	f7fd f9ca 	bl	8042fdc <HAL_GetTick>
    huart->RxXferSize = Size;
 8045c48:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    tickstart = HAL_GetTick();
 8045c4c:	4606      	mov	r6, r0
    huart->RxXferCount = Size;
 8045c4e:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    __HAL_UNLOCK(huart);
 8045c52:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->RxXferCount > 0U)
 8045c56:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8045c58:	b280      	uxth	r0, r0
 8045c5a:	b918      	cbnz	r0, 8045c64 <HAL_UART_Receive+0x58>
    huart->RxState = HAL_UART_STATE_READY;
 8045c5c:	2320      	movs	r3, #32
 8045c5e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    return HAL_OK;
 8045c62:	e010      	b.n	8045c86 <HAL_UART_Receive+0x7a>
      huart->RxXferCount--;
 8045c64:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8045c66:	3b01      	subs	r3, #1
 8045c68:	b29b      	uxth	r3, r3
 8045c6a:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8045c6c:	68a3      	ldr	r3, [r4, #8]
 8045c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8045c72:	4632      	mov	r2, r6
 8045c74:	463b      	mov	r3, r7
 8045c76:	f04f 0120 	mov.w	r1, #32
 8045c7a:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8045c7c:	d116      	bne.n	8045cac <HAL_UART_Receive+0xa0>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8045c7e:	f7ff fefb 	bl	8045a78 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8045c82:	b110      	cbz	r0, 8045c8a <HAL_UART_Receive+0x7e>
          return HAL_TIMEOUT;
 8045c84:	2003      	movs	r0, #3
}
 8045c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (huart->Init.Parity == UART_PARITY_NONE)
 8045c8a:	6922      	ldr	r2, [r4, #16]
 8045c8c:	6823      	ldr	r3, [r4, #0]
 8045c8e:	b93a      	cbnz	r2, 8045ca0 <HAL_UART_Receive+0x94>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8045c90:	685a      	ldr	r2, [r3, #4]
 8045c92:	462b      	mov	r3, r5
 8045c94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8045c98:	f823 2b02 	strh.w	r2, [r3], #2
{
 8045c9c:	461d      	mov	r5, r3
 8045c9e:	e7da      	b.n	8045c56 <HAL_UART_Receive+0x4a>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8045ca0:	685a      	ldr	r2, [r3, #4]
 8045ca2:	462b      	mov	r3, r5
 8045ca4:	b2d2      	uxtb	r2, r2
 8045ca6:	f823 2b01 	strh.w	r2, [r3], #1
 8045caa:	e7f7      	b.n	8045c9c <HAL_UART_Receive+0x90>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8045cac:	f7ff fee4 	bl	8045a78 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8045cb0:	2800      	cmp	r0, #0
 8045cb2:	d1e7      	bne.n	8045c84 <HAL_UART_Receive+0x78>
 8045cb4:	6822      	ldr	r2, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8045cb6:	6921      	ldr	r1, [r4, #16]
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8045cb8:	6852      	ldr	r2, [r2, #4]
 8045cba:	1c6b      	adds	r3, r5, #1
        if (huart->Init.Parity == UART_PARITY_NONE)
 8045cbc:	b909      	cbnz	r1, 8045cc2 <HAL_UART_Receive+0xb6>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8045cbe:	702a      	strb	r2, [r5, #0]
 8045cc0:	e7ec      	b.n	8045c9c <HAL_UART_Receive+0x90>
 8045cc2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8045cc6:	e7fa      	b.n	8045cbe <HAL_UART_Receive+0xb2>
      return  HAL_ERROR;
 8045cc8:	2001      	movs	r0, #1
 8045cca:	e7dc      	b.n	8045c86 <HAL_UART_Receive+0x7a>
    return HAL_BUSY;
 8045ccc:	2002      	movs	r0, #2
 8045cce:	e7da      	b.n	8045c86 <HAL_UART_Receive+0x7a>

08045cd0 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8045cd0:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8045cd4:	2b20      	cmp	r3, #32
 8045cd6:	d120      	bne.n	8045d1a <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 8045cd8:	b1e9      	cbz	r1, 8045d16 <HAL_UART_Receive_IT+0x46>
 8045cda:	b1e2      	cbz	r2, 8045d16 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 8045cdc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8045ce0:	2b01      	cmp	r3, #1
 8045ce2:	d01a      	beq.n	8045d1a <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 8045ce4:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8045ce6:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8045ce8:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8045cea:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8045cec:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8045cee:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8045cf2:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8045cf4:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8045cf6:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 8045cf8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8045cfc:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8045d00:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8045d02:	6951      	ldr	r1, [r2, #20]
 8045d04:	f041 0101 	orr.w	r1, r1, #1
 8045d08:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8045d0a:	68d1      	ldr	r1, [r2, #12]
 8045d0c:	f041 0120 	orr.w	r1, r1, #32
 8045d10:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8045d12:	4618      	mov	r0, r3
 8045d14:	4770      	bx	lr
      return HAL_ERROR;
 8045d16:	2001      	movs	r0, #1
 8045d18:	4770      	bx	lr
    return HAL_BUSY;
 8045d1a:	2002      	movs	r0, #2
}
 8045d1c:	4770      	bx	lr
	...

08045d20 <HAL_UART_Transmit_DMA>:
{
 8045d20:	b538      	push	{r3, r4, r5, lr}
 8045d22:	4604      	mov	r4, r0
 8045d24:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8045d26:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8045d2a:	2a20      	cmp	r2, #32
 8045d2c:	d12a      	bne.n	8045d84 <HAL_UART_Transmit_DMA+0x64>
    if ((pData == NULL) || (Size == 0U))
 8045d2e:	b339      	cbz	r1, 8045d80 <HAL_UART_Transmit_DMA+0x60>
 8045d30:	b333      	cbz	r3, 8045d80 <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 8045d32:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8045d36:	2a01      	cmp	r2, #1
 8045d38:	d024      	beq.n	8045d84 <HAL_UART_Transmit_DMA+0x64>
 8045d3a:	2201      	movs	r2, #1
 8045d3c:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8045d40:	2500      	movs	r5, #0
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8045d42:	6b20      	ldr	r0, [r4, #48]	; 0x30
    huart->TxXferCount = Size;
 8045d44:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8045d46:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8045d48:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8045d4a:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8045d4e:	4a0e      	ldr	r2, [pc, #56]	; (8045d88 <HAL_UART_Transmit_DMA+0x68>)
    huart->TxXferSize = Size;
 8045d50:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->pTxBuffPtr = pData;
 8045d52:	6221      	str	r1, [r4, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8045d54:	63c2      	str	r2, [r0, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8045d56:	4a0d      	ldr	r2, [pc, #52]	; (8045d8c <HAL_UART_Transmit_DMA+0x6c>)
 8045d58:	6402      	str	r2, [r0, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8045d5a:	4a0d      	ldr	r2, [pc, #52]	; (8045d90 <HAL_UART_Transmit_DMA+0x70>)
    huart->hdmatx->XferAbortCallback = NULL;
 8045d5c:	e9c0 2513 	strd	r2, r5, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8045d60:	6822      	ldr	r2, [r4, #0]
 8045d62:	3204      	adds	r2, #4
 8045d64:	f7fd fa88 	bl	8043278 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8045d68:	6823      	ldr	r3, [r4, #0]
 8045d6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8045d6e:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8045d70:	695a      	ldr	r2, [r3, #20]
    __HAL_UNLOCK(huart);
 8045d72:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8045d76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8045d7a:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 8045d7c:	4628      	mov	r0, r5
}
 8045d7e:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8045d80:	2001      	movs	r0, #1
 8045d82:	e7fc      	b.n	8045d7e <HAL_UART_Transmit_DMA+0x5e>
    return HAL_BUSY;
 8045d84:	2002      	movs	r0, #2
 8045d86:	e7fa      	b.n	8045d7e <HAL_UART_Transmit_DMA+0x5e>
 8045d88:	08045d95 	.word	0x08045d95
 8045d8c:	08045dc3 	.word	0x08045dc3
 8045d90:	08045e47 	.word	0x08045e47

08045d94 <UART_DMATransmitCplt>:
{
 8045d94:	b508      	push	{r3, lr}
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8045d96:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8045d98:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8045d9a:	681b      	ldr	r3, [r3, #0]
 8045d9c:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8045da0:	d10a      	bne.n	8045db8 <UART_DMATransmitCplt+0x24>
    huart->TxXferCount = 0x00U;
 8045da2:	84d3      	strh	r3, [r2, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8045da4:	6813      	ldr	r3, [r2, #0]
 8045da6:	695a      	ldr	r2, [r3, #20]
 8045da8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8045dac:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8045dae:	68da      	ldr	r2, [r3, #12]
 8045db0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8045db4:	60da      	str	r2, [r3, #12]
}
 8045db6:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8045db8:	4610      	mov	r0, r2
 8045dba:	f006 faf7 	bl	804c3ac <HAL_UART_TxCpltCallback>
}
 8045dbe:	e7fa      	b.n	8045db6 <UART_DMATransmitCplt+0x22>

08045dc0 <HAL_UART_TxHalfCpltCallback>:
 8045dc0:	4770      	bx	lr

08045dc2 <UART_DMATxHalfCplt>:
{
 8045dc2:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8045dc4:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8045dc6:	f7ff fffb 	bl	8045dc0 <HAL_UART_TxHalfCpltCallback>
}
 8045dca:	bd08      	pop	{r3, pc}

08045dcc <HAL_UART_RxCpltCallback>:
 8045dcc:	4770      	bx	lr

08045dce <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8045dce:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8045dd2:	2b22      	cmp	r3, #34	; 0x22
{
 8045dd4:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8045dd6:	d133      	bne.n	8045e40 <UART_Receive_IT+0x72>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8045dd8:	6881      	ldr	r1, [r0, #8]
 8045dda:	6904      	ldr	r4, [r0, #16]
 8045ddc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8045dde:	6802      	ldr	r2, [r0, #0]
 8045de0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8045de4:	d123      	bne.n	8045e2e <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8045de6:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8045de8:	b9ec      	cbnz	r4, 8045e26 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8045dea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8045dee:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8045df2:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8045df4:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8045df6:	3c01      	subs	r4, #1
 8045df8:	b2a4      	uxth	r4, r4
 8045dfa:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8045dfc:	b98c      	cbnz	r4, 8045e22 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8045dfe:	6803      	ldr	r3, [r0, #0]
 8045e00:	68da      	ldr	r2, [r3, #12]
 8045e02:	f022 0220 	bic.w	r2, r2, #32
 8045e06:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8045e08:	68da      	ldr	r2, [r3, #12]
 8045e0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8045e0e:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8045e10:	695a      	ldr	r2, [r3, #20]
 8045e12:	f022 0201 	bic.w	r2, r2, #1
 8045e16:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8045e18:	2320      	movs	r3, #32
 8045e1a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8045e1e:	f7ff ffd5 	bl	8045dcc <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8045e22:	2000      	movs	r0, #0
 8045e24:	e00d      	b.n	8045e42 <UART_Receive_IT+0x74>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8045e26:	b2d2      	uxtb	r2, r2
 8045e28:	f823 2b01 	strh.w	r2, [r3], #1
 8045e2c:	e7e1      	b.n	8045df2 <UART_Receive_IT+0x24>
 8045e2e:	1c59      	adds	r1, r3, #1
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8045e30:	6852      	ldr	r2, [r2, #4]
 8045e32:	6281      	str	r1, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8045e34:	b90c      	cbnz	r4, 8045e3a <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8045e36:	701a      	strb	r2, [r3, #0]
 8045e38:	e7dc      	b.n	8045df4 <UART_Receive_IT+0x26>
 8045e3a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8045e3e:	e7fa      	b.n	8045e36 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8045e40:	2002      	movs	r0, #2
}
 8045e42:	bd10      	pop	{r4, pc}

08045e44 <HAL_UART_ErrorCallback>:
 8045e44:	4770      	bx	lr

08045e46 <UART_DMAError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8045e46:	6b81      	ldr	r1, [r0, #56]	; 0x38
{
 8045e48:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8045e4a:	680b      	ldr	r3, [r1, #0]
 8045e4c:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8045e4e:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8045e52:	2821      	cmp	r0, #33	; 0x21
 8045e54:	d10a      	bne.n	8045e6c <UART_DMAError+0x26>
 8045e56:	0612      	lsls	r2, r2, #24
 8045e58:	d508      	bpl.n	8045e6c <UART_DMAError+0x26>
    huart->TxXferCount = 0x00U;
 8045e5a:	2200      	movs	r2, #0
 8045e5c:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8045e5e:	68da      	ldr	r2, [r3, #12]
 8045e60:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8045e64:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8045e66:	2220      	movs	r2, #32
 8045e68:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8045e6c:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8045e6e:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8045e72:	2a22      	cmp	r2, #34	; 0x22
 8045e74:	d106      	bne.n	8045e84 <UART_DMAError+0x3e>
 8045e76:	065b      	lsls	r3, r3, #25
 8045e78:	d504      	bpl.n	8045e84 <UART_DMAError+0x3e>
    huart->RxXferCount = 0x00U;
 8045e7a:	2300      	movs	r3, #0
 8045e7c:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8045e7e:	4608      	mov	r0, r1
 8045e80:	f7ff fd7c 	bl	804597c <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8045e84:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8045e86:	f043 0310 	orr.w	r3, r3, #16
 8045e8a:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8045e8c:	4608      	mov	r0, r1
 8045e8e:	f7ff ffd9 	bl	8045e44 <HAL_UART_ErrorCallback>
}
 8045e92:	bd08      	pop	{r3, pc}

08045e94 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8045e94:	6803      	ldr	r3, [r0, #0]
 8045e96:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8045e98:	68d9      	ldr	r1, [r3, #12]
{
 8045e9a:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8045e9c:	0716      	lsls	r6, r2, #28
{
 8045e9e:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8045ea0:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8045ea2:	d107      	bne.n	8045eb4 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8045ea4:	0696      	lsls	r6, r2, #26
 8045ea6:	d55a      	bpl.n	8045f5e <HAL_UART_IRQHandler+0xca>
 8045ea8:	068d      	lsls	r5, r1, #26
 8045eaa:	d558      	bpl.n	8045f5e <HAL_UART_IRQHandler+0xca>
}
 8045eac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8045eb0:	f7ff bf8d 	b.w	8045dce <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8045eb4:	f015 0501 	ands.w	r5, r5, #1
 8045eb8:	d102      	bne.n	8045ec0 <HAL_UART_IRQHandler+0x2c>
 8045eba:	f411 7f90 	tst.w	r1, #288	; 0x120
 8045ebe:	d04e      	beq.n	8045f5e <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8045ec0:	07d0      	lsls	r0, r2, #31
 8045ec2:	d505      	bpl.n	8045ed0 <HAL_UART_IRQHandler+0x3c>
 8045ec4:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8045ec6:	bf42      	ittt	mi
 8045ec8:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8045eca:	f043 0301 	orrmi.w	r3, r3, #1
 8045ece:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8045ed0:	0756      	lsls	r6, r2, #29
 8045ed2:	d504      	bpl.n	8045ede <HAL_UART_IRQHandler+0x4a>
 8045ed4:	b11d      	cbz	r5, 8045ede <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8045ed6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8045ed8:	f043 0302 	orr.w	r3, r3, #2
 8045edc:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8045ede:	0790      	lsls	r0, r2, #30
 8045ee0:	d504      	bpl.n	8045eec <HAL_UART_IRQHandler+0x58>
 8045ee2:	b11d      	cbz	r5, 8045eec <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8045ee4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8045ee6:	f043 0304 	orr.w	r3, r3, #4
 8045eea:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8045eec:	0713      	lsls	r3, r2, #28
 8045eee:	d506      	bpl.n	8045efe <HAL_UART_IRQHandler+0x6a>
 8045ef0:	068e      	lsls	r6, r1, #26
 8045ef2:	d400      	bmi.n	8045ef6 <HAL_UART_IRQHandler+0x62>
 8045ef4:	b11d      	cbz	r5, 8045efe <HAL_UART_IRQHandler+0x6a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8045ef6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8045ef8:	f043 0308 	orr.w	r3, r3, #8
 8045efc:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8045efe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8045f00:	b343      	cbz	r3, 8045f54 <HAL_UART_IRQHandler+0xc0>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8045f02:	0695      	lsls	r5, r2, #26
 8045f04:	d504      	bpl.n	8045f10 <HAL_UART_IRQHandler+0x7c>
 8045f06:	0688      	lsls	r0, r1, #26
 8045f08:	d502      	bpl.n	8045f10 <HAL_UART_IRQHandler+0x7c>
        UART_Receive_IT(huart);
 8045f0a:	4620      	mov	r0, r4
 8045f0c:	f7ff ff5f 	bl	8045dce <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8045f10:	6823      	ldr	r3, [r4, #0]
 8045f12:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8045f14:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8045f16:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 8045f18:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8045f1a:	d402      	bmi.n	8045f22 <HAL_UART_IRQHandler+0x8e>
 8045f1c:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8045f20:	d019      	beq.n	8045f56 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8045f22:	f7ff fd2b 	bl	804597c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8045f26:	6823      	ldr	r3, [r4, #0]
 8045f28:	695a      	ldr	r2, [r3, #20]
 8045f2a:	0652      	lsls	r2, r2, #25
 8045f2c:	d50f      	bpl.n	8045f4e <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8045f2e:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8045f30:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8045f32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8045f36:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8045f38:	b148      	cbz	r0, 8045f4e <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8045f3a:	4b26      	ldr	r3, [pc, #152]	; (8045fd4 <HAL_UART_IRQHandler+0x140>)
 8045f3c:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8045f3e:	f7fd f9d5 	bl	80432ec <HAL_DMA_Abort_IT>
 8045f42:	b138      	cbz	r0, 8045f54 <HAL_UART_IRQHandler+0xc0>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8045f44:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8045f46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8045f4a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8045f4c:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8045f4e:	4620      	mov	r0, r4
 8045f50:	f7ff ff78 	bl	8045e44 <HAL_UART_ErrorCallback>
}
 8045f54:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8045f56:	f7ff ff75 	bl	8045e44 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8045f5a:	63e5      	str	r5, [r4, #60]	; 0x3c
 8045f5c:	e7fa      	b.n	8045f54 <HAL_UART_IRQHandler+0xc0>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8045f5e:	0616      	lsls	r6, r2, #24
 8045f60:	d528      	bpl.n	8045fb4 <HAL_UART_IRQHandler+0x120>
 8045f62:	060d      	lsls	r5, r1, #24
 8045f64:	d526      	bpl.n	8045fb4 <HAL_UART_IRQHandler+0x120>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8045f66:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8045f6a:	2a21      	cmp	r2, #33	; 0x21
 8045f6c:	d1f2      	bne.n	8045f54 <HAL_UART_IRQHandler+0xc0>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8045f6e:	68a1      	ldr	r1, [r4, #8]
 8045f70:	6a22      	ldr	r2, [r4, #32]
 8045f72:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8045f76:	d118      	bne.n	8045faa <HAL_UART_IRQHandler+0x116>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8045f78:	8811      	ldrh	r1, [r2, #0]
 8045f7a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8045f7e:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8045f80:	6921      	ldr	r1, [r4, #16]
 8045f82:	b981      	cbnz	r1, 8045fa6 <HAL_UART_IRQHandler+0x112>
        huart->pTxBuffPtr += 2U;
 8045f84:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8045f86:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8045f88:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8045f8a:	3a01      	subs	r2, #1
 8045f8c:	b292      	uxth	r2, r2
 8045f8e:	84e2      	strh	r2, [r4, #38]	; 0x26
 8045f90:	2a00      	cmp	r2, #0
 8045f92:	d1df      	bne.n	8045f54 <HAL_UART_IRQHandler+0xc0>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8045f94:	68da      	ldr	r2, [r3, #12]
 8045f96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8045f9a:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8045f9c:	68da      	ldr	r2, [r3, #12]
 8045f9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8045fa2:	60da      	str	r2, [r3, #12]
 8045fa4:	e7d6      	b.n	8045f54 <HAL_UART_IRQHandler+0xc0>
        huart->pTxBuffPtr += 1U;
 8045fa6:	3201      	adds	r2, #1
 8045fa8:	e7ed      	b.n	8045f86 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8045faa:	1c51      	adds	r1, r2, #1
 8045fac:	6221      	str	r1, [r4, #32]
 8045fae:	7812      	ldrb	r2, [r2, #0]
 8045fb0:	605a      	str	r2, [r3, #4]
 8045fb2:	e7e9      	b.n	8045f88 <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8045fb4:	0650      	lsls	r0, r2, #25
 8045fb6:	d5cd      	bpl.n	8045f54 <HAL_UART_IRQHandler+0xc0>
 8045fb8:	064a      	lsls	r2, r1, #25
 8045fba:	d5cb      	bpl.n	8045f54 <HAL_UART_IRQHandler+0xc0>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8045fbc:	68da      	ldr	r2, [r3, #12]
 8045fbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8045fc2:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8045fc4:	2320      	movs	r3, #32
 8045fc6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8045fca:	4620      	mov	r0, r4
 8045fcc:	f006 f9ee 	bl	804c3ac <HAL_UART_TxCpltCallback>
 8045fd0:	e7c0      	b.n	8045f54 <HAL_UART_IRQHandler+0xc0>
 8045fd2:	bf00      	nop
 8045fd4:	08045fd9 	.word	0x08045fd9

08045fd8 <UART_DMAAbortOnError>:
{
 8045fd8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8045fda:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8045fdc:	2300      	movs	r3, #0
 8045fde:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8045fe0:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8045fe2:	f7ff ff2f 	bl	8045e44 <HAL_UART_ErrorCallback>
}
 8045fe6:	bd08      	pop	{r3, pc}

08045fe8 <HAL_UART_AbortCpltCallback>:
 8045fe8:	4770      	bx	lr
	...

08045fec <HAL_UART_Abort_IT>:
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8045fec:	6803      	ldr	r3, [r0, #0]
 8045fee:	68da      	ldr	r2, [r3, #12]
 8045ff0:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
{
 8045ff4:	b510      	push	{r4, lr}
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8045ff6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8045ff8:	695a      	ldr	r2, [r3, #20]
{
 8045ffa:	4604      	mov	r4, r0
  if (huart->hdmatx != NULL)
 8045ffc:	6b00      	ldr	r0, [r0, #48]	; 0x30
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8045ffe:	f022 0201 	bic.w	r2, r2, #1
 8046002:	615a      	str	r2, [r3, #20]
  if (huart->hdmatx != NULL)
 8046004:	b128      	cbz	r0, 8046012 <HAL_UART_Abort_IT+0x26>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8046006:	695a      	ldr	r2, [r3, #20]
 8046008:	f012 0280 	ands.w	r2, r2, #128	; 0x80
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 804600c:	bf18      	it	ne
 804600e:	4a1f      	ldrne	r2, [pc, #124]	; (804608c <HAL_UART_Abort_IT+0xa0>)
      huart->hdmatx->XferAbortCallback = NULL;
 8046010:	6502      	str	r2, [r0, #80]	; 0x50
  if (huart->hdmarx != NULL)
 8046012:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8046014:	b129      	cbz	r1, 8046022 <HAL_UART_Abort_IT+0x36>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8046016:	695a      	ldr	r2, [r3, #20]
 8046018:	f012 0240 	ands.w	r2, r2, #64	; 0x40
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 804601c:	bf18      	it	ne
 804601e:	4a1c      	ldrne	r2, [pc, #112]	; (8046090 <HAL_UART_Abort_IT+0xa4>)
      huart->hdmarx->XferAbortCallback = NULL;
 8046020:	650a      	str	r2, [r1, #80]	; 0x50
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8046022:	695a      	ldr	r2, [r3, #20]
 8046024:	0612      	lsls	r2, r2, #24
 8046026:	d41d      	bmi.n	8046064 <HAL_UART_Abort_IT+0x78>
  uint32_t AbortCplt = 0x01U;
 8046028:	2301      	movs	r3, #1
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 804602a:	6822      	ldr	r2, [r4, #0]
 804602c:	6951      	ldr	r1, [r2, #20]
 804602e:	0649      	lsls	r1, r1, #25
 8046030:	d527      	bpl.n	8046082 <HAL_UART_Abort_IT+0x96>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8046032:	6951      	ldr	r1, [r2, #20]
    if (huart->hdmarx != NULL)
 8046034:	6b60      	ldr	r0, [r4, #52]	; 0x34
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8046036:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 804603a:	6151      	str	r1, [r2, #20]
    if (huart->hdmarx != NULL)
 804603c:	b308      	cbz	r0, 8046082 <HAL_UART_Abort_IT+0x96>
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 804603e:	f7fd f955 	bl	80432ec <HAL_DMA_Abort_IT>
 8046042:	b300      	cbz	r0, 8046086 <HAL_UART_Abort_IT+0x9a>
        huart->hdmarx->XferAbortCallback = NULL;
 8046044:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8046046:	2200      	movs	r2, #0
 8046048:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferCount = 0x00U;
 804604a:	2300      	movs	r3, #0
 804604c:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 804604e:	85e3      	strh	r3, [r4, #46]	; 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8046050:	63e3      	str	r3, [r4, #60]	; 0x3c
    huart->gState  = HAL_UART_STATE_READY;
 8046052:	2320      	movs	r3, #32
 8046054:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    HAL_UART_AbortCpltCallback(huart);
 8046058:	4620      	mov	r0, r4
    huart->RxState = HAL_UART_STATE_READY;
 804605a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    HAL_UART_AbortCpltCallback(huart);
 804605e:	f7ff ffc3 	bl	8045fe8 <HAL_UART_AbortCpltCallback>
 8046062:	e010      	b.n	8046086 <HAL_UART_Abort_IT+0x9a>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8046064:	695a      	ldr	r2, [r3, #20]
 8046066:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 804606a:	615a      	str	r2, [r3, #20]
    if (huart->hdmatx != NULL)
 804606c:	2800      	cmp	r0, #0
 804606e:	d0db      	beq.n	8046028 <HAL_UART_Abort_IT+0x3c>
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8046070:	f7fd f93c 	bl	80432ec <HAL_DMA_Abort_IT>
 8046074:	b118      	cbz	r0, 804607e <HAL_UART_Abort_IT+0x92>
        huart->hdmatx->XferAbortCallback = NULL;
 8046076:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8046078:	2200      	movs	r2, #0
 804607a:	651a      	str	r2, [r3, #80]	; 0x50
 804607c:	e7d4      	b.n	8046028 <HAL_UART_Abort_IT+0x3c>
        AbortCplt = 0x00U;
 804607e:	4603      	mov	r3, r0
 8046080:	e7d3      	b.n	804602a <HAL_UART_Abort_IT+0x3e>
  if (AbortCplt == 0x01U)
 8046082:	2b00      	cmp	r3, #0
 8046084:	d1e1      	bne.n	804604a <HAL_UART_Abort_IT+0x5e>
}
 8046086:	2000      	movs	r0, #0
 8046088:	bd10      	pop	{r4, pc}
 804608a:	bf00      	nop
 804608c:	080460bd 	.word	0x080460bd
 8046090:	08046095 	.word	0x08046095

08046094 <UART_DMARxAbortCallback>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8046094:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->hdmarx->XferAbortCallback = NULL;
 8046096:	6b42      	ldr	r2, [r0, #52]	; 0x34
{
 8046098:	b508      	push	{r3, lr}
  huart->hdmarx->XferAbortCallback = NULL;
 804609a:	2300      	movs	r3, #0
 804609c:	6513      	str	r3, [r2, #80]	; 0x50
  if (huart->hdmatx != NULL)
 804609e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80460a0:	b10a      	cbz	r2, 80460a6 <UART_DMARxAbortCallback+0x12>
    if (huart->hdmatx->XferAbortCallback != NULL)
 80460a2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80460a4:	b94a      	cbnz	r2, 80460ba <UART_DMARxAbortCallback+0x26>
  huart->TxXferCount = 0x00U;
 80460a6:	84c3      	strh	r3, [r0, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80460a8:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80460aa:	63c3      	str	r3, [r0, #60]	; 0x3c
  huart->gState  = HAL_UART_STATE_READY;
 80460ac:	2320      	movs	r3, #32
 80460ae:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80460b2:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  HAL_UART_AbortCpltCallback(huart);
 80460b6:	f7ff ff97 	bl	8045fe8 <HAL_UART_AbortCpltCallback>
}
 80460ba:	bd08      	pop	{r3, pc}

080460bc <UART_DMATxAbortCallback>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80460bc:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->hdmatx->XferAbortCallback = NULL;
 80460be:	6b02      	ldr	r2, [r0, #48]	; 0x30
{
 80460c0:	b508      	push	{r3, lr}
  huart->hdmatx->XferAbortCallback = NULL;
 80460c2:	2300      	movs	r3, #0
 80460c4:	6513      	str	r3, [r2, #80]	; 0x50
  if (huart->hdmarx != NULL)
 80460c6:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80460c8:	b10a      	cbz	r2, 80460ce <UART_DMATxAbortCallback+0x12>
    if (huart->hdmarx->XferAbortCallback != NULL)
 80460ca:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80460cc:	b94a      	cbnz	r2, 80460e2 <UART_DMATxAbortCallback+0x26>
  huart->TxXferCount = 0x00U;
 80460ce:	84c3      	strh	r3, [r0, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80460d0:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80460d2:	63c3      	str	r3, [r0, #60]	; 0x3c
  huart->gState  = HAL_UART_STATE_READY;
 80460d4:	2320      	movs	r3, #32
 80460d6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80460da:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  HAL_UART_AbortCpltCallback(huart);
 80460de:	f7ff ff83 	bl	8045fe8 <HAL_UART_AbortCpltCallback>
}
 80460e2:	bd08      	pop	{r3, pc}

080460e4 <HAL_UART_AbortReceiveCpltCallback>:
 80460e4:	4770      	bx	lr
	...

080460e8 <HAL_UART_AbortReceive_IT>:
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80460e8:	6803      	ldr	r3, [r0, #0]
 80460ea:	68da      	ldr	r2, [r3, #12]
 80460ec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
{
 80460f0:	b510      	push	{r4, lr}
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80460f2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80460f4:	695a      	ldr	r2, [r3, #20]
 80460f6:	f022 0201 	bic.w	r2, r2, #1
 80460fa:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80460fc:	695a      	ldr	r2, [r3, #20]
 80460fe:	f012 0240 	ands.w	r2, r2, #64	; 0x40
{
 8046102:	4604      	mov	r4, r0
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8046104:	d017      	beq.n	8046136 <HAL_UART_AbortReceive_IT+0x4e>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8046106:	695a      	ldr	r2, [r3, #20]
 8046108:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 804610c:	615a      	str	r2, [r3, #20]
    if (huart->hdmarx != NULL)
 804610e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8046110:	b153      	cbz	r3, 8046128 <HAL_UART_AbortReceive_IT+0x40>
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8046112:	4a0a      	ldr	r2, [pc, #40]	; (804613c <HAL_UART_AbortReceive_IT+0x54>)
 8046114:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8046116:	4618      	mov	r0, r3
 8046118:	f7fd f8e8 	bl	80432ec <HAL_DMA_Abort_IT>
 804611c:	b110      	cbz	r0, 8046124 <HAL_UART_AbortReceive_IT+0x3c>
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 804611e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8046120:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8046122:	4798      	blx	r3
}
 8046124:	2000      	movs	r0, #0
 8046126:	bd10      	pop	{r4, pc}
      huart->RxXferCount = 0x00U;
 8046128:	85c3      	strh	r3, [r0, #46]	; 0x2e
    huart->RxState = HAL_UART_STATE_READY;
 804612a:	2320      	movs	r3, #32
 804612c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    HAL_UART_AbortReceiveCpltCallback(huart);
 8046130:	f7ff ffd8 	bl	80460e4 <HAL_UART_AbortReceiveCpltCallback>
 8046134:	e7f6      	b.n	8046124 <HAL_UART_AbortReceive_IT+0x3c>
    huart->RxXferCount = 0x00U;
 8046136:	85c2      	strh	r2, [r0, #46]	; 0x2e
 8046138:	e7f7      	b.n	804612a <HAL_UART_AbortReceive_IT+0x42>
 804613a:	bf00      	nop
 804613c:	08046141 	.word	0x08046141

08046140 <UART_DMARxOnlyAbortCallback>:
{
 8046140:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8046142:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8046144:	2300      	movs	r3, #0
 8046146:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->RxState = HAL_UART_STATE_READY;
 8046148:	2320      	movs	r3, #32
 804614a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  HAL_UART_AbortReceiveCpltCallback(huart);
 804614e:	f7ff ffc9 	bl	80460e4 <HAL_UART_AbortReceiveCpltCallback>
}
 8046152:	bd08      	pop	{r3, pc}

08046154 <SDMMC_GetCmdResp2>:
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8046154:	4b12      	ldr	r3, [pc, #72]	; (80461a0 <SDMMC_GetCmdResp2+0x4c>)
 8046156:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 804615a:	681b      	ldr	r3, [r3, #0]
 804615c:	fbb3 f2f2 	udiv	r2, r3, r2
 8046160:	f241 3388 	movw	r3, #5000	; 0x1388
 8046164:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8046166:	f113 33ff 	adds.w	r3, r3, #4294967295
 804616a:	d315      	bcc.n	8046198 <SDMMC_GetCmdResp2+0x44>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 804616c:	6b42      	ldr	r2, [r0, #52]	; 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 804616e:	f012 0f45 	tst.w	r2, #69	; 0x45
 8046172:	d0f8      	beq.n	8046166 <SDMMC_GetCmdResp2+0x12>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8046174:	0512      	lsls	r2, r2, #20
 8046176:	d4f6      	bmi.n	8046166 <SDMMC_GetCmdResp2+0x12>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8046178:	6b43      	ldr	r3, [r0, #52]	; 0x34
 804617a:	075b      	lsls	r3, r3, #29
 804617c:	d503      	bpl.n	8046186 <SDMMC_GetCmdResp2+0x32>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 804617e:	2304      	movs	r3, #4
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8046180:	6383      	str	r3, [r0, #56]	; 0x38
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 8046182:	4618      	mov	r0, r3
 8046184:	4770      	bx	lr
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8046186:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8046188:	f013 0301 	ands.w	r3, r3, #1
 804618c:	d001      	beq.n	8046192 <SDMMC_GetCmdResp2+0x3e>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 804618e:	2301      	movs	r3, #1
 8046190:	e7f6      	b.n	8046180 <SDMMC_GetCmdResp2+0x2c>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8046192:	22c5      	movs	r2, #197	; 0xc5
 8046194:	6382      	str	r2, [r0, #56]	; 0x38
 8046196:	e7f4      	b.n	8046182 <SDMMC_GetCmdResp2+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8046198:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 804619c:	e7f1      	b.n	8046182 <SDMMC_GetCmdResp2+0x2e>
 804619e:	bf00      	nop
 80461a0:	2000108c 	.word	0x2000108c

080461a4 <SDMMC_GetCmdResp3>:
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80461a4:	4b0f      	ldr	r3, [pc, #60]	; (80461e4 <SDMMC_GetCmdResp3+0x40>)
 80461a6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80461aa:	681b      	ldr	r3, [r3, #0]
 80461ac:	fbb3 f2f2 	udiv	r2, r3, r2
 80461b0:	f241 3388 	movw	r3, #5000	; 0x1388
 80461b4:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 80461b6:	f113 33ff 	adds.w	r3, r3, #4294967295
 80461ba:	d30f      	bcc.n	80461dc <SDMMC_GetCmdResp3+0x38>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 80461bc:	6b42      	ldr	r2, [r0, #52]	; 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80461be:	f012 0f45 	tst.w	r2, #69	; 0x45
 80461c2:	d0f8      	beq.n	80461b6 <SDMMC_GetCmdResp3+0x12>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80461c4:	0512      	lsls	r2, r2, #20
 80461c6:	d4f6      	bmi.n	80461b6 <SDMMC_GetCmdResp3+0x12>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80461c8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80461ca:	f013 0304 	ands.w	r3, r3, #4
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80461ce:	bf15      	itete	ne
 80461d0:	2304      	movne	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80461d2:	22c5      	moveq	r2, #197	; 0xc5
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80461d4:	6383      	strne	r3, [r0, #56]	; 0x38
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80461d6:	6382      	streq	r2, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80461d8:	4618      	mov	r0, r3
 80461da:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80461dc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80461e0:	4770      	bx	lr
 80461e2:	bf00      	nop
 80461e4:	2000108c 	.word	0x2000108c

080461e8 <SDMMC_GetCmdResp1>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80461e8:	4b44      	ldr	r3, [pc, #272]	; (80462fc <SDMMC_GetCmdResp1+0x114>)
{
 80461ea:	b510      	push	{r4, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80461ec:	681b      	ldr	r3, [r3, #0]
 80461ee:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 80461f2:	fbb3 f3f4 	udiv	r3, r3, r4
 80461f6:	435a      	muls	r2, r3
    if (count-- == 0U)
 80461f8:	2a00      	cmp	r2, #0
 80461fa:	d04a      	beq.n	8046292 <SDMMC_GetCmdResp1+0xaa>
    sta_reg = SDIOx->STA;
 80461fc:	6b43      	ldr	r3, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80461fe:	f013 0f45 	tst.w	r3, #69	; 0x45
 8046202:	d008      	beq.n	8046216 <SDMMC_GetCmdResp1+0x2e>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8046204:	051c      	lsls	r4, r3, #20
 8046206:	d406      	bmi.n	8046216 <SDMMC_GetCmdResp1+0x2e>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8046208:	6b43      	ldr	r3, [r0, #52]	; 0x34
 804620a:	075b      	lsls	r3, r3, #29
 804620c:	d505      	bpl.n	804621a <SDMMC_GetCmdResp1+0x32>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 804620e:	2304      	movs	r3, #4
 8046210:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8046212:	4618      	mov	r0, r3
}
 8046214:	bd10      	pop	{r4, pc}
 8046216:	3a01      	subs	r2, #1
 8046218:	e7ee      	b.n	80461f8 <SDMMC_GetCmdResp1+0x10>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 804621a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 804621c:	07dc      	lsls	r4, r3, #31
 804621e:	d503      	bpl.n	8046228 <SDMMC_GetCmdResp1+0x40>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8046220:	2301      	movs	r3, #1
 8046222:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8046224:	2001      	movs	r0, #1
 8046226:	e7f5      	b.n	8046214 <SDMMC_GetCmdResp1+0x2c>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8046228:	23c5      	movs	r3, #197	; 0xc5
 804622a:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 804622c:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 804622e:	b2db      	uxtb	r3, r3
 8046230:	4299      	cmp	r1, r3
 8046232:	d1f7      	bne.n	8046224 <SDMMC_GetCmdResp1+0x3c>
  return (*(__IO uint32_t *) tmp);
 8046234:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8046236:	4832      	ldr	r0, [pc, #200]	; (8046300 <SDMMC_GetCmdResp1+0x118>)
 8046238:	4018      	ands	r0, r3
 804623a:	2800      	cmp	r0, #0
 804623c:	d0ea      	beq.n	8046214 <SDMMC_GetCmdResp1+0x2c>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 804623e:	2b00      	cmp	r3, #0
 8046240:	db2a      	blt.n	8046298 <SDMMC_GetCmdResp1+0xb0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8046242:	005a      	lsls	r2, r3, #1
 8046244:	d42b      	bmi.n	804629e <SDMMC_GetCmdResp1+0xb6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8046246:	009c      	lsls	r4, r3, #2
 8046248:	d42b      	bmi.n	80462a2 <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 804624a:	00d9      	lsls	r1, r3, #3
 804624c:	d42b      	bmi.n	80462a6 <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 804624e:	011a      	lsls	r2, r3, #4
 8046250:	d42c      	bmi.n	80462ac <SDMMC_GetCmdResp1+0xc4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8046252:	015c      	lsls	r4, r3, #5
 8046254:	d42d      	bmi.n	80462b2 <SDMMC_GetCmdResp1+0xca>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8046256:	01d9      	lsls	r1, r3, #7
 8046258:	d42e      	bmi.n	80462b8 <SDMMC_GetCmdResp1+0xd0>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 804625a:	021a      	lsls	r2, r3, #8
 804625c:	d42f      	bmi.n	80462be <SDMMC_GetCmdResp1+0xd6>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 804625e:	025c      	lsls	r4, r3, #9
 8046260:	d430      	bmi.n	80462c4 <SDMMC_GetCmdResp1+0xdc>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8046262:	0299      	lsls	r1, r3, #10
 8046264:	d431      	bmi.n	80462ca <SDMMC_GetCmdResp1+0xe2>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8046266:	02da      	lsls	r2, r3, #11
 8046268:	d432      	bmi.n	80462d0 <SDMMC_GetCmdResp1+0xe8>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 804626a:	035c      	lsls	r4, r3, #13
 804626c:	d433      	bmi.n	80462d6 <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 804626e:	0399      	lsls	r1, r3, #14
 8046270:	d434      	bmi.n	80462dc <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8046272:	03da      	lsls	r2, r3, #15
 8046274:	d435      	bmi.n	80462e2 <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8046276:	041c      	lsls	r4, r3, #16
 8046278:	d436      	bmi.n	80462e8 <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 804627a:	0459      	lsls	r1, r3, #17
 804627c:	d437      	bmi.n	80462ee <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 804627e:	049a      	lsls	r2, r3, #18
 8046280:	d438      	bmi.n	80462f4 <SDMMC_GetCmdResp1+0x10c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8046282:	f013 0f08 	tst.w	r3, #8
 8046286:	bf0c      	ite	eq
 8046288:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 804628c:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8046290:	e7c0      	b.n	8046214 <SDMMC_GetCmdResp1+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8046292:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8046296:	e7bd      	b.n	8046214 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8046298:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 804629c:	e7ba      	b.n	8046214 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 804629e:	2040      	movs	r0, #64	; 0x40
 80462a0:	e7b8      	b.n	8046214 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80462a2:	2080      	movs	r0, #128	; 0x80
 80462a4:	e7b6      	b.n	8046214 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80462a6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80462aa:	e7b3      	b.n	8046214 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80462ac:	f44f 7000 	mov.w	r0, #512	; 0x200
 80462b0:	e7b0      	b.n	8046214 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80462b2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80462b6:	e7ad      	b.n	8046214 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80462b8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80462bc:	e7aa      	b.n	8046214 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80462be:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80462c2:	e7a7      	b.n	8046214 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80462c4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80462c8:	e7a4      	b.n	8046214 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80462ca:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80462ce:	e7a1      	b.n	8046214 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CC_ERR;
 80462d0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80462d4:	e79e      	b.n	8046214 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80462d6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80462da:	e79b      	b.n	8046214 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80462dc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80462e0:	e798      	b.n	8046214 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80462e2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80462e6:	e795      	b.n	8046214 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80462e8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80462ec:	e792      	b.n	8046214 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80462ee:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80462f2:	e78f      	b.n	8046214 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_RESET;
 80462f4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80462f8:	e78c      	b.n	8046214 <SDMMC_GetCmdResp1+0x2c>
 80462fa:	bf00      	nop
 80462fc:	2000108c 	.word	0x2000108c
 8046300:	fdffe008 	.word	0xfdffe008

08046304 <SDIO_Init>:
{
 8046304:	b084      	sub	sp, #16
 8046306:	b510      	push	{r4, lr}
 8046308:	ac03      	add	r4, sp, #12
 804630a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 804630e:	460b      	mov	r3, r1
 8046310:	9904      	ldr	r1, [sp, #16]
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8046312:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 8046314:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 8046316:	9905      	ldr	r1, [sp, #20]
 8046318:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 804631a:	9906      	ldr	r1, [sp, #24]
 804631c:	430b      	orrs	r3, r1
             Init.BusWide             |\
 804631e:	9907      	ldr	r1, [sp, #28]
 8046320:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8046322:	9908      	ldr	r1, [sp, #32]
}
 8046324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8046328:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.HardwareFlowControl |\
 804632c:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 804632e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8046332:	4313      	orrs	r3, r2
 8046334:	6043      	str	r3, [r0, #4]
}
 8046336:	b004      	add	sp, #16
 8046338:	2000      	movs	r0, #0
 804633a:	4770      	bx	lr

0804633c <SDIO_ReadFIFO>:
  return (SDIOx->FIFO);
 804633c:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8046340:	4770      	bx	lr

08046342 <SDIO_WriteFIFO>:
  SDIOx->FIFO = *pWriteData;
 8046342:	680b      	ldr	r3, [r1, #0]
 8046344:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 8046348:	2000      	movs	r0, #0
 804634a:	4770      	bx	lr

0804634c <SDIO_PowerState_ON>:
{  
 804634c:	b508      	push	{r3, lr}
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 804634e:	2303      	movs	r3, #3
 8046350:	6003      	str	r3, [r0, #0]
  HAL_Delay(2);
 8046352:	2002      	movs	r0, #2
 8046354:	f005 fd10 	bl	804bd78 <HAL_Delay>
}
 8046358:	2000      	movs	r0, #0
 804635a:	bd08      	pop	{r3, pc}

0804635c <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 804635c:	6800      	ldr	r0, [r0, #0]
}
 804635e:	f000 0003 	and.w	r0, r0, #3
 8046362:	4770      	bx	lr

08046364 <SDIO_SendCommand>:
  SDIOx->ARG = Command->Argument;
 8046364:	680b      	ldr	r3, [r1, #0]
{
 8046366:	b510      	push	{r4, lr}
  SDIOx->ARG = Command->Argument;
 8046368:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 804636a:	e9d1 3401 	ldrd	r3, r4, [r1, #4]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 804636e:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8046370:	4323      	orrs	r3, r4
                       Command->Response         |\
 8046372:	68cc      	ldr	r4, [r1, #12]
                       Command->WaitForInterrupt |\
 8046374:	6909      	ldr	r1, [r1, #16]
                       Command->Response         |\
 8046376:	4323      	orrs	r3, r4
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8046378:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
                       Command->WaitForInterrupt |\
 804637c:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 804637e:	f022 020f 	bic.w	r2, r2, #15
 8046382:	4313      	orrs	r3, r2
 8046384:	60c3      	str	r3, [r0, #12]
}
 8046386:	2000      	movs	r0, #0
 8046388:	bd10      	pop	{r4, pc}

0804638a <SDIO_GetResponse>:
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 804638a:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 804638c:	5840      	ldr	r0, [r0, r1]
}  
 804638e:	4770      	bx	lr

08046390 <SDIO_ConfigData>:
  SDIOx->DTIMER = Data->DataTimeOut;
 8046390:	680b      	ldr	r3, [r1, #0]
{
 8046392:	b510      	push	{r4, lr}
  SDIOx->DTIMER = Data->DataTimeOut;
 8046394:	6243      	str	r3, [r0, #36]	; 0x24
  SDIOx->DLEN = Data->DataLength;
 8046396:	684b      	ldr	r3, [r1, #4]
 8046398:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 804639a:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
 804639e:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 80463a0:	690c      	ldr	r4, [r1, #16]
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80463a2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
                       Data->TransferMode  |\
 80463a4:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 80463a6:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 80463a8:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80463aa:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 80463ae:	4313      	orrs	r3, r2
 80463b0:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 80463b2:	2000      	movs	r0, #0
 80463b4:	bd10      	pop	{r4, pc}

080463b6 <SDMMC_CmdBlockLength>:
{
 80463b6:	b530      	push	{r4, r5, lr}
 80463b8:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80463ba:	2410      	movs	r4, #16
 80463bc:	2340      	movs	r3, #64	; 0x40
{
 80463be:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80463c0:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80463c2:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80463c6:	2200      	movs	r2, #0
 80463c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80463cc:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80463ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80463d2:	f7ff ffc7 	bl	8046364 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80463d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80463da:	4621      	mov	r1, r4
 80463dc:	4628      	mov	r0, r5
 80463de:	f7ff ff03 	bl	80461e8 <SDMMC_GetCmdResp1>
}
 80463e2:	b007      	add	sp, #28
 80463e4:	bd30      	pop	{r4, r5, pc}

080463e6 <SDMMC_CmdReadSingleBlock>:
{
 80463e6:	b530      	push	{r4, r5, lr}
 80463e8:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80463ea:	2411      	movs	r4, #17
 80463ec:	2340      	movs	r3, #64	; 0x40
{
 80463ee:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80463f0:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80463f2:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80463f6:	2200      	movs	r2, #0
 80463f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80463fc:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80463fe:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8046402:	f7ff ffaf 	bl	8046364 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8046406:	f241 3288 	movw	r2, #5000	; 0x1388
 804640a:	4621      	mov	r1, r4
 804640c:	4628      	mov	r0, r5
 804640e:	f7ff feeb 	bl	80461e8 <SDMMC_GetCmdResp1>
}
 8046412:	b007      	add	sp, #28
 8046414:	bd30      	pop	{r4, r5, pc}

08046416 <SDMMC_CmdReadMultiBlock>:
{
 8046416:	b530      	push	{r4, r5, lr}
 8046418:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 804641a:	2412      	movs	r4, #18
 804641c:	2340      	movs	r3, #64	; 0x40
{
 804641e:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8046420:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8046422:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8046426:	2200      	movs	r2, #0
 8046428:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 804642c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 804642e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8046432:	f7ff ff97 	bl	8046364 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8046436:	f241 3288 	movw	r2, #5000	; 0x1388
 804643a:	4621      	mov	r1, r4
 804643c:	4628      	mov	r0, r5
 804643e:	f7ff fed3 	bl	80461e8 <SDMMC_GetCmdResp1>
}
 8046442:	b007      	add	sp, #28
 8046444:	bd30      	pop	{r4, r5, pc}

08046446 <SDMMC_CmdWriteSingleBlock>:
{
 8046446:	b530      	push	{r4, r5, lr}
 8046448:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 804644a:	2418      	movs	r4, #24
 804644c:	2340      	movs	r3, #64	; 0x40
{
 804644e:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8046450:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8046452:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8046456:	2200      	movs	r2, #0
 8046458:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 804645c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 804645e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8046462:	f7ff ff7f 	bl	8046364 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8046466:	f241 3288 	movw	r2, #5000	; 0x1388
 804646a:	4621      	mov	r1, r4
 804646c:	4628      	mov	r0, r5
 804646e:	f7ff febb 	bl	80461e8 <SDMMC_GetCmdResp1>
}
 8046472:	b007      	add	sp, #28
 8046474:	bd30      	pop	{r4, r5, pc}

08046476 <SDMMC_CmdWriteMultiBlock>:
{
 8046476:	b530      	push	{r4, r5, lr}
 8046478:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 804647a:	2419      	movs	r4, #25
 804647c:	2340      	movs	r3, #64	; 0x40
{
 804647e:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8046480:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8046482:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8046486:	2200      	movs	r2, #0
 8046488:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 804648c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 804648e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8046492:	f7ff ff67 	bl	8046364 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8046496:	f241 3288 	movw	r2, #5000	; 0x1388
 804649a:	4621      	mov	r1, r4
 804649c:	4628      	mov	r0, r5
 804649e:	f7ff fea3 	bl	80461e8 <SDMMC_GetCmdResp1>
}
 80464a2:	b007      	add	sp, #28
 80464a4:	bd30      	pop	{r4, r5, pc}
	...

080464a8 <SDMMC_CmdStopTransfer>:
{
 80464a8:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80464aa:	2300      	movs	r3, #0
{
 80464ac:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80464ae:	240c      	movs	r4, #12
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80464b0:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80464b2:	e9cd 2303 	strd	r2, r3, [sp, #12]
{
 80464b6:	4605      	mov	r5, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80464b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80464bc:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80464be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80464c2:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80464c4:	f7ff ff4e 	bl	8046364 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80464c8:	4a03      	ldr	r2, [pc, #12]	; (80464d8 <SDMMC_CmdStopTransfer+0x30>)
 80464ca:	4621      	mov	r1, r4
 80464cc:	4628      	mov	r0, r5
 80464ce:	f7ff fe8b 	bl	80461e8 <SDMMC_GetCmdResp1>
}
 80464d2:	b007      	add	sp, #28
 80464d4:	bd30      	pop	{r4, r5, pc}
 80464d6:	bf00      	nop
 80464d8:	05f5e100 	.word	0x05f5e100

080464dc <SDMMC_CmdSelDesel>:
{
 80464dc:	b530      	push	{r4, r5, lr}
 80464de:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80464e0:	2407      	movs	r4, #7
 80464e2:	2340      	movs	r3, #64	; 0x40
{
 80464e4:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80464e6:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80464e8:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80464ec:	2200      	movs	r2, #0
 80464ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80464f2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80464f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80464f8:	f7ff ff34 	bl	8046364 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80464fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8046500:	4621      	mov	r1, r4
 8046502:	4628      	mov	r0, r5
 8046504:	f7ff fe70 	bl	80461e8 <SDMMC_GetCmdResp1>
}
 8046508:	b007      	add	sp, #28
 804650a:	bd30      	pop	{r4, r5, pc}

0804650c <SDMMC_CmdGoIdleState>:
{
 804650c:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = 0U;
 804650e:	2300      	movs	r3, #0
{
 8046510:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8046512:	e9cd 3301 	strd	r3, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8046516:	e9cd 3303 	strd	r3, r3, [sp, #12]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 804651a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 804651c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8046520:	9305      	str	r3, [sp, #20]
{
 8046522:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8046524:	f7ff ff1e 	bl	8046364 <SDIO_SendCommand>
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8046528:	4b0b      	ldr	r3, [pc, #44]	; (8046558 <SDMMC_CmdGoIdleState+0x4c>)
 804652a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 804652e:	681b      	ldr	r3, [r3, #0]
 8046530:	fbb3 f2f2 	udiv	r2, r3, r2
 8046534:	f241 3388 	movw	r3, #5000	; 0x1388
 8046538:	4353      	muls	r3, r2
    if (count-- == 0U)
 804653a:	f113 33ff 	adds.w	r3, r3, #4294967295
 804653e:	d307      	bcc.n	8046550 <SDMMC_CmdGoIdleState+0x44>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8046540:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8046542:	0612      	lsls	r2, r2, #24
 8046544:	d5f9      	bpl.n	804653a <SDMMC_CmdGoIdleState+0x2e>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8046546:	23c5      	movs	r3, #197	; 0xc5
 8046548:	63a3      	str	r3, [r4, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 804654a:	2000      	movs	r0, #0
}
 804654c:	b006      	add	sp, #24
 804654e:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 8046550:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 8046554:	e7fa      	b.n	804654c <SDMMC_CmdGoIdleState+0x40>
 8046556:	bf00      	nop
 8046558:	2000108c 	.word	0x2000108c

0804655c <SDMMC_CmdOperCond>:
{
 804655c:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 804655e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
{
 8046562:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8046564:	2308      	movs	r3, #8
 8046566:	e9cd 1301 	strd	r1, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 804656a:	f04f 0c40 	mov.w	ip, #64	; 0x40
 804656e:	2300      	movs	r3, #0
 8046570:	e9cd c303 	strd	ip, r3, [sp, #12]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8046574:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8046576:	f44f 6380 	mov.w	r3, #1024	; 0x400
 804657a:	9305      	str	r3, [sp, #20]
{
 804657c:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 804657e:	f7ff fef1 	bl	8046364 <SDIO_SendCommand>
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8046582:	4b15      	ldr	r3, [pc, #84]	; (80465d8 <SDMMC_CmdOperCond+0x7c>)
 8046584:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8046588:	681b      	ldr	r3, [r3, #0]
 804658a:	fbb3 f2f2 	udiv	r2, r3, r2
 804658e:	f241 3388 	movw	r3, #5000	; 0x1388
 8046592:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8046594:	f113 33ff 	adds.w	r3, r3, #4294967295
 8046598:	d31a      	bcc.n	80465d0 <SDMMC_CmdOperCond+0x74>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 804659a:	6b62      	ldr	r2, [r4, #52]	; 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 804659c:	f012 0f45 	tst.w	r2, #69	; 0x45
 80465a0:	d0f8      	beq.n	8046594 <SDMMC_CmdOperCond+0x38>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80465a2:	0512      	lsls	r2, r2, #20
 80465a4:	d4f6      	bmi.n	8046594 <SDMMC_CmdOperCond+0x38>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80465a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80465a8:	075b      	lsls	r3, r3, #29
 80465aa:	d503      	bpl.n	80465b4 <SDMMC_CmdOperCond+0x58>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80465ac:	2004      	movs	r0, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80465ae:	63a0      	str	r0, [r4, #56]	; 0x38
}
 80465b0:	b006      	add	sp, #24
 80465b2:	bd10      	pop	{r4, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80465b4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80465b6:	f012 0201 	ands.w	r2, r2, #1
 80465ba:	d001      	beq.n	80465c0 <SDMMC_CmdOperCond+0x64>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80465bc:	2001      	movs	r0, #1
 80465be:	e7f6      	b.n	80465ae <SDMMC_CmdOperCond+0x52>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80465c0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80465c2:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 80465c6:	d0f3      	beq.n	80465b0 <SDMMC_CmdOperCond+0x54>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80465c8:	2340      	movs	r3, #64	; 0x40
 80465ca:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80465cc:	4610      	mov	r0, r2
 80465ce:	e7ef      	b.n	80465b0 <SDMMC_CmdOperCond+0x54>
      return SDMMC_ERROR_TIMEOUT;
 80465d0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80465d4:	e7ec      	b.n	80465b0 <SDMMC_CmdOperCond+0x54>
 80465d6:	bf00      	nop
 80465d8:	2000108c 	.word	0x2000108c

080465dc <SDMMC_CmdAppCommand>:
{
 80465dc:	b530      	push	{r4, r5, lr}
 80465de:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80465e0:	2437      	movs	r4, #55	; 0x37
 80465e2:	2340      	movs	r3, #64	; 0x40
{
 80465e4:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80465e6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80465e8:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80465ec:	2200      	movs	r2, #0
 80465ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80465f2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80465f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80465f8:	f7ff feb4 	bl	8046364 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80465fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8046600:	4621      	mov	r1, r4
 8046602:	4628      	mov	r0, r5
 8046604:	f7ff fdf0 	bl	80461e8 <SDMMC_GetCmdResp1>
}
 8046608:	b007      	add	sp, #28
 804660a:	bd30      	pop	{r4, r5, pc}

0804660c <SDMMC_CmdAppOperCommand>:
{
 804660c:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 804660e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
{
 8046612:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8046614:	2229      	movs	r2, #41	; 0x29
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8046616:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 804661a:	2340      	movs	r3, #64	; 0x40
 804661c:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8046620:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8046622:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8046626:	2100      	movs	r1, #0
 8046628:	e9cd 1304 	strd	r1, r3, [sp, #16]
{
 804662c:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 804662e:	a901      	add	r1, sp, #4
 8046630:	f7ff fe98 	bl	8046364 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8046634:	4620      	mov	r0, r4
 8046636:	f7ff fdb5 	bl	80461a4 <SDMMC_GetCmdResp3>
}
 804663a:	b006      	add	sp, #24
 804663c:	bd10      	pop	{r4, pc}

0804663e <SDMMC_CmdBusWidth>:
{
 804663e:	b530      	push	{r4, r5, lr}
 8046640:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8046642:	2406      	movs	r4, #6
 8046644:	2340      	movs	r3, #64	; 0x40
{
 8046646:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8046648:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 804664a:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 804664e:	2200      	movs	r2, #0
 8046650:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8046654:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8046656:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 804665a:	f7ff fe83 	bl	8046364 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 804665e:	f241 3288 	movw	r2, #5000	; 0x1388
 8046662:	4621      	mov	r1, r4
 8046664:	4628      	mov	r0, r5
 8046666:	f7ff fdbf 	bl	80461e8 <SDMMC_GetCmdResp1>
}
 804666a:	b007      	add	sp, #28
 804666c:	bd30      	pop	{r4, r5, pc}

0804666e <SDMMC_CmdSendSCR>:
{
 804666e:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8046670:	2300      	movs	r3, #0
{
 8046672:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8046674:	2433      	movs	r4, #51	; 0x33
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8046676:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8046678:	e9cd 2303 	strd	r2, r3, [sp, #12]
{
 804667c:	4605      	mov	r5, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 804667e:	e9cd 3401 	strd	r3, r4, [sp, #4]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8046682:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8046684:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8046688:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 804668a:	f7ff fe6b 	bl	8046364 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 804668e:	f241 3288 	movw	r2, #5000	; 0x1388
 8046692:	4621      	mov	r1, r4
 8046694:	4628      	mov	r0, r5
 8046696:	f7ff fda7 	bl	80461e8 <SDMMC_GetCmdResp1>
}
 804669a:	b007      	add	sp, #28
 804669c:	bd30      	pop	{r4, r5, pc}

0804669e <SDMMC_CmdSendCID>:
{
 804669e:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80466a0:	2300      	movs	r3, #0
{
 80466a2:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80466a4:	2202      	movs	r2, #2
 80466a6:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80466aa:	22c0      	movs	r2, #192	; 0xc0
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80466ac:	e9cd 2303 	strd	r2, r3, [sp, #12]
{
 80466b0:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80466b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80466b6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80466b8:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80466ba:	f7ff fe53 	bl	8046364 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80466be:	4620      	mov	r0, r4
 80466c0:	f7ff fd48 	bl	8046154 <SDMMC_GetCmdResp2>
}
 80466c4:	b006      	add	sp, #24
 80466c6:	bd10      	pop	{r4, pc}

080466c8 <SDMMC_CmdSendCSD>:
{
 80466c8:	b510      	push	{r4, lr}
 80466ca:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80466cc:	2209      	movs	r2, #9
 80466ce:	23c0      	movs	r3, #192	; 0xc0
 80466d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.Argument         = Argument;
 80466d4:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80466d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80466da:	2100      	movs	r1, #0
 80466dc:	e9cd 1304 	strd	r1, r3, [sp, #16]
{
 80466e0:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80466e2:	a901      	add	r1, sp, #4
 80466e4:	f7ff fe3e 	bl	8046364 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80466e8:	4620      	mov	r0, r4
 80466ea:	f7ff fd33 	bl	8046154 <SDMMC_GetCmdResp2>
}
 80466ee:	b006      	add	sp, #24
 80466f0:	bd10      	pop	{r4, pc}
	...

080466f4 <SDMMC_CmdSetRelAdd>:
{
 80466f4:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80466f6:	2300      	movs	r3, #0
{
 80466f8:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80466fa:	2203      	movs	r2, #3
 80466fc:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8046700:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8046702:	e9cd 2303 	strd	r2, r3, [sp, #12]
{
 8046706:	460d      	mov	r5, r1
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8046708:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 804670c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 804670e:	9305      	str	r3, [sp, #20]
{
 8046710:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8046712:	f7ff fe27 	bl	8046364 <SDIO_SendCommand>
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8046716:	4b1e      	ldr	r3, [pc, #120]	; (8046790 <SDMMC_CmdSetRelAdd+0x9c>)
 8046718:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 804671c:	681b      	ldr	r3, [r3, #0]
 804671e:	fbb3 f2f2 	udiv	r2, r3, r2
 8046722:	f241 3388 	movw	r3, #5000	; 0x1388
 8046726:	4353      	muls	r3, r2
    if (count-- == 0U)
 8046728:	f113 33ff 	adds.w	r3, r3, #4294967295
 804672c:	d328      	bcc.n	8046780 <SDMMC_CmdSetRelAdd+0x8c>
    sta_reg = SDIOx->STA;
 804672e:	6b62      	ldr	r2, [r4, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8046730:	f012 0f45 	tst.w	r2, #69	; 0x45
 8046734:	d0f8      	beq.n	8046728 <SDMMC_CmdSetRelAdd+0x34>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8046736:	0512      	lsls	r2, r2, #20
 8046738:	d4f6      	bmi.n	8046728 <SDMMC_CmdSetRelAdd+0x34>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 804673a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 804673c:	0758      	lsls	r0, r3, #29
 804673e:	d503      	bpl.n	8046748 <SDMMC_CmdSetRelAdd+0x54>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8046740:	2004      	movs	r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8046742:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8046744:	b007      	add	sp, #28
 8046746:	bd30      	pop	{r4, r5, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8046748:	6b63      	ldr	r3, [r4, #52]	; 0x34
 804674a:	07d9      	lsls	r1, r3, #31
 804674c:	d501      	bpl.n	8046752 <SDMMC_CmdSetRelAdd+0x5e>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 804674e:	2001      	movs	r0, #1
 8046750:	e7f7      	b.n	8046742 <SDMMC_CmdSetRelAdd+0x4e>
  return (uint8_t)(SDIOx->RESPCMD);
 8046752:	6923      	ldr	r3, [r4, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8046754:	b2db      	uxtb	r3, r3
 8046756:	2b03      	cmp	r3, #3
 8046758:	d115      	bne.n	8046786 <SDMMC_CmdSetRelAdd+0x92>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 804675a:	23c5      	movs	r3, #197	; 0xc5
 804675c:	63a3      	str	r3, [r4, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 804675e:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8046760:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 8046764:	d102      	bne.n	804676c <SDMMC_CmdSetRelAdd+0x78>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8046766:	0c1b      	lsrs	r3, r3, #16
 8046768:	802b      	strh	r3, [r5, #0]
 804676a:	e7eb      	b.n	8046744 <SDMMC_CmdSetRelAdd+0x50>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 804676c:	045a      	lsls	r2, r3, #17
 804676e:	d40c      	bmi.n	804678a <SDMMC_CmdSetRelAdd+0x96>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8046770:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8046774:	bf0c      	ite	eq
 8046776:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 804677a:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 804677e:	e7e1      	b.n	8046744 <SDMMC_CmdSetRelAdd+0x50>
      return SDMMC_ERROR_TIMEOUT;
 8046780:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8046784:	e7de      	b.n	8046744 <SDMMC_CmdSetRelAdd+0x50>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8046786:	2001      	movs	r0, #1
 8046788:	e7dc      	b.n	8046744 <SDMMC_CmdSetRelAdd+0x50>
    return SDMMC_ERROR_ILLEGAL_CMD;
 804678a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 804678e:	e7d9      	b.n	8046744 <SDMMC_CmdSetRelAdd+0x50>
 8046790:	2000108c 	.word	0x2000108c

08046794 <SDMMC_CmdSendStatus>:
{
 8046794:	b530      	push	{r4, r5, lr}
 8046796:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8046798:	240d      	movs	r4, #13
 804679a:	2340      	movs	r3, #64	; 0x40
{
 804679c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 804679e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80467a0:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80467a4:	2200      	movs	r2, #0
 80467a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80467aa:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80467ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80467b0:	f7ff fdd8 	bl	8046364 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80467b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80467b8:	4621      	mov	r1, r4
 80467ba:	4628      	mov	r0, r5
 80467bc:	f7ff fd14 	bl	80461e8 <SDMMC_GetCmdResp1>
}
 80467c0:	b007      	add	sp, #28
 80467c2:	bd30      	pop	{r4, r5, pc}

080467c4 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80467c4:	4b03      	ldr	r3, [pc, #12]	; (80467d4 <disk_status+0x10>)
 80467c6:	181a      	adds	r2, r3, r0
 80467c8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80467cc:	7a10      	ldrb	r0, [r2, #8]
 80467ce:	685b      	ldr	r3, [r3, #4]
 80467d0:	685b      	ldr	r3, [r3, #4]
 80467d2:	4718      	bx	r3
 80467d4:	200084bc 	.word	0x200084bc

080467d8 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 80467d8:	4b06      	ldr	r3, [pc, #24]	; (80467f4 <disk_initialize+0x1c>)
 80467da:	5c1a      	ldrb	r2, [r3, r0]
 80467dc:	b942      	cbnz	r2, 80467f0 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 80467de:	2201      	movs	r2, #1
 80467e0:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80467e2:	181a      	adds	r2, r3, r0
 80467e4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80467e8:	7a10      	ldrb	r0, [r2, #8]
 80467ea:	685b      	ldr	r3, [r3, #4]
 80467ec:	681b      	ldr	r3, [r3, #0]
 80467ee:	4718      	bx	r3
  }
  return stat;
}
 80467f0:	2000      	movs	r0, #0
 80467f2:	4770      	bx	lr
 80467f4:	200084bc 	.word	0x200084bc

080467f8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80467f8:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80467fa:	4c05      	ldr	r4, [pc, #20]	; (8046810 <disk_read+0x18>)
 80467fc:	1825      	adds	r5, r4, r0
 80467fe:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8046802:	6860      	ldr	r0, [r4, #4]
 8046804:	6884      	ldr	r4, [r0, #8]
 8046806:	7a28      	ldrb	r0, [r5, #8]
 8046808:	46a4      	mov	ip, r4
  return res;
}
 804680a:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 804680c:	4760      	bx	ip
 804680e:	bf00      	nop
 8046810:	200084bc 	.word	0x200084bc

08046814 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8046814:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8046816:	4c05      	ldr	r4, [pc, #20]	; (804682c <disk_write+0x18>)
 8046818:	1825      	adds	r5, r4, r0
 804681a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 804681e:	6860      	ldr	r0, [r4, #4]
 8046820:	68c4      	ldr	r4, [r0, #12]
 8046822:	7a28      	ldrb	r0, [r5, #8]
 8046824:	46a4      	mov	ip, r4
  return res;
}
 8046826:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8046828:	4760      	bx	ip
 804682a:	bf00      	nop
 804682c:	200084bc 	.word	0x200084bc

08046830 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8046830:	4b05      	ldr	r3, [pc, #20]	; (8046848 <disk_ioctl+0x18>)
{
 8046832:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8046834:	181c      	adds	r4, r3, r0
 8046836:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 804683a:	7a20      	ldrb	r0, [r4, #8]
 804683c:	685b      	ldr	r3, [r3, #4]
  return res;
}
 804683e:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8046842:	691b      	ldr	r3, [r3, #16]
 8046844:	4718      	bx	r3
 8046846:	bf00      	nop
 8046848:	200084bc 	.word	0x200084bc

0804684c <ld_dword>:
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 804684c:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
 804684e:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
 8046850:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
 8046852:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return rv;
}
 8046856:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 804685a:	4770      	bx	lr

0804685c <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 804685c:	6802      	ldr	r2, [r0, #0]
{
 804685e:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 8046860:	b152      	cbz	r2, 8046878 <get_ldnumber+0x1c>
 8046862:	4611      	mov	r1, r2
 8046864:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8046866:	f811 4b01 	ldrb.w	r4, [r1], #1
 804686a:	2c20      	cmp	r4, #32
 804686c:	d90c      	bls.n	8046888 <get_ldnumber+0x2c>
 804686e:	2c3a      	cmp	r4, #58	; 0x3a
 8046870:	d1f8      	bne.n	8046864 <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 8046872:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8046874:	428b      	cmp	r3, r1
 8046876:	d002      	beq.n	804687e <get_ldnumber+0x22>
	int vol = -1;
 8046878:	f04f 30ff 	mov.w	r0, #4294967295
 804687c:	e005      	b.n	804688a <get_ldnumber+0x2e>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 804687e:	7812      	ldrb	r2, [r2, #0]
 8046880:	2a30      	cmp	r2, #48	; 0x30
 8046882:	d1f9      	bne.n	8046878 <get_ldnumber+0x1c>
					vol = (int)i;
					*path = ++tt;
 8046884:	3301      	adds	r3, #1
 8046886:	6003      	str	r3, [r0, #0]
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8046888:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 804688a:	bd10      	pop	{r4, pc}

0804688c <sync_window.part.4>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 804688c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		wsect = fs->winsect;	/* Current sector number */
 804688e:	6b45      	ldr	r5, [r0, #52]	; 0x34
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8046890:	f100 0738 	add.w	r7, r0, #56	; 0x38
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8046894:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8046896:	2301      	movs	r3, #1
 8046898:	462a      	mov	r2, r5
 804689a:	4639      	mov	r1, r7
 804689c:	7840      	ldrb	r0, [r0, #1]
 804689e:	f7ff ffb9 	bl	8046814 <disk_write>
 80468a2:	b9a0      	cbnz	r0, 80468ce <sync_window.part.4+0x42>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80468a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80468a6:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
 80468a8:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80468aa:	1aeb      	subs	r3, r5, r3
 80468ac:	4293      	cmp	r3, r2
 80468ae:	d301      	bcc.n	80468b4 <sync_window.part.4+0x28>
	FRESULT res = FR_OK;
 80468b0:	2000      	movs	r0, #0
}
 80468b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80468b4:	78a6      	ldrb	r6, [r4, #2]
 80468b6:	2e01      	cmp	r6, #1
 80468b8:	d9fa      	bls.n	80468b0 <sync_window.part.4+0x24>
					wsect += fs->fsize;
 80468ba:	6a23      	ldr	r3, [r4, #32]
					disk_write(fs->drv, fs->win, wsect, 1);
 80468bc:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 80468be:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80468c0:	462a      	mov	r2, r5
 80468c2:	2301      	movs	r3, #1
 80468c4:	4639      	mov	r1, r7
 80468c6:	f7ff ffa5 	bl	8046814 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80468ca:	3e01      	subs	r6, #1
 80468cc:	e7f3      	b.n	80468b6 <sync_window.part.4+0x2a>
			res = FR_DISK_ERR;
 80468ce:	2001      	movs	r0, #1
 80468d0:	e7ef      	b.n	80468b2 <sync_window.part.4+0x26>

080468d2 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80468d2:	78c3      	ldrb	r3, [r0, #3]
 80468d4:	b10b      	cbz	r3, 80468da <sync_window+0x8>
 80468d6:	f7ff bfd9 	b.w	804688c <sync_window.part.4>
}
 80468da:	4618      	mov	r0, r3
 80468dc:	4770      	bx	lr

080468de <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 80468de:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80468e0:	428b      	cmp	r3, r1
{
 80468e2:	b570      	push	{r4, r5, r6, lr}
 80468e4:	4606      	mov	r6, r0
 80468e6:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 80468e8:	d012      	beq.n	8046910 <move_window+0x32>
		res = sync_window(fs);		/* Write-back changes */
 80468ea:	f7ff fff2 	bl	80468d2 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 80468ee:	4604      	mov	r4, r0
 80468f0:	b960      	cbnz	r0, 804690c <move_window+0x2e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80468f2:	462a      	mov	r2, r5
 80468f4:	2301      	movs	r3, #1
 80468f6:	f106 0138 	add.w	r1, r6, #56	; 0x38
 80468fa:	7870      	ldrb	r0, [r6, #1]
 80468fc:	f7ff ff7c 	bl	80467f8 <disk_read>
 8046900:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 8046902:	bf1c      	itt	ne
 8046904:	f04f 35ff 	movne.w	r5, #4294967295
 8046908:	2401      	movne	r4, #1
			fs->winsect = sector;
 804690a:	6375      	str	r5, [r6, #52]	; 0x34
}
 804690c:	4620      	mov	r0, r4
 804690e:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 8046910:	2400      	movs	r4, #0
 8046912:	e7fb      	b.n	804690c <move_window+0x2e>

08046914 <check_fs>:
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8046914:	2300      	movs	r3, #0
{
 8046916:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8046918:	70c3      	strb	r3, [r0, #3]
 804691a:	f04f 33ff 	mov.w	r3, #4294967295
 804691e:	6343      	str	r3, [r0, #52]	; 0x34
{
 8046920:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8046922:	f7ff ffdc 	bl	80468de <move_window>
 8046926:	bb30      	cbnz	r0, 8046976 <check_fs+0x62>
	rv = rv << 8 | ptr[0];
 8046928:	f894 2237 	ldrb.w	r2, [r4, #567]	; 0x237
 804692c:	f894 3236 	ldrb.w	r3, [r4, #566]	; 0x236
 8046930:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8046934:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8046938:	4293      	cmp	r3, r2
 804693a:	d11e      	bne.n	804697a <check_fs+0x66>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 804693c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8046940:	2be9      	cmp	r3, #233	; 0xe9
 8046942:	d005      	beq.n	8046950 <check_fs+0x3c>
 8046944:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8046946:	4a10      	ldr	r2, [pc, #64]	; (8046988 <check_fs+0x74>)
 8046948:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 804694c:	4293      	cmp	r3, r2
 804694e:	d116      	bne.n	804697e <check_fs+0x6a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8046950:	f104 006e 	add.w	r0, r4, #110	; 0x6e
 8046954:	f7ff ff7a 	bl	804684c <ld_dword>
 8046958:	4b0c      	ldr	r3, [pc, #48]	; (804698c <check_fs+0x78>)
 804695a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 804695e:	4298      	cmp	r0, r3
 8046960:	d00f      	beq.n	8046982 <check_fs+0x6e>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8046962:	f104 008a 	add.w	r0, r4, #138	; 0x8a
 8046966:	f7ff ff71 	bl	804684c <ld_dword>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 804696a:	4b09      	ldr	r3, [pc, #36]	; (8046990 <check_fs+0x7c>)
 804696c:	4298      	cmp	r0, r3
 804696e:	bf14      	ite	ne
 8046970:	2002      	movne	r0, #2
 8046972:	2000      	moveq	r0, #0
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
 8046974:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8046976:	2004      	movs	r0, #4
 8046978:	e7fc      	b.n	8046974 <check_fs+0x60>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 804697a:	2003      	movs	r0, #3
 804697c:	e7fa      	b.n	8046974 <check_fs+0x60>
	return 2;
 804697e:	2002      	movs	r0, #2
 8046980:	e7f8      	b.n	8046974 <check_fs+0x60>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8046982:	2000      	movs	r0, #0
 8046984:	e7f6      	b.n	8046974 <check_fs+0x60>
 8046986:	bf00      	nop
 8046988:	009000eb 	.word	0x009000eb
 804698c:	00544146 	.word	0x00544146
 8046990:	33544146 	.word	0x33544146

08046994 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8046994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8046998:	2300      	movs	r3, #0
{
 804699a:	b085      	sub	sp, #20
	*rfs = 0;
 804699c:	600b      	str	r3, [r1, #0]
{
 804699e:	4688      	mov	r8, r1
 80469a0:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 80469a2:	f7ff ff5b 	bl	804685c <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80469a6:	1e07      	subs	r7, r0, #0
 80469a8:	f2c0 815e 	blt.w	8046c68 <find_volume+0x2d4>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80469ac:	4eb2      	ldr	r6, [pc, #712]	; (8046c78 <find_volume+0x2e4>)
 80469ae:	eb06 0387 	add.w	r3, r6, r7, lsl #2
 80469b2:	6a1c      	ldr	r4, [r3, #32]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80469b4:	2c00      	cmp	r4, #0
 80469b6:	f000 8159 	beq.w	8046c6c <find_volume+0x2d8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80469ba:	f8c8 4000 	str.w	r4, [r8]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
	if (fs->fs_type) {					/* If the volume has been mounted */
 80469be:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80469c0:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 80469c4:	b173      	cbz	r3, 80469e4 <find_volume+0x50>
		stat = disk_status(fs->drv);
 80469c6:	7860      	ldrb	r0, [r4, #1]
 80469c8:	f7ff fefc 	bl	80467c4 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80469cc:	07c1      	lsls	r1, r0, #31
 80469ce:	d409      	bmi.n	80469e4 <find_volume+0x50>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80469d0:	2d00      	cmp	r5, #0
 80469d2:	f000 814d 	beq.w	8046c70 <find_volume+0x2dc>
 80469d6:	f010 0004 	ands.w	r0, r0, #4
 80469da:	d000      	beq.n	80469de <find_volume+0x4a>
				return FR_WRITE_PROTECTED;
 80469dc:	200a      	movs	r0, #10
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 80469de:	b005      	add	sp, #20
 80469e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 80469e4:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80469e6:	b2f8      	uxtb	r0, r7
	fs->fs_type = 0;					/* Clear the file system object */
 80469e8:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80469ea:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80469ec:	f7ff fef4 	bl	80467d8 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80469f0:	07c2      	lsls	r2, r0, #31
 80469f2:	f100 813f 	bmi.w	8046c74 <find_volume+0x2e0>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80469f6:	b10d      	cbz	r5, 80469fc <find_volume+0x68>
 80469f8:	0743      	lsls	r3, r0, #29
 80469fa:	d4ef      	bmi.n	80469dc <find_volume+0x48>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80469fc:	f104 020c 	add.w	r2, r4, #12
 8046a00:	2102      	movs	r1, #2
 8046a02:	7860      	ldrb	r0, [r4, #1]
 8046a04:	f7ff ff14 	bl	8046830 <disk_ioctl>
 8046a08:	b108      	cbz	r0, 8046a0e <find_volume+0x7a>
 8046a0a:	2001      	movs	r0, #1
 8046a0c:	e7e7      	b.n	80469de <find_volume+0x4a>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8046a0e:	89a5      	ldrh	r5, [r4, #12]
 8046a10:	f5a5 7300 	sub.w	r3, r5, #512	; 0x200
 8046a14:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8046a18:	d8f7      	bhi.n	8046a0a <find_volume+0x76>
 8046a1a:	1e69      	subs	r1, r5, #1
 8046a1c:	400d      	ands	r5, r1
 8046a1e:	d1f4      	bne.n	8046a0a <find_volume+0x76>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8046a20:	4629      	mov	r1, r5
 8046a22:	4620      	mov	r0, r4
 8046a24:	f7ff ff76 	bl	8046914 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8046a28:	2802      	cmp	r0, #2
 8046a2a:	f040 8101 	bne.w	8046c30 <find_volume+0x29c>
 8046a2e:	f504 77ff 	add.w	r7, r4, #510	; 0x1fe
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8046a32:	f817 0c04 	ldrb.w	r0, [r7, #-4]
 8046a36:	b110      	cbz	r0, 8046a3e <find_volume+0xaa>
 8046a38:	4638      	mov	r0, r7
 8046a3a:	f7ff ff07 	bl	804684c <ld_dword>
 8046a3e:	f84d 0025 	str.w	r0, [sp, r5, lsl #2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8046a42:	3501      	adds	r5, #1
 8046a44:	2d04      	cmp	r5, #4
 8046a46:	f107 0710 	add.w	r7, r7, #16
 8046a4a:	d1f2      	bne.n	8046a32 <find_volume+0x9e>
 8046a4c:	2500      	movs	r5, #0
			bsect = br[i];
 8046a4e:	f85d 7025 	ldr.w	r7, [sp, r5, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8046a52:	2f00      	cmp	r7, #0
 8046a54:	f000 80e4 	beq.w	8046c20 <find_volume+0x28c>
 8046a58:	4639      	mov	r1, r7
 8046a5a:	4620      	mov	r0, r4
 8046a5c:	f7ff ff5a 	bl	8046914 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8046a60:	2801      	cmp	r0, #1
 8046a62:	f200 80de 	bhi.w	8046c22 <find_volume+0x28e>
	rv = rv << 8 | ptr[0];
 8046a66:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8046a6a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8046a6e:	89a1      	ldrh	r1, [r4, #12]
 8046a70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8046a74:	4299      	cmp	r1, r3
 8046a76:	f040 80e0 	bne.w	8046c3a <find_volume+0x2a6>
	rv = rv << 8 | ptr[0];
 8046a7a:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
 8046a7e:	f894 904e 	ldrb.w	r9, [r4, #78]	; 0x4e
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8046a82:	ea59 2903 	orrs.w	r9, r9, r3, lsl #8
 8046a86:	d104      	bne.n	8046a92 <find_volume+0xfe>
 8046a88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8046a8c:	f7ff fede 	bl	804684c <ld_dword>
 8046a90:	4681      	mov	r9, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8046a92:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
		fs->fsize = fasize;
 8046a96:	f8c4 9020 	str.w	r9, [r4, #32]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8046a9a:	1e6b      	subs	r3, r5, #1
 8046a9c:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8046a9e:	70a5      	strb	r5, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8046aa0:	f200 80cb 	bhi.w	8046c3a <find_volume+0x2a6>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8046aa4:	f894 8045 	ldrb.w	r8, [r4, #69]	; 0x45
 8046aa8:	fa1f f388 	uxth.w	r3, r8
 8046aac:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8046aae:	2b00      	cmp	r3, #0
 8046ab0:	f000 80c3 	beq.w	8046c3a <find_volume+0x2a6>
 8046ab4:	f108 33ff 	add.w	r3, r8, #4294967295
 8046ab8:	ea13 0f08 	tst.w	r3, r8
 8046abc:	f040 80bd 	bne.w	8046c3a <find_volume+0x2a6>
	rv = rv << 8 | ptr[0];
 8046ac0:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8046ac4:	f894 a049 	ldrb.w	sl, [r4, #73]	; 0x49
 8046ac8:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8046acc:	094b      	lsrs	r3, r1, #5
 8046ace:	fbba fbf3 	udiv	fp, sl, r3
 8046ad2:	fb03 a31b 	mls	r3, r3, fp, sl
 8046ad6:	b29b      	uxth	r3, r3
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8046ad8:	f8a4 a008 	strh.w	sl, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8046adc:	2b00      	cmp	r3, #0
 8046ade:	f040 80ac 	bne.w	8046c3a <find_volume+0x2a6>
	rv = rv << 8 | ptr[0];
 8046ae2:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8046ae6:	f894 004b 	ldrb.w	r0, [r4, #75]	; 0x4b
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8046aea:	ea50 2003 	orrs.w	r0, r0, r3, lsl #8
 8046aee:	d103      	bne.n	8046af8 <find_volume+0x164>
 8046af0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8046af4:	f7ff feaa 	bl	804684c <ld_dword>
	rv = rv << 8 | ptr[0];
 8046af8:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 8046afc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8046b00:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8046b04:	f000 8099 	beq.w	8046c3a <find_volume+0x2a6>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8046b08:	fb09 fc05 	mul.w	ip, r9, r5
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8046b0c:	eb0b 0203 	add.w	r2, fp, r3
 8046b10:	4462      	add	r2, ip
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8046b12:	4290      	cmp	r0, r2
 8046b14:	f0c0 8091 	bcc.w	8046c3a <find_volume+0x2a6>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8046b18:	1a80      	subs	r0, r0, r2
 8046b1a:	fbb0 f0f8 	udiv	r0, r0, r8
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8046b1e:	2800      	cmp	r0, #0
 8046b20:	f000 808b 	beq.w	8046c3a <find_volume+0x2a6>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8046b24:	f64f 78f5 	movw	r8, #65525	; 0xfff5
 8046b28:	4540      	cmp	r0, r8
 8046b2a:	bf8c      	ite	hi
 8046b2c:	f04f 0803 	movhi.w	r8, #3
 8046b30:	f04f 0802 	movls.w	r8, #2
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8046b34:	f640 75f5 	movw	r5, #4085	; 0xff5
 8046b38:	42a8      	cmp	r0, r5
 8046b3a:	bf98      	it	ls
 8046b3c:	f04f 0801 	movls.w	r8, #1
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8046b40:	443b      	add	r3, r7
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8046b42:	1c85      	adds	r5, r0, #2
		fs->database = bsect + sysect;					/* Data start sector */
 8046b44:	443a      	add	r2, r7
		if (fmt == FS_FAT32) {
 8046b46:	f1b8 0f03 	cmp.w	r8, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8046b4a:	61e5      	str	r5, [r4, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8046b4c:	6267      	str	r7, [r4, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8046b4e:	62a3      	str	r3, [r4, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8046b50:	6322      	str	r2, [r4, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8046b52:	d176      	bne.n	8046c42 <find_volume+0x2ae>
	rv = rv << 8 | ptr[0];
 8046b54:	f894 2063 	ldrb.w	r2, [r4, #99]	; 0x63
 8046b58:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8046b5c:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8046b60:	d16b      	bne.n	8046c3a <find_volume+0x2a6>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8046b62:	f1ba 0f00 	cmp.w	sl, #0
 8046b66:	d168      	bne.n	8046c3a <find_volume+0x2a6>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8046b68:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8046b6c:	f7ff fe6e 	bl	804684c <ld_dword>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8046b70:	00ad      	lsls	r5, r5, #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8046b72:	62e0      	str	r0, [r4, #44]	; 0x2c
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8046b74:	1e4b      	subs	r3, r1, #1
 8046b76:	441d      	add	r5, r3
 8046b78:	fbb5 f1f1 	udiv	r1, r5, r1
 8046b7c:	4549      	cmp	r1, r9
 8046b7e:	d85c      	bhi.n	8046c3a <find_volume+0x2a6>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8046b80:	f04f 33ff 	mov.w	r3, #4294967295
 8046b84:	e9c4 3304 	strd	r3, r3, [r4, #16]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8046b88:	f1b8 0f03 	cmp.w	r8, #3
		fs->fsi_flag = 0x80;
 8046b8c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8046b90:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8046b92:	d12f      	bne.n	8046bf4 <find_volume+0x260>
	rv = rv << 8 | ptr[0];
 8046b94:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 8046b98:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 8046b9c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8046ba0:	2b01      	cmp	r3, #1
 8046ba2:	d127      	bne.n	8046bf4 <find_volume+0x260>
			&& move_window(fs, bsect + 1) == FR_OK)
 8046ba4:	1c79      	adds	r1, r7, #1
 8046ba6:	4620      	mov	r0, r4
 8046ba8:	f7ff fe99 	bl	80468de <move_window>
 8046bac:	bb10      	cbnz	r0, 8046bf4 <find_volume+0x260>
	rv = rv << 8 | ptr[0];
 8046bae:	f894 2237 	ldrb.w	r2, [r4, #567]	; 0x237
 8046bb2:	f894 3236 	ldrb.w	r3, [r4, #566]	; 0x236
			fs->fsi_flag = 0;
 8046bb6:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 8046bb8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8046bbc:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8046bc0:	4293      	cmp	r3, r2
 8046bc2:	d117      	bne.n	8046bf4 <find_volume+0x260>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8046bc4:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8046bc8:	f7ff fe40 	bl	804684c <ld_dword>
 8046bcc:	4b2b      	ldr	r3, [pc, #172]	; (8046c7c <find_volume+0x2e8>)
 8046bce:	4298      	cmp	r0, r3
 8046bd0:	d110      	bne.n	8046bf4 <find_volume+0x260>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8046bd2:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8046bd6:	f7ff fe39 	bl	804684c <ld_dword>
 8046bda:	4b29      	ldr	r3, [pc, #164]	; (8046c80 <find_volume+0x2ec>)
 8046bdc:	4298      	cmp	r0, r3
 8046bde:	d109      	bne.n	8046bf4 <find_volume+0x260>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8046be0:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8046be4:	f7ff fe32 	bl	804684c <ld_dword>
 8046be8:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8046bea:	f504 7009 	add.w	r0, r4, #548	; 0x224
 8046bee:	f7ff fe2d 	bl	804684c <ld_dword>
 8046bf2:	6120      	str	r0, [r4, #16]
	fs->id = ++Fsid;		/* File system mount ID */
 8046bf4:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
		if (Files[i].fs == fs) Files[i].fs = 0;
 8046bf6:	6832      	ldr	r2, [r6, #0]
	fs->fs_type = fmt;		/* FAT sub-type */
 8046bf8:	f884 8000 	strb.w	r8, [r4]
	fs->id = ++Fsid;		/* File system mount ID */
 8046bfc:	3301      	adds	r3, #1
 8046bfe:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 8046c00:	4294      	cmp	r4, r2
	fs->id = ++Fsid;		/* File system mount ID */
 8046c02:	84b3      	strh	r3, [r6, #36]	; 0x24
 8046c04:	80e3      	strh	r3, [r4, #6]
	fs->cdir = 0;			/* Initialize current directory */
 8046c06:	f04f 0300 	mov.w	r3, #0
		if (Files[i].fs == fs) Files[i].fs = 0;
 8046c0a:	bf08      	it	eq
 8046c0c:	6033      	streq	r3, [r6, #0]
	fs->cdir = 0;			/* Initialize current directory */
 8046c0e:	61a3      	str	r3, [r4, #24]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8046c10:	6933      	ldr	r3, [r6, #16]
 8046c12:	429c      	cmp	r4, r3
 8046c14:	f04f 0000 	mov.w	r0, #0
 8046c18:	f47f aee1 	bne.w	80469de <find_volume+0x4a>
 8046c1c:	6130      	str	r0, [r6, #16]
 8046c1e:	e6de      	b.n	80469de <find_volume+0x4a>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8046c20:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8046c22:	3501      	adds	r5, #1
 8046c24:	2d04      	cmp	r5, #4
 8046c26:	f47f af12 	bne.w	8046a4e <find_volume+0xba>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8046c2a:	2804      	cmp	r0, #4
 8046c2c:	d105      	bne.n	8046c3a <find_volume+0x2a6>
 8046c2e:	e6ec      	b.n	8046a0a <find_volume+0x76>
 8046c30:	2804      	cmp	r0, #4
 8046c32:	f43f aeea 	beq.w	8046a0a <find_volume+0x76>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8046c36:	2801      	cmp	r0, #1
 8046c38:	d901      	bls.n	8046c3e <find_volume+0x2aa>
 8046c3a:	200d      	movs	r0, #13
 8046c3c:	e6cf      	b.n	80469de <find_volume+0x4a>
	bsect = 0;
 8046c3e:	462f      	mov	r7, r5
 8046c40:	e711      	b.n	8046a66 <find_volume+0xd2>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8046c42:	f1ba 0f00 	cmp.w	sl, #0
 8046c46:	d0f8      	beq.n	8046c3a <find_volume+0x2a6>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8046c48:	f1b8 0f02 	cmp.w	r8, #2
 8046c4c:	ea4f 0045 	mov.w	r0, r5, lsl #1
 8046c50:	bf18      	it	ne
 8046c52:	1940      	addne	r0, r0, r5
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8046c54:	4463      	add	r3, ip
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8046c56:	bf18      	it	ne
 8046c58:	f005 0501 	andne.w	r5, r5, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8046c5c:	62e3      	str	r3, [r4, #44]	; 0x2c
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8046c5e:	bf0c      	ite	eq
 8046c60:	4605      	moveq	r5, r0
 8046c62:	eb05 0550 	addne.w	r5, r5, r0, lsr #1
 8046c66:	e785      	b.n	8046b74 <find_volume+0x1e0>
	if (vol < 0) return FR_INVALID_DRIVE;
 8046c68:	200b      	movs	r0, #11
 8046c6a:	e6b8      	b.n	80469de <find_volume+0x4a>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8046c6c:	200c      	movs	r0, #12
 8046c6e:	e6b6      	b.n	80469de <find_volume+0x4a>
			return FR_OK;				/* The file system object is valid */
 8046c70:	4628      	mov	r0, r5
 8046c72:	e6b4      	b.n	80469de <find_volume+0x4a>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8046c74:	2003      	movs	r0, #3
 8046c76:	e6b2      	b.n	80469de <find_volume+0x4a>
 8046c78:	20008494 	.word	0x20008494
 8046c7c:	41615252 	.word	0x41615252
 8046c80:	61417272 	.word	0x61417272

08046c84 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8046c84:	b530      	push	{r4, r5, lr}
 8046c86:	b085      	sub	sp, #20
 8046c88:	e9cd 1000 	strd	r1, r0, [sp]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8046c8c:	a804      	add	r0, sp, #16
{
 8046c8e:	4615      	mov	r5, r2
	const TCHAR *rp = path;
 8046c90:	f840 1d04 	str.w	r1, [r0, #-4]!


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8046c94:	f7ff fde2 	bl	804685c <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8046c98:	2800      	cmp	r0, #0
 8046c9a:	db1f      	blt.n	8046cdc <f_mount+0x58>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8046c9c:	4b11      	ldr	r3, [pc, #68]	; (8046ce4 <f_mount+0x60>)
 8046c9e:	0081      	lsls	r1, r0, #2
 8046ca0:	185a      	adds	r2, r3, r1
 8046ca2:	6a10      	ldr	r0, [r2, #32]

	if (cfs) {
 8046ca4:	b150      	cbz	r0, 8046cbc <f_mount+0x38>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8046ca6:	681a      	ldr	r2, [r3, #0]
 8046ca8:	4290      	cmp	r0, r2
 8046caa:	bf04      	itt	eq
 8046cac:	2200      	moveq	r2, #0
 8046cae:	601a      	streq	r2, [r3, #0]
 8046cb0:	691a      	ldr	r2, [r3, #16]
 8046cb2:	2400      	movs	r4, #0
 8046cb4:	4290      	cmp	r0, r2
 8046cb6:	bf08      	it	eq
 8046cb8:	611c      	streq	r4, [r3, #16]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8046cba:	7004      	strb	r4, [r0, #0]
	}

	if (fs) {
 8046cbc:	9801      	ldr	r0, [sp, #4]
 8046cbe:	b108      	cbz	r0, 8046cc4 <f_mount+0x40>
		fs->fs_type = 0;				/* Clear new fs object */
 8046cc0:	2200      	movs	r2, #0
 8046cc2:	7002      	strb	r2, [r0, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8046cc4:	440b      	add	r3, r1
 8046cc6:	6218      	str	r0, [r3, #32]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8046cc8:	b130      	cbz	r0, 8046cd8 <f_mount+0x54>
 8046cca:	2d01      	cmp	r5, #1
 8046ccc:	d108      	bne.n	8046ce0 <f_mount+0x5c>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8046cce:	2200      	movs	r2, #0
 8046cd0:	a901      	add	r1, sp, #4
 8046cd2:	4668      	mov	r0, sp
 8046cd4:	f7ff fe5e 	bl	8046994 <find_volume>
	LEAVE_FF(fs, res);
}
 8046cd8:	b005      	add	sp, #20
 8046cda:	bd30      	pop	{r4, r5, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8046cdc:	200b      	movs	r0, #11
 8046cde:	e7fb      	b.n	8046cd8 <f_mount+0x54>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8046ce0:	2000      	movs	r0, #0
 8046ce2:	e7f9      	b.n	8046cd8 <f_mount+0x54>
 8046ce4:	20008494 	.word	0x20008494

08046ce8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8046ce8:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8046cea:	4b0f      	ldr	r3, [pc, #60]	; (8046d28 <FATFS_LinkDriverEx+0x40>)
 8046cec:	7a5d      	ldrb	r5, [r3, #9]
 8046cee:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 8046cf2:	b9b5      	cbnz	r5, 8046d22 <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8046cf4:	7a5d      	ldrb	r5, [r3, #9]
 8046cf6:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8046cf8:	7a5d      	ldrb	r5, [r3, #9]
 8046cfa:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8046cfe:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8046d00:	7a58      	ldrb	r0, [r3, #9]
 8046d02:	4418      	add	r0, r3
 8046d04:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8046d06:	7a5a      	ldrb	r2, [r3, #9]
 8046d08:	b2d2      	uxtb	r2, r2
 8046d0a:	1c50      	adds	r0, r2, #1
 8046d0c:	b2c0      	uxtb	r0, r0
 8046d0e:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8046d10:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8046d12:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8046d14:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8046d16:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8046d18:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8046d1a:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8046d1c:	70cc      	strb	r4, [r1, #3]
 8046d1e:	4620      	mov	r0, r4
    ret = 0;
  }

  return ret;
}
 8046d20:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8046d22:	2001      	movs	r0, #1
 8046d24:	e7fc      	b.n	8046d20 <FATFS_LinkDriverEx+0x38>
 8046d26:	bf00      	nop
 8046d28:	200084bc 	.word	0x200084bc

08046d2c <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8046d2c:	2200      	movs	r2, #0
 8046d2e:	f7ff bfdb 	b.w	8046ce8 <FATFS_LinkDriverEx>

08046d32 <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 8046d32:	780a      	ldrb	r2, [r1, #0]
 8046d34:	7803      	ldrb	r3, [r0, #0]
 8046d36:	4053      	eors	r3, r2
 8046d38:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 8046d3a:	784a      	ldrb	r2, [r1, #1]
 8046d3c:	7843      	ldrb	r3, [r0, #1]
 8046d3e:	4053      	eors	r3, r2
 8046d40:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 8046d42:	788a      	ldrb	r2, [r1, #2]
 8046d44:	7883      	ldrb	r3, [r0, #2]
 8046d46:	4053      	eors	r3, r2
 8046d48:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 8046d4a:	78ca      	ldrb	r2, [r1, #3]
 8046d4c:	78c3      	ldrb	r3, [r0, #3]
 8046d4e:	4053      	eors	r3, r2
 8046d50:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 8046d52:	790a      	ldrb	r2, [r1, #4]
 8046d54:	7903      	ldrb	r3, [r0, #4]
 8046d56:	4053      	eors	r3, r2
 8046d58:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 8046d5a:	794a      	ldrb	r2, [r1, #5]
 8046d5c:	7943      	ldrb	r3, [r0, #5]
 8046d5e:	4053      	eors	r3, r2
 8046d60:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 8046d62:	798a      	ldrb	r2, [r1, #6]
 8046d64:	7983      	ldrb	r3, [r0, #6]
 8046d66:	4053      	eors	r3, r2
 8046d68:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 8046d6a:	79ca      	ldrb	r2, [r1, #7]
 8046d6c:	79c3      	ldrb	r3, [r0, #7]
 8046d6e:	4053      	eors	r3, r2
 8046d70:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 8046d72:	7a0a      	ldrb	r2, [r1, #8]
 8046d74:	7a03      	ldrb	r3, [r0, #8]
 8046d76:	4053      	eors	r3, r2
 8046d78:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 8046d7a:	7a4a      	ldrb	r2, [r1, #9]
 8046d7c:	7a43      	ldrb	r3, [r0, #9]
 8046d7e:	4053      	eors	r3, r2
 8046d80:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 8046d82:	7a8a      	ldrb	r2, [r1, #10]
 8046d84:	7a83      	ldrb	r3, [r0, #10]
 8046d86:	4053      	eors	r3, r2
 8046d88:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8046d8a:	7aca      	ldrb	r2, [r1, #11]
 8046d8c:	7ac3      	ldrb	r3, [r0, #11]
 8046d8e:	4053      	eors	r3, r2
 8046d90:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8046d92:	7b0a      	ldrb	r2, [r1, #12]
 8046d94:	7b03      	ldrb	r3, [r0, #12]
 8046d96:	4053      	eors	r3, r2
 8046d98:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 8046d9a:	7b4a      	ldrb	r2, [r1, #13]
 8046d9c:	7b43      	ldrb	r3, [r0, #13]
 8046d9e:	4053      	eors	r3, r2
 8046da0:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 8046da2:	7b8a      	ldrb	r2, [r1, #14]
 8046da4:	7b83      	ldrb	r3, [r0, #14]
 8046da6:	4053      	eors	r3, r2
 8046da8:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8046daa:	7bca      	ldrb	r2, [r1, #15]
 8046dac:	7bc3      	ldrb	r3, [r0, #15]
 8046dae:	4053      	eors	r3, r2
 8046db0:	73c3      	strb	r3, [r0, #15]
#endif
}
 8046db2:	4770      	bx	lr

08046db4 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 8046db4:	b510      	push	{r4, lr}
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 8046db6:	780b      	ldrb	r3, [r1, #0]
 8046db8:	7814      	ldrb	r4, [r2, #0]
 8046dba:	4063      	eors	r3, r4
 8046dbc:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8046dbe:	7854      	ldrb	r4, [r2, #1]
 8046dc0:	784b      	ldrb	r3, [r1, #1]
 8046dc2:	4063      	eors	r3, r4
 8046dc4:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 8046dc6:	7894      	ldrb	r4, [r2, #2]
 8046dc8:	788b      	ldrb	r3, [r1, #2]
 8046dca:	4063      	eors	r3, r4
 8046dcc:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8046dce:	78d4      	ldrb	r4, [r2, #3]
 8046dd0:	78cb      	ldrb	r3, [r1, #3]
 8046dd2:	4063      	eors	r3, r4
 8046dd4:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 8046dd6:	7914      	ldrb	r4, [r2, #4]
 8046dd8:	790b      	ldrb	r3, [r1, #4]
 8046dda:	4063      	eors	r3, r4
 8046ddc:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 8046dde:	7954      	ldrb	r4, [r2, #5]
 8046de0:	794b      	ldrb	r3, [r1, #5]
 8046de2:	4063      	eors	r3, r4
 8046de4:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 8046de6:	7994      	ldrb	r4, [r2, #6]
 8046de8:	798b      	ldrb	r3, [r1, #6]
 8046dea:	4063      	eors	r3, r4
 8046dec:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8046dee:	79d4      	ldrb	r4, [r2, #7]
 8046df0:	79cb      	ldrb	r3, [r1, #7]
 8046df2:	4063      	eors	r3, r4
 8046df4:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 8046df6:	7a14      	ldrb	r4, [r2, #8]
 8046df8:	7a0b      	ldrb	r3, [r1, #8]
 8046dfa:	4063      	eors	r3, r4
 8046dfc:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8046dfe:	7a54      	ldrb	r4, [r2, #9]
 8046e00:	7a4b      	ldrb	r3, [r1, #9]
 8046e02:	4063      	eors	r3, r4
 8046e04:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 8046e06:	7a8b      	ldrb	r3, [r1, #10]
 8046e08:	7a94      	ldrb	r4, [r2, #10]
 8046e0a:	4063      	eors	r3, r4
 8046e0c:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 8046e0e:	7ad4      	ldrb	r4, [r2, #11]
 8046e10:	7acb      	ldrb	r3, [r1, #11]
 8046e12:	4063      	eors	r3, r4
 8046e14:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 8046e16:	7b14      	ldrb	r4, [r2, #12]
 8046e18:	7b0b      	ldrb	r3, [r1, #12]
 8046e1a:	4063      	eors	r3, r4
 8046e1c:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 8046e1e:	7b54      	ldrb	r4, [r2, #13]
 8046e20:	7b4b      	ldrb	r3, [r1, #13]
 8046e22:	4063      	eors	r3, r4
 8046e24:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 8046e26:	7b94      	ldrb	r4, [r2, #14]
 8046e28:	7b8b      	ldrb	r3, [r1, #14]
 8046e2a:	4063      	eors	r3, r4
 8046e2c:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 8046e2e:	7bcb      	ldrb	r3, [r1, #15]
 8046e30:	7bd2      	ldrb	r2, [r2, #15]
 8046e32:	4053      	eors	r3, r2
 8046e34:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 8046e36:	bd10      	pop	{r4, pc}

08046e38 <aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type aes_set_key( const uint8_t key[], length_type keylen, aes_context ctx[1] )
{
 8046e38:	f1a1 0310 	sub.w	r3, r1, #16
 8046e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8046e40:	b2dc      	uxtb	r4, r3
 8046e42:	2c10      	cmp	r4, #16
 8046e44:	d806      	bhi.n	8046e54 <aes_set_key+0x1c>
 8046e46:	2301      	movs	r3, #1
 8046e48:	40a3      	lsls	r3, r4
 8046e4a:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8046e4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8046e52:	b92b      	cbnz	r3, 8046e60 <aes_set_key+0x28>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 8046e54:	2300      	movs	r3, #0
 8046e56:	f882 30f0 	strb.w	r3, [r2, #240]	; 0xf0
        return ( uint8_t )-1;
 8046e5a:	20ff      	movs	r0, #255	; 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 8046e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8046e60:	1e53      	subs	r3, r2, #1
 8046e62:	1844      	adds	r4, r0, r1
    while( nn-- )
 8046e64:	42a0      	cmp	r0, r4
 8046e66:	d150      	bne.n	8046f0a <aes_set_key+0xd2>
    hi = (keylen + 28) << 2;
 8046e68:	f101 0e1c 	add.w	lr, r1, #28
 8046e6c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8046e70:	fa5f fe8e 	uxtb.w	lr, lr
    ctx->rnd = (hi >> 4) - 1;
 8046e74:	ea4f 131e 	mov.w	r3, lr, lsr #4
 8046e78:	3b01      	subs	r3, #1
            t0 = s_box(t0);
 8046e7a:	4c2c      	ldr	r4, [pc, #176]	; (8046f2c <aes_set_key+0xf4>)
    ctx->rnd = (hi >> 4) - 1;
 8046e7c:	f882 30f0 	strb.w	r3, [r2, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8046e80:	f04f 0901 	mov.w	r9, #1
    ctx->rnd = (hi >> 4) - 1;
 8046e84:	460b      	mov	r3, r1
        t0 = ctx->ksch[cc - 4];
 8046e86:	18d5      	adds	r5, r2, r3
        if( cc % keylen == 0 )
 8046e88:	fbb3 f0f1 	udiv	r0, r3, r1
 8046e8c:	fb01 3010 	mls	r0, r1, r0, r3
 8046e90:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
        t0 = ctx->ksch[cc - 4];
 8046e94:	f815 ac04 	ldrb.w	sl, [r5, #-4]
        t1 = ctx->ksch[cc - 3];
 8046e98:	f815 cc03 	ldrb.w	ip, [r5, #-3]
        t2 = ctx->ksch[cc - 2];
 8046e9c:	f815 7c02 	ldrb.w	r7, [r5, #-2]
        t3 = ctx->ksch[cc - 1];
 8046ea0:	f815 6c01 	ldrb.w	r6, [r5, #-1]
        if( cc % keylen == 0 )
 8046ea4:	d136      	bne.n	8046f14 <aes_set_key+0xdc>
            rc = f2(rc);
 8046ea6:	ea4f 10d9 	mov.w	r0, r9, lsr #7
            t0 = s_box(t1) ^ rc;
 8046eaa:	f814 800c 	ldrb.w	r8, [r4, ip]
            t1 = s_box(t2);
 8046eae:	f814 c007 	ldrb.w	ip, [r4, r7]
            t2 = s_box(t3);
 8046eb2:	5da7      	ldrb	r7, [r4, r6]
            t3 = s_box(tt);
 8046eb4:	f814 600a 	ldrb.w	r6, [r4, sl]
            rc = f2(rc);
 8046eb8:	ea4f 0a40 	mov.w	sl, r0, lsl #1
 8046ebc:	4450      	add	r0, sl
 8046ebe:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
            t0 = s_box(t1) ^ rc;
 8046ec2:	ea89 0808 	eor.w	r8, r9, r8
            rc = f2(rc);
 8046ec6:	ea80 0049 	eor.w	r0, r0, r9, lsl #1
 8046eca:	fa5f f980 	uxtb.w	r9, r0
            t0 = s_box(t1) ^ rc;
 8046ece:	46c2      	mov	sl, r8
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8046ed0:	1a58      	subs	r0, r3, r1
 8046ed2:	b2c0      	uxtb	r0, r0
 8046ed4:	f812 8000 	ldrb.w	r8, [r2, r0]
 8046ed8:	ea8a 0a08 	eor.w	sl, sl, r8
 8046edc:	f802 a003 	strb.w	sl, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8046ee0:	4410      	add	r0, r2
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8046ee2:	3304      	adds	r3, #4
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8046ee4:	f890 8001 	ldrb.w	r8, [r0, #1]
 8046ee8:	ea8c 0c08 	eor.w	ip, ip, r8
 8046eec:	f885 c001 	strb.w	ip, [r5, #1]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8046ef0:	f890 c002 	ldrb.w	ip, [r0, #2]
 8046ef4:	ea87 070c 	eor.w	r7, r7, ip
 8046ef8:	70af      	strb	r7, [r5, #2]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8046efa:	78c0      	ldrb	r0, [r0, #3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8046efc:	b2db      	uxtb	r3, r3
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8046efe:	4046      	eors	r6, r0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8046f00:	459e      	cmp	lr, r3
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8046f02:	70ee      	strb	r6, [r5, #3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8046f04:	d8bf      	bhi.n	8046e86 <aes_set_key+0x4e>
    return 0;
 8046f06:	2000      	movs	r0, #0
 8046f08:	e7a8      	b.n	8046e5c <aes_set_key+0x24>
        *d++ = *s++;
 8046f0a:	f810 5b01 	ldrb.w	r5, [r0], #1
 8046f0e:	f803 5f01 	strb.w	r5, [r3, #1]!
 8046f12:	e7a7      	b.n	8046e64 <aes_set_key+0x2c>
        else if( keylen > 24 && cc % keylen == 16 )
 8046f14:	2918      	cmp	r1, #24
 8046f16:	d9db      	bls.n	8046ed0 <aes_set_key+0x98>
 8046f18:	2810      	cmp	r0, #16
            t0 = s_box(t0);
 8046f1a:	bf01      	itttt	eq
 8046f1c:	f814 a00a 	ldrbeq.w	sl, [r4, sl]
            t1 = s_box(t1);
 8046f20:	f814 c00c 	ldrbeq.w	ip, [r4, ip]
            t2 = s_box(t2);
 8046f24:	5de7      	ldrbeq	r7, [r4, r7]
            t3 = s_box(t3);
 8046f26:	5da6      	ldrbeq	r6, [r4, r6]
 8046f28:	e7d2      	b.n	8046ed0 <aes_set_key+0x98>
 8046f2a:	bf00      	nop
 8046f2c:	0804e2b8 	.word	0x0804e2b8

08046f30 <aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const aes_context ctx[1] )
{
 8046f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8046f34:	b09f      	sub	sp, #124	; 0x7c
    if( ctx->rnd )
 8046f36:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
{
 8046f3a:	9118      	str	r1, [sp, #96]	; 0x60
 8046f3c:	920a      	str	r2, [sp, #40]	; 0x28
    if( ctx->rnd )
 8046f3e:	2b00      	cmp	r3, #0
 8046f40:	f000 8168 	beq.w	8047214 <aes_encrypt+0x2e4>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 8046f44:	ad1a      	add	r5, sp, #104	; 0x68
 8046f46:	4601      	mov	r1, r0
 8046f48:	4cb3      	ldr	r4, [pc, #716]	; (8047218 <aes_encrypt+0x2e8>)
 8046f4a:	4628      	mov	r0, r5
 8046f4c:	f7ff ff32 	bl	8046db4 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 8046f50:	f04f 0b01 	mov.w	fp, #1
    xor_block(d, k);
 8046f54:	9519      	str	r5, [sp, #100]	; 0x64
 8046f56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8046f58:	f89d c068 	ldrb.w	ip, [sp, #104]	; 0x68
 8046f5c:	f89d 706d 	ldrb.w	r7, [sp, #109]	; 0x6d
 8046f60:	f89d 8072 	ldrb.w	r8, [sp, #114]	; 0x72
 8046f64:	f89d e077 	ldrb.w	lr, [sp, #119]	; 0x77
 8046f68:	f814 5008 	ldrb.w	r5, [r4, r8]
 8046f6c:	f814 100e 	ldrb.w	r1, [r4, lr]
 8046f70:	f814 200c 	ldrb.w	r2, [r4, ip]
 8046f74:	f814 a007 	ldrb.w	sl, [r4, r7]
 8046f78:	eb03 130b 	add.w	r3, r3, fp, lsl #4
 8046f7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8046f7e:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8046f82:	930c      	str	r3, [sp, #48]	; 0x30
 8046f84:	f89d 3071 	ldrb.w	r3, [sp, #113]	; 0x71
 8046f88:	930d      	str	r3, [sp, #52]	; 0x34
 8046f8a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8046f8c:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8046f90:	5da6      	ldrb	r6, [r4, r6]
 8046f92:	930e      	str	r3, [sp, #56]	; 0x38
 8046f94:	5ce3      	ldrb	r3, [r4, r3]
 8046f96:	9300      	str	r3, [sp, #0]
 8046f98:	9601      	str	r6, [sp, #4]
 8046f9a:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8046f9e:	f89d 6070 	ldrb.w	r6, [sp, #112]	; 0x70
 8046fa2:	9610      	str	r6, [sp, #64]	; 0x40
 8046fa4:	f89d 6075 	ldrb.w	r6, [sp, #117]	; 0x75
 8046fa8:	930f      	str	r3, [sp, #60]	; 0x3c
 8046faa:	5ce0      	ldrb	r0, [r4, r3]
 8046fac:	9611      	str	r6, [sp, #68]	; 0x44
 8046fae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8046fb0:	f89d 606a 	ldrb.w	r6, [sp, #106]	; 0x6a
 8046fb4:	5ce3      	ldrb	r3, [r4, r3]
 8046fb6:	9612      	str	r6, [sp, #72]	; 0x48
 8046fb8:	5da6      	ldrb	r6, [r4, r6]
 8046fba:	9602      	str	r6, [sp, #8]
 8046fbc:	f89d 606f 	ldrb.w	r6, [sp, #111]	; 0x6f
 8046fc0:	9613      	str	r6, [sp, #76]	; 0x4c
 8046fc2:	5da6      	ldrb	r6, [r4, r6]
 8046fc4:	9603      	str	r6, [sp, #12]
 8046fc6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8046fc8:	5da6      	ldrb	r6, [r4, r6]
 8046fca:	9604      	str	r6, [sp, #16]
 8046fcc:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8046fce:	5da6      	ldrb	r6, [r4, r6]
 8046fd0:	9605      	str	r6, [sp, #20]
 8046fd2:	f89d 6074 	ldrb.w	r6, [sp, #116]	; 0x74
 8046fd6:	9614      	str	r6, [sp, #80]	; 0x50
 8046fd8:	f89d 6069 	ldrb.w	r6, [sp, #105]	; 0x69
 8046fdc:	9615      	str	r6, [sp, #84]	; 0x54
 8046fde:	f89d 606e 	ldrb.w	r6, [sp, #110]	; 0x6e
 8046fe2:	9616      	str	r6, [sp, #88]	; 0x58
 8046fe4:	5da6      	ldrb	r6, [r4, r6]
 8046fe6:	9606      	str	r6, [sp, #24]
 8046fe8:	f89d 6073 	ldrb.w	r6, [sp, #115]	; 0x73
 8046fec:	9617      	str	r6, [sp, #92]	; 0x5c
 8046fee:	5da6      	ldrb	r6, [r4, r6]
 8046ff0:	9607      	str	r6, [sp, #28]
 8046ff2:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8046ff4:	5da6      	ldrb	r6, [r4, r6]
 8046ff6:	9608      	str	r6, [sp, #32]
 8046ff8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8046ffa:	5da6      	ldrb	r6, [r4, r6]
 8046ffc:	9609      	str	r6, [sp, #36]	; 0x24
        for( r = 1 ; r < ctx->rnd ; ++r )
 8046ffe:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8047000:	f896 90f0 	ldrb.w	r9, [r6, #240]	; 0xf0
 8047004:	45d9      	cmp	r9, fp
 8047006:	d832      	bhi.n	804706e <aes_encrypt+0x13e>
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8047008:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 804700c:	9b04      	ldr	r3, [sp, #16]
 804700e:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8047012:	9b08      	ldr	r3, [sp, #32]
 8047014:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8047018:	9b01      	ldr	r3, [sp, #4]
 804701a:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 804701e:	9b05      	ldr	r3, [sp, #20]
 8047020:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
 8047024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8047026:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 804702a:	9b02      	ldr	r3, [sp, #8]
 804702c:	f88d 3072 	strb.w	r3, [sp, #114]	; 0x72
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8047030:	9b00      	ldr	r3, [sp, #0]
 8047032:	f88d 306e 	strb.w	r3, [sp, #110]	; 0x6e
 8047036:	9b06      	ldr	r3, [sp, #24]
 8047038:	f88d 3076 	strb.w	r3, [sp, #118]	; 0x76
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 804703c:	9b07      	ldr	r3, [sp, #28]
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 804703e:	f88d 2068 	strb.w	r2, [sp, #104]	; 0x68
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8047042:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8047046:	f88d 006f 	strb.w	r0, [sp, #111]	; 0x6f
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 804704a:	9b03      	ldr	r3, [sp, #12]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 804704c:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8047050:	9818      	ldr	r0, [sp, #96]	; 0x60
 8047052:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8047054:	f88d a069 	strb.w	sl, [sp, #105]	; 0x69
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8047058:	a91a      	add	r1, sp, #104	; 0x68
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 804705a:	f88d 506a 	strb.w	r5, [sp, #106]	; 0x6a
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 804705e:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8047062:	f7ff fea7 	bl	8046db4 <copy_and_key>
 8047066:	2000      	movs	r0, #0
    }
    else
        return ( uint8_t )-1;
    return 0;
}
 8047068:	b01f      	add	sp, #124	; 0x7c
 804706a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 804706e:	44a4      	add	ip, r4
 8047070:	4427      	add	r7, r4
 8047072:	f89c 6100 	ldrb.w	r6, [ip, #256]	; 0x100
 8047076:	ea85 0901 	eor.w	r9, r5, r1
 804707a:	ea86 0909 	eor.w	r9, r6, r9
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 804707e:	44a0      	add	r8, r4
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8047080:	f897 6200 	ldrb.w	r6, [r7, #512]	; 0x200
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8047084:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
 8047088:	4051      	eors	r1, r2
 804708a:	4079      	eors	r1, r7
 804708c:	f898 7200 	ldrb.w	r7, [r8, #512]	; 0x200
 8047090:	4079      	eors	r1, r7
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8047092:	44a6      	add	lr, r4
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8047094:	f88d 1069 	strb.w	r1, [sp, #105]	; 0x69
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8047098:	f898 1100 	ldrb.w	r1, [r8, #256]	; 0x100
 804709c:	ea82 020a 	eor.w	r2, r2, sl
 80470a0:	404a      	eors	r2, r1
 80470a2:	f89e 1200 	ldrb.w	r1, [lr, #512]	; 0x200
 80470a6:	404a      	eors	r2, r1
 80470a8:	f88d 206a 	strb.w	r2, [sp, #106]	; 0x6a
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 80470ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80470ae:	4422      	add	r2, r4
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 80470b0:	ea89 0906 	eor.w	r9, r9, r6
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 80470b4:	4616      	mov	r6, r2
 80470b6:	9a00      	ldr	r2, [sp, #0]
 80470b8:	f896 1100 	ldrb.w	r1, [r6, #256]	; 0x100
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 80470bc:	f88d 9068 	strb.w	r9, [sp, #104]	; 0x68
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 80470c0:	ea85 050a 	eor.w	r5, r5, sl
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 80470c4:	4042      	eors	r2, r0
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 80470c6:	f89c a200 	ldrb.w	sl, [ip, #512]	; 0x200
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 80470ca:	404a      	eors	r2, r1
 80470cc:	990d      	ldr	r1, [sp, #52]	; 0x34
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 80470ce:	ea8a 0505 	eor.w	r5, sl, r5
 80470d2:	f89e a100 	ldrb.w	sl, [lr, #256]	; 0x100
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 80470d6:	4421      	add	r1, r4
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 80470d8:	ea85 050a 	eor.w	r5, r5, sl
 80470dc:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 80470e0:	f891 5200 	ldrb.w	r5, [r1, #512]	; 0x200
 80470e4:	406a      	eors	r2, r5
 80470e6:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 80470ea:	f891 2100 	ldrb.w	r2, [r1, #256]	; 0x100
 80470ee:	4058      	eors	r0, r3
 80470f0:	4050      	eors	r0, r2
 80470f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80470f4:	4422      	add	r2, r4
 80470f6:	f892 1200 	ldrb.w	r1, [r2, #512]	; 0x200
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 80470fa:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 80470fe:	4048      	eors	r0, r1
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8047100:	9901      	ldr	r1, [sp, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8047102:	f88d 006d 	strb.w	r0, [sp, #109]	; 0x6d
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8047106:	404b      	eors	r3, r1
 8047108:	4053      	eors	r3, r2
 804710a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 804710c:	4422      	add	r2, r4
 804710e:	f892 1200 	ldrb.w	r1, [r2, #512]	; 0x200
 8047112:	404b      	eors	r3, r1
 8047114:	f88d 306e 	strb.w	r3, [sp, #110]	; 0x6e
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8047118:	e9dd 3100 	ldrd	r3, r1, [sp]
 804711c:	404b      	eors	r3, r1
 804711e:	f896 1200 	ldrb.w	r1, [r6, #512]	; 0x200
 8047122:	404b      	eors	r3, r1
 8047124:	f892 1100 	ldrb.w	r1, [r2, #256]	; 0x100
 8047128:	404b      	eors	r3, r1
 804712a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 804712e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8047130:	4423      	add	r3, r4
 8047132:	461a      	mov	r2, r3
 8047134:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
 8047138:	404b      	eors	r3, r1
 804713a:	f892 1100 	ldrb.w	r1, [r2, #256]	; 0x100
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 804713e:	f892 2200 	ldrb.w	r2, [r2, #512]	; 0x200
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8047142:	404b      	eors	r3, r1
 8047144:	9911      	ldr	r1, [sp, #68]	; 0x44
 8047146:	4421      	add	r1, r4
 8047148:	f891 0200 	ldrb.w	r0, [r1, #512]	; 0x200
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 804714c:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8047150:	4043      	eors	r3, r0
 8047152:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8047156:	e9dd 3003 	ldrd	r3, r0, [sp, #12]
 804715a:	4043      	eors	r3, r0
 804715c:	404b      	eors	r3, r1
 804715e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8047160:	4421      	add	r1, r4
 8047162:	f891 0200 	ldrb.w	r0, [r1, #512]	; 0x200
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8047166:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 804716a:	4043      	eors	r3, r0
 804716c:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8047170:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
 8047174:	4043      	eors	r3, r0
 8047176:	404b      	eors	r3, r1
 8047178:	9913      	ldr	r1, [sp, #76]	; 0x4c
 804717a:	4421      	add	r1, r4
 804717c:	f891 0200 	ldrb.w	r0, [r1, #512]	; 0x200
 8047180:	4043      	eors	r3, r0
 8047182:	f88d 3072 	strb.w	r3, [sp, #114]	; 0x72
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8047186:	9805      	ldr	r0, [sp, #20]
 8047188:	9b02      	ldr	r3, [sp, #8]
 804718a:	4043      	eors	r3, r0
 804718c:	4053      	eors	r3, r2
 804718e:	f891 2100 	ldrb.w	r2, [r1, #256]	; 0x100
 8047192:	4053      	eors	r3, r2
 8047194:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8047198:	9b14      	ldr	r3, [sp, #80]	; 0x50
 804719a:	4423      	add	r3, r4
 804719c:	461a      	mov	r2, r3
 804719e:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
 80471a2:	404b      	eors	r3, r1
 80471a4:	f892 1100 	ldrb.w	r1, [r2, #256]	; 0x100
 80471a8:	404b      	eors	r3, r1
 80471aa:	9915      	ldr	r1, [sp, #84]	; 0x54
 80471ac:	4421      	add	r1, r4
 80471ae:	f891 0200 	ldrb.w	r0, [r1, #512]	; 0x200
 80471b2:	4043      	eors	r3, r0
 80471b4:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 80471b8:	e9dd 3007 	ldrd	r3, r0, [sp, #28]
 80471bc:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 80471c0:	f892 2200 	ldrb.w	r2, [r2, #512]	; 0x200
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 80471c4:	4043      	eors	r3, r0
 80471c6:	404b      	eors	r3, r1
 80471c8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80471ca:	4421      	add	r1, r4
 80471cc:	f891 0200 	ldrb.w	r0, [r1, #512]	; 0x200
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 80471d0:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 80471d4:	4043      	eors	r3, r0
 80471d6:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 80471da:	e9dd 3008 	ldrd	r3, r0, [sp, #32]
 80471de:	4043      	eors	r3, r0
 80471e0:	404b      	eors	r3, r1
 80471e2:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80471e4:	4421      	add	r1, r4
 80471e6:	f891 0200 	ldrb.w	r0, [r1, #512]	; 0x200
 80471ea:	4043      	eors	r3, r0
 80471ec:	f88d 3076 	strb.w	r3, [sp, #118]	; 0x76
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 80471f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80471f2:	9b06      	ldr	r3, [sp, #24]
 80471f4:	4043      	eors	r3, r0
 80471f6:	4053      	eors	r3, r2
 80471f8:	f891 2100 	ldrb.w	r2, [r1, #256]	; 0x100
    xor_block(d, k);
 80471fc:	9819      	ldr	r0, [sp, #100]	; 0x64
 80471fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8047200:	4053      	eors	r3, r2
 8047202:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
    xor_block(d, k);
 8047206:	f7ff fd94 	bl	8046d32 <xor_block>
        for( r = 1 ; r < ctx->rnd ; ++r )
 804720a:	f10b 0301 	add.w	r3, fp, #1
 804720e:	fa5f fb83 	uxtb.w	fp, r3
 8047212:	e6a0      	b.n	8046f56 <aes_encrypt+0x26>
        return ( uint8_t )-1;
 8047214:	20ff      	movs	r0, #255	; 0xff
 8047216:	e727      	b.n	8047068 <aes_encrypt+0x138>
 8047218:	0804e2b8 	.word	0x0804e2b8

0804721c <AES_CMAC_Init>:
        }                          \
    } while (0) \


void AES_CMAC_Init(AES_CMAC_CTX *ctx)
{
 804721c:	b510      	push	{r4, lr}
            memset1(ctx->X, 0, sizeof ctx->X);
 804721e:	2210      	movs	r2, #16
{
 8047220:	4604      	mov	r4, r0
            memset1(ctx->X, 0, sizeof ctx->X);
 8047222:	2100      	movs	r1, #0
 8047224:	30f1      	adds	r0, #241	; 0xf1
 8047226:	f003 fd00 	bl	804ac2a <memset1>
            ctx->M_n = 0;
 804722a:	2100      	movs	r1, #0
 804722c:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
        memset1(ctx->rijndael.ksch, '\0', 240);
 8047230:	4620      	mov	r0, r4
 8047232:	22f0      	movs	r2, #240	; 0xf0
}
 8047234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        memset1(ctx->rijndael.ksch, '\0', 240);
 8047238:	f003 bcf7 	b.w	804ac2a <memset1>

0804723c <AES_CMAC_SetKey>:
    
void AES_CMAC_SetKey(AES_CMAC_CTX *ctx, const uint8_t key[AES_CMAC_KEY_LENGTH])
{
 804723c:	460b      	mov	r3, r1
           //rijndael_set_key_enc_only(&ctx->rijndael, key, 128);
       aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael);
 804723e:	4602      	mov	r2, r0
 8047240:	2110      	movs	r1, #16
 8047242:	4618      	mov	r0, r3
 8047244:	f7ff bdf8 	b.w	8046e38 <aes_set_key>

08047248 <AES_CMAC_Update>:
}
    
void AES_CMAC_Update(AES_CMAC_CTX *ctx, const uint8_t *data, uint32_t len)
{
 8047248:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 804724c:	4604      	mov	r4, r0
            uint32_t mlen;
        uint8_t in[16];
    
            if (ctx->M_n > 0) {
 804724e:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
{
 8047252:	b085      	sub	sp, #20
 8047254:	460e      	mov	r6, r1
 8047256:	4615      	mov	r5, r2
 8047258:	f204 1801 	addw	r8, r4, #257	; 0x101
            if (ctx->M_n > 0) {
 804725c:	b310      	cbz	r0, 80472a4 <AES_CMAC_Update+0x5c>
                  mlen = MIN(16 - ctx->M_n, len);
 804725e:	f1c0 0910 	rsb	r9, r0, #16
 8047262:	4591      	cmp	r9, r2
 8047264:	464f      	mov	r7, r9
 8047266:	bf28      	it	cs
 8047268:	4617      	movcs	r7, r2
                    memcpy1(ctx->M_last + ctx->M_n, data, mlen);
 804726a:	b2ba      	uxth	r2, r7
 804726c:	4440      	add	r0, r8
 804726e:	f003 fcc8 	bl	804ac02 <memcpy1>
                    ctx->M_n += mlen;
 8047272:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8047276:	443b      	add	r3, r7
                    if (ctx->M_n < 16 || len == mlen)
 8047278:	2b0f      	cmp	r3, #15
                    ctx->M_n += mlen;
 804727a:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
                    if (ctx->M_n < 16 || len == mlen)
 804727e:	d91c      	bls.n	80472ba <AES_CMAC_Update+0x72>
 8047280:	45a9      	cmp	r9, r5
 8047282:	d21a      	bcs.n	80472ba <AES_CMAC_Update+0x72>
 8047284:	f104 03f1 	add.w	r3, r4, #241	; 0xf1
 8047288:	4619      	mov	r1, r3
                            return;
                   XOR(ctx->M_last, ctx->X);
 804728a:	781a      	ldrb	r2, [r3, #0]
 804728c:	7c18      	ldrb	r0, [r3, #16]
 804728e:	4042      	eors	r2, r0
 8047290:	f803 2b01 	strb.w	r2, [r3], #1
 8047294:	4543      	cmp	r3, r8
 8047296:	d1f8      	bne.n	804728a <AES_CMAC_Update+0x42>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);
            aes_encrypt( ctx->X, ctx->X, &ctx->rijndael);
 8047298:	4622      	mov	r2, r4
 804729a:	4608      	mov	r0, r1
 804729c:	f7ff fe48 	bl	8046f30 <aes_encrypt>
                    data += mlen;
 80472a0:	443e      	add	r6, r7
                    len -= mlen;
 80472a2:	1bed      	subs	r5, r5, r7
            while (len > 16) {      /* not last block */

                    XOR(data, ctx->X);
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);

                    memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 80472a4:	f104 07f1 	add.w	r7, r4, #241	; 0xf1
            while (len > 16) {      /* not last block */
 80472a8:	2d10      	cmp	r5, #16
 80472aa:	d809      	bhi.n	80472c0 <AES_CMAC_Update+0x78>

                    data += 16;
                    len -= 16;
            }
            /* potential last block, save it */
            memcpy1(ctx->M_last, data, len);
 80472ac:	b2aa      	uxth	r2, r5
 80472ae:	4631      	mov	r1, r6
 80472b0:	4640      	mov	r0, r8
 80472b2:	f003 fca6 	bl	804ac02 <memcpy1>
            ctx->M_n = len;
 80472b6:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
}
 80472ba:	b005      	add	sp, #20
 80472bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80472c0:	f104 02f0 	add.w	r2, r4, #240	; 0xf0
 80472c4:	1e73      	subs	r3, r6, #1
 80472c6:	f106 000f 	add.w	r0, r6, #15
                    XOR(data, ctx->X);
 80472ca:	f813 cf01 	ldrb.w	ip, [r3, #1]!
 80472ce:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80472d2:	4283      	cmp	r3, r0
 80472d4:	ea81 010c 	eor.w	r1, r1, ip
 80472d8:	7011      	strb	r1, [r2, #0]
 80472da:	d1f6      	bne.n	80472ca <AES_CMAC_Update+0x82>
                    memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 80472dc:	2210      	movs	r2, #16
 80472de:	4639      	mov	r1, r7
 80472e0:	4668      	mov	r0, sp
 80472e2:	f003 fc8e 	bl	804ac02 <memcpy1>
            aes_encrypt( in, in, &ctx->rijndael);
 80472e6:	4622      	mov	r2, r4
 80472e8:	4669      	mov	r1, sp
 80472ea:	4668      	mov	r0, sp
 80472ec:	f7ff fe20 	bl	8046f30 <aes_encrypt>
                    memcpy1(&ctx->X[0], in, 16);
 80472f0:	2210      	movs	r2, #16
 80472f2:	4669      	mov	r1, sp
 80472f4:	4638      	mov	r0, r7
 80472f6:	f003 fc84 	bl	804ac02 <memcpy1>
                    data += 16;
 80472fa:	3610      	adds	r6, #16
                    len -= 16;
 80472fc:	3d10      	subs	r5, #16
 80472fe:	e7d3      	b.n	80472a8 <AES_CMAC_Update+0x60>

08047300 <AES_CMAC_Final>:
   
void AES_CMAC_Final(uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX *ctx)
{
 8047300:	b570      	push	{r4, r5, r6, lr}
 8047302:	b088      	sub	sp, #32
 8047304:	460c      	mov	r4, r1
            uint8_t K[16];
        uint8_t in[16];
            /* generate subkey K1 */
            memset1(K, '\0', 16);
 8047306:	2210      	movs	r2, #16
 8047308:	2100      	movs	r1, #0
{
 804730a:	4605      	mov	r5, r0
            memset1(K, '\0', 16);
 804730c:	4668      	mov	r0, sp
 804730e:	f003 fc8c 	bl	804ac2a <memset1>

            //rijndael_encrypt(&ctx->rijndael, K, K);

            aes_encrypt( K, K, &ctx->rijndael);
 8047312:	4622      	mov	r2, r4
 8047314:	4669      	mov	r1, sp
 8047316:	4668      	mov	r0, sp
 8047318:	f7ff fe0a 	bl	8046f30 <aes_encrypt>

            if (K[0] & 0x80) {
 804731c:	f99d 3000 	ldrsb.w	r3, [sp]
 8047320:	2b00      	cmp	r3, #0
 8047322:	466a      	mov	r2, sp
 8047324:	f10d 010f 	add.w	r1, sp, #15
 8047328:	da3e      	bge.n	80473a8 <AES_CMAC_Final+0xa8>
                    LSHIFT(K, K);
 804732a:	7813      	ldrb	r3, [r2, #0]
 804732c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8047330:	005b      	lsls	r3, r3, #1
 8047332:	b25b      	sxtb	r3, r3
 8047334:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
 8047338:	4291      	cmp	r1, r2
 804733a:	f802 3c01 	strb.w	r3, [r2, #-1]
 804733e:	d1f4      	bne.n	804732a <AES_CMAC_Final+0x2a>
 8047340:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8047344:	005b      	lsls	r3, r3, #1
                   K[15] ^= 0x87;
 8047346:	f083 0387 	eor.w	r3, r3, #135	; 0x87
            } else
                    LSHIFT(K, K);
 804734a:	f88d 300f 	strb.w	r3, [sp, #15]


            if (ctx->M_n == 16) {
 804734e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8047352:	2b10      	cmp	r3, #16
 8047354:	d137      	bne.n	80473c6 <AES_CMAC_Final+0xc6>
 8047356:	f204 1201 	addw	r2, r4, #257	; 0x101
                    /* last block was a complete block */
                    XOR(K, ctx->M_last);
 804735a:	2300      	movs	r3, #0
 804735c:	7811      	ldrb	r1, [r2, #0]
 804735e:	f81d 0003 	ldrb.w	r0, [sp, r3]
 8047362:	3301      	adds	r3, #1
 8047364:	4041      	eors	r1, r0
 8047366:	2b10      	cmp	r3, #16
 8047368:	f802 1b01 	strb.w	r1, [r2], #1
 804736c:	d1f6      	bne.n	804735c <AES_CMAC_Final+0x5c>
 804736e:	f104 03f1 	add.w	r3, r4, #241	; 0xf1
 8047372:	f204 1001 	addw	r0, r4, #257	; 0x101
 8047376:	4619      	mov	r1, r3
   
                  XOR(K, ctx->M_last);


           }
           XOR(ctx->M_last, ctx->X);
 8047378:	781a      	ldrb	r2, [r3, #0]
 804737a:	7c1e      	ldrb	r6, [r3, #16]
 804737c:	4072      	eors	r2, r6
 804737e:	f803 2b01 	strb.w	r2, [r3], #1
 8047382:	4298      	cmp	r0, r3
 8047384:	d1f8      	bne.n	8047378 <AES_CMAC_Final+0x78>

           //rijndael_encrypt(&ctx->rijndael, ctx->X, digest);

       memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 8047386:	2210      	movs	r2, #16
 8047388:	eb0d 0002 	add.w	r0, sp, r2
 804738c:	f003 fc39 	bl	804ac02 <memcpy1>
       aes_encrypt(in, digest, &ctx->rijndael);
 8047390:	4622      	mov	r2, r4
 8047392:	4629      	mov	r1, r5
 8047394:	a804      	add	r0, sp, #16
 8047396:	f7ff fdcb 	bl	8046f30 <aes_encrypt>
           memset1(K, 0, sizeof K);
 804739a:	2210      	movs	r2, #16
 804739c:	2100      	movs	r1, #0
 804739e:	4668      	mov	r0, sp
 80473a0:	f003 fc43 	bl	804ac2a <memset1>

}
 80473a4:	b008      	add	sp, #32
 80473a6:	bd70      	pop	{r4, r5, r6, pc}
                    LSHIFT(K, K);
 80473a8:	7813      	ldrb	r3, [r2, #0]
 80473aa:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80473ae:	005b      	lsls	r3, r3, #1
 80473b0:	b25b      	sxtb	r3, r3
 80473b2:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
 80473b6:	428a      	cmp	r2, r1
 80473b8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80473bc:	d1f4      	bne.n	80473a8 <AES_CMAC_Final+0xa8>
 80473be:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80473c2:	005b      	lsls	r3, r3, #1
 80473c4:	e7c1      	b.n	804734a <AES_CMAC_Final+0x4a>
                  if (K[0] & 0x80) {
 80473c6:	f99d 2000 	ldrsb.w	r2, [sp]
 80473ca:	2a00      	cmp	r2, #0
 80473cc:	4668      	mov	r0, sp
 80473ce:	da28      	bge.n	8047422 <AES_CMAC_Final+0x122>
                          LSHIFT(K, K);
 80473d0:	7802      	ldrb	r2, [r0, #0]
 80473d2:	f810 6f01 	ldrb.w	r6, [r0, #1]!
 80473d6:	0052      	lsls	r2, r2, #1
 80473d8:	b252      	sxtb	r2, r2
 80473da:	ea42 12d6 	orr.w	r2, r2, r6, lsr #7
 80473de:	4281      	cmp	r1, r0
 80473e0:	f800 2c01 	strb.w	r2, [r0, #-1]
 80473e4:	d1f4      	bne.n	80473d0 <AES_CMAC_Final+0xd0>
 80473e6:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80473ea:	0052      	lsls	r2, r2, #1
                          K[15] ^= 0x87;
 80473ec:	f082 0287 	eor.w	r2, r2, #135	; 0x87
                           LSHIFT(K, K);
 80473f0:	f88d 200f 	strb.w	r2, [sp, #15]
                   ctx->M_last[ctx->M_n] = 0x80;
 80473f4:	18e2      	adds	r2, r4, r3
 80473f6:	2180      	movs	r1, #128	; 0x80
 80473f8:	f882 1101 	strb.w	r1, [r2, #257]	; 0x101
 80473fc:	2200      	movs	r2, #0
                   while (++ctx->M_n < 16)
 80473fe:	3301      	adds	r3, #1
 8047400:	2b0f      	cmp	r3, #15
 8047402:	d91d      	bls.n	8047440 <AES_CMAC_Final+0x140>
 8047404:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8047408:	f204 1201 	addw	r2, r4, #257	; 0x101
                  XOR(K, ctx->M_last);
 804740c:	2300      	movs	r3, #0
 804740e:	7811      	ldrb	r1, [r2, #0]
 8047410:	f81d 0003 	ldrb.w	r0, [sp, r3]
 8047414:	3301      	adds	r3, #1
 8047416:	4041      	eors	r1, r0
 8047418:	2b10      	cmp	r3, #16
 804741a:	f802 1b01 	strb.w	r1, [r2], #1
 804741e:	d1f6      	bne.n	804740e <AES_CMAC_Final+0x10e>
 8047420:	e7a5      	b.n	804736e <AES_CMAC_Final+0x6e>
                           LSHIFT(K, K);
 8047422:	7802      	ldrb	r2, [r0, #0]
 8047424:	f810 6f01 	ldrb.w	r6, [r0, #1]!
 8047428:	0052      	lsls	r2, r2, #1
 804742a:	b252      	sxtb	r2, r2
 804742c:	ea42 12d6 	orr.w	r2, r2, r6, lsr #7
 8047430:	4281      	cmp	r1, r0
 8047432:	f800 2c01 	strb.w	r2, [r0, #-1]
 8047436:	d1f4      	bne.n	8047422 <AES_CMAC_Final+0x122>
 8047438:	f89d 200f 	ldrb.w	r2, [sp, #15]
 804743c:	0052      	lsls	r2, r2, #1
 804743e:	e7d7      	b.n	80473f0 <AES_CMAC_Final+0xf0>
                         ctx->M_last[ctx->M_n] = 0;
 8047440:	18e1      	adds	r1, r4, r3
 8047442:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 8047446:	e7da      	b.n	80473fe <AES_CMAC_Final+0xfe>

08047448 <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 8047448:	b530      	push	{r4, r5, lr}
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
    {
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 804744a:	4a0a      	ldr	r2, [pc, #40]	; (8047474 <GetKeyByID+0x2c>)
{
 804744c:	2300      	movs	r3, #0
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 804744e:	eb03 1403 	add.w	r4, r3, r3, lsl #4
 8047452:	1915      	adds	r5, r2, r4
 8047454:	f895 522c 	ldrb.w	r5, [r5, #556]	; 0x22c
 8047458:	4285      	cmp	r5, r0
 804745a:	d105      	bne.n	8047468 <GetKeyByID+0x20>
        {
            *keyItem = &( SeNvmCtx.KeyList[i] );
 804745c:	f504 740b 	add.w	r4, r4, #556	; 0x22c
 8047460:	4422      	add	r2, r4
 8047462:	600a      	str	r2, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 8047464:	2000      	movs	r0, #0
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
}
 8047466:	bd30      	pop	{r4, r5, pc}
 8047468:	3301      	adds	r3, #1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 804746a:	2b18      	cmp	r3, #24
 804746c:	d1ef      	bne.n	804744e <GetKeyByID+0x6>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 804746e:	2003      	movs	r0, #3
 8047470:	e7f9      	b.n	8047466 <GetKeyByID+0x1e>
 8047472:	bf00      	nop
 8047474:	200084c8 	.word	0x200084c8

08047478 <ComputeCmac.part.0>:
 * \param[IN]  size           - Data buffer size
 * \param[IN]  keyID          - Key identifier to determine the AES key to be used
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
 8047478:	b5f0      	push	{r4, r5, r6, r7, lr}
 804747a:	461c      	mov	r4, r3
 804747c:	b087      	sub	sp, #28
 804747e:	4605      	mov	r5, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    uint8_t Cmac[16];

    AES_CMAC_Init( SeNvmCtx.AesCmacCtx );
 8047480:	4812      	ldr	r0, [pc, #72]	; (80474cc <ComputeCmac.part.0+0x54>)
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
 8047482:	460e      	mov	r6, r1
 8047484:	4617      	mov	r7, r2
    AES_CMAC_Init( SeNvmCtx.AesCmacCtx );
 8047486:	f7ff fec9 	bl	804721c <AES_CMAC_Init>

    Key_t* keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 804748a:	4620      	mov	r0, r4
 804748c:	a901      	add	r1, sp, #4
 804748e:	f7ff ffdb 	bl	8047448 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 8047492:	4604      	mov	r4, r0
 8047494:	b9b0      	cbnz	r0, 80474c4 <ComputeCmac.part.0+0x4c>
    {
        AES_CMAC_SetKey( SeNvmCtx.AesCmacCtx, keyItem->KeyValue );
 8047496:	9901      	ldr	r1, [sp, #4]
 8047498:	480c      	ldr	r0, [pc, #48]	; (80474cc <ComputeCmac.part.0+0x54>)
 804749a:	3101      	adds	r1, #1
 804749c:	f7ff fece 	bl	804723c <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 80474a0:	b125      	cbz	r5, 80474ac <ComputeCmac.part.0+0x34>
        {
            AES_CMAC_Update( SeNvmCtx.AesCmacCtx, micBxBuffer, 16 );
 80474a2:	2210      	movs	r2, #16
 80474a4:	4629      	mov	r1, r5
 80474a6:	4809      	ldr	r0, [pc, #36]	; (80474cc <ComputeCmac.part.0+0x54>)
 80474a8:	f7ff fece 	bl	8047248 <AES_CMAC_Update>
        }

        AES_CMAC_Update( SeNvmCtx.AesCmacCtx, buffer, size );
 80474ac:	463a      	mov	r2, r7
 80474ae:	4631      	mov	r1, r6
 80474b0:	4806      	ldr	r0, [pc, #24]	; (80474cc <ComputeCmac.part.0+0x54>)
 80474b2:	f7ff fec9 	bl	8047248 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, SeNvmCtx.AesCmacCtx );
 80474b6:	4905      	ldr	r1, [pc, #20]	; (80474cc <ComputeCmac.part.0+0x54>)
 80474b8:	a802      	add	r0, sp, #8
 80474ba:	f7ff ff21 	bl	8047300 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 | ( uint32_t ) Cmac[0] );
 80474be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80474c0:	9a02      	ldr	r2, [sp, #8]
 80474c2:	601a      	str	r2, [r3, #0]
    }

    return retval;
}
 80474c4:	4620      	mov	r0, r4
 80474c6:	b007      	add	sp, #28
 80474c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80474ca:	bf00      	nop
 80474cc:	200085dc 	.word	0x200085dc

080474d0 <SecureElementComputeAesCmac>:

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
{
 80474d0:	b430      	push	{r4, r5}
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 80474d2:	2b7e      	cmp	r3, #126	; 0x7e
{
 80474d4:	9c02      	ldr	r4, [sp, #8]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 80474d6:	d804      	bhi.n	80474e2 <SecureElementComputeAesCmac+0x12>
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 80474d8:	b131      	cbz	r1, 80474e8 <SecureElementComputeAesCmac+0x18>
 80474da:	b12c      	cbz	r4, 80474e8 <SecureElementComputeAesCmac+0x18>
        //Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
}
 80474dc:	bc30      	pop	{r4, r5}
 80474de:	f7ff bfcb 	b.w	8047478 <ComputeCmac.part.0>
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80474e2:	2003      	movs	r0, #3
}
 80474e4:	bc30      	pop	{r4, r5}
 80474e6:	4770      	bx	lr
        return SECURE_ELEMENT_ERROR_NPE;
 80474e8:	2002      	movs	r0, #2
 80474ea:	e7fb      	b.n	80474e4 <SecureElementComputeAesCmac+0x14>

080474ec <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac, KeyIdentifier_t keyID )
{
 80474ec:	b530      	push	{r4, r5, lr}
 80474ee:	460d      	mov	r5, r1
 80474f0:	b085      	sub	sp, #20
 80474f2:	4614      	mov	r4, r2
    if( buffer == NULL )
 80474f4:	4601      	mov	r1, r0
 80474f6:	b170      	cbz	r0, 8047516 <SecureElementVerifyAesCmac+0x2a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
    uint32_t compCmac = 0;
 80474f8:	aa04      	add	r2, sp, #16
 80474fa:	2000      	movs	r0, #0
 80474fc:	f842 0d04 	str.w	r0, [r2, #-4]!
 8047500:	9200      	str	r2, [sp, #0]
 8047502:	462a      	mov	r2, r5
 8047504:	f7ff ffb8 	bl	8047478 <ComputeCmac.part.0>
    retval = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
    if( retval != SECURE_ELEMENT_SUCCESS )
 8047508:	b918      	cbnz	r0, 8047512 <SecureElementVerifyAesCmac+0x26>
        return SECURE_ELEMENT_ERROR_NPE;
 804750a:	9803      	ldr	r0, [sp, #12]
 804750c:	1b00      	subs	r0, r0, r4
 804750e:	bf18      	it	ne
 8047510:	2001      	movne	r0, #1
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
    }

    return retval;
}
 8047512:	b005      	add	sp, #20
 8047514:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8047516:	2002      	movs	r0, #2
 8047518:	e7fb      	b.n	8047512 <SecureElementVerifyAesCmac+0x26>
	...

0804751c <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint8_t* encBuffer )
{
 804751c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8047520:	460e      	mov	r6, r1
 8047522:	4614      	mov	r4, r2
 8047524:	4698      	mov	r8, r3
    if( buffer == NULL || encBuffer == NULL )
 8047526:	4607      	mov	r7, r0
 8047528:	b330      	cbz	r0, 8047578 <SecureElementAesEncrypt+0x5c>
 804752a:	b32b      	cbz	r3, 8047578 <SecureElementAesEncrypt+0x5c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 804752c:	f011 010f 	ands.w	r1, r1, #15
 8047530:	d124      	bne.n	804757c <SecureElementAesEncrypt+0x60>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

    memset1( SeNvmCtx.AesContext.ksch, '\0', 240 );
 8047532:	22f0      	movs	r2, #240	; 0xf0
 8047534:	4812      	ldr	r0, [pc, #72]	; (8047580 <SecureElementAesEncrypt+0x64>)
 8047536:	f003 fb78 	bl	804ac2a <memset1>

    Key_t* pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 804753a:	a901      	add	r1, sp, #4
 804753c:	4620      	mov	r0, r4
 804753e:	f7ff ff83 	bl	8047448 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 8047542:	4605      	mov	r5, r0
 8047544:	b958      	cbnz	r0, 804755e <SecureElementAesEncrypt+0x42>
    {
        aes_set_key( pItem->KeyValue, 16, &SeNvmCtx.AesContext );
 8047546:	9801      	ldr	r0, [sp, #4]
 8047548:	4a0d      	ldr	r2, [pc, #52]	; (8047580 <SecureElementAesEncrypt+0x64>)

        uint8_t block = 0;

        while( size != 0 )
        {
            aes_encrypt( &buffer[block], &encBuffer[block], &SeNvmCtx.AesContext );
 804754a:	f8df 9034 	ldr.w	r9, [pc, #52]	; 8047580 <SecureElementAesEncrypt+0x64>
        aes_set_key( pItem->KeyValue, 16, &SeNvmCtx.AesContext );
 804754e:	2110      	movs	r1, #16
 8047550:	3001      	adds	r0, #1
 8047552:	f7ff fc71 	bl	8046e38 <aes_set_key>
 8047556:	4634      	mov	r4, r6
 8047558:	1b30      	subs	r0, r6, r4
 804755a:	b2c0      	uxtb	r0, r0
        while( size != 0 )
 804755c:	b91c      	cbnz	r4, 8047566 <SecureElementAesEncrypt+0x4a>
            block = block + 16;
            size = size - 16;
        }
    }
    return retval;
}
 804755e:	4628      	mov	r0, r5
 8047560:	b003      	add	sp, #12
 8047562:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            aes_encrypt( &buffer[block], &encBuffer[block], &SeNvmCtx.AesContext );
 8047566:	eb08 0100 	add.w	r1, r8, r0
 804756a:	464a      	mov	r2, r9
 804756c:	4438      	add	r0, r7
            size = size - 16;
 804756e:	3c10      	subs	r4, #16
            aes_encrypt( &buffer[block], &encBuffer[block], &SeNvmCtx.AesContext );
 8047570:	f7ff fcde 	bl	8046f30 <aes_encrypt>
            size = size - 16;
 8047574:	b2a4      	uxth	r4, r4
 8047576:	e7ef      	b.n	8047558 <SecureElementAesEncrypt+0x3c>
        return SECURE_ELEMENT_ERROR_NPE;
 8047578:	2502      	movs	r5, #2
 804757a:	e7f0      	b.n	804755e <SecureElementAesEncrypt+0x42>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 804757c:	2505      	movs	r5, #5
 804757e:	e7ee      	b.n	804755e <SecureElementAesEncrypt+0x42>
 8047580:	200084e8 	.word	0x200084e8

08047584 <SecureElementSetKey.part.2>:
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
 8047584:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8047586:	460e      	mov	r6, r1
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 8047588:	491f      	ldr	r1, [pc, #124]	; (8047608 <SecureElementSetKey.part.2+0x84>)
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
 804758a:	2300      	movs	r3, #0
 804758c:	460d      	mov	r5, r1
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 804758e:	011c      	lsls	r4, r3, #4
 8047590:	18e2      	adds	r2, r4, r3
 8047592:	440a      	add	r2, r1
 8047594:	f892 222c 	ldrb.w	r2, [r2, #556]	; 0x22c
 8047598:	4282      	cmp	r2, r0
 804759a:	d12f      	bne.n	80475fc <SecureElementSetKey.part.2+0x78>
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
 804759c:	f080 0080 	eor.w	r0, r0, #128	; 0x80
 80475a0:	2809      	cmp	r0, #9
 80475a2:	bf9e      	ittt	ls
 80475a4:	f240 2149 	movwls	r1, #585	; 0x249
 80475a8:	40c1      	lsrls	r1, r0
 80475aa:	43c9      	mvnls	r1, r1
 80475ac:	441c      	add	r4, r3
 80475ae:	f204 242d 	addw	r4, r4, #557	; 0x22d
 80475b2:	bf94      	ite	ls
 80475b4:	f001 0101 	andls.w	r1, r1, #1
 80475b8:	2101      	movhi	r1, #1
 80475ba:	442c      	add	r4, r5
                uint8_t decryptedKey[16] = { 0 };
 80475bc:	2210      	movs	r2, #16
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
 80475be:	b9a1      	cbnz	r1, 80475ea <SecureElementSetKey.part.2+0x66>
                uint8_t decryptedKey[16] = { 0 };
 80475c0:	4668      	mov	r0, sp
 80475c2:	f005 fa37 	bl	804ca34 <memset>
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 80475c6:	466b      	mov	r3, sp
 80475c8:	227f      	movs	r2, #127	; 0x7f
 80475ca:	2110      	movs	r1, #16
 80475cc:	4630      	mov	r0, r6
 80475ce:	f7ff ffa5 	bl	804751c <SecureElementAesEncrypt>
                memcpy1( SeNvmCtx.KeyList[i].KeyValue, decryptedKey, KEY_SIZE );
 80475d2:	2210      	movs	r2, #16
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 80475d4:	4606      	mov	r6, r0
                memcpy1( SeNvmCtx.KeyList[i].KeyValue, decryptedKey, KEY_SIZE );
 80475d6:	4669      	mov	r1, sp
 80475d8:	4620      	mov	r0, r4
 80475da:	f003 fb12 	bl	804ac02 <memcpy1>
                SeNvmCtxChanged( );
 80475de:	f8d5 33c4 	ldr.w	r3, [r5, #964]	; 0x3c4
 80475e2:	4798      	blx	r3
}
 80475e4:	4630      	mov	r0, r6
 80475e6:	b004      	add	sp, #16
 80475e8:	bd70      	pop	{r4, r5, r6, pc}
                memcpy1( SeNvmCtx.KeyList[i].KeyValue, key, KEY_SIZE );
 80475ea:	4631      	mov	r1, r6
 80475ec:	4620      	mov	r0, r4
 80475ee:	f003 fb08 	bl	804ac02 <memcpy1>
                SeNvmCtxChanged( );
 80475f2:	f8d5 33c4 	ldr.w	r3, [r5, #964]	; 0x3c4
 80475f6:	4798      	blx	r3
                return SECURE_ELEMENT_SUCCESS;
 80475f8:	2600      	movs	r6, #0
 80475fa:	e7f3      	b.n	80475e4 <SecureElementSetKey.part.2+0x60>
 80475fc:	3301      	adds	r3, #1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80475fe:	2b18      	cmp	r3, #24
 8047600:	d1c5      	bne.n	804758e <SecureElementSetKey.part.2+0xa>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8047602:	2603      	movs	r6, #3
 8047604:	e7ee      	b.n	80475e4 <SecureElementSetKey.part.2+0x60>
 8047606:	bf00      	nop
 8047608:	200084c8 	.word	0x200084c8

0804760c <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( Version_t version, uint8_t* input, KeyIdentifier_t rootKeyID, KeyIdentifier_t targetKeyID )
{
 804760c:	b5f0      	push	{r4, r5, r6, r7, lr}
 804760e:	4607      	mov	r7, r0
 8047610:	b085      	sub	sp, #20
 8047612:	4614      	mov	r4, r2
 8047614:	461d      	mov	r5, r3
    if( input == NULL )
 8047616:	460e      	mov	r6, r1
 8047618:	b1d9      	cbz	r1, 8047652 <SecureElementDeriveAndStoreKey+0x46>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
    uint8_t key[16] = { 0 };
 804761a:	2210      	movs	r2, #16
 804761c:	2100      	movs	r1, #0
 804761e:	4668      	mov	r0, sp
 8047620:	f005 fa08 	bl	804ca34 <memset>

    // In case of MC_KE_KEY, prevent other keys than NwkKey or AppKey for LoRaWAN 1.1 or later
    if( targetKeyID == MC_KE_KEY )
 8047624:	2d7f      	cmp	r5, #127	; 0x7f
 8047626:	d107      	bne.n	8047638 <SecureElementDeriveAndStoreKey+0x2c>
    {
        if( ( ( rootKeyID == APP_KEY ) && ( version.Fields.Minor == 0 ) ) || ( rootKeyID == NWK_KEY ) )
 8047628:	b924      	cbnz	r4, 8047634 <SecureElementDeriveAndStoreKey+0x28>
 804762a:	f417 0f7f 	tst.w	r7, #16711680	; 0xff0000
 804762e:	d103      	bne.n	8047638 <SecureElementDeriveAndStoreKey+0x2c>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8047630:	2003      	movs	r0, #3
 8047632:	e00c      	b.n	804764e <SecureElementDeriveAndStoreKey+0x42>
        if( ( ( rootKeyID == APP_KEY ) && ( version.Fields.Minor == 0 ) ) || ( rootKeyID == NWK_KEY ) )
 8047634:	2c02      	cmp	r4, #2
 8047636:	d0fb      	beq.n	8047630 <SecureElementDeriveAndStoreKey+0x24>
        }
    }

    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 8047638:	466b      	mov	r3, sp
 804763a:	4622      	mov	r2, r4
 804763c:	2110      	movs	r1, #16
 804763e:	4630      	mov	r0, r6
 8047640:	f7ff ff6c 	bl	804751c <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8047644:	b918      	cbnz	r0, 804764e <SecureElementDeriveAndStoreKey+0x42>
 8047646:	4669      	mov	r1, sp
 8047648:	4628      	mov	r0, r5
 804764a:	f7ff ff9b 	bl	8047584 <SecureElementSetKey.part.2>
    {
        return retval;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 804764e:	b005      	add	sp, #20
 8047650:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8047652:	2002      	movs	r0, #2
 8047654:	e7fb      	b.n	804764e <SecureElementDeriveAndStoreKey+0x42>
	...

08047658 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 8047658:	b510      	push	{r4, lr}
    if( randomNum == NULL )
 804765a:	4604      	mov	r4, r0
 804765c:	b128      	cbz	r0, 804766a <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    *randomNum = Radio.Random( );
 804765e:	4b04      	ldr	r3, [pc, #16]	; (8047670 <SecureElementRandomNumber+0x18>)
 8047660:	69db      	ldr	r3, [r3, #28]
 8047662:	4798      	blx	r3
 8047664:	6020      	str	r0, [r4, #0]
    return SECURE_ELEMENT_SUCCESS;
 8047666:	2000      	movs	r0, #0
}
 8047668:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 804766a:	2002      	movs	r0, #2
 804766c:	e7fc      	b.n	8047668 <SecureElementRandomNumber+0x10>
 804766e:	bf00      	nop
 8047670:	0804e210 	.word	0x0804e210

08047674 <SecureElementGetJoinEui>:
}

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvmCtx.JoinEui;
}
 8047674:	4800      	ldr	r0, [pc, #0]	; (8047678 <SecureElementGetJoinEui+0x4>)
 8047676:	4770      	bx	lr
 8047678:	200084d8 	.word	0x200084d8

0804767c <UpdateRxSlotIdleState>:
#endif
}

static void UpdateRxSlotIdleState( void )
{
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 804767c:	4b05      	ldr	r3, [pc, #20]	; (8047694 <UpdateRxSlotIdleState+0x18>)
 804767e:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 8047682:	f892 20f0 	ldrb.w	r2, [r2, #240]	; 0xf0
 8047686:	2a02      	cmp	r2, #2
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8047688:	bf18      	it	ne
 804768a:	2206      	movne	r2, #6
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 804768c:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
}
 8047690:	4770      	bx	lr
 8047692:	bf00      	nop
 8047694:	20008890 	.word	0x20008890

08047698 <StopRetransmission>:
    return false;
}

static bool StopRetransmission( void )
{
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8047698:	4b10      	ldr	r3, [pc, #64]	; (80476dc <StopRetransmission+0x44>)
 804769a:	f893 2485 	ldrb.w	r2, [r3, #1157]	; 0x485
 804769e:	0792      	lsls	r2, r2, #30
 80476a0:	d503      	bpl.n	80476aa <StopRetransmission+0x12>
 80476a2:	f893 2431 	ldrb.w	r2, [r3, #1073]	; 0x431
 80476a6:	2a01      	cmp	r2, #1
 80476a8:	d909      	bls.n	80476be <StopRetransmission+0x26>
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
          ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( MacCtx.NvmCtx->AdrCtrlOn == true )
 80476aa:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 80476ae:	f892 10f2 	ldrb.w	r1, [r2, #242]	; 0xf2
 80476b2:	b121      	cbz	r1, 80476be <StopRetransmission+0x26>
        {
            MacCtx.NvmCtx->AdrAckCounter++;
 80476b4:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
 80476b8:	3101      	adds	r1, #1
 80476ba:	f8c2 10f4 	str.w	r1, [r2, #244]	; 0xf4
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 80476be:	2200      	movs	r2, #0
 80476c0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    MacCtx.NodeAckRequested = false;
 80476c4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.AckTimeoutRetry = false;
 80476c8:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80476cc:	f8d3 2344 	ldr.w	r2, [r3, #836]	; 0x344
 80476d0:	f022 0202 	bic.w	r2, r2, #2
 80476d4:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344

    return true;
}
 80476d8:	2001      	movs	r0, #1
 80476da:	4770      	bx	lr
 80476dc:	20008890 	.word	0x20008890

080476e0 <GetMaxAppPayloadWithoutFOptsLength>:
{
 80476e0:	b507      	push	{r0, r1, r2, lr}
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80476e2:	4b0d      	ldr	r3, [pc, #52]	; (8047718 <GetMaxAppPayloadWithoutFOptsLength+0x38>)
    getPhy.Datarate = datarate;
 80476e4:	f88d 0001 	strb.w	r0, [sp, #1]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80476e8:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 80476ec:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 80476f0:	f88d 2002 	strb.w	r2, [sp, #2]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 80476f4:	220d      	movs	r2, #13
 80476f6:	f88d 2000 	strb.w	r2, [sp]
    if( MacCtx.NvmCtx->RepeaterSupport == true )
 80476fa:	f893 213f 	ldrb.w	r2, [r3, #319]	; 0x13f
 80476fe:	b112      	cbz	r2, 8047706 <GetMaxAppPayloadWithoutFOptsLength+0x26>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8047700:	220e      	movs	r2, #14
 8047702:	f88d 2000 	strb.w	r2, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8047706:	4669      	mov	r1, sp
 8047708:	7818      	ldrb	r0, [r3, #0]
 804770a:	f002 f838 	bl	804977e <RegionGetPhyParam>
}
 804770e:	b2c0      	uxtb	r0, r0
 8047710:	b003      	add	sp, #12
 8047712:	f85d fb04 	ldr.w	pc, [sp], #4
 8047716:	bf00      	nop
 8047718:	20008890 	.word	0x20008890

0804771c <OnAckTimeoutTimerEvent>:
{
 804771c:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.AckTimeoutTimer );
 804771e:	4c10      	ldr	r4, [pc, #64]	; (8047760 <OnAckTimeoutTimerEvent+0x44>)
 8047720:	f504 707f 	add.w	r0, r4, #1020	; 0x3fc
 8047724:	f003 f984 	bl	804aa30 <TimerStop>
    if( MacCtx.NodeAckRequested == true )
 8047728:	f894 2418 	ldrb.w	r2, [r4, #1048]	; 0x418
 804772c:	4623      	mov	r3, r4
 804772e:	b112      	cbz	r2, 8047736 <OnAckTimeoutTimerEvent+0x1a>
        MacCtx.AckTimeoutRetry = true;
 8047730:	2201      	movs	r2, #1
 8047732:	f884 2417 	strb.w	r2, [r4, #1047]	; 0x417
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 8047736:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 804773a:	f892 20f0 	ldrb.w	r2, [r2, #240]	; 0xf0
 804773e:	2a02      	cmp	r2, #2
        MacCtx.MacFlags.Bits.MacDone = 1;
 8047740:	bf02      	ittt	eq
 8047742:	f893 2485 	ldrbeq.w	r2, [r3, #1157]	; 0x485
 8047746:	f042 0220 	orreq.w	r2, r2, #32
 804774a:	f883 2485 	strbeq.w	r2, [r3, #1157]	; 0x485
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 804774e:	f8d3 334c 	ldr.w	r3, [r3, #844]	; 0x34c
 8047752:	b123      	cbz	r3, 804775e <OnAckTimeoutTimerEvent+0x42>
 8047754:	68db      	ldr	r3, [r3, #12]
 8047756:	b113      	cbz	r3, 804775e <OnAckTimeoutTimerEvent+0x42>
}
 8047758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MacCtx.MacCallbacks->MacProcessNotify( );
 804775c:	4718      	bx	r3
}
 804775e:	bd10      	pop	{r4, pc}
 8047760:	20008890 	.word	0x20008890

08047764 <PrepareRxDoneAbort>:
{
 8047764:	b510      	push	{r4, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8047766:	4c0b      	ldr	r4, [pc, #44]	; (8047794 <PrepareRxDoneAbort+0x30>)
 8047768:	f8d4 2344 	ldr.w	r2, [r4, #836]	; 0x344
 804776c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8047770:	f8c4 2344 	str.w	r2, [r4, #836]	; 0x344
    if( MacCtx.NodeAckRequested == true )
 8047774:	f894 2418 	ldrb.w	r2, [r4, #1048]	; 0x418
 8047778:	b112      	cbz	r2, 8047780 <PrepareRxDoneAbort+0x1c>
        OnAckTimeoutTimerEvent( NULL );
 804777a:	2000      	movs	r0, #0
 804777c:	f7ff ffce 	bl	804771c <OnAckTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 8047780:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
    MacCtx.MacFlags.Bits.MacDone = 1;
 8047784:	f043 0322 	orr.w	r3, r3, #34	; 0x22
 8047788:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
}
 804778c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    UpdateRxSlotIdleState( );
 8047790:	f7ff bf74 	b.w	804767c <UpdateRxSlotIdleState>
 8047794:	20008890 	.word	0x20008890

08047798 <HandleRadioRxErrorTimeout>:
{
 8047798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 804779c:	4c2a      	ldr	r4, [pc, #168]	; (8047848 <HandleRadioRxErrorTimeout+0xb0>)
 804779e:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 80477a2:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80477a6:	2b02      	cmp	r3, #2
{
 80477a8:	4607      	mov	r7, r0
 80477aa:	460e      	mov	r6, r1
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 80477ac:	d002      	beq.n	80477b4 <HandleRadioRxErrorTimeout+0x1c>
        Radio.Sleep( );
 80477ae:	4b27      	ldr	r3, [pc, #156]	; (804784c <HandleRadioRxErrorTimeout+0xb4>)
 80477b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80477b2:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80477b4:	f001 f95e 	bl	8048a74 <LoRaMacClassBIsBeaconExpected>
 80477b8:	4605      	mov	r5, r0
 80477ba:	b128      	cbz	r0, 80477c8 <HandleRadioRxErrorTimeout+0x30>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 80477bc:	2002      	movs	r0, #2
 80477be:	f001 f951 	bl	8048a64 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 80477c2:	2000      	movs	r0, #0
 80477c4:	f001 f951 	bl	8048a6a <LoRaMacClassBBeaconTimerEvent>
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 80477c8:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 80477cc:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80477d0:	2b01      	cmp	r3, #1
 80477d2:	d117      	bne.n	8047804 <HandleRadioRxErrorTimeout+0x6c>
        if( LoRaMacClassBIsPingExpected( ) == true )
 80477d4:	f001 f950 	bl	8048a78 <LoRaMacClassBIsPingExpected>
 80477d8:	4680      	mov	r8, r0
 80477da:	b130      	cbz	r0, 80477ea <HandleRadioRxErrorTimeout+0x52>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80477dc:	2000      	movs	r0, #0
 80477de:	f001 f942 	bl	8048a66 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 80477e2:	2000      	movs	r0, #0
 80477e4:	f001 f942 	bl	8048a6c <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 80477e8:	4645      	mov	r5, r8
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 80477ea:	f001 f947 	bl	8048a7c <LoRaMacClassBIsMulticastExpected>
 80477ee:	b148      	cbz	r0, 8047804 <HandleRadioRxErrorTimeout+0x6c>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80477f0:	2000      	movs	r0, #0
 80477f2:	f001 f939 	bl	8048a68 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 80477f6:	2000      	movs	r0, #0
 80477f8:	f001 f939 	bl	8048a6e <LoRaMacClassBMulticastSlotTimerEvent>
}
 80477fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    UpdateRxSlotIdleState( );
 8047800:	f7ff bf3c 	b.w	804767c <UpdateRxSlotIdleState>
    if( classBRx == false )
 8047804:	2d00      	cmp	r5, #0
 8047806:	d1f9      	bne.n	80477fc <HandleRadioRxErrorTimeout+0x64>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8047808:	f894 2484 	ldrb.w	r2, [r4, #1156]	; 0x484
 804780c:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 8047810:	b932      	cbnz	r2, 8047820 <HandleRadioRxErrorTimeout+0x88>
            if( MacCtx.NodeAckRequested == true )
 8047812:	b10b      	cbz	r3, 8047818 <HandleRadioRxErrorTimeout+0x80>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8047814:	f884 7441 	strb.w	r7, [r4, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8047818:	4638      	mov	r0, r7
 804781a:	f001 fa67 	bl	8048cec <LoRaMacConfirmQueueSetStatusCmn>
 804781e:	e7ed      	b.n	80477fc <HandleRadioRxErrorTimeout+0x64>
            if( MacCtx.NodeAckRequested == true )
 8047820:	b10b      	cbz	r3, 8047826 <HandleRadioRxErrorTimeout+0x8e>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8047822:	f884 6441 	strb.w	r6, [r4, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8047826:	4630      	mov	r0, r6
 8047828:	f001 fa60 	bl	8048cec <LoRaMacConfirmQueueSetStatusCmn>
            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 804782c:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8047830:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8047834:	2b02      	cmp	r3, #2
                MacCtx.MacFlags.Bits.MacDone = 1;
 8047836:	bf1e      	ittt	ne
 8047838:	f894 3485 	ldrbne.w	r3, [r4, #1157]	; 0x485
 804783c:	f043 0320 	orrne.w	r3, r3, #32
 8047840:	f884 3485 	strbne.w	r3, [r4, #1157]	; 0x485
 8047844:	e7da      	b.n	80477fc <HandleRadioRxErrorTimeout+0x64>
 8047846:	bf00      	nop
 8047848:	20008890 	.word	0x20008890
 804784c:	0804e210 	.word	0x0804e210

08047850 <OpenContinuousRxCWindow>:
{
 8047850:	b510      	push	{r4, lr}
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8047852:	4c0d      	ldr	r4, [pc, #52]	; (8047888 <OpenContinuousRxCWindow+0x38>)
 8047854:	2302      	movs	r3, #2
 8047856:	f884 33f7 	strb.w	r3, [r4, #1015]	; 0x3f7
    MacCtx.RxWindowCConfig.RxContinuous = true;
 804785a:	2301      	movs	r3, #1
 804785c:	f884 33f6 	strb.w	r3, [r4, #1014]	; 0x3f6
    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8047860:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8047864:	f204 4224 	addw	r2, r4, #1060	; 0x424
 8047868:	f504 7179 	add.w	r1, r4, #996	; 0x3e4
 804786c:	7818      	ldrb	r0, [r3, #0]
 804786e:	f001 ffb1 	bl	80497d4 <RegionRxConfig>
 8047872:	b138      	cbz	r0, 8047884 <OpenContinuousRxCWindow+0x34>
        Radio.Rx( 0 ); // Continuous mode
 8047874:	4b05      	ldr	r3, [pc, #20]	; (804788c <OpenContinuousRxCWindow+0x3c>)
 8047876:	2000      	movs	r0, #0
 8047878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804787a:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 804787c:	f894 33f7 	ldrb.w	r3, [r4, #1015]	; 0x3f7
 8047880:	f884 3484 	strb.w	r3, [r4, #1156]	; 0x484
}
 8047884:	bd10      	pop	{r4, pc}
 8047886:	bf00      	nop
 8047888:	20008890 	.word	0x20008890
 804788c:	0804e210 	.word	0x0804e210

08047890 <ProcessMacCommands.isra.1.constprop.7>:
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8047890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8047894:	b091      	sub	sp, #68	; 0x44
    uint8_t status = 0;
 8047896:	2700      	movs	r7, #0
                if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8047898:	4ec4      	ldr	r6, [pc, #784]	; (8047bac <ProcessMacCommands.isra.1.constprop.7+0x31c>)
    uint8_t status = 0;
 804789a:	f88d 7015 	strb.w	r7, [sp, #21]
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 804789e:	4605      	mov	r5, r0
 80478a0:	468a      	mov	sl, r1
 80478a2:	4693      	mov	fp, r2
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80478a4:	f8ad 7018 	strh.w	r7, [sp, #24]
 80478a8:	46b8      	mov	r8, r7
    while( macIndex < commandsSize )
 80478aa:	45d0      	cmp	r8, sl
 80478ac:	d302      	bcc.n	80478b4 <ProcessMacCommands.isra.1.constprop.7+0x24>
}
 80478ae:	b011      	add	sp, #68	; 0x44
 80478b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch( payload[macIndex++] )
 80478b4:	f815 3008 	ldrb.w	r3, [r5, r8]
 80478b8:	f108 0401 	add.w	r4, r8, #1
 80478bc:	3b02      	subs	r3, #2
 80478be:	b2e4      	uxtb	r4, r4
 80478c0:	2b11      	cmp	r3, #17
 80478c2:	d8f4      	bhi.n	80478ae <ProcessMacCommands.isra.1.constprop.7+0x1e>
 80478c4:	a201      	add	r2, pc, #4	; (adr r2, 80478cc <ProcessMacCommands.isra.1.constprop.7+0x3c>)
 80478c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80478ca:	bf00      	nop
 80478cc:	08047915 	.word	0x08047915
 80478d0:	08047945 	.word	0x08047945
 80478d4:	08047a0b 	.word	0x08047a0b
 80478d8:	08047a37 	.word	0x08047a37
 80478dc:	08047ad5 	.word	0x08047ad5
 80478e0:	08047afd 	.word	0x08047afd
 80478e4:	08047b69 	.word	0x08047b69
 80478e8:	08047bb1 	.word	0x08047bb1
 80478ec:	08047c49 	.word	0x08047c49
 80478f0:	080478af 	.word	0x080478af
 80478f4:	080478af 	.word	0x080478af
 80478f8:	08047ca1 	.word	0x08047ca1
 80478fc:	080478af 	.word	0x080478af
 8047900:	080478af 	.word	0x080478af
 8047904:	08047d43 	.word	0x08047d43
 8047908:	08047d55 	.word	0x08047d55
 804790c:	08047d99 	.word	0x08047d99
 8047910:	08047dc3 	.word	0x08047dc3
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8047914:	2003      	movs	r0, #3
 8047916:	f001 fa01 	bl	8048d1c <LoRaMacConfirmQueueIsCmdActive>
 804791a:	b188      	cbz	r0, 8047940 <ProcessMacCommands.isra.1.constprop.7+0xb0>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 804791c:	2103      	movs	r1, #3
 804791e:	2000      	movs	r0, #0
 8047920:	f001 f9b0 	bl	8048c84 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8047924:	5d2b      	ldrb	r3, [r5, r4]
 8047926:	f886 345c 	strb.w	r3, [r6, #1116]	; 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 804792a:	f108 0403 	add.w	r4, r8, #3
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 804792e:	f108 0802 	add.w	r8, r8, #2
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8047932:	fa5f f888 	uxtb.w	r8, r8
 8047936:	b2e4      	uxtb	r4, r4
 8047938:	f815 3008 	ldrb.w	r3, [r5, r8]
 804793c:	f886 345d 	strb.w	r3, [r6, #1117]	; 0x45d
                uint8_t eirpDwellTime = payload[macIndex++];
 8047940:	46a0      	mov	r8, r4
 8047942:	e7b2      	b.n	80478aa <ProcessMacCommands.isra.1.constprop.7+0x1a>
                int8_t linkAdrDatarate = DR_0;
 8047944:	2300      	movs	r3, #0
 8047946:	f88d 3016 	strb.w	r3, [sp, #22]
                int8_t linkAdrTxPower = TX_POWER_0;
 804794a:	f88d 3017 	strb.w	r3, [sp, #23]
                uint8_t linkAdrNbRep = 0;
 804794e:	f88d 301c 	strb.w	r3, [sp, #28]
                uint8_t linkAdrNbBytesParsed = 0;
 8047952:	f88d 3020 	strb.w	r3, [sp, #32]
                if( adrBlockFound == false )
 8047956:	2f00      	cmp	r7, #0
 8047958:	d14e      	bne.n	80479f8 <ProcessMacCommands.isra.1.constprop.7+0x168>
                    linkAdrReq.Payload = &payload[macIndex - 1];
 804795a:	1e63      	subs	r3, r4, #1
 804795c:	442b      	add	r3, r5
 804795e:	930d      	str	r3, [sp, #52]	; 0x34
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8047960:	f10a 0301 	add.w	r3, sl, #1
 8047964:	1b1c      	subs	r4, r3, r4
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 8047966:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 804796a:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 804796e:	f893 20f2 	ldrb.w	r2, [r3, #242]	; 0xf2
 8047972:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
                    linkAdrReq.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8047976:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 804797a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
                    linkAdrReq.CurrentDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 804797e:	f893 20f9 	ldrb.w	r2, [r3, #249]	; 0xf9
 8047982:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
                    linkAdrReq.CurrentTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8047986:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
 804798a:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
                    linkAdrReq.CurrentNbRep = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 804798e:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 8047992:	f88d 203d 	strb.w	r2, [sp, #61]	; 0x3d
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 8047996:	f8d3 21d0 	ldr.w	r2, [r3, #464]	; 0x1d0
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 804799a:	7818      	ldrb	r0, [r3, #0]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 804799c:	920c      	str	r2, [sp, #48]	; 0x30
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 804799e:	ab08      	add	r3, sp, #32
 80479a0:	9301      	str	r3, [sp, #4]
 80479a2:	ab07      	add	r3, sp, #28
 80479a4:	9300      	str	r3, [sp, #0]
 80479a6:	f10d 0216 	add.w	r2, sp, #22
 80479aa:	f10d 0317 	add.w	r3, sp, #23
 80479ae:	a90c      	add	r1, sp, #48	; 0x30
 80479b0:	f001 ff28 	bl	8049804 <RegionLinkAdrReq>
 80479b4:	f88d 0015 	strb.w	r0, [sp, #21]
                    if( ( status & 0x07 ) == 0x07 )
 80479b8:	f000 0007 	and.w	r0, r0, #7
 80479bc:	2807      	cmp	r0, #7
 80479be:	d10d      	bne.n	80479dc <ProcessMacCommands.isra.1.constprop.7+0x14c>
                        MacCtx.NvmCtx->MacParams.ChannelsDatarate = linkAdrDatarate;
 80479c0:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
 80479c4:	f89d 2016 	ldrb.w	r2, [sp, #22]
 80479c8:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
                        MacCtx.NvmCtx->MacParams.ChannelsTxPower = linkAdrTxPower;
 80479cc:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80479d0:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
                        MacCtx.NvmCtx->MacParams.ChannelsNbTrans = linkAdrNbRep;
 80479d4:	f89d 201c 	ldrb.w	r2, [sp, #28]
 80479d8:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 80479dc:	2700      	movs	r7, #0
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80479de:	f04f 0905 	mov.w	r9, #5
 80479e2:	b2fb      	uxtb	r3, r7
 80479e4:	f89d 4020 	ldrb.w	r4, [sp, #32]
 80479e8:	fbb4 f2f9 	udiv	r2, r4, r9
 80479ec:	4293      	cmp	r3, r2
 80479ee:	f107 0701 	add.w	r7, r7, #1
 80479f2:	d303      	bcc.n	80479fc <ProcessMacCommands.isra.1.constprop.7+0x16c>
                    macIndex += linkAdrNbBytesParsed - 1;
 80479f4:	4444      	add	r4, r8
 80479f6:	b2e4      	uxtb	r4, r4
 80479f8:	2701      	movs	r7, #1
 80479fa:	e7a1      	b.n	8047940 <ProcessMacCommands.isra.1.constprop.7+0xb0>
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 80479fc:	2201      	movs	r2, #1
 80479fe:	f10d 0115 	add.w	r1, sp, #21
 8047a02:	2003      	movs	r0, #3
 8047a04:	f001 f854 	bl	8048ab0 <LoRaMacCommandsAddCmd>
 8047a08:	e7eb      	b.n	80479e2 <ProcessMacCommands.isra.1.constprop.7+0x152>
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 8047a0a:	5d2b      	ldrb	r3, [r5, r4]
 8047a0c:	f8d6 1488 	ldr.w	r1, [r6, #1160]	; 0x488
 8047a10:	f003 030f 	and.w	r3, r3, #15
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 8047a14:	2201      	movs	r2, #1
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 8047a16:	f881 313c 	strb.w	r3, [r1, #316]	; 0x13c
 8047a1a:	f108 0802 	add.w	r8, r8, #2
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 8047a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8047a22:	f8a1 31c2 	strh.w	r3, [r1, #450]	; 0x1c2
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 8047a26:	fa5f f888 	uxtb.w	r8, r8
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8047a2a:	2200      	movs	r2, #0
 8047a2c:	a906      	add	r1, sp, #24
 8047a2e:	2004      	movs	r0, #4
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8047a30:	f001 f83e 	bl	8048ab0 <LoRaMacCommandsAddCmd>
 8047a34:	e0b7      	b.n	8047ba6 <ProcessMacCommands.isra.1.constprop.7+0x316>
                status = 0x07;
 8047a36:	2307      	movs	r3, #7
 8047a38:	f88d 3015 	strb.w	r3, [sp, #21]
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8047a3c:	5d2b      	ldrb	r3, [r5, r4]
 8047a3e:	f3c3 1202 	ubfx	r2, r3, #4, #3
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8047a42:	f003 030f 	and.w	r3, r3, #15
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8047a46:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8047a4a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8047a4e:	f108 0204 	add.w	r2, r8, #4
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8047a52:	f108 0303 	add.w	r3, r8, #3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8047a56:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8047a58:	b2d2      	uxtb	r2, r2
 8047a5a:	f108 0405 	add.w	r4, r8, #5
                macIndex++;
 8047a5e:	f108 0802 	add.w	r8, r8, #2
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8047a62:	5ce9      	ldrb	r1, [r5, r3]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8047a64:	5cab      	ldrb	r3, [r5, r2]
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8047a66:	fa5f f888 	uxtb.w	r8, r8
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8047a6a:	041b      	lsls	r3, r3, #16
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8047a6c:	f815 2008 	ldrb.w	r2, [r5, r8]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8047a70:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8047a74:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency *= 100;
 8047a76:	2264      	movs	r2, #100	; 0x64
 8047a78:	4353      	muls	r3, r2
 8047a7a:	930d      	str	r3, [sp, #52]	; 0x34
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 8047a7c:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
 8047a80:	a90c      	add	r1, sp, #48	; 0x30
 8047a82:	7818      	ldrb	r0, [r3, #0]
 8047a84:	f001 fece 	bl	8049824 <RegionRxParamSetupReq>
                if( ( status & 0x07 ) == 0x07 )
 8047a88:	f000 0307 	and.w	r3, r0, #7
 8047a8c:	2b07      	cmp	r3, #7
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8047a8e:	b2e4      	uxtb	r4, r4
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 8047a90:	f88d 0015 	strb.w	r0, [sp, #21]
                if( ( status & 0x07 ) == 0x07 )
 8047a94:	d110      	bne.n	8047ab8 <ProcessMacCommands.isra.1.constprop.7+0x228>
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8047a96:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
 8047a9a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8047a9e:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
                    MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8047aa2:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8047aa6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8047aa8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
                    MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8047aac:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
                    MacCtx.NvmCtx->MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8047ab0:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 8047ab4:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                macCmdPayload[0] = status;
 8047ab8:	a910      	add	r1, sp, #64	; 0x40
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8047aba:	2201      	movs	r2, #1
                macCmdPayload[0] = status;
 8047abc:	f801 0d28 	strb.w	r0, [r1, #-40]!
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8047ac0:	2005      	movs	r0, #5
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8047ac2:	f000 fff5 	bl	8048ab0 <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8047ac6:	f896 3485 	ldrb.w	r3, [r6, #1157]	; 0x485
 8047aca:	f043 0310 	orr.w	r3, r3, #16
 8047ace:	f886 3485 	strb.w	r3, [r6, #1157]	; 0x485
 8047ad2:	e735      	b.n	8047940 <ProcessMacCommands.isra.1.constprop.7+0xb0>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8047ad4:	f8d6 334c 	ldr.w	r3, [r6, #844]	; 0x34c
 8047ad8:	b173      	cbz	r3, 8047af8 <ProcessMacCommands.isra.1.constprop.7+0x268>
 8047ada:	681b      	ldr	r3, [r3, #0]
 8047adc:	b163      	cbz	r3, 8047af8 <ProcessMacCommands.isra.1.constprop.7+0x268>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8047ade:	4798      	blx	r3
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8047ae0:	f00b 033f 	and.w	r3, fp, #63	; 0x3f
                macCmdPayload[0] = batteryLevel;
 8047ae4:	f88d 0018 	strb.w	r0, [sp, #24]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8047ae8:	f88d 3019 	strb.w	r3, [sp, #25]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8047aec:	2202      	movs	r2, #2
 8047aee:	a906      	add	r1, sp, #24
 8047af0:	2006      	movs	r0, #6
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8047af2:	f000 ffdd 	bl	8048ab0 <LoRaMacCommandsAddCmd>
 8047af6:	e723      	b.n	8047940 <ProcessMacCommands.isra.1.constprop.7+0xb0>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8047af8:	20ff      	movs	r0, #255	; 0xff
 8047afa:	e7f1      	b.n	8047ae0 <ProcessMacCommands.isra.1.constprop.7+0x250>
                status = 0x03;
 8047afc:	2303      	movs	r3, #3
 8047afe:	f88d 3015 	strb.w	r3, [sp, #21]
                newChannelReq.ChannelId = payload[macIndex++];
 8047b02:	5d2b      	ldrb	r3, [r5, r4]
 8047b04:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                newChannelReq.NewChannel = &chParam;
 8047b08:	ab0c      	add	r3, sp, #48	; 0x30
 8047b0a:	9308      	str	r3, [sp, #32]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8047b0c:	f108 0204 	add.w	r2, r8, #4
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8047b10:	f108 0303 	add.w	r3, r8, #3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8047b14:	b2db      	uxtb	r3, r3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8047b16:	b2d2      	uxtb	r2, r2
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8047b18:	5ce9      	ldrb	r1, [r5, r3]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8047b1a:	5cab      	ldrb	r3, [r5, r2]
                newChannelReq.ChannelId = payload[macIndex++];
 8047b1c:	f108 0202 	add.w	r2, r8, #2
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8047b20:	b2d2      	uxtb	r2, r2
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8047b22:	041b      	lsls	r3, r3, #16
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8047b24:	5caa      	ldrb	r2, [r5, r2]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8047b26:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8047b2a:	4313      	orrs	r3, r2
                chParam.DrRange.Value = payload[macIndex++];
 8047b2c:	f108 0406 	add.w	r4, r8, #6
                chParam.Frequency *= 100;
 8047b30:	2264      	movs	r2, #100	; 0x64
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8047b32:	f108 0805 	add.w	r8, r8, #5
                chParam.Frequency *= 100;
 8047b36:	4353      	muls	r3, r2
                chParam.DrRange.Value = payload[macIndex++];
 8047b38:	fa5f f888 	uxtb.w	r8, r8
                chParam.Frequency *= 100;
 8047b3c:	930c      	str	r3, [sp, #48]	; 0x30
                chParam.Rx1Frequency = 0;
 8047b3e:	2300      	movs	r3, #0
 8047b40:	930d      	str	r3, [sp, #52]	; 0x34
                chParam.DrRange.Value = payload[macIndex++];
 8047b42:	f815 3008 	ldrb.w	r3, [r5, r8]
 8047b46:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 8047b4a:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
 8047b4e:	a908      	add	r1, sp, #32
 8047b50:	7818      	ldrb	r0, [r3, #0]
 8047b52:	f001 fe6e 	bl	8049832 <RegionNewChannelReq>
                macCmdPayload[0] = status;
 8047b56:	a910      	add	r1, sp, #64	; 0x40
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 8047b58:	f88d 0015 	strb.w	r0, [sp, #21]
                macCmdPayload[0] = status;
 8047b5c:	f801 0d28 	strb.w	r0, [r1, #-40]!
                chParam.DrRange.Value = payload[macIndex++];
 8047b60:	b2e4      	uxtb	r4, r4
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8047b62:	2201      	movs	r2, #1
 8047b64:	2007      	movs	r0, #7
 8047b66:	e7c4      	b.n	8047af2 <ProcessMacCommands.isra.1.constprop.7+0x262>
                uint8_t delay = payload[macIndex++] & 0x0F;
 8047b68:	5d2b      	ldrb	r3, [r5, r4]
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 8047b6a:	f8d6 1488 	ldr.w	r1, [r6, #1160]	; 0x488
                    delay++;
 8047b6e:	f013 020f 	ands.w	r2, r3, #15
 8047b72:	bf08      	it	eq
 8047b74:	2201      	moveq	r2, #1
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 8047b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8047b7a:	4353      	muls	r3, r2
 8047b7c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 8047b80:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8047b84:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8047b88:	2200      	movs	r2, #0
 8047b8a:	a906      	add	r1, sp, #24
 8047b8c:	2008      	movs	r0, #8
 8047b8e:	f000 ff8f 	bl	8048ab0 <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8047b92:	f896 3485 	ldrb.w	r3, [r6, #1157]	; 0x485
                uint8_t delay = payload[macIndex++] & 0x0F;
 8047b96:	f108 0802 	add.w	r8, r8, #2
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8047b9a:	f043 0310 	orr.w	r3, r3, #16
                uint8_t delay = payload[macIndex++] & 0x0F;
 8047b9e:	fa5f f888 	uxtb.w	r8, r8
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8047ba2:	f886 3485 	strb.w	r3, [r6, #1157]	; 0x485
                uint8_t delay = payload[macIndex++] & 0x0F;
 8047ba6:	4644      	mov	r4, r8
 8047ba8:	e6ca      	b.n	8047940 <ProcessMacCommands.isra.1.constprop.7+0xb0>
 8047baa:	bf00      	nop
 8047bac:	20008890 	.word	0x20008890
                uint8_t eirpDwellTime = payload[macIndex++];
 8047bb0:	5d2b      	ldrb	r3, [r5, r4]
                txParamSetupReq.UplinkDwellTime = 0;
 8047bb2:	2200      	movs	r2, #0
 8047bb4:	f88d 201c 	strb.w	r2, [sp, #28]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8047bb8:	f013 0220 	ands.w	r2, r3, #32
                    txParamSetupReq.DownlinkDwellTime = 1;
 8047bbc:	bf18      	it	ne
 8047bbe:	2201      	movne	r2, #1
 8047bc0:	f88d 201d 	strb.w	r2, [sp, #29]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8047bc4:	06da      	lsls	r2, r3, #27
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8047bc6:	f003 030f 	and.w	r3, r3, #15
                    txParamSetupReq.UplinkDwellTime = 1;
 8047bca:	bf48      	it	mi
 8047bcc:	2201      	movmi	r2, #1
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8047bce:	f88d 301e 	strb.w	r3, [sp, #30]
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 8047bd2:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
                    txParamSetupReq.UplinkDwellTime = 1;
 8047bd6:	bf48      	it	mi
 8047bd8:	f88d 201c 	strbmi.w	r2, [sp, #28]
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 8047bdc:	a907      	add	r1, sp, #28
 8047bde:	7818      	ldrb	r0, [r3, #0]
 8047be0:	f001 fe2e 	bl	8049840 <RegionTxParamSetupReq>
                uint8_t eirpDwellTime = payload[macIndex++];
 8047be4:	f108 0802 	add.w	r8, r8, #2
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 8047be8:	3001      	adds	r0, #1
                uint8_t eirpDwellTime = payload[macIndex++];
 8047bea:	fa5f f888 	uxtb.w	r8, r8
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 8047bee:	d0da      	beq.n	8047ba6 <ProcessMacCommands.isra.1.constprop.7+0x316>
                    MacCtx.NvmCtx->MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8047bf0:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
 8047bf4:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8047bf8:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
                    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8047bfc:	f89d 101d 	ldrb.w	r1, [sp, #29]
 8047c00:	f883 112d 	strb.w	r1, [r3, #301]	; 0x12d
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8047c04:	f89d 101e 	ldrb.w	r1, [sp, #30]
 8047c08:	487e      	ldr	r0, [pc, #504]	; (8047e04 <ProcessMacCommands.isra.1.constprop.7+0x574>)
 8047c0a:	5c41      	ldrb	r1, [r0, r1]
 8047c0c:	ee07 1a90 	vmov	s15, r1
 8047c10:	eef8 7a67 	vcvt.f32.u32	s15, s15
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8047c14:	2102      	movs	r1, #2
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8047c16:	edc3 7a4c 	vstr	s15, [r3, #304]	; 0x130
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8047c1a:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8047c1e:	f88d 1020 	strb.w	r1, [sp, #32]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8047c22:	7818      	ldrb	r0, [r3, #0]
 8047c24:	a908      	add	r1, sp, #32
 8047c26:	f001 fdaa 	bl	804977e <RegionGetPhyParam>
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 8047c2a:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8047c2e:	900c      	str	r0, [sp, #48]	; 0x30
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 8047c30:	f993 20f9 	ldrsb.w	r2, [r3, #249]	; 0xf9
 8047c34:	b240      	sxtb	r0, r0
 8047c36:	4290      	cmp	r0, r2
 8047c38:	bfb8      	it	lt
 8047c3a:	4610      	movlt	r0, r2
 8047c3c:	f883 00f9 	strb.w	r0, [r3, #249]	; 0xf9
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8047c40:	2200      	movs	r2, #0
 8047c42:	a906      	add	r1, sp, #24
 8047c44:	2009      	movs	r0, #9
 8047c46:	e6f3      	b.n	8047a30 <ProcessMacCommands.isra.1.constprop.7+0x1a0>
                status = 0x03;
 8047c48:	2303      	movs	r3, #3
 8047c4a:	f88d 3015 	strb.w	r3, [sp, #21]
                dlChannelReq.ChannelId = payload[macIndex++];
 8047c4e:	5d2b      	ldrb	r3, [r5, r4]
 8047c50:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8047c54:	f108 0204 	add.w	r2, r8, #4
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8047c58:	f108 0303 	add.w	r3, r8, #3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8047c5c:	b2db      	uxtb	r3, r3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8047c5e:	b2d2      	uxtb	r2, r2
 8047c60:	f108 0405 	add.w	r4, r8, #5
                dlChannelReq.ChannelId = payload[macIndex++];
 8047c64:	f108 0802 	add.w	r8, r8, #2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8047c68:	5ce9      	ldrb	r1, [r5, r3]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8047c6a:	5cab      	ldrb	r3, [r5, r2]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8047c6c:	fa5f f888 	uxtb.w	r8, r8
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8047c70:	041b      	lsls	r3, r3, #16
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8047c72:	f815 2008 	ldrb.w	r2, [r5, r8]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8047c76:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8047c7a:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency *= 100;
 8047c7c:	2264      	movs	r2, #100	; 0x64
 8047c7e:	4353      	muls	r3, r2
 8047c80:	930d      	str	r3, [sp, #52]	; 0x34
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 8047c82:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
 8047c86:	a90c      	add	r1, sp, #48	; 0x30
 8047c88:	7818      	ldrb	r0, [r3, #0]
 8047c8a:	f001 fde0 	bl	804984e <RegionDlChannelReq>
                macCmdPayload[0] = status;
 8047c8e:	a910      	add	r1, sp, #64	; 0x40
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 8047c90:	f88d 0015 	strb.w	r0, [sp, #21]
                macCmdPayload[0] = status;
 8047c94:	f801 0d28 	strb.w	r0, [r1, #-40]!
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8047c98:	b2e4      	uxtb	r4, r4
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8047c9a:	2201      	movs	r2, #1
 8047c9c:	200a      	movs	r0, #10
 8047c9e:	e710      	b.n	8047ac2 <ProcessMacCommands.isra.1.constprop.7+0x232>
                SysTime_t sysTime = { 0 };
 8047ca0:	2300      	movs	r3, #0
 8047ca2:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8047ca6:	f108 0203 	add.w	r2, r8, #3
                gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8047caa:	f108 0302 	add.w	r3, r8, #2
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8047cae:	b2db      	uxtb	r3, r3
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8047cb0:	b2d2      	uxtb	r2, r2
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8047cb2:	5ce9      	ldrb	r1, [r5, r3]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8047cb4:	5cab      	ldrb	r3, [r5, r2]
                gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8047cb6:	5d2a      	ldrb	r2, [r5, r4]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8047cb8:	041b      	lsls	r3, r3, #16
 8047cba:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8047cbe:	4313      	orrs	r3, r2
 8047cc0:	f108 0204 	add.w	r2, r8, #4
                gpsEpochTime.SubSeconds = payload[macIndex++];
 8047cc4:	f108 0406 	add.w	r4, r8, #6
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8047cc8:	b2d2      	uxtb	r2, r2
 8047cca:	f108 0805 	add.w	r8, r8, #5
                gpsEpochTime.SubSeconds = payload[macIndex++];
 8047cce:	fa5f f888 	uxtb.w	r8, r8
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8047cd2:	5caa      	ldrb	r2, [r5, r2]
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8047cd4:	f815 1008 	ldrb.w	r1, [r5, r8]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8047cd8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8047cdc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8047ce0:	434a      	muls	r2, r1
                sysTimeCurrent = SysTimeGet( );
 8047ce2:	f10d 0930 	add.w	r9, sp, #48	; 0x30
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8047ce6:	1212      	asrs	r2, r2, #8
                sysTimeCurrent = SysTimeGet( );
 8047ce8:	4648      	mov	r0, r9
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8047cea:	9303      	str	r3, [sp, #12]
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8047cec:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
                sysTimeCurrent = SysTimeGet( );
 8047cf0:	f002 fddb 	bl	804a8aa <SysTimeGet>
                sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8047cf4:	9b03      	ldr	r3, [sp, #12]
 8047cf6:	f103 5396 	add.w	r3, r3, #314572800	; 0x12c00000
 8047cfa:	f503 13a9 	add.w	r3, r3, #1384448	; 0x152000
 8047cfe:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
                sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8047d02:	9308      	str	r3, [sp, #32]
 8047d04:	f8d6 3340 	ldr.w	r3, [r6, #832]	; 0x340
 8047d08:	9300      	str	r3, [sp, #0]
 8047d0a:	f10d 0820 	add.w	r8, sp, #32
 8047d0e:	f8d6 333c 	ldr.w	r3, [r6, #828]	; 0x33c
 8047d12:	e898 0006 	ldmia.w	r8, {r1, r2}
 8047d16:	a80a      	add	r0, sp, #40	; 0x28
 8047d18:	f002 fd8a 	bl	804a830 <SysTimeSub>
 8047d1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8047d1e:	9300      	str	r3, [sp, #0]
 8047d20:	e899 0006 	ldmia.w	r9, {r1, r2}
 8047d24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8047d26:	4640      	mov	r0, r8
 8047d28:	f002 fd66 	bl	804a7f8 <SysTimeAdd>
                SysTimeSet( sysTime );
 8047d2c:	e898 0003 	ldmia.w	r8, {r0, r1}
 8047d30:	f002 fd9a 	bl	804a868 <SysTimeSet>
                LoRaMacClassBDeviceTimeAns( );
 8047d34:	f000 feac 	bl	8048a90 <LoRaMacClassBDeviceTimeAns>
                MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8047d38:	2301      	movs	r3, #1
                gpsEpochTime.SubSeconds = payload[macIndex++];
 8047d3a:	b2e4      	uxtb	r4, r4
                MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8047d3c:	f886 343c 	strb.w	r3, [r6, #1084]	; 0x43c
 8047d40:	e5fe      	b.n	8047940 <ProcessMacCommands.isra.1.constprop.7+0xb0>
                if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8047d42:	f896 3484 	ldrb.w	r3, [r6, #1156]	; 0x484
 8047d46:	3b04      	subs	r3, #4
 8047d48:	2b01      	cmp	r3, #1
 8047d4a:	f67f adf9 	bls.w	8047940 <ProcessMacCommands.isra.1.constprop.7+0xb0>
                    LoRaMacClassBPingSlotInfoAns( );
 8047d4e:	f000 fe9b 	bl	8048a88 <LoRaMacClassBPingSlotInfoAns>
 8047d52:	e5f5      	b.n	8047940 <ProcessMacCommands.isra.1.constprop.7+0xb0>
                frequency = ( uint32_t )payload[macIndex++];
 8047d54:	f108 0202 	add.w	r2, r8, #2
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8047d58:	b2d2      	uxtb	r2, r2
                frequency = ( uint32_t )payload[macIndex++];
 8047d5a:	5d29      	ldrb	r1, [r5, r4]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8047d5c:	5ca8      	ldrb	r0, [r5, r2]
 8047d5e:	f108 0203 	add.w	r2, r8, #3
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8047d62:	b2d2      	uxtb	r2, r2
                datarate = payload[macIndex++] & 0x0F;
 8047d64:	f108 0405 	add.w	r4, r8, #5
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8047d68:	5cab      	ldrb	r3, [r5, r2]
 8047d6a:	f108 0804 	add.w	r8, r8, #4
                datarate = payload[macIndex++] & 0x0F;
 8047d6e:	fa5f f888 	uxtb.w	r8, r8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8047d72:	041b      	lsls	r3, r3, #16
 8047d74:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                datarate = payload[macIndex++] & 0x0F;
 8047d78:	f815 0008 	ldrb.w	r0, [r5, r8]
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8047d7c:	430b      	orrs	r3, r1
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8047d7e:	2164      	movs	r1, #100	; 0x64
 8047d80:	4359      	muls	r1, r3
 8047d82:	f000 000f 	and.w	r0, r0, #15
 8047d86:	f000 fe80 	bl	8048a8a <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 8047d8a:	a910      	add	r1, sp, #64	; 0x40
                datarate = payload[macIndex++] & 0x0F;
 8047d8c:	b2e4      	uxtb	r4, r4
                macCmdPayload[0] = status;
 8047d8e:	f801 0d28 	strb.w	r0, [r1, #-40]!
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8047d92:	2201      	movs	r2, #1
 8047d94:	2011      	movs	r0, #17
 8047d96:	e6ac      	b.n	8047af2 <ProcessMacCommands.isra.1.constprop.7+0x262>
                beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8047d98:	f108 0302 	add.w	r3, r8, #2
                beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8047d9c:	b2db      	uxtb	r3, r3
                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8047d9e:	4a1a      	ldr	r2, [pc, #104]	; (8047e08 <ProcessMacCommands.isra.1.constprop.7+0x578>)
                beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8047da0:	5ce8      	ldrb	r0, [r5, r3]
 8047da2:	5d2b      	ldrb	r3, [r5, r4]
                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8047da4:	6812      	ldr	r2, [r2, #0]
                beaconTimingChannel = payload[macIndex++];
 8047da6:	f108 0404 	add.w	r4, r8, #4
                beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8047daa:	f108 0803 	add.w	r8, r8, #3
                beaconTimingChannel = payload[macIndex++];
 8047dae:	fa5f f888 	uxtb.w	r8, r8
                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8047db2:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8047db6:	f815 1008 	ldrb.w	r1, [r5, r8]
                beaconTimingChannel = payload[macIndex++];
 8047dba:	b2e4      	uxtb	r4, r4
                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8047dbc:	f000 fe67 	bl	8048a8e <LoRaMacClassBBeaconTimingAns>
 8047dc0:	e5be      	b.n	8047940 <ProcessMacCommands.isra.1.constprop.7+0xb0>
                    frequency = ( uint32_t )payload[macIndex++];
 8047dc2:	5d28      	ldrb	r0, [r5, r4]
 8047dc4:	f108 0302 	add.w	r3, r8, #2
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8047dc8:	f108 0404 	add.w	r4, r8, #4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8047dcc:	f108 0803 	add.w	r8, r8, #3
 8047dd0:	b2db      	uxtb	r3, r3
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8047dd2:	fa5f f888 	uxtb.w	r8, r8
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8047dd6:	5cea      	ldrb	r2, [r5, r3]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8047dd8:	f815 3008 	ldrb.w	r3, [r5, r8]
 8047ddc:	041b      	lsls	r3, r3, #16
 8047dde:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8047de2:	4303      	orrs	r3, r0
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8047de4:	2064      	movs	r0, #100	; 0x64
 8047de6:	4358      	muls	r0, r3
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8047de8:	b2e4      	uxtb	r4, r4
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8047dea:	f000 fe52 	bl	8048a92 <LoRaMacClassBBeaconFreqReq>
 8047dee:	b130      	cbz	r0, 8047dfe <ProcessMacCommands.isra.1.constprop.7+0x56e>
                        macCmdPayload[0] = 1;
 8047df0:	2301      	movs	r3, #1
 8047df2:	f88d 3018 	strb.w	r3, [sp, #24]
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8047df6:	2201      	movs	r2, #1
 8047df8:	a906      	add	r1, sp, #24
 8047dfa:	2013      	movs	r0, #19
 8047dfc:	e679      	b.n	8047af2 <ProcessMacCommands.isra.1.constprop.7+0x262>
                        macCmdPayload[0] = 0;
 8047dfe:	f88d 0018 	strb.w	r0, [sp, #24]
 8047e02:	e7f8      	b.n	8047df6 <ProcessMacCommands.isra.1.constprop.7+0x566>
 8047e04:	0804e5b8 	.word	0x0804e5b8
 8047e08:	2000bd18 	.word	0x2000bd18

08047e0c <SendFrameOnChannel>:
{
 8047e0c:	b530      	push	{r4, r5, lr}
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8047e0e:	4c38      	ldr	r4, [pc, #224]	; (8047ef0 <SendFrameOnChannel+0xe4>)
{
 8047e10:	b087      	sub	sp, #28
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8047e12:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    txConfig.Channel = channel;
 8047e16:	f88d 0008 	strb.w	r0, [sp, #8]
    int8_t txPower = 0;
 8047e1a:	2200      	movs	r2, #0
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8047e1c:	f893 10f9 	ldrb.w	r1, [r3, #249]	; 0xf9
    int8_t txPower = 0;
 8047e20:	f88d 2007 	strb.w	r2, [sp, #7]
    txConfig.TxPower = TX_POWER_0/*MacCtx.NvmCtx->MacParams.ChannelsTxPower*/;
 8047e24:	f88d 200a 	strb.w	r2, [sp, #10]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 8047e28:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8047e2c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8047e30:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8047e32:	88a3      	ldrh	r3, [r4, #4]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8047e34:	f88d 1009 	strb.w	r1, [sp, #9]
{
 8047e38:	4605      	mov	r5, r0
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 8047e3a:	9203      	str	r2, [sp, #12]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8047e3c:	f8ad 3014 	strh.w	r3, [sp, #20]
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8047e40:	f000 fe18 	bl	8048a74 <LoRaMacClassBIsBeaconExpected>
 8047e44:	2800      	cmp	r0, #0
 8047e46:	d151      	bne.n	8047eec <SendFrameOnChannel+0xe0>
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8047e48:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8047e4c:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8047e50:	2b01      	cmp	r3, #1
 8047e52:	d10b      	bne.n	8047e6c <SendFrameOnChannel+0x60>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8047e54:	f000 fe10 	bl	8048a78 <LoRaMacClassBIsPingExpected>
 8047e58:	b110      	cbz	r0, 8047e60 <SendFrameOnChannel+0x54>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8047e5a:	200f      	movs	r0, #15
}
 8047e5c:	b007      	add	sp, #28
 8047e5e:	bd30      	pop	{r4, r5, pc}
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8047e60:	f000 fe0c 	bl	8048a7c <LoRaMacClassBIsMulticastExpected>
 8047e64:	2800      	cmp	r0, #0
 8047e66:	d1f8      	bne.n	8047e5a <SendFrameOnChannel+0x4e>
            LoRaMacClassBStopRxSlots( );
 8047e68:	f000 fe17 	bl	8048a9a <LoRaMacClassBStopRxSlots>
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8047e6c:	f8d4 0488 	ldr.w	r0, [r4, #1160]	; 0x488
 8047e70:	4b20      	ldr	r3, [pc, #128]	; (8047ef4 <SendFrameOnChannel+0xe8>)
 8047e72:	7800      	ldrb	r0, [r0, #0]
 8047e74:	f10d 0207 	add.w	r2, sp, #7
 8047e78:	a902      	add	r1, sp, #8
 8047e7a:	f001 fcb4 	bl	80497e6 <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8047e7e:	2301      	movs	r3, #1
 8047e80:	f884 3441 	strb.w	r3, [r4, #1089]	; 0x441
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8047e84:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8047e88:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 8047e8c:	f884 3442 	strb.w	r3, [r4, #1090]	; 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 8047e90:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8047e94:	f884 3443 	strb.w	r3, [r4, #1091]	; 0x443
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8047e98:	f8d4 341c 	ldr.w	r3, [r4, #1052]	; 0x41c
    MacCtx.McpsConfirm.Channel = channel;
 8047e9c:	f8c4 5450 	str.w	r5, [r4, #1104]	; 0x450
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8047ea0:	f8c4 3448 	str.w	r3, [r4, #1096]	; 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8047ea4:	f8c4 3458 	str.w	r3, [r4, #1112]	; 0x458
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8047ea8:	f000 fdea 	bl	8048a80 <LoRaMacClassBIsBeaconModeActive>
 8047eac:	b9b0      	cbnz	r0, 8047edc <SendFrameOnChannel+0xd0>
    LoRaMacClassBHaltBeaconing( );
 8047eae:	f000 fde9 	bl	8048a84 <LoRaMacClassBHaltBeaconing>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8047eb2:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 8047eb6:	f043 0302 	orr.w	r3, r3, #2
 8047eba:	f8c4 3344 	str.w	r3, [r4, #836]	; 0x344
    if( MacCtx.NodeAckRequested == false )
 8047ebe:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 8047ec2:	b923      	cbnz	r3, 8047ece <SendFrameOnChannel+0xc2>
        MacCtx.ChannelsNbTransCounter++;
 8047ec4:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 8047ec8:	3301      	adds	r3, #1
 8047eca:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8047ece:	4b0a      	ldr	r3, [pc, #40]	; (8047ef8 <SendFrameOnChannel+0xec>)
 8047ed0:	480a      	ldr	r0, [pc, #40]	; (8047efc <SendFrameOnChannel+0xf0>)
 8047ed2:	7921      	ldrb	r1, [r4, #4]
 8047ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047ed6:	4798      	blx	r3
    return LORAMAC_STATUS_OK;
 8047ed8:	2000      	movs	r0, #0
 8047eda:	e7bf      	b.n	8047e5c <SendFrameOnChannel+0x50>
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8047edc:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
 8047ee0:	f000 fdd9 	bl	8048a96 <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 8047ee4:	2800      	cmp	r0, #0
 8047ee6:	d0e2      	beq.n	8047eae <SendFrameOnChannel+0xa2>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8047ee8:	2010      	movs	r0, #16
 8047eea:	e7b7      	b.n	8047e5c <SendFrameOnChannel+0x50>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8047eec:	200e      	movs	r0, #14
 8047eee:	e7b5      	b.n	8047e5c <SendFrameOnChannel+0x50>
 8047ef0:	20008890 	.word	0x20008890
 8047ef4:	20008cac 	.word	0x20008cac
 8047ef8:	0804e210 	.word	0x0804e210
 8047efc:	20008896 	.word	0x20008896

08047f00 <ScheduleTx>:
{
 8047f00:	b570      	push	{r4, r5, r6, lr}
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
 8047f02:	4c80      	ldr	r4, [pc, #512]	; (8048104 <ScheduleTx+0x204>)
    TimerTime_t dutyCycleTimeOff = 0;
 8047f04:	2300      	movs	r3, #0
{
 8047f06:	b088      	sub	sp, #32
 8047f08:	4605      	mov	r5, r0
    PRINTF("ScheduleTx\r\n");
 8047f0a:	487f      	ldr	r0, [pc, #508]	; (8048108 <ScheduleTx+0x208>)
    size_t macCmdsSize = 0;
 8047f0c:	e9cd 3302 	strd	r3, r3, [sp, #8]
    PRINTF("ScheduleTx\r\n");
 8047f10:	f002 fe18 	bl	804ab44 <TraceSend>
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
 8047f14:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8047f18:	f893 21d4 	ldrb.w	r2, [r3, #468]	; 0x1d4
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
 8047f1c:	f893 113e 	ldrb.w	r1, [r3, #318]	; 0x13e
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8047f20:	2a00      	cmp	r2, #0
 8047f22:	d15c      	bne.n	8047fde <ScheduleTx+0xde>
        calcBackOff.Joined = true;
 8047f24:	f88d 2014 	strb.w	r2, [sp, #20]
    calcBackOff.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 8047f28:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
    calcBackOff.Channel = channel;
 8047f2c:	f88d 1017 	strb.w	r1, [sp, #23]
    calcBackOff.ElapsedTime = TimerGetElapsedTime( MacCtx.NvmCtx->InitializationTime );
 8047f30:	f8d3 01cc 	ldr.w	r0, [r3, #460]	; 0x1cc
    calcBackOff.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 8047f34:	f88d 2016 	strb.w	r2, [sp, #22]
    calcBackOff.ElapsedTime = TimerGetElapsedTime( MacCtx.NvmCtx->InitializationTime );
 8047f38:	f002 fdba 	bl	804aab0 <TimerGetElapsedTime>
    calcBackOff.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8047f3c:	f8d4 341c 	ldr.w	r3, [r4, #1052]	; 0x41c
 8047f40:	9307      	str	r3, [sp, #28]
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 8047f42:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
    calcBackOff.ElapsedTime = TimerGetElapsedTime( MacCtx.NvmCtx->InitializationTime );
 8047f46:	9006      	str	r0, [sp, #24]
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 8047f48:	075b      	lsls	r3, r3, #29
    calcBackOff.LastTxIsJoinRequest = false;
 8047f4a:	f04f 0000 	mov.w	r0, #0
 8047f4e:	f88d 0015 	strb.w	r0, [sp, #21]
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 8047f52:	d505      	bpl.n	8047f60 <ScheduleTx+0x60>
 8047f54:	f000 fee2 	bl	8048d1c <LoRaMacConfirmQueueIsCmdActive>
 8047f58:	b110      	cbz	r0, 8047f60 <ScheduleTx+0x60>
        calcBackOff.LastTxIsJoinRequest = true;
 8047f5a:	2301      	movs	r3, #1
 8047f5c:	f88d 3015 	strb.w	r3, [sp, #21]
    RegionCalcBackOff( MacCtx.NvmCtx->Region, &calcBackOff );
 8047f60:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8047f64:	a905      	add	r1, sp, #20
 8047f66:	7818      	ldrb	r0, [r3, #0]
 8047f68:	f001 fc78 	bl	804985c <RegionCalcBackOff>
    MacCtx.NvmCtx->AggregatedTimeOff = ( MacCtx.TxTimeOnAir * MacCtx.NvmCtx->AggregatedDCycle - MacCtx.TxTimeOnAir );
 8047f6c:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8047f70:	f8b3 21c2 	ldrh.w	r2, [r3, #450]	; 0x1c2
 8047f74:	1e51      	subs	r1, r2, #1
 8047f76:	f8d4 241c 	ldr.w	r2, [r4, #1052]	; 0x41c
 8047f7a:	434a      	muls	r2, r1
 8047f7c:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 8047f80:	9205      	str	r2, [sp, #20]
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8047f82:	f893 20f9 	ldrb.w	r2, [r3, #249]	; 0xf9
 8047f86:	f88d 201c 	strb.w	r2, [sp, #28]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 8047f8a:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
 8047f8e:	f88d 201e 	strb.w	r2, [sp, #30]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8047f92:	f893 21d4 	ldrb.w	r2, [r3, #468]	; 0x1d4
 8047f96:	bb22      	cbnz	r2, 8047fe2 <ScheduleTx+0xe2>
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &dutyCycleTimeOff, &MacCtx.NvmCtx->AggregatedTimeOff );
 8047f98:	7818      	ldrb	r0, [r3, #0]
        nextChan.Joined = true;
 8047f9a:	f88d 201d 	strb.w	r2, [sp, #29]
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &dutyCycleTimeOff, &MacCtx.NvmCtx->AggregatedTimeOff );
 8047f9e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 8047fa2:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8047fa6:	9206      	str	r2, [sp, #24]
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &dutyCycleTimeOff, &MacCtx.NvmCtx->AggregatedTimeOff );
 8047fa8:	9300      	str	r3, [sp, #0]
 8047faa:	4a58      	ldr	r2, [pc, #352]	; (804810c <ScheduleTx+0x20c>)
 8047fac:	ab02      	add	r3, sp, #8
 8047fae:	a905      	add	r1, sp, #20
 8047fb0:	f001 fc5a 	bl	8049868 <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 8047fb4:	b1b8      	cbz	r0, 8047fe6 <ScheduleTx+0xe6>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8047fb6:	280b      	cmp	r0, #11
 8047fb8:	d10f      	bne.n	8047fda <ScheduleTx+0xda>
 8047fba:	b175      	cbz	r5, 8047fda <ScheduleTx+0xda>
            if( dutyCycleTimeOff != 0 )
 8047fbc:	9902      	ldr	r1, [sp, #8]
 8047fbe:	b159      	cbz	r1, 8047fd8 <ScheduleTx+0xd8>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8047fc0:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
                TimerSetValue( &MacCtx.TxDelayedTimer, dutyCycleTimeOff );
 8047fc4:	4852      	ldr	r0, [pc, #328]	; (8048110 <ScheduleTx+0x210>)
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8047fc6:	f043 0320 	orr.w	r3, r3, #32
 8047fca:	f8c4 3344 	str.w	r3, [r4, #836]	; 0x344
                TimerSetValue( &MacCtx.TxDelayedTimer, dutyCycleTimeOff );
 8047fce:	f002 fd57 	bl	804aa80 <TimerSetValue>
                TimerStart( &MacCtx.TxDelayedTimer );
 8047fd2:	484f      	ldr	r0, [pc, #316]	; (8048110 <ScheduleTx+0x210>)
 8047fd4:	f002 fcba 	bl	804a94c <TimerStart>
            return LORAMAC_STATUS_OK;
 8047fd8:	2000      	movs	r0, #0
}
 8047fda:	b008      	add	sp, #32
 8047fdc:	bd70      	pop	{r4, r5, r6, pc}
        calcBackOff.Joined = true;
 8047fde:	2201      	movs	r2, #1
 8047fe0:	e7a0      	b.n	8047f24 <ScheduleTx+0x24>
        nextChan.Joined = true;
 8047fe2:	2201      	movs	r2, #1
 8047fe4:	e7d8      	b.n	8047f98 <ScheduleTx+0x98>
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8047fe6:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
 8047fea:	4d4a      	ldr	r5, [pc, #296]	; (8048114 <ScheduleTx+0x214>)
 8047fec:	780e      	ldrb	r6, [r1, #0]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region, MacCtx.NvmCtx->MacParams.DownlinkDwellTime, MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 8047fee:	f991 3119 	ldrsb.w	r3, [r1, #281]	; 0x119
 8047ff2:	f991 20f9 	ldrsb.w	r2, [r1, #249]	; 0xf9
 8047ff6:	f891 112d 	ldrb.w	r1, [r1, #301]	; 0x12d
 8047ffa:	4630      	mov	r0, r6
 8047ffc:	f001 fc44 	bl	8049888 <RegionApplyDrOffset>
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 8048000:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8048004:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
 8048008:	9500      	str	r5, [sp, #0]
 804800a:	b241      	sxtb	r1, r0
 804800c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8048010:	4630      	mov	r0, r6
 8048012:	f001 fbd0 	bl	80497b6 <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8048016:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 804801a:	3514      	adds	r5, #20
 804801c:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
 8048020:	f993 1120 	ldrsb.w	r1, [r3, #288]	; 0x120
 8048024:	7818      	ldrb	r0, [r3, #0]
 8048026:	9500      	str	r5, [sp, #0]
 8048028:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 804802c:	f001 fbc3 	bl	80497b6 <RegionComputeRxWindowParameters>
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8048030:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8048034:	f893 21d4 	ldrb.w	r2, [r3, #468]	; 0x1d4
 8048038:	b9e2      	cbnz	r2, 8048074 <ScheduleTx+0x174>
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 804803a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 804803e:	f8d4 13c8 	ldr.w	r1, [r4, #968]	; 0x3c8
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8048042:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8048046:	440a      	add	r2, r1
 8048048:	f8c4 23b4 	str.w	r2, [r4, #948]	; 0x3b4
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 804804c:	f8d4 23dc 	ldr.w	r2, [r4, #988]	; 0x3dc
    LoRaMacStatus_t retval = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 8048050:	f894 6419 	ldrb.w	r6, [r4, #1049]	; 0x419
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8048054:	4413      	add	r3, r2
 8048056:	f8c4 33b8 	str.w	r3, [r4, #952]	; 0x3b8
    LoRaMacStatus_t retval = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 804805a:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 804805e:	f993 50f9 	ldrsb.w	r5, [r3, #249]	; 0xf9
    uint32_t fCntUp = 0;
 8048062:	2300      	movs	r3, #0
 8048064:	9304      	str	r3, [sp, #16]
    switch( MacCtx.TxMsg.Type )
 8048066:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
 804806a:	b313      	cbz	r3, 80480b2 <ScheduleTx+0x1b2>
 804806c:	2b04      	cmp	r3, #4
 804806e:	d02b      	beq.n	80480c8 <ScheduleTx+0x1c8>
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8048070:	2003      	movs	r0, #3
 8048072:	e7b2      	b.n	8047fda <ScheduleTx+0xda>
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8048074:	a803      	add	r0, sp, #12
 8048076:	f000 fdb7 	bl	8048be8 <LoRaMacCommandsGetSizeSerializedCmds>
 804807a:	2800      	cmp	r0, #0
 804807c:	d13d      	bne.n	80480fa <ScheduleTx+0x1fa>
        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 804807e:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8048082:	f894 523b 	ldrb.w	r5, [r4, #571]	; 0x23b
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8048086:	f993 00f9 	ldrsb.w	r0, [r3, #249]	; 0xf9
        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 804808a:	f89d 600c 	ldrb.w	r6, [sp, #12]
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 804808e:	f7ff fb27 	bl	80476e0 <GetMaxAppPayloadWithoutFOptsLength>
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8048092:	4435      	add	r5, r6
 8048094:	b280      	uxth	r0, r0
 8048096:	42a8      	cmp	r0, r5
 8048098:	d331      	bcc.n	80480fe <ScheduleTx+0x1fe>
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 804809a:	f8d4 2488 	ldr.w	r2, [r4, #1160]	; 0x488
 804809e:	f8d4 13c8 	ldr.w	r1, [r4, #968]	; 0x3c8
 80480a2:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 80480a6:	440b      	add	r3, r1
 80480a8:	f8c4 33b4 	str.w	r3, [r4, #948]	; 0x3b4
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80480ac:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
 80480b0:	e7cc      	b.n	804804c <ScheduleTx+0x14c>
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80480b2:	4819      	ldr	r0, [pc, #100]	; (8048118 <ScheduleTx+0x218>)
 80480b4:	f001 f80e 	bl	80490d4 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80480b8:	b9d8      	cbnz	r0, 80480f2 <ScheduleTx+0x1f2>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80480ba:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
 80480be:	80a3      	strh	r3, [r4, #4]
    return SendFrameOnChannel( 0/*MacCtx.Channel   JP*/ );
 80480c0:	2000      	movs	r0, #0
 80480c2:	f7ff fea3 	bl	8047e0c <SendFrameOnChannel>
 80480c6:	e788      	b.n	8047fda <ScheduleTx+0xda>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80480c8:	a804      	add	r0, sp, #16
 80480ca:	f000 ffc1 	bl	8049050 <LoRaMacCryptoGetFCntUp>
 80480ce:	b990      	cbnz	r0, 80480f6 <ScheduleTx+0x1f6>
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 80480d0:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 80480d4:	b91b      	cbnz	r3, 80480de <ScheduleTx+0x1de>
 80480d6:	f894 3416 	ldrb.w	r3, [r4, #1046]	; 0x416
 80480da:	2b01      	cmp	r3, #1
 80480dc:	d902      	bls.n	80480e4 <ScheduleTx+0x1e4>
                fCntUp -= 1;
 80480de:	9b04      	ldr	r3, [sp, #16]
 80480e0:	3b01      	subs	r3, #1
 80480e2:	9304      	str	r3, [sp, #16]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 80480e4:	4b0c      	ldr	r3, [pc, #48]	; (8048118 <ScheduleTx+0x218>)
 80480e6:	9804      	ldr	r0, [sp, #16]
 80480e8:	4632      	mov	r2, r6
 80480ea:	b2e9      	uxtb	r1, r5
 80480ec:	f001 f822 	bl	8049134 <LoRaMacCryptoSecureMessage>
 80480f0:	e7e2      	b.n	80480b8 <ScheduleTx+0x1b8>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80480f2:	2011      	movs	r0, #17
 80480f4:	e771      	b.n	8047fda <ScheduleTx+0xda>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80480f6:	2012      	movs	r0, #18
 80480f8:	e76f      	b.n	8047fda <ScheduleTx+0xda>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80480fa:	2013      	movs	r0, #19
 80480fc:	e76d      	b.n	8047fda <ScheduleTx+0xda>
            return LORAMAC_STATUS_LENGTH_ERROR;
 80480fe:	2008      	movs	r0, #8
 8048100:	e76b      	b.n	8047fda <ScheduleTx+0xda>
 8048102:	bf00      	nop
 8048104:	20008890 	.word	0x20008890
 8048108:	0804e7ff 	.word	0x0804e7ff
 804810c:	20008ca9 	.word	0x20008ca9
 8048110:	20008bfc 	.word	0x20008bfc
 8048114:	20008c4c 	.word	0x20008c4c
 8048118:	2000899c 	.word	0x2000899c

0804811c <OnTxDelayedTimerEvent>:
{
 804811c:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 804811e:	4c12      	ldr	r4, [pc, #72]	; (8048168 <OnTxDelayedTimerEvent+0x4c>)
 8048120:	f504 705b 	add.w	r0, r4, #876	; 0x36c
 8048124:	f002 fc84 	bl	804aa30 <TimerStop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8048128:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
    switch( ScheduleTx( true ) )
 804812c:	2001      	movs	r0, #1
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 804812e:	f023 0320 	bic.w	r3, r3, #32
 8048132:	f8c4 3344 	str.w	r3, [r4, #836]	; 0x344
    switch( ScheduleTx( true ) )
 8048136:	f7ff fee3 	bl	8047f00 <ScheduleTx>
 804813a:	b1a0      	cbz	r0, 8048166 <OnTxDelayedTimerEvent+0x4a>
 804813c:	280b      	cmp	r0, #11
 804813e:	d012      	beq.n	8048166 <OnTxDelayedTimerEvent+0x4a>
            MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8048140:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8048144:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 8048148:	f884 3442 	strb.w	r3, [r4, #1090]	; 0x442
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 804814c:	2009      	movs	r0, #9
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 804814e:	f894 3416 	ldrb.w	r3, [r4, #1046]	; 0x416
 8048152:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8048156:	f884 0441 	strb.w	r0, [r4, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 804815a:	f000 fdc7 	bl	8048cec <LoRaMacConfirmQueueSetStatusCmn>
}
 804815e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            StopRetransmission( );
 8048162:	f7ff ba99 	b.w	8047698 <StopRetransmission>
}
 8048166:	bd10      	pop	{r4, pc}
 8048168:	20008890 	.word	0x20008890

0804816c <DetermineFrameType>:
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 804816c:	4602      	mov	r2, r0
 804816e:	b1d0      	cbz	r0, 80481a6 <DetermineFrameType+0x3a>
 8048170:	b1c9      	cbz	r1, 80481a6 <DetermineFrameType+0x3a>
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8048172:	7b03      	ldrb	r3, [r0, #12]
 8048174:	f013 000f 	ands.w	r0, r3, #15
 8048178:	d005      	beq.n	8048186 <DetermineFrameType+0x1a>
 804817a:	f892 3020 	ldrb.w	r3, [r2, #32]
 804817e:	b113      	cbz	r3, 8048186 <DetermineFrameType+0x1a>
        *fType = FRAME_TYPE_A;
 8048180:	2000      	movs	r0, #0
 8048182:	7008      	strb	r0, [r1, #0]
 8048184:	4770      	bx	lr
    else if( macMsg->FRMPayloadSize == 0 )
 8048186:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 804818a:	b91b      	cbnz	r3, 8048194 <DetermineFrameType+0x28>
        *fType = FRAME_TYPE_B;
 804818c:	2201      	movs	r2, #1
 804818e:	700a      	strb	r2, [r1, #0]
    return LORAMAC_STATUS_OK;
 8048190:	4618      	mov	r0, r3
 8048192:	4770      	bx	lr
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8048194:	b948      	cbnz	r0, 80481aa <DetermineFrameType+0x3e>
 8048196:	f892 3020 	ldrb.w	r3, [r2, #32]
 804819a:	b913      	cbnz	r3, 80481a2 <DetermineFrameType+0x36>
        *fType = FRAME_TYPE_C;
 804819c:	2302      	movs	r3, #2
        *fType = FRAME_TYPE_D;
 804819e:	700b      	strb	r3, [r1, #0]
 80481a0:	4770      	bx	lr
 80481a2:	2303      	movs	r3, #3
 80481a4:	e7fb      	b.n	804819e <DetermineFrameType+0x32>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80481a6:	2003      	movs	r0, #3
 80481a8:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 80481aa:	2017      	movs	r0, #23
}
 80481ac:	4770      	bx	lr
	...

080481b0 <LoRaMacProcess>:
{
 80481b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80481b4:	b0a1      	sub	sp, #132	; 0x84
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80481b6:	f3ef 8310 	mrs	r3, PRIMASK
    events = LoRaMacRadioEvents;
 80481ba:	4cba      	ldr	r4, [pc, #744]	; (80484a4 <LoRaMacProcess+0x2f4>)
    LoRaMacRadioEvents.Value = 0;
 80481bc:	2200      	movs	r2, #0
    events = LoRaMacRadioEvents;
 80481be:	6825      	ldr	r5, [r4, #0]
    LoRaMacRadioEvents.Value = 0;
 80481c0:	6022      	str	r2, [r4, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80481c2:	f383 8810 	msr	PRIMASK, r3
    if( events.Value != 0 )
 80481c6:	2d00      	cmp	r5, #0
 80481c8:	f000 80c0 	beq.w	804834c <LoRaMacProcess+0x19c>
 80481cc:	b2ed      	uxtb	r5, r5
        if( events.Events.TxDone == 1 )
 80481ce:	06e9      	lsls	r1, r5, #27
 80481d0:	d552      	bpl.n	8048278 <LoRaMacProcess+0xc8>
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 80481d2:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 80481d6:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80481da:	2b02      	cmp	r3, #2
 80481dc:	d002      	beq.n	80481e4 <LoRaMacProcess+0x34>
        Radio.Sleep( );
 80481de:	4bb2      	ldr	r3, [pc, #712]	; (80484a8 <LoRaMacProcess+0x2f8>)
 80481e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80481e2:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 80481e4:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 80481e8:	48b0      	ldr	r0, [pc, #704]	; (80484ac <LoRaMacProcess+0x2fc>)
 80481ea:	f002 fc49 	bl	804aa80 <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer1 );
 80481ee:	48af      	ldr	r0, [pc, #700]	; (80484ac <LoRaMacProcess+0x2fc>)
 80481f0:	f002 fbac 	bl	804a94c <TimerStart>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 80481f4:	f8d4 13b8 	ldr.w	r1, [r4, #952]	; 0x3b8
 80481f8:	48ad      	ldr	r0, [pc, #692]	; (80484b0 <LoRaMacProcess+0x300>)
 80481fa:	f002 fc41 	bl	804aa80 <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer2 );
 80481fe:	48ac      	ldr	r0, [pc, #688]	; (80484b0 <LoRaMacProcess+0x300>)
 8048200:	f002 fba4 	bl	804a94c <TimerStart>
    if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 8048204:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8048208:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
 804820c:	2a02      	cmp	r2, #2
 804820e:	d002      	beq.n	8048216 <LoRaMacProcess+0x66>
 8048210:	f894 2418 	ldrb.w	r2, [r4, #1048]	; 0x418
 8048214:	b182      	cbz	r2, 8048238 <LoRaMacProcess+0x88>
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 8048216:	a920      	add	r1, sp, #128	; 0x80
 8048218:	2216      	movs	r2, #22
 804821a:	f801 2d60 	strb.w	r2, [r1, #-96]!
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804821e:	7818      	ldrb	r0, [r3, #0]
 8048220:	f001 faad 	bl	804977e <RegionGetPhyParam>
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8048224:	f8d4 13b8 	ldr.w	r1, [r4, #952]	; 0x3b8
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8048228:	900a      	str	r0, [sp, #40]	; 0x28
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 804822a:	4401      	add	r1, r0
 804822c:	48a1      	ldr	r0, [pc, #644]	; (80484b4 <LoRaMacProcess+0x304>)
 804822e:	f002 fc27 	bl	804aa80 <TimerSetValue>
        TimerStart( &MacCtx.AckTimeoutTimer );
 8048232:	48a0      	ldr	r0, [pc, #640]	; (80484b4 <LoRaMacProcess+0x304>)
 8048234:	f002 fb8a 	bl	804a94c <TimerStart>
    MacCtx.NvmCtx->LastTxChannel = MacCtx.Channel;
 8048238:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 804823c:	f894 2419 	ldrb.w	r2, [r4, #1049]	; 0x419
 8048240:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
    txDone.Channel = MacCtx.Channel;
 8048244:	f88d 2050 	strb.w	r2, [sp, #80]	; 0x50
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8048248:	f893 21d4 	ldrb.w	r2, [r3, #468]	; 0x1d4
 804824c:	2a00      	cmp	r2, #0
 804824e:	f040 8126 	bne.w	804849e <LoRaMacProcess+0x2ee>
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8048252:	4e99      	ldr	r6, [pc, #612]	; (80484b8 <LoRaMacProcess+0x308>)
        txDone.Joined  = true;
 8048254:	f88d 2051 	strb.w	r2, [sp, #81]	; 0x51
    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 8048258:	7818      	ldrb	r0, [r3, #0]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 804825a:	6832      	ldr	r2, [r6, #0]
 804825c:	9215      	str	r2, [sp, #84]	; 0x54
    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 804825e:	a914      	add	r1, sp, #80	; 0x50
 8048260:	f001 fa97 	bl	8049792 <RegionSetBandTxDone>
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 8048264:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8048268:	6832      	ldr	r2, [r6, #0]
 804826a:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
    if( MacCtx.NodeAckRequested == false )
 804826e:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 8048272:	b90b      	cbnz	r3, 8048278 <LoRaMacProcess+0xc8>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8048274:	f884 3441 	strb.w	r3, [r4, #1089]	; 0x441
        if( events.Events.RxDone == 1 )
 8048278:	072a      	lsls	r2, r5, #28
 804827a:	d53d      	bpl.n	80482f8 <LoRaMacProcess+0x148>
    uint8_t *payload = RxDoneParams.Payload;
 804827c:	4b8f      	ldr	r3, [pc, #572]	; (80484bc <LoRaMacProcess+0x30c>)
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 804827e:	f8d4 2488 	ldr.w	r2, [r4, #1160]	; 0x488
    uint8_t *payload = RxDoneParams.Payload;
 8048282:	f8d3 9004 	ldr.w	r9, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 8048286:	f8b3 8008 	ldrh.w	r8, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 804828a:	f9b3 a00a 	ldrsh.w	sl, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 804828e:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 8048292:	6cd6      	ldr	r6, [r2, #76]	; 0x4c
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 8048294:	f894 2484 	ldrb.w	r2, [r4, #1156]	; 0x484
 8048298:	f884 2431 	strb.w	r2, [r4, #1073]	; 0x431
    uint32_t downLinkCounter = 0;
 804829c:	2300      	movs	r3, #0
 804829e:	9307      	str	r3, [sp, #28]
    MacCtx.McpsConfirm.AckReceived = false;
 80482a0:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
    MacCtx.McpsIndication.Multicast = 0;
 80482a4:	f8a4 3422 	strh.w	r3, [r4, #1058]	; 0x422
    MacCtx.McpsIndication.FramePending = 0;
 80482a8:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 80482ac:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 80482b0:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.RxData = false;
 80482b4:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 80482b8:	f884 3432 	strb.w	r3, [r4, #1074]	; 0x432
    MacCtx.McpsIndication.DownLinkCounter = 0;
 80482bc:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 80482c0:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 80482c4:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 80482c8:	f884 343c 	strb.w	r3, [r4, #1084]	; 0x43c
    Radio.Sleep( );
 80482cc:	4b76      	ldr	r3, [pc, #472]	; (80484a8 <LoRaMacProcess+0x2f8>)
    MacCtx.McpsIndication.Rssi = rssi;
 80482ce:	f8a4 a42e 	strh.w	sl, [r4, #1070]	; 0x42e
    Radio.Sleep( );
 80482d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    MacCtx.McpsIndication.Snr = snr;
 80482d4:	f884 7430 	strb.w	r7, [r4, #1072]	; 0x430
    Radio.Sleep( );
 80482d8:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 80482da:	4875      	ldr	r0, [pc, #468]	; (80484b0 <LoRaMacProcess+0x300>)
 80482dc:	f002 fba8 	bl	804aa30 <TimerStop>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 80482e0:	4641      	mov	r1, r8
 80482e2:	4648      	mov	r0, r9
 80482e4:	f000 fbc4 	bl	8048a70 <LoRaMacClassBRxBeacon>
 80482e8:	4683      	mov	fp, r0
 80482ea:	2800      	cmp	r0, #0
 80482ec:	f000 80f0 	beq.w	80484d0 <LoRaMacProcess+0x320>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 80482f0:	f8a4 a47a 	strh.w	sl, [r4, #1146]	; 0x47a
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 80482f4:	f884 747c 	strb.w	r7, [r4, #1148]	; 0x47c
        if( events.Events.TxTimeout == 1 )
 80482f8:	076f      	lsls	r7, r5, #29
 80482fa:	d51b      	bpl.n	8048334 <LoRaMacProcess+0x184>
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 80482fc:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8048300:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8048304:	2b02      	cmp	r3, #2
 8048306:	d002      	beq.n	804830e <LoRaMacProcess+0x15e>
        Radio.Sleep( );
 8048308:	4b67      	ldr	r3, [pc, #412]	; (80484a8 <LoRaMacProcess+0x2f8>)
 804830a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 804830c:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 804830e:	f7ff f9b5 	bl	804767c <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8048312:	2002      	movs	r0, #2
 8048314:	f884 0441 	strb.w	r0, [r4, #1089]	; 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8048318:	f000 fce8 	bl	8048cec <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 804831c:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 8048320:	b113      	cbz	r3, 8048328 <LoRaMacProcess+0x178>
        MacCtx.AckTimeoutRetry = true;
 8048322:	2301      	movs	r3, #1
 8048324:	f884 3417 	strb.w	r3, [r4, #1047]	; 0x417
    MacCtx.MacFlags.Bits.MacDone = 1;
 8048328:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 804832c:	f043 0320 	orr.w	r3, r3, #32
 8048330:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
        if( events.Events.RxError == 1 )
 8048334:	07ae      	lsls	r6, r5, #30
 8048336:	d503      	bpl.n	8048340 <LoRaMacProcess+0x190>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8048338:	2106      	movs	r1, #6
 804833a:	2005      	movs	r0, #5
 804833c:	f7ff fa2c 	bl	8047798 <HandleRadioRxErrorTimeout>
        if( events.Events.RxTimeout == 1 )
 8048340:	07ed      	lsls	r5, r5, #31
 8048342:	d503      	bpl.n	804834c <LoRaMacProcess+0x19c>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8048344:	2104      	movs	r1, #4
 8048346:	2003      	movs	r0, #3
 8048348:	f7ff fa26 	bl	8047798 <HandleRadioRxErrorTimeout>
    LoRaMacClassBProcess( );
 804834c:	f000 fba6 	bl	8048a9c <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8048350:	f894 2485 	ldrb.w	r2, [r4, #1157]	; 0x485
 8048354:	0690      	lsls	r0, r2, #26
 8048356:	d56a      	bpl.n	804842e <LoRaMacProcess+0x27e>
    MacCtx.AllowRequests = requestState;
 8048358:	2300      	movs	r3, #0
 804835a:	f884 3486 	strb.w	r3, [r4, #1158]	; 0x486
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 804835e:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 8048362:	0619      	lsls	r1, r3, #24
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8048364:	bf44      	itt	mi
 8048366:	f023 0382 	bicmi.w	r3, r3, #130	; 0x82
 804836a:	f8c4 3344 	strmi.w	r3, [r4, #836]	; 0x344
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CONFIRM_QUEUE );
}

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 804836e:	f012 0f05 	tst.w	r2, #5
 8048372:	f000 82d1 	beq.w	8048918 <LoRaMacProcess+0x768>
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8048376:	200b      	movs	r0, #11
 8048378:	f000 fcd0 	bl	8048d1c <LoRaMacConfirmQueueIsCmdActive>
 804837c:	2800      	cmp	r0, #0
 804837e:	f000 82cb 	beq.w	8048918 <LoRaMacProcess+0x768>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8048382:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8048386:	07df      	lsls	r7, r3, #31
 8048388:	f100 82c6 	bmi.w	8048918 <LoRaMacProcess+0x768>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 804838c:	075e      	lsls	r6, r3, #29
 804838e:	f140 82c3 	bpl.w	8048918 <LoRaMacProcess+0x768>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8048392:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 8048396:	f023 0302 	bic.w	r3, r3, #2
 804839a:	f8c4 3344 	str.w	r3, [r4, #836]	; 0x344
    if( MacCtx.MacState == LORAMAC_IDLE )
 804839e:	f8d4 2344 	ldr.w	r2, [r4, #836]	; 0x344
 80483a2:	bb82      	cbnz	r2, 8048406 <LoRaMacProcess+0x256>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 80483a4:	f894 5485 	ldrb.w	r5, [r4, #1157]	; 0x485
 80483a8:	f015 0101 	ands.w	r1, r5, #1
            MacCtx.MacFlags.Bits.McpsReq = 0;
 80483ac:	bf1e      	ittt	ne
 80483ae:	462b      	movne	r3, r5
 80483b0:	f362 0300 	bfine	r3, r2, #0, #1
 80483b4:	f884 3485 	strbne.w	r3, [r4, #1157]	; 0x485
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80483b8:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 80483bc:	075e      	lsls	r6, r3, #29
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 80483be:	bf44      	itt	mi
 80483c0:	f36f 0382 	bfcmi	r3, #2, #1
 80483c4:	f884 3485 	strbmi.w	r3, [r4, #1157]	; 0x485
    MacCtx.AllowRequests = requestState;
 80483c8:	2301      	movs	r3, #1
 80483ca:	f884 3486 	strb.w	r3, [r4, #1158]	; 0x486
        if( reqEvents.Bits.McpsReq == 1 )
 80483ce:	b121      	cbz	r1, 80483da <LoRaMacProcess+0x22a>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 80483d0:	f8d4 3348 	ldr.w	r3, [r4, #840]	; 0x348
 80483d4:	483a      	ldr	r0, [pc, #232]	; (80484c0 <LoRaMacProcess+0x310>)
 80483d6:	681b      	ldr	r3, [r3, #0]
 80483d8:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 80483da:	076d      	lsls	r5, r5, #29
 80483dc:	d50b      	bpl.n	80483f6 <LoRaMacProcess+0x246>
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 80483de:	4839      	ldr	r0, [pc, #228]	; (80484c4 <LoRaMacProcess+0x314>)
 80483e0:	f000 fcb4 	bl	8048d4c <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 80483e4:	f000 fcde 	bl	8048da4 <LoRaMacConfirmQueueGetCnt>
 80483e8:	b128      	cbz	r0, 80483f6 <LoRaMacProcess+0x246>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 80483ea:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 80483ee:	f043 0304 	orr.w	r3, r3, #4
 80483f2:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
        LoRaMacClassBResumeBeaconing( );
 80483f6:	f000 fb46 	bl	8048a86 <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 80483fa:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 80483fe:	f36f 1345 	bfc	r3, #5, #1
 8048402:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
    if( MacCtx.MacState == LORAMAC_IDLE )
 8048406:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 804840a:	b96b      	cbnz	r3, 8048428 <LoRaMacProcess+0x278>
        bool isStickyMacCommandPending = false;
 804840c:	a820      	add	r0, sp, #128	; 0x80
 804840e:	f800 3d30 	strb.w	r3, [r0, #-48]!
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 8048412:	f000 fbf5 	bl	8048c00 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 8048416:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 804841a:	b12b      	cbz	r3, 8048428 <LoRaMacProcess+0x278>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 804841c:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 8048420:	f043 0310 	orr.w	r3, r3, #16
 8048424:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
    MacCtx.AllowRequests = requestState;
 8048428:	2301      	movs	r3, #1
 804842a:	f884 3486 	strb.w	r3, [r4, #1158]	; 0x486
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 804842e:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 8048432:	0718      	lsls	r0, r3, #28
 8048434:	d508      	bpl.n	8048448 <LoRaMacProcess+0x298>
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8048436:	f36f 03c3 	bfc	r3, #3, #1
 804843a:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 804843e:	f8d4 3348 	ldr.w	r3, [r4, #840]	; 0x348
 8048442:	4821      	ldr	r0, [pc, #132]	; (80484c8 <LoRaMacProcess+0x318>)
 8048444:	68db      	ldr	r3, [r3, #12]
 8048446:	4798      	blx	r3
    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 8048448:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 804844c:	06d9      	lsls	r1, r3, #27
 804844e:	d510      	bpl.n	8048472 <LoRaMacProcess+0x2c2>
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 8048450:	2306      	movs	r3, #6
 8048452:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 8048456:	f8d4 3348 	ldr.w	r3, [r4, #840]	; 0x348
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 804845a:	2500      	movs	r5, #0
        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 804845c:	68db      	ldr	r3, [r3, #12]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 804845e:	f88d 5051 	strb.w	r5, [sp, #81]	; 0x51
        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 8048462:	a814      	add	r0, sp, #80	; 0x50
 8048464:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 8048466:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 804846a:	f365 1304 	bfi	r3, r5, #4, #1
 804846e:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8048472:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 8048476:	079a      	lsls	r2, r3, #30
 8048478:	d508      	bpl.n	804848c <LoRaMacProcess+0x2dc>
        MacCtx.MacFlags.Bits.McpsInd = 0;
 804847a:	f36f 0341 	bfc	r3, #1, #1
 804847e:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 8048482:	f8d4 3348 	ldr.w	r3, [r4, #840]	; 0x348
 8048486:	4811      	ldr	r0, [pc, #68]	; (80484cc <LoRaMacProcess+0x31c>)
 8048488:	685b      	ldr	r3, [r3, #4]
 804848a:	4798      	blx	r3
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 804848c:	f894 3484 	ldrb.w	r3, [r4, #1156]	; 0x484
 8048490:	2b02      	cmp	r3, #2
 8048492:	d101      	bne.n	8048498 <LoRaMacProcess+0x2e8>
        OpenContinuousRxCWindow( );
 8048494:	f7ff f9dc 	bl	8047850 <OpenContinuousRxCWindow>
}
 8048498:	b021      	add	sp, #132	; 0x84
 804849a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        txDone.Joined  = true;
 804849e:	2201      	movs	r2, #1
 80484a0:	e6d7      	b.n	8048252 <LoRaMacProcess+0xa2>
 80484a2:	bf00      	nop
 80484a4:	20008890 	.word	0x20008890
 80484a8:	0804e210 	.word	0x0804e210
 80484ac:	20008c14 	.word	0x20008c14
 80484b0:	20008c2c 	.word	0x20008c2c
 80484b4:	20008c8c 	.word	0x20008c8c
 80484b8:	2000bd14 	.word	0x2000bd14
 80484bc:	2000bd18 	.word	0x2000bd18
 80484c0:	20008cd0 	.word	0x20008cd0
 80484c4:	20008ce4 	.word	0x20008ce4
 80484c8:	20008cf8 	.word	0x20008cf8
 80484cc:	20008cb0 	.word	0x20008cb0
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 80484d0:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 80484d4:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80484d8:	2b01      	cmp	r3, #1
 80484da:	d10c      	bne.n	80484f6 <LoRaMacProcess+0x346>
        if( LoRaMacClassBIsPingExpected( ) == true )
 80484dc:	f000 facc 	bl	8048a78 <LoRaMacClassBIsPingExpected>
 80484e0:	4682      	mov	sl, r0
 80484e2:	b1c8      	cbz	r0, 8048518 <LoRaMacProcess+0x368>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80484e4:	4658      	mov	r0, fp
 80484e6:	f000 fabe 	bl	8048a66 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 80484ea:	4658      	mov	r0, fp
 80484ec:	f000 fabe 	bl	8048a6c <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 80484f0:	2304      	movs	r3, #4
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 80484f2:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
    macHdr.Value = payload[pktHeaderLen++];
 80484f6:	f899 a000 	ldrb.w	sl, [r9]
    switch( macHdr.Bits.MType )
 80484fa:	ea4f 135a 	mov.w	r3, sl, lsr #5
 80484fe:	3b01      	subs	r3, #1
 8048500:	2b06      	cmp	r3, #6
 8048502:	f200 81f9 	bhi.w	80488f8 <LoRaMacProcess+0x748>
 8048506:	e8df f013 	tbh	[pc, r3, lsl #1]
 804850a:	0013      	.short	0x0013
 804850c:	009401f7 	.word	0x009401f7
 8048510:	009101f7 	.word	0x009101f7
 8048514:	01e201f7 	.word	0x01e201f7
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8048518:	f000 fab0 	bl	8048a7c <LoRaMacClassBIsMulticastExpected>
 804851c:	2800      	cmp	r0, #0
 804851e:	d0ea      	beq.n	80484f6 <LoRaMacProcess+0x346>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8048520:	4650      	mov	r0, sl
 8048522:	f000 faa1 	bl	8048a68 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8048526:	4650      	mov	r0, sl
 8048528:	f000 faa1 	bl	8048a6e <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 804852c:	2305      	movs	r3, #5
 804852e:	e7e0      	b.n	80484f2 <LoRaMacProcess+0x342>
            macMsgJoinAccept.BufSize = size;
 8048530:	fa5f f888 	uxtb.w	r8, r8
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 8048534:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
            macMsgJoinAccept.BufSize = size;
 8048538:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 804853c:	f893 61d4 	ldrb.w	r6, [r3, #468]	; 0x1d4
            macMsgJoinAccept.Buffer = payload;
 8048540:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 8048544:	b11e      	cbz	r6, 804854e <LoRaMacProcess+0x39e>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8048546:	2301      	movs	r3, #1
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8048548:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
 804854c:	e10e      	b.n	804876c <LoRaMacProcess+0x5bc>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 804854e:	f7ff f891 	bl	8047674 <SecureElementGetJoinEui>
 8048552:	aa0a      	add	r2, sp, #40	; 0x28
 8048554:	4601      	mov	r1, r0
 8048556:	20ff      	movs	r0, #255	; 0xff
 8048558:	f000 ff08 	bl	804936c <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 804855c:	2800      	cmp	r0, #0
 804855e:	d15d      	bne.n	804861c <LoRaMacProcess+0x46c>
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8048560:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8048564:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8048568:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 804856c:	0412      	lsls	r2, r2, #16
 804856e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8048572:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8048576:	430a      	orrs	r2, r1
 8048578:	649a      	str	r2, [r3, #72]	; 0x48
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
 804857a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 804857c:	64da      	str	r2, [r3, #76]	; 0x4c
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 804857e:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8048582:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8048586:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 804858a:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 804858e:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8048592:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
                MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8048596:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 804859a:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
                if( MacCtx.NvmCtx->MacParams.ReceiveDelay1 == 0 )
 804859e:	b3da      	cbz	r2, 8048618 <LoRaMacProcess+0x468>
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 80485a0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
 80485a4:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 80485a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80485ac:	434a      	muls	r2, r1
 80485ae:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                MacCtx.NvmCtx->Version.Fields.Minor = 0;
 80485b2:	2600      	movs	r6, #0
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 80485b4:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
                applyCFList.Size = size - 17;
 80485b8:	f1a8 0811 	sub.w	r8, r8, #17
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 80485bc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                MacCtx.NvmCtx->Version.Fields.Minor = 0;
 80485c0:	f883 61d2 	strb.w	r6, [r3, #466]	; 0x1d2
                applyCFList.Size = size - 17;
 80485c4:	f88d 8024 	strb.w	r8, [sp, #36]	; 0x24
                applyCFList.Payload = macMsgJoinAccept.CFList;
 80485c8:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 80485cc:	7818      	ldrb	r0, [r3, #0]
                applyCFList.Payload = macMsgJoinAccept.CFList;
 80485ce:	9208      	str	r2, [sp, #32]
                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 80485d0:	a908      	add	r1, sp, #32
 80485d2:	f001 f8ea 	bl	80497aa <RegionApplyCFList>
                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;
 80485d6:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 80485da:	2202      	movs	r2, #2
 80485dc:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80485e0:	4630      	mov	r0, r6
 80485e2:	f000 fb9b 	bl	8048d1c <LoRaMacConfirmQueueIsCmdActive>
 80485e6:	b118      	cbz	r0, 80485f0 <LoRaMacProcess+0x440>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 80485e8:	4631      	mov	r1, r6
 80485ea:	4630      	mov	r0, r6
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 80485ec:	f000 fb4a 	bl	8048c84 <LoRaMacConfirmQueueSetStatus>
    if( MacCtx.NodeAckRequested == true )
 80485f0:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 80485f4:	2b00      	cmp	r3, #0
 80485f6:	f000 8185 	beq.w	8048904 <LoRaMacProcess+0x754>
        if( MacCtx.McpsConfirm.AckReceived == true )
 80485fa:	f894 3444 	ldrb.w	r3, [r4, #1092]	; 0x444
 80485fe:	b113      	cbz	r3, 8048606 <LoRaMacProcess+0x456>
            OnAckTimeoutTimerEvent( NULL );
 8048600:	2000      	movs	r0, #0
 8048602:	f7ff f88b 	bl	804771c <OnAckTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.MacDone = 1;
 8048606:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 804860a:	f043 0320 	orr.w	r3, r3, #32
 804860e:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
    UpdateRxSlotIdleState( );
 8048612:	f7ff f833 	bl	804767c <UpdateRxSlotIdleState>
 8048616:	e66f      	b.n	80482f8 <LoRaMacProcess+0x148>
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 8048618:	2201      	movs	r2, #1
 804861a:	e7c1      	b.n	80485a0 <LoRaMacProcess+0x3f0>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 804861c:	4630      	mov	r0, r6
 804861e:	f000 fb7d 	bl	8048d1c <LoRaMacConfirmQueueIsCmdActive>
 8048622:	2800      	cmp	r0, #0
 8048624:	d0e4      	beq.n	80485f0 <LoRaMacProcess+0x440>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8048626:	4631      	mov	r1, r6
 8048628:	2007      	movs	r0, #7
 804862a:	e7df      	b.n	80485ec <LoRaMacProcess+0x43c>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 804862c:	2301      	movs	r3, #1
 804862e:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8048632:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8048636:	f893 212d 	ldrb.w	r2, [r3, #301]	; 0x12d
 804863a:	f88d 2016 	strb.w	r2, [sp, #22]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 804863e:	f894 2424 	ldrb.w	r2, [r4, #1060]	; 0x424
 8048642:	f88d 2015 	strb.w	r2, [sp, #21]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8048646:	220d      	movs	r2, #13
 8048648:	f88d 2014 	strb.w	r2, [sp, #20]
            if( MacCtx.NvmCtx->RepeaterSupport == true )
 804864c:	f893 213f 	ldrb.w	r2, [r3, #319]	; 0x13f
 8048650:	b112      	cbz	r2, 8048658 <LoRaMacProcess+0x4a8>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8048652:	220e      	movs	r2, #14
 8048654:	f88d 2014 	strb.w	r2, [sp, #20]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8048658:	7818      	ldrb	r0, [r3, #0]
 804865a:	a905      	add	r1, sp, #20
 804865c:	f001 f88f 	bl	804977e <RegionGetPhyParam>
            if( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORA_MAC_FRMPAYLOAD_OVERHEAD ) ) > ( int16_t )phyParam.Value )
 8048660:	f1a8 030d 	sub.w	r3, r8, #13
 8048664:	b21b      	sxth	r3, r3
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8048666:	9006      	str	r0, [sp, #24]
            if( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORA_MAC_FRMPAYLOAD_OVERHEAD ) ) > ( int16_t )phyParam.Value )
 8048668:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 804866c:	b200      	sxth	r0, r0
 804866e:	4283      	cmp	r3, r0
 8048670:	f73f af69 	bgt.w	8048546 <LoRaMacProcess+0x396>
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8048674:	4ba7      	ldr	r3, [pc, #668]	; (8048914 <LoRaMacProcess+0x764>)
 8048676:	931d      	str	r3, [sp, #116]	; 0x74
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8048678:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 804867c:	23ff      	movs	r3, #255	; 0xff
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 804867e:	4658      	mov	r0, fp
            macMsgData.Buffer = payload;
 8048680:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
            macMsgData.BufSize = size;
 8048684:	f88d 8054 	strb.w	r8, [sp, #84]	; 0x54
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8048688:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 804868c:	f000 ff7c 	bl	8049588 <LoRaMacParserData>
 8048690:	2800      	cmp	r0, #0
 8048692:	f47f af58 	bne.w	8048546 <LoRaMacProcess+0x396>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8048696:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8048698:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 804869c:	a908      	add	r1, sp, #32
 804869e:	4658      	mov	r0, fp
 80486a0:	f7ff fd64 	bl	804816c <DetermineFrameType>
 80486a4:	2800      	cmp	r0, #0
 80486a6:	f47f af4e 	bne.w	8048546 <LoRaMacProcess+0x396>
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 80486aa:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 80486ae:	9916      	ldr	r1, [sp, #88]	; 0x58
            downLinkCounter = 0;
 80486b0:	9007      	str	r0, [sp, #28]
 80486b2:	461a      	mov	r2, r3
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 80486b4:	4681      	mov	r9, r0
 80486b6:	6d50      	ldr	r0, [r2, #84]	; 0x54
 80486b8:	9003      	str	r0, [sp, #12]
 80486ba:	4288      	cmp	r0, r1
 80486bc:	d114      	bne.n	80486e8 <LoRaMacProcess+0x538>
 80486be:	f892 0051 	ldrb.w	r0, [r2, #81]	; 0x51
 80486c2:	b188      	cbz	r0, 80486e8 <LoRaMacProcess+0x538>
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.GroupID;
 80486c4:	2028      	movs	r0, #40	; 0x28
 80486c6:	fb00 3009 	mla	r0, r0, r9, r3
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 80486ca:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.GroupID;
 80486cc:	f890 9052 	ldrb.w	r9, [r0, #82]	; 0x52
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 80486d0:	6812      	ldr	r2, [r2, #0]
 80486d2:	9207      	str	r2, [sp, #28]
                    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 80486d4:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
 80486d8:	2a02      	cmp	r2, #2
 80486da:	d102      	bne.n	80486e2 <LoRaMacProcess+0x532>
                        MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 80486dc:	2203      	movs	r2, #3
 80486de:	f884 2431 	strb.w	r2, [r4, #1073]	; 0x431
                    multicast = 1;
 80486e2:	f04f 0801 	mov.w	r8, #1
 80486e6:	e009      	b.n	80486fc <LoRaMacProcess+0x54c>
 80486e8:	f109 0901 	add.w	r9, r9, #1
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80486ec:	f1b9 0f04 	cmp.w	r9, #4
 80486f0:	f102 0228 	add.w	r2, r2, #40	; 0x28
 80486f4:	d1df      	bne.n	80486b6 <LoRaMacProcess+0x506>
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 80486f6:	9603      	str	r6, [sp, #12]
            multicast = 0;
 80486f8:	f04f 0800 	mov.w	r8, #0
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 80486fc:	2215      	movs	r2, #21
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80486fe:	a905      	add	r1, sp, #20
 8048700:	7818      	ldrb	r0, [r3, #0]
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 8048702:	f88d 2014 	strb.w	r2, [sp, #20]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8048706:	f001 f83a 	bl	804977e <RegionGetPhyParam>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 804870a:	f8d4 2488 	ldr.w	r2, [r4, #1160]	; 0x488
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804870e:	9006      	str	r0, [sp, #24]
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 8048710:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8048714:	f892 21d2 	ldrb.w	r2, [r2, #466]	; 0x1d2
 8048718:	b281      	uxth	r1, r0
    switch( addrID )
 804871a:	f1b9 0f04 	cmp.w	r9, #4
 804871e:	d840      	bhi.n	80487a2 <LoRaMacProcess+0x5f2>
 8048720:	e8df f009 	tbb	[pc, r9]
 8048724:	312f3303 	.word	0x312f3303
 8048728:	27          	.byte	0x27
 8048729:	00          	.byte	0x00
            *fCntID = MC_FCNT_DOWN_0;
 804872a:	2604      	movs	r6, #4
    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 804872c:	ab07      	add	r3, sp, #28
 804872e:	f8bd 205e 	ldrh.w	r2, [sp, #94]	; 0x5e
 8048732:	4630      	mov	r0, r6
 8048734:	f000 fc98 	bl	8049068 <LoRaMacCryptoGetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8048738:	b3a8      	cbz	r0, 80487a6 <LoRaMacProcess+0x5f6>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 804873a:	2807      	cmp	r0, #7
 804873c:	d12b      	bne.n	8048796 <LoRaMacProcess+0x5e6>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 804873e:	2308      	movs	r3, #8
 8048740:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
                    if( ( MacCtx.NvmCtx->Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( MacCtx.NvmCtx->LastRxMic == macMsgData.MIC ) )
 8048744:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8048748:	f893 21d2 	ldrb.w	r2, [r3, #466]	; 0x1d2
 804874c:	b95a      	cbnz	r2, 8048766 <LoRaMacProcess+0x5b6>
 804874e:	f00a 02e0 	and.w	r2, sl, #224	; 0xe0
 8048752:	2aa0      	cmp	r2, #160	; 0xa0
 8048754:	d107      	bne.n	8048766 <LoRaMacProcess+0x5b6>
 8048756:	f8d3 11d8 	ldr.w	r1, [r3, #472]	; 0x1d8
 804875a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 804875c:	4291      	cmp	r1, r2
 804875e:	d102      	bne.n	8048766 <LoRaMacProcess+0x5b6>
                        MacCtx.NvmCtx->SrvAckRequested = true;
 8048760:	2201      	movs	r2, #1
 8048762:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8048766:	9b07      	ldr	r3, [sp, #28]
 8048768:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
                PrepareRxDoneAbort( );
 804876c:	f7fe fffa 	bl	8047764 <PrepareRxDoneAbort>
 8048770:	e5c2      	b.n	80482f8 <LoRaMacProcess+0x148>
            if( lrWanVersion.Fields.Minor == 1 )
 8048772:	2a01      	cmp	r2, #1
 8048774:	d10b      	bne.n	804878e <LoRaMacProcess+0x5de>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8048776:	b163      	cbz	r3, 8048792 <LoRaMacProcess+0x5e2>
                    *fCntID = A_FCNT_DOWN;
 8048778:	2b03      	cmp	r3, #3
 804877a:	bf14      	ite	ne
 804877c:	2601      	movne	r6, #1
 804877e:	2602      	moveq	r6, #2
 8048780:	e7d4      	b.n	804872c <LoRaMacProcess+0x57c>
            *fCntID = MC_FCNT_DOWN_2;
 8048782:	2606      	movs	r6, #6
 8048784:	e7d2      	b.n	804872c <LoRaMacProcess+0x57c>
            *fCntID = MC_FCNT_DOWN_3;
 8048786:	2607      	movs	r6, #7
 8048788:	e7d0      	b.n	804872c <LoRaMacProcess+0x57c>
            *fCntID = MC_FCNT_DOWN_1;
 804878a:	2605      	movs	r6, #5
 804878c:	e7ce      	b.n	804872c <LoRaMacProcess+0x57c>
                *fCntID = FCNT_DOWN;
 804878e:	2603      	movs	r6, #3
 8048790:	e7cc      	b.n	804872c <LoRaMacProcess+0x57c>
                    *fCntID = A_FCNT_DOWN;
 8048792:	2602      	movs	r6, #2
 8048794:	e7ca      	b.n	804872c <LoRaMacProcess+0x57c>
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 8048796:	2808      	cmp	r0, #8
 8048798:	d103      	bne.n	80487a2 <LoRaMacProcess+0x5f2>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 804879a:	230a      	movs	r3, #10
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 804879c:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
 80487a0:	e7e1      	b.n	8048766 <LoRaMacProcess+0x5b6>
 80487a2:	2301      	movs	r3, #1
 80487a4:	e7fa      	b.n	804879c <LoRaMacProcess+0x5ec>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 80487a6:	f8cd b000 	str.w	fp, [sp]
 80487aa:	9b07      	ldr	r3, [sp, #28]
 80487ac:	9903      	ldr	r1, [sp, #12]
 80487ae:	4632      	mov	r2, r6
 80487b0:	4648      	mov	r0, r9
 80487b2:	f000 fd27 	bl	8049204 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80487b6:	b120      	cbz	r0, 80487c2 <LoRaMacProcess+0x612>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 80487b8:	2802      	cmp	r0, #2
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 80487ba:	bf0c      	ite	eq
 80487bc:	230b      	moveq	r3, #11
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 80487be:	230c      	movne	r3, #12
 80487c0:	e6c2      	b.n	8048548 <LoRaMacProcess+0x398>
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 80487c2:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 80487c6:	f894 1431 	ldrb.w	r1, [r4, #1073]	; 0x431
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80487ca:	f884 0421 	strb.w	r0, [r4, #1057]	; 0x421
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 80487ce:	f3c3 1200 	ubfx	r2, r3, #4, #1
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 80487d2:	2901      	cmp	r1, #1
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80487d4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80487d8:	f884 3432 	strb.w	r3, [r4, #1074]	; 0x432
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80487dc:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
                MacCtx.NvmCtx->AdrAckCounter = 0;
 80487e0:	bf98      	it	ls
 80487e2:	f8d4 3488 	ldrls.w	r3, [r4, #1160]	; 0x488
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 80487e6:	f884 2425 	strb.w	r2, [r4, #1061]	; 0x425
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80487ea:	9a07      	ldr	r2, [sp, #28]
            MacCtx.McpsIndication.Multicast = multicast;
 80487ec:	f884 8422 	strb.w	r8, [r4, #1058]	; 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 80487f0:	f8c4 0428 	str.w	r0, [r4, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 80487f4:	f884 042c 	strb.w	r0, [r4, #1068]	; 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80487f8:	f8c4 2434 	str.w	r2, [r4, #1076]	; 0x434
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80487fc:	f884 0441 	strb.w	r0, [r4, #1089]	; 0x441
                MacCtx.NvmCtx->AdrAckCounter = 0;
 8048800:	bf98      	it	ls
 8048802:	f8c3 00f4 	strls.w	r0, [r3, #244]	; 0xf4
            if( multicast == 1 )
 8048806:	f1b8 0f00 	cmp.w	r8, #0
 804880a:	d016      	beq.n	804883a <LoRaMacProcess+0x68a>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 804880c:	2302      	movs	r3, #2
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 804880e:	2901      	cmp	r1, #1
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8048810:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8048814:	f894 2440 	ldrb.w	r2, [r4, #1088]	; 0x440
 8048818:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 804881c:	d805      	bhi.n	804882a <LoRaMacProcess+0x67a>
        if( request == MCPS_CONFIRMED )
 804881e:	2a01      	cmp	r2, #1
 8048820:	d101      	bne.n	8048826 <LoRaMacProcess+0x676>
            if( fCtrl.Bits.Ack == 1 )
 8048822:	069b      	lsls	r3, r3, #26
 8048824:	d501      	bpl.n	804882a <LoRaMacProcess+0x67a>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8048826:	f000 f9c5 	bl	8048bb4 <LoRaMacCommandsRemoveStickyAnsCmds>
            switch( fType )
 804882a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 804882e:	2b03      	cmp	r3, #3
 8048830:	d847      	bhi.n	80488c2 <LoRaMacProcess+0x712>
 8048832:	e8df f003 	tbb	[pc, r3]
 8048836:	2e17      	.short	0x2e17
 8048838:	1f41      	.short	0x1f41
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 804883a:	f00a 03e0 	and.w	r3, sl, #224	; 0xe0
 804883e:	2ba0      	cmp	r3, #160	; 0xa0
 8048840:	f8d4 2488 	ldr.w	r2, [r4, #1160]	; 0x488
 8048844:	d10a      	bne.n	804885c <LoRaMacProcess+0x6ac>
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 8048846:	f892 01d2 	ldrb.w	r0, [r2, #466]	; 0x1d2
                    MacCtx.NvmCtx->SrvAckRequested = true;
 804884a:	2301      	movs	r3, #1
 804884c:	f882 31c0 	strb.w	r3, [r2, #448]	; 0x1c0
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 8048850:	2800      	cmp	r0, #0
 8048852:	d1dc      	bne.n	804880e <LoRaMacProcess+0x65e>
                        MacCtx.NvmCtx->LastRxMic = macMsgData.MIC;
 8048854:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8048856:	f8c2 01d8 	str.w	r0, [r2, #472]	; 0x1d8
 804885a:	e7d8      	b.n	804880e <LoRaMacProcess+0x65e>
                    MacCtx.NvmCtx->SrvAckRequested = false;
 804885c:	2300      	movs	r3, #0
 804885e:	f882 31c0 	strb.w	r3, [r2, #448]	; 0x1c0
 8048862:	e7d4      	b.n	804880e <LoRaMacProcess+0x65e>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 8048864:	f89d 105c 	ldrb.w	r1, [sp, #92]	; 0x5c
 8048868:	463a      	mov	r2, r7
 804886a:	f001 010f 	and.w	r1, r1, #15
 804886e:	a818      	add	r0, sp, #96	; 0x60
 8048870:	f7ff f80e 	bl	8047890 <ProcessMacCommands.isra.1.constprop.7>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8048874:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 8048878:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 804887c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 804887e:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8048882:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 8048886:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 804888a:	2301      	movs	r3, #1
 804888c:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
 8048890:	e00b      	b.n	80488aa <LoRaMacProcess+0x6fa>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 8048892:	f89d 105c 	ldrb.w	r1, [sp, #92]	; 0x5c
 8048896:	463a      	mov	r2, r7
 8048898:	f001 010f 	and.w	r1, r1, #15
 804889c:	a818      	add	r0, sp, #96	; 0x60
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 804889e:	f7fe fff7 	bl	8047890 <ProcessMacCommands.isra.1.constprop.7>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80488a2:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 80488a6:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
            MacCtx.MacFlags.Bits.McpsInd = 1;
 80488aa:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 80488ae:	f043 0302 	orr.w	r3, r3, #2
 80488b2:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
 80488b6:	e69b      	b.n	80485f0 <LoRaMacProcess+0x440>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 80488b8:	463a      	mov	r2, r7
 80488ba:	f89d 1078 	ldrb.w	r1, [sp, #120]	; 0x78
 80488be:	981d      	ldr	r0, [sp, #116]	; 0x74
 80488c0:	e7ed      	b.n	804889e <LoRaMacProcess+0x6ee>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80488c2:	2301      	movs	r3, #1
 80488c4:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
                    PrepareRxDoneAbort( );
 80488c8:	f7fe ff4c 	bl	8047764 <PrepareRxDoneAbort>
 80488cc:	e7ed      	b.n	80488aa <LoRaMacProcess+0x6fa>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 80488ce:	4e11      	ldr	r6, [pc, #68]	; (8048914 <LoRaMacProcess+0x764>)
 80488d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80488d4:	fa1f f288 	uxth.w	r2, r8
 80488d8:	f109 0101 	add.w	r1, r9, #1
 80488dc:	4630      	mov	r0, r6
 80488de:	f002 f990 	bl	804ac02 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 80488e2:	2303      	movs	r3, #3
 80488e4:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80488e8:	2300      	movs	r3, #0
 80488ea:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 80488ee:	f8c4 6428 	str.w	r6, [r4, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 80488f2:	f884 842c 	strb.w	r8, [r4, #1068]	; 0x42c
 80488f6:	e7d8      	b.n	80488aa <LoRaMacProcess+0x6fa>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80488f8:	2301      	movs	r3, #1
 80488fa:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
            PrepareRxDoneAbort( );
 80488fe:	f7fe ff31 	bl	8047764 <PrepareRxDoneAbort>
 8048902:	e675      	b.n	80485f0 <LoRaMacProcess+0x440>
        if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 8048904:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8048908:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 804890c:	2b02      	cmp	r3, #2
 804890e:	f47f ae7a 	bne.w	8048606 <LoRaMacProcess+0x456>
 8048912:	e675      	b.n	8048600 <LoRaMacProcess+0x450>
 8048914:	20008acc 	.word	0x20008acc
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8048918:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 804891c:	075d      	lsls	r5, r3, #29
 804891e:	d50f      	bpl.n	8048940 <LoRaMacProcess+0x790>
        if( ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 8048920:	2000      	movs	r0, #0
 8048922:	f000 f9fb 	bl	8048d1c <LoRaMacConfirmQueueIsCmdActive>
 8048926:	b390      	cbz	r0, 804898e <LoRaMacProcess+0x7de>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8048928:	2000      	movs	r0, #0
 804892a:	f000 f9c5 	bl	8048cb8 <LoRaMacConfirmQueueGetStatus>
 804892e:	b908      	cbnz	r0, 8048934 <LoRaMacProcess+0x784>
                MacCtx.ChannelsNbTransCounter = 0;
 8048930:	f884 0414 	strb.w	r0, [r4, #1044]	; 0x414
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8048934:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 8048938:	f023 0302 	bic.w	r3, r3, #2
 804893c:	f8c4 3344 	str.w	r3, [r4, #836]	; 0x344
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8048940:	f894 1485 	ldrb.w	r1, [r4, #1157]	; 0x485
 8048944:	07c8      	lsls	r0, r1, #31
 8048946:	f57f ad2a 	bpl.w	804839e <LoRaMacProcess+0x1ee>
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 804894a:	f894 3440 	ldrb.w	r3, [r4, #1088]	; 0x440
 804894e:	b10b      	cbz	r3, 8048954 <LoRaMacProcess+0x7a4>
 8048950:	2b03      	cmp	r3, #3
 8048952:	d127      	bne.n	80489a4 <LoRaMacProcess+0x7f4>
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 8048954:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    if( MacCtx.ChannelsNbTransCounter >=
 8048958:	f894 0414 	ldrb.w	r0, [r4, #1044]	; 0x414
 804895c:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 8048960:	4290      	cmp	r0, r2
 8048962:	d208      	bcs.n	8048976 <LoRaMacProcess+0x7c6>
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8048964:	078a      	lsls	r2, r1, #30
 8048966:	d552      	bpl.n	8048a0e <LoRaMacProcess+0x85e>
        if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 8048968:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 804896c:	b11b      	cbz	r3, 8048976 <LoRaMacProcess+0x7c6>
            if( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 )
 804896e:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
 8048972:	2b00      	cmp	r3, #0
 8048974:	d14b      	bne.n	8048a0e <LoRaMacProcess+0x85e>
            TimerStop( &MacCtx.TxDelayedTimer );
 8048976:	4839      	ldr	r0, [pc, #228]	; (8048a5c <LoRaMacProcess+0x8ac>)
 8048978:	f002 f85a 	bl	804aa30 <TimerStop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 804897c:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 8048980:	f023 0320 	bic.w	r3, r3, #32
 8048984:	f8c4 3344 	str.w	r3, [r4, #836]	; 0x344
            StopRetransmission( );
 8048988:	f7fe fe86 	bl	8047698 <StopRetransmission>
 804898c:	e507      	b.n	804839e <LoRaMacProcess+0x1ee>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 804898e:	2004      	movs	r0, #4
 8048990:	f000 f9c4 	bl	8048d1c <LoRaMacConfirmQueueIsCmdActive>
 8048994:	2800      	cmp	r0, #0
 8048996:	d1cd      	bne.n	8048934 <LoRaMacProcess+0x784>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 8048998:	2005      	movs	r0, #5
 804899a:	f000 f9bf 	bl	8048d1c <LoRaMacConfirmQueueIsCmdActive>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 804899e:	2800      	cmp	r0, #0
 80489a0:	d1c8      	bne.n	8048934 <LoRaMacProcess+0x784>
 80489a2:	e7cd      	b.n	8048940 <LoRaMacProcess+0x790>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 80489a4:	2b01      	cmp	r3, #1
 80489a6:	d132      	bne.n	8048a0e <LoRaMacProcess+0x85e>
            if( MacCtx.AckTimeoutRetry == true )
 80489a8:	f894 2417 	ldrb.w	r2, [r4, #1047]	; 0x417
 80489ac:	2a00      	cmp	r2, #0
 80489ae:	f43f acf6 	beq.w	804839e <LoRaMacProcess+0x1ee>
    if( MacCtx.AckTimeoutRetriesCounter >=
 80489b2:	f894 3416 	ldrb.w	r3, [r4, #1046]	; 0x416
        MacCtx.AckTimeoutRetries )
 80489b6:	f894 5415 	ldrb.w	r5, [r4, #1045]	; 0x415
    if( MacCtx.AckTimeoutRetriesCounter >=
 80489ba:	42ab      	cmp	r3, r5
 80489bc:	d204      	bcs.n	80489c8 <LoRaMacProcess+0x818>
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80489be:	f011 0202 	ands.w	r2, r1, #2
        if( MacCtx.McpsConfirm.AckReceived == true )
 80489c2:	bf18      	it	ne
 80489c4:	f894 2444 	ldrbne.w	r2, [r4, #1092]	; 0x444
                if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 80489c8:	f8d4 0488 	ldr.w	r0, [r4, #1160]	; 0x488
 80489cc:	f890 11d2 	ldrb.w	r1, [r0, #466]	; 0x1d2
 80489d0:	2900      	cmp	r1, #0
 80489d2:	d13f      	bne.n	8048a54 <LoRaMacProcess+0x8a4>
                    if( stopRetransmission == false )
 80489d4:	bb3a      	cbnz	r2, 8048a26 <LoRaMacProcess+0x876>
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 80489d6:	42ab      	cmp	r3, r5
 80489d8:	d219      	bcs.n	8048a0e <LoRaMacProcess+0x85e>
        MacCtx.AckTimeoutRetriesCounter++;
 80489da:	3301      	adds	r3, #1
 80489dc:	b2db      	uxtb	r3, r3
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 80489de:	07df      	lsls	r7, r3, #31
        MacCtx.AckTimeoutRetriesCounter++;
 80489e0:	f884 3416 	strb.w	r3, [r4, #1046]	; 0x416
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 80489e4:	d513      	bpl.n	8048a0e <LoRaMacProcess+0x85e>
            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80489e6:	2322      	movs	r3, #34	; 0x22
 80489e8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80489ec:	f890 312c 	ldrb.w	r3, [r0, #300]	; 0x12c
 80489f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
            getPhy.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80489f4:	f890 30f9 	ldrb.w	r3, [r0, #249]	; 0xf9
 80489f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80489fc:	a90a      	add	r1, sp, #40	; 0x28
 80489fe:	7800      	ldrb	r0, [r0, #0]
 8048a00:	f000 febd 	bl	804977e <RegionGetPhyParam>
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 8048a04:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8048a08:	9014      	str	r0, [sp, #80]	; 0x50
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 8048a0a:	f883 00f9 	strb.w	r0, [r3, #249]	; 0xf9
            MacCtx.MacFlags.Bits.MacDone = 0;
 8048a0e:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
            MacCtx.AckTimeoutRetry = false;
 8048a12:	2000      	movs	r0, #0
            MacCtx.MacFlags.Bits.MacDone = 0;
 8048a14:	f36f 1345 	bfc	r3, #5, #1
 8048a18:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
            MacCtx.AckTimeoutRetry = false;
 8048a1c:	f884 0417 	strb.w	r0, [r4, #1047]	; 0x417
            OnTxDelayedTimerEvent( NULL );
 8048a20:	f7ff fb7c 	bl	804811c <OnTxDelayedTimerEvent>
 8048a24:	e4bb      	b.n	804839e <LoRaMacProcess+0x1ee>
    if( MacCtx.McpsConfirm.AckReceived == false )
 8048a26:	f894 5444 	ldrb.w	r5, [r4, #1092]	; 0x444
 8048a2a:	b975      	cbnz	r5, 8048a4a <LoRaMacProcess+0x89a>
        params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 8048a2c:	2301      	movs	r3, #1
 8048a2e:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
        params.NvmCtx = Contexts.RegionNvmCtx;
 8048a32:	4b0b      	ldr	r3, [pc, #44]	; (8048a60 <LoRaMacProcess+0x8b0>)
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8048a34:	7800      	ldrb	r0, [r0, #0]
        params.NvmCtx = Contexts.RegionNvmCtx;
 8048a36:	689b      	ldr	r3, [r3, #8]
 8048a38:	a920      	add	r1, sp, #128	; 0x80
 8048a3a:	f841 3d30 	str.w	r3, [r1, #-48]!
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8048a3e:	f000 feae 	bl	804979e <RegionInitDefaults>
        MacCtx.NodeAckRequested = false;
 8048a42:	f884 5418 	strb.w	r5, [r4, #1048]	; 0x418
        MacCtx.McpsConfirm.AckReceived = false;
 8048a46:	f884 5444 	strb.w	r5, [r4, #1092]	; 0x444
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8048a4a:	f894 3416 	ldrb.w	r3, [r4, #1046]	; 0x416
 8048a4e:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
 8048a52:	e790      	b.n	8048976 <LoRaMacProcess+0x7c6>
        if( stopRetransmission == true )
 8048a54:	2a00      	cmp	r2, #0
 8048a56:	d0da      	beq.n	8048a0e <LoRaMacProcess+0x85e>
 8048a58:	e78d      	b.n	8048976 <LoRaMacProcess+0x7c6>
 8048a5a:	bf00      	nop
 8048a5c:	20008bfc 	.word	0x20008bfc
 8048a60:	2000bd28 	.word	0x2000bd28

08048a64 <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8048a64:	4770      	bx	lr

08048a66 <LoRaMacClassBSetPingSlotState>:
 8048a66:	4770      	bx	lr

08048a68 <LoRaMacClassBSetMulticastSlotState>:
 8048a68:	4770      	bx	lr

08048a6a <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8048a6a:	4770      	bx	lr

08048a6c <LoRaMacClassBPingSlotTimerEvent>:
 8048a6c:	4770      	bx	lr

08048a6e <LoRaMacClassBMulticastSlotTimerEvent>:
 8048a6e:	4770      	bx	lr

08048a70 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 8048a70:	2000      	movs	r0, #0
 8048a72:	4770      	bx	lr

08048a74 <LoRaMacClassBIsBeaconExpected>:
 8048a74:	2000      	movs	r0, #0
 8048a76:	4770      	bx	lr

08048a78 <LoRaMacClassBIsPingExpected>:
 8048a78:	2000      	movs	r0, #0
 8048a7a:	4770      	bx	lr

08048a7c <LoRaMacClassBIsMulticastExpected>:
 8048a7c:	2000      	movs	r0, #0
 8048a7e:	4770      	bx	lr

08048a80 <LoRaMacClassBIsBeaconModeActive>:
 8048a80:	2000      	movs	r0, #0
 8048a82:	4770      	bx	lr

08048a84 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8048a84:	4770      	bx	lr

08048a86 <LoRaMacClassBResumeBeaconing>:
 8048a86:	4770      	bx	lr

08048a88 <LoRaMacClassBPingSlotInfoAns>:
 8048a88:	4770      	bx	lr

08048a8a <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
 8048a8a:	2000      	movs	r0, #0
 8048a8c:	4770      	bx	lr

08048a8e <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8048a8e:	4770      	bx	lr

08048a90 <LoRaMacClassBDeviceTimeAns>:
 8048a90:	4770      	bx	lr

08048a92 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 8048a92:	2000      	movs	r0, #0
 8048a94:	4770      	bx	lr

08048a96 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
 8048a96:	2000      	movs	r0, #0
 8048a98:	4770      	bx	lr

08048a9a <LoRaMacClassBStopRxSlots>:
 8048a9a:	4770      	bx	lr

08048a9c <LoRaMacClassBProcess>:
 8048a9c:	4770      	bx	lr
	...

08048aa0 <NvmCtxCallback>:
/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxCallback( void )
{
    if( CommandsNvmCtxChanged != NULL )
 8048aa0:	4b02      	ldr	r3, [pc, #8]	; (8048aac <NvmCtxCallback+0xc>)
 8048aa2:	681b      	ldr	r3, [r3, #0]
 8048aa4:	b103      	cbz	r3, 8048aa8 <NvmCtxCallback+0x8>
    {
        CommandsNvmCtxChanged( );
 8048aa6:	4718      	bx	r3
    }
}
 8048aa8:	4770      	bx	lr
 8048aaa:	bf00      	nop
 8048aac:	20008ef8 	.word	0x20008ef8

08048ab0 <LoRaMacCommandsAddCmd>:
    *commandsNvmCtxSize = sizeof( NvmCtx );
    return &NvmCtx;
}

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8048ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8048ab4:	4680      	mov	r8, r0
 8048ab6:	4617      	mov	r7, r2
    if( payload == 0 )
 8048ab8:	2900      	cmp	r1, #0
 8048aba:	d03f      	beq.n	8048b3c <LoRaMacCommandsAddCmd+0x8c>
 8048abc:	4824      	ldr	r0, [pc, #144]	; (8048b50 <LoRaMacCommandsAddCmd+0xa0>)
 8048abe:	2300      	movs	r3, #0
 8048ac0:	461a      	mov	r2, r3
 8048ac2:	1e46      	subs	r6, r0, #1
 8048ac4:	f100 0c0f 	add.w	ip, r0, #15
 8048ac8:	18c5      	adds	r5, r0, r3
 8048aca:	18f4      	adds	r4, r6, r3
 8048acc:	eb0c 0e03 	add.w	lr, ip, r3
        if( mem[size] != 0x00 )
 8048ad0:	f814 9f01 	ldrb.w	r9, [r4, #1]!
 8048ad4:	f1b9 0f00 	cmp.w	r9, #0
 8048ad8:	d132      	bne.n	8048b40 <LoRaMacCommandsAddCmd+0x90>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8048ada:	4574      	cmp	r4, lr
 8048adc:	d1f8      	bne.n	8048ad0 <LoRaMacCommandsAddCmd+0x20>
    if( list->First == 0 )
 8048ade:	4c1d      	ldr	r4, [pc, #116]	; (8048b54 <LoRaMacCommandsAddCmd+0xa4>)
 8048ae0:	6860      	ldr	r0, [r4, #4]
 8048ae2:	b900      	cbnz	r0, 8048ae6 <LoRaMacCommandsAddCmd+0x36>
        list->First = element;
 8048ae4:	6065      	str	r5, [r4, #4]
    if( list->Last )
 8048ae6:	68a0      	ldr	r0, [r4, #8]
 8048ae8:	b100      	cbz	r0, 8048aec <LoRaMacCommandsAddCmd+0x3c>
        list->Last->Next = element;
 8048aea:	6005      	str	r5, [r0, #0]
    element->Next = 0;
 8048aec:	eb04 1002 	add.w	r0, r4, r2, lsl #4
    list->Last = element;
 8048af0:	60a5      	str	r5, [r4, #8]
    element->Next = 0;
 8048af2:	2600      	movs	r6, #0
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
    newCmd->PayloadSize = payloadSize;
 8048af4:	1c55      	adds	r5, r2, #1
    element->Next = 0;
 8048af6:	60c6      	str	r6, [r0, #12]
    newCmd->CID = cid;
 8048af8:	f880 8010 	strb.w	r8, [r0, #16]
    newCmd->PayloadSize = payloadSize;
 8048afc:	eb04 1205 	add.w	r2, r4, r5, lsl #4
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8048b00:	4815      	ldr	r0, [pc, #84]	; (8048b58 <LoRaMacCommandsAddCmd+0xa8>)
    newCmd->PayloadSize = payloadSize;
 8048b02:	6057      	str	r7, [r2, #4]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8048b04:	4418      	add	r0, r3
 8048b06:	b2ba      	uxth	r2, r7
 8048b08:	f002 f87b 	bl	804ac02 <memcpy1>
 8048b0c:	f1b8 0f0a 	cmp.w	r8, #10
 8048b10:	d806      	bhi.n	8048b20 <LoRaMacCommandsAddCmd+0x70>
 8048b12:	2301      	movs	r3, #1
 8048b14:	fa03 f808 	lsl.w	r8, r3, r8
 8048b18:	f418 6fa4 	tst.w	r8, #1312	; 0x520
 8048b1c:	bf18      	it	ne
 8048b1e:	461e      	movne	r6, r3
    newCmd->IsSticky = IsSticky( cid );
 8048b20:	eb04 1205 	add.w	r2, r4, r5, lsl #4
 8048b24:	7216      	strb	r6, [r2, #8]

    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8048b26:	f8d4 20fc 	ldr.w	r2, [r4, #252]	; 0xfc
 8048b2a:	3201      	adds	r2, #1
 8048b2c:	443a      	add	r2, r7
 8048b2e:	f8c4 20fc 	str.w	r2, [r4, #252]	; 0xfc

    NvmCtxCallback( );
 8048b32:	f7ff ffb5 	bl	8048aa0 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 8048b36:	2000      	movs	r0, #0
}
 8048b38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 8048b3c:	2001      	movs	r0, #1
 8048b3e:	e7fb      	b.n	8048b38 <LoRaMacCommandsAddCmd+0x88>
 8048b40:	3201      	adds	r2, #1
        if( itr == NUM_OF_MAC_COMMANDS )
 8048b42:	2a0f      	cmp	r2, #15
 8048b44:	f103 0310 	add.w	r3, r3, #16
 8048b48:	d1be      	bne.n	8048ac8 <LoRaMacCommandsAddCmd+0x18>
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8048b4a:	2002      	movs	r0, #2
 8048b4c:	e7f4      	b.n	8048b38 <LoRaMacCommandsAddCmd+0x88>
 8048b4e:	bf00      	nop
 8048b50:	20008f04 	.word	0x20008f04
 8048b54:	20008ef8 	.word	0x20008ef8
 8048b58:	20008f09 	.word	0x20008f09

08048b5c <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8048b5c:	b510      	push	{r4, lr}
    if( macCmd == NULL )
 8048b5e:	b320      	cbz	r0, 8048baa <LoRaMacCommandsRemoveCmd+0x4e>
    curElement = list->First;
 8048b60:	4a13      	ldr	r2, [pc, #76]	; (8048bb0 <LoRaMacCommandsRemoveCmd+0x54>)
 8048b62:	6853      	ldr	r3, [r2, #4]
    if( element != curElement )
 8048b64:	4298      	cmp	r0, r3
 8048b66:	d104      	bne.n	8048b72 <LoRaMacCommandsRemoveCmd+0x16>
        list->First = element->Next;
 8048b68:	6803      	ldr	r3, [r0, #0]
 8048b6a:	6053      	str	r3, [r2, #4]
        curElement = NULL;
 8048b6c:	2300      	movs	r3, #0
 8048b6e:	e004      	b.n	8048b7a <LoRaMacCommandsRemoveCmd+0x1e>
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8048b70:	460b      	mov	r3, r1
 8048b72:	b113      	cbz	r3, 8048b7a <LoRaMacCommandsRemoveCmd+0x1e>
 8048b74:	6819      	ldr	r1, [r3, #0]
 8048b76:	4288      	cmp	r0, r1
 8048b78:	d1fa      	bne.n	8048b70 <LoRaMacCommandsRemoveCmd+0x14>
    if( list->Last == element )
 8048b7a:	6891      	ldr	r1, [r2, #8]
 8048b7c:	4288      	cmp	r0, r1
        list->Last = PrevElement;
 8048b7e:	bf08      	it	eq
 8048b80:	6093      	streq	r3, [r2, #8]
    if( PrevElement != NULL )
 8048b82:	b10b      	cbz	r3, 8048b88 <LoRaMacCommandsRemoveCmd+0x2c>
        PrevElement->Next = element->Next;
 8048b84:	6801      	ldr	r1, [r0, #0]
 8048b86:	6019      	str	r1, [r3, #0]
    if( LinkedListRemove( &NvmCtx.MacCommandList, macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8048b88:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 8048b8c:	6881      	ldr	r1, [r0, #8]
 8048b8e:	3b01      	subs	r3, #1
 8048b90:	1a5b      	subs	r3, r3, r1
    element->Next = NULL;
 8048b92:	2400      	movs	r4, #0
 8048b94:	6004      	str	r4, [r0, #0]
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8048b96:	4621      	mov	r1, r4
    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8048b98:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8048b9c:	2210      	movs	r2, #16
 8048b9e:	f002 f844 	bl	804ac2a <memset1>
    if( FreeMacCommandSlot( macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    NvmCtxCallback( );
 8048ba2:	f7ff ff7d 	bl	8048aa0 <NvmCtxCallback>
 8048ba6:	4620      	mov	r0, r4

    return LORAMAC_COMMANDS_SUCCESS;
}
 8048ba8:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 8048baa:	2001      	movs	r0, #1
 8048bac:	e7fc      	b.n	8048ba8 <LoRaMacCommandsRemoveCmd+0x4c>
 8048bae:	bf00      	nop
 8048bb0:	20008ef8 	.word	0x20008ef8

08048bb4 <LoRaMacCommandsRemoveStickyAnsCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 8048bb4:	4b0b      	ldr	r3, [pc, #44]	; (8048be4 <LoRaMacCommandsRemoveStickyAnsCmds+0x30>)
{
 8048bb6:	b570      	push	{r4, r5, r6, lr}
    curElement = NvmCtx.MacCommandList.First;
 8048bb8:	685c      	ldr	r4, [r3, #4]
 8048bba:	2501      	movs	r5, #1

    // Loop through all elements
    while( curElement != NULL )
 8048bbc:	b91c      	cbnz	r4, 8048bc6 <LoRaMacCommandsRemoveStickyAnsCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
        }
        curElement = nexElement;
    }

    NvmCtxCallback( );
 8048bbe:	f7ff ff6f 	bl	8048aa0 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 8048bc2:	4620      	mov	r0, r4
 8048bc4:	bd70      	pop	{r4, r5, r6, pc}
        if( IsSticky( curElement->CID ) == true )
 8048bc6:	7923      	ldrb	r3, [r4, #4]
        nexElement = curElement->Next;
 8048bc8:	6826      	ldr	r6, [r4, #0]
 8048bca:	2b0a      	cmp	r3, #10
 8048bcc:	d807      	bhi.n	8048bde <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
 8048bce:	fa05 f303 	lsl.w	r3, r5, r3
 8048bd2:	f413 6fa4 	tst.w	r3, #1312	; 0x520
 8048bd6:	d002      	beq.n	8048bde <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
            LoRaMacCommandsRemoveCmd( curElement );
 8048bd8:	4620      	mov	r0, r4
 8048bda:	f7ff ffbf 	bl	8048b5c <LoRaMacCommandsRemoveCmd>
{
 8048bde:	4634      	mov	r4, r6
 8048be0:	e7ec      	b.n	8048bbc <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
 8048be2:	bf00      	nop
 8048be4:	20008ef8 	.word	0x20008ef8

08048be8 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 8048be8:	b128      	cbz	r0, 8048bf6 <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = NvmCtx.SerializedCmdsSize;
 8048bea:	4b04      	ldr	r3, [pc, #16]	; (8048bfc <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 8048bec:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8048bf0:	6003      	str	r3, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8048bf2:	2000      	movs	r0, #0
 8048bf4:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 8048bf6:	2001      	movs	r0, #1
}
 8048bf8:	4770      	bx	lr
 8048bfa:	bf00      	nop
 8048bfc:	20008ef8 	.word	0x20008ef8

08048c00 <LoRaMacCommandsStickyCmdsPending>:
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
    if( cmdsPending == NULL )
 8048c00:	b160      	cbz	r0, 8048c1c <LoRaMacCommandsStickyCmdsPending+0x1c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 8048c02:	4b07      	ldr	r3, [pc, #28]	; (8048c20 <LoRaMacCommandsStickyCmdsPending+0x20>)

    *cmdsPending = false;
 8048c04:	2200      	movs	r2, #0
    curElement = NvmCtx.MacCommandList.First;
 8048c06:	685b      	ldr	r3, [r3, #4]
    *cmdsPending = false;
 8048c08:	7002      	strb	r2, [r0, #0]

    // Loop through all elements
    while( curElement != NULL )
 8048c0a:	b11b      	cbz	r3, 8048c14 <LoRaMacCommandsStickyCmdsPending+0x14>
    {
        if( curElement->IsSticky == true )
 8048c0c:	7b1a      	ldrb	r2, [r3, #12]
 8048c0e:	b11a      	cbz	r2, 8048c18 <LoRaMacCommandsStickyCmdsPending+0x18>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8048c10:	2301      	movs	r3, #1
 8048c12:	7003      	strb	r3, [r0, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 8048c14:	2000      	movs	r0, #0
 8048c16:	4770      	bx	lr
        }
        curElement = curElement->Next;
 8048c18:	681b      	ldr	r3, [r3, #0]
 8048c1a:	e7f6      	b.n	8048c0a <LoRaMacCommandsStickyCmdsPending+0xa>
        return LORAMAC_COMMANDS_ERROR_NPE;
 8048c1c:	2001      	movs	r0, #1
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 8048c1e:	4770      	bx	lr
 8048c20:	20008ef8 	.word	0x20008ef8

08048c24 <LoRaMacConfirmQueueAdd>:
    *confirmQueueNvmCtxSize = sizeof( ConfirmQueueNvmCtx );
    return &ConfirmQueueNvmCtx;
}

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8048c24:	b510      	push	{r4, lr}
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8048c26:	490d      	ldr	r1, [pc, #52]	; (8048c5c <LoRaMacConfirmQueueAdd+0x38>)
 8048c28:	690b      	ldr	r3, [r1, #16]
 8048c2a:	7d1a      	ldrb	r2, [r3, #20]
 8048c2c:	2a04      	cmp	r2, #4
 8048c2e:	d813      	bhi.n	8048c58 <LoRaMacConfirmQueueAdd+0x34>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8048c30:	688a      	ldr	r2, [r1, #8]
 8048c32:	7804      	ldrb	r4, [r0, #0]
 8048c34:	7014      	strb	r4, [r2, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8048c36:	7844      	ldrb	r4, [r0, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8048c38:	78c0      	ldrb	r0, [r0, #3]
 8048c3a:	70d0      	strb	r0, [r2, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8048c3c:	2000      	movs	r0, #0
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8048c3e:	7054      	strb	r4, [r2, #1]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8048c40:	7090      	strb	r0, [r2, #2]
    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 8048c42:	7d18      	ldrb	r0, [r3, #20]
 8048c44:	3001      	adds	r0, #1
 8048c46:	7518      	strb	r0, [r3, #20]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8048c48:	f103 0010 	add.w	r0, r3, #16
 8048c4c:	4282      	cmp	r2, r0
        bufferPointer++;
 8048c4e:	bf18      	it	ne
 8048c50:	1d13      	addne	r3, r2, #4
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8048c52:	608b      	str	r3, [r1, #8]

    return true;
 8048c54:	2001      	movs	r0, #1
}
 8048c56:	bd10      	pop	{r4, pc}
        return false;
 8048c58:	2000      	movs	r0, #0
 8048c5a:	e7fc      	b.n	8048c56 <LoRaMacConfirmQueueAdd+0x32>
 8048c5c:	20008ff8 	.word	0x20008ff8

08048c60 <LoRaMacConfirmQueueRemoveFirst>:
    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt == 0 )
 8048c60:	4a07      	ldr	r2, [pc, #28]	; (8048c80 <LoRaMacConfirmQueueRemoveFirst+0x20>)
 8048c62:	6913      	ldr	r3, [r2, #16]
 8048c64:	7d18      	ldrb	r0, [r3, #20]
 8048c66:	b148      	cbz	r0, 8048c7c <LoRaMacConfirmQueueRemoveFirst+0x1c>
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8048c68:	6851      	ldr	r1, [r2, #4]
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
 8048c6a:	3801      	subs	r0, #1
 8048c6c:	7518      	strb	r0, [r3, #20]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8048c6e:	f103 0010 	add.w	r0, r3, #16
 8048c72:	4281      	cmp	r1, r0
        bufferPointer++;
 8048c74:	bf18      	it	ne
 8048c76:	1d0b      	addne	r3, r1, #4
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8048c78:	6053      	str	r3, [r2, #4]

    return true;
 8048c7a:	2001      	movs	r0, #1
}
 8048c7c:	4770      	bx	lr
 8048c7e:	bf00      	nop
 8048c80:	20008ff8 	.word	0x20008ff8

08048c84 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8048c84:	b570      	push	{r4, r5, r6, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 8048c86:	4c0b      	ldr	r4, [pc, #44]	; (8048cb4 <LoRaMacConfirmQueueSetStatus+0x30>)
 8048c88:	6922      	ldr	r2, [r4, #16]
 8048c8a:	7d13      	ldrb	r3, [r2, #20]
 8048c8c:	b12b      	cbz	r3, 8048c9a <LoRaMacConfirmQueueSetStatus+0x16>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8048c8e:	e9d4 3401 	ldrd	r3, r4, [r4, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8048c92:	f102 0510 	add.w	r5, r2, #16
    while( element != bufferEnd )
 8048c96:	429c      	cmp	r4, r3
 8048c98:	d100      	bne.n	8048c9c <LoRaMacConfirmQueueSetStatus+0x18>
        {
            element->Status = status;
            element->ReadyToHandle = true;
        }
    }
}
 8048c9a:	bd70      	pop	{r4, r5, r6, pc}
        if( element->Request == request )
 8048c9c:	781e      	ldrb	r6, [r3, #0]
 8048c9e:	428e      	cmp	r6, r1
 8048ca0:	d004      	beq.n	8048cac <LoRaMacConfirmQueueSetStatus+0x28>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8048ca2:	42ab      	cmp	r3, r5
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8048ca4:	bf0c      	ite	eq
 8048ca6:	4613      	moveq	r3, r2
        bufferPointer++;
 8048ca8:	3304      	addne	r3, #4
 8048caa:	e7f4      	b.n	8048c96 <LoRaMacConfirmQueueSetStatus+0x12>
            element->ReadyToHandle = true;
 8048cac:	2201      	movs	r2, #1
            element->Status = status;
 8048cae:	7058      	strb	r0, [r3, #1]
            element->ReadyToHandle = true;
 8048cb0:	709a      	strb	r2, [r3, #2]
 8048cb2:	e7f2      	b.n	8048c9a <LoRaMacConfirmQueueSetStatus+0x16>
 8048cb4:	20008ff8 	.word	0x20008ff8

08048cb8 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8048cb8:	b530      	push	{r4, r5, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 8048cba:	490b      	ldr	r1, [pc, #44]	; (8048ce8 <LoRaMacConfirmQueueGetStatus+0x30>)
 8048cbc:	690a      	ldr	r2, [r1, #16]
 8048cbe:	7d13      	ldrb	r3, [r2, #20]
 8048cc0:	b12b      	cbz	r3, 8048cce <LoRaMacConfirmQueueGetStatus+0x16>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8048cc2:	e9d1 3101 	ldrd	r3, r1, [r1, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8048cc6:	f102 0410 	add.w	r4, r2, #16
    while( element != bufferEnd )
 8048cca:	4299      	cmp	r1, r3
 8048ccc:	d101      	bne.n	8048cd2 <LoRaMacConfirmQueueGetStatus+0x1a>
        if( element != NULL )
        {
            return element->Status;
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8048cce:	2001      	movs	r0, #1
}
 8048cd0:	bd30      	pop	{r4, r5, pc}
        if( element->Request == request )
 8048cd2:	781d      	ldrb	r5, [r3, #0]
 8048cd4:	4285      	cmp	r5, r0
 8048cd6:	d004      	beq.n	8048ce2 <LoRaMacConfirmQueueGetStatus+0x2a>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8048cd8:	42a3      	cmp	r3, r4
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8048cda:	bf0c      	ite	eq
 8048cdc:	4613      	moveq	r3, r2
        bufferPointer++;
 8048cde:	3304      	addne	r3, #4
 8048ce0:	e7f3      	b.n	8048cca <LoRaMacConfirmQueueGetStatus+0x12>
            return element->Status;
 8048ce2:	7858      	ldrb	r0, [r3, #1]
 8048ce4:	e7f4      	b.n	8048cd0 <LoRaMacConfirmQueueGetStatus+0x18>
 8048ce6:	bf00      	nop
 8048ce8:	20008ff8 	.word	0x20008ff8

08048cec <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8048cec:	b570      	push	{r4, r5, r6, lr}
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8048cee:	490a      	ldr	r1, [pc, #40]	; (8048d18 <LoRaMacConfirmQueueSetStatusCmn+0x2c>)

    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 8048cf0:	690a      	ldr	r2, [r1, #16]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8048cf2:	684b      	ldr	r3, [r1, #4]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 8048cf4:	7d14      	ldrb	r4, [r2, #20]
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 8048cf6:	7550      	strb	r0, [r2, #21]
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 8048cf8:	b16c      	cbz	r4, 8048d16 <LoRaMacConfirmQueueSetStatusCmn+0x2a>
            if( element->RestrictCommonReadyToHandle == false )
            {
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
 8048cfa:	6889      	ldr	r1, [r1, #8]
                element->ReadyToHandle = true;
 8048cfc:	2501      	movs	r5, #1
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8048cfe:	f102 0410 	add.w	r4, r2, #16
            if( element->RestrictCommonReadyToHandle == false )
 8048d02:	78de      	ldrb	r6, [r3, #3]
            element->Status = status;
 8048d04:	7058      	strb	r0, [r3, #1]
            if( element->RestrictCommonReadyToHandle == false )
 8048d06:	b906      	cbnz	r6, 8048d0a <LoRaMacConfirmQueueSetStatusCmn+0x1e>
                element->ReadyToHandle = true;
 8048d08:	709d      	strb	r5, [r3, #2]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8048d0a:	42a3      	cmp	r3, r4
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8048d0c:	bf0c      	ite	eq
 8048d0e:	4613      	moveq	r3, r2
        bufferPointer++;
 8048d10:	3304      	addne	r3, #4
        }while( element != ConfirmQueueCtx.BufferEnd );
 8048d12:	4299      	cmp	r1, r3
 8048d14:	d1f5      	bne.n	8048d02 <LoRaMacConfirmQueueSetStatusCmn+0x16>
    }
}
 8048d16:	bd70      	pop	{r4, r5, r6, pc}
 8048d18:	20008ff8 	.word	0x20008ff8

08048d1c <LoRaMacConfirmQueueIsCmdActive>:
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8048d1c:	4a0a      	ldr	r2, [pc, #40]	; (8048d48 <LoRaMacConfirmQueueIsCmdActive+0x2c>)
 8048d1e:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8048d22:	6912      	ldr	r2, [r2, #16]
{
 8048d24:	b530      	push	{r4, r5, lr}
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8048d26:	f102 0410 	add.w	r4, r2, #16
    while( element != bufferEnd )
 8048d2a:	4299      	cmp	r1, r3
 8048d2c:	d101      	bne.n	8048d32 <LoRaMacConfirmQueueIsCmdActive+0x16>
    {
        return true;
    }
    return false;
 8048d2e:	2000      	movs	r0, #0
}
 8048d30:	bd30      	pop	{r4, r5, pc}
        if( element->Request == request )
 8048d32:	781d      	ldrb	r5, [r3, #0]
 8048d34:	4285      	cmp	r5, r0
 8048d36:	d004      	beq.n	8048d42 <LoRaMacConfirmQueueIsCmdActive+0x26>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8048d38:	42a3      	cmp	r3, r4
        bufferPointer++;
 8048d3a:	bf14      	ite	ne
 8048d3c:	3304      	addne	r3, #4
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8048d3e:	4613      	moveq	r3, r2
 8048d40:	e7f3      	b.n	8048d2a <LoRaMacConfirmQueueIsCmdActive+0xe>
        return true;
 8048d42:	2001      	movs	r0, #1
 8048d44:	e7f4      	b.n	8048d30 <LoRaMacConfirmQueueIsCmdActive+0x14>
 8048d46:	bf00      	nop
 8048d48:	20008ff8 	.word	0x20008ff8

08048d4c <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8048d4c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 8048d50:	4c13      	ldr	r4, [pc, #76]	; (8048da0 <LoRaMacConfirmQueueHandleCb+0x54>)
 8048d52:	6923      	ldr	r3, [r4, #16]
 8048d54:	f893 8014 	ldrb.w	r8, [r3, #20]
{
 8048d58:	4606      	mov	r6, r0
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8048d5a:	2500      	movs	r5, #0
 8048d5c:	b2eb      	uxtb	r3, r5
 8048d5e:	4598      	cmp	r8, r3
 8048d60:	d802      	bhi.n	8048d68 <LoRaMacConfirmQueueHandleCb+0x1c>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
        }
    }
}
 8048d62:	b002      	add	sp, #8
 8048d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8048d68:	6863      	ldr	r3, [r4, #4]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8048d6a:	789f      	ldrb	r7, [r3, #2]
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8048d6c:	7819      	ldrb	r1, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8048d6e:	785a      	ldrb	r2, [r3, #1]
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8048d70:	7031      	strb	r1, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8048d72:	7072      	strb	r2, [r6, #1]
        if( readyToHandle == true )
 8048d74:	b15f      	cbz	r7, 8048d8e <LoRaMacConfirmQueueHandleCb+0x42>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8048d76:	6823      	ldr	r3, [r4, #0]
 8048d78:	4630      	mov	r0, r6
 8048d7a:	689b      	ldr	r3, [r3, #8]
 8048d7c:	4798      	blx	r3
        LoRaMacConfirmQueueRemoveFirst( );
 8048d7e:	f7ff ff6f 	bl	8048c60 <LoRaMacConfirmQueueRemoveFirst>
        if( readyToHandle == false )
 8048d82:	b917      	cbnz	r7, 8048d8a <LoRaMacConfirmQueueHandleCb+0x3e>
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8048d84:	a801      	add	r0, sp, #4
 8048d86:	f7ff ff4d 	bl	8048c24 <LoRaMacConfirmQueueAdd>
 8048d8a:	3501      	adds	r5, #1
 8048d8c:	e7e6      	b.n	8048d5c <LoRaMacConfirmQueueHandleCb+0x10>
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8048d8e:	78db      	ldrb	r3, [r3, #3]
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8048d90:	f88d 1004 	strb.w	r1, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8048d94:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8048d98:	f88d 3007 	strb.w	r3, [sp, #7]
 8048d9c:	e7ef      	b.n	8048d7e <LoRaMacConfirmQueueHandleCb+0x32>
 8048d9e:	bf00      	nop
 8048da0:	20008ff8 	.word	0x20008ff8

08048da4 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 8048da4:	4b01      	ldr	r3, [pc, #4]	; (8048dac <LoRaMacConfirmQueueGetCnt+0x8>)
 8048da6:	691b      	ldr	r3, [r3, #16]
}
 8048da8:	7d18      	ldrb	r0, [r3, #20]
 8048daa:	4770      	bx	lr
 8048dac:	20008ff8 	.word	0x20008ff8

08048db0 <GetLastFcntDown>:
{
    if( lastDown == NULL )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 8048db0:	3801      	subs	r0, #1
 8048db2:	2806      	cmp	r0, #6
 8048db4:	d82b      	bhi.n	8048e0e <GetLastFcntDown+0x5e>
 8048db6:	e8df f000 	tbb	[pc, r0]
 8048dba:	0d04      	.short	0x0d04
 8048dbc:	221e1913 	.word	0x221e1913
 8048dc0:	26          	.byte	0x26
 8048dc1:	00          	.byte	0x00
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.NFCntDown;
 8048dc2:	4b14      	ldr	r3, [pc, #80]	; (8048e14 <GetLastFcntDown+0x64>)
 8048dc4:	685a      	ldr	r2, [r3, #4]
 8048dc6:	4613      	mov	r3, r2
 8048dc8:	f853 0f10 	ldr.w	r0, [r3, #16]!
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.NFCntDown;
            break;
        case A_FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.AFCntDown;
 8048dcc:	6008      	str	r0, [r1, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.AFCntDown;
 8048dce:	6313      	str	r3, [r2, #48]	; 0x30
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown3;
            break;
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8048dd0:	2000      	movs	r0, #0
            break;
 8048dd2:	4770      	bx	lr
            *lastDown = CryptoCtx.NvmCtx->FCntList.AFCntDown;
 8048dd4:	4b0f      	ldr	r3, [pc, #60]	; (8048e14 <GetLastFcntDown+0x64>)
 8048dd6:	685a      	ldr	r2, [r3, #4]
 8048dd8:	4613      	mov	r3, r2
 8048dda:	f853 0f14 	ldr.w	r0, [r3, #20]!
 8048dde:	e7f5      	b.n	8048dcc <GetLastFcntDown+0x1c>
            *lastDown = CryptoCtx.NvmCtx->FCntList.FCntDown;
 8048de0:	4b0c      	ldr	r3, [pc, #48]	; (8048e14 <GetLastFcntDown+0x64>)
 8048de2:	685a      	ldr	r2, [r3, #4]
 8048de4:	4613      	mov	r3, r2
 8048de6:	f853 0f18 	ldr.w	r0, [r3, #24]!
 8048dea:	e7ef      	b.n	8048dcc <GetLastFcntDown+0x1c>
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 8048dec:	4b09      	ldr	r3, [pc, #36]	; (8048e14 <GetLastFcntDown+0x64>)
 8048dee:	685b      	ldr	r3, [r3, #4]
 8048df0:	69db      	ldr	r3, [r3, #28]
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown3;
 8048df2:	600b      	str	r3, [r1, #0]
 8048df4:	e7ec      	b.n	8048dd0 <GetLastFcntDown+0x20>
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown1;
 8048df6:	4b07      	ldr	r3, [pc, #28]	; (8048e14 <GetLastFcntDown+0x64>)
 8048df8:	685b      	ldr	r3, [r3, #4]
 8048dfa:	6a1b      	ldr	r3, [r3, #32]
 8048dfc:	e7f9      	b.n	8048df2 <GetLastFcntDown+0x42>
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown2;
 8048dfe:	4b05      	ldr	r3, [pc, #20]	; (8048e14 <GetLastFcntDown+0x64>)
 8048e00:	685b      	ldr	r3, [r3, #4]
 8048e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8048e04:	e7f5      	b.n	8048df2 <GetLastFcntDown+0x42>
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown3;
 8048e06:	4b03      	ldr	r3, [pc, #12]	; (8048e14 <GetLastFcntDown+0x64>)
 8048e08:	685b      	ldr	r3, [r3, #4]
 8048e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8048e0c:	e7f1      	b.n	8048df2 <GetLastFcntDown+0x42>
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8048e0e:	2005      	movs	r0, #5
}
 8048e10:	4770      	bx	lr
 8048e12:	bf00      	nop
 8048e14:	20009024 	.word	0x20009024

08048e18 <PayloadEncrypt>:
{
 8048e18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8048e1c:	b089      	sub	sp, #36	; 0x24
 8048e1e:	460f      	mov	r7, r1
 8048e20:	4690      	mov	r8, r2
 8048e22:	4699      	mov	r9, r3
 8048e24:	9d11      	ldr	r5, [sp, #68]	; 0x44
    if( buffer == 0 )
 8048e26:	4606      	mov	r6, r0
 8048e28:	2800      	cmp	r0, #0
 8048e2a:	d058      	beq.n	8048ede <PayloadEncrypt+0xc6>
    uint8_t sBlock[16] = { 0 };
 8048e2c:	2210      	movs	r2, #16
 8048e2e:	2100      	movs	r1, #0
 8048e30:	4668      	mov	r0, sp
 8048e32:	f003 fdff 	bl	804ca34 <memset>
    uint8_t aBlock[16] = { 0 };
 8048e36:	2210      	movs	r2, #16
 8048e38:	2100      	movs	r1, #0
 8048e3a:	eb0d 0002 	add.w	r0, sp, r2
 8048e3e:	f003 fdf9 	bl	804ca34 <memset>
    aBlock[5] = dir;
 8048e42:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8048e46:	f88d 3015 	strb.w	r3, [sp, #21]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8048e4a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8048e4e:	f88d 3017 	strb.w	r3, [sp, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8048e52:	ea4f 4319 	mov.w	r3, r9, lsr #16
 8048e56:	f88d 3018 	strb.w	r3, [sp, #24]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8048e5a:	0a2b      	lsrs	r3, r5, #8
    aBlock[0] = 0x01;
 8048e5c:	2401      	movs	r4, #1
    aBlock[6] = address & 0xFF;
 8048e5e:	f88d 9016 	strb.w	r9, [sp, #22]
    aBlock[10] = frameCounter & 0xFF;
 8048e62:	f88d 501a 	strb.w	r5, [sp, #26]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8048e66:	ea4f 6919 	mov.w	r9, r9, lsr #24
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8048e6a:	f88d 301b 	strb.w	r3, [sp, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8048e6e:	0c2b      	lsrs	r3, r5, #16
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8048e70:	0e2d      	lsrs	r5, r5, #24
 8048e72:	f88d 501d 	strb.w	r5, [sp, #29]
    aBlock[0] = 0x01;
 8048e76:	f88d 4010 	strb.w	r4, [sp, #16]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8048e7a:	f88d 9019 	strb.w	r9, [sp, #25]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8048e7e:	f88d 301c 	strb.w	r3, [sp, #28]
    while( size > 0 )
 8048e82:	463d      	mov	r5, r7
 8048e84:	eba7 0905 	sub.w	r9, r7, r5
 8048e88:	2d00      	cmp	r5, #0
 8048e8a:	fa5f f989 	uxtb.w	r9, r9
 8048e8e:	dc03      	bgt.n	8048e98 <PayloadEncrypt+0x80>
    return LORAMAC_CRYPTO_SUCCESS;
 8048e90:	2000      	movs	r0, #0
}
 8048e92:	b009      	add	sp, #36	; 0x24
 8048e94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8048e98:	2110      	movs	r1, #16
        aBlock[15] = ctr & 0xFF;
 8048e9a:	f88d 401f 	strb.w	r4, [sp, #31]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8048e9e:	466b      	mov	r3, sp
        ctr++;
 8048ea0:	3401      	adds	r4, #1
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8048ea2:	4642      	mov	r2, r8
 8048ea4:	eb0d 0001 	add.w	r0, sp, r1
        ctr++;
 8048ea8:	b2a4      	uxth	r4, r4
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8048eaa:	f7fe fb37 	bl	804751c <SecureElementAesEncrypt>
 8048eae:	b9c0      	cbnz	r0, 8048ee2 <PayloadEncrypt+0xca>
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8048eb0:	2d10      	cmp	r5, #16
 8048eb2:	46ac      	mov	ip, r5
 8048eb4:	bfa8      	it	ge
 8048eb6:	f04f 0c10 	movge.w	ip, #16
 8048eba:	b2c3      	uxtb	r3, r0
 8048ebc:	4563      	cmp	r3, ip
 8048ebe:	f100 0001 	add.w	r0, r0, #1
 8048ec2:	db02      	blt.n	8048eca <PayloadEncrypt+0xb2>
 8048ec4:	3d10      	subs	r5, #16
 8048ec6:	b22d      	sxth	r5, r5
 8048ec8:	e7dc      	b.n	8048e84 <PayloadEncrypt+0x6c>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8048eca:	aa08      	add	r2, sp, #32
 8048ecc:	eb09 0103 	add.w	r1, r9, r3
 8048ed0:	4413      	add	r3, r2
 8048ed2:	5c72      	ldrb	r2, [r6, r1]
 8048ed4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8048ed8:	4053      	eors	r3, r2
 8048eda:	5473      	strb	r3, [r6, r1]
 8048edc:	e7ed      	b.n	8048eba <PayloadEncrypt+0xa2>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8048ede:	200a      	movs	r0, #10
 8048ee0:	e7d7      	b.n	8048e92 <PayloadEncrypt+0x7a>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8048ee2:	200f      	movs	r0, #15
 8048ee4:	e7d5      	b.n	8048e92 <PayloadEncrypt+0x7a>
	...

08048ee8 <DeriveSessionKey10x>:
{
 8048ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8048eea:	4604      	mov	r4, r0
 8048eec:	b085      	sub	sp, #20
 8048eee:	460f      	mov	r7, r1
 8048ef0:	4616      	mov	r6, r2
    if( ( joinNonce == 0 ) || ( netID == 0 ) || ( devNonce == 0 ) )
 8048ef2:	461d      	mov	r5, r3
 8048ef4:	b34b      	cbz	r3, 8048f4a <DeriveSessionKey10x+0x62>
    uint8_t compBase[16] = { 0 };
 8048ef6:	2210      	movs	r2, #16
 8048ef8:	2100      	movs	r1, #0
 8048efa:	4668      	mov	r0, sp
 8048efc:	f003 fd9a 	bl	804ca34 <memset>
    switch( keyID )
 8048f00:	2c08      	cmp	r4, #8
            compBase[0] = 0x01;
 8048f02:	bf14      	ite	ne
 8048f04:	2301      	movne	r3, #1
            compBase[0] = 0x02;
 8048f06:	2302      	moveq	r3, #2
    memcpy1( compBase + 1, joinNonce, 3 );
 8048f08:	2203      	movs	r2, #3
 8048f0a:	4639      	mov	r1, r7
 8048f0c:	f10d 0001 	add.w	r0, sp, #1
            compBase[0] = 0x02;
 8048f10:	f88d 3000 	strb.w	r3, [sp]
    memcpy1( compBase + 1, joinNonce, 3 );
 8048f14:	f001 fe75 	bl	804ac02 <memcpy1>
    memcpy1( compBase + 4, netID, 3 );
 8048f18:	2203      	movs	r2, #3
 8048f1a:	4631      	mov	r1, r6
 8048f1c:	a801      	add	r0, sp, #4
 8048f1e:	f001 fe70 	bl	804ac02 <memcpy1>
    memcpy1( compBase + 7, devNonce, 2 );
 8048f22:	2202      	movs	r2, #2
 8048f24:	4629      	mov	r1, r5
 8048f26:	f10d 0007 	add.w	r0, sp, #7
 8048f2a:	f001 fe6a 	bl	804ac02 <memcpy1>
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8048f2e:	4b08      	ldr	r3, [pc, #32]	; (8048f50 <DeriveSessionKey10x+0x68>)
 8048f30:	6858      	ldr	r0, [r3, #4]
 8048f32:	2202      	movs	r2, #2
 8048f34:	4623      	mov	r3, r4
 8048f36:	4669      	mov	r1, sp
 8048f38:	6800      	ldr	r0, [r0, #0]
 8048f3a:	f7fe fb67 	bl	804760c <SecureElementDeriveAndStoreKey>
    return LORAMAC_CRYPTO_SUCCESS;
 8048f3e:	2800      	cmp	r0, #0
 8048f40:	bf14      	ite	ne
 8048f42:	200f      	movne	r0, #15
 8048f44:	2000      	moveq	r0, #0
}
 8048f46:	b005      	add	sp, #20
 8048f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 8048f4a:	200a      	movs	r0, #10
 8048f4c:	e7fb      	b.n	8048f46 <DeriveSessionKey10x+0x5e>
 8048f4e:	bf00      	nop
 8048f50:	20009024 	.word	0x20009024

08048f54 <LoRaMacCryptoDeriveMcKEKey.part.2>:
    }

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
 8048f54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 8048f56:	2210      	movs	r2, #16
 8048f58:	2100      	movs	r1, #0
 8048f5a:	4668      	mov	r0, sp
 8048f5c:	f003 fd6a 	bl	804ca34 <memset>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8048f60:	4b07      	ldr	r3, [pc, #28]	; (8048f80 <LoRaMacCryptoDeriveMcKEKey.part.2+0x2c>)
 8048f62:	6858      	ldr	r0, [r3, #4]
 8048f64:	2209      	movs	r2, #9
 8048f66:	237f      	movs	r3, #127	; 0x7f
 8048f68:	4669      	mov	r1, sp
 8048f6a:	6800      	ldr	r0, [r0, #0]
 8048f6c:	f7fe fb4e 	bl	804760c <SecureElementDeriveAndStoreKey>
 8048f70:	2800      	cmp	r0, #0
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 8048f72:	bf14      	ite	ne
 8048f74:	200f      	movne	r0, #15
 8048f76:	2000      	moveq	r0, #0
 8048f78:	b005      	add	sp, #20
 8048f7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8048f7e:	bf00      	nop
 8048f80:	20009024 	.word	0x20009024

08048f84 <VerifyCmacB0.constprop.3>:
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 8048f84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8048f88:	b0c5      	sub	sp, #276	; 0x114
 8048f8a:	460c      	mov	r4, r1
 8048f8c:	4617      	mov	r7, r2
 8048f8e:	4699      	mov	r9, r3
 8048f90:	9e4c      	ldr	r6, [sp, #304]	; 0x130
 8048f92:	9d4d      	ldr	r5, [sp, #308]	; 0x134
    if( msg == 0 )
 8048f94:	4680      	mov	r8, r0
 8048f96:	2800      	cmp	r0, #0
 8048f98:	d053      	beq.n	8049042 <VerifyCmacB0.constprop.3+0xbe>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8048f9a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8048f9e:	d852      	bhi.n	8049046 <VerifyCmacB0.constprop.3+0xc2>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8048fa0:	f44f 7288 	mov.w	r2, #272	; 0x110
 8048fa4:	2100      	movs	r1, #0
 8048fa6:	4668      	mov	r0, sp
 8048fa8:	f001 fe3f 	bl	804ac2a <memset1>
    b0[0] = 0x49;
 8048fac:	2349      	movs	r3, #73	; 0x49
 8048fae:	f88d 3000 	strb.w	r3, [sp]
    if( ( isAck == true ) && ( dir == DOWNLINK ) )
 8048fb2:	f1b9 0f00 	cmp.w	r9, #0
 8048fb6:	d03f      	beq.n	8049038 <VerifyCmacB0.constprop.3+0xb4>
        confFCnt = ( uint16_t )( CryptoCtx.NvmCtx->FCntList.FCntUp % 65536 );
 8048fb8:	4b24      	ldr	r3, [pc, #144]	; (804904c <VerifyCmacB0.constprop.3+0xc8>)
 8048fba:	685b      	ldr	r3, [r3, #4]
 8048fbc:	68db      	ldr	r3, [r3, #12]
        b0[1] = confFCnt & 0xFF;
 8048fbe:	f88d 3001 	strb.w	r3, [sp, #1]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
 8048fc2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8048fc6:	f88d 3002 	strb.w	r3, [sp, #2]
    b0[5] = dir;
 8048fca:	2201      	movs	r2, #1
 8048fcc:	f88d 2005 	strb.w	r2, [sp, #5]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8048fd0:	0a32      	lsrs	r2, r6, #8
 8048fd2:	f88d 2007 	strb.w	r2, [sp, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8048fd6:	0c32      	lsrs	r2, r6, #16
 8048fd8:	f88d 2008 	strb.w	r2, [sp, #8]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8048fdc:	0a2a      	lsrs	r2, r5, #8
 8048fde:	f88d 200b 	strb.w	r2, [sp, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8048fe2:	0c2a      	lsrs	r2, r5, #16
    b0[3] = 0x00;
 8048fe4:	2300      	movs	r3, #0
    b0[6] = devAddr & 0xFF;
 8048fe6:	f88d 6006 	strb.w	r6, [sp, #6]
    b0[10] = fCnt & 0xFF;
 8048fea:	f88d 500a 	strb.w	r5, [sp, #10]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8048fee:	f88d 200c 	strb.w	r2, [sp, #12]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8048ff2:	4641      	mov	r1, r8
 8048ff4:	4622      	mov	r2, r4
 8048ff6:	a804      	add	r0, sp, #16
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8048ff8:	0e36      	lsrs	r6, r6, #24
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8048ffa:	0e2d      	lsrs	r5, r5, #24
    b0[3] = 0x00;
 8048ffc:	f88d 3003 	strb.w	r3, [sp, #3]
    b0[4] = 0x00;
 8049000:	f88d 3004 	strb.w	r3, [sp, #4]
    b0[14] = 0x00;
 8049004:	f88d 300e 	strb.w	r3, [sp, #14]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8049008:	f88d 6009 	strb.w	r6, [sp, #9]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 804900c:	f88d 500d 	strb.w	r5, [sp, #13]
    b0[15] = msgLen & 0xFF;
 8049010:	f88d 400f 	strb.w	r4, [sp, #15]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8049014:	f001 fdf5 	bl	804ac02 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8049018:	f104 0110 	add.w	r1, r4, #16
 804901c:	463b      	mov	r3, r7
 804901e:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 8049020:	b289      	uxth	r1, r1
 8049022:	4668      	mov	r0, sp
 8049024:	f7fe fa62 	bl	80474ec <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 8049028:	b118      	cbz	r0, 8049032 <VerifyCmacB0.constprop.3+0xae>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 804902a:	2801      	cmp	r0, #1
 804902c:	bf0c      	ite	eq
 804902e:	2001      	moveq	r0, #1
 8049030:	200f      	movne	r0, #15
}
 8049032:	b045      	add	sp, #276	; 0x114
 8049034:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        b0[1] = 0x00;
 8049038:	f88d 9001 	strb.w	r9, [sp, #1]
        b0[2] = 0x00;
 804903c:	f88d 9002 	strb.w	r9, [sp, #2]
 8049040:	e7c3      	b.n	8048fca <VerifyCmacB0.constprop.3+0x46>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8049042:	200a      	movs	r0, #10
 8049044:	e7f5      	b.n	8049032 <VerifyCmacB0.constprop.3+0xae>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8049046:	200e      	movs	r0, #14
 8049048:	e7f3      	b.n	8049032 <VerifyCmacB0.constprop.3+0xae>
 804904a:	bf00      	nop
 804904c:	20009024 	.word	0x20009024

08049050 <LoRaMacCryptoGetFCntUp>:
    if( currentUp == NULL )
 8049050:	b130      	cbz	r0, 8049060 <LoRaMacCryptoGetFCntUp+0x10>
    *currentUp = CryptoCtx.NvmCtx->FCntList.FCntUp + 1;
 8049052:	4b04      	ldr	r3, [pc, #16]	; (8049064 <LoRaMacCryptoGetFCntUp+0x14>)
 8049054:	685b      	ldr	r3, [r3, #4]
 8049056:	68db      	ldr	r3, [r3, #12]
 8049058:	3301      	adds	r3, #1
 804905a:	6003      	str	r3, [r0, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 804905c:	2000      	movs	r0, #0
 804905e:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 8049060:	200a      	movs	r0, #10
}
 8049062:	4770      	bx	lr
 8049064:	20009024 	.word	0x20009024

08049068 <LoRaMacCryptoGetFCntDown>:
{
 8049068:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 804906a:	4617      	mov	r7, r2
    uint32_t lastDown = 0;
 804906c:	2200      	movs	r2, #0
{
 804906e:	460e      	mov	r6, r1
    uint32_t lastDown = 0;
 8049070:	9201      	str	r2, [sp, #4]
    if( currentDown == NULL )
 8049072:	461d      	mov	r5, r3
 8049074:	b353      	cbz	r3, 80490cc <LoRaMacCryptoGetFCntDown+0x64>
    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8049076:	a901      	add	r1, sp, #4
 8049078:	f7ff fe9a 	bl	8048db0 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 804907c:	b9e8      	cbnz	r0, 80490ba <LoRaMacCryptoGetFCntDown+0x52>
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 804907e:	9c01      	ldr	r4, [sp, #4]
 8049080:	1c63      	adds	r3, r4, #1
 8049082:	d110      	bne.n	80490a6 <LoRaMacCryptoGetFCntDown+0x3e>
         *currentDown = frameFcnt;
 8049084:	602f      	str	r7, [r5, #0]
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 8049086:	4b12      	ldr	r3, [pc, #72]	; (80490d0 <LoRaMacCryptoGetFCntDown+0x68>)
 8049088:	685b      	ldr	r3, [r3, #4]
 804908a:	789b      	ldrb	r3, [r3, #2]
 804908c:	b9ab      	cbnz	r3, 80490ba <LoRaMacCryptoGetFCntDown+0x52>
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 804908e:	682b      	ldr	r3, [r5, #0]
 8049090:	b2b6      	uxth	r6, r6
 8049092:	1b1c      	subs	r4, r3, r4
 8049094:	eb63 0503 	sbc.w	r5, r3, r3
 8049098:	2700      	movs	r7, #0
 804909a:	42b4      	cmp	r4, r6
 804909c:	eb75 0307 	sbcs.w	r3, r5, r7
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 80490a0:	bfa8      	it	ge
 80490a2:	2008      	movge	r0, #8
 80490a4:	e009      	b.n	80490ba <LoRaMacCryptoGetFCntDown+0x52>
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 80490a6:	b2a3      	uxth	r3, r4
 80490a8:	1afb      	subs	r3, r7, r3
        if( fCntDiff > 0 )
 80490aa:	2b00      	cmp	r3, #0
 80490ac:	dd02      	ble.n	80490b4 <LoRaMacCryptoGetFCntDown+0x4c>
            *currentDown = lastDown + fCntDiff;
 80490ae:	4423      	add	r3, r4
 80490b0:	602b      	str	r3, [r5, #0]
 80490b2:	e7e8      	b.n	8049086 <LoRaMacCryptoGetFCntDown+0x1e>
        else if( fCntDiff == 0 )
 80490b4:	d103      	bne.n	80490be <LoRaMacCryptoGetFCntDown+0x56>
            *currentDown = lastDown;
 80490b6:	602c      	str	r4, [r5, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 80490b8:	2007      	movs	r0, #7
}
 80490ba:	b003      	add	sp, #12
 80490bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 80490be:	0c21      	lsrs	r1, r4, #16
 80490c0:	0409      	lsls	r1, r1, #16
 80490c2:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 80490c6:	4439      	add	r1, r7
 80490c8:	6029      	str	r1, [r5, #0]
 80490ca:	e7dc      	b.n	8049086 <LoRaMacCryptoGetFCntDown+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 80490cc:	200a      	movs	r0, #10
 80490ce:	e7f4      	b.n	80490ba <LoRaMacCryptoGetFCntDown+0x52>
 80490d0:	20009024 	.word	0x20009024

080490d4 <LoRaMacCryptoPrepareJoinRequest>:
{
 80490d4:	b530      	push	{r4, r5, lr}
    if( macMsg == 0 )
 80490d6:	4604      	mov	r4, r0
{
 80490d8:	b085      	sub	sp, #20
    if( macMsg == 0 )
 80490da:	b320      	cbz	r0, 8049126 <LoRaMacCryptoPrepareJoinRequest+0x52>
    uint32_t devNonce = 0;
 80490dc:	a804      	add	r0, sp, #16
 80490de:	2300      	movs	r3, #0
    CryptoCtx.NvmCtx->DevNonce = devNonce;
 80490e0:	4d13      	ldr	r5, [pc, #76]	; (8049130 <LoRaMacCryptoPrepareJoinRequest+0x5c>)
    uint32_t devNonce = 0;
 80490e2:	f840 3d04 	str.w	r3, [r0, #-4]!
    SecureElementRandomNumber( &devNonce );
 80490e6:	f7fe fab7 	bl	8047658 <SecureElementRandomNumber>
    CryptoCtx.NvmCtx->DevNonce = devNonce;
 80490ea:	686b      	ldr	r3, [r5, #4]
 80490ec:	9a03      	ldr	r2, [sp, #12]
 80490ee:	809a      	strh	r2, [r3, #4]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 80490f0:	68ab      	ldr	r3, [r5, #8]
 80490f2:	4798      	blx	r3
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 80490f4:	686b      	ldr	r3, [r5, #4]
 80490f6:	889b      	ldrh	r3, [r3, #4]
 80490f8:	82e3      	strh	r3, [r4, #22]
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80490fa:	4620      	mov	r0, r4
 80490fc:	f000 fa9f 	bl	804963e <LoRaMacSerializerJoinRequest>
 8049100:	b110      	cbz	r0, 8049108 <LoRaMacCryptoPrepareJoinRequest+0x34>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8049102:	2011      	movs	r0, #17
}
 8049104:	b005      	add	sp, #20
 8049106:	bd30      	pop	{r4, r5, pc}
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8049108:	f104 0318 	add.w	r3, r4, #24
 804910c:	9300      	str	r3, [sp, #0]
 804910e:	2213      	movs	r2, #19
 8049110:	2302      	movs	r3, #2
 8049112:	6821      	ldr	r1, [r4, #0]
 8049114:	f7fe f9dc 	bl	80474d0 <SecureElementComputeAesCmac>
 8049118:	b938      	cbnz	r0, 804912a <LoRaMacCryptoPrepareJoinRequest+0x56>
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 804911a:	4620      	mov	r0, r4
 804911c:	f000 fa8f 	bl	804963e <LoRaMacSerializerJoinRequest>
 8049120:	2800      	cmp	r0, #0
 8049122:	d0ef      	beq.n	8049104 <LoRaMacCryptoPrepareJoinRequest+0x30>
 8049124:	e7ed      	b.n	8049102 <LoRaMacCryptoPrepareJoinRequest+0x2e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8049126:	200a      	movs	r0, #10
 8049128:	e7ec      	b.n	8049104 <LoRaMacCryptoPrepareJoinRequest+0x30>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 804912a:	200f      	movs	r0, #15
 804912c:	e7ea      	b.n	8049104 <LoRaMacCryptoPrepareJoinRequest+0x30>
 804912e:	bf00      	nop
 8049130:	20009024 	.word	0x20009024

08049134 <LoRaMacCryptoSecureMessage>:
{
 8049134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8049136:	4605      	mov	r5, r0
 8049138:	b087      	sub	sp, #28
    if( macMsg == NULL )
 804913a:	461c      	mov	r4, r3
 804913c:	b32b      	cbz	r3, 804918a <LoRaMacCryptoSecureMessage+0x56>
    if( fCntUp < CryptoCtx.NvmCtx->FCntList.FCntUp )
 804913e:	4e30      	ldr	r6, [pc, #192]	; (8049200 <LoRaMacCryptoSecureMessage+0xcc>)
 8049140:	6873      	ldr	r3, [r6, #4]
 8049142:	68db      	ldr	r3, [r3, #12]
 8049144:	4283      	cmp	r3, r0
 8049146:	d859      	bhi.n	80491fc <LoRaMacCryptoSecureMessage+0xc8>
    if( macMsg->FPort == 0 )
 8049148:	f894 2020 	ldrb.w	r2, [r4, #32]
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
 804914c:	2a00      	cmp	r2, #0
 804914e:	bf14      	ite	ne
 8049150:	2208      	movne	r2, #8
 8049152:	2207      	moveq	r2, #7
    if( fCntUp > CryptoCtx.NvmCtx->FCntList.FCntUp )
 8049154:	4283      	cmp	r3, r0
 8049156:	d309      	bcc.n	804916c <LoRaMacCryptoSecureMessage+0x38>
    CryptoCtx.NvmCtx->FCntList.FCntUp = fCntUp;
 8049158:	6873      	ldr	r3, [r6, #4]
 804915a:	60dd      	str	r5, [r3, #12]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 804915c:	68b3      	ldr	r3, [r6, #8]
 804915e:	4798      	blx	r3
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8049160:	4620      	mov	r0, r4
 8049162:	f000 faa0 	bl	80496a6 <LoRaMacSerializerData>
 8049166:	b170      	cbz	r0, 8049186 <LoRaMacCryptoSecureMessage+0x52>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8049168:	2011      	movs	r0, #17
 804916a:	e00a      	b.n	8049182 <LoRaMacCryptoSecureMessage+0x4e>
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 804916c:	2300      	movs	r3, #0
 804916e:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8049172:	9001      	str	r0, [sp, #4]
 8049174:	9300      	str	r3, [sp, #0]
 8049176:	68a3      	ldr	r3, [r4, #8]
 8049178:	6a60      	ldr	r0, [r4, #36]	; 0x24
 804917a:	f7ff fe4d 	bl	8048e18 <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 804917e:	2800      	cmp	r0, #0
 8049180:	d0ea      	beq.n	8049158 <LoRaMacCryptoSecureMessage+0x24>
}
 8049182:	b007      	add	sp, #28
 8049184:	bdf0      	pop	{r4, r5, r6, r7, pc}
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8049186:	6821      	ldr	r1, [r4, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8049188:	b909      	cbnz	r1, 804918e <LoRaMacCryptoSecureMessage+0x5a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 804918a:	200a      	movs	r0, #10
 804918c:	e7f9      	b.n	8049182 <LoRaMacCryptoSecureMessage+0x4e>
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 804918e:	7926      	ldrb	r6, [r4, #4]
 8049190:	3e04      	subs	r6, #4
 8049192:	b2b2      	uxth	r2, r6
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8049194:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8049198:	d82e      	bhi.n	80491f8 <LoRaMacCryptoSecureMessage+0xc4>
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 804919a:	68a3      	ldr	r3, [r4, #8]
    b0[6] = devAddr & 0xFF;
 804919c:	f88d 300e 	strb.w	r3, [sp, #14]
    b0[0] = 0x49;
 80491a0:	2749      	movs	r7, #73	; 0x49
 80491a2:	9702      	str	r7, [sp, #8]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 80491a4:	0a1f      	lsrs	r7, r3, #8
 80491a6:	f88d 700f 	strb.w	r7, [sp, #15]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 80491aa:	0c1f      	lsrs	r7, r3, #16
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 80491ac:	0e1b      	lsrs	r3, r3, #24
 80491ae:	f88d 3011 	strb.w	r3, [sp, #17]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 80491b2:	0a2b      	lsrs	r3, r5, #8
 80491b4:	f88d 3013 	strb.w	r3, [sp, #19]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 80491b8:	0c2b      	lsrs	r3, r5, #16
 80491ba:	f88d 3014 	strb.w	r3, [sp, #20]
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 80491be:	f104 032c 	add.w	r3, r4, #44	; 0x2c
    b0[3] = 0x00;
 80491c2:	f8ad 000c 	strh.w	r0, [sp, #12]
    b0[10] = fCnt & 0xFF;
 80491c6:	f88d 5012 	strb.w	r5, [sp, #18]
    b0[14] = 0x00;
 80491ca:	f88d 0016 	strb.w	r0, [sp, #22]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 80491ce:	0e2d      	lsrs	r5, r5, #24
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 80491d0:	9300      	str	r3, [sp, #0]
 80491d2:	a802      	add	r0, sp, #8
 80491d4:	2307      	movs	r3, #7
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 80491d6:	f88d 7010 	strb.w	r7, [sp, #16]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 80491da:	f88d 5015 	strb.w	r5, [sp, #21]
    b0[15] = msgLen & 0xFF;
 80491de:	f88d 6017 	strb.w	r6, [sp, #23]
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 80491e2:	f7fe f975 	bl	80474d0 <SecureElementComputeAesCmac>
 80491e6:	b928      	cbnz	r0, 80491f4 <LoRaMacCryptoSecureMessage+0xc0>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80491e8:	4620      	mov	r0, r4
 80491ea:	f000 fa5c 	bl	80496a6 <LoRaMacSerializerData>
 80491ee:	2800      	cmp	r0, #0
 80491f0:	d0c7      	beq.n	8049182 <LoRaMacCryptoSecureMessage+0x4e>
 80491f2:	e7b9      	b.n	8049168 <LoRaMacCryptoSecureMessage+0x34>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80491f4:	200f      	movs	r0, #15
 80491f6:	e7c4      	b.n	8049182 <LoRaMacCryptoSecureMessage+0x4e>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80491f8:	200e      	movs	r0, #14
 80491fa:	e7c2      	b.n	8049182 <LoRaMacCryptoSecureMessage+0x4e>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80491fc:	2006      	movs	r0, #6
 80491fe:	e7c0      	b.n	8049182 <LoRaMacCryptoSecureMessage+0x4e>
 8049200:	20009024 	.word	0x20009024

08049204 <LoRaMacCryptoUnsecureMessage>:
{
 8049204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8049208:	b086      	sub	sp, #24
 804920a:	4604      	mov	r4, r0
 804920c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 804920e:	4689      	mov	r9, r1
 8049210:	4690      	mov	r8, r2
 8049212:	461d      	mov	r5, r3
    if( macMsg == 0 )
 8049214:	2e00      	cmp	r6, #0
 8049216:	d07a      	beq.n	804930e <LoRaMacCryptoUnsecureMessage+0x10a>
    uint32_t lastDown = 0;
 8049218:	a906      	add	r1, sp, #24
 804921a:	2300      	movs	r3, #0
 804921c:	f841 3d04 	str.w	r3, [r1, #-4]!
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8049220:	4610      	mov	r0, r2
 8049222:	f7ff fdc5 	bl	8048db0 <GetLastFcntDown>
 8049226:	b120      	cbz	r0, 8049232 <LoRaMacCryptoUnsecureMessage+0x2e>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8049228:	2706      	movs	r7, #6
}
 804922a:	4638      	mov	r0, r7
 804922c:	b006      	add	sp, #24
 804922e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( ( currentDown > lastDown ) ||
 8049232:	9b05      	ldr	r3, [sp, #20]
 8049234:	429d      	cmp	r5, r3
 8049236:	d801      	bhi.n	804923c <LoRaMacCryptoUnsecureMessage+0x38>
 8049238:	3301      	adds	r3, #1
 804923a:	d1f5      	bne.n	8049228 <LoRaMacCryptoUnsecureMessage+0x24>
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 804923c:	4630      	mov	r0, r6
 804923e:	f000 f9a3 	bl	8049588 <LoRaMacParserData>
 8049242:	2800      	cmp	r0, #0
 8049244:	d165      	bne.n	8049312 <LoRaMacCryptoUnsecureMessage+0x10e>
        if( KeyAddrList[i].AddrID == addrID )
 8049246:	4b34      	ldr	r3, [pc, #208]	; (8049318 <LoRaMacCryptoUnsecureMessage+0x114>)
 8049248:	461a      	mov	r2, r3
 804924a:	f813 1020 	ldrb.w	r1, [r3, r0, lsl #2]
 804924e:	42a1      	cmp	r1, r4
 8049250:	ea4f 0780 	mov.w	r7, r0, lsl #2
 8049254:	d104      	bne.n	8049260 <LoRaMacCryptoUnsecureMessage+0x5c>
    if( address != macMsg->FHDR.DevAddr )
 8049256:	68b3      	ldr	r3, [r6, #8]
 8049258:	454b      	cmp	r3, r9
 804925a:	d006      	beq.n	804926a <LoRaMacCryptoUnsecureMessage+0x66>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 804925c:	2702      	movs	r7, #2
 804925e:	e7e4      	b.n	804922a <LoRaMacCryptoUnsecureMessage+0x26>
 8049260:	3001      	adds	r0, #1
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8049262:	2805      	cmp	r0, #5
 8049264:	d1f1      	bne.n	804924a <LoRaMacCryptoUnsecureMessage+0x46>
 8049266:	270c      	movs	r7, #12
 8049268:	e7df      	b.n	804922a <LoRaMacCryptoUnsecureMessage+0x26>
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 804926a:	4c2c      	ldr	r4, [pc, #176]	; (804931c <LoRaMacCryptoUnsecureMessage+0x118>)
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 804926c:	6af0      	ldr	r0, [r6, #44]	; 0x2c
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 804926e:	6861      	ldr	r1, [r4, #4]
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8049270:	7b33      	ldrb	r3, [r6, #12]
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 8049272:	7889      	ldrb	r1, [r1, #2]
    payloadDecryptionKeyID = curItem->AppSkey;
 8049274:	443a      	add	r2, r7
        isAck = false;
 8049276:	2900      	cmp	r1, #0
    payloadDecryptionKeyID = curItem->AppSkey;
 8049278:	f892 a001 	ldrb.w	sl, [r2, #1]
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 804927c:	7931      	ldrb	r1, [r6, #4]
 804927e:	7892      	ldrb	r2, [r2, #2]
 8049280:	f8cd 9000 	str.w	r9, [sp]
 8049284:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8049288:	f1a1 0104 	sub.w	r1, r1, #4
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 804928c:	f3c3 1340 	ubfx	r3, r3, #5, #1
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8049290:	b289      	uxth	r1, r1
 8049292:	bf08      	it	eq
 8049294:	2300      	moveq	r3, #0
 8049296:	6830      	ldr	r0, [r6, #0]
 8049298:	f7ff fe74 	bl	8048f84 <VerifyCmacB0.constprop.3>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 804929c:	4607      	mov	r7, r0
 804929e:	2800      	cmp	r0, #0
 80492a0:	d1c3      	bne.n	804922a <LoRaMacCryptoUnsecureMessage+0x26>
    if( macMsg->FPort == 0 )
 80492a2:	f896 3020 	ldrb.w	r3, [r6, #32]
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 80492a6:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 80492aa:	9501      	str	r5, [sp, #4]
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
 80492ac:	2b00      	cmp	r3, #0
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 80492ae:	f04f 0301 	mov.w	r3, #1
 80492b2:	9300      	str	r3, [sp, #0]
 80492b4:	bf18      	it	ne
 80492b6:	4652      	movne	r2, sl
 80492b8:	464b      	mov	r3, r9
 80492ba:	bf08      	it	eq
 80492bc:	2207      	moveq	r2, #7
 80492be:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80492c0:	f7ff fdaa 	bl	8048e18 <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80492c4:	4607      	mov	r7, r0
 80492c6:	2800      	cmp	r0, #0
 80492c8:	d1af      	bne.n	804922a <LoRaMacCryptoUnsecureMessage+0x26>
    switch( fCntID )
 80492ca:	f108 38ff 	add.w	r8, r8, #4294967295
 80492ce:	f1b8 0f06 	cmp.w	r8, #6
 80492d2:	d807      	bhi.n	80492e4 <LoRaMacCryptoUnsecureMessage+0xe0>
 80492d4:	e8df f008 	tbb	[pc, r8]
 80492d8:	0f0c0904 	.word	0x0f0c0904
 80492dc:	1512      	.short	0x1512
 80492de:	18          	.byte	0x18
 80492df:	00          	.byte	0x00
            CryptoCtx.NvmCtx->FCntList.NFCntDown = currentDown;
 80492e0:	6863      	ldr	r3, [r4, #4]
 80492e2:	611d      	str	r5, [r3, #16]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 80492e4:	68a3      	ldr	r3, [r4, #8]
 80492e6:	4798      	blx	r3
 80492e8:	e79f      	b.n	804922a <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoCtx.NvmCtx->FCntList.AFCntDown = currentDown;
 80492ea:	6863      	ldr	r3, [r4, #4]
 80492ec:	615d      	str	r5, [r3, #20]
 80492ee:	e7f9      	b.n	80492e4 <LoRaMacCryptoUnsecureMessage+0xe0>
            CryptoCtx.NvmCtx->FCntList.FCntDown = currentDown;
 80492f0:	6863      	ldr	r3, [r4, #4]
 80492f2:	619d      	str	r5, [r3, #24]
 80492f4:	e7f6      	b.n	80492e4 <LoRaMacCryptoUnsecureMessage+0xe0>
            CryptoCtx.NvmCtx->FCntList.McFCntDown0 = currentDown;
 80492f6:	6863      	ldr	r3, [r4, #4]
 80492f8:	61dd      	str	r5, [r3, #28]
 80492fa:	e7f3      	b.n	80492e4 <LoRaMacCryptoUnsecureMessage+0xe0>
            CryptoCtx.NvmCtx->FCntList.McFCntDown1 = currentDown;
 80492fc:	6863      	ldr	r3, [r4, #4]
 80492fe:	621d      	str	r5, [r3, #32]
 8049300:	e7f0      	b.n	80492e4 <LoRaMacCryptoUnsecureMessage+0xe0>
            CryptoCtx.NvmCtx->FCntList.McFCntDown2 = currentDown;
 8049302:	6863      	ldr	r3, [r4, #4]
 8049304:	625d      	str	r5, [r3, #36]	; 0x24
 8049306:	e7ed      	b.n	80492e4 <LoRaMacCryptoUnsecureMessage+0xe0>
            CryptoCtx.NvmCtx->FCntList.McFCntDown3 = currentDown;
 8049308:	6863      	ldr	r3, [r4, #4]
 804930a:	629d      	str	r5, [r3, #40]	; 0x28
 804930c:	e7ea      	b.n	80492e4 <LoRaMacCryptoUnsecureMessage+0xe0>
        return LORAMAC_CRYPTO_ERROR_NPE;
 804930e:	270a      	movs	r7, #10
 8049310:	e78b      	b.n	804922a <LoRaMacCryptoUnsecureMessage+0x26>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8049312:	2710      	movs	r7, #16
 8049314:	e789      	b.n	804922a <LoRaMacCryptoUnsecureMessage+0x26>
 8049316:	bf00      	nop
 8049318:	2000109c 	.word	0x2000109c
 804931c:	20009024 	.word	0x20009024

08049320 <LoRaMacCryptoDeriveMcRootKey>:
{
 8049320:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8049322:	4b11      	ldr	r3, [pc, #68]	; (8049368 <LoRaMacCryptoDeriveMcRootKey+0x48>)
 8049324:	685e      	ldr	r6, [r3, #4]
    if( ( ( keyID == APP_KEY ) && ( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 ) ) ||
 8049326:	4604      	mov	r4, r0
 8049328:	78b5      	ldrb	r5, [r6, #2]
 804932a:	b910      	cbnz	r0, 8049332 <LoRaMacCryptoDeriveMcRootKey+0x12>
 804932c:	b92d      	cbnz	r5, 804933a <LoRaMacCryptoDeriveMcRootKey+0x1a>
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 804932e:	200b      	movs	r0, #11
 8049330:	e017      	b.n	8049362 <LoRaMacCryptoDeriveMcRootKey+0x42>
    if( ( ( keyID == APP_KEY ) && ( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 ) ) ||
 8049332:	2801      	cmp	r0, #1
 8049334:	d101      	bne.n	804933a <LoRaMacCryptoDeriveMcRootKey+0x1a>
        ( ( keyID == GEN_APP_KEY ) && ( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 ) ) )
 8049336:	2d01      	cmp	r5, #1
 8049338:	d0f9      	beq.n	804932e <LoRaMacCryptoDeriveMcRootKey+0xe>
    uint8_t compBase[16] = { 0 };
 804933a:	2210      	movs	r2, #16
 804933c:	2100      	movs	r1, #0
 804933e:	4668      	mov	r0, sp
 8049340:	f003 fb78 	bl	804ca34 <memset>
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 )
 8049344:	2d01      	cmp	r5, #1
        compBase[0] = 0x20;
 8049346:	bf04      	itt	eq
 8049348:	2320      	moveq	r3, #32
 804934a:	f88d 3000 	strbeq.w	r3, [sp]
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 804934e:	4622      	mov	r2, r4
 8049350:	2309      	movs	r3, #9
 8049352:	4669      	mov	r1, sp
 8049354:	6830      	ldr	r0, [r6, #0]
 8049356:	f7fe f959 	bl	804760c <SecureElementDeriveAndStoreKey>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 804935a:	2800      	cmp	r0, #0
 804935c:	bf0c      	ite	eq
 804935e:	2000      	moveq	r0, #0
 8049360:	200f      	movne	r0, #15
}
 8049362:	b004      	add	sp, #16
 8049364:	bd70      	pop	{r4, r5, r6, pc}
 8049366:	bf00      	nop
 8049368:	20009024 	.word	0x20009024

0804936c <LoRaMacCryptoHandleJoinAccept>:
{
 804936c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8049370:	4681      	mov	r9, r0
 8049372:	b0c7      	sub	sp, #284	; 0x11c
 8049374:	4688      	mov	r8, r1
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8049376:	4614      	mov	r4, r2
 8049378:	2a00      	cmp	r2, #0
 804937a:	f000 80af 	beq.w	80494dc <LoRaMacCryptoHandleJoinAccept+0x170>
 804937e:	2900      	cmp	r1, #0
 8049380:	f000 80ac 	beq.w	80494dc <LoRaMacCryptoHandleJoinAccept+0x170>
    uint8_t micComputationOffset = 0;
 8049384:	28ff      	cmp	r0, #255	; 0xff
 8049386:	bf0c      	ite	eq
 8049388:	250c      	moveq	r5, #12
 804938a:	2500      	movne	r5, #0
    memset1( procBuffer, 0, ( macMsg->BufSize + micComputationOffset ) );
 804938c:	7912      	ldrb	r2, [r2, #4]
 804938e:	b2ae      	uxth	r6, r5
 8049390:	4432      	add	r2, r6
 8049392:	2100      	movs	r1, #0
 8049394:	a803      	add	r0, sp, #12
 8049396:	f001 fc48 	bl	804ac2a <memset1>
    if( SecureElementAesEncrypt( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ), encryptionKeyID, ( procBuffer + micComputationOffset ) ) != SECURE_ELEMENT_SUCCESS )
 804939a:	7921      	ldrb	r1, [r4, #4]
 804939c:	6820      	ldr	r0, [r4, #0]
 804939e:	ab03      	add	r3, sp, #12
 80493a0:	441d      	add	r5, r3
 80493a2:	3901      	subs	r1, #1
 80493a4:	462b      	mov	r3, r5
 80493a6:	2202      	movs	r2, #2
 80493a8:	b289      	uxth	r1, r1
 80493aa:	3001      	adds	r0, #1
 80493ac:	f7fe f8b6 	bl	804751c <SecureElementAesEncrypt>
 80493b0:	b118      	cbz	r0, 80493ba <LoRaMacCryptoHandleJoinAccept+0x4e>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80493b2:	200f      	movs	r0, #15
}
 80493b4:	b047      	add	sp, #284	; 0x11c
 80493b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    memcpy1( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( procBuffer + micComputationOffset ), ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ) );
 80493ba:	7922      	ldrb	r2, [r4, #4]
 80493bc:	6820      	ldr	r0, [r4, #0]
 80493be:	3a01      	subs	r2, #1
 80493c0:	3001      	adds	r0, #1
 80493c2:	b292      	uxth	r2, r2
 80493c4:	4629      	mov	r1, r5
 80493c6:	f001 fc1c 	bl	804ac02 <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80493ca:	4620      	mov	r0, r4
 80493cc:	f000 f88e 	bl	80494ec <LoRaMacParserJoinAccept>
 80493d0:	2800      	cmp	r0, #0
 80493d2:	f040 8085 	bne.w	80494e0 <LoRaMacCryptoHandleJoinAccept+0x174>
    if( macMsg->DLSettings.Bits.OptNeg == 1 )
 80493d6:	f994 2010 	ldrsb.w	r2, [r4, #16]
 80493da:	4d43      	ldr	r5, [pc, #268]	; (80494e8 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 80493dc:	2a00      	cmp	r2, #0
 80493de:	686b      	ldr	r3, [r5, #4]
        CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 1;
 80493e0:	bfba      	itte	lt
 80493e2:	2201      	movlt	r2, #1
 80493e4:	709a      	strblt	r2, [r3, #2]
        CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 0;
 80493e6:	7098      	strbge	r0, [r3, #2]
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 80493e8:	789b      	ldrb	r3, [r3, #2]
        micComputationKeyID = J_S_INT_KEY;
 80493ea:	bfb4      	ite	lt
 80493ec:	2703      	movlt	r7, #3
        micComputationKeyID = NWK_KEY;
 80493ee:	2702      	movge	r7, #2
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 80493f0:	2b00      	cmp	r3, #0
 80493f2:	d145      	bne.n	8049480 <LoRaMacCryptoHandleJoinAccept+0x114>
        if( SecureElementVerifyAesCmac( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 80493f4:	7921      	ldrb	r1, [r4, #4]
 80493f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80493f8:	6820      	ldr	r0, [r4, #0]
 80493fa:	3904      	subs	r1, #4
 80493fc:	463b      	mov	r3, r7
 80493fe:	b289      	uxth	r1, r1
 8049400:	f7fe f874 	bl	80474ec <SecureElementVerifyAesCmac>
 8049404:	2800      	cmp	r0, #0
 8049406:	d1d4      	bne.n	80493b2 <LoRaMacCryptoHandleJoinAccept+0x46>
        retval = LoRaMacCryptoDeriveMcRootKey( GEN_APP_KEY );
 8049408:	2001      	movs	r0, #1
 804940a:	f7ff ff89 	bl	8049320 <LoRaMacCryptoDeriveMcRootKey>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 804940e:	2800      	cmp	r0, #0
 8049410:	d1d0      	bne.n	80493b4 <LoRaMacCryptoHandleJoinAccept+0x48>
 8049412:	f7ff fd9f 	bl	8048f54 <LoRaMacCryptoDeriveMcKEKey.part.2>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8049416:	2800      	cmp	r0, #0
 8049418:	d1cc      	bne.n	80493b4 <LoRaMacCryptoHandleJoinAccept+0x48>
        retval = DeriveSessionKey10x( APP_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 804941a:	686b      	ldr	r3, [r5, #4]
 804941c:	1da6      	adds	r6, r4, #6
 804941e:	3409      	adds	r4, #9
 8049420:	3304      	adds	r3, #4
 8049422:	4622      	mov	r2, r4
 8049424:	4631      	mov	r1, r6
 8049426:	2008      	movs	r0, #8
 8049428:	f7ff fd5e 	bl	8048ee8 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 804942c:	2800      	cmp	r0, #0
 804942e:	d1c1      	bne.n	80493b4 <LoRaMacCryptoHandleJoinAccept+0x48>
        retval = DeriveSessionKey10x( NWK_S_ENC_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 8049430:	686b      	ldr	r3, [r5, #4]
 8049432:	4622      	mov	r2, r4
 8049434:	3304      	adds	r3, #4
 8049436:	4631      	mov	r1, r6
 8049438:	2007      	movs	r0, #7
 804943a:	f7ff fd55 	bl	8048ee8 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 804943e:	2800      	cmp	r0, #0
 8049440:	d1b8      	bne.n	80493b4 <LoRaMacCryptoHandleJoinAccept+0x48>
        retval = DeriveSessionKey10x( F_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 8049442:	686b      	ldr	r3, [r5, #4]
 8049444:	4622      	mov	r2, r4
 8049446:	3304      	adds	r3, #4
 8049448:	4631      	mov	r1, r6
 804944a:	2005      	movs	r0, #5
 804944c:	f7ff fd4c 	bl	8048ee8 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8049450:	2800      	cmp	r0, #0
 8049452:	d1af      	bne.n	80493b4 <LoRaMacCryptoHandleJoinAccept+0x48>
        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 8049454:	686b      	ldr	r3, [r5, #4]
 8049456:	4622      	mov	r2, r4
 8049458:	3304      	adds	r3, #4
 804945a:	4631      	mov	r1, r6
 804945c:	2006      	movs	r0, #6
 804945e:	f7ff fd43 	bl	8048ee8 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8049462:	2800      	cmp	r0, #0
 8049464:	d1a6      	bne.n	80493b4 <LoRaMacCryptoHandleJoinAccept+0x48>
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 8049466:	686b      	ldr	r3, [r5, #4]
    CryptoCtx.RJcount0 = 0;
 8049468:	8028      	strh	r0, [r5, #0]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 804946a:	f04f 32ff 	mov.w	r2, #4294967295
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 804946e:	60d8      	str	r0, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8049470:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8049472:	e9c3 2204 	strd	r2, r2, [r3, #16]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8049476:	68ab      	ldr	r3, [r5, #8]
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 8049478:	9001      	str	r0, [sp, #4]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 804947a:	4798      	blx	r3
    return LORAMAC_CRYPTO_SUCCESS;
 804947c:	9801      	ldr	r0, [sp, #4]
 804947e:	e799      	b.n	80493b4 <LoRaMacCryptoHandleJoinAccept+0x48>
        memcpyr( &procBuffer[bufItr], joinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8049480:	2208      	movs	r2, #8
 8049482:	4641      	mov	r1, r8
 8049484:	f10d 000d 	add.w	r0, sp, #13
        procBuffer[bufItr++] = ( uint8_t ) joinReqType;
 8049488:	f88d 900c 	strb.w	r9, [sp, #12]
        memcpyr( &procBuffer[bufItr], joinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 804948c:	f001 fbc3 	bl	804ac16 <memcpyr>
        procBuffer[bufItr++] = CryptoCtx.NvmCtx->DevNonce & 0xFF;
 8049490:	686b      	ldr	r3, [r5, #4]
        if( SecureElementVerifyAesCmac( procBuffer,  ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 8049492:	7921      	ldrb	r1, [r4, #4]
        procBuffer[bufItr++] = CryptoCtx.NvmCtx->DevNonce & 0xFF;
 8049494:	889a      	ldrh	r2, [r3, #4]
 8049496:	f88d 2015 	strb.w	r2, [sp, #21]
        procBuffer[bufItr++] = ( CryptoCtx.NvmCtx->DevNonce >> 8 ) & 0xFF;
 804949a:	889b      	ldrh	r3, [r3, #4]
        if( SecureElementVerifyAesCmac( procBuffer,  ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 804949c:	6a62      	ldr	r2, [r4, #36]	; 0x24
        procBuffer[bufItr++] = ( CryptoCtx.NvmCtx->DevNonce >> 8 ) & 0xFF;
 804949e:	0a1b      	lsrs	r3, r3, #8
        if( SecureElementVerifyAesCmac( procBuffer,  ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 80494a0:	3905      	subs	r1, #5
        procBuffer[bufItr++] = ( CryptoCtx.NvmCtx->DevNonce >> 8 ) & 0xFF;
 80494a2:	f88d 3016 	strb.w	r3, [sp, #22]
        if( SecureElementVerifyAesCmac( procBuffer,  ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 80494a6:	4431      	add	r1, r6
        procBuffer[bufItr++] = macMsg->MHDR.Value;
 80494a8:	7963      	ldrb	r3, [r4, #5]
 80494aa:	f88d 3017 	strb.w	r3, [sp, #23]
        if( SecureElementVerifyAesCmac( procBuffer,  ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 80494ae:	b289      	uxth	r1, r1
 80494b0:	463b      	mov	r3, r7
 80494b2:	a803      	add	r0, sp, #12
 80494b4:	f7fe f81a 	bl	80474ec <SecureElementVerifyAesCmac>
 80494b8:	2800      	cmp	r0, #0
 80494ba:	f47f af7a 	bne.w	80493b2 <LoRaMacCryptoHandleJoinAccept+0x46>
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[2] << 16 );
 80494be:	7a23      	ldrb	r3, [r4, #8]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[1] << 8 );
 80494c0:	79e1      	ldrb	r1, [r4, #7]
        currentJoinNonce = ( uint32_t ) macMsg->JoinNonce[0];
 80494c2:	79a2      	ldrb	r2, [r4, #6]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[2] << 16 );
 80494c4:	041b      	lsls	r3, r3, #16
 80494c6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80494ca:	4313      	orrs	r3, r2
        if( currentJoinNonce > CryptoCtx.NvmCtx->JoinNonce )
 80494cc:	686a      	ldr	r2, [r5, #4]
 80494ce:	6891      	ldr	r1, [r2, #8]
 80494d0:	4299      	cmp	r1, r3
 80494d2:	d207      	bcs.n	80494e4 <LoRaMacCryptoHandleJoinAccept+0x178>
            CryptoCtx.NvmCtx->JoinNonce = currentJoinNonce;
 80494d4:	6093      	str	r3, [r2, #8]
            CryptoCtx.EventCryptoNvmCtxChanged( );
 80494d6:	68ab      	ldr	r3, [r5, #8]
 80494d8:	4798      	blx	r3
 80494da:	e795      	b.n	8049408 <LoRaMacCryptoHandleJoinAccept+0x9c>
        return LORAMAC_CRYPTO_ERROR_NPE;
 80494dc:	200a      	movs	r0, #10
 80494de:	e769      	b.n	80493b4 <LoRaMacCryptoHandleJoinAccept+0x48>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80494e0:	2010      	movs	r0, #16
 80494e2:	e767      	b.n	80493b4 <LoRaMacCryptoHandleJoinAccept+0x48>
            return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 80494e4:	2003      	movs	r0, #3
 80494e6:	e765      	b.n	80493b4 <LoRaMacCryptoHandleJoinAccept+0x48>
 80494e8:	20009024 	.word	0x20009024

080494ec <LoRaMacParserJoinAccept>:
*/
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 80494ec:	b510      	push	{r4, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80494ee:	4604      	mov	r4, r0
 80494f0:	2800      	cmp	r0, #0
 80494f2:	d045      	beq.n	8049580 <LoRaMacParserJoinAccept+0x94>
 80494f4:	6801      	ldr	r1, [r0, #0]
 80494f6:	2900      	cmp	r1, #0
 80494f8:	d042      	beq.n	8049580 <LoRaMacParserJoinAccept+0x94>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80494fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80494fe:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8049500:	2203      	movs	r2, #3
 8049502:	3006      	adds	r0, #6
 8049504:	f001 fb7d 	bl	804ac02 <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8049508:	4620      	mov	r0, r4
 804950a:	2203      	movs	r2, #3
 804950c:	f850 1b09 	ldr.w	r1, [r0], #9
 8049510:	3104      	adds	r1, #4
 8049512:	f001 fb76 	bl	804ac02 <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8049516:	6821      	ldr	r1, [r4, #0]
 8049518:	79cb      	ldrb	r3, [r1, #7]
 804951a:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 804951c:	7a0a      	ldrb	r2, [r1, #8]
 804951e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8049522:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8049524:	7a4a      	ldrb	r2, [r1, #9]
 8049526:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 804952a:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 804952c:	7a8a      	ldrb	r2, [r1, #10]
 804952e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8049532:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8049534:	7acb      	ldrb	r3, [r1, #11]
 8049536:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8049538:	7b0b      	ldrb	r3, [r1, #12]
 804953a:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_C_FLIST_FIELD_SIZE )
 804953c:	7923      	ldrb	r3, [r4, #4]
 804953e:	2b21      	cmp	r3, #33	; 0x21
 8049540:	d11a      	bne.n	8049578 <LoRaMacParserJoinAccept+0x8c>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_C_FLIST_FIELD_SIZE );
 8049542:	2210      	movs	r2, #16
 8049544:	310d      	adds	r1, #13
 8049546:	f104 0012 	add.w	r0, r4, #18
 804954a:	f001 fb5a 	bl	804ac02 <memcpy1>
        bufItr = bufItr + LORAMAC_C_FLIST_FIELD_SIZE;
 804954e:	221d      	movs	r2, #29
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8049550:	6821      	ldr	r1, [r4, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8049552:	1c50      	adds	r0, r2, #1
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8049554:	5c8b      	ldrb	r3, [r1, r2]
 8049556:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8049558:	5c08      	ldrb	r0, [r1, r0]
 804955a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 804955e:	1c90      	adds	r0, r2, #2
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8049560:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8049562:	5c08      	ldrb	r0, [r1, r0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8049564:	3203      	adds	r2, #3
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8049566:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 804956a:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 804956c:	5c8a      	ldrb	r2, [r1, r2]
 804956e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8049572:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8049574:	2000      	movs	r0, #0
}
 8049576:	bd10      	pop	{r4, pc}
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8049578:	2b11      	cmp	r3, #17
 804957a:	dc03      	bgt.n	8049584 <LoRaMacParserJoinAccept+0x98>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 804957c:	220d      	movs	r2, #13
 804957e:	e7e7      	b.n	8049550 <LoRaMacParserJoinAccept+0x64>
        return LORAMAC_PARSER_ERROR_NPE;
 8049580:	2002      	movs	r0, #2
 8049582:	e7f8      	b.n	8049576 <LoRaMacParserJoinAccept+0x8a>
        return LORAMAC_PARSER_FAIL;
 8049584:	2001      	movs	r0, #1
 8049586:	e7f6      	b.n	8049576 <LoRaMacParserJoinAccept+0x8a>

08049588 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8049588:	b510      	push	{r4, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 804958a:	4604      	mov	r4, r0
 804958c:	2800      	cmp	r0, #0
 804958e:	d054      	beq.n	804963a <LoRaMacParserData+0xb2>
 8049590:	6801      	ldr	r1, [r0, #0]
 8049592:	2900      	cmp	r1, #0
 8049594:	d051      	beq.n	804963a <LoRaMacParserData+0xb2>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8049596:	780b      	ldrb	r3, [r1, #0]
 8049598:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 804959a:	784b      	ldrb	r3, [r1, #1]
 804959c:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 804959e:	788a      	ldrb	r2, [r1, #2]
 80495a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80495a4:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80495a6:	78ca      	ldrb	r2, [r1, #3]
 80495a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80495ac:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80495ae:	790a      	ldrb	r2, [r1, #4]
 80495b0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80495b4:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 80495b6:	794b      	ldrb	r3, [r1, #5]
 80495b8:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 80495ba:	798b      	ldrb	r3, [r1, #6]
 80495bc:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 80495be:	79ca      	ldrb	r2, [r1, #7]
 80495c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80495c4:	7b02      	ldrb	r2, [r0, #12]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 80495c6:	81c3      	strh	r3, [r0, #14]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80495c8:	f002 020f 	and.w	r2, r2, #15
 80495cc:	3108      	adds	r1, #8
 80495ce:	3010      	adds	r0, #16
 80495d0:	f001 fb17 	bl	804ac02 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80495d4:	7b23      	ldrb	r3, [r4, #12]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 80495d6:	2200      	movs	r2, #0
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80495d8:	f003 030f 	and.w	r3, r3, #15
    macMsg->FPort = 0;
 80495dc:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 80495e0:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 80495e4:	7922      	ldrb	r2, [r4, #4]
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80495e6:	f103 0008 	add.w	r0, r3, #8
    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 80495ea:	1a11      	subs	r1, r2, r0
 80495ec:	2904      	cmp	r1, #4
 80495ee:	dd0d      	ble.n	804960c <LoRaMacParserData+0x84>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 80495f0:	6821      	ldr	r1, [r4, #0]
 80495f2:	3309      	adds	r3, #9

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 80495f4:	3a04      	subs	r2, #4
 80495f6:	1ad2      	subs	r2, r2, r3
        macMsg->FPort = macMsg->Buffer[bufItr++];
 80495f8:	5c08      	ldrb	r0, [r1, r0]
 80495fa:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 80495fe:	b2d2      	uxtb	r2, r2
 8049600:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8049604:	4419      	add	r1, r3
 8049606:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8049608:	f001 fafb 	bl	804ac02 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 804960c:	7923      	ldrb	r3, [r4, #4]
 804960e:	6822      	ldr	r2, [r4, #0]
 8049610:	441a      	add	r2, r3
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );

    return LORAMAC_PARSER_SUCCESS;
 8049612:	2000      	movs	r0, #0
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8049614:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 8049618:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 804961a:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 804961e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8049622:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8049624:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8049628:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 804962c:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 804962e:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8049632:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8049636:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8049638:	bd10      	pop	{r4, pc}
        return LORAMAC_PARSER_ERROR_NPE;
 804963a:	2002      	movs	r0, #2
 804963c:	e7fc      	b.n	8049638 <LoRaMacParserData+0xb0>

0804963e <LoRaMacSerializerJoinRequest>:
*/
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 804963e:	b538      	push	{r3, r4, r5, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8049640:	4604      	mov	r4, r0
 8049642:	b360      	cbz	r0, 804969e <LoRaMacSerializerJoinRequest+0x60>
 8049644:	6803      	ldr	r3, [r0, #0]
 8049646:	b353      	cbz	r3, 804969e <LoRaMacSerializerJoinRequest+0x60>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8049648:	7902      	ldrb	r2, [r0, #4]
 804964a:	2a16      	cmp	r2, #22
 804964c:	d929      	bls.n	80496a2 <LoRaMacSerializerJoinRequest+0x64>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 804964e:	7942      	ldrb	r2, [r0, #5]
 8049650:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8049652:	4605      	mov	r5, r0
 8049654:	2208      	movs	r2, #8
 8049656:	f855 0b0e 	ldr.w	r0, [r5], #14
 804965a:	1da1      	adds	r1, r4, #6
 804965c:	3001      	adds	r0, #1
 804965e:	f001 fada 	bl	804ac16 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8049662:	6820      	ldr	r0, [r4, #0]
 8049664:	2208      	movs	r2, #8
 8049666:	3009      	adds	r0, #9
 8049668:	4629      	mov	r1, r5
 804966a:	f001 fad4 	bl	804ac16 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 804966e:	6823      	ldr	r3, [r4, #0]
 8049670:	8ae2      	ldrh	r2, [r4, #22]
 8049672:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8049674:	8ae3      	ldrh	r3, [r4, #22]
 8049676:	6822      	ldr	r2, [r4, #0]
 8049678:	0a1b      	lsrs	r3, r3, #8
 804967a:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 804967c:	6823      	ldr	r3, [r4, #0]
 804967e:	69a2      	ldr	r2, [r4, #24]
 8049680:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8049682:	69a3      	ldr	r3, [r4, #24]
 8049684:	6822      	ldr	r2, [r4, #0]
 8049686:	0a1b      	lsrs	r3, r3, #8
 8049688:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 804968a:	6823      	ldr	r3, [r4, #0]
 804968c:	8b62      	ldrh	r2, [r4, #26]
 804968e:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8049690:	6823      	ldr	r3, [r4, #0]
 8049692:	7ee2      	ldrb	r2, [r4, #27]
 8049694:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 8049696:	2317      	movs	r3, #23
 8049698:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 804969a:	2000      	movs	r0, #0
}
 804969c:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 804969e:	2001      	movs	r0, #1
 80496a0:	e7fc      	b.n	804969c <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80496a2:	2002      	movs	r0, #2
 80496a4:	e7fa      	b.n	804969c <LoRaMacSerializerJoinRequest+0x5e>

080496a6 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 80496a6:	b538      	push	{r3, r4, r5, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80496a8:	4604      	mov	r4, r0
 80496aa:	2800      	cmp	r0, #0
 80496ac:	d063      	beq.n	8049776 <LoRaMacSerializerData+0xd0>
 80496ae:	6801      	ldr	r1, [r0, #0]
 80496b0:	2900      	cmp	r1, #0
 80496b2:	d060      	beq.n	8049776 <LoRaMacSerializerData+0xd0>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADD_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80496b4:	7b03      	ldrb	r3, [r0, #12]

    if( macMsg->FRMPayloadSize > 0 )
 80496b6:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80496ba:	f003 030f 	and.w	r3, r3, #15
    if( macMsg->FRMPayloadSize > 0 )
 80496be:	2a00      	cmp	r2, #0
 80496c0:	d157      	bne.n	8049772 <LoRaMacSerializerData+0xcc>
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80496c2:	3308      	adds	r3, #8
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
    }

    computedBufSize += macMsg->FRMPayloadSize;
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 80496c4:	3204      	adds	r2, #4

    if( macMsg->BufSize < computedBufSize )
 80496c6:	7920      	ldrb	r0, [r4, #4]
 80496c8:	4413      	add	r3, r2
 80496ca:	4298      	cmp	r0, r3
 80496cc:	d355      	bcc.n	804977a <LoRaMacSerializerData+0xd4>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80496ce:	7963      	ldrb	r3, [r4, #5]
 80496d0:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 80496d2:	6823      	ldr	r3, [r4, #0]
 80496d4:	68a2      	ldr	r2, [r4, #8]
 80496d6:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 80496d8:	68a3      	ldr	r3, [r4, #8]
 80496da:	6822      	ldr	r2, [r4, #0]
 80496dc:	0a1b      	lsrs	r3, r3, #8
 80496de:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 80496e0:	6823      	ldr	r3, [r4, #0]
 80496e2:	8962      	ldrh	r2, [r4, #10]
 80496e4:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 80496e6:	6823      	ldr	r3, [r4, #0]
 80496e8:	7ae2      	ldrb	r2, [r4, #11]
 80496ea:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 80496ec:	6823      	ldr	r3, [r4, #0]
 80496ee:	7b22      	ldrb	r2, [r4, #12]
 80496f0:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 80496f2:	6823      	ldr	r3, [r4, #0]
 80496f4:	89e2      	ldrh	r2, [r4, #14]
 80496f6:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 80496f8:	89e3      	ldrh	r3, [r4, #14]
 80496fa:	6822      	ldr	r2, [r4, #0]
 80496fc:	0a1b      	lsrs	r3, r3, #8
 80496fe:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8049700:	7b22      	ldrb	r2, [r4, #12]
 8049702:	6820      	ldr	r0, [r4, #0]
 8049704:	f002 020f 	and.w	r2, r2, #15
 8049708:	f104 0110 	add.w	r1, r4, #16
 804970c:	3008      	adds	r0, #8
 804970e:	f001 fa78 	bl	804ac02 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8049712:	7b23      	ldrb	r3, [r4, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8049714:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8049718:	f003 030f 	and.w	r3, r3, #15
 804971c:	f103 0508 	add.w	r5, r3, #8
    if( macMsg->FRMPayloadSize > 0 )
 8049720:	b12a      	cbz	r2, 804972e <LoRaMacSerializerData+0x88>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8049722:	6822      	ldr	r2, [r4, #0]
 8049724:	f894 1020 	ldrb.w	r1, [r4, #32]
 8049728:	5551      	strb	r1, [r2, r5]
 804972a:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 804972e:	6820      	ldr	r0, [r4, #0]
 8049730:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8049734:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8049736:	4428      	add	r0, r5
 8049738:	f001 fa63 	bl	804ac02 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 804973c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8049740:	6822      	ldr	r2, [r4, #0]
 8049742:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8049744:	442b      	add	r3, r5
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8049746:	54d1      	strb	r1, [r2, r3]
 8049748:	1c5a      	adds	r2, r3, #1
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 804974a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 804974c:	6820      	ldr	r0, [r4, #0]
 804974e:	b292      	uxth	r2, r2
 8049750:	0a09      	lsrs	r1, r1, #8
 8049752:	5481      	strb	r1, [r0, r2]
 8049754:	1c9a      	adds	r2, r3, #2
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8049756:	6821      	ldr	r1, [r4, #0]
 8049758:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 804975a:	b292      	uxth	r2, r2
 804975c:	5488      	strb	r0, [r1, r2]
 804975e:	1cda      	adds	r2, r3, #3
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8049760:	b292      	uxth	r2, r2
 8049762:	6821      	ldr	r1, [r4, #0]
 8049764:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 8049768:	5488      	strb	r0, [r1, r2]
 804976a:	3304      	adds	r3, #4

    macMsg->BufSize = bufItr;
 804976c:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 804976e:	2000      	movs	r0, #0
}
 8049770:	bd38      	pop	{r3, r4, r5, pc}
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8049772:	3309      	adds	r3, #9
 8049774:	e7a6      	b.n	80496c4 <LoRaMacSerializerData+0x1e>
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8049776:	2001      	movs	r0, #1
 8049778:	e7fa      	b.n	8049770 <LoRaMacSerializerData+0xca>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 804977a:	2002      	movs	r0, #2
 804977c:	e7f8      	b.n	8049770 <LoRaMacSerializerData+0xca>

0804977e <RegionGetPhyParam>:
}

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
    PhyParam_t phyParam = { 0 };
    switch( region )
 804977e:	2801      	cmp	r0, #1
{
 8049780:	b082      	sub	sp, #8
    switch( region )
 8049782:	d103      	bne.n	804978c <RegionGetPhyParam+0xe>
    {
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
 8049784:	4608      	mov	r0, r1
        default:
        {
            return phyParam;
        }
    }
}
 8049786:	b002      	add	sp, #8
        AU915_GET_PHY_PARAM( );
 8049788:	f000 b8ac 	b.w	80498e4 <RegionAU915GetPhyParam>
}
 804978c:	2000      	movs	r0, #0
 804978e:	b002      	add	sp, #8
 8049790:	4770      	bx	lr

08049792 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
    switch( region )
 8049792:	2801      	cmp	r0, #1
 8049794:	d102      	bne.n	804979c <RegionSetBandTxDone+0xa>
    {
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
 8049796:	4608      	mov	r0, r1
 8049798:	f000 b950 	b.w	8049a3c <RegionAU915SetBandTxDone>
        default:
        {
            return;
        }
    }
}
 804979c:	4770      	bx	lr

0804979e <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
    switch( region )
 804979e:	2801      	cmp	r0, #1
 80497a0:	d102      	bne.n	80497a8 <RegionInitDefaults+0xa>
    {
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
 80497a2:	4608      	mov	r0, r1
 80497a4:	f000 b95a 	b.w	8049a5c <RegionAU915InitDefaults>
        default:
        {
            break;
        }
    }
}
 80497a8:	4770      	bx	lr

080497aa <RegionApplyCFList>:
    }
}

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
    switch( region )
 80497aa:	2801      	cmp	r0, #1
 80497ac:	d102      	bne.n	80497b4 <RegionApplyCFList+0xa>
    {
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
 80497ae:	4608      	mov	r0, r1
 80497b0:	f000 b9d2 	b.w	8049b58 <RegionAU915ApplyCFList>
        default:
        {
            break;
        }
    }
}
 80497b4:	4770      	bx	lr

080497b6 <RegionComputeRxWindowParameters>:
        }
    }
}

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80497b6:	b410      	push	{r4}
    switch( region )
 80497b8:	2801      	cmp	r0, #1
{
 80497ba:	460c      	mov	r4, r1
 80497bc:	4611      	mov	r1, r2
 80497be:	461a      	mov	r2, r3
 80497c0:	9b01      	ldr	r3, [sp, #4]
    switch( region )
 80497c2:	d104      	bne.n	80497ce <RegionComputeRxWindowParameters+0x18>
    {
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
 80497c4:	4620      	mov	r0, r4
        default:
        {
            break;
        }
    }
}
 80497c6:	f85d 4b04 	ldr.w	r4, [sp], #4
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
 80497ca:	f000 b9eb 	b.w	8049ba4 <RegionAU915ComputeRxWindowParameters>
}
 80497ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80497d2:	4770      	bx	lr

080497d4 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
    switch( region )
 80497d4:	2801      	cmp	r0, #1
{
 80497d6:	460b      	mov	r3, r1
    switch( region )
 80497d8:	d103      	bne.n	80497e2 <RegionRxConfig+0xe>
    {
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
 80497da:	4611      	mov	r1, r2
 80497dc:	4618      	mov	r0, r3
 80497de:	f000 ba23 	b.w	8049c28 <RegionAU915RxConfig>
        default:
        {
            return false;
        }
    }
}
 80497e2:	2000      	movs	r0, #0
 80497e4:	4770      	bx	lr

080497e6 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
    switch( region )
 80497e6:	2801      	cmp	r0, #1
{
 80497e8:	b410      	push	{r4}
 80497ea:	460c      	mov	r4, r1
 80497ec:	4611      	mov	r1, r2
    switch( region )
 80497ee:	d105      	bne.n	80497fc <RegionTxConfig+0x16>
    {
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
 80497f0:	4620      	mov	r0, r4
 80497f2:	461a      	mov	r2, r3
        default:
        {
            return false;
        }
    }
}
 80497f4:	f85d 4b04 	ldr.w	r4, [sp], #4
        AU915_TX_CONFIG( );
 80497f8:	f000 ba70 	b.w	8049cdc <RegionAU915TxConfig>
}
 80497fc:	2000      	movs	r0, #0
 80497fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8049802:	4770      	bx	lr

08049804 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8049804:	b430      	push	{r4, r5}
    switch( region )
 8049806:	2801      	cmp	r0, #1
{
 8049808:	460c      	mov	r4, r1
 804980a:	4611      	mov	r1, r2
 804980c:	461a      	mov	r2, r3
 804980e:	e9dd 3502 	ldrd	r3, r5, [sp, #8]
    switch( region )
 8049812:	d104      	bne.n	804981e <RegionLinkAdrReq+0x1a>
    {
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
 8049814:	9502      	str	r5, [sp, #8]
 8049816:	4620      	mov	r0, r4
        default:
        {
            return 0;
        }
    }
}
 8049818:	bc30      	pop	{r4, r5}
        AU915_LINK_ADR_REQ( );
 804981a:	f000 badb 	b.w	8049dd4 <RegionAU915LinkAdrReq>
}
 804981e:	2000      	movs	r0, #0
 8049820:	bc30      	pop	{r4, r5}
 8049822:	4770      	bx	lr

08049824 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
    switch( region )
 8049824:	2801      	cmp	r0, #1
 8049826:	d102      	bne.n	804982e <RegionRxParamSetupReq+0xa>
    {
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
 8049828:	4608      	mov	r0, r1
 804982a:	f000 bbdf 	b.w	8049fec <RegionAU915RxParamSetupReq>
        default:
        {
            return 0;
        }
    }
}
 804982e:	2000      	movs	r0, #0
 8049830:	4770      	bx	lr

08049832 <RegionNewChannelReq>:

uint8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
    switch( region )
 8049832:	2801      	cmp	r0, #1
 8049834:	d102      	bne.n	804983c <RegionNewChannelReq+0xa>
    {
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
 8049836:	4608      	mov	r0, r1
 8049838:	f000 bbfe 	b.w	804a038 <RegionAU915NewChannelReq>
        default:
        {
            return 0;
        }
    }
}
 804983c:	2000      	movs	r0, #0
 804983e:	4770      	bx	lr

08049840 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
    switch( region )
 8049840:	2801      	cmp	r0, #1
 8049842:	d102      	bne.n	804984a <RegionTxParamSetupReq+0xa>
    {
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
 8049844:	4608      	mov	r0, r1
 8049846:	f000 bbf9 	b.w	804a03c <RegionAU915TxParamSetupReq>
        default:
        {
            return 0;
        }
    }
}
 804984a:	2000      	movs	r0, #0
 804984c:	4770      	bx	lr

0804984e <RegionDlChannelReq>:

uint8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
    switch( region )
 804984e:	2801      	cmp	r0, #1
 8049850:	d102      	bne.n	8049858 <RegionDlChannelReq+0xa>
    {
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
 8049852:	4608      	mov	r0, r1
 8049854:	f000 bbf4 	b.w	804a040 <RegionAU915DlChannelReq>
        default:
        {
            return 0;
        }
    }
}
 8049858:	2000      	movs	r0, #0
 804985a:	4770      	bx	lr

0804985c <RegionCalcBackOff>:
    }
}

void RegionCalcBackOff( LoRaMacRegion_t region, CalcBackOffParams_t* calcBackOff )
{
    switch( region )
 804985c:	2801      	cmp	r0, #1
 804985e:	d102      	bne.n	8049866 <RegionCalcBackOff+0xa>
    {
        AS923_CALC_BACKOFF( );
        AU915_CALC_BACKOFF( );
 8049860:	4608      	mov	r0, r1
 8049862:	f000 bbef 	b.w	804a044 <RegionAU915CalcBackOff>
        default:
        {
            break;
        }
    }
}
 8049866:	4770      	bx	lr

08049868 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8049868:	b410      	push	{r4}
    switch( region )
 804986a:	2801      	cmp	r0, #1
{
 804986c:	460c      	mov	r4, r1
 804986e:	4611      	mov	r1, r2
 8049870:	461a      	mov	r2, r3
 8049872:	9b01      	ldr	r3, [sp, #4]
    switch( region )
 8049874:	d104      	bne.n	8049880 <RegionNextChannel+0x18>
    {
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
 8049876:	4620      	mov	r0, r4
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
        }
    }
}
 8049878:	f85d 4b04 	ldr.w	r4, [sp], #4
        AU915_NEXT_CHANNEL( );
 804987c:	f000 bc00 	b.w	804a080 <RegionAU915NextChannel>
}
 8049880:	2009      	movs	r0, #9
 8049882:	f85d 4b04 	ldr.w	r4, [sp], #4
 8049886:	4770      	bx	lr

08049888 <RegionApplyDrOffset>:
    }
}

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
    switch( region )
 8049888:	2801      	cmp	r0, #1
{
 804988a:	b410      	push	{r4}
 804988c:	460c      	mov	r4, r1
 804988e:	4611      	mov	r1, r2
    switch( region )
 8049890:	d105      	bne.n	804989e <RegionApplyDrOffset+0x16>
    {
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
 8049892:	4620      	mov	r0, r4
 8049894:	461a      	mov	r2, r3
        default:
        {
            return dr;
        }
    }
}
 8049896:	f85d 4b04 	ldr.w	r4, [sp], #4
        AU915_APPLY_DR_OFFSET( );
 804989a:	f000 bc93 	b.w	804a1c4 <RegionAU915ApplyDrOffset>
}
 804989e:	b2d0      	uxtb	r0, r2
 80498a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80498a4:	4770      	bx	lr
	...

080498a8 <VerifyRfFreq>:
}

static bool VerifyRfFreq( uint32_t freq )
{
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 80498a8:	4b0a      	ldr	r3, [pc, #40]	; (80498d4 <VerifyRfFreq+0x2c>)
{
 80498aa:	b510      	push	{r4, lr}
    if( Radio.CheckRfFrequency( freq ) == false )
 80498ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
{
 80498ae:	4604      	mov	r4, r0
    if( Radio.CheckRfFrequency( freq ) == false )
 80498b0:	4798      	blx	r3
 80498b2:	b170      	cbz	r0, 80498d2 <VerifyRfFreq+0x2a>
    {
        return false;
    }

    // Rx frequencies
    if( ( freq < AU915_FIRST_RX1_CHANNEL ) ||
 80498b4:	4b08      	ldr	r3, [pc, #32]	; (80498d8 <VerifyRfFreq+0x30>)
 80498b6:	4a09      	ldr	r2, [pc, #36]	; (80498dc <VerifyRfFreq+0x34>)
 80498b8:	4423      	add	r3, r4
 80498ba:	4293      	cmp	r3, r2
        ( freq > AU915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) AU915_FIRST_RX1_CHANNEL ) % ( uint32_t ) AU915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 80498bc:	bf9f      	itttt	ls
 80498be:	4a08      	ldrls	r2, [pc, #32]	; (80498e0 <VerifyRfFreq+0x38>)
 80498c0:	fbb3 f0f2 	udivls	r0, r3, r2
 80498c4:	fb02 3010 	mlsls	r0, r2, r0, r3
        ( freq > AU915_LAST_RX1_CHANNEL ) ||
 80498c8:	fab0 f080 	clzls	r0, r0
 80498cc:	bf94      	ite	ls
 80498ce:	0940      	lsrls	r0, r0, #5
        return false;
 80498d0:	2000      	movhi	r0, #0
    if( ( freq < 915200000 ) ||  ( freq > 927800000 ) )
    {
        return false;
    }
    return true;
}
 80498d2:	bd10      	pop	{r4, pc}
 80498d4:	0804e210 	.word	0x0804e210
 80498d8:	c8f78f60 	.word	0xc8f78f60
 80498dc:	00401640 	.word	0x00401640
 80498e0:	000927c0 	.word	0x000927c0

080498e4 <RegionAU915GetPhyParam>:
    *delayTx = delayTransmission;
    return nbEnabledChannels;
}

PhyParam_t RegionAU915GetPhyParam( GetPhyParams_t* getPhy )
{
 80498e4:	b507      	push	{r0, r1, r2, lr}
    PhyParam_t phyParam = { 0 };
 80498e6:	2300      	movs	r3, #0
 80498e8:	9300      	str	r3, [sp, #0]

    switch( getPhy->Attribute )
 80498ea:	7803      	ldrb	r3, [r0, #0]
 80498ec:	3b01      	subs	r3, #1
 80498ee:	2b34      	cmp	r3, #52	; 0x34
 80498f0:	d832      	bhi.n	8049958 <RegionAU915GetPhyParam+0x74>
 80498f2:	e8df f003 	tbb	[pc, r3]
 80498f6:	1f1b      	.short	0x1f1b
 80498f8:	21313131 	.word	0x21313131
 80498fc:	31313131 	.word	0x31313131
 8049900:	4d43413f 	.word	0x4d43413f
 8049904:	5e5b5831 	.word	0x5e5b5831
 8049908:	6a676461 	.word	0x6a676461
 804990c:	751d7331 	.word	0x751d7331
 8049910:	7d7b7977 	.word	0x7d7b7977
 8049914:	24827f31 	.word	0x24827f31
 8049918:	31313131 	.word	0x31313131
 804991c:	31313131 	.word	0x31313131
 8049920:	31313131 	.word	0x31313131
 8049924:	8c843131 	.word	0x8c843131
 8049928:	1d8e      	.short	0x1d8e
 804992a:	8c          	.byte	0x8c
 804992b:	00          	.byte	0x00
    {
        case PHY_MIN_RX_DR:
        {
            if( getPhy->DownlinkDwellTime == 0)
 804992c:	78c3      	ldrb	r3, [r0, #3]
 804992e:	b91b      	cbnz	r3, 8049938 <RegionAU915GetPhyParam+0x54>
            phyParam.Value = AU915_RX_WND_2_FREQ;
            break;
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = AU915_RX_WND_2_DR;
 8049930:	2308      	movs	r3, #8
 8049932:	e002      	b.n	804993a <RegionAU915GetPhyParam+0x56>
            if( getPhy->UplinkDwellTime == 0)
 8049934:	7883      	ldrb	r3, [r0, #2]
 8049936:	b17b      	cbz	r3, 8049958 <RegionAU915GetPhyParam+0x74>
            phyParam.Value = AU915_DEFAULT_DATARATE;
 8049938:	2302      	movs	r3, #2
            phyParam.Value = AU915_BEACON_CHANNEL_DR;
            break;
        }
        case PHY_BEACON_CHANNEL_STEPWIDTH:
        {
            phyParam.Value = AU915_BEACON_CHANNEL_STEPWIDTH;
 804993a:	9300      	str	r3, [sp, #0]
            break;
 804993c:	e00c      	b.n	8049958 <RegionAU915GetPhyParam+0x74>
            if( getPhy->UplinkDwellTime == 0)
 804993e:	7882      	ldrb	r2, [r0, #2]
 8049940:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8049944:	b962      	cbnz	r2, 8049960 <RegionAU915GetPhyParam+0x7c>
    if( dr == minDr )
 8049946:	b12b      	cbz	r3, 8049954 <RegionAU915GetPhyParam+0x70>
    else if( dr == DR_8 )
 8049948:	2b08      	cmp	r3, #8
        nextLowerDr = dr - 1;
 804994a:	bf1a      	itte	ne
 804994c:	f103 33ff 	addne.w	r3, r3, #4294967295
 8049950:	b2da      	uxtbne	r2, r3
        nextLowerDr = DR_6;
 8049952:	2206      	moveq	r2, #6
                phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, AU915_TX_MIN_DATARATE );
 8049954:	b252      	sxtb	r2, r2
 8049956:	9200      	str	r2, [sp, #0]
            break;
        }
    }

    return phyParam;
}
 8049958:	9800      	ldr	r0, [sp, #0]
 804995a:	b003      	add	sp, #12
 804995c:	f85d fb04 	ldr.w	pc, [sp], #4
    if( dr == minDr )
 8049960:	2b02      	cmp	r3, #2
 8049962:	d005      	beq.n	8049970 <RegionAU915GetPhyParam+0x8c>
    else if( dr == DR_8 )
 8049964:	2b08      	cmp	r3, #8
        nextLowerDr = dr - 1;
 8049966:	bf1a      	itte	ne
 8049968:	f103 33ff 	addne.w	r3, r3, #4294967295
 804996c:	b2db      	uxtbne	r3, r3
        nextLowerDr = DR_6;
 804996e:	2306      	moveq	r3, #6
                phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, AU915_DWELL_LIMIT_DATARATE );
 8049970:	b25b      	sxtb	r3, r3
 8049972:	e7e2      	b.n	804993a <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_ADR_ACK_LIMIT;
 8049974:	2340      	movs	r3, #64	; 0x40
 8049976:	e7e0      	b.n	804993a <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_ADR_ACK_DELAY;
 8049978:	2320      	movs	r3, #32
 804997a:	e7de      	b.n	804993a <RegionAU915GetPhyParam+0x56>
            if( getPhy->UplinkDwellTime == 0 )
 804997c:	7881      	ldrb	r1, [r0, #2]
 804997e:	f990 2001 	ldrsb.w	r2, [r0, #1]
 8049982:	4b25      	ldr	r3, [pc, #148]	; (8049a18 <RegionAU915GetPhyParam+0x134>)
 8049984:	b909      	cbnz	r1, 804998a <RegionAU915GetPhyParam+0xa6>
                phyParam.Value = MaxPayloadOfDatarateDwell0AU915[getPhy->Datarate];
 8049986:	5c9b      	ldrb	r3, [r3, r2]
 8049988:	e7d7      	b.n	804993a <RegionAU915GetPhyParam+0x56>
                phyParam.Value = MaxPayloadOfDatarateDwell1AU915[getPhy->Datarate];
 804998a:	4413      	add	r3, r2
 804998c:	7b9b      	ldrb	r3, [r3, #14]
 804998e:	e7d4      	b.n	804993a <RegionAU915GetPhyParam+0x56>
 8049990:	f990 2001 	ldrsb.w	r2, [r0, #1]
 8049994:	4b20      	ldr	r3, [pc, #128]	; (8049a18 <RegionAU915GetPhyParam+0x134>)
            if( getPhy->UplinkDwellTime == 0)
 8049996:	7881      	ldrb	r1, [r0, #2]
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AU915[getPhy->Datarate];
 8049998:	4413      	add	r3, r2
            if( getPhy->UplinkDwellTime == 0)
 804999a:	b909      	cbnz	r1, 80499a0 <RegionAU915GetPhyParam+0xbc>
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AU915[getPhy->Datarate];
 804999c:	7f1b      	ldrb	r3, [r3, #28]
 804999e:	e7cc      	b.n	804993a <RegionAU915GetPhyParam+0x56>
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell1AU915[getPhy->Datarate];
 80499a0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80499a4:	e7c9      	b.n	804993a <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_MAX_RX_WINDOW;
 80499a6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80499aa:	e7c6      	b.n	804993a <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_RECEIVE_DELAY1;
 80499ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80499b0:	e7c3      	b.n	804993a <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_RECEIVE_DELAY2;
 80499b2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80499b6:	e7c0      	b.n	804993a <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_JOIN_ACCEPT_DELAY1;
 80499b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80499bc:	e7bd      	b.n	804993a <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_JOIN_ACCEPT_DELAY2;
 80499be:	f241 7370 	movw	r3, #6000	; 0x1770
 80499c2:	e7ba      	b.n	804993a <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_MAX_FCNT_GAP;
 80499c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80499c8:	e7b7      	b.n	804993a <RegionAU915GetPhyParam+0x56>
            phyParam.Value = ( AU915_ACKTIMEOUT + randr( -AU915_ACK_TIMEOUT_RND, AU915_ACK_TIMEOUT_RND ) );
 80499ca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80499ce:	4813      	ldr	r0, [pc, #76]	; (8049a1c <RegionAU915GetPhyParam+0x138>)
 80499d0:	f001 f90a 	bl	804abe8 <randr>
 80499d4:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 80499d8:	9000      	str	r0, [sp, #0]
            break;
 80499da:	e7bd      	b.n	8049958 <RegionAU915GetPhyParam+0x74>
            phyParam.Value = AU915_RX_WND_2_FREQ;
 80499dc:	4b10      	ldr	r3, [pc, #64]	; (8049a20 <RegionAU915GetPhyParam+0x13c>)
 80499de:	e7ac      	b.n	804993a <RegionAU915GetPhyParam+0x56>
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 80499e0:	4b10      	ldr	r3, [pc, #64]	; (8049a24 <RegionAU915GetPhyParam+0x140>)
 80499e2:	e7aa      	b.n	804993a <RegionAU915GetPhyParam+0x56>
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 80499e4:	4b10      	ldr	r3, [pc, #64]	; (8049a28 <RegionAU915GetPhyParam+0x144>)
 80499e6:	e7a8      	b.n	804993a <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_MAX_NB_CHANNELS;
 80499e8:	2348      	movs	r3, #72	; 0x48
 80499ea:	e7a6      	b.n	804993a <RegionAU915GetPhyParam+0x56>
            phyParam.Channels = NvmCtx.Channels;
 80499ec:	4b0f      	ldr	r3, [pc, #60]	; (8049a2c <RegionAU915GetPhyParam+0x148>)
 80499ee:	e7a4      	b.n	804993a <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_DEFAULT_UPLINK_DWELL_TIME;
 80499f0:	2301      	movs	r3, #1
 80499f2:	e7a2      	b.n	804993a <RegionAU915GetPhyParam+0x56>
            phyParam.fValue = AU915_DEFAULT_MAX_EIRP;
 80499f4:	4b0e      	ldr	r3, [pc, #56]	; (8049a30 <RegionAU915GetPhyParam+0x14c>)
            phyParam.fValue = AU915_DEFAULT_ANTENNA_GAIN;
 80499f6:	9300      	str	r3, [sp, #0]
            break;
 80499f8:	e7ae      	b.n	8049958 <RegionAU915GetPhyParam+0x74>
            phyParam.fValue = AU915_DEFAULT_ANTENNA_GAIN;
 80499fa:	4b0e      	ldr	r3, [pc, #56]	; (8049a34 <RegionAU915GetPhyParam+0x150>)
 80499fc:	e7fb      	b.n	80499f6 <RegionAU915GetPhyParam+0x112>
            phyParam.BeaconFormat.BeaconSize = AU915_BEACON_SIZE;
 80499fe:	f240 3313 	movw	r3, #787	; 0x313
 8049a02:	f8ad 3000 	strh.w	r3, [sp]
            phyParam.BeaconFormat.Rfu1Size = AU915_RFU1_SIZE;
 8049a06:	2301      	movs	r3, #1
 8049a08:	f88d 3002 	strb.w	r3, [sp, #2]
            break;
 8049a0c:	e7a4      	b.n	8049958 <RegionAU915GetPhyParam+0x74>
            phyParam.Value = AU915_BEACON_CHANNEL_DR;
 8049a0e:	230a      	movs	r3, #10
 8049a10:	e793      	b.n	804993a <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_BEACON_CHANNEL_STEPWIDTH;
 8049a12:	4b09      	ldr	r3, [pc, #36]	; (8049a38 <RegionAU915GetPhyParam+0x154>)
 8049a14:	e791      	b.n	804993a <RegionAU915GetPhyParam+0x56>
 8049a16:	bf00      	nop
 8049a18:	0804e5c8 	.word	0x0804e5c8
 8049a1c:	fffffc18 	.word	0xfffffc18
 8049a20:	370870a0 	.word	0x370870a0
 8049a24:	200093d4 	.word	0x200093d4
 8049a28:	200093ec 	.word	0x200093ec
 8049a2c:	20009064 	.word	0x20009064
 8049a30:	41f00000 	.word	0x41f00000
 8049a34:	3e19999a 	.word	0x3e19999a
 8049a38:	000927c0 	.word	0x000927c0

08049a3c <RegionAU915SetBandTxDone>:

void RegionAU915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 8049a3c:	4906      	ldr	r1, [pc, #24]	; (8049a58 <RegionAU915SetBandTxDone+0x1c>)
 8049a3e:	7803      	ldrb	r3, [r0, #0]
 8049a40:	220c      	movs	r2, #12
 8049a42:	fb02 1303 	mla	r3, r2, r3, r1
 8049a46:	6842      	ldr	r2, [r0, #4]
 8049a48:	7a5b      	ldrb	r3, [r3, #9]
 8049a4a:	7840      	ldrb	r0, [r0, #1]
 8049a4c:	3336      	adds	r3, #54	; 0x36
 8049a4e:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8049a52:	f000 bc5d 	b.w	804a310 <RegionCommonSetBandTxDone>
 8049a56:	bf00      	nop
 8049a58:	20009064 	.word	0x20009064

08049a5c <RegionAU915InitDefaults>:
}

void RegionAU915InitDefaults( InitDefaultsParams_t* params )
{
 8049a5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    Band_t bands[AU915_MAX_NB_BANDS] =
 8049a5e:	2301      	movs	r3, #1
 8049a60:	f8ad 3000 	strh.w	r3, [sp]
    {
        AU915_BAND0
    };

    switch( params->Type )
 8049a64:	7903      	ldrb	r3, [r0, #4]
    Band_t bands[AU915_MAX_NB_BANDS] =
 8049a66:	2400      	movs	r4, #0
    switch( params->Type )
 8049a68:	2b01      	cmp	r3, #1
    Band_t bands[AU915_MAX_NB_BANDS] =
 8049a6a:	f88d 4002 	strb.w	r4, [sp, #2]
 8049a6e:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8049a72:	9403      	str	r4, [sp, #12]
    switch( params->Type )
 8049a74:	d04b      	beq.n	8049b0e <RegionAU915InitDefaults+0xb2>
 8049a76:	d303      	bcc.n	8049a80 <RegionAU915InitDefaults+0x24>
 8049a78:	2b02      	cmp	r3, #2
 8049a7a:	d03f      	beq.n	8049afc <RegionAU915InitDefaults+0xa0>
        default:
        {
            break;
        }
    }
}
 8049a7c:	b004      	add	sp, #16
 8049a7e:	bd70      	pop	{r4, r5, r6, pc}
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * AU915_MAX_NB_BANDS );
 8049a80:	2210      	movs	r2, #16
 8049a82:	4669      	mov	r1, sp
 8049a84:	482b      	ldr	r0, [pc, #172]	; (8049b34 <RegionAU915InitDefaults+0xd8>)
            for( uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++ )
 8049a86:	4d2c      	ldr	r5, [pc, #176]	; (8049b38 <RegionAU915InitDefaults+0xdc>)
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * AU915_MAX_NB_BANDS );
 8049a88:	f001 f8bb 	bl	804ac02 <memcpy1>
 8049a8c:	4b2b      	ldr	r3, [pc, #172]	; (8049b3c <RegionAU915InitDefaults+0xe0>)
 8049a8e:	4a2c      	ldr	r2, [pc, #176]	; (8049b40 <RegionAU915InitDefaults+0xe4>)
 8049a90:	4619      	mov	r1, r3
 8049a92:	4618      	mov	r0, r3
                NvmCtx.Channels[i].DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8049a94:	2650      	movs	r6, #80	; 0x50
                NvmCtx.Channels[i].Frequency = 915200000 + i * 200000;
 8049a96:	600a      	str	r2, [r1, #0]
 8049a98:	f502 3243 	add.w	r2, r2, #199680	; 0x30c00
 8049a9c:	f502 72a0 	add.w	r2, r2, #320	; 0x140
            for( uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++ )
 8049aa0:	42aa      	cmp	r2, r5
                NvmCtx.Channels[i].DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8049aa2:	720e      	strb	r6, [r1, #8]
                NvmCtx.Channels[i].Band = 0;
 8049aa4:	724c      	strb	r4, [r1, #9]
 8049aa6:	f101 010c 	add.w	r1, r1, #12
            for( uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++ )
 8049aaa:	d1f4      	bne.n	8049a96 <RegionAU915InitDefaults+0x3a>
 8049aac:	4a25      	ldr	r2, [pc, #148]	; (8049b44 <RegionAU915InitDefaults+0xe8>)
            for( uint8_t i = AU915_MAX_NB_CHANNELS - 8; i < AU915_MAX_NB_CHANNELS; i++ )
 8049aae:	4926      	ldr	r1, [pc, #152]	; (8049b48 <RegionAU915InitDefaults+0xec>)
                NvmCtx.Channels[i].DrRange.Value = ( DR_6 << 4 ) | DR_6;
 8049ab0:	2566      	movs	r5, #102	; 0x66
                NvmCtx.Channels[i].Band = 0;
 8049ab2:	2400      	movs	r4, #0
                NvmCtx.Channels[i].Frequency = 915900000 + ( i - ( AU915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 8049ab4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
 8049ab8:	f502 12c3 	add.w	r2, r2, #1597440	; 0x186000
 8049abc:	f502 6220 	add.w	r2, r2, #2560	; 0xa00
            for( uint8_t i = AU915_MAX_NB_CHANNELS - 8; i < AU915_MAX_NB_CHANNELS; i++ )
 8049ac0:	428a      	cmp	r2, r1
                NvmCtx.Channels[i].DrRange.Value = ( DR_6 << 4 ) | DR_6;
 8049ac2:	f883 5308 	strb.w	r5, [r3, #776]	; 0x308
                NvmCtx.Channels[i].Band = 0;
 8049ac6:	f883 4309 	strb.w	r4, [r3, #777]	; 0x309
 8049aca:	f103 030c 	add.w	r3, r3, #12
            for( uint8_t i = AU915_MAX_NB_CHANNELS - 8; i < AU915_MAX_NB_CHANNELS; i++ )
 8049ace:	d1f1      	bne.n	8049ab4 <RegionAU915InitDefaults+0x58>
            NvmCtx.ChannelsDefaultMask[0] = 0xFFFF;
 8049ad0:	f04f 33ff 	mov.w	r3, #4294967295
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 6 );
 8049ad4:	491d      	ldr	r1, [pc, #116]	; (8049b4c <RegionAU915InitDefaults+0xf0>)
            NvmCtx.ChannelsDefaultMask[0] = 0xFFFF;
 8049ad6:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
            NvmCtx.ChannelsDefaultMask[1] = 0xFFFF;
 8049ada:	f8c0 338c 	str.w	r3, [r0, #908]	; 0x38c
            NvmCtx.ChannelsDefaultMask[3] = 0xFFFF;
 8049ade:	23ff      	movs	r3, #255	; 0xff
 8049ae0:	f8c0 3390 	str.w	r3, [r0, #912]	; 0x390
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 6 );
 8049ae4:	2206      	movs	r2, #6
 8049ae6:	f1a1 0018 	sub.w	r0, r1, #24
 8049aea:	f000 fc02 	bl	804a2f2 <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMaskRemaining, NvmCtx.ChannelsMask, 6 );
 8049aee:	4918      	ldr	r1, [pc, #96]	; (8049b50 <RegionAU915InitDefaults+0xf4>)
 8049af0:	2206      	movs	r2, #6
 8049af2:	f101 000c 	add.w	r0, r1, #12
 8049af6:	f000 fbfc 	bl	804a2f2 <RegionCommonChanMaskCopy>
            break;
 8049afa:	e7bf      	b.n	8049a7c <RegionAU915InitDefaults+0x20>
            if( params->NvmCtx != 0 )
 8049afc:	6801      	ldr	r1, [r0, #0]
 8049afe:	2900      	cmp	r1, #0
 8049b00:	d0bc      	beq.n	8049a7c <RegionAU915InitDefaults+0x20>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 8049b02:	f44f 7265 	mov.w	r2, #916	; 0x394
 8049b06:	480d      	ldr	r0, [pc, #52]	; (8049b3c <RegionAU915InitDefaults+0xe0>)
 8049b08:	f001 f87b 	bl	804ac02 <memcpy1>
 8049b0c:	e7b6      	b.n	8049a7c <RegionAU915InitDefaults+0x20>
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 6 );
 8049b0e:	490f      	ldr	r1, [pc, #60]	; (8049b4c <RegionAU915InitDefaults+0xf0>)
 8049b10:	2206      	movs	r2, #6
 8049b12:	f1a1 0018 	sub.w	r0, r1, #24
 8049b16:	f000 fbec 	bl	804a2f2 <RegionCommonChanMaskCopy>
 8049b1a:	4b0e      	ldr	r3, [pc, #56]	; (8049b54 <RegionAU915InitDefaults+0xf8>)
 8049b1c:	f103 010c 	add.w	r1, r3, #12
                NvmCtx.ChannelsMaskRemaining[i] &= NvmCtx.ChannelsMask[i];
 8049b20:	881a      	ldrh	r2, [r3, #0]
 8049b22:	f833 0c0c 	ldrh.w	r0, [r3, #-12]
 8049b26:	4002      	ands	r2, r0
 8049b28:	f823 2b02 	strh.w	r2, [r3], #2
            for( uint8_t i = 0; i < 6; i++ )
 8049b2c:	428b      	cmp	r3, r1
 8049b2e:	d1f7      	bne.n	8049b20 <RegionAU915InitDefaults+0xc4>
 8049b30:	e7a4      	b.n	8049a7c <RegionAU915InitDefaults+0x20>
 8049b32:	bf00      	nop
 8049b34:	200093c4 	.word	0x200093c4
 8049b38:	37502800 	.word	0x37502800
 8049b3c:	20009064 	.word	0x20009064
 8049b40:	368cd800 	.word	0x368cd800
 8049b44:	36978660 	.word	0x36978660
 8049b48:	375ad660 	.word	0x375ad660
 8049b4c:	200093ec 	.word	0x200093ec
 8049b50:	200093d4 	.word	0x200093d4
 8049b54:	200093e0 	.word	0x200093e0

08049b58 <RegionAU915ApplyCFList>:
            return false;
    }
}

void RegionAU915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8049b58:	b530      	push	{r4, r5, lr}
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 8049b5a:	7903      	ldrb	r3, [r0, #4]
 8049b5c:	2b10      	cmp	r3, #16
 8049b5e:	d11d      	bne.n	8049b9c <RegionAU915ApplyCFList+0x44>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 8049b60:	6800      	ldr	r0, [r0, #0]
 8049b62:	7bc3      	ldrb	r3, [r0, #15]
 8049b64:	2b01      	cmp	r3, #1
 8049b66:	d119      	bne.n	8049b9c <RegionAU915ApplyCFList+0x44>
 8049b68:	4b0d      	ldr	r3, [pc, #52]	; (8049ba0 <RegionAU915ApplyCFList+0x48>)
 8049b6a:	2100      	movs	r1, #0
    {
        NvmCtx.ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
        NvmCtx.ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
        if( chMaskItr == 4 )
        {
            NvmCtx.ChannelsMask[chMaskItr] = NvmCtx.ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 8049b6c:	f2a3 356e 	subw	r5, r3, #878	; 0x36e
        NvmCtx.ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 8049b70:	f810 2011 	ldrb.w	r2, [r0, r1, lsl #1]
 8049b74:	805a      	strh	r2, [r3, #2]
        NvmCtx.ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 8049b76:	eb00 0441 	add.w	r4, r0, r1, lsl #1
        if( chMaskItr == 4 )
 8049b7a:	2904      	cmp	r1, #4
        NvmCtx.ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 8049b7c:	7864      	ldrb	r4, [r4, #1]
 8049b7e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8049b82:	f823 2f02 	strh.w	r2, [r3, #2]!
            NvmCtx.ChannelsMask[chMaskItr] = NvmCtx.ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 8049b86:	bf04      	itt	eq
 8049b88:	b2d2      	uxtbeq	r2, r2
 8049b8a:	f8a5 2378 	strheq.w	r2, [r5, #888]	; 0x378
        }
        // Set the channel mask to the remaining
        NvmCtx.ChannelsMaskRemaining[chMaskItr] &= NvmCtx.ChannelsMask[chMaskItr];
 8049b8e:	899a      	ldrh	r2, [r3, #12]
 8049b90:	881c      	ldrh	r4, [r3, #0]
 8049b92:	3101      	adds	r1, #1
 8049b94:	4022      	ands	r2, r4
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8049b96:	2905      	cmp	r1, #5
        NvmCtx.ChannelsMaskRemaining[chMaskItr] &= NvmCtx.ChannelsMask[chMaskItr];
 8049b98:	819a      	strh	r2, [r3, #12]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8049b9a:	d1e9      	bne.n	8049b70 <RegionAU915ApplyCFList+0x18>
    }
}
 8049b9c:	bd30      	pop	{r4, r5, pc}
 8049b9e:	bf00      	nop
 8049ba0:	200093d2 	.word	0x200093d2

08049ba4 <RegionAU915ComputeRxWindowParameters>:
    }
    return true;
}

void RegionAU915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8049ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
    double tSymbol = 0.0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, AU915_RX_MAX_DATARATE );
 8049ba6:	280d      	cmp	r0, #13
 8049ba8:	bfa8      	it	ge
 8049baa:	200d      	movge	r0, #13
{
 8049bac:	4616      	mov	r6, r2
    switch( BandwidthsAU915[drIndex] )
 8049bae:	4a1a      	ldr	r2, [pc, #104]	; (8049c18 <RegionAU915ComputeRxWindowParameters+0x74>)
 8049bb0:	4f1a      	ldr	r7, [pc, #104]	; (8049c1c <RegionAU915ComputeRxWindowParameters+0x78>)
{
 8049bb2:	ed2d 8b02 	vpush	{d8}
 8049bb6:	461c      	mov	r4, r3
    rxConfigParams->Datarate = MIN( datarate, AU915_RX_MAX_DATARATE );
 8049bb8:	7058      	strb	r0, [r3, #1]
    switch( BandwidthsAU915[drIndex] )
 8049bba:	0083      	lsls	r3, r0, #2
{
 8049bbc:	460d      	mov	r5, r1
    switch( BandwidthsAU915[drIndex] )
 8049bbe:	18d1      	adds	r1, r2, r3
{
 8049bc0:	b083      	sub	sp, #12
    switch( BandwidthsAU915[drIndex] )
 8049bc2:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8049bc4:	42b9      	cmp	r1, r7
 8049bc6:	d025      	beq.n	8049c14 <RegionAU915ComputeRxWindowParameters+0x70>
            return 0;
 8049bc8:	4f15      	ldr	r7, [pc, #84]	; (8049c20 <RegionAU915ComputeRxWindowParameters+0x7c>)
 8049bca:	42b9      	cmp	r1, r7
 8049bcc:	bf0c      	ite	eq
 8049bce:	2102      	moveq	r1, #2
 8049bd0:	2100      	movne	r1, #0
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );

    tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesAU915[rxConfigParams->Datarate], BandwidthsAU915[rxConfigParams->Datarate] );
 8049bd2:	4413      	add	r3, r2
 8049bd4:	4402      	add	r2, r0
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 8049bd6:	70a1      	strb	r1, [r4, #2]
    tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesAU915[rxConfigParams->Datarate], BandwidthsAU915[rxConfigParams->Datarate] );
 8049bd8:	f892 0078 	ldrb.w	r0, [r2, #120]	; 0x78
 8049bdc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8049bde:	f000 fc2d 	bl	804a43c <RegionCommonComputeSymbolTimeLoRa>

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8049be2:	4b10      	ldr	r3, [pc, #64]	; (8049c24 <RegionAU915ComputeRxWindowParameters+0x80>)
    tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesAU915[rxConfigParams->Datarate], BandwidthsAU915[rxConfigParams->Datarate] );
 8049be4:	eeb0 8a40 	vmov.f32	s16, s0
 8049be8:	eef0 8a60 	vmov.f32	s17, s1
    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8049bec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8049bee:	4798      	blx	r3
 8049bf0:	eeb0 0a48 	vmov.f32	s0, s16
 8049bf4:	eef0 0a68 	vmov.f32	s1, s17
 8049bf8:	f104 030c 	add.w	r3, r4, #12
 8049bfc:	9300      	str	r3, [sp, #0]
 8049bfe:	4602      	mov	r2, r0
 8049c00:	f104 0308 	add.w	r3, r4, #8
 8049c04:	4631      	mov	r1, r6
 8049c06:	4628      	mov	r0, r5
 8049c08:	f000 fc34 	bl	804a474 <RegionCommonComputeRxWindowParameters>
}
 8049c0c:	b003      	add	sp, #12
 8049c0e:	ecbd 8b02 	vpop	{d8}
 8049c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return 1;
 8049c14:	2101      	movs	r1, #1
 8049c16:	e7dc      	b.n	8049bd2 <RegionAU915ComputeRxWindowParameters+0x2e>
 8049c18:	0804e5c8 	.word	0x0804e5c8
 8049c1c:	0003d090 	.word	0x0003d090
 8049c20:	0007a120 	.word	0x0007a120
 8049c24:	0804e210 	.word	0x0804e210

08049c28 <RegionAU915RxConfig>:

bool RegionAU915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8049c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int8_t dr = rxConfig->Datarate;
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;

    if( Radio.GetStatus( ) != RF_IDLE )
 8049c2c:	4e26      	ldr	r6, [pc, #152]	; (8049cc8 <RegionAU915RxConfig+0xa0>)
    int8_t dr = rxConfig->Datarate;
 8049c2e:	f990 8001 	ldrsb.w	r8, [r0, #1]
    if( Radio.GetStatus( ) != RF_IDLE )
 8049c32:	68f3      	ldr	r3, [r6, #12]
    uint32_t frequency = rxConfig->Frequency;
 8049c34:	6845      	ldr	r5, [r0, #4]
{
 8049c36:	b08d      	sub	sp, #52	; 0x34
 8049c38:	4604      	mov	r4, r0
 8049c3a:	468b      	mov	fp, r1
    if( Radio.GetStatus( ) != RF_IDLE )
 8049c3c:	4798      	blx	r3
 8049c3e:	2800      	cmp	r0, #0
 8049c40:	d140      	bne.n	8049cc4 <RegionAU915RxConfig+0x9c>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8049c42:	7ce3      	ldrb	r3, [r4, #19]
 8049c44:	b933      	cbnz	r3, 8049c54 <RegionAU915RxConfig+0x2c>
    {
        // Apply window 1 frequency
        frequency = AU915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * AU915_STEPWIDTH_RX1_CHANNEL;
 8049c46:	7825      	ldrb	r5, [r4, #0]
 8049c48:	4a20      	ldr	r2, [pc, #128]	; (8049ccc <RegionAU915RxConfig+0xa4>)
 8049c4a:	4b21      	ldr	r3, [pc, #132]	; (8049cd0 <RegionAU915RxConfig+0xa8>)
 8049c4c:	f005 0507 	and.w	r5, r5, #7
 8049c50:	fb02 3505 	mla	r5, r2, r5, r3
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesAU915[dr];
 8049c54:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8049cd8 <RegionAU915RxConfig+0xb0>

    Radio.SetChannel( frequency );
 8049c58:	6973      	ldr	r3, [r6, #20]
    phyDr = DataratesAU915[dr];
 8049c5a:	eb09 0a08 	add.w	sl, r9, r8
    Radio.SetChannel( frequency );
 8049c5e:	4628      	mov	r0, r5
    phyDr = DataratesAU915[dr];
 8049c60:	f99a 2078 	ldrsb.w	r2, [sl, #120]	; 0x78
 8049c64:	920b      	str	r2, [sp, #44]	; 0x2c
    Radio.SetChannel( frequency );
 8049c66:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8049c68:	7ca3      	ldrb	r3, [r4, #18]
 8049c6a:	8927      	ldrh	r7, [r4, #8]
 8049c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8049c6e:	2000      	movs	r0, #0
 8049c70:	2301      	movs	r3, #1
 8049c72:	9702      	str	r7, [sp, #8]
 8049c74:	2708      	movs	r7, #8
 8049c76:	e9cd 0307 	strd	r0, r3, [sp, #28]
 8049c7a:	e9cd 0700 	strd	r0, r7, [sp]
 8049c7e:	e9cd 0005 	strd	r0, r0, [sp, #20]
 8049c82:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8049c86:	78a1      	ldrb	r1, [r4, #2]
 8049c88:	6a37      	ldr	r7, [r6, #32]
 8049c8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8049c8c:	4618      	mov	r0, r3
 8049c8e:	47b8      	blx	r7

    if( rxConfig->RepeaterSupport == true )
 8049c90:	7c63      	ldrb	r3, [r4, #17]
 8049c92:	b1a3      	cbz	r3, 8049cbe <RegionAU915RxConfig+0x96>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterDwell0AU915[dr];
 8049c94:	f89a 101c 	ldrb.w	r1, [sl, #28]
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateDwell0AU915[dr];
    }
    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
 8049c98:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8049c9a:	310d      	adds	r1, #13
 8049c9c:	b2c9      	uxtb	r1, r1
 8049c9e:	2001      	movs	r0, #1
 8049ca0:	4798      	blx	r3
    TVL1( PRINTF( "RX on freq %d Hz at DR %d\n\r", frequency, dr );)
    PRINTF( "RX on freq %d Hz at DR %d band %d channel %d \n\r", frequency, dr, rxConfig->Bandwidth, rxConfig->Channel );
 8049ca2:	7822      	ldrb	r2, [r4, #0]
 8049ca4:	9200      	str	r2, [sp, #0]
 8049ca6:	78a3      	ldrb	r3, [r4, #2]
 8049ca8:	480a      	ldr	r0, [pc, #40]	; (8049cd4 <RegionAU915RxConfig+0xac>)
 8049caa:	4642      	mov	r2, r8
 8049cac:	4629      	mov	r1, r5
 8049cae:	f000 ff49 	bl	804ab44 <TraceSend>
    *datarate = (uint8_t) dr;
 8049cb2:	f88b 8000 	strb.w	r8, [fp]
    return true;
 8049cb6:	2001      	movs	r0, #1
}
 8049cb8:	b00d      	add	sp, #52	; 0x34
 8049cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        maxPayload = MaxPayloadOfDatarateDwell0AU915[dr];
 8049cbe:	f819 1008 	ldrb.w	r1, [r9, r8]
 8049cc2:	e7e9      	b.n	8049c98 <RegionAU915RxConfig+0x70>
        return false;
 8049cc4:	2000      	movs	r0, #0
 8049cc6:	e7f7      	b.n	8049cb8 <RegionAU915RxConfig+0x90>
 8049cc8:	0804e210 	.word	0x0804e210
 8049ccc:	000927c0 	.word	0x000927c0
 8049cd0:	370870a0 	.word	0x370870a0
 8049cd4:	0804e8eb 	.word	0x0804e8eb
 8049cd8:	0804e5c8 	.word	0x0804e5c8

08049cdc <RegionAU915TxConfig>:

bool RegionAU915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8049cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8049ce0:	b08f      	sub	sp, #60	; 0x3c
 8049ce2:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
    int8_t phyDr = DataratesAU915[txConfig->Datarate];
 8049ce6:	4b35      	ldr	r3, [pc, #212]	; (8049dbc <RegionAU915TxConfig+0xe0>)
 8049ce8:	f990 1001 	ldrsb.w	r1, [r0, #1]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 8049cec:	4e34      	ldr	r6, [pc, #208]	; (8049dc0 <RegionAU915TxConfig+0xe4>)
    int8_t phyDr = DataratesAU915[txConfig->Datarate];
 8049cee:	185a      	adds	r2, r3, r1
{
 8049cf0:	4604      	mov	r4, r0
    int8_t phyDr = DataratesAU915[txConfig->Datarate];
 8049cf2:	f992 7078 	ldrsb.w	r7, [r2, #120]	; 0x78
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 8049cf6:	7802      	ldrb	r2, [r0, #0]
 8049cf8:	200c      	movs	r0, #12
 8049cfa:	fb00 6202 	mla	r2, r0, r2, r6
    switch( BandwidthsAU915[drIndex] )
 8049cfe:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 8049d02:	7a52      	ldrb	r2, [r2, #9]
    switch( BandwidthsAU915[drIndex] )
 8049d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 8049d06:	eb06 1202 	add.w	r2, r6, r2, lsl #4
    txPowerResult =  MAX( txPower, maxBandTxPower );
 8049d0a:	f992 9362 	ldrsb.w	r9, [r2, #866]	; 0x362
 8049d0e:	f994 2002 	ldrsb.w	r2, [r4, #2]
 8049d12:	4591      	cmp	r9, r2
 8049d14:	bfb8      	it	lt
 8049d16:	4691      	movlt	r9, r2
    switch( BandwidthsAU915[drIndex] )
 8049d18:	4a2a      	ldr	r2, [pc, #168]	; (8049dc4 <RegionAU915TxConfig+0xe8>)
 8049d1a:	4293      	cmp	r3, r2
 8049d1c:	d04b      	beq.n	8049db6 <RegionAU915TxConfig+0xda>
            return 0;
 8049d1e:	4a2a      	ldr	r2, [pc, #168]	; (8049dc8 <RegionAU915TxConfig+0xec>)
 8049d20:	4293      	cmp	r3, r2
 8049d22:	bf0c      	ite	eq
 8049d24:	f04f 0802 	moveq.w	r8, #2
 8049d28:	f04f 0800 	movne.w	r8, #0
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8049d2c:	edd4 0a02 	vldr	s1, [r4, #8]
 8049d30:	ed94 0a01 	vldr	s0, [r4, #4]
    //PRINTF( "TX power %d, txPowerLimited %d, txConfig->MaxEirp %d, txConfig->AntennaGain %d \n\r", phyTxPower, txPowerLimited, (int8_t)(txConfig->MaxEirp*100), (int8_t)(txConfig->AntennaGain*100));
    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 8049d34:	f8df a098 	ldr.w	sl, [pc, #152]	; 8049dd0 <RegionAU915TxConfig+0xf4>
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8049d38:	4648      	mov	r0, r9
 8049d3a:	f000 fbfd 	bl	804a538 <RegionCommonComputeTxPower>
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 8049d3e:	7822      	ldrb	r2, [r4, #0]
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8049d40:	900d      	str	r0, [sp, #52]	; 0x34
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 8049d42:	f04f 0b0c 	mov.w	fp, #12
 8049d46:	fb0b f202 	mul.w	r2, fp, r2
 8049d4a:	f8da 3014 	ldr.w	r3, [sl, #20]
 8049d4e:	58b0      	ldr	r0, [r6, r2]
 8049d50:	4798      	blx	r3

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8049d52:	2200      	movs	r2, #0
 8049d54:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8049d58:	2501      	movs	r5, #1
 8049d5a:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8049d5e:	2308      	movs	r3, #8
 8049d60:	e9cd 2205 	strd	r2, r2, [sp, #20]
 8049d64:	e9cd 2503 	strd	r2, r5, [sp, #12]
 8049d68:	e9cd 5301 	strd	r5, r3, [sp, #4]
 8049d6c:	9700      	str	r7, [sp, #0]
 8049d6e:	4643      	mov	r3, r8
 8049d70:	990d      	ldr	r1, [sp, #52]	; 0x34
 8049d72:	f8da 7024 	ldr.w	r7, [sl, #36]	; 0x24
 8049d76:	4628      	mov	r0, r5
 8049d78:	47b8      	blx	r7
    PRINTF( "TX on freq %d Hz at DR %d BW %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate, bandwidth );
 8049d7a:	7823      	ldrb	r3, [r4, #0]
 8049d7c:	f994 2001 	ldrsb.w	r2, [r4, #1]
 8049d80:	4812      	ldr	r0, [pc, #72]	; (8049dcc <RegionAU915TxConfig+0xf0>)
 8049d82:	fb0b fb03 	mul.w	fp, fp, r3
 8049d86:	4643      	mov	r3, r8
 8049d88:	f856 100b 	ldr.w	r1, [r6, fp]
 8049d8c:	f000 feda 	bl	804ab44 <TraceSend>
    TVL1( PRINTF( "TX on freq %d Hz at DR %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate );)

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 8049d90:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
 8049d94:	7b21      	ldrb	r1, [r4, #12]
 8049d96:	4628      	mov	r0, r5
 8049d98:	4798      	blx	r3

    *txTimeOnAir = Radio.TimeOnAir( MODEM_LORA, txConfig->PktLen );
 8049d9a:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
 8049d9e:	7b21      	ldrb	r1, [r4, #12]
 8049da0:	4628      	mov	r0, r5
 8049da2:	4798      	blx	r3
 8049da4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8049da6:	6018      	str	r0, [r3, #0]
    *txPower = txPowerLimited;
 8049da8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

    return true;
}
 8049daa:	4628      	mov	r0, r5
    *txPower = txPowerLimited;
 8049dac:	f883 9000 	strb.w	r9, [r3]
}
 8049db0:	b00f      	add	sp, #60	; 0x3c
 8049db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return 1;
 8049db6:	f04f 0801 	mov.w	r8, #1
 8049dba:	e7b7      	b.n	8049d2c <RegionAU915TxConfig+0x50>
 8049dbc:	0804e5c8 	.word	0x0804e5c8
 8049dc0:	20009064 	.word	0x20009064
 8049dc4:	0003d090 	.word	0x0003d090
 8049dc8:	0007a120 	.word	0x0007a120
 8049dcc:	0804e91b 	.word	0x0804e91b
 8049dd0:	0804e210 	.word	0x0804e210

08049dd4 <RegionAU915LinkAdrReq>:

uint8_t RegionAU915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8049dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8049dd8:	b093      	sub	sp, #76	; 0x4c
    uint8_t status = 0x07;
    RegionCommonLinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 8049dda:	ae07      	add	r6, sp, #28
 8049ddc:	2400      	movs	r4, #0
{
 8049dde:	4605      	mov	r5, r0
 8049de0:	4689      	mov	r9, r1
 8049de2:	4690      	mov	r8, r2
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, NvmCtx.ChannelsMask, 6 );
 8049de4:	497f      	ldr	r1, [pc, #508]	; (8049fe4 <RegionAU915LinkAdrReq+0x210>)
{
 8049de6:	9301      	str	r3, [sp, #4]
    RegionCommonChanMaskCopy( channelsMask, NvmCtx.ChannelsMask, 6 );
 8049de8:	2206      	movs	r2, #6
 8049dea:	4630      	mov	r0, r6
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 8049dec:	9407      	str	r4, [sp, #28]
 8049dee:	e9c6 4401 	strd	r4, r4, [r6, #4]
    RegionCommonChanMaskCopy( channelsMask, NvmCtx.ChannelsMask, 6 );
 8049df2:	f000 fa7e 	bl	804a2f2 <RegionCommonChanMaskCopy>
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 8049df6:	46a2      	mov	sl, r4
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8049df8:	7a2b      	ldrb	r3, [r5, #8]
 8049dfa:	42a3      	cmp	r3, r4
 8049dfc:	d905      	bls.n	8049e0a <RegionAU915LinkAdrReq+0x36>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8049dfe:	6868      	ldr	r0, [r5, #4]
 8049e00:	a905      	add	r1, sp, #20
 8049e02:	4420      	add	r0, r4
 8049e04:	f000 fabf 	bl	804a386 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 8049e08:	b968      	cbnz	r0, 8049e26 <RegionAU915LinkAdrReq+0x52>
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_6 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 8049e0a:	f99d 3015 	ldrsb.w	r3, [sp, #21]
 8049e0e:	2b05      	cmp	r3, #5
 8049e10:	dc69      	bgt.n	8049ee6 <RegionAU915LinkAdrReq+0x112>
 8049e12:	2204      	movs	r2, #4
 8049e14:	2100      	movs	r1, #0
 8049e16:	4630      	mov	r0, r6
 8049e18:	f000 fa4b 	bl	804a2b2 <RegionCommonCountChannels>
 8049e1c:	2801      	cmp	r0, #1
 8049e1e:	d862      	bhi.n	8049ee6 <RegionAU915LinkAdrReq+0x112>
    {
        status &= 0xFE; // Channel mask KO
 8049e20:	f04f 0a06 	mov.w	sl, #6
 8049e24:	e061      	b.n	8049eea <RegionAU915LinkAdrReq+0x116>
        if( linkAdrParams.ChMaskCtrl == 6 )
 8049e26:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8049e2a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
        bytesProcessed += nextIndex;
 8049e2e:	4404      	add	r4, r0
        if( linkAdrParams.ChMaskCtrl == 6 )
 8049e30:	2a06      	cmp	r2, #6
        bytesProcessed += nextIndex;
 8049e32:	b2e4      	uxtb	r4, r4
        if( linkAdrParams.ChMaskCtrl == 6 )
 8049e34:	d107      	bne.n	8049e46 <RegionAU915LinkAdrReq+0x72>
            channelsMask[0] = 0xFFFF;
 8049e36:	f04f 32ff 	mov.w	r2, #4294967295
            channelsMask[1] = 0xFFFF;
 8049e3a:	e9cd 2207 	strd	r2, r2, [sp, #28]
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8049e3e:	b2db      	uxtb	r3, r3
 8049e40:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8049e44:	e7d8      	b.n	8049df8 <RegionAU915LinkAdrReq+0x24>
        else if( linkAdrParams.ChMaskCtrl == 7 )
 8049e46:	2a07      	cmp	r2, #7
 8049e48:	d102      	bne.n	8049e50 <RegionAU915LinkAdrReq+0x7c>
            channelsMask[1] = 0x0000;
 8049e4a:	e9cd aa07 	strd	sl, sl, [sp, #28]
 8049e4e:	e7f6      	b.n	8049e3e <RegionAU915LinkAdrReq+0x6a>
        else if( linkAdrParams.ChMaskCtrl == 5 )
 8049e50:	2a05      	cmp	r2, #5
 8049e52:	d142      	bne.n	8049eda <RegionAU915LinkAdrReq+0x106>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 8049e54:	b2db      	uxtb	r3, r3
 8049e56:	2000      	movs	r0, #0
 8049e58:	9300      	str	r3, [sp, #0]
            uint8_t cntChannelMask = 0;
 8049e5a:	4602      	mov	r2, r0
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 8049e5c:	2301      	movs	r3, #1
 8049e5e:	fa03 fe00 	lsl.w	lr, r3, r0
 8049e62:	ea00 0b03 	and.w	fp, r0, r3
 8049e66:	9f00      	ldr	r7, [sp, #0]
 8049e68:	ab12      	add	r3, sp, #72	; 0x48
 8049e6a:	eb03 0c42 	add.w	ip, r3, r2, lsl #1
 8049e6e:	ea17 0f0e 	tst.w	r7, lr
 8049e72:	fa0f f18e 	sxth.w	r1, lr
 8049e76:	f83c 3c2c 	ldrh.w	r3, [ip, #-44]
 8049e7a:	d01b      	beq.n	8049eb4 <RegionAU915LinkAdrReq+0xe0>
                    if( ( i % 2 ) == 0 )
 8049e7c:	f1bb 0f00 	cmp.w	fp, #0
 8049e80:	d10c      	bne.n	8049e9c <RegionAU915LinkAdrReq+0xc8>
                        channelsMask[cntChannelMask] |= 0x00FF;
 8049e82:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8049e86:	f82c 3c2c 	strh.w	r3, [ip, #-44]
                        channelsMask[4] |= ( bitMask << i );
 8049e8a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8049e8e:	4319      	orrs	r1, r3
                        channelsMask[4] &= ~( bitMask << i );
 8049e90:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 8049e94:	3001      	adds	r0, #1
            for( uint8_t i = 0; i <= 7; i++ )
 8049e96:	2808      	cmp	r0, #8
 8049e98:	d1e0      	bne.n	8049e5c <RegionAU915LinkAdrReq+0x88>
 8049e9a:	e7ad      	b.n	8049df8 <RegionAU915LinkAdrReq+0x24>
                        channelsMask[cntChannelMask] |= 0xFF00;
 8049e9c:	f063 03ff 	orn	r3, r3, #255	; 0xff
 8049ea0:	f82c 3c2c 	strh.w	r3, [ip, #-44]
                        channelsMask[4] |= ( bitMask << i );
 8049ea4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8049ea8:	4319      	orrs	r1, r3
                        cntChannelMask++;
 8049eaa:	3201      	adds	r2, #1
                        channelsMask[4] &= ~( bitMask << i );
 8049eac:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
                        cntChannelMask++;
 8049eb0:	b2d2      	uxtb	r2, r2
 8049eb2:	e7ef      	b.n	8049e94 <RegionAU915LinkAdrReq+0xc0>
 8049eb4:	43c9      	mvns	r1, r1
                    if( ( i % 2 ) == 0 )
 8049eb6:	f1bb 0f00 	cmp.w	fp, #0
 8049eba:	d107      	bne.n	8049ecc <RegionAU915LinkAdrReq+0xf8>
                        channelsMask[cntChannelMask] &= 0xFF00;
 8049ebc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8049ec0:	f82c 3c2c 	strh.w	r3, [ip, #-44]
                        channelsMask[4] &= ~( bitMask << i );
 8049ec4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8049ec8:	4019      	ands	r1, r3
 8049eca:	e7e1      	b.n	8049e90 <RegionAU915LinkAdrReq+0xbc>
                        channelsMask[cntChannelMask] &= 0x00FF;
 8049ecc:	b2db      	uxtb	r3, r3
 8049ece:	f82c 3c2c 	strh.w	r3, [ip, #-44]
                        channelsMask[4] &= ~( bitMask << i );
 8049ed2:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8049ed6:	4019      	ands	r1, r3
 8049ed8:	e7e7      	b.n	8049eaa <RegionAU915LinkAdrReq+0xd6>
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 8049eda:	a912      	add	r1, sp, #72	; 0x48
 8049edc:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8049ee0:	f822 3c2c 	strh.w	r3, [r2, #-44]
 8049ee4:	e788      	b.n	8049df8 <RegionAU915LinkAdrReq+0x24>
    uint8_t bytesProcessed = 0;
 8049ee6:	f04f 0a07 	mov.w	sl, #7
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8049eea:	2302      	movs	r3, #2
 8049eec:	f88d 300c 	strb.w	r3, [sp, #12]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
    phyParam = RegionAU915GetPhyParam( &getPhy );
 8049ef0:	a803      	add	r0, sp, #12
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8049ef2:	7a6b      	ldrb	r3, [r5, #9]
 8049ef4:	f88d 300e 	strb.w	r3, [sp, #14]
    phyParam = RegionAU915GetPhyParam( &getPhy );
 8049ef8:	f7ff fcf4 	bl	80498e4 <RegionAU915GetPhyParam>

    linkAdrVerifyParams.Status = status;
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8049efc:	7aab      	ldrb	r3, [r5, #10]
 8049efe:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8049f02:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8049f06:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8049f0a:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8049f0e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8049f12:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8049f16:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8049f1a:	7aeb      	ldrb	r3, [r5, #11]
 8049f1c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8049f20:	7b2b      	ldrb	r3, [r5, #12]
 8049f22:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8049f26:	7b6b      	ldrb	r3, [r5, #13]
 8049f28:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    linkAdrVerifyParams.NbChannels = AU915_MAX_NB_CHANNELS;
 8049f2c:	2348      	movs	r3, #72	; 0x48
 8049f2e:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    linkAdrVerifyParams.ChannelsMask = channelsMask;
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
    linkAdrVerifyParams.MaxDatarate = AU915_TX_MAX_DATARATE;
 8049f32:	230d      	movs	r3, #13
 8049f34:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
    linkAdrVerifyParams.MinTxPower = AU915_MIN_TX_POWER;
 8049f38:	230e      	movs	r3, #14
 8049f3a:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    linkAdrVerifyParams.MaxTxPower = AU915_MAX_TX_POWER;
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8049f3e:	682b      	ldr	r3, [r5, #0]
    linkAdrVerifyParams.Status = status;
 8049f40:	f88d a02c 	strb.w	sl, [sp, #44]	; 0x2c
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8049f44:	f88d 003c 	strb.w	r0, [sp, #60]	; 0x3c
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8049f48:	930a      	str	r3, [sp, #40]	; 0x28
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 8049f4a:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8049fe8 <RegionAU915LinkAdrReq+0x214>
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 8049f4e:	960e      	str	r6, [sp, #56]	; 0x38

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8049f50:	ab05      	add	r3, sp, #20
 8049f52:	f10d 0216 	add.w	r2, sp, #22
 8049f56:	f10d 0115 	add.w	r1, sp, #21
 8049f5a:	a80a      	add	r0, sp, #40	; 0x28
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 8049f5c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8049f60:	f000 fa2b 	bl	804a3ba <RegionCommonLinkAdrReqVerifyParams>

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8049f64:	2807      	cmp	r0, #7
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8049f66:	4605      	mov	r5, r0
    if( status == 0x07 )
 8049f68:	d129      	bne.n	8049fbe <RegionAU915LinkAdrReq+0x1ea>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, channelsMask, 6 );
 8049f6a:	2206      	movs	r2, #6
 8049f6c:	4631      	mov	r1, r6
 8049f6e:	f50a 705c 	add.w	r0, sl, #880	; 0x370
 8049f72:	f000 f9be 	bl	804a2f2 <RegionCommonChanMaskCopy>

        NvmCtx.ChannelsMaskRemaining[0] &= NvmCtx.ChannelsMask[0];
 8049f76:	f8ba 337c 	ldrh.w	r3, [sl, #892]	; 0x37c
 8049f7a:	f8ba 2370 	ldrh.w	r2, [sl, #880]	; 0x370
 8049f7e:	4013      	ands	r3, r2
 8049f80:	f8aa 337c 	strh.w	r3, [sl, #892]	; 0x37c
        NvmCtx.ChannelsMaskRemaining[1] &= NvmCtx.ChannelsMask[1];
 8049f84:	f8ba 2372 	ldrh.w	r2, [sl, #882]	; 0x372
 8049f88:	f8ba 337e 	ldrh.w	r3, [sl, #894]	; 0x37e
 8049f8c:	4013      	ands	r3, r2
 8049f8e:	f8aa 337e 	strh.w	r3, [sl, #894]	; 0x37e
        NvmCtx.ChannelsMaskRemaining[2] &= NvmCtx.ChannelsMask[2];
 8049f92:	f8ba 2374 	ldrh.w	r2, [sl, #884]	; 0x374
 8049f96:	f8ba 3380 	ldrh.w	r3, [sl, #896]	; 0x380
 8049f9a:	4013      	ands	r3, r2
 8049f9c:	f8aa 3380 	strh.w	r3, [sl, #896]	; 0x380
        NvmCtx.ChannelsMaskRemaining[3] &= NvmCtx.ChannelsMask[3];
 8049fa0:	f8ba 2376 	ldrh.w	r2, [sl, #886]	; 0x376
 8049fa4:	f8ba 3382 	ldrh.w	r3, [sl, #898]	; 0x382
 8049fa8:	4013      	ands	r3, r2
 8049faa:	f8aa 3382 	strh.w	r3, [sl, #898]	; 0x382
        NvmCtx.ChannelsMaskRemaining[4] = NvmCtx.ChannelsMask[4];
 8049fae:	f8ba 3378 	ldrh.w	r3, [sl, #888]	; 0x378
 8049fb2:	f8aa 3384 	strh.w	r3, [sl, #900]	; 0x384
        NvmCtx.ChannelsMaskRemaining[5] = NvmCtx.ChannelsMask[5];
 8049fb6:	f8ba 337a 	ldrh.w	r3, [sl, #890]	; 0x37a
 8049fba:	f8aa 3386 	strh.w	r3, [sl, #902]	; 0x386
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8049fbe:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8049fc2:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
    *nbRepOut = linkAdrParams.NbRep;
 8049fc6:	9a01      	ldr	r2, [sp, #4]
    *txPowOut = linkAdrParams.TxPower;
 8049fc8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8049fcc:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 8049fd0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8049fd4:	7013      	strb	r3, [r2, #0]
    *nbBytesParsed = bytesProcessed;
 8049fd6:	9b1c      	ldr	r3, [sp, #112]	; 0x70

    return status;
}
 8049fd8:	4628      	mov	r0, r5
    *nbBytesParsed = bytesProcessed;
 8049fda:	701c      	strb	r4, [r3, #0]
}
 8049fdc:	b013      	add	sp, #76	; 0x4c
 8049fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8049fe2:	bf00      	nop
 8049fe4:	200093d4 	.word	0x200093d4
 8049fe8:	20009064 	.word	0x20009064

08049fec <RegionAU915RxParamSetupReq>:

uint8_t RegionAU915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8049fec:	b538      	push	{r3, r4, r5, lr}
 8049fee:	4605      	mov	r5, r0
    uint8_t status = 0x07;

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8049ff0:	6840      	ldr	r0, [r0, #4]
 8049ff2:	f7ff fc59 	bl	80498a8 <VerifyRfFreq>
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE ) == false )
 8049ff6:	220d      	movs	r2, #13
        status &= 0xFE; // Channel frequency KO
 8049ff8:	2800      	cmp	r0, #0
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE ) == false )
 8049ffa:	f04f 0108 	mov.w	r1, #8
 8049ffe:	f995 0000 	ldrsb.w	r0, [r5]
        status &= 0xFE; // Channel frequency KO
 804a002:	bf14      	ite	ne
 804a004:	2407      	movne	r4, #7
 804a006:	2406      	moveq	r4, #6
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE ) == false )
 804a008:	f000 f933 	bl	804a272 <RegionCommonValueInRange>
 804a00c:	b908      	cbnz	r0, 804a012 <RegionAU915RxParamSetupReq+0x26>
    {
        status &= 0xFD; // Datarate KO
 804a00e:	f004 0405 	and.w	r4, r4, #5
    }
    if( ( rxParamSetupReq->Datarate == DR_7 ) ||
 804a012:	f995 3000 	ldrsb.w	r3, [r5]
 804a016:	2b07      	cmp	r3, #7
 804a018:	d001      	beq.n	804a01e <RegionAU915RxParamSetupReq+0x32>
 804a01a:	2b0d      	cmp	r3, #13
 804a01c:	dd01      	ble.n	804a022 <RegionAU915RxParamSetupReq+0x36>
        ( rxParamSetupReq->Datarate > DR_13 ) )
    {
        status &= 0xFD; // Datarate KO
 804a01e:	f004 04fd 	and.w	r4, r4, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, AU915_MIN_RX1_DR_OFFSET, AU915_MAX_RX1_DR_OFFSET ) == false )
 804a022:	2206      	movs	r2, #6
 804a024:	2100      	movs	r1, #0
 804a026:	f995 0001 	ldrsb.w	r0, [r5, #1]
 804a02a:	f000 f922 	bl	804a272 <RegionCommonValueInRange>
 804a02e:	b908      	cbnz	r0, 804a034 <RegionAU915RxParamSetupReq+0x48>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 804a030:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
    }

    return status;
}
 804a034:	4620      	mov	r0, r4
 804a036:	bd38      	pop	{r3, r4, r5, pc}

0804a038 <RegionAU915NewChannelReq>:

uint8_t RegionAU915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Datarate and frequency KO
    return 0;
}
 804a038:	2000      	movs	r0, #0
 804a03a:	4770      	bx	lr

0804a03c <RegionAU915TxParamSetupReq>:

int8_t RegionAU915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Accept the request
    return 0;
}
 804a03c:	2000      	movs	r0, #0
 804a03e:	4770      	bx	lr

0804a040 <RegionAU915DlChannelReq>:
 804a040:	2000      	movs	r0, #0
 804a042:	4770      	bx	lr

0804a044 <RegionAU915CalcBackOff>:
    trialsCount++;
    return currentDr;
}

void RegionAU915CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
 804a044:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    RegionCommonCalcBackOffParams_t calcBackOffParams;

    calcBackOffParams.Channels = NvmCtx.Channels;
 804a046:	4b0d      	ldr	r3, [pc, #52]	; (804a07c <RegionAU915CalcBackOff+0x38>)
 804a048:	9301      	str	r3, [sp, #4]
    calcBackOffParams.Bands = NvmCtx.Bands;
 804a04a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 804a04e:	9302      	str	r3, [sp, #8]
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 804a050:	7843      	ldrb	r3, [r0, #1]
 804a052:	f88d 300c 	strb.w	r3, [sp, #12]
    calcBackOffParams.Joined = calcBackOff->Joined;
 804a056:	7803      	ldrb	r3, [r0, #0]
 804a058:	f88d 300d 	strb.w	r3, [sp, #13]
    calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 804a05c:	7883      	ldrb	r3, [r0, #2]
 804a05e:	f88d 300e 	strb.w	r3, [sp, #14]
    calcBackOffParams.Channel = calcBackOff->Channel;
 804a062:	78c3      	ldrb	r3, [r0, #3]
 804a064:	f88d 300f 	strb.w	r3, [sp, #15]
    calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 804a068:	6843      	ldr	r3, [r0, #4]
 804a06a:	9304      	str	r3, [sp, #16]
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 804a06c:	6883      	ldr	r3, [r0, #8]
 804a06e:	9305      	str	r3, [sp, #20]

    RegionCommonCalcBackOff( &calcBackOffParams );
 804a070:	a801      	add	r0, sp, #4
 804a072:	f000 fa79 	bl	804a568 <RegionCommonCalcBackOff>
}
 804a076:	b007      	add	sp, #28
 804a078:	f85d fb04 	ldr.w	pc, [sp], #4
 804a07c:	20009064 	.word	0x20009064

0804a080 <RegionAU915NextChannel>:

LoRaMacStatus_t RegionAU915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 804a080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804a084:	b099      	sub	sp, #100	; 0x64
 804a086:	4605      	mov	r5, r0
 804a088:	9104      	str	r1, [sp, #16]
 804a08a:	4693      	mov	fp, r2
    uint8_t nbEnabledChannels = 0;
    uint8_t delayTx = 0;
    uint8_t enabledChannels[AU915_MAX_NB_CHANNELS] = { 0 };
 804a08c:	2100      	movs	r1, #0
 804a08e:	2248      	movs	r2, #72	; 0x48
 804a090:	a806      	add	r0, sp, #24
{
 804a092:	461e      	mov	r6, r3
    uint8_t enabledChannels[AU915_MAX_NB_CHANNELS] = { 0 };
 804a094:	f002 fcce 	bl	804ca34 <memset>
    TimerTime_t nextTxDelay = 0;

    // Count 125kHz channels
    if( RegionCommonCountChannels( NvmCtx.ChannelsMaskRemaining, 0, 4 ) == 0 )
 804a098:	2204      	movs	r2, #4
 804a09a:	2100      	movs	r1, #0
 804a09c:	4846      	ldr	r0, [pc, #280]	; (804a1b8 <RegionAU915NextChannel+0x138>)
 804a09e:	f8df 9120 	ldr.w	r9, [pc, #288]	; 804a1c0 <RegionAU915NextChannel+0x140>
 804a0a2:	f000 f906 	bl	804a2b2 <RegionCommonCountChannels>
 804a0a6:	b930      	cbnz	r0, 804a0b6 <RegionAU915NextChannel+0x36>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( NvmCtx.ChannelsMaskRemaining, NvmCtx.ChannelsMask, 4  );
 804a0a8:	f509 715c 	add.w	r1, r9, #880	; 0x370
 804a0ac:	2204      	movs	r2, #4
 804a0ae:	f101 000c 	add.w	r0, r1, #12
 804a0b2:	f000 f91e 	bl	804a2f2 <RegionCommonChanMaskCopy>
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_6 )
 804a0b6:	f995 3008 	ldrsb.w	r3, [r5, #8]
 804a0ba:	2b05      	cmp	r3, #5
 804a0bc:	dd06      	ble.n	804a0cc <RegionAU915NextChannel+0x4c>
    {
        if( ( NvmCtx.ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 804a0be:	f899 3384 	ldrb.w	r3, [r9, #900]	; 0x384
 804a0c2:	b91b      	cbnz	r3, 804a0cc <RegionAU915NextChannel+0x4c>
        {
            NvmCtx.ChannelsMaskRemaining[4] = NvmCtx.ChannelsMask[4];
 804a0c4:	f8b9 3378 	ldrh.w	r3, [r9, #888]	; 0x378
 804a0c8:	f8a9 3384 	strh.w	r3, [r9, #900]	; 0x384
        }
    }

    TimerTime_t elapsed = TimerGetElapsedTime( nextChanParams->LastAggrTx );
 804a0cc:	6868      	ldr	r0, [r5, #4]
 804a0ce:	f000 fcef 	bl	804aab0 <TimerGetElapsedTime>
    if( ( nextChanParams->LastAggrTx == 0 ) || ( nextChanParams->AggrTimeOff <= elapsed ) )
 804a0d2:	686b      	ldr	r3, [r5, #4]
 804a0d4:	b113      	cbz	r3, 804a0dc <RegionAU915NextChannel+0x5c>
 804a0d6:	682b      	ldr	r3, [r5, #0]
 804a0d8:	4283      	cmp	r3, r0
 804a0da:	d860      	bhi.n	804a19e <RegionAU915NextChannel+0x11e>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 804a0dc:	2400      	movs	r4, #0

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, AU915_MAX_NB_BANDS );
 804a0de:	2301      	movs	r3, #1
 804a0e0:	7aa9      	ldrb	r1, [r5, #10]
 804a0e2:	7a68      	ldrb	r0, [r5, #9]
        *aggregatedTimeOff = 0;
 804a0e4:	6034      	str	r4, [r6, #0]
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, AU915_MAX_NB_BANDS );
 804a0e6:	4a35      	ldr	r2, [pc, #212]	; (804a1bc <RegionAU915NextChannel+0x13c>)
 804a0e8:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 804a1b8 <RegionAU915NextChannel+0x138>
 804a0ec:	f000 f915 	bl	804a31a <RegionCommonUpdateBandTimeOff>

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Datarate,
 804a0f0:	f995 3008 	ldrsb.w	r3, [r5, #8]
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, AU915_MAX_NB_BANDS );
 804a0f4:	9001      	str	r0, [sp, #4]
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Datarate,
 804a0f6:	9302      	str	r3, [sp, #8]
 804a0f8:	f5aa 785f 	sub.w	r8, sl, #892	; 0x37c
    uint8_t delayTransmission = 0;
 804a0fc:	4627      	mov	r7, r4
    uint8_t nbEnabledChannels = 0;
 804a0fe:	4625      	mov	r5, r4
 804a100:	b2e3      	uxtb	r3, r4
 804a102:	9303      	str	r3, [sp, #12]
{
 804a104:	2600      	movs	r6, #0
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
 804a106:	f8ba 3000 	ldrh.w	r3, [sl]
 804a10a:	4133      	asrs	r3, r6
 804a10c:	07db      	lsls	r3, r3, #31
 804a10e:	d51e      	bpl.n	804a14e <RegionAU915NextChannel+0xce>
 804a110:	230c      	movs	r3, #12
 804a112:	19a2      	adds	r2, r4, r6
 804a114:	fb03 9202 	mla	r2, r3, r2, r9
 804a118:	4373      	muls	r3, r6
                if( channels[i + j].Frequency == 0 )
 804a11a:	9305      	str	r3, [sp, #20]
 804a11c:	f858 1003 	ldr.w	r1, [r8, r3]
 804a120:	b1a9      	cbz	r1, 804a14e <RegionAU915NextChannel+0xce>
                                              channels[i + j].DrRange.Fields.Max ) == false )
 804a122:	7a11      	ldrb	r1, [r2, #8]
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 804a124:	9802      	ldr	r0, [sp, #8]
                                              channels[i + j].DrRange.Fields.Max ) == false )
 804a126:	f341 1203 	sbfx	r2, r1, #4, #4
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 804a12a:	f341 0103 	sbfx	r1, r1, #0, #4
 804a12e:	b252      	sxtb	r2, r2
 804a130:	b249      	sxtb	r1, r1
 804a132:	f000 f89e 	bl	804a272 <RegionCommonValueInRange>
 804a136:	b150      	cbz	r0, 804a14e <RegionAU915NextChannel+0xce>
                if( bands[channels[i + j].Band].TimeOff > 0 )
 804a138:	9b05      	ldr	r3, [sp, #20]
 804a13a:	4a21      	ldr	r2, [pc, #132]	; (804a1c0 <RegionAU915NextChannel+0x140>)
 804a13c:	4443      	add	r3, r8
 804a13e:	7a5b      	ldrb	r3, [r3, #9]
 804a140:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 804a144:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 804a148:	b303      	cbz	r3, 804a18c <RegionAU915NextChannel+0x10c>
                    delayTransmission++;
 804a14a:	3701      	adds	r7, #1
 804a14c:	b2ff      	uxtb	r7, r7
 804a14e:	3601      	adds	r6, #1
        for( uint8_t j = 0; j < 16; j++ )
 804a150:	2e10      	cmp	r6, #16
 804a152:	d1d8      	bne.n	804a106 <RegionAU915NextChannel+0x86>
 804a154:	3410      	adds	r4, #16
    for( uint8_t i = 0, k = 0; i < AU915_MAX_NB_CHANNELS; i += 16, k++ )
 804a156:	2c50      	cmp	r4, #80	; 0x50
 804a158:	f10a 0a02 	add.w	sl, sl, #2
 804a15c:	f108 08c0 	add.w	r8, r8, #192	; 0xc0
 804a160:	d1ce      	bne.n	804a100 <RegionAU915NextChannel+0x80>
    {
        delayTx++;
        nextTxDelay = nextChanParams->AggrTimeOff - elapsed;
    }

    if( nbEnabledChannels > 0 )
 804a162:	b31d      	cbz	r5, 804a1ac <RegionAU915NextChannel+0x12c>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 804a164:	1e69      	subs	r1, r5, #1
 804a166:	2000      	movs	r0, #0
 804a168:	f000 fd3e 	bl	804abe8 <randr>
 804a16c:	ab18      	add	r3, sp, #96	; 0x60
 804a16e:	4418      	add	r0, r3
 804a170:	9b04      	ldr	r3, [sp, #16]
 804a172:	f810 1c48 	ldrb.w	r1, [r0, #-72]
 804a176:	7019      	strb	r1, [r3, #0]
        // Disable the channel in the mask
        RegionCommonChanDisable( NvmCtx.ChannelsMaskRemaining, *channel, AU915_MAX_NB_CHANNELS - 8 );
 804a178:	2240      	movs	r2, #64	; 0x40
 804a17a:	480f      	ldr	r0, [pc, #60]	; (804a1b8 <RegionAU915NextChannel+0x138>)
 804a17c:	f000 f882 	bl	804a284 <RegionCommonChanDisable>

        *time = 0;
 804a180:	2000      	movs	r0, #0
 804a182:	f8cb 0000 	str.w	r0, [fp]
        }
        // Datarate not supported by any channel
        *time = 0;
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 804a186:	b019      	add	sp, #100	; 0x64
 804a188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                enabledChannels[nbEnabledChannels++] = i + j;
 804a18c:	aa18      	add	r2, sp, #96	; 0x60
 804a18e:	1c6b      	adds	r3, r5, #1
 804a190:	4415      	add	r5, r2
 804a192:	9a03      	ldr	r2, [sp, #12]
 804a194:	4432      	add	r2, r6
 804a196:	f805 2c48 	strb.w	r2, [r5, #-72]
 804a19a:	b2dd      	uxtb	r5, r3
 804a19c:	e7d7      	b.n	804a14e <RegionAU915NextChannel+0xce>
        nextTxDelay = nextChanParams->AggrTimeOff - elapsed;
 804a19e:	1a1b      	subs	r3, r3, r0
 804a1a0:	9301      	str	r3, [sp, #4]
            *time = nextTxDelay;
 804a1a2:	9b01      	ldr	r3, [sp, #4]
 804a1a4:	f8cb 3000 	str.w	r3, [fp]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 804a1a8:	200b      	movs	r0, #11
 804a1aa:	e7ec      	b.n	804a186 <RegionAU915NextChannel+0x106>
        if( delayTx > 0 )
 804a1ac:	2f00      	cmp	r7, #0
 804a1ae:	d1f8      	bne.n	804a1a2 <RegionAU915NextChannel+0x122>
        *time = 0;
 804a1b0:	f8cb 7000 	str.w	r7, [fp]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 804a1b4:	200c      	movs	r0, #12
 804a1b6:	e7e6      	b.n	804a186 <RegionAU915NextChannel+0x106>
 804a1b8:	200093e0 	.word	0x200093e0
 804a1bc:	200093c4 	.word	0x200093c4
 804a1c0:	20009064 	.word	0x20009064

0804a1c4 <RegionAU915ApplyDrOffset>:

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
}

uint8_t RegionAU915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 804a1c4:	b510      	push	{r4, lr}
    int8_t datarate = DatarateOffsetsAU915[dr][drOffset];
 804a1c6:	4c07      	ldr	r4, [pc, #28]	; (804a1e4 <RegionAU915ApplyDrOffset+0x20>)
 804a1c8:	2306      	movs	r3, #6
 804a1ca:	fb03 4101 	mla	r1, r3, r1, r4
 804a1ce:	4411      	add	r1, r2
 804a1d0:	f991 3088 	ldrsb.w	r3, [r1, #136]	; 0x88

    if( datarate < 0 )
 804a1d4:	2b00      	cmp	r3, #0
 804a1d6:	da03      	bge.n	804a1e0 <RegionAU915ApplyDrOffset+0x1c>
    {
        if( downlinkDwellTime == 0 )
 804a1d8:	2800      	cmp	r0, #0
        {
            datarate = AU915_TX_MIN_DATARATE;
        }
        else
        {
            datarate = AU915_DWELL_LIMIT_DATARATE;
 804a1da:	bf0c      	ite	eq
 804a1dc:	2300      	moveq	r3, #0
 804a1de:	2302      	movne	r3, #2
        }
    }
    return datarate;
}
 804a1e0:	b2d8      	uxtb	r0, r3
 804a1e2:	bd10      	pop	{r4, pc}
 804a1e4:	0804e5c8 	.word	0x0804e5c8

0804a1e8 <RegionCommonGetJoinDc>:

uint16_t RegionCommonGetJoinDc( TimerTime_t elapsedTime )
{
    uint16_t dutyCycle = 0;

    if( elapsedTime < 3600000 )
 804a1e8:	4b06      	ldr	r3, [pc, #24]	; (804a204 <RegionCommonGetJoinDc+0x1c>)
 804a1ea:	4298      	cmp	r0, r3
 804a1ec:	d908      	bls.n	804a200 <RegionCommonGetJoinDc+0x18>
    {
        dutyCycle = BACKOFF_DC_10_HOURS;
    }
    else
    {
        dutyCycle = BACKOFF_DC_24_HOURS;
 804a1ee:	4a06      	ldr	r2, [pc, #24]	; (804a208 <RegionCommonGetJoinDc+0x20>)
 804a1f0:	f242 7310 	movw	r3, #10000	; 0x2710
 804a1f4:	4290      	cmp	r0, r2
 804a1f6:	bf8c      	ite	hi
 804a1f8:	4618      	movhi	r0, r3
 804a1fa:	f44f 707a 	movls.w	r0, #1000	; 0x3e8
 804a1fe:	4770      	bx	lr
        dutyCycle = BACKOFF_DC_1_HOUR;
 804a200:	2064      	movs	r0, #100	; 0x64
    }
    return dutyCycle;
}
 804a202:	4770      	bx	lr
 804a204:	0036ee7f 	.word	0x0036ee7f
 804a208:	025c3f7f 	.word	0x025c3f7f

0804a20c <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 804a20c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 804a210:	429a      	cmp	r2, r3
{
 804a212:	9f07      	ldr	r7, [sp, #28]
    if( ( value >= min ) && ( value <= max ) )
 804a214:	db03      	blt.n	804a21e <RegionCommonChanVerifyDr+0x12>
 804a216:	f99d 3018 	ldrsb.w	r3, [sp, #24]
 804a21a:	429a      	cmp	r2, r3
 804a21c:	dd23      	ble.n	804a266 <RegionCommonChanVerifyDr+0x5a>
        return false;
 804a21e:	2000      	movs	r0, #0
}
 804a220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 804a224:	f831 8013 	ldrh.w	r8, [r1, r3, lsl #1]
 804a228:	2400      	movs	r4, #0
 804a22a:	fa48 f504 	asr.w	r5, r8, r4
 804a22e:	07ed      	lsls	r5, r5, #31
 804a230:	d50f      	bpl.n	804a252 <RegionCommonChanVerifyDr+0x46>
 804a232:	1935      	adds	r5, r6, r4
 804a234:	fb0e 7505 	mla	r5, lr, r5, r7
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 804a238:	f895 c008 	ldrb.w	ip, [r5, #8]
 804a23c:	f34c 1503 	sbfx	r5, ip, #4, #4
    if( ( value >= min ) && ( value <= max ) )
 804a240:	f00c 0c0f 	and.w	ip, ip, #15
 804a244:	4562      	cmp	r2, ip
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 804a246:	b26d      	sxtb	r5, r5
    if( ( value >= min ) && ( value <= max ) )
 804a248:	db03      	blt.n	804a252 <RegionCommonChanVerifyDr+0x46>
 804a24a:	f005 050f 	and.w	r5, r5, #15
 804a24e:	42aa      	cmp	r2, r5
 804a250:	dd0d      	ble.n	804a26e <RegionCommonChanVerifyDr+0x62>
 804a252:	3401      	adds	r4, #1
        for( uint8_t j = 0; j < 16; j++ )
 804a254:	2c10      	cmp	r4, #16
 804a256:	d1e8      	bne.n	804a22a <RegionCommonChanVerifyDr+0x1e>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 804a258:	3301      	adds	r3, #1
 804a25a:	b2db      	uxtb	r3, r3
 804a25c:	011e      	lsls	r6, r3, #4
 804a25e:	b2f6      	uxtb	r6, r6
 804a260:	42b0      	cmp	r0, r6
 804a262:	d8df      	bhi.n	804a224 <RegionCommonChanVerifyDr+0x18>
 804a264:	e7db      	b.n	804a21e <RegionCommonChanVerifyDr+0x12>
 804a266:	2300      	movs	r3, #0
 804a268:	f04f 0e0c 	mov.w	lr, #12
 804a26c:	e7f6      	b.n	804a25c <RegionCommonChanVerifyDr+0x50>
                    return true;
 804a26e:	2001      	movs	r0, #1
 804a270:	e7d6      	b.n	804a220 <RegionCommonChanVerifyDr+0x14>

0804a272 <RegionCommonValueInRange>:
    if( ( value >= min ) && ( value <= max ) )
 804a272:	4288      	cmp	r0, r1
 804a274:	db04      	blt.n	804a280 <RegionCommonValueInRange+0xe>
    {
        return 1;
 804a276:	4290      	cmp	r0, r2
 804a278:	bfcc      	ite	gt
 804a27a:	2000      	movgt	r0, #0
 804a27c:	2001      	movle	r0, #1
 804a27e:	4770      	bx	lr
    }
    return 0;
 804a280:	2000      	movs	r0, #0
}
 804a282:	4770      	bx	lr

0804a284 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;
 804a284:	090b      	lsrs	r3, r1, #4

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 804a286:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
{
 804a28a:	b510      	push	{r4, lr}
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 804a28c:	d80f      	bhi.n	804a2ae <RegionCommonChanDisable+0x2a>
 804a28e:	4291      	cmp	r1, r2
 804a290:	d20d      	bcs.n	804a2ae <RegionCommonChanDisable+0x2a>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 804a292:	b21a      	sxth	r2, r3
 804a294:	f001 010f 	and.w	r1, r1, #15
 804a298:	f830 4012 	ldrh.w	r4, [r0, r2, lsl #1]
 804a29c:	2301      	movs	r3, #1
 804a29e:	fa03 f101 	lsl.w	r1, r3, r1
 804a2a2:	ea24 0101 	bic.w	r1, r4, r1
 804a2a6:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]

    return true;
 804a2aa:	4618      	mov	r0, r3
}
 804a2ac:	bd10      	pop	{r4, pc}
        return false;
 804a2ae:	2000      	movs	r0, #0
 804a2b0:	e7fc      	b.n	804a2ac <RegionCommonChanDisable+0x28>

0804a2b2 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 804a2b2:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 804a2b4:	b140      	cbz	r0, 804a2c8 <RegionCommonCountChannels+0x16>
 804a2b6:	2300      	movs	r3, #0
 804a2b8:	eb00 0641 	add.w	r6, r0, r1, lsl #1
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 804a2bc:	2701      	movs	r7, #1
    uint8_t nbChannels = 0;
 804a2be:	4618      	mov	r0, r3
    {
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 804a2c0:	18cc      	adds	r4, r1, r3
 804a2c2:	b2e4      	uxtb	r4, r4
 804a2c4:	42a2      	cmp	r2, r4
 804a2c6:	d800      	bhi.n	804a2ca <RegionCommonCountChannels+0x18>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
    }

    return nbChannels;
}
 804a2c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nbChannels += CountChannels( channelsMask[i], 16 );
 804a2ca:	2500      	movs	r5, #0
 804a2cc:	f836 c013 	ldrh.w	ip, [r6, r3, lsl #1]
    uint8_t nbActiveBits = 0;
 804a2d0:	462c      	mov	r4, r5
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 804a2d2:	fa07 fe05 	lsl.w	lr, r7, r5
 804a2d6:	ea3e 0e0c 	bics.w	lr, lr, ip
            nbActiveBits++;
 804a2da:	bf08      	it	eq
 804a2dc:	3401      	addeq	r4, #1
 804a2de:	f105 0501 	add.w	r5, r5, #1
 804a2e2:	bf08      	it	eq
 804a2e4:	b2e4      	uxtbeq	r4, r4
    for( uint8_t j = 0; j < nbBits; j++ )
 804a2e6:	2d10      	cmp	r5, #16
 804a2e8:	d1f3      	bne.n	804a2d2 <RegionCommonCountChannels+0x20>
        nbChannels += CountChannels( channelsMask[i], 16 );
 804a2ea:	4420      	add	r0, r4
 804a2ec:	b2c0      	uxtb	r0, r0
 804a2ee:	3301      	adds	r3, #1
 804a2f0:	e7e6      	b.n	804a2c0 <RegionCommonCountChannels+0xe>

0804a2f2 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 804a2f2:	b510      	push	{r4, lr}
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 804a2f4:	b100      	cbz	r0, 804a2f8 <RegionCommonChanMaskCopy+0x6>
 804a2f6:	b949      	cbnz	r1, 804a30c <RegionCommonChanMaskCopy+0x1a>
        for( uint8_t i = 0; i < len; i++ )
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
        }
    }
}
 804a2f8:	bd10      	pop	{r4, pc}
            channelsMaskDest[i] = channelsMaskSrc[i];
 804a2fa:	f831 4013 	ldrh.w	r4, [r1, r3, lsl #1]
 804a2fe:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
 804a302:	3301      	adds	r3, #1
        for( uint8_t i = 0; i < len; i++ )
 804a304:	b2dc      	uxtb	r4, r3
 804a306:	42a2      	cmp	r2, r4
 804a308:	d8f7      	bhi.n	804a2fa <RegionCommonChanMaskCopy+0x8>
 804a30a:	e7f5      	b.n	804a2f8 <RegionCommonChanMaskCopy+0x6>
 804a30c:	2300      	movs	r3, #0
 804a30e:	e7f9      	b.n	804a304 <RegionCommonChanMaskCopy+0x12>

0804a310 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( bool joined, Band_t* band, TimerTime_t lastTxDone )
{
    if( joined == true )
    {
        band->LastTxDoneTime = lastTxDone;
 804a310:	608a      	str	r2, [r1, #8]
    if( joined == true )
 804a312:	b100      	cbz	r0, 804a316 <RegionCommonSetBandTxDone+0x6>
 804a314:	4770      	bx	lr
    }
    else
    {
        band->LastTxDoneTime = lastTxDone;
        band->LastJoinTxDoneTime = lastTxDone;
 804a316:	604a      	str	r2, [r1, #4]
    }
}
 804a318:	4770      	bx	lr

0804a31a <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, bool dutyCycle, Band_t* bands, uint8_t nbBands )
{
 804a31a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804a31e:	4681      	mov	r9, r0
 804a320:	460e      	mov	r6, r1
 804a322:	4614      	mov	r4, r2
 804a324:	eb02 1803 	add.w	r8, r2, r3, lsl #4
    TimerTime_t nextTxDelay = TIMERTIME_T_MAX;
 804a328:	f04f 35ff 	mov.w	r5, #4294967295
            if( dutyCycle == true )
            {
                TimerTime_t elapsed = TimerGetElapsedTime( bands[i].LastTxDoneTime );
                if( bands[i].TimeOff <= elapsed )
                {
                    bands[i].TimeOff = 0;
 804a32c:	2700      	movs	r7, #0
    for( uint8_t i = 0; i < nbBands; i++ )
 804a32e:	45a0      	cmp	r8, r4
 804a330:	d105      	bne.n	804a33e <RegionCommonUpdateBandTimeOff+0x24>
                bands[i].TimeOff = 0;
            }
        }
    }

    return ( nextTxDelay == TIMERTIME_T_MAX ) ? 0 : nextTxDelay;
 804a332:	1c6b      	adds	r3, r5, #1
}
 804a334:	bf14      	ite	ne
 804a336:	4628      	movne	r0, r5
 804a338:	2000      	moveq	r0, #0
 804a33a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if( joined == false )
 804a33e:	f1b9 0f00 	cmp.w	r9, #0
 804a342:	d118      	bne.n	804a376 <RegionCommonUpdateBandTimeOff+0x5c>
            TimerTime_t elapsedJoin = TimerGetElapsedTime( bands[i].LastJoinTxDoneTime );
 804a344:	6860      	ldr	r0, [r4, #4]
 804a346:	f000 fbb3 	bl	804aab0 <TimerGetElapsedTime>
 804a34a:	4682      	mov	sl, r0
            TimerTime_t elapsedTx = TimerGetElapsedTime( bands[i].LastTxDoneTime );
 804a34c:	68a0      	ldr	r0, [r4, #8]
 804a34e:	f000 fbaf 	bl	804aab0 <TimerGetElapsedTime>
            TimerTime_t txDoneTime =  MAX( elapsedJoin,
 804a352:	2e00      	cmp	r6, #0
 804a354:	bf08      	it	eq
 804a356:	2000      	moveq	r0, #0
 804a358:	4550      	cmp	r0, sl
 804a35a:	bf38      	it	cc
 804a35c:	4650      	movcc	r0, sl
                if( bands[i].TimeOff <= elapsed )
 804a35e:	68e3      	ldr	r3, [r4, #12]
 804a360:	4283      	cmp	r3, r0
                    bands[i].TimeOff = 0;
 804a362:	bf98      	it	ls
 804a364:	60e7      	strls	r7, [r4, #12]
                if( bands[i].TimeOff != 0 )
 804a366:	68e3      	ldr	r3, [r4, #12]
 804a368:	b11b      	cbz	r3, 804a372 <RegionCommonUpdateBandTimeOff+0x58>
                    nextTxDelay = MIN( bands[i].TimeOff - elapsed, nextTxDelay );
 804a36a:	1a1b      	subs	r3, r3, r0
 804a36c:	429d      	cmp	r5, r3
 804a36e:	bf28      	it	cs
 804a370:	461d      	movcs	r5, r3
 804a372:	3410      	adds	r4, #16
 804a374:	e7db      	b.n	804a32e <RegionCommonUpdateBandTimeOff+0x14>
            if( dutyCycle == true )
 804a376:	b11e      	cbz	r6, 804a380 <RegionCommonUpdateBandTimeOff+0x66>
                TimerTime_t elapsed = TimerGetElapsedTime( bands[i].LastTxDoneTime );
 804a378:	68a0      	ldr	r0, [r4, #8]
 804a37a:	f000 fb99 	bl	804aab0 <TimerGetElapsedTime>
 804a37e:	e7ee      	b.n	804a35e <RegionCommonUpdateBandTimeOff+0x44>
                bands[i].TimeOff = 0;
 804a380:	60e6      	str	r6, [r4, #12]
                nextTxDelay = 0;
 804a382:	4635      	mov	r5, r6
 804a384:	e7f5      	b.n	804a372 <RegionCommonUpdateBandTimeOff+0x58>

0804a386 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 804a386:	7803      	ldrb	r3, [r0, #0]
 804a388:	2b03      	cmp	r3, #3
 804a38a:	d114      	bne.n	804a3b6 <RegionCommonParseLinkAdrReq+0x30>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 804a38c:	7843      	ldrb	r3, [r0, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 804a38e:	f003 020f 	and.w	r2, r3, #15
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 804a392:	091b      	lsrs	r3, r3, #4
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 804a394:	708a      	strb	r2, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 804a396:	704b      	strb	r3, [r1, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 804a398:	7883      	ldrb	r3, [r0, #2]
 804a39a:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 804a39c:	78c2      	ldrb	r2, [r0, #3]
 804a39e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 804a3a2:	808b      	strh	r3, [r1, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 804a3a4:	7903      	ldrb	r3, [r0, #4]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 804a3a6:	f3c3 1202 	ubfx	r2, r3, #4, #3
        linkAdrParams->NbRep &= 0x0F;
 804a3aa:	f003 030f 	and.w	r3, r3, #15
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 804a3ae:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 804a3b0:	700b      	strb	r3, [r1, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 804a3b2:	2005      	movs	r0, #5
 804a3b4:	4770      	bx	lr
    uint8_t retIndex = 0;
 804a3b6:	2000      	movs	r0, #0
    }
    return retIndex;
}
 804a3b8:	4770      	bx	lr

0804a3ba <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 804a3ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804a3be:	4699      	mov	r9, r3
    int8_t datarate = verifyParams->Datarate;
    int8_t txPower = verifyParams->TxPower;
    int8_t nbRepetitions = verifyParams->NbRep;

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 804a3c0:	7943      	ldrb	r3, [r0, #5]
    uint8_t status = verifyParams->Status;
 804a3c2:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 804a3c4:	f990 8006 	ldrsb.w	r8, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 804a3c8:	f990 7007 	ldrsb.w	r7, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 804a3cc:	7a06      	ldrb	r6, [r0, #8]
{
 804a3ce:	4604      	mov	r4, r0
 804a3d0:	468b      	mov	fp, r1
 804a3d2:	4692      	mov	sl, r2
    if( verifyParams->AdrEnabled == false )
 804a3d4:	b34b      	cbz	r3, 804a42a <RegionCommonLinkAdrReqVerifyParams+0x70>
    int8_t nbRepetitions = verifyParams->NbRep;
 804a3d6:	b276      	sxtb	r6, r6
        nbRepetitions = verifyParams->CurrentNbRep;
        datarate =  verifyParams->CurrentDatarate;
        txPower =  verifyParams->CurrentTxPower;
    }

    if( status != 0 )
 804a3d8:	b1ed      	cbz	r5, 804a416 <RegionCommonLinkAdrReqVerifyParams+0x5c>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 804a3da:	69a2      	ldr	r2, [r4, #24]
 804a3dc:	9201      	str	r2, [sp, #4]
 804a3de:	f994 2015 	ldrsb.w	r2, [r4, #21]
 804a3e2:	9200      	str	r2, [sp, #0]
 804a3e4:	f994 3014 	ldrsb.w	r3, [r4, #20]
 804a3e8:	7b20      	ldrb	r0, [r4, #12]
 804a3ea:	6921      	ldr	r1, [r4, #16]
 804a3ec:	4642      	mov	r2, r8
 804a3ee:	f7ff ff0d 	bl	804a20c <RegionCommonChanVerifyDr>
 804a3f2:	b908      	cbnz	r0, 804a3f8 <RegionCommonLinkAdrReqVerifyParams+0x3e>
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
        {
            status &= 0xFD; // Datarate KO
 804a3f4:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 804a3f8:	f994 301d 	ldrsb.w	r3, [r4, #29]
 804a3fc:	f994 201c 	ldrsb.w	r2, [r4, #28]
    if( ( value >= min ) && ( value <= max ) )
 804a400:	42bb      	cmp	r3, r7
 804a402:	dc19      	bgt.n	804a438 <RegionCommonLinkAdrReqVerifyParams+0x7e>
 804a404:	42ba      	cmp	r2, r7
 804a406:	da01      	bge.n	804a40c <RegionCommonLinkAdrReqVerifyParams+0x52>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 804a408:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 804a40c:	2d07      	cmp	r5, #7
 804a40e:	d102      	bne.n	804a416 <RegionCommonLinkAdrReqVerifyParams+0x5c>
    {
        if( nbRepetitions == 0 )
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 804a410:	2e00      	cmp	r6, #0
 804a412:	bf08      	it	eq
 804a414:	2601      	moveq	r6, #1
    *dr = datarate;
    *txPow = txPower;
    *nbRep = nbRepetitions;

    return status;
}
 804a416:	4628      	mov	r0, r5
    *dr = datarate;
 804a418:	f88b 8000 	strb.w	r8, [fp]
    *txPow = txPower;
 804a41c:	f88a 7000 	strb.w	r7, [sl]
    *nbRep = nbRepetitions;
 804a420:	f889 6000 	strb.w	r6, [r9]
}
 804a424:	b003      	add	sp, #12
 804a426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        nbRepetitions = verifyParams->CurrentNbRep;
 804a42a:	f990 600b 	ldrsb.w	r6, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 804a42e:	f990 8009 	ldrsb.w	r8, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 804a432:	f990 700a 	ldrsb.w	r7, [r0, #10]
 804a436:	e7cf      	b.n	804a3d8 <RegionCommonLinkAdrReqVerifyParams+0x1e>
    if( ( value >= min ) && ( value <= max ) )
 804a438:	461f      	mov	r7, r3
 804a43a:	e7e7      	b.n	804a40c <RegionCommonLinkAdrReqVerifyParams+0x52>

0804a43c <RegionCommonComputeSymbolTimeLoRa>:

double RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
 804a43c:	2301      	movs	r3, #1
{
 804a43e:	b570      	push	{r4, r5, r6, lr}
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
 804a440:	fa03 f000 	lsl.w	r0, r3, r0
{
 804a444:	460e      	mov	r6, r1
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
 804a446:	f7f6 f99d 	bl	8040784 <__aeabi_i2d>
 804a44a:	4604      	mov	r4, r0
 804a44c:	4630      	mov	r0, r6
 804a44e:	460d      	mov	r5, r1
 804a450:	f7f6 f988 	bl	8040764 <__aeabi_ui2d>
 804a454:	4602      	mov	r2, r0
 804a456:	460b      	mov	r3, r1
 804a458:	4620      	mov	r0, r4
 804a45a:	4629      	mov	r1, r5
 804a45c:	f7f6 fb26 	bl	8040aac <__aeabi_ddiv>
 804a460:	2200      	movs	r2, #0
 804a462:	4b03      	ldr	r3, [pc, #12]	; (804a470 <RegionCommonComputeSymbolTimeLoRa+0x34>)
 804a464:	f7f6 f9f8 	bl	8040858 <__aeabi_dmul>
}
 804a468:	ec41 0b10 	vmov	d0, r0, r1
 804a46c:	bd70      	pop	{r4, r5, r6, pc}
 804a46e:	bf00      	nop
 804a470:	408f4000 	.word	0x408f4000

0804a474 <RegionCommonComputeRxWindowParameters>:
{
    return ( 8.0 / ( double )phyDr ); // 1 symbol equals 1 byte
}

void RegionCommonComputeRxWindowParameters( double tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
 804a474:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804a478:	ec57 6b10 	vmov	r6, r7, d0
 804a47c:	4604      	mov	r4, r0
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 804a47e:	3804      	subs	r0, #4
 804a480:	0040      	lsls	r0, r0, #1
{
 804a482:	4615      	mov	r5, r2
 804a484:	469a      	mov	sl, r3
 804a486:	468b      	mov	fp, r1
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 804a488:	f7f6 f97c 	bl	8040784 <__aeabi_i2d>
 804a48c:	4632      	mov	r2, r6
 804a48e:	463b      	mov	r3, r7
 804a490:	f7f6 f9e2 	bl	8040858 <__aeabi_dmul>
 804a494:	4680      	mov	r8, r0
 804a496:	ea4f 004b 	mov.w	r0, fp, lsl #1
 804a49a:	4689      	mov	r9, r1
 804a49c:	f7f6 f962 	bl	8040764 <__aeabi_ui2d>
 804a4a0:	4602      	mov	r2, r0
 804a4a2:	460b      	mov	r3, r1
 804a4a4:	4640      	mov	r0, r8
 804a4a6:	4649      	mov	r1, r9
 804a4a8:	f7f6 f820 	bl	80404ec <__adddf3>
 804a4ac:	4632      	mov	r2, r6
 804a4ae:	463b      	mov	r3, r7
 804a4b0:	f7f6 fafc 	bl	8040aac <__aeabi_ddiv>
 804a4b4:	ec41 0b10 	vmov	d0, r0, r1
 804a4b8:	f003 fc96 	bl	804dde8 <ceil>
 804a4bc:	ec51 0b10 	vmov	r0, r1, d0
 804a4c0:	f7f6 fc8c 	bl	8040ddc <__aeabi_d2uiz>
 804a4c4:	4284      	cmp	r4, r0
 804a4c6:	bf38      	it	cc
 804a4c8:	4604      	movcc	r4, r0
    *windowOffset = ( int32_t )ceil( ( 4.0 * tSymbol ) - ( ( *windowTimeout * tSymbol ) / 2.0 ) - wakeUpTime );
 804a4ca:	2200      	movs	r2, #0
 804a4cc:	4b18      	ldr	r3, [pc, #96]	; (804a530 <RegionCommonComputeRxWindowParameters+0xbc>)
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 804a4ce:	f8ca 4000 	str.w	r4, [sl]
    *windowOffset = ( int32_t )ceil( ( 4.0 * tSymbol ) - ( ( *windowTimeout * tSymbol ) / 2.0 ) - wakeUpTime );
 804a4d2:	4630      	mov	r0, r6
 804a4d4:	4639      	mov	r1, r7
 804a4d6:	f7f6 f9bf 	bl	8040858 <__aeabi_dmul>
 804a4da:	4680      	mov	r8, r0
 804a4dc:	4620      	mov	r0, r4
 804a4de:	4689      	mov	r9, r1
 804a4e0:	f7f6 f940 	bl	8040764 <__aeabi_ui2d>
 804a4e4:	4632      	mov	r2, r6
 804a4e6:	463b      	mov	r3, r7
 804a4e8:	f7f6 f9b6 	bl	8040858 <__aeabi_dmul>
 804a4ec:	2200      	movs	r2, #0
 804a4ee:	4b11      	ldr	r3, [pc, #68]	; (804a534 <RegionCommonComputeRxWindowParameters+0xc0>)
 804a4f0:	f7f6 f9b2 	bl	8040858 <__aeabi_dmul>
 804a4f4:	4602      	mov	r2, r0
 804a4f6:	460b      	mov	r3, r1
 804a4f8:	4640      	mov	r0, r8
 804a4fa:	4649      	mov	r1, r9
 804a4fc:	f7f5 fff4 	bl	80404e8 <__aeabi_dsub>
 804a500:	4606      	mov	r6, r0
 804a502:	4628      	mov	r0, r5
 804a504:	460f      	mov	r7, r1
 804a506:	f7f6 f92d 	bl	8040764 <__aeabi_ui2d>
 804a50a:	460b      	mov	r3, r1
 804a50c:	4602      	mov	r2, r0
 804a50e:	4639      	mov	r1, r7
 804a510:	4630      	mov	r0, r6
 804a512:	f7f5 ffe9 	bl	80404e8 <__aeabi_dsub>
 804a516:	ec41 0b10 	vmov	d0, r0, r1
 804a51a:	f003 fc65 	bl	804dde8 <ceil>
 804a51e:	ec51 0b10 	vmov	r0, r1, d0
 804a522:	f7f6 fc33 	bl	8040d8c <__aeabi_d2iz>
 804a526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 804a528:	6018      	str	r0, [r3, #0]
}
 804a52a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804a52e:	bf00      	nop
 804a530:	40100000 	.word	0x40100000
 804a534:	3fe00000 	.word	0x3fe00000

0804a538 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 804a538:	0040      	lsls	r0, r0, #1
 804a53a:	ee07 0a90 	vmov	s15, r0
 804a53e:	eef8 7a67 	vcvt.f32.u32	s15, s15
{
 804a542:	b508      	push	{r3, lr}
    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 804a544:	ee30 0a67 	vsub.f32	s0, s0, s15
 804a548:	ee70 7a60 	vsub.f32	s15, s0, s1
 804a54c:	ee17 0a90 	vmov	r0, s15
 804a550:	f7f6 f92a 	bl	80407a8 <__aeabi_f2d>
 804a554:	ec41 0b10 	vmov	d0, r0, r1
 804a558:	f003 fcc6 	bl	804dee8 <floor>
 804a55c:	ec51 0b10 	vmov	r0, r1, d0
 804a560:	f7f6 fc14 	bl	8040d8c <__aeabi_d2iz>

    return phyTxPower;
}
 804a564:	b240      	sxtb	r0, r0
 804a566:	bd08      	pop	{r3, pc}

0804a568 <RegionCommonCalcBackOff>:

void RegionCommonCalcBackOff( RegionCommonCalcBackOffParams_t* calcBackOffParams )
{
 804a568:	b570      	push	{r4, r5, r6, lr}
    uint8_t bandIdx = calcBackOffParams->Channels[calcBackOffParams->Channel].Band;
 804a56a:	7ac3      	ldrb	r3, [r0, #11]
 804a56c:	6802      	ldr	r2, [r0, #0]
 804a56e:	7a86      	ldrb	r6, [r0, #10]
 804a570:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 804a574:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    uint16_t dutyCycle = calcBackOffParams->Bands[bandIdx].DCycle;
 804a578:	6842      	ldr	r2, [r0, #4]
 804a57a:	7a5b      	ldrb	r3, [r3, #9]
 804a57c:	011b      	lsls	r3, r3, #4
 804a57e:	18d5      	adds	r5, r2, r3
 804a580:	5ad1      	ldrh	r1, [r2, r3]
    uint16_t joinDutyCycle = 0;

    // Reset time-off to initial value.
    calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 804a582:	2300      	movs	r3, #0
 804a584:	60eb      	str	r3, [r5, #12]

    if( calcBackOffParams->Joined == false )
 804a586:	7a43      	ldrb	r3, [r0, #9]
{
 804a588:	4604      	mov	r4, r0
    if( calcBackOffParams->Joined == false )
 804a58a:	b973      	cbnz	r3, 804a5aa <RegionCommonCalcBackOff+0x42>
    {
        // Get the join duty cycle
        joinDutyCycle = RegionCommonGetJoinDc( calcBackOffParams->ElapsedTime );
 804a58c:	68c0      	ldr	r0, [r0, #12]
 804a58e:	f7ff fe2b 	bl	804a1e8 <RegionCommonGetJoinDc>
        // Apply the most restricting duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
        // Reset the timeoff if the last frame was not a join request and when the duty cycle is not enabled
        if( ( calcBackOffParams->DutyCycleEnabled == false ) && ( calcBackOffParams->LastTxIsJoinRequest == false ) )
 804a592:	b90e      	cbnz	r6, 804a598 <RegionCommonCalcBackOff+0x30>
 804a594:	7a23      	ldrb	r3, [r4, #8]
 804a596:	b153      	cbz	r3, 804a5ae <RegionCommonCalcBackOff+0x46>
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 804a598:	4281      	cmp	r1, r0
 804a59a:	bf38      	it	cc
 804a59c:	4601      	movcc	r1, r0
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
        }
        else
        {
            // Apply band time-off.
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 804a59e:	b289      	uxth	r1, r1
    }
    else
    {
        if( calcBackOffParams->DutyCycleEnabled == true )
        {
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 804a5a0:	6923      	ldr	r3, [r4, #16]
 804a5a2:	3901      	subs	r1, #1
 804a5a4:	4359      	muls	r1, r3
 804a5a6:	60e9      	str	r1, [r5, #12]
        else
        {
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
        }
    }
}
 804a5a8:	e001      	b.n	804a5ae <RegionCommonCalcBackOff+0x46>
        if( calcBackOffParams->DutyCycleEnabled == true )
 804a5aa:	2e00      	cmp	r6, #0
 804a5ac:	d1f8      	bne.n	804a5a0 <RegionCommonCalcBackOff+0x38>
}
 804a5ae:	bd70      	pop	{r4, r5, r6, pc}

0804a5b0 <LPM_SetOffMode>:

/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/
void LPM_SetOffMode(LPM_Id_t id, LPM_SetMode_t mode)
{
 804a5b0:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 804a5b2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 804a5b6:	b672      	cpsid	i
  BACKUP_PRIMASK();
  
  DISABLE_IRQ( );
  
  
  switch(mode)
 804a5b8:	b141      	cbz	r1, 804a5cc <LPM_SetOffMode+0x1c>
 804a5ba:	2901      	cmp	r1, #1
 804a5bc:	d103      	bne.n	804a5c6 <LPM_SetOffMode+0x16>
  {
    case LPM_Disable:
    {
      OffModeDisable |= (uint32_t)id;
 804a5be:	4b06      	ldr	r3, [pc, #24]	; (804a5d8 <LPM_SetOffMode+0x28>)
 804a5c0:	681a      	ldr	r2, [r3, #0]
 804a5c2:	4302      	orrs	r2, r0
 804a5c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 804a5c6:	f384 8810 	msr	PRIMASK, r4
  }
  
  RESTORE_PRIMASK( );

  return;
}
 804a5ca:	bd10      	pop	{r4, pc}
      OffModeDisable &= ~(uint32_t)id;
 804a5cc:	4902      	ldr	r1, [pc, #8]	; (804a5d8 <LPM_SetOffMode+0x28>)
 804a5ce:	680b      	ldr	r3, [r1, #0]
 804a5d0:	ea23 0300 	bic.w	r3, r3, r0
 804a5d4:	600b      	str	r3, [r1, #0]
      break;
 804a5d6:	e7f6      	b.n	804a5c6 <LPM_SetOffMode+0x16>
 804a5d8:	200093fc 	.word	0x200093fc

0804a5dc <LPM_SetStopMode>:

void LPM_SetStopMode(LPM_Id_t id, LPM_SetMode_t mode)
{
 804a5dc:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 804a5de:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 804a5e2:	b672      	cpsid	i
  BACKUP_PRIMASK();
  
  DISABLE_IRQ( );
  
  
  switch(mode)
 804a5e4:	b141      	cbz	r1, 804a5f8 <LPM_SetStopMode+0x1c>
 804a5e6:	2901      	cmp	r1, #1
 804a5e8:	d103      	bne.n	804a5f2 <LPM_SetStopMode+0x16>
  {
    case LPM_Disable:
    {
      StopModeDisable |= (uint32_t)id;
 804a5ea:	4b06      	ldr	r3, [pc, #24]	; (804a604 <LPM_SetStopMode+0x28>)
 804a5ec:	685a      	ldr	r2, [r3, #4]
 804a5ee:	4302      	orrs	r2, r0
 804a5f0:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 804a5f2:	f384 8810 	msr	PRIMASK, r4
      break;
  }
  RESTORE_PRIMASK( );

  return;
}
 804a5f6:	bd10      	pop	{r4, pc}
      StopModeDisable &= ~(uint32_t)id;
 804a5f8:	4902      	ldr	r1, [pc, #8]	; (804a604 <LPM_SetStopMode+0x28>)
 804a5fa:	684b      	ldr	r3, [r1, #4]
 804a5fc:	ea23 0300 	bic.w	r3, r3, r0
 804a600:	604b      	str	r3, [r1, #4]
      break;
 804a602:	e7f6      	b.n	804a5f2 <LPM_SetStopMode+0x16>
 804a604:	200093fc 	.word	0x200093fc

0804a608 <LPM_GetMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 804a608:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 804a60c:	b672      	cpsid	i

  BACKUP_PRIMASK();
  
  DISABLE_IRQ( );

  if(StopModeDisable )
 804a60e:	4b06      	ldr	r3, [pc, #24]	; (804a628 <LPM_GetMode+0x20>)
 804a610:	6859      	ldr	r1, [r3, #4]
 804a612:	b939      	cbnz	r1, 804a624 <LPM_GetMode+0x1c>
  {
    mode_selected = LPM_SleepMode;
  }
  else
  {
    if(OffModeDisable)
 804a614:	681b      	ldr	r3, [r3, #0]
 804a616:	2b00      	cmp	r3, #0
    {
      mode_selected = LPM_StopMode;
    }
    else
    {
      mode_selected = LPM_OffMode;
 804a618:	bf14      	ite	ne
 804a61a:	2001      	movne	r0, #1
 804a61c:	2002      	moveq	r0, #2
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 804a61e:	f382 8810 	msr	PRIMASK, r2
  }

  RESTORE_PRIMASK( );

  return mode_selected;
}
 804a622:	4770      	bx	lr
    mode_selected = LPM_SleepMode;
 804a624:	2000      	movs	r0, #0
 804a626:	e7fa      	b.n	804a61e <LPM_GetMode+0x16>
 804a628:	200093fc 	.word	0x200093fc

0804a62c <add_elementSize_and_inc_writeIdx>:
  }
}

static void add_elementSize_and_inc_writeIdx(queue_param_t* queue,uint16_t element_size)
{
  queue->queue_buff[queue->queue_write_idx++]=(uint8_t) (element_size>>8);
 804a62c:	8843      	ldrh	r3, [r0, #2]
 804a62e:	6882      	ldr	r2, [r0, #8]
{
 804a630:	b510      	push	{r4, lr}
  queue->queue_buff[queue->queue_write_idx++]=(uint8_t) (element_size>>8);
 804a632:	1c5c      	adds	r4, r3, #1
 804a634:	8044      	strh	r4, [r0, #2]
 804a636:	0a0c      	lsrs	r4, r1, #8
 804a638:	54d4      	strb	r4, [r2, r3]
  /*wrap if needed*/
  if ( queue->queue_write_idx == queue->queue_size)
 804a63a:	8842      	ldrh	r2, [r0, #2]
 804a63c:	88c3      	ldrh	r3, [r0, #6]
 804a63e:	429a      	cmp	r2, r3
  {
    queue->queue_write_idx=0;
 804a640:	bf04      	itt	eq
 804a642:	2300      	moveq	r3, #0
 804a644:	8043      	strheq	r3, [r0, #2]
  }
  queue->queue_buff[queue->queue_write_idx++]=(uint8_t) (element_size);
 804a646:	8843      	ldrh	r3, [r0, #2]
 804a648:	6882      	ldr	r2, [r0, #8]
 804a64a:	1c5c      	adds	r4, r3, #1
 804a64c:	8044      	strh	r4, [r0, #2]
 804a64e:	54d1      	strb	r1, [r2, r3]
  /*wrap if needed*/
  if ( queue->queue_write_idx == queue->queue_size)
 804a650:	88c3      	ldrh	r3, [r0, #6]
 804a652:	8842      	ldrh	r2, [r0, #2]
 804a654:	429a      	cmp	r2, r3
  {
    queue->queue_write_idx=0;
 804a656:	bf04      	itt	eq
 804a658:	2300      	moveq	r3, #0
 804a65a:	8043      	strheq	r3, [r0, #2]
  }
}
 804a65c:	bd10      	pop	{r4, pc}

0804a65e <circular_queue_init>:
  queue->queue_read_idx=0;
 804a65e:	2300      	movs	r3, #0
 804a660:	6003      	str	r3, [r0, #0]
  queue->queue_write_idx=0;
 804a662:	8083      	strh	r3, [r0, #4]
  queue->queue_buff=queue_buff;
 804a664:	6081      	str	r1, [r0, #8]
  queue->queue_size=queue_size;
 804a666:	80c2      	strh	r2, [r0, #6]
  queue->queue_full=0;
 804a668:	7303      	strb	r3, [r0, #12]
}
 804a66a:	4770      	bx	lr

0804a66c <circular_queue_add>:
{
 804a66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (queue->queue_write_idx>=queue->queue_read_idx)
 804a66e:	8803      	ldrh	r3, [r0, #0]
{
 804a670:	4615      	mov	r5, r2
  if (queue->queue_write_idx>=queue->queue_read_idx)
 804a672:	8842      	ldrh	r2, [r0, #2]
 804a674:	429a      	cmp	r2, r3
{
 804a676:	460e      	mov	r6, r1
    free_size=queue->queue_size-(queue->queue_write_idx-queue->queue_read_idx); 
 804a678:	bf24      	itt	cs
 804a67a:	88c1      	ldrhcs	r1, [r0, #6]
 804a67c:	185b      	addcs	r3, r3, r1
  if ( queue->queue_full==1)
 804a67e:	7b01      	ldrb	r1, [r0, #12]
    free_size=(queue->queue_read_idx-queue->queue_write_idx); 
 804a680:	1a9b      	subs	r3, r3, r2
    free_size=0;
 804a682:	2901      	cmp	r1, #1
    free_size=(queue->queue_read_idx-queue->queue_write_idx); 
 804a684:	b21b      	sxth	r3, r3
  if ((buff_size+ELEMENT_SIZE_LEN<=free_buff_len)&& 
 804a686:	f105 0101 	add.w	r1, r5, #1
    free_size=0;
 804a68a:	bf08      	it	eq
 804a68c:	2300      	moveq	r3, #0
  if ((buff_size+ELEMENT_SIZE_LEN<=free_buff_len)&& 
 804a68e:	4299      	cmp	r1, r3
{
 804a690:	4604      	mov	r4, r0
  if ((buff_size+ELEMENT_SIZE_LEN<=free_buff_len)&& 
 804a692:	da2c      	bge.n	804a6ee <circular_queue_add+0x82>
      ((queue->queue_write_idx+buff_size+ELEMENT_SIZE_LEN<=queue->queue_size) 
 804a694:	88c1      	ldrh	r1, [r0, #6]
 804a696:	18a8      	adds	r0, r5, r2
 804a698:	3001      	adds	r0, #1
  if ((buff_size+ELEMENT_SIZE_LEN<=free_buff_len)&& 
 804a69a:	4288      	cmp	r0, r1
 804a69c:	db02      	blt.n	804a6a4 <circular_queue_add+0x38>
        || (queue->queue_write_idx>=queue->queue_size-ELEMENT_SIZE_LEN))) /*elementSize cut in 2 or elementSize at Top*/
 804a69e:	3902      	subs	r1, #2
 804a6a0:	428a      	cmp	r2, r1
 804a6a2:	db24      	blt.n	804a6ee <circular_queue_add+0x82>
    add_elementSize_and_inc_writeIdx(queue, buff_size);
 804a6a4:	4629      	mov	r1, r5
 804a6a6:	4620      	mov	r0, r4
 804a6a8:	f7ff ffc0 	bl	804a62c <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff,buff_size);
 804a6ac:	8863      	ldrh	r3, [r4, #2]
 804a6ae:	1e5a      	subs	r2, r3, #1
 804a6b0:	68a3      	ldr	r3, [r4, #8]
 804a6b2:	4413      	add	r3, r2
 804a6b4:	1972      	adds	r2, r6, r5
  while(size--)
 804a6b6:	42b2      	cmp	r2, r6
 804a6b8:	d114      	bne.n	804a6e4 <circular_queue_add+0x78>
    queue->queue_write_idx+=buff_size;
 804a6ba:	8862      	ldrh	r2, [r4, #2]
    if (queue->queue_write_idx==queue->queue_size)
 804a6bc:	88e3      	ldrh	r3, [r4, #6]
    queue->queue_write_idx+=buff_size;
 804a6be:	4415      	add	r5, r2
 804a6c0:	b2ad      	uxth	r5, r5
    if (queue->queue_write_idx==queue->queue_size)
 804a6c2:	42ab      	cmp	r3, r5
        queue->queue_write_idx=0;
 804a6c4:	bf08      	it	eq
 804a6c6:	2300      	moveq	r3, #0
    queue->queue_write_idx+=buff_size;
 804a6c8:	8065      	strh	r5, [r4, #2]
        queue->queue_write_idx=0;
 804a6ca:	bf08      	it	eq
 804a6cc:	8063      	strheq	r3, [r4, #2]
    queue->queue_nb_element++; 
 804a6ce:	88a3      	ldrh	r3, [r4, #4]
    if (queue->queue_write_idx== queue->queue_read_idx)
 804a6d0:	8862      	ldrh	r2, [r4, #2]
    queue->queue_nb_element++; 
 804a6d2:	3301      	adds	r3, #1
 804a6d4:	80a3      	strh	r3, [r4, #4]
    if (queue->queue_write_idx== queue->queue_read_idx)
 804a6d6:	8823      	ldrh	r3, [r4, #0]
 804a6d8:	429a      	cmp	r2, r3
      queue->queue_full=1;
 804a6da:	bf04      	itt	eq
 804a6dc:	2301      	moveq	r3, #1
 804a6de:	7323      	strbeq	r3, [r4, #12]
    status=0;
 804a6e0:	2000      	movs	r0, #0
}
 804a6e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *out++= *in++;
 804a6e4:	f816 1b01 	ldrb.w	r1, [r6], #1
 804a6e8:	f803 1f01 	strb.w	r1, [r3, #1]!
 804a6ec:	e7e3      	b.n	804a6b6 <circular_queue_add+0x4a>
  else if (buff_size+2*ELEMENT_SIZE_LEN<=free_buff_len)
 804a6ee:	1ce9      	adds	r1, r5, #3
 804a6f0:	428b      	cmp	r3, r1
 804a6f2:	dd31      	ble.n	804a758 <circular_queue_add+0xec>
    uint16_t top_size = queue->queue_size-(queue->queue_write_idx+ELEMENT_SIZE_LEN);
 804a6f4:	88e7      	ldrh	r7, [r4, #6]
 804a6f6:	3f02      	subs	r7, #2
 804a6f8:	1abf      	subs	r7, r7, r2
 804a6fa:	b2bf      	uxth	r7, r7
    add_elementSize_and_inc_writeIdx(queue,top_size);
 804a6fc:	4639      	mov	r1, r7
 804a6fe:	4620      	mov	r0, r4
 804a700:	f7ff ff94 	bl	804a62c <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff,top_size);
 804a704:	8863      	ldrh	r3, [r4, #2]
 804a706:	1e5a      	subs	r2, r3, #1
 804a708:	68a3      	ldr	r3, [r4, #8]
 804a70a:	4413      	add	r3, r2
 804a70c:	19f2      	adds	r2, r6, r7
  while(size--)
 804a70e:	4296      	cmp	r6, r2
 804a710:	d118      	bne.n	804a744 <circular_queue_add+0xd8>
    buff_size-=top_size;
 804a712:	1bed      	subs	r5, r5, r7
    queue->queue_write_idx=0;
 804a714:	2300      	movs	r3, #0
    buff_size-=top_size;
 804a716:	b2ad      	uxth	r5, r5
    queue->queue_write_idx=0;
 804a718:	8063      	strh	r3, [r4, #2]
    add_elementSize_and_inc_writeIdx(queue, buff_size);
 804a71a:	4629      	mov	r1, r5
 804a71c:	4620      	mov	r0, r4
 804a71e:	f7ff ff85 	bl	804a62c <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff+top_size,buff_size);
 804a722:	8863      	ldrh	r3, [r4, #2]
 804a724:	1e5a      	subs	r2, r3, #1
 804a726:	68a3      	ldr	r3, [r4, #8]
 804a728:	4413      	add	r3, r2
 804a72a:	1972      	adds	r2, r6, r5
  while(size--)
 804a72c:	42b2      	cmp	r2, r6
 804a72e:	d10e      	bne.n	804a74e <circular_queue_add+0xe2>
    queue->queue_nb_element+=2;
 804a730:	88a3      	ldrh	r3, [r4, #4]
    queue->queue_write_idx+=buff_size;
 804a732:	8862      	ldrh	r2, [r4, #2]
    queue->queue_nb_element+=2;
 804a734:	3302      	adds	r3, #2
    queue->queue_write_idx+=buff_size;
 804a736:	4415      	add	r5, r2
    queue->queue_nb_element+=2;
 804a738:	80a3      	strh	r3, [r4, #4]
    if (queue->queue_write_idx== queue->queue_read_idx)
 804a73a:	8823      	ldrh	r3, [r4, #0]
    queue->queue_write_idx+=buff_size;
 804a73c:	b2ad      	uxth	r5, r5
 804a73e:	8065      	strh	r5, [r4, #2]
    if (queue->queue_write_idx== queue->queue_read_idx)
 804a740:	42ab      	cmp	r3, r5
 804a742:	e7ca      	b.n	804a6da <circular_queue_add+0x6e>
    *out++= *in++;
 804a744:	f816 1b01 	ldrb.w	r1, [r6], #1
 804a748:	f803 1f01 	strb.w	r1, [r3, #1]!
 804a74c:	e7df      	b.n	804a70e <circular_queue_add+0xa2>
 804a74e:	f816 1b01 	ldrb.w	r1, [r6], #1
 804a752:	f803 1f01 	strb.w	r1, [r3, #1]!
 804a756:	e7e9      	b.n	804a72c <circular_queue_add+0xc0>
    status=-1;
 804a758:	f04f 30ff 	mov.w	r0, #4294967295
  return status;
 804a75c:	e7c1      	b.n	804a6e2 <circular_queue_add+0x76>

0804a75e <circular_queue_get>:
  if (queue->queue_nb_element==0)
 804a75e:	8883      	ldrh	r3, [r0, #4]
{
 804a760:	b570      	push	{r4, r5, r6, lr}
  if (queue->queue_nb_element==0)
 804a762:	b1ab      	cbz	r3, 804a790 <circular_queue_get+0x32>
    uint16_t read_idx=queue->queue_read_idx;
 804a764:	8805      	ldrh	r5, [r0, #0]
    size=(uint16_t) queue->queue_buff[read_idx++]<<8;
 804a766:	6884      	ldr	r4, [r0, #8]
 804a768:	1c6b      	adds	r3, r5, #1
 804a76a:	5d66      	ldrb	r6, [r4, r5]
    if (read_idx==queue->queue_size)
 804a76c:	88c5      	ldrh	r5, [r0, #6]
    size=(uint16_t) queue->queue_buff[read_idx++]<<8;
 804a76e:	b29b      	uxth	r3, r3
      read_idx=0;
 804a770:	429d      	cmp	r5, r3
 804a772:	bf08      	it	eq
 804a774:	2300      	moveq	r3, #0
    size|=(uint16_t) queue->queue_buff[read_idx++];
 804a776:	1c58      	adds	r0, r3, #1
 804a778:	b280      	uxth	r0, r0
 804a77a:	5ce3      	ldrb	r3, [r4, r3]
      read_idx=0;
 804a77c:	4285      	cmp	r5, r0
 804a77e:	bf08      	it	eq
 804a780:	2000      	moveq	r0, #0
    *buff= queue->queue_buff+read_idx;
 804a782:	4420      	add	r0, r4
    size|=(uint16_t) queue->queue_buff[read_idx++];
 804a784:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *buff= queue->queue_buff+read_idx;
 804a788:	6008      	str	r0, [r1, #0]
    * buff_size=size;
 804a78a:	8013      	strh	r3, [r2, #0]
    status=0;
 804a78c:	2000      	movs	r0, #0
}
 804a78e:	bd70      	pop	{r4, r5, r6, pc}
    status=-1;
 804a790:	f04f 30ff 	mov.w	r0, #4294967295
  return status;
 804a794:	e7fb      	b.n	804a78e <circular_queue_get+0x30>

0804a796 <circular_queue_remove>:
  if (queue->queue_nb_element==0)
 804a796:	8882      	ldrh	r2, [r0, #4]
{
 804a798:	b570      	push	{r4, r5, r6, lr}
  if (queue->queue_nb_element==0)
 804a79a:	b322      	cbz	r2, 804a7e6 <circular_queue_remove+0x50>
    size=(uint16_t) queue->queue_buff[queue->queue_read_idx++]<<8;
 804a79c:	8803      	ldrh	r3, [r0, #0]
    if (queue->queue_read_idx==queue->queue_size)
 804a79e:	88c4      	ldrh	r4, [r0, #6]
    size=(uint16_t) queue->queue_buff[queue->queue_read_idx++]<<8;
 804a7a0:	6886      	ldr	r6, [r0, #8]
 804a7a2:	1c59      	adds	r1, r3, #1
 804a7a4:	b289      	uxth	r1, r1
    if (queue->queue_read_idx==queue->queue_size)
 804a7a6:	42a1      	cmp	r1, r4
    size=(uint16_t) queue->queue_buff[queue->queue_read_idx++]<<8;
 804a7a8:	8001      	strh	r1, [r0, #0]
      queue->queue_read_idx=0;
 804a7aa:	bf08      	it	eq
 804a7ac:	2100      	moveq	r1, #0
    size=(uint16_t) queue->queue_buff[queue->queue_read_idx++]<<8;
 804a7ae:	5cf3      	ldrb	r3, [r6, r3]
      queue->queue_read_idx=0;
 804a7b0:	bf08      	it	eq
 804a7b2:	8001      	strheq	r1, [r0, #0]
    size|=(uint16_t) queue->queue_buff[queue->queue_read_idx++];
 804a7b4:	8805      	ldrh	r5, [r0, #0]
 804a7b6:	1c69      	adds	r1, r5, #1
 804a7b8:	b289      	uxth	r1, r1
    if (queue->queue_read_idx==queue->queue_size)
 804a7ba:	428c      	cmp	r4, r1
    size|=(uint16_t) queue->queue_buff[queue->queue_read_idx++];
 804a7bc:	8001      	strh	r1, [r0, #0]
      queue->queue_read_idx=0;
 804a7be:	bf08      	it	eq
 804a7c0:	2100      	moveq	r1, #0
    size|=(uint16_t) queue->queue_buff[queue->queue_read_idx++];
 804a7c2:	5d75      	ldrb	r5, [r6, r5]
      queue->queue_read_idx=0;
 804a7c4:	bf08      	it	eq
 804a7c6:	8001      	strheq	r1, [r0, #0]
    queue->queue_read_idx+=size;
 804a7c8:	8801      	ldrh	r1, [r0, #0]
    size=(uint16_t) queue->queue_buff[queue->queue_read_idx++]<<8;
 804a7ca:	021b      	lsls	r3, r3, #8
    size|=(uint16_t) queue->queue_buff[queue->queue_read_idx++];
 804a7cc:	432b      	orrs	r3, r5
    queue->queue_read_idx+=size;
 804a7ce:	440b      	add	r3, r1
 804a7d0:	b29b      	uxth	r3, r3
    if (queue->queue_read_idx==queue->queue_size)
 804a7d2:	429c      	cmp	r4, r3
        queue->queue_read_idx=0;
 804a7d4:	bf08      	it	eq
 804a7d6:	2300      	moveq	r3, #0
 804a7d8:	8003      	strh	r3, [r0, #0]
    queue->queue_nb_element--;
 804a7da:	3a01      	subs	r2, #1
    queue->queue_full=0;
 804a7dc:	2300      	movs	r3, #0
    queue->queue_nb_element--;
 804a7de:	8082      	strh	r2, [r0, #4]
    queue->queue_full=0;
 804a7e0:	7303      	strb	r3, [r0, #12]
    status=0;
 804a7e2:	4618      	mov	r0, r3
}
 804a7e4:	bd70      	pop	{r4, r5, r6, pc}
      status=-1;
 804a7e6:	f04f 30ff 	mov.w	r0, #4294967295
  return status;
 804a7ea:	e7fb      	b.n	804a7e4 <circular_queue_remove+0x4e>

0804a7ec <circular_queue_sense>:
  if (queue->queue_nb_element==0)
 804a7ec:	8880      	ldrh	r0, [r0, #4]
 804a7ee:	fab0 f080 	clz	r0, r0
 804a7f2:	0940      	lsrs	r0, r0, #5
}
 804a7f4:	4240      	negs	r0, r0
 804a7f6:	4770      	bx	lr

0804a7f8 <SysTimeAdd>:
static void CalendarDiv60( uint32_t in, uint32_t* out, uint32_t* remainder );

const char *WeekDayString[]={ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 804a7f8:	b082      	sub	sp, #8
 804a7fa:	b082      	sub	sp, #8
 804a7fc:	f10d 0c08 	add.w	ip, sp, #8
 804a800:	e90c 0006 	stmdb	ip, {r1, r2}
    SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };

    c.Seconds = a.Seconds + b.Seconds;
 804a804:	9a00      	ldr	r2, [sp, #0]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 804a806:	f8bd 1010 	ldrh.w	r1, [sp, #16]
{
 804a80a:	9303      	str	r3, [sp, #12]
    c.Seconds = a.Seconds + b.Seconds;
 804a80c:	4413      	add	r3, r2
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 804a80e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 804a812:	440a      	add	r2, r1
 804a814:	b292      	uxth	r2, r2
 804a816:	b211      	sxth	r1, r2
    if( c.SubSeconds >= 1000 )
 804a818:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
    {
        c.Seconds++;
        c.SubSeconds -= 1000;
 804a81c:	bfa2      	ittt	ge
 804a81e:	f5a2 727a 	subge.w	r2, r2, #1000	; 0x3e8
        c.Seconds++;
 804a822:	3301      	addge	r3, #1
        c.SubSeconds -= 1000;
 804a824:	b211      	sxthge	r1, r2
    }
    return c;
 804a826:	6003      	str	r3, [r0, #0]
 804a828:	8081      	strh	r1, [r0, #4]
}
 804a82a:	b002      	add	sp, #8
 804a82c:	b002      	add	sp, #8
 804a82e:	4770      	bx	lr

0804a830 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 804a830:	b082      	sub	sp, #8
 804a832:	b082      	sub	sp, #8
 804a834:	f10d 0c08 	add.w	ip, sp, #8
 804a838:	e90c 0006 	stmdb	ip, {r1, r2}
    SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };

    c.Seconds = a.Seconds - b.Seconds;
 804a83c:	9a00      	ldr	r2, [sp, #0]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 804a83e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
{
 804a842:	9303      	str	r3, [sp, #12]
    c.Seconds = a.Seconds - b.Seconds;
 804a844:	1ad3      	subs	r3, r2, r3
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 804a846:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 804a84a:	1a52      	subs	r2, r2, r1
 804a84c:	b292      	uxth	r2, r2
 804a84e:	b211      	sxth	r1, r2
    if( c.SubSeconds < 0 )
 804a850:	2900      	cmp	r1, #0
    {
        c.Seconds--;
        c.SubSeconds += 1000;
 804a852:	bfbe      	ittt	lt
 804a854:	f502 727a 	addlt.w	r2, r2, #1000	; 0x3e8
        c.Seconds--;
 804a858:	f103 33ff 	addlt.w	r3, r3, #4294967295
        c.SubSeconds += 1000;
 804a85c:	b211      	sxthlt	r1, r2
    }
    return c;
 804a85e:	6003      	str	r3, [r0, #0]
 804a860:	8081      	strh	r1, [r0, #4]
}
 804a862:	b002      	add	sp, #8
 804a864:	b002      	add	sp, #8
 804a866:	4770      	bx	lr

0804a868 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 804a868:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 804a86a:	466b      	mov	r3, sp
 804a86c:	e883 0003 	stmia.w	r3, {r0, r1}
    SysTime_t DeltaTime;
  
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 804a870:	a804      	add	r0, sp, #16
 804a872:	2300      	movs	r3, #0
 804a874:	f820 3d04 	strh.w	r3, [r0, #-4]!
 804a878:	9302      	str	r3, [sp, #8]

    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 804a87a:	f000 fe95 	bl	804b5a8 <HW_RTC_GetCalendarTime>
    c.Seconds = a.Seconds - b.Seconds;
 804a87e:	9b00      	ldr	r3, [sp, #0]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 804a880:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 804a884:	9002      	str	r0, [sp, #8]
    c.Seconds = a.Seconds - b.Seconds;
 804a886:	1a18      	subs	r0, r3, r0
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 804a888:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 804a88c:	1a5b      	subs	r3, r3, r1
 804a88e:	b29b      	uxth	r3, r3
 804a890:	b219      	sxth	r1, r3
    if( c.SubSeconds < 0 )
 804a892:	2900      	cmp	r1, #0
        c.SubSeconds += 1000;
 804a894:	bfbe      	ittt	lt
 804a896:	f503 737a 	addlt.w	r3, r3, #1000	; 0x3e8
        c.Seconds--;
 804a89a:	f100 30ff 	addlt.w	r0, r0, #4294967295
        c.SubSeconds += 1000;
 804a89e:	b219      	sxthlt	r1, r3

    // sysTime is epoch
    DeltaTime = SysTimeSub( sysTime, calendarTime );

    HW_RTC_BKUPWrite( DeltaTime.Seconds, ( uint32_t )DeltaTime.SubSeconds );
 804a8a0:	f000 fe94 	bl	804b5cc <HW_RTC_BKUPWrite>
}
 804a8a4:	b005      	add	sp, #20
 804a8a6:	f85d fb04 	ldr.w	pc, [sp], #4

0804a8aa <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 804a8aa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 804a8ac:	4604      	mov	r4, r0
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 804a8ae:	a804      	add	r0, sp, #16
 804a8b0:	2300      	movs	r3, #0
 804a8b2:	f820 3d0c 	strh.w	r3, [r0, #-12]!
 804a8b6:	9300      	str	r3, [sp, #0]
    SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
    SysTime_t DeltaTime;

    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 804a8b8:	f000 fe76 	bl	804b5a8 <HW_RTC_GetCalendarTime>

    HW_RTC_BKUPRead( &DeltaTime.Seconds, ( uint32_t* )&DeltaTime.SubSeconds );
 804a8bc:	a903      	add	r1, sp, #12
    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 804a8be:	9000      	str	r0, [sp, #0]
    HW_RTC_BKUPRead( &DeltaTime.Seconds, ( uint32_t* )&DeltaTime.SubSeconds );
 804a8c0:	a802      	add	r0, sp, #8
 804a8c2:	f000 fe95 	bl	804b5f0 <HW_RTC_BKUPRead>
    c.Seconds = a.Seconds + b.Seconds;
 804a8c6:	9b00      	ldr	r3, [sp, #0]
 804a8c8:	9a02      	ldr	r2, [sp, #8]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 804a8ca:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    c.Seconds = a.Seconds + b.Seconds;
 804a8ce:	441a      	add	r2, r3
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 804a8d0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 804a8d4:	440b      	add	r3, r1
 804a8d6:	b29b      	uxth	r3, r3
 804a8d8:	b219      	sxth	r1, r3
    if( c.SubSeconds >= 1000 )
 804a8da:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
        c.SubSeconds -= 1000;
 804a8de:	bfa2      	ittt	ge
 804a8e0:	f5a3 737a 	subge.w	r3, r3, #1000	; 0x3e8
        c.Seconds++;
 804a8e4:	3201      	addge	r2, #1
        c.SubSeconds -= 1000;
 804a8e6:	b219      	sxthge	r1, r3

    sysTime = SysTimeAdd( DeltaTime, calendarTime );

    return sysTime;
}
 804a8e8:	4620      	mov	r0, r4
    return sysTime;
 804a8ea:	6022      	str	r2, [r4, #0]
 804a8ec:	80a1      	strh	r1, [r4, #4]
}
 804a8ee:	b004      	add	sp, #16
 804a8f0:	bd10      	pop	{r4, pc}

0804a8f2 <TimerSetTimeout>:
    cur = cur->Next;
  }
  return false;
}
static void TimerSetTimeout( TimerEvent_t *obj )
{
 804a8f2:	b570      	push	{r4, r5, r6, lr}
 804a8f4:	4604      	mov	r4, r0
  int32_t minTicks= HW_RTC_GetMinimumTimeout( );
 804a8f6:	f000 fce3 	bl	804b2c0 <HW_RTC_GetMinimumTimeout>
  obj->IsNext2Expire = true; 
 804a8fa:	2301      	movs	r3, #1
 804a8fc:	7263      	strb	r3, [r4, #9]
  int32_t minTicks= HW_RTC_GetMinimumTimeout( );
 804a8fe:	4605      	mov	r5, r0

  // In case deadline too soon
  if(obj->Timestamp  < (HW_RTC_GetTimerElapsedTime(  ) + minTicks) )
 804a900:	6826      	ldr	r6, [r4, #0]
 804a902:	f000 fcf3 	bl	804b2ec <HW_RTC_GetTimerElapsedTime>
 804a906:	4428      	add	r0, r5
 804a908:	4286      	cmp	r6, r0
 804a90a:	d203      	bcs.n	804a914 <TimerSetTimeout+0x22>
  {
    obj->Timestamp = HW_RTC_GetTimerElapsedTime(  ) + minTicks;
 804a90c:	f000 fcee 	bl	804b2ec <HW_RTC_GetTimerElapsedTime>
 804a910:	4428      	add	r0, r5
 804a912:	6020      	str	r0, [r4, #0]
  }
  HW_RTC_SetAlarm( obj->Timestamp );
 804a914:	6820      	ldr	r0, [r4, #0]
}
 804a916:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HW_RTC_SetAlarm( obj->Timestamp );
 804a91a:	f000 bd13 	b.w	804b344 <HW_RTC_SetAlarm>
	...

0804a920 <TimerInsertNewHeadTimer>:
  obj->Next = NULL;
}

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
  TimerEvent_t* cur = TimerListHead;
 804a920:	4b04      	ldr	r3, [pc, #16]	; (804a934 <TimerInsertNewHeadTimer+0x14>)
 804a922:	681a      	ldr	r2, [r3, #0]

  if( cur != NULL )
 804a924:	b10a      	cbz	r2, 804a92a <TimerInsertNewHeadTimer+0xa>
  {
    cur->IsNext2Expire = false;
 804a926:	2100      	movs	r1, #0
 804a928:	7251      	strb	r1, [r2, #9]
  }

  obj->Next = cur;
 804a92a:	6142      	str	r2, [r0, #20]
  TimerListHead = obj;
 804a92c:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 804a92e:	f7ff bfe0 	b.w	804a8f2 <TimerSetTimeout>
 804a932:	bf00      	nop
 804a934:	20009404 	.word	0x20009404

0804a938 <TimerInit>:
  obj->Timestamp = 0;
 804a938:	2300      	movs	r3, #0
  obj->ReloadValue = 0;
 804a93a:	e9c0 3300 	strd	r3, r3, [r0]
  obj->IsStarted = false;
 804a93e:	7203      	strb	r3, [r0, #8]
  obj->IsNext2Expire = false;
 804a940:	7243      	strb	r3, [r0, #9]
  obj->Context = NULL;
 804a942:	e9c0 1303 	strd	r1, r3, [r0, #12]
  obj->Next = NULL;
 804a946:	6143      	str	r3, [r0, #20]
}
 804a948:	4770      	bx	lr
	...

0804a94c <TimerStart>:
{
 804a94c:	b570      	push	{r4, r5, r6, lr}
 804a94e:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 804a950:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 804a954:	b672      	cpsid	i
  if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 804a956:	b170      	cbz	r0, 804a976 <TimerStart+0x2a>
  TimerEvent_t* cur = TimerListHead;
 804a958:	4e16      	ldr	r6, [pc, #88]	; (804a9b4 <TimerStart+0x68>)
 804a95a:	6831      	ldr	r1, [r6, #0]
 804a95c:	460b      	mov	r3, r1
  while( cur != NULL )
 804a95e:	b96b      	cbnz	r3, 804a97c <TimerStart+0x30>
  obj->Timestamp = obj->ReloadValue;
 804a960:	6862      	ldr	r2, [r4, #4]
 804a962:	6022      	str	r2, [r4, #0]
  obj->IsStarted = true;
 804a964:	2201      	movs	r2, #1
 804a966:	7222      	strb	r2, [r4, #8]
  obj->IsNext2Expire = false;
 804a968:	7263      	strb	r3, [r4, #9]
  if( TimerListHead == NULL )
 804a96a:	b959      	cbnz	r1, 804a984 <TimerStart+0x38>
    HW_RTC_SetTimerContext( );
 804a96c:	f000 fdd2 	bl	804b514 <HW_RTC_SetTimerContext>
      TimerInsertNewHeadTimer( obj);
 804a970:	4620      	mov	r0, r4
 804a972:	f7ff ffd5 	bl	804a920 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 804a976:	f385 8810 	msr	PRIMASK, r5
}
 804a97a:	bd70      	pop	{r4, r5, r6, pc}
    if( cur == obj )
 804a97c:	429c      	cmp	r4, r3
 804a97e:	d0fa      	beq.n	804a976 <TimerStart+0x2a>
    cur = cur->Next;
 804a980:	695b      	ldr	r3, [r3, #20]
 804a982:	e7ec      	b.n	804a95e <TimerStart+0x12>
    elapsedTime = HW_RTC_GetTimerElapsedTime( );
 804a984:	f000 fcb2 	bl	804b2ec <HW_RTC_GetTimerElapsedTime>
    obj->Timestamp += elapsedTime;
 804a988:	6823      	ldr	r3, [r4, #0]
 804a98a:	4418      	add	r0, r3
    if( obj->Timestamp < TimerListHead->Timestamp )
 804a98c:	6833      	ldr	r3, [r6, #0]
    obj->Timestamp += elapsedTime;
 804a98e:	6020      	str	r0, [r4, #0]
    if( obj->Timestamp < TimerListHead->Timestamp )
 804a990:	681a      	ldr	r2, [r3, #0]
 804a992:	4290      	cmp	r0, r2
 804a994:	d3ec      	bcc.n	804a970 <TimerStart+0x24>
  TimerEvent_t* next = TimerListHead->Next;
 804a996:	695a      	ldr	r2, [r3, #20]
  while (cur->Next != NULL )
 804a998:	6959      	ldr	r1, [r3, #20]
 804a99a:	b911      	cbnz	r1, 804a9a2 <TimerStart+0x56>
  cur->Next = obj;
 804a99c:	615c      	str	r4, [r3, #20]
  obj->Next = NULL;
 804a99e:	6161      	str	r1, [r4, #20]
 804a9a0:	e7e9      	b.n	804a976 <TimerStart+0x2a>
    if( obj->Timestamp  > next->Timestamp )
 804a9a2:	6811      	ldr	r1, [r2, #0]
 804a9a4:	4288      	cmp	r0, r1
 804a9a6:	d902      	bls.n	804a9ae <TimerStart+0x62>
        next = next->Next;
 804a9a8:	4613      	mov	r3, r2
 804a9aa:	6952      	ldr	r2, [r2, #20]
 804a9ac:	e7f4      	b.n	804a998 <TimerStart+0x4c>
        cur->Next = obj;
 804a9ae:	615c      	str	r4, [r3, #20]
        obj->Next = next;
 804a9b0:	6162      	str	r2, [r4, #20]
 804a9b2:	e7e0      	b.n	804a976 <TimerStart+0x2a>
 804a9b4:	20009404 	.word	0x20009404

0804a9b8 <TimerIrqHandler>:
{
 804a9b8:	b570      	push	{r4, r5, r6, lr}
  uint32_t old =  HW_RTC_GetTimerContext( );
 804a9ba:	f000 fdef 	bl	804b59c <HW_RTC_GetTimerContext>
  if ( TimerListHead != NULL )
 804a9be:	4c1b      	ldr	r4, [pc, #108]	; (804aa2c <TimerIrqHandler+0x74>)
  uint32_t old =  HW_RTC_GetTimerContext( );
 804a9c0:	4605      	mov	r5, r0
  uint32_t now =  HW_RTC_SetTimerContext( );
 804a9c2:	f000 fda7 	bl	804b514 <HW_RTC_SetTimerContext>
  if ( TimerListHead != NULL )
 804a9c6:	6822      	ldr	r2, [r4, #0]
 804a9c8:	b19a      	cbz	r2, 804a9f2 <TimerIrqHandler+0x3a>
  uint32_t DeltaContext = now - old; //intentionnal wrap around
 804a9ca:	1b40      	subs	r0, r0, r5
 804a9cc:	4613      	mov	r3, r2
        next->Timestamp = 0 ;
 804a9ce:	2500      	movs	r5, #0
    for (cur=TimerListHead; cur->Next != NULL; cur= cur->Next)
 804a9d0:	695b      	ldr	r3, [r3, #20]
 804a9d2:	b92b      	cbnz	r3, 804a9e0 <TimerIrqHandler+0x28>
    cur->IsStarted = false;
 804a9d4:	7213      	strb	r3, [r2, #8]
    exec_cb( cur->Callback, cur->Context );
 804a9d6:	68d3      	ldr	r3, [r2, #12]
    TimerListHead = TimerListHead->Next;
 804a9d8:	6951      	ldr	r1, [r2, #20]
 804a9da:	6021      	str	r1, [r4, #0]
    exec_cb( cur->Callback, cur->Context );
 804a9dc:	b93b      	cbnz	r3, 804a9ee <TimerIrqHandler+0x36>
 804a9de:	e7fe      	b.n	804a9de <TimerIrqHandler+0x26>
      if (next->Timestamp > DeltaContext)
 804a9e0:	6819      	ldr	r1, [r3, #0]
 804a9e2:	4281      	cmp	r1, r0
        next->Timestamp -= DeltaContext;
 804a9e4:	bf86      	itte	hi
 804a9e6:	1a09      	subhi	r1, r1, r0
 804a9e8:	6019      	strhi	r1, [r3, #0]
        next->Timestamp = 0 ;
 804a9ea:	601d      	strls	r5, [r3, #0]
 804a9ec:	e7f0      	b.n	804a9d0 <TimerIrqHandler+0x18>
    exec_cb( cur->Callback, cur->Context );
 804a9ee:	6910      	ldr	r0, [r2, #16]
 804a9f0:	4798      	blx	r3
   cur->IsStarted = false;
 804a9f2:	2600      	movs	r6, #0
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 804a9f4:	6823      	ldr	r3, [r4, #0]
 804a9f6:	b92b      	cbnz	r3, 804aa04 <TimerIrqHandler+0x4c>
  if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 804a9f8:	6820      	ldr	r0, [r4, #0]
 804a9fa:	b980      	cbnz	r0, 804aa1e <TimerIrqHandler+0x66>
}
 804a9fc:	bd70      	pop	{r4, r5, r6, pc}
   exec_cb( cur->Callback, cur->Context );
 804a9fe:	6918      	ldr	r0, [r3, #16]
 804aa00:	4790      	blx	r2
 804aa02:	e7f7      	b.n	804a9f4 <TimerIrqHandler+0x3c>
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 804aa04:	681d      	ldr	r5, [r3, #0]
 804aa06:	f000 fc71 	bl	804b2ec <HW_RTC_GetTimerElapsedTime>
 804aa0a:	4285      	cmp	r5, r0
 804aa0c:	d2f4      	bcs.n	804a9f8 <TimerIrqHandler+0x40>
   cur = TimerListHead;
 804aa0e:	6823      	ldr	r3, [r4, #0]
   TimerListHead = TimerListHead->Next;
 804aa10:	695a      	ldr	r2, [r3, #20]
 804aa12:	6022      	str	r2, [r4, #0]
   exec_cb( cur->Callback, cur->Context );
 804aa14:	68da      	ldr	r2, [r3, #12]
   cur->IsStarted = false;
 804aa16:	721e      	strb	r6, [r3, #8]
   exec_cb( cur->Callback, cur->Context );
 804aa18:	2a00      	cmp	r2, #0
 804aa1a:	d1f0      	bne.n	804a9fe <TimerIrqHandler+0x46>
 804aa1c:	e7fe      	b.n	804aa1c <TimerIrqHandler+0x64>
  if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 804aa1e:	7a43      	ldrb	r3, [r0, #9]
 804aa20:	2b00      	cmp	r3, #0
 804aa22:	d1eb      	bne.n	804a9fc <TimerIrqHandler+0x44>
}
 804aa24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    TimerSetTimeout( TimerListHead );
 804aa28:	f7ff bf63 	b.w	804a8f2 <TimerSetTimeout>
 804aa2c:	20009404 	.word	0x20009404

0804aa30 <TimerStop>:
{
 804aa30:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 804aa32:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 804aa36:	b672      	cpsid	i
  TimerEvent_t* prev = TimerListHead;
 804aa38:	4d10      	ldr	r5, [pc, #64]	; (804aa7c <TimerStop+0x4c>)
 804aa3a:	682b      	ldr	r3, [r5, #0]
  if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 804aa3c:	b103      	cbz	r3, 804aa40 <TimerStop+0x10>
 804aa3e:	b910      	cbnz	r0, 804aa46 <TimerStop+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 804aa40:	f386 8810 	msr	PRIMASK, r6
}  
 804aa44:	bd70      	pop	{r4, r5, r6, pc}
  obj->IsStarted = false;
 804aa46:	2200      	movs	r2, #0
  if( TimerListHead == obj ) // Stop the Head                  
 804aa48:	4283      	cmp	r3, r0
  obj->IsStarted = false;
 804aa4a:	7202      	strb	r2, [r0, #8]
  if( TimerListHead == obj ) // Stop the Head                  
 804aa4c:	d10e      	bne.n	804aa6c <TimerStop+0x3c>
    if( TimerListHead->IsNext2Expire == true ) // The head is already running 
 804aa4e:	7a59      	ldrb	r1, [r3, #9]
 804aa50:	695c      	ldr	r4, [r3, #20]
 804aa52:	b141      	cbz	r1, 804aa66 <TimerStop+0x36>
      TimerListHead->IsNext2Expire = false;
 804aa54:	725a      	strb	r2, [r3, #9]
      if( TimerListHead->Next != NULL )
 804aa56:	b124      	cbz	r4, 804aa62 <TimerStop+0x32>
        TimerSetTimeout( TimerListHead );
 804aa58:	4620      	mov	r0, r4
        TimerListHead = TimerListHead->Next;
 804aa5a:	602c      	str	r4, [r5, #0]
        TimerSetTimeout( TimerListHead );
 804aa5c:	f7ff ff49 	bl	804a8f2 <TimerSetTimeout>
 804aa60:	e7ee      	b.n	804aa40 <TimerStop+0x10>
        HW_RTC_StopAlarm( );
 804aa62:	f000 fc59 	bl	804b318 <HW_RTC_StopAlarm>
        TimerListHead = NULL;
 804aa66:	602c      	str	r4, [r5, #0]
 804aa68:	e7ea      	b.n	804aa40 <TimerStop+0x10>
 804aa6a:	4613      	mov	r3, r2
        cur = cur->Next;
 804aa6c:	695a      	ldr	r2, [r3, #20]
    while( cur != NULL )
 804aa6e:	2a00      	cmp	r2, #0
 804aa70:	d0e6      	beq.n	804aa40 <TimerStop+0x10>
      if( cur == obj )
 804aa72:	4290      	cmp	r0, r2
 804aa74:	d1f9      	bne.n	804aa6a <TimerStop+0x3a>
        if( cur->Next != NULL )
 804aa76:	6942      	ldr	r2, [r0, #20]
          prev->Next = cur;
 804aa78:	615a      	str	r2, [r3, #20]
 804aa7a:	e7e1      	b.n	804aa40 <TimerStop+0x10>
 804aa7c:	20009404 	.word	0x20009404

0804aa80 <TimerSetValue>:
{
 804aa80:	b538      	push	{r3, r4, r5, lr}
 804aa82:	4605      	mov	r5, r0
  uint32_t ticks = HW_RTC_ms2Tick( value );
 804aa84:	4608      	mov	r0, r1
 804aa86:	f000 fc1d 	bl	804b2c4 <HW_RTC_ms2Tick>
 804aa8a:	4604      	mov	r4, r0
  TimerStop( obj );
 804aa8c:	4628      	mov	r0, r5
 804aa8e:	f7ff ffcf 	bl	804aa30 <TimerStop>
  minValue = HW_RTC_GetMinimumTimeout( );
 804aa92:	f000 fc15 	bl	804b2c0 <HW_RTC_GetMinimumTimeout>
 804aa96:	42a0      	cmp	r0, r4
 804aa98:	bf38      	it	cc
 804aa9a:	4620      	movcc	r0, r4
  obj->ReloadValue = ticks;
 804aa9c:	e9c5 0000 	strd	r0, r0, [r5]
}
 804aaa0:	bd38      	pop	{r3, r4, r5, pc}

0804aaa2 <TimerGetCurrentTime>:
{
 804aaa2:	b508      	push	{r3, lr}
  uint32_t now = HW_RTC_GetTimerValue( );
 804aaa4:	f000 fc30 	bl	804b308 <HW_RTC_GetTimerValue>
}
 804aaa8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return  HW_RTC_Tick2ms(now);
 804aaac:	f000 bc13 	b.w	804b2d6 <HW_RTC_Tick2ms>

0804aab0 <TimerGetElapsedTime>:
{
 804aab0:	b538      	push	{r3, r4, r5, lr}
  if ( past == 0 )
 804aab2:	4605      	mov	r5, r0
 804aab4:	b150      	cbz	r0, 804aacc <TimerGetElapsedTime+0x1c>
  uint32_t nowInTicks = HW_RTC_GetTimerValue( );
 804aab6:	f000 fc27 	bl	804b308 <HW_RTC_GetTimerValue>
 804aaba:	4604      	mov	r4, r0
  uint32_t pastInTicks = HW_RTC_ms2Tick( past );
 804aabc:	4628      	mov	r0, r5
 804aabe:	f000 fc01 	bl	804b2c4 <HW_RTC_ms2Tick>
  return HW_RTC_Tick2ms( nowInTicks- pastInTicks );
 804aac2:	1a20      	subs	r0, r4, r0
}
 804aac4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return HW_RTC_Tick2ms( nowInTicks- pastInTicks );
 804aac8:	f000 bc05 	b.w	804b2d6 <HW_RTC_Tick2ms>
}
 804aacc:	bd38      	pop	{r3, r4, r5, pc}
	...

0804aad0 <Trace_TxCpltCallback>:
}

/* Private Functions Definition ------------------------------------------------------*/

static void Trace_TxCpltCallback(void)
{
 804aad0:	b513      	push	{r0, r1, r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 804aad2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 804aad6:	b672      	cpsid	i

  BACKUP_PRIMASK();

  DISABLE_IRQ(); /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  circular_queue_remove(&MsgTraceQueue);
 804aad8:	480f      	ldr	r0, [pc, #60]	; (804ab18 <Trace_TxCpltCallback+0x48>)
 804aada:	f7ff fe5c 	bl	804a796 <circular_queue_remove>
  //DBG_GPIO_SET(GPIOB, GPIO_PIN_13);
  //DBG_GPIO_RST(GPIOB, GPIO_PIN_13);
  /* Sense if new data to be sent */
  status=circular_queue_sense(&MsgTraceQueue);
 804aade:	480e      	ldr	r0, [pc, #56]	; (804ab18 <Trace_TxCpltCallback+0x48>)
 804aae0:	f7ff fe84 	bl	804a7ec <circular_queue_sense>

  if ( status == 0) 
 804aae4:	b970      	cbnz	r0, 804ab04 <Trace_TxCpltCallback+0x34>
  {
    circular_queue_get(&MsgTraceQueue,&buffer,&bufSize);
 804aae6:	f10d 0202 	add.w	r2, sp, #2
 804aaea:	a901      	add	r1, sp, #4
 804aaec:	480a      	ldr	r0, [pc, #40]	; (804ab18 <Trace_TxCpltCallback+0x48>)
 804aaee:	f7ff fe36 	bl	804a75e <circular_queue_get>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 804aaf2:	f384 8810 	msr	PRIMASK, r4
    RESTORE_PRIMASK();
    //DBG_GPIO_SET(GPIOB, GPIO_PIN_14);
    //DBG_GPIO_RST(GPIOB, GPIO_PIN_14);
    OutputTrace(buffer, bufSize);
 804aaf6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 804aafa:	9801      	ldr	r0, [sp, #4]
 804aafc:	f001 fc4e 	bl	804c39c <vcom_Trace>

    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Enable );
    TracePeripheralReady = SET;
    RESTORE_PRIMASK();
  }
}
 804ab00:	b002      	add	sp, #8
 804ab02:	bd10      	pop	{r4, pc}
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Enable );
 804ab04:	2100      	movs	r1, #0
 804ab06:	2020      	movs	r0, #32
 804ab08:	f7ff fd68 	bl	804a5dc <LPM_SetStopMode>
    TracePeripheralReady = SET;
 804ab0c:	4b03      	ldr	r3, [pc, #12]	; (804ab1c <Trace_TxCpltCallback+0x4c>)
 804ab0e:	2201      	movs	r2, #1
 804ab10:	701a      	strb	r2, [r3, #0]
 804ab12:	f384 8810 	msr	PRIMASK, r4
}
 804ab16:	e7f3      	b.n	804ab00 <Trace_TxCpltCallback+0x30>
 804ab18:	20009408 	.word	0x20009408
 804ab1c:	200010b0 	.word	0x200010b0

0804ab20 <TraceInit>:
{
 804ab20:	b508      	push	{r3, lr}
  OutputInit(Trace_TxCpltCallback);
 804ab22:	4806      	ldr	r0, [pc, #24]	; (804ab3c <TraceInit+0x1c>)
 804ab24:	f001 fc1e 	bl	804c364 <vcom_Init>
  circular_queue_init(&MsgTraceQueue, MsgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE);
 804ab28:	4805      	ldr	r0, [pc, #20]	; (804ab40 <TraceInit+0x20>)
 804ab2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 804ab2e:	f100 0110 	add.w	r1, r0, #16
}
 804ab32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  circular_queue_init(&MsgTraceQueue, MsgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE);
 804ab36:	f7ff bd92 	b.w	804a65e <circular_queue_init>
 804ab3a:	bf00      	nop
 804ab3c:	0804aad1 	.word	0x0804aad1
 804ab40:	20009408 	.word	0x20009408

0804ab44 <TraceSend>:
{
 804ab44:	b40f      	push	{r0, r1, r2, r3}
 804ab46:	b5f0      	push	{r4, r5, r6, r7, lr}
 804ab48:	b0c5      	sub	sp, #276	; 0x114
 804ab4a:	ab4a      	add	r3, sp, #296	; 0x128
  uint16_t bufSize=vsnprintf(buf,TEMPBUFSIZE,strFormat, vaArgs);
 804ab4c:	f44f 7180 	mov.w	r1, #256	; 0x100
{
 804ab50:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start( vaArgs, strFormat);
 804ab54:	9302      	str	r3, [sp, #8]
  uint16_t bufSize=vsnprintf(buf,TEMPBUFSIZE,strFormat, vaArgs);
 804ab56:	a804      	add	r0, sp, #16
 804ab58:	f002 f8ca 	bl	804ccf0 <vsniprintf>
 804ab5c:	f8ad 0006 	strh.w	r0, [sp, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 804ab60:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 804ab64:	b672      	cpsid	i
  status =circular_queue_add(&MsgTraceQueue,(uint8_t*)buf, bufSize);
 804ab66:	4814      	ldr	r0, [pc, #80]	; (804abb8 <TraceSend+0x74>)
 804ab68:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 804ab6c:	a904      	add	r1, sp, #16
 804ab6e:	f7ff fd7d 	bl	804a66c <circular_queue_add>
  if ((status==0 ) && (TracePeripheralReady==SET))
 804ab72:	4605      	mov	r5, r0
 804ab74:	b9e0      	cbnz	r0, 804abb0 <TraceSend+0x6c>
 804ab76:	4f11      	ldr	r7, [pc, #68]	; (804abbc <TraceSend+0x78>)
 804ab78:	783c      	ldrb	r4, [r7, #0]
 804ab7a:	b2e4      	uxtb	r4, r4
 804ab7c:	2c01      	cmp	r4, #1
 804ab7e:	d117      	bne.n	804abb0 <TraceSend+0x6c>
    circular_queue_get(&MsgTraceQueue,&buffer,&bufSize);
 804ab80:	f10d 0206 	add.w	r2, sp, #6
 804ab84:	a903      	add	r1, sp, #12
 804ab86:	480c      	ldr	r0, [pc, #48]	; (804abb8 <TraceSend+0x74>)
 804ab88:	f7ff fde9 	bl	804a75e <circular_queue_get>
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Disable );
 804ab8c:	4621      	mov	r1, r4
 804ab8e:	2020      	movs	r0, #32
    TracePeripheralReady = RESET;
 804ab90:	703d      	strb	r5, [r7, #0]
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Disable );
 804ab92:	f7ff fd23 	bl	804a5dc <LPM_SetStopMode>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 804ab96:	f386 8810 	msr	PRIMASK, r6
    OutputTrace(buffer, bufSize);
 804ab9a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 804ab9e:	9803      	ldr	r0, [sp, #12]
 804aba0:	f001 fbfc 	bl	804c39c <vcom_Trace>
}
 804aba4:	4628      	mov	r0, r5
 804aba6:	b045      	add	sp, #276	; 0x114
 804aba8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 804abac:	b004      	add	sp, #16
 804abae:	4770      	bx	lr
 804abb0:	f386 8810 	msr	PRIMASK, r6
  return status;
 804abb4:	e7f6      	b.n	804aba4 <TraceSend+0x60>
 804abb6:	bf00      	nop
 804abb8:	20009408 	.word	0x20009408
 804abbc:	200010b0 	.word	0x200010b0

0804abc0 <rand1>:

static uint32_t next = 1;

int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 804abc0:	4b07      	ldr	r3, [pc, #28]	; (804abe0 <rand1+0x20>)
 804abc2:	4908      	ldr	r1, [pc, #32]	; (804abe4 <rand1+0x24>)
 804abc4:	6818      	ldr	r0, [r3, #0]
 804abc6:	f243 0239 	movw	r2, #12345	; 0x3039
 804abca:	fb01 2000 	mla	r0, r1, r0, r2
 804abce:	6018      	str	r0, [r3, #0]
 804abd0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 804abd4:	fbb0 f3f3 	udiv	r3, r0, r3
 804abd8:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 804abdc:	1ac0      	subs	r0, r0, r3
 804abde:	4770      	bx	lr
 804abe0:	200010b4 	.word	0x200010b4
 804abe4:	41c64e6d 	.word	0x41c64e6d

0804abe8 <randr>:
    next = seed;
}
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 804abe8:	b538      	push	{r3, r4, r5, lr}
 804abea:	4605      	mov	r5, r0
 804abec:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 804abee:	f7ff ffe7 	bl	804abc0 <rand1>
 804abf2:	1b61      	subs	r1, r4, r5
 804abf4:	3101      	adds	r1, #1
 804abf6:	fb90 f3f1 	sdiv	r3, r0, r1
 804abfa:	fb03 0011 	mls	r0, r3, r1, r0
}
 804abfe:	4428      	add	r0, r5
 804ac00:	bd38      	pop	{r3, r4, r5, pc}

0804ac02 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 804ac02:	3801      	subs	r0, #1
 804ac04:	440a      	add	r2, r1
    while( size-- )
 804ac06:	4291      	cmp	r1, r2
 804ac08:	d100      	bne.n	804ac0c <memcpy1+0xa>
    {
        *dst++ = *src++;
    }
}
 804ac0a:	4770      	bx	lr
        *dst++ = *src++;
 804ac0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 804ac10:	f800 3f01 	strb.w	r3, [r0, #1]!
 804ac14:	e7f7      	b.n	804ac06 <memcpy1+0x4>

0804ac16 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 804ac16:	4410      	add	r0, r2
 804ac18:	440a      	add	r2, r1
    dst = dst + ( size - 1 );
    while( size-- )
 804ac1a:	4291      	cmp	r1, r2
 804ac1c:	d100      	bne.n	804ac20 <memcpyr+0xa>
    {
        *dst-- = *src++;
    }
}
 804ac1e:	4770      	bx	lr
        *dst-- = *src++;
 804ac20:	f811 3b01 	ldrb.w	r3, [r1], #1
 804ac24:	f800 3d01 	strb.w	r3, [r0, #-1]!
 804ac28:	e7f7      	b.n	804ac1a <memcpyr+0x4>

0804ac2a <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 804ac2a:	4402      	add	r2, r0
    while( size-- )
 804ac2c:	4290      	cmp	r0, r2
 804ac2e:	d100      	bne.n	804ac32 <memset1+0x8>
    {
        *dst++ = value;
    }
}
 804ac30:	4770      	bx	lr
        *dst++ = value;
 804ac32:	f800 1b01 	strb.w	r1, [r0], #1
 804ac36:	e7f9      	b.n	804ac2c <memset1+0x2>

0804ac38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 804ac38:	f8df d034 	ldr.w	sp, [pc, #52]	; 804ac70 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 804ac3c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 804ac3e:	e003      	b.n	804ac48 <LoopCopyDataInit>

0804ac40 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 804ac40:	4b0c      	ldr	r3, [pc, #48]	; (804ac74 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 804ac42:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 804ac44:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 804ac46:	3104      	adds	r1, #4

0804ac48 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 804ac48:	480b      	ldr	r0, [pc, #44]	; (804ac78 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 804ac4a:	4b0c      	ldr	r3, [pc, #48]	; (804ac7c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 804ac4c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 804ac4e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 804ac50:	d3f6      	bcc.n	804ac40 <CopyDataInit>
  ldr  r2, =_sbss
 804ac52:	4a0b      	ldr	r2, [pc, #44]	; (804ac80 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 804ac54:	e002      	b.n	804ac5c <LoopFillZerobss>

0804ac56 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 804ac56:	2300      	movs	r3, #0
  str  r3, [r2], #4
 804ac58:	f842 3b04 	str.w	r3, [r2], #4

0804ac5c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 804ac5c:	4b09      	ldr	r3, [pc, #36]	; (804ac84 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 804ac5e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 804ac60:	d3f9      	bcc.n	804ac56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 804ac62:	f7f8 f825 	bl	8042cb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 804ac66:	f001 fea7 	bl	804c9b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 804ac6a:	f000 fe23 	bl	804b8b4 <main>
  bx  lr    
 804ac6e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 804ac70:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 804ac74:	0804ee50 	.word	0x0804ee50
  ldr  r0, =_sdata
 804ac78:	20001000 	.word	0x20001000
  ldr  r3, =_edata
 804ac7c:	20001150 	.word	0x20001150
  ldr  r2, =_sbss
 804ac80:	20001150 	.word	0x20001150
  ldr  r3, = _ebss
 804ac84:	2000c38c 	.word	0x2000c38c

0804ac88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 804ac88:	e7fe      	b.n	804ac88 <ADC_IRQHandler>

0804ac8a <Str2Int>:
  * @param  pIntNum: The integer value
  * @retval 1: Correct
  *         0: Error
  */
uint32_t Str2Int(uint8_t *pInputStr, uint32_t *pIntNum)
{
 804ac8a:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0U;
  uint32_t res = 0U;
  uint32_t val = 0U;

  if ((pInputStr[0U] == '0') && ((pInputStr[1U] == 'x') || (pInputStr[1U] == 'X')))
 804ac8c:	7803      	ldrb	r3, [r0, #0]
 804ac8e:	2b30      	cmp	r3, #48	; 0x30
 804ac90:	d127      	bne.n	804ace2 <Str2Int+0x58>
 804ac92:	7843      	ldrb	r3, [r0, #1]
 804ac94:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 804ac98:	2b58      	cmp	r3, #88	; 0x58
 804ac9a:	d122      	bne.n	804ace2 <Str2Int+0x58>
 804ac9c:	2400      	movs	r4, #0
 804ac9e:	2502      	movs	r5, #2
  {
    i = 2U;
    while ((i < 11U) && (pInputStr[i] != '\0'))
 804aca0:	5d43      	ldrb	r3, [r0, r5]
 804aca2:	b193      	cbz	r3, 804acca <Str2Int+0x40>
    {
      if (ISVALIDHEX(pInputStr[i]))
 804aca4:	f023 0620 	bic.w	r6, r3, #32
 804aca8:	3e41      	subs	r6, #65	; 0x41
 804acaa:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 804acae:	2e05      	cmp	r6, #5
 804acb0:	b2d7      	uxtb	r7, r2
 804acb2:	d901      	bls.n	804acb8 <Str2Int+0x2e>
 804acb4:	2f09      	cmp	r7, #9
 804acb6:	d808      	bhi.n	804acca <Str2Int+0x40>
      {
        val = (val << 4U) + CONVERTHEX(pInputStr[i]);
 804acb8:	2f09      	cmp	r7, #9
 804acba:	ea4f 1404 	mov.w	r4, r4, lsl #4
 804acbe:	d809      	bhi.n	804acd4 <Str2Int+0x4a>
 804acc0:	4613      	mov	r3, r2
      {
        /* Return 0, Invalid input */
        res = 0U;
        break;
      }
      i++;
 804acc2:	3501      	adds	r5, #1
    while ((i < 11U) && (pInputStr[i] != '\0'))
 804acc4:	2d0b      	cmp	r5, #11
        val = (val << 4U) + CONVERTHEX(pInputStr[i]);
 804acc6:	441c      	add	r4, r3
    while ((i < 11U) && (pInputStr[i] != '\0'))
 804acc8:	d1ea      	bne.n	804aca0 <Str2Int+0x16>
    }

    /* valid result */
    if (pInputStr[i] == '\0')
 804acca:	5d43      	ldrb	r3, [r0, r5]
 804accc:	bb4b      	cbnz	r3, 804ad22 <Str2Int+0x98>
    {
      *pIntNum = val;
 804acce:	600c      	str	r4, [r1, #0]
      res = 1U;
 804acd0:	2001      	movs	r0, #1
 804acd2:	e027      	b.n	804ad24 <Str2Int+0x9a>
        val = (val << 4U) + CONVERTHEX(pInputStr[i]);
 804acd4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 804acd8:	2a05      	cmp	r2, #5
 804acda:	bf94      	ite	ls
 804acdc:	3b37      	subls	r3, #55	; 0x37
 804acde:	3b57      	subhi	r3, #87	; 0x57
 804ace0:	e7ef      	b.n	804acc2 <Str2Int+0x38>
 804ace2:	1e44      	subs	r4, r0, #1
 804ace4:	f100 060a 	add.w	r6, r0, #10
 804ace8:	2300      	movs	r3, #0
        *pIntNum = val;
        res = 1U;
      }
      else if (ISVALIDDEC(pInputStr[i]))
      {
        val = val * 10U + CONVERTDEC(pInputStr[i]);
 804acea:	270a      	movs	r7, #10
      if (pInputStr[i] == '\0')
 804acec:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 804acf0:	b90a      	cbnz	r2, 804acf6 <Str2Int+0x6c>
        *pIntNum = val;
 804acf2:	600b      	str	r3, [r1, #0]
        res = 1U;
 804acf4:	e7ec      	b.n	804acd0 <Str2Int+0x46>
      else if (((pInputStr[i] == 'k') || (pInputStr[i] == 'K')) && (i > 0U))
 804acf6:	f002 05df 	and.w	r5, r2, #223	; 0xdf
 804acfa:	2d4b      	cmp	r5, #75	; 0x4b
 804acfc:	d103      	bne.n	804ad06 <Str2Int+0x7c>
 804acfe:	4284      	cmp	r4, r0
 804ad00:	d007      	beq.n	804ad12 <Str2Int+0x88>
        val = val << 10U;
 804ad02:	029b      	lsls	r3, r3, #10
 804ad04:	e7f5      	b.n	804acf2 <Str2Int+0x68>
      else if (((pInputStr[i] == 'm') || (pInputStr[i] == 'M')) && (i > 0U))
 804ad06:	2d4d      	cmp	r5, #77	; 0x4d
 804ad08:	d103      	bne.n	804ad12 <Str2Int+0x88>
 804ad0a:	4284      	cmp	r4, r0
 804ad0c:	d009      	beq.n	804ad22 <Str2Int+0x98>
        val = val << 20U;
 804ad0e:	051b      	lsls	r3, r3, #20
 804ad10:	e7ef      	b.n	804acf2 <Str2Int+0x68>
      else if (ISVALIDDEC(pInputStr[i]))
 804ad12:	3a30      	subs	r2, #48	; 0x30
 804ad14:	b2d5      	uxtb	r5, r2
 804ad16:	2d09      	cmp	r5, #9
 804ad18:	d803      	bhi.n	804ad22 <Str2Int+0x98>
    while ((i < 11U) && (res != 1U))
 804ad1a:	42b4      	cmp	r4, r6
        val = val * 10U + CONVERTDEC(pInputStr[i]);
 804ad1c:	fb07 2303 	mla	r3, r7, r3, r2
    while ((i < 11U) && (res != 1U))
 804ad20:	d1e4      	bne.n	804acec <Str2Int+0x62>
      res = 1U;
 804ad22:	2000      	movs	r0, #0
      i++;
    }
  }

  return res;
}
 804ad24:	bdf0      	pop	{r4, r5, r6, r7, pc}

0804ad26 <Serial_PutByte>:
  * @brief  Transmit a byte to the HyperTerminal
  * @param  param The byte to be sent
  * @retval HAL_StatusTypeDef HAL_OK if OK
  */
HAL_StatusTypeDef Serial_PutByte(uint8_t uParam)
{
 804ad26:	b507      	push	{r0, r1, r2, lr}
 804ad28:	ab02      	add	r3, sp, #8
  return COM_Transmit(&uParam, 1U, TX_TIMEOUT);
 804ad2a:	2264      	movs	r2, #100	; 0x64
{
 804ad2c:	f803 0d01 	strb.w	r0, [r3, #-1]!
  return COM_Transmit(&uParam, 1U, TX_TIMEOUT);
 804ad30:	2101      	movs	r1, #1
 804ad32:	4618      	mov	r0, r3
 804ad34:	f001 fcd2 	bl	804c6dc <COM_Transmit>
}
 804ad38:	b003      	add	sp, #12
 804ad3a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0804ad40 <Error_Handler>:
  __HAL_RCC_DBGMCU_CLK_DISABLE();
#endif
}

void Error_Handler(void)
{
 804ad40:	b508      	push	{r3, lr}
	PRINTF("Erro Handler");
 804ad42:	4802      	ldr	r0, [pc, #8]	; (804ad4c <Error_Handler+0xc>)
 804ad44:	f7ff fefe 	bl	804ab44 <TraceSend>
 804ad48:	e7fe      	b.n	804ad48 <Error_Handler+0x8>
 804ad4a:	bf00      	nop
 804ad4c:	0804e93d 	.word	0x0804e93d

0804ad50 <FLASH_INT_If_Clear_Error>:
  * @brief  Clear error flags raised during previous operation
  * @param  None
  * @retval HAL Status.
  */
HAL_StatusTypeDef FLASH_INT_If_Clear_Error(void)
{
 804ad50:	b508      	push	{r3, lr}
  HAL_StatusTypeDef ret = HAL_ERROR;

  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 804ad52:	f7f8 fc11 	bl	8043578 <HAL_FLASH_Unlock>
 804ad56:	b950      	cbnz	r0, 804ad6e <FLASH_INT_If_Clear_Error+0x1e>
  {

    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_SR_WRPERR | FLASH_SR_PGAERR | FLASH_SR_PGPERR | FLASH_SR_PGSERR);
 804ad58:	4b06      	ldr	r3, [pc, #24]	; (804ad74 <FLASH_INT_If_Clear_Error+0x24>)
 804ad5a:	22f0      	movs	r2, #240	; 0xf0
 804ad5c:	60da      	str	r2, [r3, #12]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 804ad5e:	f7f8 fc1d 	bl	804359c <HAL_FLASH_Lock>
 804ad62:	b118      	cbz	r0, 804ad6c <FLASH_INT_If_Clear_Error+0x1c>
      ret = HAL_OK;
    }
#ifdef FLASH_IF_DBG
    else
    {
      FLASH_IF_TRACE("[FLASH_IF] Lock failure\r\n");
 804ad64:	4804      	ldr	r0, [pc, #16]	; (804ad78 <FLASH_INT_If_Clear_Error+0x28>)
#endif /* FLASH_IF_DBG */
  }
#ifdef FLASH_IF_DBG
  else
  {
    FLASH_IF_TRACE("[FLASH_IF] Unlock failure\r\n");
 804ad66:	f001 fee1 	bl	804cb2c <puts>
  HAL_StatusTypeDef ret = HAL_ERROR;
 804ad6a:	2001      	movs	r0, #1
  }
#endif /* FLASH_IF_DBG */
  return ret;
}
 804ad6c:	bd08      	pop	{r3, pc}
    FLASH_IF_TRACE("[FLASH_IF] Unlock failure\r\n");
 804ad6e:	4803      	ldr	r0, [pc, #12]	; (804ad7c <FLASH_INT_If_Clear_Error+0x2c>)
 804ad70:	e7f9      	b.n	804ad66 <FLASH_INT_If_Clear_Error+0x16>
 804ad72:	bf00      	nop
 804ad74:	40023c00 	.word	0x40023c00
 804ad78:	0804e94a 	.word	0x0804e94a
 804ad7c:	0804e963 	.word	0x0804e963

0804ad80 <FLASH_If_Read>:
  if ((uint32_t) pSource < EXTERNAL_FLASH_ADDRESS)
 804ad80:	f1b1 4f10 	cmp.w	r1, #2415919104	; 0x90000000
{
 804ad84:	b508      	push	{r3, lr}
  if ((uint32_t) pSource < EXTERNAL_FLASH_ADDRESS)
 804ad86:	d203      	bcs.n	804ad90 <FLASH_If_Read+0x10>
  memcpy(pDestination, pSource, uLength);
 804ad88:	f001 fe49 	bl	804ca1e <memcpy>
    return FLASH_INT_If_Read(pDestination, pSource, uLength);
 804ad8c:	2000      	movs	r0, #0
}
 804ad8e:	bd08      	pop	{r3, pc}
    return FLASH_EXT_If_Read(pDestination, pSource, uLength);
 804ad90:	2001      	movs	r0, #1
 804ad92:	e7fc      	b.n	804ad8e <FLASH_If_Read+0xe>

0804ad94 <FLASH_INT_If_Erase_Size>:
{
 804ad94:	b5f0      	push	{r4, r5, r6, r7, lr}
 804ad96:	b087      	sub	sp, #28
  uint32_t sector_error = 0U;
 804ad98:	2300      	movs	r3, #0
{
 804ad9a:	4605      	mov	r5, r0
 804ad9c:	460f      	mov	r7, r1
  uint32_t sector_error = 0U;
 804ad9e:	9300      	str	r3, [sp, #0]
  e_ret_status = FLASH_INT_If_Clear_Error();
 804ada0:	f7ff ffd6 	bl	804ad50 <FLASH_INT_If_Clear_Error>
  if (e_ret_status == HAL_OK)
 804ada4:	4604      	mov	r4, r0
 804ada6:	bb90      	cbnz	r0, 804ae0e <FLASH_INT_If_Erase_Size+0x7a>
    if (HAL_FLASH_Unlock() == HAL_OK)
 804ada8:	f7f8 fbe6 	bl	8043578 <HAL_FLASH_Unlock>
 804adac:	4604      	mov	r4, r0
 804adae:	bba8      	cbnz	r0, 804ae1c <FLASH_INT_If_Erase_Size+0x88>

static uint32_t GetSector(uint32_t Add)
{
  uint32_t sector = 0;

  while (Add >= FlashSectorsAddress[sector + 1])
 804adb0:	4b1b      	ldr	r3, [pc, #108]	; (804ae20 <FLASH_INT_If_Erase_Size+0x8c>)
  uint32_t sector = 0;
 804adb2:	4606      	mov	r6, r0
 804adb4:	4618      	mov	r0, r3
  while (Add >= FlashSectorsAddress[sector + 1])
 804adb6:	1c72      	adds	r2, r6, #1
 804adb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 804adbc:	428d      	cmp	r5, r1
 804adbe:	d229      	bcs.n	804ae14 <FLASH_INT_If_Erase_Size+0x80>
      nb_sectors = GetSector(uStart + uLength - 1U) - first_sector + 1U;
 804adc0:	3f01      	subs	r7, #1
 804adc2:	443d      	add	r5, r7
  uint32_t sector = 0;
 804adc4:	2300      	movs	r3, #0
  while (Add >= FlashSectorsAddress[sector + 1])
 804adc6:	1c5a      	adds	r2, r3, #1
 804adc8:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 804adcc:	428d      	cmp	r5, r1
 804adce:	d223      	bcs.n	804ae18 <FLASH_INT_If_Erase_Size+0x84>
      nb_sectors = GetSector(uStart + uLength - 1U) - first_sector + 1U;
 804add0:	f1c6 0501 	rsb	r5, r6, #1
 804add4:	441d      	add	r5, r3
      p_erase_init.TypeErase     = FLASH_TYPEERASE_SECTORS;
 804add6:	2300      	movs	r3, #0
 804add8:	9301      	str	r3, [sp, #4]
        WRITE_REG(IWDG->KR, IWDG_KEY_RELOAD);
 804adda:	4f12      	ldr	r7, [pc, #72]	; (804ae24 <FLASH_INT_If_Erase_Size+0x90>)
      p_erase_init.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 804addc:	2302      	movs	r3, #2
 804adde:	9305      	str	r3, [sp, #20]
        chunk_nb_sectors = (nb_sectors >= NB_PAGE_SECTOR_PER_ERASE) ? NB_PAGE_SECTOR_PER_ERASE : nb_sectors;
 804ade0:	2d02      	cmp	r5, #2
 804ade2:	462b      	mov	r3, r5
        if (HAL_FLASHEx_Erase(&p_erase_init, &sector_error) != HAL_OK)
 804ade4:	4669      	mov	r1, sp
        chunk_nb_sectors = (nb_sectors >= NB_PAGE_SECTOR_PER_ERASE) ? NB_PAGE_SECTOR_PER_ERASE : nb_sectors;
 804ade6:	bf28      	it	cs
 804ade8:	2302      	movcs	r3, #2
        if (HAL_FLASHEx_Erase(&p_erase_init, &sector_error) != HAL_OK)
 804adea:	a801      	add	r0, sp, #4
        p_erase_init.NbSectors = chunk_nb_sectors;
 804adec:	e9cd 6303 	strd	r6, r3, [sp, #12]
        nb_sectors -= chunk_nb_sectors;
 804adf0:	1aed      	subs	r5, r5, r3
        first_sector += chunk_nb_sectors;
 804adf2:	441e      	add	r6, r3
        if (HAL_FLASHEx_Erase(&p_erase_init, &sector_error) != HAL_OK)
 804adf4:	f7f8 fcb6 	bl	8043764 <HAL_FLASHEx_Erase>
 804adf8:	b110      	cbz	r0, 804ae00 <FLASH_INT_If_Erase_Size+0x6c>
          HAL_FLASH_GetError();
 804adfa:	f7f8 fbd9 	bl	80435b0 <HAL_FLASH_GetError>
          e_ret_status = HAL_ERROR;
 804adfe:	2401      	movs	r4, #1
        WRITE_REG(IWDG->KR, IWDG_KEY_RELOAD);
 804ae00:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 804ae04:	603b      	str	r3, [r7, #0]
      } while (nb_sectors > 0);
 804ae06:	2d00      	cmp	r5, #0
 804ae08:	d1ea      	bne.n	804ade0 <FLASH_INT_If_Erase_Size+0x4c>
      HAL_FLASH_Lock();
 804ae0a:	f7f8 fbc7 	bl	804359c <HAL_FLASH_Lock>
}
 804ae0e:	4620      	mov	r0, r4
 804ae10:	b007      	add	sp, #28
 804ae12:	bdf0      	pop	{r4, r5, r6, r7, pc}
  {
    sector++;
 804ae14:	4616      	mov	r6, r2
 804ae16:	e7ce      	b.n	804adb6 <FLASH_INT_If_Erase_Size+0x22>
 804ae18:	4613      	mov	r3, r2
 804ae1a:	e7d4      	b.n	804adc6 <FLASH_INT_If_Erase_Size+0x32>
      e_ret_status = HAL_ERROR;
 804ae1c:	2401      	movs	r4, #1
 804ae1e:	e7f6      	b.n	804ae0e <FLASH_INT_If_Erase_Size+0x7a>
 804ae20:	200010b8 	.word	0x200010b8
 804ae24:	40003000 	.word	0x40003000

0804ae28 <FLASH_If_Erase_Size>:
  if ((uint32_t) pStart < EXTERNAL_FLASH_ADDRESS)
 804ae28:	f1b0 4f10 	cmp.w	r0, #2415919104	; 0x90000000
 804ae2c:	d201      	bcs.n	804ae32 <FLASH_If_Erase_Size+0xa>
    return FLASH_INT_If_Erase_Size(pStart, uLength);
 804ae2e:	f7ff bfb1 	b.w	804ad94 <FLASH_INT_If_Erase_Size>
}
 804ae32:	2001      	movs	r0, #1
 804ae34:	4770      	bx	lr

0804ae36 <FLASH_INT_If_Write>:
{
 804ae36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804ae3a:	4605      	mov	r5, r0
 804ae3c:	460e      	mov	r6, r1
 804ae3e:	4617      	mov	r7, r2
  e_ret_status = FLASH_INT_If_Clear_Error();
 804ae40:	f7ff ff86 	bl	804ad50 <FLASH_INT_If_Clear_Error>
  if (e_ret_status == HAL_OK)
 804ae44:	4604      	mov	r4, r0
 804ae46:	b940      	cbnz	r0, 804ae5a <FLASH_INT_If_Write+0x24>
    if (HAL_FLASH_Unlock() != HAL_OK)
 804ae48:	f7f8 fb96 	bl	8043578 <HAL_FLASH_Unlock>
 804ae4c:	4604      	mov	r4, r0
 804ae4e:	b9c8      	cbnz	r0, 804ae84 <FLASH_INT_If_Write+0x4e>
 804ae50:	442f      	add	r7, r5
      for (i = 0U; i < uLength; i++)
 804ae52:	42bd      	cmp	r5, r7
 804ae54:	d104      	bne.n	804ae60 <FLASH_INT_If_Write+0x2a>
      HAL_FLASH_Lock();
 804ae56:	f7f8 fba1 	bl	804359c <HAL_FLASH_Lock>
}
 804ae5a:	4620      	mov	r0, r4
 804ae5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, (uint32_t) pDestination,  *((uint8_t *)(pdata + i))) == HAL_OK)
 804ae60:	7832      	ldrb	r2, [r6, #0]
 804ae62:	2300      	movs	r3, #0
 804ae64:	4629      	mov	r1, r5
 804ae66:	2000      	movs	r0, #0
 804ae68:	46b0      	mov	r8, r6
 804ae6a:	f7f8 fbd1 	bl	8043610 <HAL_FLASH_Program>
 804ae6e:	b938      	cbnz	r0, 804ae80 <FLASH_INT_If_Write+0x4a>
          if (*(uint8_t *)pDestination != *(uint8_t *)(pdata + i))
 804ae70:	f815 3b01 	ldrb.w	r3, [r5], #1
 804ae74:	f898 2000 	ldrb.w	r2, [r8]
 804ae78:	429a      	cmp	r2, r3
 804ae7a:	f106 0601 	add.w	r6, r6, #1
 804ae7e:	d0e8      	beq.n	804ae52 <FLASH_INT_If_Write+0x1c>
          e_ret_status = HAL_ERROR;
 804ae80:	2401      	movs	r4, #1
 804ae82:	e7e8      	b.n	804ae56 <FLASH_INT_If_Write+0x20>
      return HAL_ERROR;
 804ae84:	2401      	movs	r4, #1
 804ae86:	e7e8      	b.n	804ae5a <FLASH_INT_If_Write+0x24>

0804ae88 <FLASH_If_Write>:
  if ((uint32_t) pDestination < EXTERNAL_FLASH_ADDRESS)
 804ae88:	f1b0 4f10 	cmp.w	r0, #2415919104	; 0x90000000
 804ae8c:	d201      	bcs.n	804ae92 <FLASH_If_Write+0xa>
    return FLASH_INT_If_Write(pDestination, pSource, uLength);
 804ae8e:	f7ff bfd2 	b.w	804ae36 <FLASH_INT_If_Write>
}
 804ae92:	2001      	movs	r0, #1
 804ae94:	4770      	bx	lr
	...

0804ae98 <Ymodem_HeaderPktRxCpltCallback>:
  * @brief  Ymodem Header Packet Transfer completed callback.
  * @param  uFileSize Dimension of the file that will be received (Bytes).
  * @retval None
  */
HAL_StatusTypeDef Ymodem_HeaderPktRxCpltCallback(uint32_t uFileSize)
{
 804ae98:	b510      	push	{r4, lr}
  /*Reset of the ymodem variables */
  m_uFileSizeYmodem = 0U;
  m_uPacketsReceived = 0U;
 804ae9a:	4b07      	ldr	r3, [pc, #28]	; (804aeb8 <Ymodem_HeaderPktRxCpltCallback+0x20>)
 804ae9c:	2400      	movs	r4, #0
  m_uNbrBlocksYmodem = 0U;

  /*Filesize information is stored*/
  m_uFileSizeYmodem = uFileSize;
 804ae9e:	e9c3 4000 	strd	r4, r0, [r3]

  /*Compute the number of blocks */
#ifndef MINICOM_YMODEM
  /* Teraterm sends 1kB YMODEM packets */
  m_uNbrBlocksYmodem = (m_uFileSizeYmodem + (PACKET_1K_SIZE - 1U)) / PACKET_1K_SIZE;
 804aea2:	f200 30ff 	addw	r0, r0, #1023	; 0x3ff
 804aea6:	0a80      	lsrs	r0, r0, #10
 804aea8:	6098      	str	r0, [r3, #8]
  /* Minicom sends 128 bytes YMODEM packets */
  m_uNbrBlocksYmodem = (m_uFileSizeYmodem + (PACKET_SIZE - 1U)) / PACKET_SIZE;
#endif /* MINICOM_YMODEM */

  /* NOTE : delay inserted for Ymodem protocol*/
  HAL_Delay(1000U);
 804aeaa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 804aeae:	f000 ff63 	bl	804bd78 <HAL_Delay>

  return HAL_OK;
}
 804aeb2:	4620      	mov	r0, r4
 804aeb4:	bd10      	pop	{r4, pc}
 804aeb6:	bf00      	nop
 804aeb8:	20009518 	.word	0x20009518

0804aebc <Ymodem_DataPktRxCpltCallback>:
  * @retval None
  */
#ifndef MINICOM_YMODEM
/* Teraterm YMODEM */
HAL_StatusTypeDef Ymodem_DataPktRxCpltCallback(uint8_t *pData, uint32_t uFlashDestination, uint32_t uSize)
{
 804aebc:	b570      	push	{r4, r5, r6, lr}
  uint32_t uOldSize;
#if !defined(SFU_NO_SWAP)
  SE_FwRawHeaderTypeDef fw_header_dwl;
#endif /* (SFU_NO_SWAP) */

  m_uPacketsReceived++;
 804aebe:	4c43      	ldr	r4, [pc, #268]	; (804afcc <Ymodem_DataPktRxCpltCallback+0x110>)
 804aec0:	6823      	ldr	r3, [r4, #0]
{
 804aec2:	4615      	mov	r5, r2

  /*Increase the number of received packets*/
  if (m_uPacketsReceived == m_uNbrBlocksYmodem) /*Last Packet*/
 804aec4:	68a2      	ldr	r2, [r4, #8]
  m_uPacketsReceived++;
 804aec6:	3301      	adds	r3, #1
  if (m_uPacketsReceived == m_uNbrBlocksYmodem) /*Last Packet*/
 804aec8:	4293      	cmp	r3, r2
{
 804aeca:	b0d0      	sub	sp, #320	; 0x140
 804aecc:	4606      	mov	r6, r0
  m_uPacketsReceived++;
 804aece:	6023      	str	r3, [r4, #0]
  if (m_uPacketsReceived == m_uNbrBlocksYmodem) /*Last Packet*/
 804aed0:	d106      	bne.n	804aee0 <Ymodem_DataPktRxCpltCallback+0x24>
  {
    /*Extracting actual payload from last packet*/
    if (0 == (m_uFileSizeYmodem % PACKET_1K_SIZE))
 804aed2:	6865      	ldr	r5, [r4, #4]
 804aed4:	f3c5 0509 	ubfx	r5, r5, #0, #10
    {
      /* The last packet must be fully considered */
      uSize = PACKET_1K_SIZE;
 804aed8:	2d00      	cmp	r5, #0
 804aeda:	bf08      	it	eq
 804aedc:	f44f 6580 	moveq.w	r5, #1024	; 0x400
      uSize = m_uFileSizeYmodem - ((uint32_t)(m_uFileSizeYmodem / PACKET_1K_SIZE) * PACKET_1K_SIZE);
    }
  }

  /* First packet : Contains header information: PartialFwSize and PartialFwOffset information */
  if (m_uPacketsReceived == 1)
 804aee0:	2b01      	cmp	r3, #1
 804aee2:	d112      	bne.n	804af0a <Ymodem_DataPktRxCpltCallback+0x4e>
    /* End of Image to be downloaded */
#if defined(SFU_NO_SWAP)
    m_uDwlImgEnd = uFlashDestination + ((SE_FwRawHeaderTypeDef *)pData)->FwSize + SFU_IMG_IMAGE_OFFSET;
#else
    m_uDwlImgEnd = uFlashDestination + ((SE_FwRawHeaderTypeDef *)pData)->PartialFwSize
                   + (((SE_FwRawHeaderTypeDef *)pData)->PartialFwOffset % SLOT_SIZE(SLOT_SWAP))
 804aee4:	4b3a      	ldr	r3, [pc, #232]	; (804afd0 <Ymodem_DataPktRxCpltCallback+0x114>)
 804aee6:	4a3b      	ldr	r2, [pc, #236]	; (804afd4 <Ymodem_DataPktRxCpltCallback+0x118>)
 804aee8:	69db      	ldr	r3, [r3, #28]
 804aeea:	69d2      	ldr	r2, [r2, #28]
 804aeec:	68f0      	ldr	r0, [r6, #12]
 804aeee:	3301      	adds	r3, #1
 804aef0:	1a9b      	subs	r3, r3, r2
 804aef2:	fbb0 f2f3 	udiv	r2, r0, r3
 804aef6:	fb03 0312 	mls	r3, r3, r2, r0
    m_uDwlImgEnd = uFlashDestination + ((SE_FwRawHeaderTypeDef *)pData)->PartialFwSize
 804aefa:	6932      	ldr	r2, [r6, #16]
    m_uDwlImgCurrent = uFlashDestination;
 804aefc:	e9c4 1103 	strd	r1, r1, [r4, #12]
    m_uDwlImgEnd = uFlashDestination + ((SE_FwRawHeaderTypeDef *)pData)->PartialFwSize
 804af00:	4411      	add	r1, r2
                   + SFU_IMG_IMAGE_OFFSET;
 804af02:	f501 7100 	add.w	r1, r1, #512	; 0x200
 804af06:	4419      	add	r1, r3
    m_uDwlImgEnd = uFlashDestination + ((SE_FwRawHeaderTypeDef *)pData)->PartialFwSize
 804af08:	6161      	str	r1, [r4, #20]
#endif /* SFU_NO_SWAP */
  }

  /* This packet : contains end of FW header */
  if ((m_uDwlImgCurrent < (m_uDwlImgStart + SFU_IMG_IMAGE_OFFSET)) &&
 804af0a:	68e3      	ldr	r3, [r4, #12]
 804af0c:	6920      	ldr	r0, [r4, #16]
 804af0e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 804af12:	4283      	cmp	r3, r0
 804af14:	d946      	bls.n	804afa4 <Ymodem_DataPktRxCpltCallback+0xe8>
      ((m_uDwlImgCurrent + uSize) >= (m_uDwlImgStart + SFU_IMG_IMAGE_OFFSET)))
 804af16:	1942      	adds	r2, r0, r5
  if ((m_uDwlImgCurrent < (m_uDwlImgStart + SFU_IMG_IMAGE_OFFSET)) &&
 804af18:	4293      	cmp	r3, r2
 804af1a:	d843      	bhi.n	804afa4 <Ymodem_DataPktRxCpltCallback+0xe8>
    uLength = SFU_IMG_IMAGE_OFFSET % PACKET_1K_SIZE;
    if (uLength == 0)
    {
      uLength = PACKET_1K_SIZE;
    }
    if (FLASH_If_Write((void *)m_uDwlImgCurrent, pData, uLength) == HAL_OK)
 804af1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 804af20:	4631      	mov	r1, r6
 804af22:	f7ff ffb1 	bl	804ae88 <FLASH_If_Write>
 804af26:	2800      	cmp	r0, #0
 804af28:	d13e      	bne.n	804afa8 <Ymodem_DataPktRxCpltCallback+0xec>
#else
      /*
       * Read header from dwl area : in some configuration header can be transmitted with 2 YMODEM packets
       * ==> pData contains only the last part of the header and cannot be used to retrieve PartialFwOffset
       */
      e_ret_status = FLASH_If_Read((uint8_t *)&fw_header_dwl, (void *) m_uDwlImgStart, SE_FW_HEADER_TOT_LEN);
 804af2a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 804af2e:	68e1      	ldr	r1, [r4, #12]
 804af30:	4668      	mov	r0, sp
 804af32:	f7ff ff25 	bl	804ad80 <FLASH_If_Read>

      /* Shift the DWL area pointer, to align image with (PartialFwOffset % sector size) in DWL area */
      m_uDwlImgCurrent += uLength + fw_header_dwl.PartialFwOffset % SLOT_SIZE(SLOT_SWAP);
 804af36:	4b26      	ldr	r3, [pc, #152]	; (804afd0 <Ymodem_DataPktRxCpltCallback+0x114>)
 804af38:	4a26      	ldr	r2, [pc, #152]	; (804afd4 <Ymodem_DataPktRxCpltCallback+0x118>)
 804af3a:	69db      	ldr	r3, [r3, #28]
 804af3c:	69d2      	ldr	r2, [r2, #28]
 804af3e:	9903      	ldr	r1, [sp, #12]
 804af40:	3301      	adds	r3, #1
 804af42:	1a9b      	subs	r3, r3, r2
 804af44:	fbb1 f2f3 	udiv	r2, r1, r3
 804af48:	fb03 1312 	mls	r3, r3, r2, r1
 804af4c:	6922      	ldr	r2, [r4, #16]
 804af4e:	f502 7200 	add.w	r2, r2, #512	; 0x200
 804af52:	4413      	add	r3, r2
 804af54:	6123      	str	r3, [r4, #16]
#endif /* SFU_NO_SWAP */

      /* Update remaining packet size to write */
      uSize -= uLength;
 804af56:	f5a5 7500 	sub.w	r5, r5, #512	; 0x200

      /* Update pData pointer to received packet data */
      pData += uLength;
 804af5a:	f506 7600 	add.w	r6, r6, #512	; 0x200
      e_ret_status = HAL_ERROR;
    }
  }

  /* Skip data write if all has been already written as part of the header */
  if (uSize != 0U)
 804af5e:	b19d      	cbz	r5, 804af88 <Ymodem_DataPktRxCpltCallback+0xcc>
  {
    /*Adjust dimension to unitary flash programming length */
    if (uSize % FLASH_IF_MIN_WRITE_LEN != 0U)
 804af60:	076b      	lsls	r3, r5, #29
 804af62:	d00b      	beq.n	804af7c <Ymodem_DataPktRxCpltCallback+0xc0>
    {
      uOldSize = uSize;
      uSize += (FLASH_IF_MIN_WRITE_LEN - (uSize % FLASH_IF_MIN_WRITE_LEN));
      m_uDwlImgEnd += (FLASH_IF_MIN_WRITE_LEN - (uSize % FLASH_IF_MIN_WRITE_LEN));
 804af64:	6962      	ldr	r2, [r4, #20]
      uSize += (FLASH_IF_MIN_WRITE_LEN - (uSize % FLASH_IF_MIN_WRITE_LEN));
 804af66:	f025 0307 	bic.w	r3, r5, #7
      m_uDwlImgEnd += (FLASH_IF_MIN_WRITE_LEN - (uSize % FLASH_IF_MIN_WRITE_LEN));
 804af6a:	3208      	adds	r2, #8
      uSize += (FLASH_IF_MIN_WRITE_LEN - (uSize % FLASH_IF_MIN_WRITE_LEN));
 804af6c:	3308      	adds	r3, #8
      m_uDwlImgEnd += (FLASH_IF_MIN_WRITE_LEN - (uSize % FLASH_IF_MIN_WRITE_LEN));
 804af6e:	6162      	str	r2, [r4, #20]
 804af70:	4435      	add	r5, r6
      while (uOldSize < uSize)
      {
        pData[uOldSize] = 0xFF;
 804af72:	21ff      	movs	r1, #255	; 0xff
      while (uOldSize < uSize)
 804af74:	1baa      	subs	r2, r5, r6
 804af76:	429a      	cmp	r2, r3
 804af78:	d318      	bcc.n	804afac <Ymodem_DataPktRxCpltCallback+0xf0>
 804af7a:	461d      	mov	r5, r3
    }

    /* Write Data in Flash - size has to be 64-bit aligned */

    /* Write in flash only if not beyond allowed area */
    if (((m_uDwlImgCurrent + uSize) <= m_uDwlImgEnd) && (e_ret_status == HAL_OK))
 804af7c:	6923      	ldr	r3, [r4, #16]
 804af7e:	6962      	ldr	r2, [r4, #20]
 804af80:	1959      	adds	r1, r3, r5
 804af82:	4291      	cmp	r1, r2
 804af84:	d915      	bls.n	804afb2 <Ymodem_DataPktRxCpltCallback+0xf6>
        e_ret_status = HAL_ERROR;
      }
    }
    else
    {
      e_ret_status = HAL_ERROR;
 804af86:	2001      	movs	r0, #1
    }
  }

  /* Last packet : reset m_uPacketsReceived */
  if (m_uPacketsReceived == m_uNbrBlocksYmodem)
 804af88:	68a3      	ldr	r3, [r4, #8]
 804af8a:	6822      	ldr	r2, [r4, #0]
 804af8c:	429a      	cmp	r2, r3
  {
    m_uPacketsReceived = 0U;
 804af8e:	bf04      	itt	eq
 804af90:	2300      	moveq	r3, #0
 804af92:	6023      	streq	r3, [r4, #0]
  }

  /* Reset data counters in case of error */
  if (e_ret_status == HAL_ERROR)
 804af94:	2801      	cmp	r0, #1
  {

    /*Reset of the ymodem variables */
    m_uFileSizeYmodem = 0U;
 804af96:	bf02      	ittt	eq
 804af98:	2300      	moveq	r3, #0
    m_uPacketsReceived = 0U;
 804af9a:	e9c4 3300 	strdeq	r3, r3, [r4]
    m_uNbrBlocksYmodem = 0U;
 804af9e:	60a3      	streq	r3, [r4, #8]
  }
  return e_ret_status;
}
 804afa0:	b050      	add	sp, #320	; 0x140
 804afa2:	bd70      	pop	{r4, r5, r6, pc}
  HAL_StatusTypeDef e_ret_status = HAL_OK;
 804afa4:	2000      	movs	r0, #0
 804afa6:	e7da      	b.n	804af5e <Ymodem_DataPktRxCpltCallback+0xa2>
      e_ret_status = HAL_ERROR;
 804afa8:	2001      	movs	r0, #1
 804afaa:	e7d8      	b.n	804af5e <Ymodem_DataPktRxCpltCallback+0xa2>
        pData[uOldSize] = 0xFF;
 804afac:	f805 1b01 	strb.w	r1, [r5], #1
 804afb0:	e7e0      	b.n	804af74 <Ymodem_DataPktRxCpltCallback+0xb8>
    if (((m_uDwlImgCurrent + uSize) <= m_uDwlImgEnd) && (e_ret_status == HAL_OK))
 804afb2:	2800      	cmp	r0, #0
 804afb4:	d1e7      	bne.n	804af86 <Ymodem_DataPktRxCpltCallback+0xca>
      if (FLASH_If_Write((void *)m_uDwlImgCurrent, pData, uSize) == HAL_OK)
 804afb6:	462a      	mov	r2, r5
 804afb8:	4631      	mov	r1, r6
 804afba:	4618      	mov	r0, r3
 804afbc:	f7ff ff64 	bl	804ae88 <FLASH_If_Write>
 804afc0:	2800      	cmp	r0, #0
 804afc2:	d1e0      	bne.n	804af86 <Ymodem_DataPktRxCpltCallback+0xca>
        m_uDwlImgCurrent += uSize;
 804afc4:	6923      	ldr	r3, [r4, #16]
 804afc6:	441d      	add	r5, r3
 804afc8:	6125      	str	r5, [r4, #16]
 804afca:	e7dd      	b.n	804af88 <Ymodem_DataPktRxCpltCallback+0xcc>
 804afcc:	20009518 	.word	0x20009518
 804afd0:	0804e6bc 	.word	0x0804e6bc
 804afd4:	0804e69c 	.word	0x0804e69c

0804afd8 <FW_UPDATE_Run>:
{
 804afd8:	b530      	push	{r4, r5, lr}
  PRINTF("\r\n================ New Fw Download =========================\r\n\n");
 804afda:	482c      	ldr	r0, [pc, #176]	; (804b08c <FW_UPDATE_Run+0xb4>)
{
 804afdc:	b0d7      	sub	sp, #348	; 0x15c
  PRINTF("\r\n================ New Fw Download =========================\r\n\n");
 804afde:	f7ff fdb1 	bl	804ab44 <TraceSend>
  SFU_APP_GetDownloadAreaInfo(SLOT_DWL_1, &fw_image_dwl_area);
 804afe2:	a902      	add	r1, sp, #8
 804afe4:	2004      	movs	r0, #4
 804afe6:	f000 fe65 	bl	804bcb4 <SFU_APP_GetDownloadAreaInfo>
  YMODEM_CallbacksTypeDef ymodemCb = {Ymodem_HeaderPktRxCpltCallback, Ymodem_DataPktRxCpltCallback};
 804afea:	4b29      	ldr	r3, [pc, #164]	; (804b090 <FW_UPDATE_Run+0xb8>)
 804afec:	e893 0003 	ldmia.w	r3, {r0, r1}
 804aff0:	ac06      	add	r4, sp, #24
 804aff2:	e884 0003 	stmia.w	r4, {r0, r1}
  PRINTF("  -- Send Firmware \r\n\n");
 804aff6:	4827      	ldr	r0, [pc, #156]	; (804b094 <FW_UPDATE_Run+0xbc>)
 804aff8:	f7ff fda4 	bl	804ab44 <TraceSend>
  WRITE_REG(IWDG->KR, IWDG_KEY_RELOAD);
 804affc:	4b26      	ldr	r3, [pc, #152]	; (804b098 <FW_UPDATE_Run+0xc0>)
  PRINTF("  -- -- Erasing download area ...\r\n\n");
 804affe:	4827      	ldr	r0, [pc, #156]	; (804b09c <FW_UPDATE_Run+0xc4>)
  WRITE_REG(IWDG->KR, IWDG_KEY_RELOAD);
 804b000:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 804b004:	601a      	str	r2, [r3, #0]
  PRINTF("  -- -- Erasing download area ...\r\n\n");
 804b006:	f7ff fd9d 	bl	804ab44 <TraceSend>
  if ((ret = FLASH_If_Erase_Size((void *)(pFwImageDwlArea->DownloadAddr), pFwImageDwlArea->MaxSizeInBytes)) == HAL_OK)
 804b00a:	e9dd 1002 	ldrd	r1, r0, [sp, #8]
 804b00e:	f7ff ff0b 	bl	804ae28 <FLASH_If_Erase_Size>
 804b012:	bb70      	cbnz	r0, 804b072 <FW_UPDATE_Run+0x9a>
	  PRINTF("  -- -- File> Transfer> YMODEM> Send ");
 804b014:	4822      	ldr	r0, [pc, #136]	; (804b0a0 <FW_UPDATE_Run+0xc8>)
 804b016:	f7ff fd95 	bl	804ab44 <TraceSend>
    Ymodem_Init();
 804b01a:	f001 fb77 	bl	804c70c <Ymodem_Init>
    e_result = Ymodem_Receive(&u_fw_size, pFwImageDwlArea->DownloadAddr, &ymodemCb);
 804b01e:	4622      	mov	r2, r4
 804b020:	9903      	ldr	r1, [sp, #12]
 804b022:	a801      	add	r0, sp, #4
 804b024:	f001 fb74 	bl	804c710 <Ymodem_Receive>
 804b028:	4605      	mov	r5, r0
    PRINTF("\r\n\n");
 804b02a:	481e      	ldr	r0, [pc, #120]	; (804b0a4 <FW_UPDATE_Run+0xcc>)
 804b02c:	f7ff fd8a 	bl	804ab44 <TraceSend>
    if ((e_result == COM_OK))
 804b030:	bb25      	cbnz	r5, 804b07c <FW_UPDATE_Run+0xa4>
    	PRINTF("  -- -- Programming Completed Successfully!\r\n\n");
 804b032:	481d      	ldr	r0, [pc, #116]	; (804b0a8 <FW_UPDATE_Run+0xd0>)
 804b034:	f7ff fd86 	bl	804ab44 <TraceSend>
    	PRINTF("  -- -- Bytes: %ld\r\n\n", u_fw_size);
 804b038:	9901      	ldr	r1, [sp, #4]
 804b03a:	481c      	ldr	r0, [pc, #112]	; (804b0ac <FW_UPDATE_Run+0xd4>)
 804b03c:	f7ff fd82 	bl	804ab44 <TraceSend>
    ret = FLASH_If_Read(fw_header_dwl_slot, (void *) fw_image_dwl_area.DownloadAddr, SE_FW_HEADER_TOT_LEN);
 804b040:	f44f 72a0 	mov.w	r2, #320	; 0x140
 804b044:	9903      	ldr	r1, [sp, #12]
 804b046:	4620      	mov	r0, r4
 804b048:	f7ff fe9a 	bl	804ad80 <FLASH_If_Read>
 804b04c:	4605      	mov	r5, r0
    (void)SFU_APP_InstallAtNextReset((uint8_t *) fw_header_dwl_slot);
 804b04e:	4620      	mov	r0, r4
 804b050:	f000 fe14 	bl	804bc7c <SFU_APP_InstallAtNextReset>
    PRINTF("  -- Image correctly downloaded - reboot\r\n\n");
 804b054:	4816      	ldr	r0, [pc, #88]	; (804b0b0 <FW_UPDATE_Run+0xd8>)
 804b056:	f7ff fd75 	bl	804ab44 <TraceSend>
    COM_Transmit((uint8_t*)&answer_update_success_buffer, sizeof(answer_update_success_buffer), 100);
 804b05a:	2264      	movs	r2, #100	; 0x64
 804b05c:	2103      	movs	r1, #3
 804b05e:	4815      	ldr	r0, [pc, #84]	; (804b0b4 <FW_UPDATE_Run+0xdc>)
 804b060:	f001 fb3c 	bl	804c6dc <COM_Transmit>
    HAL_Delay(1000U);
 804b064:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 804b068:	f000 fe86 	bl	804bd78 <HAL_Delay>
    HAL_NVIC_SystemReset();
 804b06c:	f7f8 f824 	bl	80430b8 <HAL_NVIC_SystemReset>
  if (ret != HAL_OK)
 804b070:	b115      	cbz	r5, 804b078 <FW_UPDATE_Run+0xa0>
	  PRINTF("  -- !!Operation failed!! \r\n\n");
 804b072:	4811      	ldr	r0, [pc, #68]	; (804b0b8 <FW_UPDATE_Run+0xe0>)
 804b074:	f7ff fd66 	bl	804ab44 <TraceSend>
}
 804b078:	b057      	add	sp, #348	; 0x15c
 804b07a:	bd30      	pop	{r4, r5, pc}
    else if (e_result == COM_ABORT)
 804b07c:	2d02      	cmp	r5, #2
    	PRINTF("  -- -- !!Aborted by user!!\r\n\n");
 804b07e:	bf0c      	ite	eq
 804b080:	480e      	ldreq	r0, [pc, #56]	; (804b0bc <FW_UPDATE_Run+0xe4>)
    	PRINTF("  -- -- !!Error during file download!!\r\n\n");
 804b082:	480f      	ldrne	r0, [pc, #60]	; (804b0c0 <FW_UPDATE_Run+0xe8>)
 804b084:	f7ff fd5e 	bl	804ab44 <TraceSend>
 804b088:	e7f3      	b.n	804b072 <FW_UPDATE_Run+0x9a>
 804b08a:	bf00      	nop
 804b08c:	0804e97e 	.word	0x0804e97e
 804b090:	0804e67c 	.word	0x0804e67c
 804b094:	0804e9be 	.word	0x0804e9be
 804b098:	40003000 	.word	0x40003000
 804b09c:	0804e9d5 	.word	0x0804e9d5
 804b0a0:	0804e9fa 	.word	0x0804e9fa
 804b0a4:	0804eaf4 	.word	0x0804eaf4
 804b0a8:	0804ea20 	.word	0x0804ea20
 804b0ac:	0804ea4f 	.word	0x0804ea4f
 804b0b0:	0804ea65 	.word	0x0804ea65
 804b0b4:	20001041 	.word	0x20001041
 804b0b8:	0804eada 	.word	0x0804eada
 804b0bc:	0804ea91 	.word	0x0804ea91
 804b0c0:	0804eab0 	.word	0x0804eab0

0804b0c4 <HW_GPIO_GetBitPos>:

  if ((GPIO_Pin & 0xFF00) != 0)
  {
    PinPos |= 0x8;
  }
  if ((GPIO_Pin & 0xF0F0) != 0)
 804b0c4:	4a0a      	ldr	r2, [pc, #40]	; (804b0f0 <HW_GPIO_GetBitPos+0x2c>)
    PinPos |= 0x8;
 804b0c6:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
 804b0ca:	bf14      	ite	ne
 804b0cc:	2308      	movne	r3, #8
 804b0ce:	2300      	moveq	r3, #0
  if ((GPIO_Pin & 0xF0F0) != 0)
 804b0d0:	4210      	tst	r0, r2
  {
    PinPos |= 0x4;
  }
  if ((GPIO_Pin & 0xCCCC) != 0)
 804b0d2:	4a08      	ldr	r2, [pc, #32]	; (804b0f4 <HW_GPIO_GetBitPos+0x30>)
    PinPos |= 0x4;
 804b0d4:	bf18      	it	ne
 804b0d6:	f043 0304 	orrne.w	r3, r3, #4
  if ((GPIO_Pin & 0xCCCC) != 0)
 804b0da:	4210      	tst	r0, r2
  {
    PinPos |= 0x2;
  }
  if ((GPIO_Pin & 0xAAAA) != 0)
 804b0dc:	4a06      	ldr	r2, [pc, #24]	; (804b0f8 <HW_GPIO_GetBitPos+0x34>)
    PinPos |= 0x2;
 804b0de:	bf18      	it	ne
 804b0e0:	f043 0302 	orrne.w	r3, r3, #2
  if ((GPIO_Pin & 0xAAAA) != 0)
 804b0e4:	4210      	tst	r0, r2
  {
    PinPos |= 0x1;
 804b0e6:	bf18      	it	ne
 804b0e8:	f043 0301 	orrne.w	r3, r3, #1
  }


  return PinPos;
}
 804b0ec:	4618      	mov	r0, r3
 804b0ee:	4770      	bx	lr
 804b0f0:	fffff0f0 	.word	0xfffff0f0
 804b0f4:	ffffcccc 	.word	0xffffcccc
 804b0f8:	ffffaaaa 	.word	0xffffaaaa

0804b0fc <HW_GPIO_Init>:
{
 804b0fc:	b430      	push	{r4, r5}
  RCC_GPIO_CLK_ENABLE((uint32_t) port);
 804b0fe:	4b28      	ldr	r3, [pc, #160]	; (804b1a0 <HW_GPIO_Init+0xa4>)
 804b100:	4298      	cmp	r0, r3
{
 804b102:	b086      	sub	sp, #24
  RCC_GPIO_CLK_ENABLE((uint32_t) port);
 804b104:	f04f 0400 	mov.w	r4, #0
 804b108:	f503 5350 	add.w	r3, r3, #13312	; 0x3400
 804b10c:	d032      	beq.n	804b174 <HW_GPIO_Init+0x78>
 804b10e:	d80f      	bhi.n	804b130 <HW_GPIO_Init+0x34>
 804b110:	4d24      	ldr	r5, [pc, #144]	; (804b1a4 <HW_GPIO_Init+0xa8>)
 804b112:	42a8      	cmp	r0, r5
 804b114:	d01e      	beq.n	804b154 <HW_GPIO_Init+0x58>
 804b116:	2300      	movs	r3, #0
 804b118:	9305      	str	r3, [sp, #20]
 804b11a:	4b23      	ldr	r3, [pc, #140]	; (804b1a8 <HW_GPIO_Init+0xac>)
 804b11c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 804b11e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 804b122:	631c      	str	r4, [r3, #48]	; 0x30
 804b124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804b126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804b12a:	9305      	str	r3, [sp, #20]
 804b12c:	9b05      	ldr	r3, [sp, #20]
 804b12e:	e01b      	b.n	804b168 <HW_GPIO_Init+0x6c>
 804b130:	4d1e      	ldr	r5, [pc, #120]	; (804b1ac <HW_GPIO_Init+0xb0>)
 804b132:	42a8      	cmp	r0, r5
 804b134:	d029      	beq.n	804b18a <HW_GPIO_Init+0x8e>
 804b136:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 804b13a:	42a8      	cmp	r0, r5
 804b13c:	d1eb      	bne.n	804b116 <HW_GPIO_Init+0x1a>
 804b13e:	9404      	str	r4, [sp, #16]
 804b140:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 804b142:	f044 0408 	orr.w	r4, r4, #8
 804b146:	631c      	str	r4, [r3, #48]	; 0x30
 804b148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804b14a:	f003 0308 	and.w	r3, r3, #8
 804b14e:	9304      	str	r3, [sp, #16]
 804b150:	9b04      	ldr	r3, [sp, #16]
 804b152:	e009      	b.n	804b168 <HW_GPIO_Init+0x6c>
 804b154:	9401      	str	r4, [sp, #4]
 804b156:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 804b158:	f044 0401 	orr.w	r4, r4, #1
 804b15c:	631c      	str	r4, [r3, #48]	; 0x30
 804b15e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804b160:	f003 0301 	and.w	r3, r3, #1
 804b164:	9301      	str	r3, [sp, #4]
 804b166:	9b01      	ldr	r3, [sp, #4]
  initStruct->Pin = GPIO_Pin ;
 804b168:	6011      	str	r1, [r2, #0]
  HAL_GPIO_Init(port, initStruct);
 804b16a:	4611      	mov	r1, r2
}
 804b16c:	b006      	add	sp, #24
 804b16e:	bc30      	pop	{r4, r5}
  HAL_GPIO_Init(port, initStruct);
 804b170:	f7f8 bb46 	b.w	8043800 <HAL_GPIO_Init>
  RCC_GPIO_CLK_ENABLE((uint32_t) port);
 804b174:	9402      	str	r4, [sp, #8]
 804b176:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 804b178:	f044 0402 	orr.w	r4, r4, #2
 804b17c:	631c      	str	r4, [r3, #48]	; 0x30
 804b17e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804b180:	f003 0302 	and.w	r3, r3, #2
 804b184:	9302      	str	r3, [sp, #8]
 804b186:	9b02      	ldr	r3, [sp, #8]
 804b188:	e7ee      	b.n	804b168 <HW_GPIO_Init+0x6c>
 804b18a:	9403      	str	r4, [sp, #12]
 804b18c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 804b18e:	f044 0404 	orr.w	r4, r4, #4
 804b192:	631c      	str	r4, [r3, #48]	; 0x30
 804b194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804b196:	f003 0304 	and.w	r3, r3, #4
 804b19a:	9303      	str	r3, [sp, #12]
 804b19c:	9b03      	ldr	r3, [sp, #12]
 804b19e:	e7e3      	b.n	804b168 <HW_GPIO_Init+0x6c>
 804b1a0:	40020400 	.word	0x40020400
 804b1a4:	40020000 	.word	0x40020000
 804b1a8:	40023800 	.word	0x40023800
 804b1ac:	40020800 	.word	0x40020800

0804b1b0 <HW_GPIO_SetIrq>:
{
 804b1b0:	b538      	push	{r3, r4, r5, lr}
  uint32_t BitPos = HW_GPIO_GetBitPos(GPIO_Pin) ;
 804b1b2:	4608      	mov	r0, r1
{
 804b1b4:	461c      	mov	r4, r3
 804b1b6:	4615      	mov	r5, r2
  uint32_t BitPos = HW_GPIO_GetBitPos(GPIO_Pin) ;
 804b1b8:	f7ff ff84 	bl	804b0c4 <HW_GPIO_GetBitPos>
 804b1bc:	4b08      	ldr	r3, [pc, #32]	; (804b1e0 <HW_GPIO_SetIrq+0x30>)
    GpioIrq[ BitPos ] = irqHandler;
 804b1be:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  if (irqHandler != NULL)
 804b1c2:	b164      	cbz	r4, 804b1de <HW_GPIO_SetIrq+0x2e>
    IRQnb = MSP_GetIRQn(GPIO_Pin);
 804b1c4:	4608      	mov	r0, r1
 804b1c6:	f000 fe25 	bl	804be14 <MSP_GetIRQn>
    HAL_NVIC_SetPriority(IRQnb, prio, 0);
 804b1ca:	4629      	mov	r1, r5
    IRQnb = MSP_GetIRQn(GPIO_Pin);
 804b1cc:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(IRQnb, prio, 0);
 804b1ce:	2200      	movs	r2, #0
 804b1d0:	f7f7 ff1c 	bl	804300c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IRQnb);
 804b1d4:	4620      	mov	r0, r4
}
 804b1d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_NVIC_EnableIRQ(IRQnb);
 804b1da:	f7f7 bf4b 	b.w	8043074 <HAL_NVIC_EnableIRQ>
}
 804b1de:	bd38      	pop	{r3, r4, r5, pc}
 804b1e0:	20009530 	.word	0x20009530

0804b1e4 <HW_GPIO_IrqHandler>:
{
 804b1e4:	b510      	push	{r4, lr}
  uint32_t BitPos = HW_GPIO_GetBitPos(GPIO_Pin);
 804b1e6:	f7ff ff6d 	bl	804b0c4 <HW_GPIO_GetBitPos>
  if (GpioIrq[ BitPos ]  != NULL)
 804b1ea:	4b04      	ldr	r3, [pc, #16]	; (804b1fc <HW_GPIO_IrqHandler+0x18>)
 804b1ec:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 804b1f0:	b11b      	cbz	r3, 804b1fa <HW_GPIO_IrqHandler+0x16>
    GpioIrq[ BitPos ](NULL);
 804b1f2:	2000      	movs	r0, #0
}
 804b1f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    GpioIrq[ BitPos ](NULL);
 804b1f8:	4718      	bx	r3
}
 804b1fa:	bd10      	pop	{r4, pc}
 804b1fc:	20009530 	.word	0x20009530

0804b200 <HW_GPIO_Write>:
  HAL_GPIO_WritePin(GPIOx, GPIO_Pin, (GPIO_PinState) value);
 804b200:	b2d2      	uxtb	r2, r2
 804b202:	f7f8 bc71 	b.w	8043ae8 <HAL_GPIO_WritePin>
	...

0804b208 <HW_RTC_GetCalendarValue>:
 * @param pointer to RTC_DateStruct
 * @param pointer to RTC_TimeStruct
 * @retval time in ticks
 */
static uint64_t HW_RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 804b208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t first_read;
  uint32_t correction;
  uint32_t seconds;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 804b20c:	2200      	movs	r2, #0
{
 804b20e:	4605      	mov	r5, r0
  HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 804b210:	4826      	ldr	r0, [pc, #152]	; (804b2ac <HW_RTC_GetCalendarValue+0xa4>)
  * @param  RTCx RTC Instance
  * @retval Sub second value (number between 0 and 65535)
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 804b212:	4f27      	ldr	r7, [pc, #156]	; (804b2b0 <HW_RTC_GetCalendarValue+0xa8>)

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
    HAL_RTC_GetDate(&RtcHandle, RTC_DateStruct, RTC_FORMAT_BIN);
 804b214:	f8df 8094 	ldr.w	r8, [pc, #148]	; 804b2ac <HW_RTC_GetCalendarValue+0xa4>
{
 804b218:	460c      	mov	r4, r1
  HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 804b21a:	f7f9 f9fa 	bl	8044612 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&RtcHandle, RTC_DateStruct, RTC_FORMAT_BIN);
 804b21e:	2200      	movs	r2, #0
 804b220:	4629      	mov	r1, r5
 804b222:	4640      	mov	r0, r8
 804b224:	6abe      	ldr	r6, [r7, #40]	; 0x28
 804b226:	f7f9 fa1b 	bl	8044660 <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 804b22a:	2200      	movs	r2, #0
 804b22c:	4621      	mov	r1, r4
 804b22e:	4640      	mov	r0, r8
 804b230:	f7f9 f9ef 	bl	8044612 <HAL_RTC_GetTime>
 804b234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804b236:	b2b6      	uxth	r6, r6
 804b238:	b29b      	uxth	r3, r3

  }
  while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 804b23a:	42b3      	cmp	r3, r6
 804b23c:	d1ef      	bne.n	804b21e <HW_RTC_GetCalendarValue+0x16>

  /* calculte amount of elapsed days since 01/01/2000 */
  seconds = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 804b23e:	78eb      	ldrb	r3, [r5, #3]

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 804b240:	4a1c      	ldr	r2, [pc, #112]	; (804b2b4 <HW_RTC_GetCalendarValue+0xac>)
 804b242:	491d      	ldr	r1, [pc, #116]	; (804b2b8 <HW_RTC_GetCalendarValue+0xb0>)
 804b244:	f013 0f03 	tst.w	r3, #3
 804b248:	bf08      	it	eq
 804b24a:	4611      	moveq	r1, r2

  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 804b24c:	786a      	ldrb	r2, [r5, #1]
  seconds = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 804b24e:	f240 50b5 	movw	r0, #1461	; 0x5b5
 804b252:	4358      	muls	r0, r3
  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 804b254:	3a01      	subs	r2, #1
 804b256:	233d      	movs	r3, #61	; 0x3d
 804b258:	4353      	muls	r3, r2
  seconds = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 804b25a:	1cc6      	adds	r6, r0, #3
  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 804b25c:	3301      	adds	r3, #1
 804b25e:	2002      	movs	r0, #2
 804b260:	fb93 f3f0 	sdiv	r3, r3, r0

  seconds += (RTC_DateStruct->Date - 1);
 804b264:	78a8      	ldrb	r0, [r5, #2]
  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 804b266:	0052      	lsls	r2, r2, #1
 804b268:	3801      	subs	r0, #1
 804b26a:	eb00 0096 	add.w	r0, r0, r6, lsr #2
 804b26e:	fa21 f202 	lsr.w	r2, r1, r2
 804b272:	4403      	add	r3, r0
 804b274:	f002 0203 	and.w	r2, r2, #3
  seconds += (RTC_DateStruct->Date - 1);
 804b278:	1a9b      	subs	r3, r3, r2

  /* convert from days to seconds */
  seconds *= SECONDS_IN_1DAY;

  seconds += ((uint32_t)RTC_TimeStruct->Seconds +
              ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 804b27a:	7862      	ldrb	r2, [r4, #1]
              ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 804b27c:	7821      	ldrb	r1, [r4, #0]
              ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 804b27e:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 804b282:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 804b286:	0092      	lsls	r2, r2, #2
 804b288:	fb00 2201 	mla	r2, r0, r1, r2
  seconds += ((uint32_t)RTC_TimeStruct->Seconds +
 804b28c:	78a1      	ldrb	r1, [r4, #2]
              ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 804b28e:	440a      	add	r2, r1
  seconds += ((uint32_t)RTC_TimeStruct->Seconds +
 804b290:	490a      	ldr	r1, [pc, #40]	; (804b2bc <HW_RTC_GetCalendarValue+0xb4>)
 804b292:	fb01 2303 	mla	r3, r1, r3, r2



  calendarValue = (((uint64_t) seconds) << N_PREDIV_S) + (PREDIV_S - RTC_TimeStruct->SubSeconds);
 804b296:	0d9e      	lsrs	r6, r3, #22
 804b298:	029d      	lsls	r5, r3, #10
 804b29a:	6863      	ldr	r3, [r4, #4]
 804b29c:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 804b2a0:	3303      	adds	r3, #3

  return (calendarValue);
}
 804b2a2:	18e8      	adds	r0, r5, r3
 804b2a4:	f146 0100 	adc.w	r1, r6, #0
 804b2a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804b2ac:	20009570 	.word	0x20009570
 804b2b0:	40002800 	.word	0x40002800
 804b2b4:	00445550 	.word	0x00445550
 804b2b8:	0099aaa0 	.word	0x0099aaa0
 804b2bc:	00015180 	.word	0x00015180

0804b2c0 <HW_RTC_GetMinimumTimeout>:
}
 804b2c0:	2003      	movs	r0, #3
 804b2c2:	4770      	bx	lr

0804b2c4 <HW_RTC_ms2Tick>:
{
 804b2c4:	b508      	push	{r3, lr}
 804b2c6:	4601      	mov	r1, r0
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 804b2c8:	227d      	movs	r2, #125	; 0x7d
 804b2ca:	2300      	movs	r3, #0
 804b2cc:	01c0      	lsls	r0, r0, #7
 804b2ce:	0e49      	lsrs	r1, r1, #25
 804b2d0:	f7f5 fda4 	bl	8040e1c <__aeabi_uldivmod>
}
 804b2d4:	bd08      	pop	{r3, pc}

0804b2d6 <HW_RTC_Tick2ms>:
  return ((seconds * 1000) + ((tick * 1000) >> N_PREDIV_S));
 804b2d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  tick = tick & PREDIV_S;
 804b2da:	f3c0 0209 	ubfx	r2, r0, #0, #10
  uint32_t seconds = tick >> N_PREDIV_S;
 804b2de:	0a80      	lsrs	r0, r0, #10
  return ((seconds * 1000) + ((tick * 1000) >> N_PREDIV_S));
 804b2e0:	435a      	muls	r2, r3
 804b2e2:	4358      	muls	r0, r3
}
 804b2e4:	eb00 2092 	add.w	r0, r0, r2, lsr #10
 804b2e8:	4770      	bx	lr
	...

0804b2ec <HW_RTC_GetTimerElapsedTime>:
{
 804b2ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 804b2ee:	a901      	add	r1, sp, #4
 804b2f0:	4668      	mov	r0, sp
 804b2f2:	f7ff ff89 	bl	804b208 <HW_RTC_GetCalendarValue>
  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 804b2f6:	4b03      	ldr	r3, [pc, #12]	; (804b304 <HW_RTC_GetTimerElapsedTime+0x18>)
 804b2f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
 804b2fa:	1ac0      	subs	r0, r0, r3
 804b2fc:	b007      	add	sp, #28
 804b2fe:	f85d fb04 	ldr.w	pc, [sp], #4
 804b302:	bf00      	nop
 804b304:	20009570 	.word	0x20009570

0804b308 <HW_RTC_GetTimerValue>:
{
 804b308:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 804b30a:	a901      	add	r1, sp, #4
 804b30c:	4668      	mov	r0, sp
 804b30e:	f7ff ff7b 	bl	804b208 <HW_RTC_GetCalendarValue>
}
 804b312:	b007      	add	sp, #28
 804b314:	f85d fb04 	ldr.w	pc, [sp], #4

0804b318 <HW_RTC_StopAlarm>:
{
 804b318:	b510      	push	{r4, lr}
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A);
 804b31a:	4c08      	ldr	r4, [pc, #32]	; (804b33c <HW_RTC_StopAlarm+0x24>)
 804b31c:	f44f 7180 	mov.w	r1, #256	; 0x100
 804b320:	4620      	mov	r0, r4
 804b322:	f7f8 ff19 	bl	8044158 <HAL_RTC_DeactivateAlarm>
  __HAL_RTC_ALARM_CLEAR_FLAG(&RtcHandle, RTC_FLAG_ALRAF);
 804b326:	6822      	ldr	r2, [r4, #0]
 804b328:	68d3      	ldr	r3, [r2, #12]
 804b32a:	b2db      	uxtb	r3, r3
 804b32c:	f463 73c0 	orn	r3, r3, #384	; 0x180
 804b330:	60d3      	str	r3, [r2, #12]
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 804b332:	4b03      	ldr	r3, [pc, #12]	; (804b340 <HW_RTC_StopAlarm+0x28>)
 804b334:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 804b338:	615a      	str	r2, [r3, #20]
}
 804b33a:	bd10      	pop	{r4, pc}
 804b33c:	20009570 	.word	0x20009570
 804b340:	40013c00 	.word	0x40013c00

0804b344 <HW_RTC_SetAlarm>:
{
 804b344:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - HW_RTC_GetTimerElapsedTime())))
 804b348:	4c54      	ldr	r4, [pc, #336]	; (804b49c <HW_RTC_SetAlarm+0x158>)
{
 804b34a:	4605      	mov	r5, r0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - HW_RTC_GetTimerElapsedTime())))
 804b34c:	f9b4 604c 	ldrsh.w	r6, [r4, #76]	; 0x4c
 804b350:	f7ff ffcc 	bl	804b2ec <HW_RTC_GetTimerElapsedTime>
 804b354:	3603      	adds	r6, #3
 804b356:	1a28      	subs	r0, r5, r0
 804b358:	4286      	cmp	r6, r0
    LPM_SetStopMode(LPM_RTC_Id, LPM_Enable);
 804b35a:	bf34      	ite	cc
 804b35c:	2100      	movcc	r1, #0
    LPM_SetStopMode(LPM_RTC_Id, LPM_Disable);
 804b35e:	2101      	movcs	r1, #1
 804b360:	2004      	movs	r0, #4
 804b362:	f7ff f93b 	bl	804a5dc <LPM_SetStopMode>
  if (LPM_GetMode() == LPM_StopMode)
 804b366:	f7ff f94f 	bl	804a608 <LPM_GetMode>
 804b36a:	2801      	cmp	r0, #1
    timeout = timeout -  McuWakeUpTimeCal;
 804b36c:	bf08      	it	eq
 804b36e:	f9b4 304c 	ldrsheq.w	r3, [r4, #76]	; 0x4c
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 804b372:	6da6      	ldr	r6, [r4, #88]	; 0x58
 804b374:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
 804b378:	9201      	str	r2, [sp, #4]
    timeout = timeout -  McuWakeUpTimeCal;
 804b37a:	bf08      	it	eq
 804b37c:	1aed      	subeq	r5, r5, r3
  rtcAlarmSubSeconds =  PREDIV_S - RTC_TimeStruct.SubSeconds;
 804b37e:	f5c6 767f 	rsb	r6, r6, #1020	; 0x3fc
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 804b382:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 804b386:	9300      	str	r3, [sp, #0]
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 804b388:	f894 b055 	ldrb.w	fp, [r4, #85]	; 0x55
 804b38c:	f894 a056 	ldrb.w	sl, [r4, #86]	; 0x56
 804b390:	f894 8057 	ldrb.w	r8, [r4, #87]	; 0x57
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 804b394:	f894 7069 	ldrb.w	r7, [r4, #105]	; 0x69
 804b398:	f894 906b 	ldrb.w	r9, [r4, #107]	; 0x6b
  rtcAlarmSubSeconds =  PREDIV_S - RTC_TimeStruct.SubSeconds;
 804b39c:	3603      	adds	r6, #3
  HW_RTC_StopAlarm();
 804b39e:	f7ff ffbb 	bl	804b318 <HW_RTC_StopAlarm>
  rtcAlarmSubSeconds += (timeoutValue & PREDIV_S);
 804b3a2:	f3c5 0109 	ubfx	r1, r5, #0, #10
  rtcAlarmDays =  RTC_DateStruct.Date;
 804b3a6:	9b00      	ldr	r3, [sp, #0]
 804b3a8:	9a01      	ldr	r2, [sp, #4]
  rtcAlarmSubSeconds += (timeoutValue & PREDIV_S);
 804b3aa:	fa11 f686 	uxtah	r6, r1, r6
  while (timeoutValue >= SECONDS_IN_1DAY)
 804b3ae:	493c      	ldr	r1, [pc, #240]	; (804b4a0 <HW_RTC_SetAlarm+0x15c>)
  rtcAlarmSubSeconds += (timeoutValue & PREDIV_S);
 804b3b0:	b2b6      	uxth	r6, r6
  timeoutValue >>= N_PREDIV_S;  /* convert timeout  in seconds */
 804b3b2:	0aad      	lsrs	r5, r5, #10
  rtcAlarmDays =  RTC_DateStruct.Date;
 804b3b4:	b29b      	uxth	r3, r3
  while (timeoutValue >= SECONDS_IN_1DAY)
 804b3b6:	428d      	cmp	r5, r1
 804b3b8:	d84b      	bhi.n	804b452 <HW_RTC_SetAlarm+0x10e>
  rtcAlarmHours = RTC_TimeStruct.Hours;
 804b3ba:	fa1f fc82 	uxth.w	ip, r2
  while (timeoutValue >= SECONDS_IN_1HOUR)
 804b3be:	f5b5 6f61 	cmp.w	r5, #3600	; 0xe10
 804b3c2:	d24d      	bcs.n	804b460 <HW_RTC_SetAlarm+0x11c>
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 804b3c4:	fa1f f28b 	uxth.w	r2, fp
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 804b3c8:	2d3b      	cmp	r5, #59	; 0x3b
 804b3ca:	d850      	bhi.n	804b46e <HW_RTC_SetAlarm+0x12a>
 804b3cc:	0ab1      	lsrs	r1, r6, #10
 804b3ce:	ebc1 1081 	rsb	r0, r1, r1, lsl #6
 804b3d2:	eb06 2680 	add.w	r6, r6, r0, lsl #10
 804b3d6:	eb01 000a 	add.w	r0, r1, sl
 804b3da:	4428      	add	r0, r5
 804b3dc:	b2b6      	uxth	r6, r6
 804b3de:	b280      	uxth	r0, r0
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 804b3e0:	283b      	cmp	r0, #59	; 0x3b
 804b3e2:	d848      	bhi.n	804b476 <HW_RTC_SetAlarm+0x132>
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 804b3e4:	2a3b      	cmp	r2, #59	; 0x3b
 804b3e6:	d84b      	bhi.n	804b480 <HW_RTC_SetAlarm+0x13c>
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 804b3e8:	f1bc 0f17 	cmp.w	ip, #23
 804b3ec:	d84f      	bhi.n	804b48e <HW_RTC_SetAlarm+0x14a>
 804b3ee:	492d      	ldr	r1, [pc, #180]	; (804b4a4 <HW_RTC_SetAlarm+0x160>)
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 804b3f0:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  if (RTC_DateStruct.Year % 4 == 0)
 804b3f4:	f019 0f03 	tst.w	r9, #3
 804b3f8:	f107 37ff 	add.w	r7, r7, #4294967295
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 804b3fc:	bf16      	itet	ne
 804b3fe:	19c9      	addne	r1, r1, r7
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 804b400:	5dcd      	ldrbeq	r5, [r1, r7]
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 804b402:	7b0d      	ldrbne	r5, [r1, #12]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 804b404:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 804b408:	42ab      	cmp	r3, r5
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 804b40a:	bf84      	itt	hi
 804b40c:	fb93 f1f5 	sdivhi	r1, r3, r5
 804b410:	fb05 3311 	mlshi	r3, r5, r1, r3
  RTC_AlarmStructure.AlarmSubSecondMask  = HW_RTC_ALARMSUBSECONDMASK;
 804b414:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 804b418:	63e1      	str	r1, [r4, #60]	; 0x3c
  HAL_RTC_SetAlarm_IT(&RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 804b41a:	4923      	ldr	r1, [pc, #140]	; (804b4a8 <HW_RTC_SetAlarm+0x164>)
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 804b41c:	f884 c024 	strb.w	ip, [r4, #36]	; 0x24
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 804b420:	bf88      	it	hi
 804b422:	b29b      	uxthhi	r3, r3
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S - rtcAlarmSubSeconds;
 804b424:	f5c6 767f 	rsb	r6, r6, #1020	; 0x3fc
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 804b428:	2200      	movs	r2, #0
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S - rtcAlarmSubSeconds;
 804b42a:	3603      	adds	r6, #3
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 804b42c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  HAL_RTC_SetAlarm_IT(&RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 804b430:	f1a1 0024 	sub.w	r0, r1, #36	; 0x24
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 804b434:	f44f 7380 	mov.w	r3, #256	; 0x100
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S - rtcAlarmSubSeconds;
 804b438:	62a6      	str	r6, [r4, #40]	; 0x28
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 804b43a:	f884 8027 	strb.w	r8, [r4, #39]	; 0x27
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 804b43e:	6422      	str	r2, [r4, #64]	; 0x40
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 804b440:	63a2      	str	r2, [r4, #56]	; 0x38
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 804b442:	64a3      	str	r3, [r4, #72]	; 0x48
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 804b444:	e9c4 220c 	strd	r2, r2, [r4, #48]	; 0x30
}
 804b448:	b003      	add	sp, #12
 804b44a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  HAL_RTC_SetAlarm_IT(&RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 804b44e:	f7f9 b829 	b.w	80444a4 <HAL_RTC_SetAlarm_IT>
    timeoutValue -= SECONDS_IN_1DAY;
 804b452:	f5a5 35a8 	sub.w	r5, r5, #86016	; 0x15000
    rtcAlarmDays++;
 804b456:	3301      	adds	r3, #1
    timeoutValue -= SECONDS_IN_1DAY;
 804b458:	f5a5 75c0 	sub.w	r5, r5, #384	; 0x180
    rtcAlarmDays++;
 804b45c:	b29b      	uxth	r3, r3
 804b45e:	e7aa      	b.n	804b3b6 <HW_RTC_SetAlarm+0x72>
    rtcAlarmHours++;
 804b460:	f10c 0c01 	add.w	ip, ip, #1
    timeoutValue -= SECONDS_IN_1HOUR;
 804b464:	f5a5 6561 	sub.w	r5, r5, #3600	; 0xe10
    rtcAlarmHours++;
 804b468:	fa1f fc8c 	uxth.w	ip, ip
 804b46c:	e7a7      	b.n	804b3be <HW_RTC_SetAlarm+0x7a>
    rtcAlarmMinutes++;
 804b46e:	3201      	adds	r2, #1
    timeoutValue -= SECONDS_IN_1MINUTE;
 804b470:	3d3c      	subs	r5, #60	; 0x3c
    rtcAlarmMinutes++;
 804b472:	b292      	uxth	r2, r2
 804b474:	e7a8      	b.n	804b3c8 <HW_RTC_SetAlarm+0x84>
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 804b476:	383c      	subs	r0, #60	; 0x3c
    rtcAlarmMinutes++;
 804b478:	3201      	adds	r2, #1
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 804b47a:	b280      	uxth	r0, r0
    rtcAlarmMinutes++;
 804b47c:	b292      	uxth	r2, r2
 804b47e:	e7af      	b.n	804b3e0 <HW_RTC_SetAlarm+0x9c>
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 804b480:	3a3c      	subs	r2, #60	; 0x3c
    rtcAlarmHours++;
 804b482:	f10c 0c01 	add.w	ip, ip, #1
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 804b486:	b292      	uxth	r2, r2
    rtcAlarmHours++;
 804b488:	fa1f fc8c 	uxth.w	ip, ip
 804b48c:	e7aa      	b.n	804b3e4 <HW_RTC_SetAlarm+0xa0>
    rtcAlarmHours -= HOURS_IN_1DAY;
 804b48e:	f1ac 0c18 	sub.w	ip, ip, #24
    rtcAlarmDays++;
 804b492:	3301      	adds	r3, #1
    rtcAlarmHours -= HOURS_IN_1DAY;
 804b494:	fa1f fc8c 	uxth.w	ip, ip
    rtcAlarmDays++;
 804b498:	b29b      	uxth	r3, r3
 804b49a:	e7a5      	b.n	804b3e8 <HW_RTC_SetAlarm+0xa4>
 804b49c:	20009570 	.word	0x20009570
 804b4a0:	0001517f 	.word	0x0001517f
 804b4a4:	0804e684 	.word	0x0804e684
 804b4a8:	20009594 	.word	0x20009594

0804b4ac <HW_RTC_IrqHandler>:
{
 804b4ac:	b508      	push	{r3, lr}
  LPM_SetStopMode(LPM_RTC_Id, LPM_Enable);
 804b4ae:	2100      	movs	r1, #0
 804b4b0:	2004      	movs	r0, #4
 804b4b2:	f7ff f893 	bl	804a5dc <LPM_SetStopMode>
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 804b4b6:	4b0b      	ldr	r3, [pc, #44]	; (804b4e4 <HW_RTC_IrqHandler+0x38>)
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 804b4b8:	480b      	ldr	r0, [pc, #44]	; (804b4e8 <HW_RTC_IrqHandler+0x3c>)
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 804b4ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 804b4be:	615a      	str	r2, [r3, #20]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 804b4c0:	6802      	ldr	r2, [r0, #0]
 804b4c2:	6893      	ldr	r3, [r2, #8]
 804b4c4:	04d9      	lsls	r1, r3, #19
 804b4c6:	d50b      	bpl.n	804b4e0 <HW_RTC_IrqHandler+0x34>
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 804b4c8:	68d3      	ldr	r3, [r2, #12]
 804b4ca:	05db      	lsls	r3, r3, #23
 804b4cc:	d508      	bpl.n	804b4e0 <HW_RTC_IrqHandler+0x34>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 804b4ce:	68d3      	ldr	r3, [r2, #12]
 804b4d0:	b2db      	uxtb	r3, r3
 804b4d2:	f463 73c0 	orn	r3, r3, #384	; 0x180
 804b4d6:	60d3      	str	r3, [r2, #12]
}
 804b4d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      HAL_RTC_AlarmAEventCallback(hrtc);
 804b4dc:	f000 bc96 	b.w	804be0c <HAL_RTC_AlarmAEventCallback>
}
 804b4e0:	bd08      	pop	{r3, pc}
 804b4e2:	bf00      	nop
 804b4e4:	40013c00 	.word	0x40013c00
 804b4e8:	20009570 	.word	0x20009570

0804b4ec <HW_RTC_DelayMs>:
{
 804b4ec:	4601      	mov	r1, r0
 804b4ee:	b538      	push	{r3, r4, r5, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 804b4f0:	227d      	movs	r2, #125	; 0x7d
 804b4f2:	2300      	movs	r3, #0
 804b4f4:	01c0      	lsls	r0, r0, #7
 804b4f6:	0e49      	lsrs	r1, r1, #25
 804b4f8:	f7f5 fc90 	bl	8040e1c <__aeabi_uldivmod>
 804b4fc:	4604      	mov	r4, r0
  timeout = HW_RTC_GetTimerValue();
 804b4fe:	f7ff ff03 	bl	804b308 <HW_RTC_GetTimerValue>
 804b502:	4605      	mov	r5, r0
  while (((HW_RTC_GetTimerValue() - timeout)) < delayValue)
 804b504:	f7ff ff00 	bl	804b308 <HW_RTC_GetTimerValue>
 804b508:	1b40      	subs	r0, r0, r5
 804b50a:	42a0      	cmp	r0, r4
 804b50c:	d300      	bcc.n	804b510 <HW_RTC_DelayMs+0x24>
}
 804b50e:	bd38      	pop	{r3, r4, r5, pc}
    __NOP();
 804b510:	bf00      	nop
 804b512:	e7f7      	b.n	804b504 <HW_RTC_DelayMs+0x18>

0804b514 <HW_RTC_SetTimerContext>:
{
 804b514:	b510      	push	{r4, lr}
  RtcTimerContext.Rtc_Time = (uint32_t) HW_RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 804b516:	4c04      	ldr	r4, [pc, #16]	; (804b528 <HW_RTC_SetTimerContext+0x14>)
 804b518:	f104 0154 	add.w	r1, r4, #84	; 0x54
 804b51c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 804b520:	f7ff fe72 	bl	804b208 <HW_RTC_GetCalendarValue>
 804b524:	6520      	str	r0, [r4, #80]	; 0x50
}
 804b526:	bd10      	pop	{r4, pc}
 804b528:	20009570 	.word	0x20009570

0804b52c <HW_RTC_Init>:
{
 804b52c:	b530      	push	{r4, r5, lr}
  if (HW_RTC_Initalized == false)
 804b52e:	4c18      	ldr	r4, [pc, #96]	; (804b590 <HW_RTC_Init+0x64>)
 804b530:	f894 506c 	ldrb.w	r5, [r4, #108]	; 0x6c
{
 804b534:	b087      	sub	sp, #28
  if (HW_RTC_Initalized == false)
 804b536:	bb45      	cbnz	r5, 804b58a <HW_RTC_Init+0x5e>
  RtcHandle.Instance = RTC;
 804b538:	4b16      	ldr	r3, [pc, #88]	; (804b594 <HW_RTC_Init+0x68>)
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 804b53a:	61a5      	str	r5, [r4, #24]
  RtcHandle.Init.SynchPrediv = PREDIV_S;  /*RTC_SYNCH_PREDIV; */
 804b53c:	221f      	movs	r2, #31
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 804b53e:	e9c4 3500 	strd	r3, r5, [r4]
  HAL_RTC_Init(&RtcHandle);
 804b542:	4620      	mov	r0, r4
  RtcHandle.Init.SynchPrediv = PREDIV_S;  /*RTC_SYNCH_PREDIV; */
 804b544:	f240 33ff 	movw	r3, #1023	; 0x3ff
 804b548:	e9c4 2302 	strd	r2, r3, [r4, #8]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 804b54c:	e9c4 5504 	strd	r5, r5, [r4, #16]
  HAL_RTC_Init(&RtcHandle);
 804b550:	f7f8 fe81 	bl	8044256 <HAL_RTC_Init>
  RTC_DateStruct.WeekDay = RTC_WEEKDAY_MONDAY;
 804b554:	a906      	add	r1, sp, #24
 804b556:	4b10      	ldr	r3, [pc, #64]	; (804b598 <HW_RTC_Init+0x6c>)
 804b558:	f841 3d18 	str.w	r3, [r1, #-24]!
  HAL_RTC_SetDate(&RtcHandle, &RTC_DateStruct, RTC_FORMAT_BIN);
 804b55c:	462a      	mov	r2, r5
 804b55e:	4620      	mov	r0, r4
 804b560:	f7f8 ff43 	bl	80443ea <HAL_RTC_SetDate>
  RTC_TimeStruct.Hours = 11;
 804b564:	f242 530b 	movw	r3, #9483	; 0x250b
  HAL_RTC_SetTime(&RtcHandle, &RTC_TimeStruct, RTC_FORMAT_BIN);
 804b568:	462a      	mov	r2, r5
 804b56a:	a901      	add	r1, sp, #4
 804b56c:	4620      	mov	r0, r4
  RTC_TimeStruct.TimeFormat = 0;
 804b56e:	e9cd 3501 	strd	r3, r5, [sp, #4]
  RTC_TimeStruct.DayLightSaving = RTC_STOREOPERATION_RESET;
 804b572:	e9cd 5504 	strd	r5, r5, [sp, #16]
  HAL_RTC_SetTime(&RtcHandle, &RTC_TimeStruct, RTC_FORMAT_BIN);
 804b576:	f7f8 fec7 	bl	8044308 <HAL_RTC_SetTime>
  HAL_RTCEx_EnableBypassShadow(&RtcHandle);
 804b57a:	4620      	mov	r0, r4
 804b57c:	f7f9 f899 	bl	80446b2 <HAL_RTCEx_EnableBypassShadow>
    HW_RTC_SetTimerContext();
 804b580:	f7ff ffc8 	bl	804b514 <HW_RTC_SetTimerContext>
    HW_RTC_Initalized = true;
 804b584:	2301      	movs	r3, #1
 804b586:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
 804b58a:	b007      	add	sp, #28
 804b58c:	bd30      	pop	{r4, r5, pc}
 804b58e:	bf00      	nop
 804b590:	20009570 	.word	0x20009570
 804b594:	40002800 	.word	0x40002800
 804b598:	15080301 	.word	0x15080301

0804b59c <HW_RTC_GetTimerContext>:
}
 804b59c:	4b01      	ldr	r3, [pc, #4]	; (804b5a4 <HW_RTC_GetTimerContext+0x8>)
 804b59e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 804b5a0:	4770      	bx	lr
 804b5a2:	bf00      	nop
 804b5a4:	20009570 	.word	0x20009570

0804b5a8 <HW_RTC_GetCalendarTime>:
 * \param [IN]   pointer to ms
 *
 * \return uint32_t seconds
 */
uint32_t HW_RTC_GetCalendarTime(uint16_t *mSeconds)
{
 804b5a8:	b530      	push	{r4, r5, lr}
 804b5aa:	b087      	sub	sp, #28
 804b5ac:	4605      	mov	r5, r0
  RTC_TimeTypeDef RTC_TimeStruct ;
  RTC_DateTypeDef RTC_DateStruct;
  uint32_t ticks;

  uint64_t calendarValue = HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 804b5ae:	a901      	add	r1, sp, #4
 804b5b0:	4668      	mov	r0, sp
 804b5b2:	f7ff fe29 	bl	804b208 <HW_RTC_GetCalendarValue>
 804b5b6:	4604      	mov	r4, r0

  uint32_t seconds = (uint32_t)(calendarValue >> N_PREDIV_S);

  ticks = (uint32_t) calendarValue & PREDIV_S;

  *mSeconds = HW_RTC_Tick2ms(ticks);
 804b5b8:	f3c0 0009 	ubfx	r0, r0, #0, #10
 804b5bc:	f7ff fe8b 	bl	804b2d6 <HW_RTC_Tick2ms>
 804b5c0:	8028      	strh	r0, [r5, #0]
  uint32_t seconds = (uint32_t)(calendarValue >> N_PREDIV_S);
 804b5c2:	0aa0      	lsrs	r0, r4, #10

  return seconds;
}
 804b5c4:	ea40 5081 	orr.w	r0, r0, r1, lsl #22
 804b5c8:	b007      	add	sp, #28
 804b5ca:	bd30      	pop	{r4, r5, pc}

0804b5cc <HW_RTC_BKUPWrite>:

void HW_RTC_BKUPWrite(uint32_t Data0, uint32_t Data1)
{
 804b5cc:	b538      	push	{r3, r4, r5, lr}
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR0, Data0);
 804b5ce:	4c07      	ldr	r4, [pc, #28]	; (804b5ec <HW_RTC_BKUPWrite+0x20>)
{
 804b5d0:	460d      	mov	r5, r1
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR0, Data0);
 804b5d2:	4602      	mov	r2, r0
 804b5d4:	2100      	movs	r1, #0
 804b5d6:	4620      	mov	r0, r4
 804b5d8:	f7f9 f861 	bl	804469e <HAL_RTCEx_BKUPWrite>
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, Data1);
 804b5dc:	462a      	mov	r2, r5
 804b5de:	4620      	mov	r0, r4
 804b5e0:	2101      	movs	r1, #1
}
 804b5e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, Data1);
 804b5e6:	f7f9 b85a 	b.w	804469e <HAL_RTCEx_BKUPWrite>
 804b5ea:	bf00      	nop
 804b5ec:	20009570 	.word	0x20009570

0804b5f0 <HW_RTC_BKUPRead>:

void HW_RTC_BKUPRead(uint32_t *Data0, uint32_t *Data1)
{
 804b5f0:	b570      	push	{r4, r5, r6, lr}
  *Data0 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR0);
 804b5f2:	4c07      	ldr	r4, [pc, #28]	; (804b610 <HW_RTC_BKUPRead+0x20>)
{
 804b5f4:	4606      	mov	r6, r0
 804b5f6:	460d      	mov	r5, r1
  *Data0 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR0);
 804b5f8:	4620      	mov	r0, r4
 804b5fa:	2100      	movs	r1, #0
 804b5fc:	f7f9 f854 	bl	80446a8 <HAL_RTCEx_BKUPRead>
  *Data1 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1);
 804b600:	2101      	movs	r1, #1
  *Data0 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR0);
 804b602:	6030      	str	r0, [r6, #0]
  *Data1 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1);
 804b604:	4620      	mov	r0, r4
 804b606:	f7f9 f84f 	bl	80446a8 <HAL_RTCEx_BKUPRead>
 804b60a:	6028      	str	r0, [r5, #0]
}
 804b60c:	bd70      	pop	{r4, r5, r6, pc}
 804b60e:	bf00      	nop
 804b610:	20009570 	.word	0x20009570

0804b614 <HW_SPI_IoInit>:
  /*##-2- Configure the SPI GPIOs */
  HW_SPI_IoDeInit();
}

void HW_SPI_IoInit(void)
{
 804b614:	b570      	push	{r4, r5, r6, lr}
 804b616:	b088      	sub	sp, #32

	GPIO_InitTypeDef initStruct = { 0 };
 804b618:	2214      	movs	r2, #20
 804b61a:	2100      	movs	r1, #0
 804b61c:	a803      	add	r0, sp, #12
 804b61e:	f001 fa09 	bl	804ca34 <memset>
	if (hspi.Instance == SPI2) {
 804b622:	4b25      	ldr	r3, [pc, #148]	; (804b6b8 <HW_SPI_IoInit+0xa4>)
 804b624:	681a      	ldr	r2, [r3, #0]
 804b626:	4b25      	ldr	r3, [pc, #148]	; (804b6bc <HW_SPI_IoInit+0xa8>)
 804b628:	429a      	cmp	r2, r3
 804b62a:	d143      	bne.n	804b6b4 <HW_SPI_IoInit+0xa0>
		/* Peripheral clock enable */
		__HAL_RCC_SPI2_CLK_ENABLE();
 804b62c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 804b630:	2400      	movs	r4, #0
 804b632:	9400      	str	r4, [sp, #0]
 804b634:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		initStruct.Mode = GPIO_MODE_AF_PP;
		initStruct.Pull = GPIO_NOPULL;
		initStruct.Speed = GPIO_SPEED_HIGH;
		initStruct.Alternate = SPI2_AF;

		HW_GPIO_Init(RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 804b636:	4822      	ldr	r0, [pc, #136]	; (804b6c0 <HW_SPI_IoInit+0xac>)
		__HAL_RCC_SPI2_CLK_ENABLE();
 804b638:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 804b63c:	641a      	str	r2, [r3, #64]	; 0x40
 804b63e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804b640:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 804b644:	9200      	str	r2, [sp, #0]
 804b646:	9a00      	ldr	r2, [sp, #0]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 804b648:	9401      	str	r4, [sp, #4]
 804b64a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804b64c:	f042 0204 	orr.w	r2, r2, #4
 804b650:	631a      	str	r2, [r3, #48]	; 0x30
 804b652:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804b654:	f002 0204 	and.w	r2, r2, #4
 804b658:	9201      	str	r2, [sp, #4]
 804b65a:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 804b65c:	9402      	str	r4, [sp, #8]
 804b65e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804b660:	f042 0202 	orr.w	r2, r2, #2
 804b664:	631a      	str	r2, [r3, #48]	; 0x30
 804b666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804b668:	f003 0302 	and.w	r3, r3, #2
 804b66c:	9302      	str	r3, [sp, #8]
 804b66e:	9b02      	ldr	r3, [sp, #8]
		initStruct.Alternate = SPI2_AF;
 804b670:	2203      	movs	r2, #3
 804b672:	2305      	movs	r3, #5
 804b674:	e9cd 2306 	strd	r2, r3, [sp, #24]
		initStruct.Mode = GPIO_MODE_AF_PP;
 804b678:	2502      	movs	r5, #2
		HW_GPIO_Init(RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 804b67a:	aa03      	add	r2, sp, #12
 804b67c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
		initStruct.Mode = GPIO_MODE_AF_PP;
 804b680:	9504      	str	r5, [sp, #16]
		HW_GPIO_Init(RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 804b682:	f7ff fd3b 	bl	804b0fc <HW_GPIO_Init>
		HW_GPIO_Init(RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct);
 804b686:	aa03      	add	r2, sp, #12
 804b688:	2104      	movs	r1, #4
 804b68a:	480e      	ldr	r0, [pc, #56]	; (804b6c4 <HW_SPI_IoInit+0xb0>)
 804b68c:	f7ff fd36 	bl	804b0fc <HW_GPIO_Init>
		HW_GPIO_Init(RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct);
 804b690:	aa03      	add	r2, sp, #12
 804b692:	2108      	movs	r1, #8
 804b694:	480b      	ldr	r0, [pc, #44]	; (804b6c4 <HW_SPI_IoInit+0xb0>)
 804b696:	f7ff fd31 	bl	804b0fc <HW_GPIO_Init>

		initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 804b69a:	2601      	movs	r6, #1
		initStruct.Pull = GPIO_NOPULL;

		HW_GPIO_Init(RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct);
 804b69c:	aa03      	add	r2, sp, #12
 804b69e:	4629      	mov	r1, r5
 804b6a0:	4807      	ldr	r0, [pc, #28]	; (804b6c0 <HW_SPI_IoInit+0xac>)
		initStruct.Pull = GPIO_NOPULL;
 804b6a2:	e9cd 6404 	strd	r6, r4, [sp, #16]
		HW_GPIO_Init(RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct);
 804b6a6:	f7ff fd29 	bl	804b0fc <HW_GPIO_Init>

		HW_GPIO_Write(RADIO_NSS_PORT, RADIO_NSS_PIN, 1);
 804b6aa:	4632      	mov	r2, r6
 804b6ac:	4629      	mov	r1, r5
 804b6ae:	4804      	ldr	r0, [pc, #16]	; (804b6c0 <HW_SPI_IoInit+0xac>)
 804b6b0:	f7ff fda6 	bl	804b200 <HW_GPIO_Write>
	}
}
 804b6b4:	b008      	add	sp, #32
 804b6b6:	bd70      	pop	{r4, r5, r6, pc}
 804b6b8:	200095e0 	.word	0x200095e0
 804b6bc:	40003800 	.word	0x40003800
 804b6c0:	40020400 	.word	0x40020400
 804b6c4:	40020800 	.word	0x40020800

0804b6c8 <HW_SPI_Init>:
{
 804b6c8:	b508      	push	{r3, lr}
  hspi.Instance = SPI_RADIO;
 804b6ca:	4b1b      	ldr	r3, [pc, #108]	; (804b738 <HW_SPI_Init+0x70>)
 804b6cc:	4a1b      	ldr	r2, [pc, #108]	; (804b73c <HW_SPI_Init+0x74>)
 804b6ce:	601a      	str	r2, [r3, #0]
/* Private functions ---------------------------------------------------------*/

static uint32_t SpiFrequency(uint32_t hz)
{
  uint32_t divisor = 0;
  uint32_t SysClkTmp = SystemCoreClock;
 804b6d0:	4a1b      	ldr	r2, [pc, #108]	; (804b740 <HW_SPI_Init+0x78>)
  uint32_t baudRate;

  while (SysClkTmp > hz)
 804b6d2:	481c      	ldr	r0, [pc, #112]	; (804b744 <HW_SPI_Init+0x7c>)
  uint32_t SysClkTmp = SystemCoreClock;
 804b6d4:	6811      	ldr	r1, [r2, #0]
  uint32_t divisor = 0;
 804b6d6:	2200      	movs	r2, #0
  while (SysClkTmp > hz)
 804b6d8:	4281      	cmp	r1, r0
 804b6da:	d904      	bls.n	804b6e6 <HW_SPI_Init+0x1e>
  {
    divisor++;
 804b6dc:	3201      	adds	r2, #1
    SysClkTmp = (SysClkTmp >> 1);

    if (divisor >= 7)
 804b6de:	2a07      	cmp	r2, #7
    SysClkTmp = (SysClkTmp >> 1);
 804b6e0:	ea4f 0151 	mov.w	r1, r1, lsr #1
    if (divisor >= 7)
 804b6e4:	d1f8      	bne.n	804b6d8 <HW_SPI_Init+0x10>
    {
      break;
    }
  }

  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 804b6e6:	f012 0104 	ands.w	r1, r2, #4
 804b6ea:	bf18      	it	ne
 804b6ec:	2120      	movne	r1, #32
             (((divisor & 0x2) == 0) ? 0x0 : SPI_CR1_BR_1) |
 804b6ee:	f012 0002 	ands.w	r0, r2, #2
 804b6f2:	bf18      	it	ne
 804b6f4:	2010      	movne	r0, #16
             (((divisor & 0x1) == 0) ? 0x0 : SPI_CR1_BR_0);
 804b6f6:	f012 0201 	ands.w	r2, r2, #1
  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 804b6fa:	ea41 0100 	orr.w	r1, r1, r0
             (((divisor & 0x1) == 0) ? 0x0 : SPI_CR1_BR_0);
 804b6fe:	bf18      	it	ne
 804b700:	2208      	movne	r2, #8
  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 804b702:	430a      	orrs	r2, r1
  hspi.Init.BaudRatePrescaler = SpiFrequency(10000000);
 804b704:	61da      	str	r2, [r3, #28]
  hspi.Init.Mode           = SPI_MODE_MASTER;
 804b706:	f44f 7182 	mov.w	r1, #260	; 0x104
 804b70a:	2200      	movs	r2, #0
 804b70c:	e9c3 1201 	strd	r1, r2, [r3, #4]
  if (HAL_SPI_Init(&hspi) != HAL_OK)
 804b710:	4809      	ldr	r0, [pc, #36]	; (804b738 <HW_SPI_Init+0x70>)
  hspi.Init.DataSize       = SPI_DATASIZE_8BIT;
 804b712:	60da      	str	r2, [r3, #12]
  hspi.Init.NSS            = SPI_NSS_SOFT;
 804b714:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi.Init.CLKPhase       = SPI_PHASE_1EDGE;
 804b718:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 804b71c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 804b71e:	621a      	str	r2, [r3, #32]
  hspi.Init.NSS            = SPI_NSS_SOFT;
 804b720:	6199      	str	r1, [r3, #24]
  hspi.Init.TIMode         = SPI_TIMODE_DISABLE;
 804b722:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_SPI_Init(&hspi) != HAL_OK)
 804b724:	f7f9 fdce 	bl	80452c4 <HAL_SPI_Init>
 804b728:	b108      	cbz	r0, 804b72e <HW_SPI_Init+0x66>
    Error_Handler();
 804b72a:	f7ff fb09 	bl	804ad40 <Error_Handler>
}
 804b72e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HW_SPI_IoInit();
 804b732:	f7ff bf6f 	b.w	804b614 <HW_SPI_IoInit>
 804b736:	bf00      	nop
 804b738:	200095e0 	.word	0x200095e0
 804b73c:	40003800 	.word	0x40003800
 804b740:	2000108c 	.word	0x2000108c
 804b744:	00989680 	.word	0x00989680

0804b748 <HW_SPI_InOut>:
{
 804b748:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  HAL_SPI_TransmitReceive(&hspi, (uint8_t *) &txData, (uint8_t *) &rxData, 1, HAL_MAX_DELAY);
 804b74a:	f04f 33ff 	mov.w	r3, #4294967295
{
 804b74e:	f8ad 000e 	strh.w	r0, [sp, #14]
  HAL_SPI_TransmitReceive(&hspi, (uint8_t *) &txData, (uint8_t *) &rxData, 1, HAL_MAX_DELAY);
 804b752:	9300      	str	r3, [sp, #0]
 804b754:	f10d 0216 	add.w	r2, sp, #22
 804b758:	2301      	movs	r3, #1
 804b75a:	f10d 010e 	add.w	r1, sp, #14
 804b75e:	4804      	ldr	r0, [pc, #16]	; (804b770 <HW_SPI_InOut+0x28>)
 804b760:	f7f9 fded 	bl	804533e <HAL_SPI_TransmitReceive>
}
 804b764:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 804b768:	b007      	add	sp, #28
 804b76a:	f85d fb04 	ldr.w	pc, [sp], #4
 804b76e:	bf00      	nop
 804b770:	200095e0 	.word	0x200095e0

0804b774 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init()
{
 804b774:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 804b776:	2210      	movs	r2, #16
 804b778:	2100      	movs	r1, #0
 804b77a:	a802      	add	r0, sp, #8
 804b77c:	f001 f95a 	bl	804ca34 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 804b780:	4815      	ldr	r0, [pc, #84]	; (804b7d8 <MX_TIM2_Init+0x64>)
	htim2.Init.Prescaler = 100;
 804b782:	2264      	movs	r2, #100	; 0x64
 804b784:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 804b788:	2300      	movs	r3, #0
	htim2.Init.Prescaler = 100;
 804b78a:	e9c0 1200 	strd	r1, r2, [r0]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim2.Init.Period = 16000;
 804b78e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 804b792:	e9cd 3300 	strd	r3, r3, [sp]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 804b796:	6083      	str	r3, [r0, #8]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 804b798:	e9c0 2303 	strd	r2, r3, [r0, #12]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 804b79c:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 804b79e:	f7f9 fff1 	bl	8045784 <HAL_TIM_Base_Init>
 804b7a2:	b108      	cbz	r0, 804b7a8 <MX_TIM2_Init+0x34>
		Error_Handler();
 804b7a4:	f7ff facc 	bl	804ad40 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 804b7a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 804b7ac:	a902      	add	r1, sp, #8
 804b7ae:	480a      	ldr	r0, [pc, #40]	; (804b7d8 <MX_TIM2_Init+0x64>)
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 804b7b0:	9302      	str	r3, [sp, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 804b7b2:	f7fa f80b 	bl	80457cc <HAL_TIM_ConfigClockSource>
 804b7b6:	b108      	cbz	r0, 804b7bc <MX_TIM2_Init+0x48>
		Error_Handler();
 804b7b8:	f7ff fac2 	bl	804ad40 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 804b7bc:	2300      	movs	r3, #0
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 804b7be:	4669      	mov	r1, sp
 804b7c0:	4805      	ldr	r0, [pc, #20]	; (804b7d8 <MX_TIM2_Init+0x64>)
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 804b7c2:	e9cd 3300 	strd	r3, r3, [sp]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 804b7c6:	f7fa f895 	bl	80458f4 <HAL_TIMEx_MasterConfigSynchronization>
 804b7ca:	b108      	cbz	r0, 804b7d0 <MX_TIM2_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 804b7cc:	f7ff fab8 	bl	804ad40 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
}
 804b7d0:	b007      	add	sp, #28
 804b7d2:	f85d fb04 	ldr.w	pc, [sp], #4
 804b7d6:	bf00      	nop
 804b7d8:	2000bda0 	.word	0x2000bda0

0804b7dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 804b7dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 804b7de:	2210      	movs	r2, #16
 804b7e0:	2100      	movs	r1, #0
 804b7e2:	a802      	add	r0, sp, #8
 804b7e4:	f001 f926 	bl	804ca34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 804b7e8:	4814      	ldr	r0, [pc, #80]	; (804b83c <MX_TIM3_Init+0x60>)
  htim3.Init.Prescaler = 100;
 804b7ea:	4915      	ldr	r1, [pc, #84]	; (804b840 <MX_TIM3_Init+0x64>)
 804b7ec:	2264      	movs	r2, #100	; 0x64
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 804b7ee:	2300      	movs	r3, #0
  htim3.Init.Prescaler = 100;
 804b7f0:	e9c0 1200 	strd	r1, r2, [r0]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 16000;
 804b7f4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 804b7f8:	e9cd 3300 	strd	r3, r3, [sp]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 804b7fc:	6083      	str	r3, [r0, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 804b7fe:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 804b802:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 804b804:	f7f9 ffbe 	bl	8045784 <HAL_TIM_Base_Init>
 804b808:	b108      	cbz	r0, 804b80e <MX_TIM3_Init+0x32>
  {
    Error_Handler();
 804b80a:	f7ff fa99 	bl	804ad40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 804b80e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 804b812:	a902      	add	r1, sp, #8
 804b814:	4809      	ldr	r0, [pc, #36]	; (804b83c <MX_TIM3_Init+0x60>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 804b816:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 804b818:	f7f9 ffd8 	bl	80457cc <HAL_TIM_ConfigClockSource>
 804b81c:	b108      	cbz	r0, 804b822 <MX_TIM3_Init+0x46>
  {
    Error_Handler();
 804b81e:	f7ff fa8f 	bl	804ad40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 804b822:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 804b824:	4669      	mov	r1, sp
 804b826:	4805      	ldr	r0, [pc, #20]	; (804b83c <MX_TIM3_Init+0x60>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 804b828:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 804b82c:	f7fa f862 	bl	80458f4 <HAL_TIMEx_MasterConfigSynchronization>
 804b830:	b108      	cbz	r0, 804b836 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 804b832:	f7ff fa85 	bl	804ad40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 804b836:	b007      	add	sp, #28
 804b838:	f85d fb04 	ldr.w	pc, [sp], #4
 804b83c:	2000bd60 	.word	0x2000bd60
 804b840:	40000400 	.word	0x40000400

0804b844 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 804b844:	6803      	ldr	r3, [r0, #0]
 804b846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 804b84a:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 804b84c:	d116      	bne.n	804b87c <HAL_TIM_Base_MspInit+0x38>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 804b84e:	2200      	movs	r2, #0
 804b850:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 804b854:	9200      	str	r2, [sp, #0]
 804b856:	6c19      	ldr	r1, [r3, #64]	; 0x40
 804b858:	f041 0101 	orr.w	r1, r1, #1
 804b85c:	6419      	str	r1, [r3, #64]	; 0x40
 804b85e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804b860:	f003 0301 	and.w	r3, r3, #1
 804b864:	9300      	str	r3, [sp, #0]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 804b866:	201c      	movs	r0, #28
 804b868:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 804b86a:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 804b86c:	f7f7 fbce 	bl	804300c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 804b870:	201c      	movs	r0, #28
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 804b872:	b003      	add	sp, #12
 804b874:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 804b878:	f7f7 bbfc 	b.w	8043074 <HAL_NVIC_EnableIRQ>
  else if(htim_base->Instance==TIM3)
 804b87c:	4a0b      	ldr	r2, [pc, #44]	; (804b8ac <HAL_TIM_Base_MspInit+0x68>)
 804b87e:	4293      	cmp	r3, r2
 804b880:	d111      	bne.n	804b8a6 <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM3_CLK_ENABLE();
 804b882:	2200      	movs	r2, #0
 804b884:	4b0a      	ldr	r3, [pc, #40]	; (804b8b0 <HAL_TIM_Base_MspInit+0x6c>)
 804b886:	9201      	str	r2, [sp, #4]
 804b888:	6c19      	ldr	r1, [r3, #64]	; 0x40
 804b88a:	f041 0102 	orr.w	r1, r1, #2
 804b88e:	6419      	str	r1, [r3, #64]	; 0x40
 804b890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804b892:	f003 0302 	and.w	r3, r3, #2
 804b896:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 804b898:	201d      	movs	r0, #29
 804b89a:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 804b89c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 804b89e:	f7f7 fbb5 	bl	804300c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 804b8a2:	201d      	movs	r0, #29
 804b8a4:	e7e5      	b.n	804b872 <HAL_TIM_Base_MspInit+0x2e>
}
 804b8a6:	b003      	add	sp, #12
 804b8a8:	f85d fb04 	ldr.w	pc, [sp], #4
 804b8ac:	40000400 	.word	0x40000400
 804b8b0:	40023800 	.word	0x40023800

0804b8b4 <main>:
  * @retval None
  */
int main(void)
{

  flags_ble.all_flags=RESET;
 804b8b4:	4d77      	ldr	r5, [pc, #476]	; (804ba94 <main+0x1e0>)
{
 804b8b6:	b583      	push	{r0, r1, r7, lr}
  flags_ble.all_flags=RESET;
 804b8b8:	2300      	movs	r3, #0
 804b8ba:	702b      	strb	r3, [r5, #0]
  /* STM32 HAL library initialization*/
  HAL_Init();
 804b8bc:	f7f7 fb68 	bl	8042f90 <HAL_Init>

  /* Configure the system clock*/
  SystemClock_Config();
 804b8c0:	f000 fbc8 	bl	804c054 <SystemClock_Config>

  /* Configure the debug mode*/
  //DBG_Init();

  /* Configure the hardware*/
  HW_Init();
 804b8c4:	f000 face 	bl	804be64 <HW_Init>
	if(f_mount(&SDFatFS, (const TCHAR *)&SDPath, 1) != FR_OK)
 804b8c8:	2201      	movs	r2, #1
 804b8ca:	4973      	ldr	r1, [pc, #460]	; (804ba98 <main+0x1e4>)
 804b8cc:	4873      	ldr	r0, [pc, #460]	; (804ba9c <main+0x1e8>)
 804b8ce:	f7fb f9d9 	bl	8046c84 <f_mount>
 804b8d2:	b110      	cbz	r0, 804b8da <main+0x26>
		PRINT_SD_CARD(PRINTF("Erro ao montar o cartao\r\n");)
 804b8d4:	4872      	ldr	r0, [pc, #456]	; (804baa0 <main+0x1ec>)
 804b8d6:	f7ff f935 	bl	804ab44 <TraceSend>

  // Mount and prepare SD Card
  mount_sd_card();

  /*Disbale Stand-by mode*/
  LPM_SetOffMode(LPM_APPLI_Id, LPM_Disable);
 804b8da:	2101      	movs	r1, #1
 804b8dc:	4608      	mov	r0, r1

  PRINTF("APP_VERSION= %02X.%02X.%02X.%02X\r\n", (uint8_t)(__APP_VERSION >> 24), (uint8_t)(__APP_VERSION >> 16), (uint8_t)(__APP_VERSION >> 8), (uint8_t)__APP_VERSION);
 804b8de:	2400      	movs	r4, #0
  LPM_SetOffMode(LPM_APPLI_Id, LPM_Disable);
 804b8e0:	f7fe fe66 	bl	804a5b0 <LPM_SetOffMode>
  PRINTF("APP_VERSION= %02X.%02X.%02X.%02X\r\n", (uint8_t)(__APP_VERSION >> 24), (uint8_t)(__APP_VERSION >> 16), (uint8_t)(__APP_VERSION >> 8), (uint8_t)__APP_VERSION);
 804b8e4:	4623      	mov	r3, r4
 804b8e6:	2203      	movs	r2, #3
 804b8e8:	2101      	movs	r1, #1
 804b8ea:	9400      	str	r4, [sp, #0]
 804b8ec:	486d      	ldr	r0, [pc, #436]	; (804baa4 <main+0x1f0>)

  //LORA_Join();

  //LoraStartTx(TX_ON_TIMER);
  //uint32_t prim; //tratar depois as interrupcoes
  in_use_TAG = EMPTY_QUEUE;
 804b8ee:	4e6e      	ldr	r6, [pc, #440]	; (804baa8 <main+0x1f4>)
				b  = message_handler((uint8_t*)&message, bytes_read_rfid);
			//PRINTF("====>  b = %d\r\n", b);
			flags_ble.tag = RESET;
		}

		if (last_TAG >= 0)
 804b8f0:	4f6e      	ldr	r7, [pc, #440]	; (804baac <main+0x1f8>)
  PRINTF("APP_VERSION= %02X.%02X.%02X.%02X\r\n", (uint8_t)(__APP_VERSION >> 24), (uint8_t)(__APP_VERSION >> 16), (uint8_t)(__APP_VERSION >> 8), (uint8_t)__APP_VERSION);
 804b8f2:	f7ff f927 	bl	804ab44 <TraceSend>
  PRINTF("MAC_VERSION= %02X.%02X.%02X.%02X\r\n", (uint8_t)(__LORA_MAC_VERSION >> 24), (uint8_t)(__LORA_MAC_VERSION >> 16), (uint8_t)(__LORA_MAC_VERSION >> 8), (uint8_t)__LORA_MAC_VERSION);
 804b8f6:	2204      	movs	r2, #4
 804b8f8:	2302      	movs	r3, #2
 804b8fa:	9400      	str	r4, [sp, #0]
 804b8fc:	4611      	mov	r1, r2
 804b8fe:	486c      	ldr	r0, [pc, #432]	; (804bab0 <main+0x1fc>)
 804b900:	f7ff f920 	bl	804ab44 <TraceSend>
  in_use_TAG = EMPTY_QUEUE;
 804b904:	f04f 33ff 	mov.w	r3, #4294967295
 804b908:	6033      	str	r3, [r6, #0]
		ble_handler((uint8_t*)&message_ble);					// Aciona o handler para selecionar a mensagem de resposta.
 804b90a:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 804bae8 <main+0x234>
	if (flags_ble.enable_handler){
 804b90e:	782b      	ldrb	r3, [r5, #0]
 804b910:	069c      	lsls	r4, r3, #26
 804b912:	d505      	bpl.n	804b920 <main+0x6c>
		flags_ble.enable_handler = 0;
 804b914:	f36f 1345 	bfc	r3, #5, #1
		ble_handler((uint8_t*)&message_ble);					// Aciona o handler para selecionar a mensagem de resposta.
 804b918:	4648      	mov	r0, r9
		flags_ble.enable_handler = 0;
 804b91a:	702b      	strb	r3, [r5, #0]
		ble_handler((uint8_t*)&message_ble);					// Aciona o handler para selecionar a mensagem de resposta.
 804b91c:	f7f5 fc8c 	bl	8041238 <ble_handler>
	if (flags_ble.update_mode){
 804b920:	782b      	ldrb	r3, [r5, #0]
 804b922:	06d8      	lsls	r0, r3, #27
 804b924:	d51e      	bpl.n	804b964 <main+0xb0>
		flags_ble.update_mode = RESET;
 804b926:	f36f 1304 	bfc	r3, #4, #1
		HAL_NVIC_DisableIRQ(USART1_IRQn);
 804b92a:	2025      	movs	r0, #37	; 0x25
		flags_ble.update_mode = RESET;
 804b92c:	702b      	strb	r3, [r5, #0]
		HAL_NVIC_DisableIRQ(USART1_IRQn);
 804b92e:	f7f7 fbaf 	bl	8043090 <HAL_NVIC_DisableIRQ>
		HAL_UART_AbortReceive_IT(&huart1);
 804b932:	4860      	ldr	r0, [pc, #384]	; (804bab4 <main+0x200>)
 804b934:	f7fa fbd8 	bl	80460e8 <HAL_UART_AbortReceive_IT>
		HAL_UART_DeInit(&huart1);
 804b938:	485e      	ldr	r0, [pc, #376]	; (804bab4 <main+0x200>)
 804b93a:	f7fa f8f3 	bl	8045b24 <HAL_UART_DeInit>
		HAL_Delay(1);
 804b93e:	2001      	movs	r0, #1
 804b940:	f000 fa1a 	bl	804bd78 <HAL_Delay>
		COM_Init();
 804b944:	f000 feaa 	bl	804c69c <COM_Init>
		HAL_Delay(1);
 804b948:	2001      	movs	r0, #1
 804b94a:	f000 fa15 	bl	804bd78 <HAL_Delay>
		COM_Flush();
 804b94e:	f000 fed5 	bl	804c6fc <COM_Flush>
		FW_UPDATE_Run();
 804b952:	f7ff fb41 	bl	804afd8 <FW_UPDATE_Run>
		MX_USART1_UART_Init();
 804b956:	f7f5 fd0d 	bl	8041374 <MX_USART1_UART_Init>
		HAL_UART_Receive_IT(&huart1, rx_byte_uart1, 1);
 804b95a:	2201      	movs	r2, #1
 804b95c:	4956      	ldr	r1, [pc, #344]	; (804bab8 <main+0x204>)
 804b95e:	4855      	ldr	r0, [pc, #340]	; (804bab4 <main+0x200>)
 804b960:	f7fa f9b6 	bl	8045cd0 <HAL_UART_Receive_IT>
	if ((flags_ble.start == SET) && (flags_ble.connection == SET))
 804b964:	782b      	ldrb	r3, [r5, #0]
 804b966:	4c55      	ldr	r4, [pc, #340]	; (804babc <main+0x208>)
 804b968:	f8df 8180 	ldr.w	r8, [pc, #384]	; 804baec <main+0x238>
 804b96c:	f003 0209 	and.w	r2, r3, #9
 804b970:	2a09      	cmp	r2, #9
 804b972:	d16a      	bne.n	804ba4a <main+0x196>
		if(flags_ble.rfid_send_cmd == SET){
 804b974:	0659      	lsls	r1, r3, #25
 804b976:	d508      	bpl.n	804b98a <main+0xd6>
			flags_ble.rfid_send_cmd = RESET;
 804b978:	f36f 1386 	bfc	r3, #6, #1
 804b97c:	702b      	strb	r3, [r5, #0]
			HAL_UART_Transmit(&huart2, (uint8_t *)READ_MULTIPLE_TAG, MSG_MULTI_TAG_SIZE, 50);
 804b97e:	2203      	movs	r2, #3
 804b980:	2332      	movs	r3, #50	; 0x32
 804b982:	494f      	ldr	r1, [pc, #316]	; (804bac0 <main+0x20c>)
 804b984:	484f      	ldr	r0, [pc, #316]	; (804bac4 <main+0x210>)
 804b986:	f7fa f8e5 	bl	8045b54 <HAL_UART_Transmit>
		if(flags_ble.tag == SET)
 804b98a:	782b      	ldrb	r3, [r5, #0]
 804b98c:	079a      	lsls	r2, r3, #30
 804b98e:	d50b      	bpl.n	804b9a8 <main+0xf4>
			if(bytes_read_rfid>4)
 804b990:	4b4d      	ldr	r3, [pc, #308]	; (804bac8 <main+0x214>)
 804b992:	7819      	ldrb	r1, [r3, #0]
 804b994:	2904      	cmp	r1, #4
 804b996:	d903      	bls.n	804b9a0 <main+0xec>
				b  = message_handler((uint8_t*)&message, bytes_read_rfid);
 804b998:	484c      	ldr	r0, [pc, #304]	; (804bacc <main+0x218>)
 804b99a:	f7f5 fbeb 	bl	8041174 <message_handler>
 804b99e:	7020      	strb	r0, [r4, #0]
			flags_ble.tag = RESET;
 804b9a0:	782b      	ldrb	r3, [r5, #0]
 804b9a2:	f36f 0341 	bfc	r3, #1, #1
 804b9a6:	702b      	strb	r3, [r5, #0]
		if (last_TAG >= 0)
 804b9a8:	683a      	ldr	r2, [r7, #0]
 804b9aa:	2a00      	cmp	r2, #0
 804b9ac:	db4d      	blt.n	804ba4a <main+0x196>
		{
			// Variavel auxiliar para fazer envios sequenciais das TAGs sem mexer no indice original
			PRINTF("====> indices: IN: %d LS: %d\r\n", in_use_TAG, last_TAG);
 804b9ae:	6831      	ldr	r1, [r6, #0]
 804b9b0:	4847      	ldr	r0, [pc, #284]	; (804bad0 <main+0x21c>)
 804b9b2:	f7ff f8c7 	bl	804ab44 <TraceSend>
			if(in_use_TAG<0)
 804b9b6:	6833      	ldr	r3, [r6, #0]
 804b9b8:	2b00      	cmp	r3, #0
				in_use_TAG=0;
 804b9ba:	bfbc      	itt	lt
 804b9bc:	2300      	movlt	r3, #0
 804b9be:	6033      	strlt	r3, [r6, #0]

			//	Tratamento de indice
			if (last_TAG == 0)
 804b9c0:	683b      	ldr	r3, [r7, #0]
 804b9c2:	b903      	cbnz	r3, 804b9c6 <main+0x112>
			{
				//PRINTF("====>   in_use_TAG = 0\r\n");
				in_use_TAG = 0;
 804b9c4:	6033      	str	r3, [r6, #0]
			}
			if (in_use_TAG>last_TAG)
 804b9c6:	6832      	ldr	r2, [r6, #0]
 804b9c8:	4293      	cmp	r3, r2
			{
				//PRINTF("====>   in_use_TAG = last_TAG\r\n");
				in_use_TAG = last_TAG;
 804b9ca:	bfb8      	it	lt
 804b9cc:	6033      	strlt	r3, [r6, #0]
			}

			// 	Envio ao app via bluetooth
			if(in_use_TAG>=0)
 804b9ce:	6831      	ldr	r1, [r6, #0]
 804b9d0:	2900      	cmp	r1, #0
 804b9d2:	db3a      	blt.n	804ba4a <main+0x196>
//				for (uint8_t i = 0; i <= TAG_SIZE-1;i++)
//				{
//					PRINTF("%X ", (store_TAG[in_use_TAG].N_TAG[i]));
//				}
//				PRINTF("\r\n");
				HAL_UART_Transmit(&huart1, (uint8_t*) store_TAG[in_use_TAG].N_TAG, TAG_SIZE-1, 1000);
 804b9d4:	f8df a118 	ldr.w	sl, [pc, #280]	; 804baf0 <main+0x23c>
 804b9d8:	203c      	movs	r0, #60	; 0x3c
 804b9da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 804b9de:	2223      	movs	r2, #35	; 0x23
 804b9e0:	fb00 a101 	mla	r1, r0, r1, sl
 804b9e4:	4833      	ldr	r0, [pc, #204]	; (804bab4 <main+0x200>)
 804b9e6:	f7fa f8b5 	bl	8045b54 <HAL_UART_Transmit>
				HAL_Delay(TIMEOUT_BETWEEN_RESEND_TAG);
 804b9ea:	2064      	movs	r0, #100	; 0x64
 804b9ec:	f000 f9c4 	bl	804bd78 <HAL_Delay>

				if ((in_use_TAG<last_TAG) && (flags_ble.confirm == SET))
 804b9f0:	6832      	ldr	r2, [r6, #0]
 804b9f2:	683b      	ldr	r3, [r7, #0]
 804b9f4:	429a      	cmp	r2, r3
 804b9f6:	da43      	bge.n	804ba80 <main+0x1cc>
 804b9f8:	782b      	ldrb	r3, [r5, #0]
 804b9fa:	075b      	lsls	r3, r3, #29
 804b9fc:	d525      	bpl.n	804ba4a <main+0x196>
				{
					PRINTF("NewTag = %d \n\r", pack_position);
 804b9fe:	7861      	ldrb	r1, [r4, #1]
 804ba00:	4834      	ldr	r0, [pc, #208]	; (804bad4 <main+0x220>)
 804ba02:	f7ff f89f 	bl	804ab44 <TraceSend>
					count_send=0;
 804ba06:	4a34      	ldr	r2, [pc, #208]	; (804bad8 <main+0x224>)
					flag_send_timeout = RESET;
					flag_send_to_lora++;
					if(pack_position >= 10)
						pack_position=0;
					memcpy(pack_to_lora[pack_position++].N_TAG, store_TAG[in_use_TAG].N_TAG, TAG_SIZE);
 804ba08:	6831      	ldr	r1, [r6, #0]
 804ba0a:	4834      	ldr	r0, [pc, #208]	; (804badc <main+0x228>)
					count_send=0;
 804ba0c:	2300      	movs	r3, #0
 804ba0e:	6013      	str	r3, [r2, #0]
					flag_send_to_lora++;
 804ba10:	78a2      	ldrb	r2, [r4, #2]
					flag_send_timeout = RESET;
 804ba12:	f888 3000 	strb.w	r3, [r8]
					flag_send_to_lora++;
 804ba16:	3201      	adds	r2, #1
 804ba18:	70a2      	strb	r2, [r4, #2]
					if(pack_position >= 10)
 804ba1a:	7862      	ldrb	r2, [r4, #1]
 804ba1c:	2a09      	cmp	r2, #9
						pack_position=0;
 804ba1e:	bf88      	it	hi
 804ba20:	7063      	strbhi	r3, [r4, #1]
					memcpy(pack_to_lora[pack_position++].N_TAG, store_TAG[in_use_TAG].N_TAG, TAG_SIZE);
 804ba22:	7862      	ldrb	r2, [r4, #1]
 804ba24:	1c53      	adds	r3, r2, #1
 804ba26:	7063      	strb	r3, [r4, #1]
 804ba28:	233c      	movs	r3, #60	; 0x3c
 804ba2a:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 804ba2e:	fb03 a301 	mla	r3, r3, r1, sl
 804ba32:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 804ba36:	f103 0024 	add.w	r0, r3, #36	; 0x24
 804ba3a:	f853 cb04 	ldr.w	ip, [r3], #4
 804ba3e:	f842 cb04 	str.w	ip, [r2], #4
 804ba42:	4283      	cmp	r3, r0
 804ba44:	d1f9      	bne.n	804ba3a <main+0x186>
					in_use_TAG++;
 804ba46:	3101      	adds	r1, #1
 804ba48:	6031      	str	r1, [r6, #0]
	}
	//flag_tag = RESET;
	//flags_ble.tag= RESET;

#define form1
	if (flag_send_timeout == SET)
 804ba4a:	f898 3000 	ldrb.w	r3, [r8]
 804ba4e:	2b01      	cmp	r3, #1
 804ba50:	d10d      	bne.n	804ba6e <main+0x1ba>
	{
		flag_send_timeout = RESET;
		if (AppProcessRequest == LORA_SET)
 804ba52:	78e2      	ldrb	r2, [r4, #3]
		flag_send_timeout = RESET;
 804ba54:	2300      	movs	r3, #0
		if (AppProcessRequest == LORA_SET)
 804ba56:	2a01      	cmp	r2, #1
		flag_send_timeout = RESET;
 804ba58:	f888 3000 	strb.w	r3, [r8]
		if (AppProcessRequest == LORA_SET)
 804ba5c:	d107      	bne.n	804ba6e <main+0x1ba>
		{
			AppProcessRequest = LORA_RESET;
 804ba5e:	70e3      	strb	r3, [r4, #3]
			if(flag_send_to_lora > 0 ){
 804ba60:	78a3      	ldrb	r3, [r4, #2]
 804ba62:	b123      	cbz	r3, 804ba6e <main+0x1ba>
				flag_send_to_lora--;
 804ba64:	3b01      	subs	r3, #1
			//	Send(NULL);
				PRINTF("\n Envio pelo tempo configurado \n");
 804ba66:	481e      	ldr	r0, [pc, #120]	; (804bae0 <main+0x22c>)
				flag_send_to_lora--;
 804ba68:	70a3      	strb	r3, [r4, #2]
				PRINTF("\n Envio pelo tempo configurado \n");
 804ba6a:	f7ff f86b 	bl	804ab44 <TraceSend>
			}
		}
	}

    if (LoraMacProcessRequest == LORA_SET)
 804ba6e:	7923      	ldrb	r3, [r4, #4]
 804ba70:	2b01      	cmp	r3, #1
 804ba72:	f47f af4c 	bne.w	804b90e <main+0x5a>
    {
      LoraMacProcessRequest = LORA_RESET;
 804ba76:	2300      	movs	r3, #0
 804ba78:	7123      	strb	r3, [r4, #4]
      LoRaMacProcess();
 804ba7a:	f7fc fb99 	bl	80481b0 <LoRaMacProcess>
 804ba7e:	e744      	b.n	804b90a <main+0x56>
					PRINTF("FilaVazia \n\r");
 804ba80:	4818      	ldr	r0, [pc, #96]	; (804bae4 <main+0x230>)
 804ba82:	f7ff f85f 	bl	804ab44 <TraceSend>
					last_TAG = -1;
 804ba86:	f04f 33ff 	mov.w	r3, #4294967295
 804ba8a:	603b      	str	r3, [r7, #0]
					clear_buffers();
 804ba8c:	f7f5 fb64 	bl	8041158 <clear_buffers>
 804ba90:	e7db      	b.n	804ba4a <main+0x196>
 804ba92:	bf00      	nop
 804ba94:	20009b48 	.word	0x20009b48
 804ba98:	20009c81 	.word	0x20009c81
 804ba9c:	2000acb8 	.word	0x2000acb8
 804baa0:	0804ece0 	.word	0x0804ece0
 804baa4:	0804ecfa 	.word	0x0804ecfa
 804baa8:	20005270 	.word	0x20005270
 804baac:	20001000 	.word	0x20001000
 804bab0:	0804ed1d 	.word	0x0804ed1d
 804bab4:	20009b4c 	.word	0x20009b4c
 804bab8:	20009b40 	.word	0x20009b40
 804babc:	20009638 	.word	0x20009638
 804bac0:	20001044 	.word	0x20001044
 804bac4:	20009b8c 	.word	0x20009b8c
 804bac8:	20002384 	.word	0x20002384
 804bacc:	20008184 	.word	0x20008184
 804bad0:	0804ed40 	.word	0x0804ed40
 804bad4:	0804ed5f 	.word	0x0804ed5f
 804bad8:	2000837c 	.word	0x2000837c
 804badc:	2000bf5e 	.word	0x2000bf5e
 804bae0:	0804ed7b 	.word	0x0804ed7b
 804bae4:	0804ed6e 	.word	0x0804ed6e
 804bae8:	2000815c 	.word	0x2000815c
 804baec:	20008378 	.word	0x20008378
 804baf0:	20005274 	.word	0x20005274

0804baf4 <MX_SDIO_SD_Init>:
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 804baf4:	4b05      	ldr	r3, [pc, #20]	; (804bb0c <MX_SDIO_SD_Init+0x18>)
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 804baf6:	4906      	ldr	r1, [pc, #24]	; (804bb10 <MX_SDIO_SD_Init+0x1c>)
 804baf8:	2200      	movs	r2, #0
 804bafa:	e9c3 1200 	strd	r1, r2, [r3]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 804bafe:	e9c3 2202 	strd	r2, r2, [r3, #8]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 804bb02:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hsd.Init.ClockDiv = 5;
 804bb06:	2205      	movs	r2, #5
 804bb08:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 804bb0a:	4770      	bx	lr
 804bb0c:	2000c2c0 	.word	0x2000c2c0
 804bb10:	40012c00 	.word	0x40012c00

0804bb14 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 804bb14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804bb18:	4606      	mov	r6, r0
 804bb1a:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804bb1c:	2214      	movs	r2, #20
 804bb1e:	2100      	movs	r1, #0
 804bb20:	a803      	add	r0, sp, #12
 804bb22:	f000 ff87 	bl	804ca34 <memset>
  if(sdHandle->Instance==SDIO)
 804bb26:	6832      	ldr	r2, [r6, #0]
 804bb28:	4b4d      	ldr	r3, [pc, #308]	; (804bc60 <HAL_SD_MspInit+0x14c>)
 804bb2a:	429a      	cmp	r2, r3
 804bb2c:	f040 8094 	bne.w	804bc58 <HAL_SD_MspInit+0x144>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 804bb30:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 804bb34:	2500      	movs	r5, #0
 804bb36:	9500      	str	r5, [sp, #0]
 804bb38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 804bb3a:	484a      	ldr	r0, [pc, #296]	; (804bc64 <HAL_SD_MspInit+0x150>)
    __HAL_RCC_SDIO_CLK_ENABLE();
 804bb3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 804bb40:	645a      	str	r2, [r3, #68]	; 0x44
 804bb42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 804bb44:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 804bb48:	9200      	str	r2, [sp, #0]
 804bb4a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 804bb4c:	9501      	str	r5, [sp, #4]
 804bb4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804bb50:	f042 0204 	orr.w	r2, r2, #4
 804bb54:	631a      	str	r2, [r3, #48]	; 0x30
 804bb56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804bb58:	f002 0204 	and.w	r2, r2, #4
 804bb5c:	9201      	str	r2, [sp, #4]
 804bb5e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 804bb60:	9502      	str	r5, [sp, #8]
 804bb62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804bb64:	f042 0208 	orr.w	r2, r2, #8
 804bb68:	631a      	str	r2, [r3, #48]	; 0x30
 804bb6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804bb6c:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 804bb70:	240c      	movs	r4, #12
    __HAL_RCC_GPIOD_CLK_ENABLE();
 804bb72:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804bb74:	f04f 0a02 	mov.w	sl, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804bb78:	f04f 0901 	mov.w	r9, #1
 804bb7c:	2703      	movs	r7, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 804bb7e:	eb0d 0104 	add.w	r1, sp, r4
    __HAL_RCC_GPIOD_CLK_ENABLE();
 804bb82:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 804bb84:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804bb86:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 804bb8a:	e9cd 3a03 	strd	r3, sl, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804bb8e:	e9cd 9705 	strd	r9, r7, [sp, #20]

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 804bb92:	f04f 0804 	mov.w	r8, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 804bb96:	f7f7 fe33 	bl	8043800 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 804bb9a:	eb0d 0104 	add.w	r1, sp, r4
 804bb9e:	4832      	ldr	r0, [pc, #200]	; (804bc68 <HAL_SD_MspInit+0x154>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 804bba0:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804bba2:	e9cd 8a03 	strd	r8, sl, [sp, #12]

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 804bba6:	4c31      	ldr	r4, [pc, #196]	; (804bc6c <HAL_SD_MspInit+0x158>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804bba8:	e9cd 9705 	strd	r9, r7, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 804bbac:	f7f7 fe28 	bl	8043800 <HAL_GPIO_Init>
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 804bbb0:	f8df e0c4 	ldr.w	lr, [pc, #196]	; 804bc78 <HAL_SD_MspInit+0x164>
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 804bbb4:	62a7      	str	r7, [r4, #40]	; 0x28
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 804bbb6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 804bbba:	e9c4 e300 	strd	lr, r3, [r4]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 804bbbe:	f44f 6980 	mov.w	r9, #1024	; 0x400
 804bbc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 804bbc6:	e9c4 9304 	strd	r9, r3, [r4, #16]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 804bbca:	f44f 4a80 	mov.w	sl, #16384	; 0x4000
 804bbce:	2320      	movs	r3, #32
 804bbd0:	e9c4 a306 	strd	sl, r3, [r4, #24]
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 804bbd4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 804bbd8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 804bbdc:	4620      	mov	r0, r4
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 804bbde:	e9c4 5502 	strd	r5, r5, [r4, #8]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 804bbe2:	e9c4 5808 	strd	r5, r8, [r4, #32]
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 804bbe6:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 804bbea:	f7f7 fa9d 	bl	8043128 <HAL_DMA_Init>
 804bbee:	b108      	cbz	r0, 804bbf4 <HAL_SD_MspInit+0xe0>
    {
      Error_Handler();
 804bbf0:	f7ff f8a6 	bl	804ad40 <Error_Handler>

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 804bbf4:	4a1e      	ldr	r2, [pc, #120]	; (804bc70 <HAL_SD_MspInit+0x15c>)
    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 804bbf6:	6434      	str	r4, [r6, #64]	; 0x40
 804bbf8:	63a6      	str	r6, [r4, #56]	; 0x38
    hdma_sdio_tx.Instance = DMA2_Stream6;
 804bbfa:	4c1e      	ldr	r4, [pc, #120]	; (804bc74 <HAL_SD_MspInit+0x160>)
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 804bbfc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 804bc00:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 804bc04:	2140      	movs	r1, #64	; 0x40
 804bc06:	2300      	movs	r3, #0
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 804bc08:	f44f 6080 	mov.w	r0, #1024	; 0x400
 804bc0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 804bc10:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 804bc14:	6223      	str	r3, [r4, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 804bc16:	2704      	movs	r7, #4
 804bc18:	2303      	movs	r3, #3
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 804bc1a:	e9c4 0204 	strd	r0, r2, [r4, #16]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 804bc1e:	f44f 4580 	mov.w	r5, #16384	; 0x4000
 804bc22:	2220      	movs	r2, #32
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 804bc24:	e9c4 7309 	strd	r7, r3, [r4, #36]	; 0x24
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 804bc28:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 804bc2c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 804bc30:	4620      	mov	r0, r4
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 804bc32:	e9c4 5206 	strd	r5, r2, [r4, #24]
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 804bc36:	e9c4 c30b 	strd	ip, r3, [r4, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 804bc3a:	f7f7 fa75 	bl	8043128 <HAL_DMA_Init>
 804bc3e:	b108      	cbz	r0, 804bc44 <HAL_SD_MspInit+0x130>
    {
      Error_Handler();
 804bc40:	f7ff f87e 	bl	804ad40 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 804bc44:	2200      	movs	r2, #0
 804bc46:	2031      	movs	r0, #49	; 0x31
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 804bc48:	63f4      	str	r4, [r6, #60]	; 0x3c
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 804bc4a:	4611      	mov	r1, r2
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 804bc4c:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 804bc4e:	f7f7 f9dd 	bl	804300c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 804bc52:	2031      	movs	r0, #49	; 0x31
 804bc54:	f7f7 fa0e 	bl	8043074 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 804bc58:	b008      	add	sp, #32
 804bc5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804bc5e:	bf00      	nop
 804bc60:	40012c00 	.word	0x40012c00
 804bc64:	40020800 	.word	0x40020800
 804bc68:	40020c00 	.word	0x40020c00
 804bc6c:	2000c200 	.word	0x2000c200
 804bc70:	400264a0 	.word	0x400264a0
 804bc74:	2000c260 	.word	0x2000c260
 804bc78:	40026458 	.word	0x40026458

0804bc7c <SFU_APP_InstallAtNextReset>:
  *         This function is used by the User Application to request a Firmware installation (at next reboot).
  * @param  fw_header FW header of the FW to be installed
  * @retval HAL_OK if successful, otherwise HAL_ERROR
  */
HAL_StatusTypeDef SFU_APP_InstallAtNextReset(uint8_t *fw_header)
{
 804bc7c:	b513      	push	{r0, r1, r4, lr}
#if  !defined(SFU_NO_SWAP)
  if (fw_header == NULL)
 804bc7e:	4604      	mov	r4, r0
 804bc80:	b910      	cbnz	r0, 804bc88 <SFU_APP_InstallAtNextReset+0xc>
  {
    return HAL_ERROR;
 804bc82:	2001      	movs	r0, #1
  }
  return HAL_OK;
#else
  return HAL_OK;                   /* Nothing to do */
#endif /* !SFU_NO_SWAP */
}
 804bc84:	b002      	add	sp, #8
 804bc86:	bd10      	pop	{r4, pc}
  ret = FLASH_If_Erase_Size((void *) SlotStartAdd[SLOT_SWAP], SFU_IMG_IMAGE_OFFSET);
 804bc88:	4b09      	ldr	r3, [pc, #36]	; (804bcb0 <SFU_APP_InstallAtNextReset+0x34>)
 804bc8a:	69db      	ldr	r3, [r3, #28]
 804bc8c:	9301      	str	r3, [sp, #4]
 804bc8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 804bc92:	4618      	mov	r0, r3
 804bc94:	f7ff f8c8 	bl	804ae28 <FLASH_If_Erase_Size>
  if (ret == HAL_OK)
 804bc98:	2800      	cmp	r0, #0
 804bc9a:	d1f2      	bne.n	804bc82 <SFU_APP_InstallAtNextReset+0x6>
    ret = FLASH_If_Write((void *)SlotStartAdd[SLOT_SWAP], pfw_header, SE_FW_HEADER_TOT_LEN);
 804bc9c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 804bca0:	4621      	mov	r1, r4
 804bca2:	9801      	ldr	r0, [sp, #4]
 804bca4:	f7ff f8f0 	bl	804ae88 <FLASH_If_Write>
    return HAL_ERROR;
 804bca8:	3000      	adds	r0, #0
 804bcaa:	bf18      	it	ne
 804bcac:	2001      	movne	r0, #1
 804bcae:	e7e9      	b.n	804bc84 <SFU_APP_InstallAtNextReset+0x8>
 804bcb0:	0804e69c 	.word	0x0804e69c

0804bcb4 <SFU_APP_GetDownloadAreaInfo>:
  * @retval HAL_OK if successful, otherwise HAL_ERROR
  */

void SFU_APP_GetDownloadAreaInfo(uint32_t DwlSlot, SFU_FwImageFlashTypeDef *pArea)
{
  pArea->DownloadAddr = SlotStartAdd[DwlSlot];
 804bcb4:	4b06      	ldr	r3, [pc, #24]	; (804bcd0 <SFU_APP_GetDownloadAreaInfo+0x1c>)
 804bcb6:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
  pArea->MaxSizeInBytes = (uint32_t)SLOT_SIZE(DwlSlot);
 804bcba:	4b06      	ldr	r3, [pc, #24]	; (804bcd4 <SFU_APP_GetDownloadAreaInfo+0x20>)
  pArea->DownloadAddr = SlotStartAdd[DwlSlot];
 804bcbc:	604a      	str	r2, [r1, #4]
  pArea->MaxSizeInBytes = (uint32_t)SLOT_SIZE(DwlSlot);
 804bcbe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 804bcc2:	3301      	adds	r3, #1
 804bcc4:	1a9b      	subs	r3, r3, r2
 804bcc6:	600b      	str	r3, [r1, #0]
  pArea->ImageOffsetInBytes = SFU_IMG_IMAGE_OFFSET;
 804bcc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 804bccc:	608b      	str	r3, [r1, #8]
}
 804bcce:	4770      	bx	lr
 804bcd0:	0804e69c 	.word	0x0804e69c
 804bcd4:	0804e6bc 	.word	0x0804e6bc

0804bcd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 804bcd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 804bcda:	4604      	mov	r4, r0
 804bcdc:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804bcde:	2214      	movs	r2, #20
 804bce0:	2100      	movs	r1, #0
 804bce2:	a803      	add	r0, sp, #12
 804bce4:	f000 fea6 	bl	804ca34 <memset>
  if(hspi->Instance==SPI2)
 804bce8:	6822      	ldr	r2, [r4, #0]
 804bcea:	4b1f      	ldr	r3, [pc, #124]	; (804bd68 <HAL_SPI_MspInit+0x90>)
 804bcec:	429a      	cmp	r2, r3
 804bcee:	d138      	bne.n	804bd62 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 804bcf0:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 804bcf4:	2400      	movs	r4, #0
 804bcf6:	9400      	str	r4, [sp, #0]
 804bcf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = LORA_MISO_Pin|LORA_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 804bcfa:	481c      	ldr	r0, [pc, #112]	; (804bd6c <HAL_SPI_MspInit+0x94>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 804bcfc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 804bd00:	641a      	str	r2, [r3, #64]	; 0x40
 804bd02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804bd04:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 804bd08:	9200      	str	r2, [sp, #0]
 804bd0a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 804bd0c:	9401      	str	r4, [sp, #4]
 804bd0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804bd10:	f042 0204 	orr.w	r2, r2, #4
 804bd14:	631a      	str	r2, [r3, #48]	; 0x30
 804bd16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804bd18:	f002 0204 	and.w	r2, r2, #4
 804bd1c:	9201      	str	r2, [sp, #4]
 804bd1e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 804bd20:	9402      	str	r4, [sp, #8]
 804bd22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804bd24:	f042 0202 	orr.w	r2, r2, #2
 804bd28:	631a      	str	r2, [r3, #48]	; 0x30
 804bd2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804bd2c:	f003 0302 	and.w	r3, r3, #2
 804bd30:	9302      	str	r3, [sp, #8]
 804bd32:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804bd34:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 804bd36:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804bd3a:	2702      	movs	r7, #2
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 804bd3c:	2603      	movs	r6, #3
 804bd3e:	2505      	movs	r5, #5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804bd40:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 804bd44:	e9cd 6506 	strd	r6, r5, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 804bd48:	f7f7 fd5a 	bl	8043800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LORA_SCK_Pin;
 804bd4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(LORA_SCK_GPIO_Port, &GPIO_InitStruct);
 804bd50:	a903      	add	r1, sp, #12
 804bd52:	4807      	ldr	r0, [pc, #28]	; (804bd70 <HAL_SPI_MspInit+0x98>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 804bd54:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804bd56:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804bd5a:	e9cd 4605 	strd	r4, r6, [sp, #20]
    HAL_GPIO_Init(LORA_SCK_GPIO_Port, &GPIO_InitStruct);
 804bd5e:	f7f7 fd4f 	bl	8043800 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 804bd62:	b009      	add	sp, #36	; 0x24
 804bd64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 804bd66:	bf00      	nop
 804bd68:	40003800 	.word	0x40003800
 804bd6c:	40020800 	.word	0x40020800
 804bd70:	40020400 	.word	0x40020400

0804bd74 <HAL_InitTick>:
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Return function status */
  return HAL_OK;
}
 804bd74:	2000      	movs	r0, #0
 804bd76:	4770      	bx	lr

0804bd78 <HAL_Delay>:
  * @brief This function provides delay (in ms)
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 804bd78:	b082      	sub	sp, #8
 804bd7a:	9001      	str	r0, [sp, #4]
  HW_RTC_DelayMs(Delay);   /* based on RTC */
 804bd7c:	9801      	ldr	r0, [sp, #4]
}
 804bd7e:	b002      	add	sp, #8
  HW_RTC_DelayMs(Delay);   /* based on RTC */
 804bd80:	f7ff bbb4 	b.w	804b4ec <HW_RTC_DelayMs>

0804bd84 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 804bd84:	b082      	sub	sp, #8
  /* Enable Power Clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 804bd86:	2300      	movs	r3, #0
 804bd88:	9301      	str	r3, [sp, #4]
 804bd8a:	4b06      	ldr	r3, [pc, #24]	; (804bda4 <HAL_MspInit+0x20>)
 804bd8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804bd8e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 804bd92:	641a      	str	r2, [r3, #64]	; 0x40
 804bd94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804bd96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804bd9a:	9301      	str	r3, [sp, #4]
 804bd9c:	9b01      	ldr	r3, [sp, #4]

  HW_GpioInit();
}
 804bd9e:	b002      	add	sp, #8
  HW_GpioInit();
 804bda0:	f000 b89a 	b.w	804bed8 <HW_GpioInit>
 804bda4:	40023800 	.word	0x40023800

0804bda8 <HAL_RTC_MspInit>:
  *        order to modify the RTC Clock source, as consequence RTC registers (including
  *        the backup registers) and RCC_CSR register are set to their reset values.
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
{
 804bda8:	b500      	push	{lr}
 804bdaa:	b091      	sub	sp, #68	; 0x44
	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 804bdac:	222c      	movs	r2, #44	; 0x2c
 804bdae:	2100      	movs	r1, #0
 804bdb0:	a805      	add	r0, sp, #20
 804bdb2:	f000 fe3f 	bl	804ca34 <memset>
	  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct = {0};
 804bdb6:	2210      	movs	r2, #16
 804bdb8:	2100      	movs	r1, #0
 804bdba:	4668      	mov	r0, sp
 804bdbc:	f000 fe3a 	bl	804ca34 <memset>

	  /*##-1- Configue the RTC clock soucre ######################################*/
	  /* -a- Enable LSE Oscillator */
	  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSI; //_LSE
 804bdc0:	2308      	movs	r3, #8
 804bdc2:	9304      	str	r3, [sp, #16]
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
	  RCC_OscInitStruct.LSIState = RCC_LSI_ON; //.LSEState = LSE_ON
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 804bdc4:	a804      	add	r0, sp, #16
	  RCC_OscInitStruct.LSIState = RCC_LSI_ON; //.LSEState = LSE_ON
 804bdc6:	2301      	movs	r3, #1
 804bdc8:	9309      	str	r3, [sp, #36]	; 0x24
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 804bdca:	f7f7 fe9f 	bl	8043b0c <HAL_RCC_OscConfig>
 804bdce:	b108      	cbz	r0, 804bdd4 <HAL_RTC_MspInit+0x2c>
	  {
	    Error_Handler();
 804bdd0:	f7fe ffb6 	bl	804ad40 <Error_Handler>
	  }

	  /* -b- Select LSI as RTC clock source */
	  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 804bdd4:	2302      	movs	r3, #2
 804bdd6:	9300      	str	r3, [sp, #0]
	  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;//LSE
	  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 804bdd8:	4668      	mov	r0, sp
	  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;//LSE
 804bdda:	f44f 7300 	mov.w	r3, #512	; 0x200
 804bdde:	9303      	str	r3, [sp, #12]
	  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 804bde0:	f7f8 f922 	bl	8044028 <HAL_RCCEx_PeriphCLKConfig>
 804bde4:	b108      	cbz	r0, 804bdea <HAL_RTC_MspInit+0x42>
	  {
	    Error_Handler();
 804bde6:	f7fe ffab 	bl	804ad40 <Error_Handler>
	  }

	  /*##-2- Enable the RTC peripheral Clock ####################################*/
	  /* Enable RTC Clock */
	  __HAL_RCC_RTC_ENABLE();//RTCCLK
 804bdea:	4b07      	ldr	r3, [pc, #28]	; (804be08 <HAL_RTC_MspInit+0x60>)
 804bdec:	2201      	movs	r2, #1
 804bdee:	601a      	str	r2, [r3, #0]

	  /*##-3- Configure the NVIC for RTC Alarm ###################################*/
	  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0x0, 0);
 804bdf0:	2200      	movs	r2, #0
 804bdf2:	4611      	mov	r1, r2
 804bdf4:	2029      	movs	r0, #41	; 0x29
 804bdf6:	f7f7 f909 	bl	804300c <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 804bdfa:	2029      	movs	r0, #41	; 0x29
 804bdfc:	f7f7 f93a 	bl	8043074 <HAL_NVIC_EnableIRQ>
}
 804be00:	b011      	add	sp, #68	; 0x44
 804be02:	f85d fb04 	ldr.w	pc, [sp], #4
 804be06:	bf00      	nop
 804be08:	42470e3c 	.word	0x42470e3c

0804be0c <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc: RTC handle
  * @retval None
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
  TimerIrqHandler();
 804be0c:	f7fe bdd4 	b.w	804a9b8 <TimerIrqHandler>

0804be10 <HAL_GPIO_EXTI_Callback>:
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	HW_GPIO_IrqHandler(GPIO_Pin);
 804be10:	f7ff b9e8 	b.w	804b1e4 <HW_GPIO_IrqHandler>

0804be14 <MSP_GetIRQn>:
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval IRQ number
  */
IRQn_Type MSP_GetIRQn(uint16_t GPIO_Pin)
{
  switch (GPIO_Pin)
 804be14:	2810      	cmp	r0, #16
 804be16:	d020      	beq.n	804be5a <MSP_GetIRQn+0x46>
 804be18:	d80c      	bhi.n	804be34 <MSP_GetIRQn+0x20>
 804be1a:	2802      	cmp	r0, #2
 804be1c:	d019      	beq.n	804be52 <MSP_GetIRQn+0x3e>
 804be1e:	d803      	bhi.n	804be28 <MSP_GetIRQn+0x14>
 804be20:	2801      	cmp	r0, #1
 804be22:	d01c      	beq.n	804be5e <MSP_GetIRQn+0x4a>
    case GPIO_PIN_12:
    case GPIO_PIN_13:
    case GPIO_PIN_14:
    case GPIO_PIN_15:
    default:
      return EXTI15_10_IRQn;
 804be24:	2028      	movs	r0, #40	; 0x28
 804be26:	4770      	bx	lr
  switch (GPIO_Pin)
 804be28:	2804      	cmp	r0, #4
 804be2a:	d014      	beq.n	804be56 <MSP_GetIRQn+0x42>
 804be2c:	2808      	cmp	r0, #8
 804be2e:	d1f9      	bne.n	804be24 <MSP_GetIRQn+0x10>
      return EXTI3_IRQn;
 804be30:	2009      	movs	r0, #9
 804be32:	4770      	bx	lr
  switch (GPIO_Pin)
 804be34:	2880      	cmp	r0, #128	; 0x80
 804be36:	d004      	beq.n	804be42 <MSP_GetIRQn+0x2e>
 804be38:	d805      	bhi.n	804be46 <MSP_GetIRQn+0x32>
 804be3a:	2820      	cmp	r0, #32
 804be3c:	d001      	beq.n	804be42 <MSP_GetIRQn+0x2e>
 804be3e:	2840      	cmp	r0, #64	; 0x40
 804be40:	d1f0      	bne.n	804be24 <MSP_GetIRQn+0x10>
      return EXTI9_5_IRQn;
 804be42:	2017      	movs	r0, #23
 804be44:	4770      	bx	lr
  switch (GPIO_Pin)
 804be46:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 804be4a:	d0fa      	beq.n	804be42 <MSP_GetIRQn+0x2e>
 804be4c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 804be50:	e7f6      	b.n	804be40 <MSP_GetIRQn+0x2c>
      return EXTI1_IRQn;
 804be52:	2007      	movs	r0, #7
 804be54:	4770      	bx	lr
      return EXTI2_IRQn;
 804be56:	2008      	movs	r0, #8
 804be58:	4770      	bx	lr
      return EXTI4_IRQn;
 804be5a:	200a      	movs	r0, #10
 804be5c:	4770      	bx	lr
      return EXTI0_IRQn;
 804be5e:	2006      	movs	r0, #6
  }
}
 804be60:	4770      	bx	lr
	...

0804be64 <HW_Init>:
  * @brief This function initializes the hardware
  * @param None
  * @retval None
  */
void HW_Init(void)
{
 804be64:	b510      	push	{r4, lr}
  if (McuInitialized == false)
 804be66:	4c15      	ldr	r4, [pc, #84]	; (804bebc <HW_Init+0x58>)
 804be68:	7823      	ldrb	r3, [r4, #0]
 804be6a:	bb2b      	cbnz	r3, 804beb8 <HW_Init+0x54>
    NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x3000);
#endif

    //HW_AdcInit();

    Radio.IoInit();
 804be6c:	4b14      	ldr	r3, [pc, #80]	; (804bec0 <HW_Init+0x5c>)
 804be6e:	681b      	ldr	r3, [r3, #0]
 804be70:	4798      	blx	r3

    HW_SPI_Init();
 804be72:	f7ff fc29 	bl	804b6c8 <HW_SPI_Init>

    HW_RTC_Init();
 804be76:	f7ff fb59 	bl	804b52c <HW_RTC_Init>

//    HW_I2C1_Init();

    TraceInit();
 804be7a:	f7fe fe51 	bl	804ab20 <TraceInit>

    //BSP_sensor_Init();

    Ble_Init_GPIO();
 804be7e:	f7f5 fab1 	bl	80413e4 <Ble_Init_GPIO>
    //COM_Init();
    MX_USART1_UART_Init();
 804be82:	f7f5 fa77 	bl	8041374 <MX_USART1_UART_Init>
    MX_USART2_UART_Init();
 804be86:	f7f5 fa91 	bl	80413ac <MX_USART2_UART_Init>
	MX_TIM3_Init();
 804be8a:	f7ff fca7 	bl	804b7dc <MX_TIM3_Init>
    MX_TIM2_Init();
 804be8e:	f7ff fc71 	bl	804b774 <MX_TIM2_Init>

    MX_SDIO_SD_Init();
 804be92:	f7ff fe2f 	bl	804baf4 <MX_SDIO_SD_Init>
    MX_FATFS_Init();
 804be96:	f7f6 ff8f 	bl	8042db8 <MX_FATFS_Init>

    // Inicialização da Base do timer
    HAL_TIM_Base_Start_IT(&htim3);
 804be9a:	480a      	ldr	r0, [pc, #40]	; (804bec4 <HW_Init+0x60>)
 804be9c:	f7f9 fb3f 	bl	804551e <HAL_TIM_Base_Start_IT>
    //__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);		// Habilita receber interrupções da UART com Bluetooth
    //__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);		// Habilita receber interrupções da UART com RFID
    HAL_UART_Receive_IT(&huart1, rx_byte_uart1, 1);
 804bea0:	2201      	movs	r2, #1
 804bea2:	4909      	ldr	r1, [pc, #36]	; (804bec8 <HW_Init+0x64>)
 804bea4:	4809      	ldr	r0, [pc, #36]	; (804becc <HW_Init+0x68>)
 804bea6:	f7f9 ff13 	bl	8045cd0 <HAL_UART_Receive_IT>
    HAL_UART_Receive_IT(&huart2, rx_byte_uart2, 1);
 804beaa:	2201      	movs	r2, #1
 804beac:	4908      	ldr	r1, [pc, #32]	; (804bed0 <HW_Init+0x6c>)
 804beae:	4809      	ldr	r0, [pc, #36]	; (804bed4 <HW_Init+0x70>)
 804beb0:	f7f9 ff0e 	bl	8045cd0 <HAL_UART_Receive_IT>
    McuInitialized = true;
 804beb4:	2301      	movs	r3, #1
 804beb6:	7023      	strb	r3, [r4, #0]
  }
}
 804beb8:	bd10      	pop	{r4, pc}
 804beba:	bf00      	nop
 804bebc:	2000967c 	.word	0x2000967c
 804bec0:	0804e210 	.word	0x0804e210
 804bec4:	2000bd60 	.word	0x2000bd60
 804bec8:	20009b40 	.word	0x20009b40
 804becc:	20009b4c 	.word	0x20009b4c
 804bed0:	20009b38 	.word	0x20009b38
 804bed4:	20009b8c 	.word	0x20009b8c

0804bed8 <HW_GpioInit>:
  vcom_IoDeInit();
}


void HW_GpioInit(void)
{
 804bed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804bedc:	b08c      	sub	sp, #48	; 0x30
	 GPIO_InitTypeDef GPIO_InitStruct = {0};

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 804bede:	4c59      	ldr	r4, [pc, #356]	; (804c044 <HW_GpioInit+0x16c>)
	  __HAL_RCC_GPIOA_CLK_ENABLE();
	  __HAL_RCC_GPIOB_CLK_ENABLE();
	  __HAL_RCC_GPIOD_CLK_ENABLE();

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 804bee0:	4f59      	ldr	r7, [pc, #356]	; (804c048 <HW_GpioInit+0x170>)

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_RESET);
 804bee2:	f8df 8168 	ldr.w	r8, [pc, #360]	; 804c04c <HW_GpioInit+0x174>
	  /*Configure GPIO pin Output Level */
	  //HAL_GPIO_WritePin(GPIOB, LED_PLUVIOMETRO_Pin|LED_ANEMOMETRO_Pin, GPIO_PIN_RESET);

	  /*Configure GPIO pin : USER_BUTTON_Pin */
	  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 804bee6:	f8df 9168 	ldr.w	r9, [pc, #360]	; 804c050 <HW_GpioInit+0x178>
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 804beea:	2500      	movs	r5, #0
	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 804beec:	2214      	movs	r2, #20
 804beee:	2100      	movs	r1, #0
 804bef0:	a807      	add	r0, sp, #28
 804bef2:	f000 fd9f 	bl	804ca34 <memset>
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 804bef6:	9500      	str	r5, [sp, #0]
 804bef8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804befa:	f043 0310 	orr.w	r3, r3, #16
 804befe:	6323      	str	r3, [r4, #48]	; 0x30
 804bf00:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804bf02:	f003 0310 	and.w	r3, r3, #16
 804bf06:	9300      	str	r3, [sp, #0]
 804bf08:	9b00      	ldr	r3, [sp, #0]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 804bf0a:	9501      	str	r5, [sp, #4]
 804bf0c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804bf0e:	f043 0304 	orr.w	r3, r3, #4
 804bf12:	6323      	str	r3, [r4, #48]	; 0x30
 804bf14:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804bf16:	f003 0304 	and.w	r3, r3, #4
 804bf1a:	9301      	str	r3, [sp, #4]
 804bf1c:	9b01      	ldr	r3, [sp, #4]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 804bf1e:	9502      	str	r5, [sp, #8]
 804bf20:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804bf22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 804bf26:	6323      	str	r3, [r4, #48]	; 0x30
 804bf28:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804bf2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804bf2e:	9302      	str	r3, [sp, #8]
 804bf30:	9b02      	ldr	r3, [sp, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 804bf32:	9503      	str	r5, [sp, #12]
 804bf34:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804bf36:	f043 0301 	orr.w	r3, r3, #1
 804bf3a:	6323      	str	r3, [r4, #48]	; 0x30
 804bf3c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804bf3e:	f003 0301 	and.w	r3, r3, #1
 804bf42:	9303      	str	r3, [sp, #12]
 804bf44:	9b03      	ldr	r3, [sp, #12]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 804bf46:	9504      	str	r5, [sp, #16]
 804bf48:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804bf4a:	f043 0302 	orr.w	r3, r3, #2
 804bf4e:	6323      	str	r3, [r4, #48]	; 0x30
 804bf50:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804bf52:	f003 0302 	and.w	r3, r3, #2
 804bf56:	9304      	str	r3, [sp, #16]
 804bf58:	9b04      	ldr	r3, [sp, #16]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 804bf5a:	9505      	str	r5, [sp, #20]
 804bf5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804bf5e:	f043 0308 	orr.w	r3, r3, #8
 804bf62:	6323      	str	r3, [r4, #48]	; 0x30
 804bf64:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804bf66:	f003 0308 	and.w	r3, r3, #8
 804bf6a:	9305      	str	r3, [sp, #20]
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 804bf6c:	462a      	mov	r2, r5
 804bf6e:	4638      	mov	r0, r7
 804bf70:	2140      	movs	r1, #64	; 0x40
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 804bf72:	9b05      	ldr	r3, [sp, #20]
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 804bf74:	f7f7 fdb8 	bl	8043ae8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_RESET);
 804bf78:	462a      	mov	r2, r5
 804bf7a:	4640      	mov	r0, r8
 804bf7c:	2101      	movs	r1, #1
 804bf7e:	f7f7 fdb3 	bl	8043ae8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(MEM_WP_GPIO_Port, MEM_WP_Pin, GPIO_PIN_SET);
 804bf82:	2201      	movs	r2, #1
 804bf84:	4640      	mov	r0, r8
 804bf86:	f44f 7180 	mov.w	r1, #256	; 0x100
 804bf8a:	f7f7 fdad 	bl	8043ae8 <HAL_GPIO_WritePin>
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 804bf8e:	2601      	movs	r6, #1
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 804bf90:	2308      	movs	r3, #8
	  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 804bf92:	a907      	add	r1, sp, #28
 804bf94:	4638      	mov	r0, r7
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 804bf96:	e9cd 3907 	strd	r3, r9, [sp, #28]
//	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
//	  GPIO_InitStruct.Pull = GPIO_NOPULL;
//	  HAL_GPIO_Init(LORA_DIO5_GPIO_Port, &GPIO_InitStruct);

	  /*Configure GPIO pin : PtPin */
      GPIO_InitStruct.Pin = ANEMOMETRO_Pin;
 804bf9a:	f44f 4a80 	mov.w	sl, #16384	; 0x4000
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 804bf9e:	9609      	str	r6, [sp, #36]	; 0x24
	  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 804bfa0:	f7f7 fc2e 	bl	8043800 <HAL_GPIO_Init>
      GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
      GPIO_InitStruct.Pull = GPIO_PULLUP;
      HAL_GPIO_Init(ANEMOMETRO_GPIO_Port, &GPIO_InitStruct);
 804bfa4:	a907      	add	r1, sp, #28
 804bfa6:	4638      	mov	r0, r7
      GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 804bfa8:	e9cd a907 	strd	sl, r9, [sp, #28]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 804bfac:	9609      	str	r6, [sp, #36]	; 0x24
      HAL_GPIO_Init(ANEMOMETRO_GPIO_Port, &GPIO_InitStruct);
 804bfae:	f7f7 fc27 	bl	8043800 <HAL_GPIO_Init>

      /*Configure GPIO pin : PtPin */
      GPIO_InitStruct.Pin = PLUVIOMETRO_Pin;
 804bfb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
      GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 804bfb6:	e9cd 3907 	strd	r3, r9, [sp, #28]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
      HAL_GPIO_Init(PLUVIOMETRO_GPIO_Port, &GPIO_InitStruct);
 804bfba:	a907      	add	r1, sp, #28
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 804bfbc:	2302      	movs	r3, #2
      HAL_GPIO_Init(PLUVIOMETRO_GPIO_Port, &GPIO_InitStruct);
 804bfbe:	4638      	mov	r0, r7
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 804bfc0:	9309      	str	r3, [sp, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 804bfc2:	f5a7 6700 	sub.w	r7, r7, #2048	; 0x800
      HAL_GPIO_Init(PLUVIOMETRO_GPIO_Port, &GPIO_InitStruct);
 804bfc6:	f7f7 fc1b 	bl	8043800 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = LORA_RESET_Pin|MEM_WP_Pin;
 804bfca:	f240 1301 	movw	r3, #257	; 0x101
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 804bfce:	a907      	add	r1, sp, #28
 804bfd0:	4640      	mov	r0, r8
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 804bfd2:	e9cd 3607 	strd	r3, r6, [sp, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804bfd6:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 804bfda:	f7f7 fc11 	bl	8043800 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 804bfde:	4632      	mov	r2, r6
 804bfe0:	4651      	mov	r1, sl
 804bfe2:	4638      	mov	r0, r7
 804bfe4:	f7f7 fd80 	bl	8043ae8 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : PtPin */
	  GPIO_InitStruct.Pin = SD_DET_CARD_Pin;
 804bfe8:	2380      	movs	r3, #128	; 0x80
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
	  HAL_GPIO_Init(SD_DET_CARD_GPIO_Port, &GPIO_InitStruct);
 804bfea:	a907      	add	r1, sp, #28
 804bfec:	4638      	mov	r0, r7
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 804bfee:	e9cd 3507 	strd	r3, r5, [sp, #28]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 804bff2:	9609      	str	r6, [sp, #36]	; 0x24
	  HAL_GPIO_Init(SD_DET_CARD_GPIO_Port, &GPIO_InitStruct);
 804bff4:	f7f7 fc04 	bl	8043800 <HAL_GPIO_Init>

	  /* DMA controller clock enable */
	  __HAL_RCC_DMA2_CLK_ENABLE();
 804bff8:	9506      	str	r5, [sp, #24]
 804bffa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804bffc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 804c000:	6323      	str	r3, [r4, #48]	; 0x30
 804c002:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804c004:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000

	  /* DMA interrupt init */
	  /* DMA2_Stream3_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 804c008:	462a      	mov	r2, r5
 804c00a:	4629      	mov	r1, r5
	  __HAL_RCC_DMA2_CLK_ENABLE();
 804c00c:	9306      	str	r3, [sp, #24]
	  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 804c00e:	203b      	movs	r0, #59	; 0x3b
	  __HAL_RCC_DMA2_CLK_ENABLE();
 804c010:	9b06      	ldr	r3, [sp, #24]
	  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 804c012:	f7f6 fffb 	bl	804300c <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 804c016:	203b      	movs	r0, #59	; 0x3b
 804c018:	f7f7 f82c 	bl	8043074 <HAL_NVIC_EnableIRQ>
	  /* DMA2_Stream6_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 804c01c:	462a      	mov	r2, r5
 804c01e:	4629      	mov	r1, r5
 804c020:	2045      	movs	r0, #69	; 0x45
 804c022:	f7f6 fff3 	bl	804300c <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 804c026:	2045      	movs	r0, #69	; 0x45
 804c028:	f7f7 f824 	bl	8043074 <HAL_NVIC_EnableIRQ>


	  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 804c02c:	462a      	mov	r2, r5
 804c02e:	4629      	mov	r1, r5
 804c030:	2028      	movs	r0, #40	; 0x28
 804c032:	f7f6 ffeb 	bl	804300c <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 804c036:	2028      	movs	r0, #40	; 0x28
 804c038:	f7f7 f81c 	bl	8043074 <HAL_NVIC_EnableIRQ>

}
 804c03c:	b00c      	add	sp, #48	; 0x30
 804c03e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804c042:	bf00      	nop
 804c044:	40023800 	.word	0x40023800
 804c048:	40021000 	.word	0x40021000
 804c04c:	40020400 	.word	0x40020400
 804c050:	10110000 	.word	0x10110000

0804c054 <SystemClock_Config>:
  */



void SystemClock_Config(void)
{
 804c054:	b530      	push	{r4, r5, lr}
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 804c056:	2400      	movs	r4, #0
{
 804c058:	b099      	sub	sp, #100	; 0x64
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 804c05a:	2510      	movs	r5, #16
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 804c05c:	2214      	movs	r2, #20
 804c05e:	4621      	mov	r1, r4
 804c060:	a807      	add	r0, sp, #28
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 804c062:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 804c066:	f000 fce5 	bl	804ca34 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 804c06a:	462a      	mov	r2, r5
 804c06c:	4621      	mov	r1, r4
 804c06e:	a803      	add	r0, sp, #12
 804c070:	f000 fce0 	bl	804ca34 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 804c074:	4b22      	ldr	r3, [pc, #136]	; (804c100 <SystemClock_Config+0xac>)
 804c076:	9401      	str	r4, [sp, #4]
 804c078:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804c07a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 804c07e:	641a      	str	r2, [r3, #64]	; 0x40
 804c080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804c082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804c086:	9301      	str	r3, [sp, #4]
 804c088:	9b01      	ldr	r3, [sp, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 804c08a:	4b1e      	ldr	r3, [pc, #120]	; (804c104 <SystemClock_Config+0xb0>)
 804c08c:	9402      	str	r4, [sp, #8]
 804c08e:	681a      	ldr	r2, [r3, #0]
 804c090:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 804c094:	601a      	str	r2, [r3, #0]
 804c096:	681b      	ldr	r3, [r3, #0]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
	//RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;

	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLM = 16;
 804c098:	9514      	str	r5, [sp, #80]	; 0x50
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 804c09a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 804c09e:	9302      	str	r3, [sp, #8]
 804c0a0:	9b02      	ldr	r3, [sp, #8]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI;
 804c0a2:	230a      	movs	r3, #10
 804c0a4:	930c      	str	r3, [sp, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 804c0a6:	2301      	movs	r3, #1
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 804c0a8:	e9cd 350f 	strd	r3, r5, [sp, #60]	; 0x3c
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 804c0ac:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 192;
 804c0ae:	22c0      	movs	r2, #192	; 0xc0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 804c0b0:	2302      	movs	r3, #2
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 804c0b2:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 804c0b6:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLQ = 4;

	//RCC_OscInitStruct.LSEState = RCC_LSE_ON;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 804c0ba:	a80c      	add	r0, sp, #48	; 0x30
	RCC_OscInitStruct.PLL.PLLQ = 4;
 804c0bc:	2304      	movs	r3, #4
 804c0be:	9317      	str	r3, [sp, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 804c0c0:	f7f7 fd24 	bl	8043b0c <HAL_RCC_OscConfig>
 804c0c4:	b108      	cbz	r0, 804c0ca <SystemClock_Config+0x76>
		Error_Handler();
 804c0c6:	f7fe fe3b 	bl	804ad40 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 804c0ca:	230f      	movs	r3, #15
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 804c0cc:	2100      	movs	r1, #0
 804c0ce:	a807      	add	r0, sp, #28
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 804c0d0:	e9cd 3407 	strd	r3, r4, [sp, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 804c0d4:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 804c0d8:	940b      	str	r4, [sp, #44]	; 0x2c
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 804c0da:	f7f7 feeb 	bl	8043eb4 <HAL_RCC_ClockConfig>
 804c0de:	b108      	cbz	r0, 804c0e4 <SystemClock_Config+0x90>
		Error_Handler();
 804c0e0:	f7fe fe2e 	bl	804ad40 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 804c0e4:	2302      	movs	r3, #2
 804c0e6:	9303      	str	r3, [sp, #12]
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 804c0e8:	a803      	add	r0, sp, #12
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 804c0ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 804c0ee:	9306      	str	r3, [sp, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 804c0f0:	f7f7 ff9a 	bl	8044028 <HAL_RCCEx_PeriphCLKConfig>
 804c0f4:	b108      	cbz	r0, 804c0fa <SystemClock_Config+0xa6>
		Error_Handler();
 804c0f6:	f7fe fe23 	bl	804ad40 <Error_Handler>
	}

}
 804c0fa:	b019      	add	sp, #100	; 0x64
 804c0fc:	bd30      	pop	{r4, r5, pc}
 804c0fe:	bf00      	nop
 804c100:	40023800 	.word	0x40023800
 804c104:	40007000 	.word	0x40007000

0804c108 <NMI_Handler>:
  * @retval None
  */

void NMI_Handler(void)
{
}
 804c108:	4770      	bx	lr

0804c10a <HardFault_Handler>:

void HardFault_Handler(void)
{
  while (1)
  {
    __NOP();
 804c10a:	bf00      	nop
 804c10c:	e7fd      	b.n	804c10a <HardFault_Handler>

0804c10e <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 804c10e:	e7fe      	b.n	804c10e <MemManage_Handler>

0804c110 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 804c110:	e7fe      	b.n	804c110 <BusFault_Handler>

0804c112 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 804c112:	e7fe      	b.n	804c112 <UsageFault_Handler>

0804c114 <SVC_Handler>:
 804c114:	4770      	bx	lr

0804c116 <DebugMon_Handler>:
 804c116:	4770      	bx	lr

0804c118 <PendSV_Handler>:
 804c118:	4770      	bx	lr

0804c11a <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 804c11a:	f7f6 bf53 	b.w	8042fc4 <HAL_IncTick>
	...

0804c120 <TIM2_IRQHandler>:
}

void TIM2_IRQHandler(void)
{
	flags_ble.rfid_send_cmd = SET;
 804c120:	4a03      	ldr	r2, [pc, #12]	; (804c130 <TIM2_IRQHandler+0x10>)

	HAL_TIM_IRQHandler(&htim2);
 804c122:	4804      	ldr	r0, [pc, #16]	; (804c134 <TIM2_IRQHandler+0x14>)
	flags_ble.rfid_send_cmd = SET;
 804c124:	7813      	ldrb	r3, [r2, #0]
 804c126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804c12a:	7013      	strb	r3, [r2, #0]
	HAL_TIM_IRQHandler(&htim2);
 804c12c:	f7f9 ba21 	b.w	8045572 <HAL_TIM_IRQHandler>
 804c130:	20009b48 	.word	0x20009b48
 804c134:	2000bda0 	.word	0x2000bda0

0804c138 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 804c138:	b510      	push	{r4, lr}
	/*
	 * 	Timer dispara a cada 100 ms e se tiver 10 contagens, sinaliza que
	 * 	o pino de estado se manteve em alta e conexão foi bem sucedida.
	 */

	ble_state = HAL_GPIO_ReadPin(BLE_STATE_GPIO_Port,BLE_STATE_Pin);
 804c13a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 804c13e:	481a      	ldr	r0, [pc, #104]	; (804c1a8 <TIM3_IRQHandler+0x70>)
 804c140:	4c1a      	ldr	r4, [pc, #104]	; (804c1ac <TIM3_IRQHandler+0x74>)
 804c142:	f7f7 fccb 	bl	8043adc <HAL_GPIO_ReadPin>
 804c146:	4b1a      	ldr	r3, [pc, #104]	; (804c1b0 <TIM3_IRQHandler+0x78>)
 804c148:	4a1a      	ldr	r2, [pc, #104]	; (804c1b4 <TIM3_IRQHandler+0x7c>)
 804c14a:	7018      	strb	r0, [r3, #0]
	if (ble_state == 1)
 804c14c:	2801      	cmp	r0, #1
 804c14e:	d127      	bne.n	804c1a0 <TIM3_IRQHandler+0x68>
	{
		if (++count_tim3 > 9)
 804c150:	7813      	ldrb	r3, [r2, #0]
 804c152:	3301      	adds	r3, #1
 804c154:	b2db      	uxtb	r3, r3
 804c156:	2b09      	cmp	r3, #9
 804c158:	7013      	strb	r3, [r2, #0]
 804c15a:	d905      	bls.n	804c168 <TIM3_IRQHandler+0x30>
		{
			flags_ble.connection = SET;
 804c15c:	7823      	ldrb	r3, [r4, #0]
 804c15e:	f043 0308 	orr.w	r3, r3, #8
			count_tim3 = 0;
		}
	}
	else
	{
		flags_ble.connection = RESET;
 804c162:	7023      	strb	r3, [r4, #0]
		count_tim3 = 0;
 804c164:	2300      	movs	r3, #0
 804c166:	7013      	strb	r3, [r2, #0]
	}

	// Para as requisições de TAG pois a conexão foi quebrada
	if(flags_ble.connection == RESET)
 804c168:	7823      	ldrb	r3, [r4, #0]
 804c16a:	071a      	lsls	r2, r3, #28
 804c16c:	d402      	bmi.n	804c174 <TIM3_IRQHandler+0x3c>
	{
			HAL_TIM_Base_Stop_IT(&htim2);
 804c16e:	4812      	ldr	r0, [pc, #72]	; (804c1b8 <TIM3_IRQHandler+0x80>)
 804c170:	f7f9 f9e5 	bl	804553e <HAL_TIM_Base_Stop_IT>
	}

	if(flags_ble.start == SET){
 804c174:	7823      	ldrb	r3, [r4, #0]
 804c176:	07db      	lsls	r3, r3, #31
 804c178:	d50a      	bpl.n	804c190 <TIM3_IRQHandler+0x58>
		if(count_send++ == 50)
 804c17a:	4b10      	ldr	r3, [pc, #64]	; (804c1bc <TIM3_IRQHandler+0x84>)
 804c17c:	681a      	ldr	r2, [r3, #0]
 804c17e:	1c51      	adds	r1, r2, #1
 804c180:	2a32      	cmp	r2, #50	; 0x32
 804c182:	6019      	str	r1, [r3, #0]
 804c184:	d104      	bne.n	804c190 <TIM3_IRQHandler+0x58>
		{
			flag_send_timeout = SET;
 804c186:	4a0e      	ldr	r2, [pc, #56]	; (804c1c0 <TIM3_IRQHandler+0x88>)
 804c188:	2101      	movs	r1, #1
 804c18a:	7011      	strb	r1, [r2, #0]
			count_send = 0;
 804c18c:	2200      	movs	r2, #0
 804c18e:	601a      	str	r2, [r3, #0]
		}
	}


 HAL_NVIC_ClearPendingIRQ(TIM3_IRQn); // limpa flags de interrupção
 804c190:	201d      	movs	r0, #29
 804c192:	f7f6 ffa3 	bl	80430dc <HAL_NVIC_ClearPendingIRQ>

  HAL_TIM_IRQHandler(&htim3);
 804c196:	480b      	ldr	r0, [pc, #44]	; (804c1c4 <TIM3_IRQHandler+0x8c>)

}
 804c198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_TIM_IRQHandler(&htim3);
 804c19c:	f7f9 b9e9 	b.w	8045572 <HAL_TIM_IRQHandler>
		flags_ble.connection = RESET;
 804c1a0:	7823      	ldrb	r3, [r4, #0]
 804c1a2:	f36f 03c3 	bfc	r3, #3, #1
 804c1a6:	e7dc      	b.n	804c162 <TIM3_IRQHandler+0x2a>
 804c1a8:	40020000 	.word	0x40020000
 804c1ac:	20009b48 	.word	0x20009b48
 804c1b0:	20008154 	.word	0x20008154
 804c1b4:	2000967e 	.word	0x2000967e
 804c1b8:	2000bda0 	.word	0x2000bda0
 804c1bc:	2000837c 	.word	0x2000837c
 804c1c0:	20008378 	.word	0x20008378
 804c1c4:	2000bd60 	.word	0x2000bd60

0804c1c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 804c1c8:	b508      	push	{r3, lr}


	HAL_UART_IRQHandler(&huart1);
 804c1ca:	4815      	ldr	r0, [pc, #84]	; (804c220 <USART1_IRQHandler+0x58>)
 804c1cc:	f7f9 fe62 	bl	8045e94 <HAL_UART_IRQHandler>
	if(ble_index>sizeof(message_ble))
 804c1d0:	4b14      	ldr	r3, [pc, #80]	; (804c224 <USART1_IRQHandler+0x5c>)
		ble_index=0;
	message_ble[ble_index] = rx_byte_uart1[0];
 804c1d2:	4915      	ldr	r1, [pc, #84]	; (804c228 <USART1_IRQHandler+0x60>)
	if(ble_index>sizeof(message_ble))
 804c1d4:	681a      	ldr	r2, [r3, #0]
	message_ble[ble_index] = rx_byte_uart1[0];
 804c1d6:	4815      	ldr	r0, [pc, #84]	; (804c22c <USART1_IRQHandler+0x64>)
 804c1d8:	7809      	ldrb	r1, [r1, #0]
	if(ble_index>sizeof(message_ble))
 804c1da:	2a21      	cmp	r2, #33	; 0x21
		ble_index=0;
 804c1dc:	bf84      	itt	hi
 804c1de:	2200      	movhi	r2, #0
 804c1e0:	601a      	strhi	r2, [r3, #0]
	message_ble[ble_index] = rx_byte_uart1[0];
 804c1e2:	681a      	ldr	r2, [r3, #0]
 804c1e4:	5481      	strb	r1, [r0, r2]
	ble_index++;
 804c1e6:	3201      	adds	r2, #1
	if(ble_index>2){
 804c1e8:	2a02      	cmp	r2, #2
	ble_index++;
 804c1ea:	601a      	str	r2, [r3, #0]
	if(ble_index>2){
 804c1ec:	dd0b      	ble.n	804c206 <USART1_IRQHandler+0x3e>
		if(message_ble[0] == 0xa){
 804c1ee:	7802      	ldrb	r2, [r0, #0]
 804c1f0:	2a0a      	cmp	r2, #10
 804c1f2:	d108      	bne.n	804c206 <USART1_IRQHandler+0x3e>
			if(message_ble[ble_index-1] == 0xd)
 804c1f4:	290d      	cmp	r1, #13
 804c1f6:	d106      	bne.n	804c206 <USART1_IRQHandler+0x3e>
			{
				// Sinaliza que chegou uma mensagem válida
				ble_index = 0;								// Zera o índice para nova mensagem
 804c1f8:	2200      	movs	r2, #0
 804c1fa:	601a      	str	r2, [r3, #0]
				flags_ble.enable_handler = 1;
 804c1fc:	4a0c      	ldr	r2, [pc, #48]	; (804c230 <USART1_IRQHandler+0x68>)
 804c1fe:	7813      	ldrb	r3, [r2, #0]
 804c200:	f043 0320 	orr.w	r3, r3, #32
 804c204:	7013      	strb	r3, [r2, #0]
			}
		}
	}

	HAL_NVIC_ClearPendingIRQ(USART1_IRQn);
 804c206:	2025      	movs	r0, #37	; 0x25
 804c208:	f7f6 ff68 	bl	80430dc <HAL_NVIC_ClearPendingIRQ>
	HAL_UART_Abort_IT(&huart1);
 804c20c:	4804      	ldr	r0, [pc, #16]	; (804c220 <USART1_IRQHandler+0x58>)
 804c20e:	f7f9 feed 	bl	8045fec <HAL_UART_Abort_IT>
	HAL_UART_Receive_IT(&huart1, rx_byte_uart1, 1);
 804c212:	2201      	movs	r2, #1
 804c214:	4904      	ldr	r1, [pc, #16]	; (804c228 <USART1_IRQHandler+0x60>)
 804c216:	4802      	ldr	r0, [pc, #8]	; (804c220 <USART1_IRQHandler+0x58>)

}
 804c218:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_UART_Receive_IT(&huart1, rx_byte_uart1, 1);
 804c21c:	f7f9 bd58 	b.w	8045cd0 <HAL_UART_Receive_IT>
 804c220:	20009b4c 	.word	0x20009b4c
 804c224:	20008158 	.word	0x20008158
 804c228:	20009b40 	.word	0x20009b40
 804c22c:	2000815c 	.word	0x2000815c
 804c230:	20009b48 	.word	0x20009b48

0804c234 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 804c234:	b570      	push	{r4, r5, r6, lr}
	 * 	mensagem é padrão, logo ao se detectar o caracter 0x0D
	 * 	habilitar a flag que permite tratar a mensagem.
	 */

  /* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 804c236:	481a      	ldr	r0, [pc, #104]	; (804c2a0 <USART2_IRQHandler+0x6c>)
 804c238:	f7f9 fe2c 	bl	8045e94 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART2_IRQn 1 */
	message[message_index] = rx_byte_uart2[0];
 804c23c:	4919      	ldr	r1, [pc, #100]	; (804c2a4 <USART2_IRQHandler+0x70>)
 804c23e:	4b1a      	ldr	r3, [pc, #104]	; (804c2a8 <USART2_IRQHandler+0x74>)
 804c240:	680a      	ldr	r2, [r1, #0]
 804c242:	781c      	ldrb	r4, [r3, #0]
 804c244:	4b19      	ldr	r3, [pc, #100]	; (804c2ac <USART2_IRQHandler+0x78>)
	message_index++;
 804c246:	1c50      	adds	r0, r2, #1

	/*
	 * Testa se recebeu o fim da messagem 0x0D.
	 */
	if (message_index > 3)
 804c248:	2803      	cmp	r0, #3
	message[message_index] = rx_byte_uart2[0];
 804c24a:	549c      	strb	r4, [r3, r2]
	message_index++;
 804c24c:	6008      	str	r0, [r1, #0]
	if (message_index > 3)
 804c24e:	dd1a      	ble.n	804c286 <USART2_IRQHandler+0x52>
	{
		if ((message[message_index - 4] == 0x0A)
 804c250:	189d      	adds	r5, r3, r2
 804c252:	f815 6c03 	ldrb.w	r6, [r5, #-3]
 804c256:	2e0a      	cmp	r6, #10
 804c258:	d115      	bne.n	804c286 <USART2_IRQHandler+0x52>
				&& ((message[message_index - 3] == 0x55) || (message[message_index - 3] == 0x58))
 804c25a:	f815 5c02 	ldrb.w	r5, [r5, #-2]
 804c25e:	2d55      	cmp	r5, #85	; 0x55
 804c260:	d001      	beq.n	804c266 <USART2_IRQHandler+0x32>
 804c262:	2d58      	cmp	r5, #88	; 0x58
 804c264:	d10f      	bne.n	804c286 <USART2_IRQHandler+0x52>
				&& (message[message_index - 2] == 0x0D)
 804c266:	4413      	add	r3, r2
 804c268:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 804c26c:	2b0d      	cmp	r3, #13
 804c26e:	d10a      	bne.n	804c286 <USART2_IRQHandler+0x52>
				&& (message[message_index - 1] == 0x0A))
 804c270:	2c0a      	cmp	r4, #10
 804c272:	d108      	bne.n	804c286 <USART2_IRQHandler+0x52>
		{
			flags_ble.tag = SET;// Aciona a flag mostrando que recebeu mensagem válida
 804c274:	4a0e      	ldr	r2, [pc, #56]	; (804c2b0 <USART2_IRQHandler+0x7c>)
 804c276:	7813      	ldrb	r3, [r2, #0]
 804c278:	f043 0302 	orr.w	r3, r3, #2
 804c27c:	7013      	strb	r3, [r2, #0]
			bytes_read_rfid = message_index;
 804c27e:	4b0d      	ldr	r3, [pc, #52]	; (804c2b4 <USART2_IRQHandler+0x80>)
 804c280:	7018      	strb	r0, [r3, #0]
			message_index=0;
 804c282:	2300      	movs	r3, #0
 804c284:	600b      	str	r3, [r1, #0]
		}
	}
	HAL_NVIC_ClearPendingIRQ(USART2_IRQn);
 804c286:	2026      	movs	r0, #38	; 0x26
 804c288:	f7f6 ff28 	bl	80430dc <HAL_NVIC_ClearPendingIRQ>
	HAL_UART_Abort_IT(&huart2);
 804c28c:	4804      	ldr	r0, [pc, #16]	; (804c2a0 <USART2_IRQHandler+0x6c>)
 804c28e:	f7f9 fead 	bl	8045fec <HAL_UART_Abort_IT>
	HAL_UART_Receive_IT(&huart2, rx_byte_uart2, 1);
 804c292:	2201      	movs	r2, #1
 804c294:	4904      	ldr	r1, [pc, #16]	; (804c2a8 <USART2_IRQHandler+0x74>)
 804c296:	4802      	ldr	r0, [pc, #8]	; (804c2a0 <USART2_IRQHandler+0x6c>)
	/* USER CODE END USART2_IRQn 1 */
}
 804c298:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_UART_Receive_IT(&huart2, rx_byte_uart2, 1);
 804c29c:	f7f9 bd18 	b.w	8045cd0 <HAL_UART_Receive_IT>
 804c2a0:	20009b8c 	.word	0x20009b8c
 804c2a4:	20008180 	.word	0x20008180
 804c2a8:	20009b38 	.word	0x20009b38
 804c2ac:	20008184 	.word	0x20008184
 804c2b0:	20009b48 	.word	0x20009b48
 804c2b4:	20002384 	.word	0x20002384

0804c2b8 <SDIO_IRQHandler>:
void SDIO_IRQHandler(void)
{
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 804c2b8:	4801      	ldr	r0, [pc, #4]	; (804c2c0 <SDIO_IRQHandler+0x8>)
 804c2ba:	f7f8 be8f 	b.w	8044fdc <HAL_SD_IRQHandler>
 804c2be:	bf00      	nop
 804c2c0:	2000c2c0 	.word	0x2000c2c0

0804c2c4 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 804c2c4:	4801      	ldr	r0, [pc, #4]	; (804c2cc <DMA2_Stream3_IRQHandler+0x8>)
 804c2c6:	f7f7 b823 	b.w	8043310 <HAL_DMA_IRQHandler>
 804c2ca:	bf00      	nop
 804c2cc:	2000c200 	.word	0x2000c200

0804c2d0 <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 804c2d0:	4801      	ldr	r0, [pc, #4]	; (804c2d8 <DMA2_Stream6_IRQHandler+0x8>)
 804c2d2:	f7f7 b81d 	b.w	8043310 <HAL_DMA_IRQHandler>
 804c2d6:	bf00      	nop
 804c2d8:	2000c260 	.word	0x2000c260

0804c2dc <USART3_IRQHandler>:
  /* USER CODE END DMA2_Stream6_IRQn 1 */
}

void USARTx_IRQHandler(void)
{
  vcom_IRQHandler();
 804c2dc:	f000 b872 	b.w	804c3c4 <vcom_IRQHandler>

0804c2e0 <DMA1_Stream4_IRQHandler>:
}

void USARTx_DMA_TX_IRQHandler(void)
{
  vcom_DMA_TX_IRQHandler();
 804c2e0:	f000 b86a 	b.w	804c3b8 <vcom_DMA_TX_IRQHandler>

0804c2e4 <RTC_Alarm_IRQHandler>:
}

void RTC_Alarm_IRQHandler(void)
{
  HW_RTC_IrqHandler();
 804c2e4:	f7ff b8e2 	b.w	804b4ac <HW_RTC_IrqHandler>

0804c2e8 <EXTI0_IRQHandler>:
}

void EXTI0_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 804c2e8:	2001      	movs	r0, #1
 804c2ea:	f7f7 bc03 	b.w	8043af4 <HAL_GPIO_EXTI_IRQHandler>

0804c2ee <EXTI1_IRQHandler>:
}

void EXTI1_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 804c2ee:	2002      	movs	r0, #2
 804c2f0:	f7f7 bc00 	b.w	8043af4 <HAL_GPIO_EXTI_IRQHandler>

0804c2f4 <EXTI2_IRQHandler>:
}

void EXTI2_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 804c2f4:	2004      	movs	r0, #4
 804c2f6:	f7f7 bbfd 	b.w	8043af4 <HAL_GPIO_EXTI_IRQHandler>

0804c2fa <EXTI3_IRQHandler>:
}

void EXTI3_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 804c2fa:	2008      	movs	r0, #8
 804c2fc:	f7f7 bbfa 	b.w	8043af4 <HAL_GPIO_EXTI_IRQHandler>

0804c300 <EXTI4_IRQHandler>:
}

void EXTI4_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 804c300:	2010      	movs	r0, #16
 804c302:	f7f7 bbf7 	b.w	8043af4 <HAL_GPIO_EXTI_IRQHandler>

0804c306 <EXTI9_5_IRQHandler>:
}


void EXTI9_5_IRQHandler(void)
{
 804c306:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 804c308:	2020      	movs	r0, #32
 804c30a:	f7f7 fbf3 	bl	8043af4 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 804c30e:	2040      	movs	r0, #64	; 0x40
 804c310:	f7f7 fbf0 	bl	8043af4 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 804c314:	2080      	movs	r0, #128	; 0x80
 804c316:	f7f7 fbed 	bl	8043af4 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 804c31a:	f44f 7080 	mov.w	r0, #256	; 0x100
 804c31e:	f7f7 fbe9 	bl	8043af4 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 804c322:	f44f 7000 	mov.w	r0, #512	; 0x200
}
 804c326:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 804c32a:	f7f7 bbe3 	b.w	8043af4 <HAL_GPIO_EXTI_IRQHandler>

0804c32e <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 804c32e:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 804c330:	f44f 6080 	mov.w	r0, #1024	; 0x400
 804c334:	f7f7 fbde 	bl	8043af4 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 804c338:	f44f 6000 	mov.w	r0, #2048	; 0x800
 804c33c:	f7f7 fbda 	bl	8043af4 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 804c340:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 804c344:	f7f7 fbd6 	bl	8043af4 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 804c348:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 804c34c:	f7f7 fbd2 	bl	8043af4 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 804c350:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 804c354:	f7f7 fbce 	bl	8043af4 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 804c358:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
 804c35c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 804c360:	f7f7 bbc8 	b.w	8043af4 <HAL_GPIO_EXTI_IRQHandler>

0804c364 <vcom_Init>:

static void (*TxCpltCallback)(void);
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/
void vcom_Init(void (*TxCb)(void))
{
 804c364:	b508      	push	{r3, lr}
      - Parity = ODD parity
      - BaudRate = 921600 baud
      - Hardware flow control disabled (RTS and CTS signals) */
  UartHandle.Instance        = USARTx;

  UartHandle.Init.BaudRate   = 115200;
 804c366:	490b      	ldr	r1, [pc, #44]	; (804c394 <vcom_Init+0x30>)
  TxCpltCallback = TxCb;
 804c368:	4b0b      	ldr	r3, [pc, #44]	; (804c398 <vcom_Init+0x34>)
  UartHandle.Init.BaudRate   = 115200;
 804c36a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 804c36e:	e9c3 1201 	strd	r1, r2, [r3, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 804c372:	2200      	movs	r2, #0
  TxCpltCallback = TxCb;
 804c374:	6018      	str	r0, [r3, #0]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 804c376:	e9c3 2203 	strd	r2, r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 804c37a:	615a      	str	r2, [r3, #20]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 804c37c:	61da      	str	r2, [r3, #28]
  UartHandle.Init.Mode       = UART_MODE_TX;

  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 804c37e:	1d18      	adds	r0, r3, #4
  UartHandle.Init.Mode       = UART_MODE_TX;
 804c380:	2208      	movs	r2, #8
 804c382:	619a      	str	r2, [r3, #24]
  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 804c384:	f7f9 fba0 	bl	8045ac8 <HAL_UART_Init>
 804c388:	b118      	cbz	r0, 804c392 <vcom_Init+0x2e>
  {
    /* Initialization Error */
    Error_Handler();
  }
}
 804c38a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 804c38e:	f7fe bcd7 	b.w	804ad40 <Error_Handler>
}
 804c392:	bd08      	pop	{r3, pc}
 804c394:	40004800 	.word	0x40004800
 804c398:	20009680 	.word	0x20009680

0804c39c <vcom_Trace>:

void vcom_Trace(uint8_t *p_data, uint16_t size)
{
  HAL_UART_Transmit_DMA(&UartHandle, p_data, size);
 804c39c:	460a      	mov	r2, r1
 804c39e:	4601      	mov	r1, r0
 804c3a0:	4801      	ldr	r0, [pc, #4]	; (804c3a8 <vcom_Trace+0xc>)
 804c3a2:	f7f9 bcbd 	b.w	8045d20 <HAL_UART_Transmit_DMA>
 804c3a6:	bf00      	nop
 804c3a8:	20009684 	.word	0x20009684

0804c3ac <HAL_UART_TxCpltCallback>:
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
  /* buffer transmission complete*/
  TxCpltCallback();
 804c3ac:	4b01      	ldr	r3, [pc, #4]	; (804c3b4 <HAL_UART_TxCpltCallback+0x8>)
 804c3ae:	681b      	ldr	r3, [r3, #0]
 804c3b0:	4718      	bx	r3
 804c3b2:	bf00      	nop
 804c3b4:	20009680 	.word	0x20009680

0804c3b8 <vcom_DMA_TX_IRQHandler>:
}

void vcom_DMA_TX_IRQHandler(void)
{
  HAL_DMA_IRQHandler(UartHandle.hdmatx);
 804c3b8:	4b01      	ldr	r3, [pc, #4]	; (804c3c0 <vcom_DMA_TX_IRQHandler+0x8>)
 804c3ba:	6b58      	ldr	r0, [r3, #52]	; 0x34
 804c3bc:	f7f6 bfa8 	b.w	8043310 <HAL_DMA_IRQHandler>
 804c3c0:	20009680 	.word	0x20009680

0804c3c4 <vcom_IRQHandler>:
}

void vcom_IRQHandler(void)
{
  HAL_UART_IRQHandler(&UartHandle);
 804c3c4:	4801      	ldr	r0, [pc, #4]	; (804c3cc <vcom_IRQHandler+0x8>)
 804c3c6:	f7f9 bd65 	b.w	8045e94 <HAL_UART_IRQHandler>
 804c3ca:	bf00      	nop
 804c3cc:	20009684 	.word	0x20009684

0804c3d0 <vcom_IoInit>:
		HAL_NVIC_DisableIRQ(USARTx_DMA_TX_IRQn);
	}
}

void vcom_IoInit(void)
{
 804c3d0:	b530      	push	{r4, r5, lr}
 804c3d2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 804c3d4:	4b17      	ldr	r3, [pc, #92]	; (804c434 <vcom_IoInit+0x64>)
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
  GPIO_InitStruct.Alternate = USARTx_TX_AF;

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 804c3d6:	4c18      	ldr	r4, [pc, #96]	; (804c438 <vcom_IoInit+0x68>)
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 804c3d8:	2200      	movs	r2, #0
  USARTx_TX_GPIO_CLK_ENABLE();
 804c3da:	9201      	str	r2, [sp, #4]
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 804c3dc:	9205      	str	r2, [sp, #20]
  USARTx_TX_GPIO_CLK_ENABLE();
 804c3de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 804c3e0:	f041 0102 	orr.w	r1, r1, #2
 804c3e4:	6319      	str	r1, [r3, #48]	; 0x30
 804c3e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 804c3e8:	f001 0102 	and.w	r1, r1, #2
 804c3ec:	9101      	str	r1, [sp, #4]
 804c3ee:	9901      	ldr	r1, [sp, #4]
  USARTx_RX_GPIO_CLK_ENABLE();
 804c3f0:	9202      	str	r2, [sp, #8]
 804c3f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804c3f4:	f042 0202 	orr.w	r2, r2, #2
 804c3f8:	631a      	str	r2, [r3, #48]	; 0x30
 804c3fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804c3fc:	f003 0302 	and.w	r3, r3, #2
 804c400:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 804c402:	f44f 6280 	mov.w	r2, #1024	; 0x400
  USARTx_RX_GPIO_CLK_ENABLE();
 804c406:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 804c408:	2302      	movs	r3, #2
 804c40a:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 804c40e:	2507      	movs	r5, #7
 804c410:	2303      	movs	r3, #3
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 804c412:	a903      	add	r1, sp, #12
 804c414:	4620      	mov	r0, r4
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 804c416:	e9cd 3506 	strd	r3, r5, [sp, #24]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 804c41a:	f7f7 f9f1 	bl	8043800 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 804c41e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Alternate = USARTx_RX_AF;

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 804c422:	a903      	add	r1, sp, #12
 804c424:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 804c426:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 804c428:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 804c42a:	f7f7 f9e9 	bl	8043800 <HAL_GPIO_Init>
}
 804c42e:	b009      	add	sp, #36	; 0x24
 804c430:	bd30      	pop	{r4, r5, pc}
 804c432:	bf00      	nop
 804c434:	40023800 	.word	0x40023800
 804c438:	40020400 	.word	0x40020400

0804c43c <HAL_UART_MspInit>:
{
 804c43c:	b5f0      	push	{r4, r5, r6, r7, lr}
 804c43e:	4606      	mov	r6, r0
 804c440:	b08f      	sub	sp, #60	; 0x3c
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 804c442:	2214      	movs	r2, #20
 804c444:	2100      	movs	r1, #0
 804c446:	a809      	add	r0, sp, #36	; 0x24
 804c448:	f000 faf4 	bl	804ca34 <memset>
	if (huart->Instance == USART1) {
 804c44c:	6833      	ldr	r3, [r6, #0]
 804c44e:	4a58      	ldr	r2, [pc, #352]	; (804c5b0 <HAL_UART_MspInit+0x174>)
 804c450:	4293      	cmp	r3, r2
 804c452:	d12c      	bne.n	804c4ae <HAL_UART_MspInit+0x72>
		__HAL_RCC_USART1_CLK_ENABLE();
 804c454:	4b57      	ldr	r3, [pc, #348]	; (804c5b4 <HAL_UART_MspInit+0x178>)
		HAL_GPIO_Init(BLE_TX_GPIO_Port, &GPIO_InitStruct);
 804c456:	4858      	ldr	r0, [pc, #352]	; (804c5b8 <HAL_UART_MspInit+0x17c>)
		__HAL_RCC_USART1_CLK_ENABLE();
 804c458:	2400      	movs	r4, #0
 804c45a:	9401      	str	r4, [sp, #4]
 804c45c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 804c45e:	f042 0210 	orr.w	r2, r2, #16
 804c462:	645a      	str	r2, [r3, #68]	; 0x44
 804c464:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 804c466:	f002 0210 	and.w	r2, r2, #16
 804c46a:	9201      	str	r2, [sp, #4]
 804c46c:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 804c46e:	9402      	str	r4, [sp, #8]
 804c470:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804c472:	f042 0201 	orr.w	r2, r2, #1
 804c476:	631a      	str	r2, [r3, #48]	; 0x30
 804c478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804c47a:	f003 0301 	and.w	r3, r3, #1
 804c47e:	9302      	str	r3, [sp, #8]
 804c480:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804c482:	2502      	movs	r5, #2
 804c484:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 804c488:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
		HAL_GPIO_Init(BLE_TX_GPIO_Port, &GPIO_InitStruct);
 804c48c:	a909      	add	r1, sp, #36	; 0x24
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 804c48e:	2307      	movs	r3, #7
 804c490:	2603      	movs	r6, #3
 804c492:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
		HAL_GPIO_Init(BLE_TX_GPIO_Port, &GPIO_InitStruct);
 804c496:	f7f7 f9b3 	bl	8043800 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(USART1_IRQn, 0, 2);
 804c49a:	2025      	movs	r0, #37	; 0x25
 804c49c:	462a      	mov	r2, r5
 804c49e:	4621      	mov	r1, r4
 804c4a0:	f7f6 fdb4 	bl	804300c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 804c4a4:	2025      	movs	r0, #37	; 0x25
		HAL_NVIC_EnableIRQ(USARTx_IRQn);
 804c4a6:	f7f6 fde5 	bl	8043074 <HAL_NVIC_EnableIRQ>
}
 804c4aa:	b00f      	add	sp, #60	; 0x3c
 804c4ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if (huart->Instance == USART2) {
 804c4ae:	4a43      	ldr	r2, [pc, #268]	; (804c5bc <HAL_UART_MspInit+0x180>)
 804c4b0:	4293      	cmp	r3, r2
 804c4b2:	d128      	bne.n	804c506 <HAL_UART_MspInit+0xca>
		__HAL_RCC_USART2_CLK_ENABLE();
 804c4b4:	4b3f      	ldr	r3, [pc, #252]	; (804c5b4 <HAL_UART_MspInit+0x178>)
 804c4b6:	2400      	movs	r4, #0
 804c4b8:	9403      	str	r4, [sp, #12]
 804c4ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804c4bc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 804c4c0:	641a      	str	r2, [r3, #64]	; 0x40
 804c4c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804c4c4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 804c4c8:	9203      	str	r2, [sp, #12]
 804c4ca:	9a03      	ldr	r2, [sp, #12]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 804c4cc:	9404      	str	r4, [sp, #16]
 804c4ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804c4d0:	f042 0201 	orr.w	r2, r2, #1
 804c4d4:	631a      	str	r2, [r3, #48]	; 0x30
 804c4d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804c4d8:	f003 0301 	and.w	r3, r3, #1
 804c4dc:	9304      	str	r3, [sp, #16]
 804c4de:	9b04      	ldr	r3, [sp, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804c4e0:	210c      	movs	r1, #12
 804c4e2:	2302      	movs	r3, #2
 804c4e4:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 804c4e8:	2003      	movs	r0, #3
 804c4ea:	2307      	movs	r3, #7
 804c4ec:	e9cd 030c 	strd	r0, r3, [sp, #48]	; 0x30
		HAL_GPIO_Init(RFID_TX_GPIO_Port, &GPIO_InitStruct);
 804c4f0:	a909      	add	r1, sp, #36	; 0x24
 804c4f2:	4831      	ldr	r0, [pc, #196]	; (804c5b8 <HAL_UART_MspInit+0x17c>)
 804c4f4:	f7f7 f984 	bl	8043800 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 804c4f8:	2026      	movs	r0, #38	; 0x26
 804c4fa:	4622      	mov	r2, r4
 804c4fc:	4621      	mov	r1, r4
 804c4fe:	f7f6 fd85 	bl	804300c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 804c502:	2026      	movs	r0, #38	; 0x26
 804c504:	e7cf      	b.n	804c4a6 <HAL_UART_MspInit+0x6a>
	else if (huart->Instance == USARTx) {
 804c506:	4a2e      	ldr	r2, [pc, #184]	; (804c5c0 <HAL_UART_MspInit+0x184>)
 804c508:	4293      	cmp	r3, r2
 804c50a:	d1ce      	bne.n	804c4aa <HAL_UART_MspInit+0x6e>
		USARTx_TX_GPIO_CLK_ENABLE();
 804c50c:	4b29      	ldr	r3, [pc, #164]	; (804c5b4 <HAL_UART_MspInit+0x178>)
		hdma_tx.Instance = USARTx_TX_DMA_CHANNEL;
 804c50e:	4d2d      	ldr	r5, [pc, #180]	; (804c5c4 <HAL_UART_MspInit+0x188>)
		USARTx_TX_GPIO_CLK_ENABLE();
 804c510:	2400      	movs	r4, #0
 804c512:	9405      	str	r4, [sp, #20]
 804c514:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804c516:	f042 0202 	orr.w	r2, r2, #2
 804c51a:	631a      	str	r2, [r3, #48]	; 0x30
 804c51c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804c51e:	f002 0202 	and.w	r2, r2, #2
 804c522:	9205      	str	r2, [sp, #20]
 804c524:	9a05      	ldr	r2, [sp, #20]
		USARTx_RX_GPIO_CLK_ENABLE();
 804c526:	9406      	str	r4, [sp, #24]
 804c528:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804c52a:	f042 0202 	orr.w	r2, r2, #2
 804c52e:	631a      	str	r2, [r3, #48]	; 0x30
 804c530:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804c532:	f002 0202 	and.w	r2, r2, #2
 804c536:	9206      	str	r2, [sp, #24]
 804c538:	9a06      	ldr	r2, [sp, #24]
		USARTx_CLK_ENABLE();
 804c53a:	9407      	str	r4, [sp, #28]
 804c53c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804c53e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 804c542:	641a      	str	r2, [r3, #64]	; 0x40
 804c544:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804c546:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 804c54a:	9207      	str	r2, [sp, #28]
 804c54c:	9a07      	ldr	r2, [sp, #28]
		DMAx_CLK_ENABLE();
 804c54e:	9408      	str	r4, [sp, #32]
 804c550:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804c552:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 804c556:	631a      	str	r2, [r3, #48]	; 0x30
 804c558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804c55a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 804c55e:	9308      	str	r3, [sp, #32]
 804c560:	9b08      	ldr	r3, [sp, #32]
		vcom_IoInit();
 804c562:	f7ff ff35 	bl	804c3d0 <vcom_IoInit>
		hdma_tx.Init.Channel = DMA_CHANNEL_7;
 804c566:	4a18      	ldr	r2, [pc, #96]	; (804c5c8 <HAL_UART_MspInit+0x18c>)
		hdma_tx.Init.Priority = DMA_PRIORITY_LOW;
 804c568:	666c      	str	r4, [r5, #100]	; 0x64
		hdma_tx.Init.Channel = DMA_CHANNEL_7;
 804c56a:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
 804c56e:	e9c5 2311 	strd	r2, r3, [r5, #68]	; 0x44
		HAL_DMA_Init(&hdma_tx);
 804c572:	f105 0744 	add.w	r7, r5, #68	; 0x44
		hdma_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 804c576:	2340      	movs	r3, #64	; 0x40
		hdma_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 804c578:	e9c5 3413 	strd	r3, r4, [r5, #76]	; 0x4c
		HAL_DMA_Init(&hdma_tx);
 804c57c:	4638      	mov	r0, r7
		hdma_tx.Init.MemInc = DMA_MINC_ENABLE;
 804c57e:	f44f 6380 	mov.w	r3, #1024	; 0x400
		hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 804c582:	e9c5 3415 	strd	r3, r4, [r5, #84]	; 0x54
		hdma_tx.Init.Mode = DMA_NORMAL;
 804c586:	e9c5 4417 	strd	r4, r4, [r5, #92]	; 0x5c
		HAL_DMA_Init(&hdma_tx);
 804c58a:	f7f6 fdcd 	bl	8043128 <HAL_DMA_Init>
		HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 804c58e:	2201      	movs	r2, #1
 804c590:	4621      	mov	r1, r4
		__HAL_LINKDMA(huart, hdmatx, hdma_tx);
 804c592:	6337      	str	r7, [r6, #48]	; 0x30
		HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 804c594:	200f      	movs	r0, #15
		__HAL_LINKDMA(huart, hdmatx, hdma_tx);
 804c596:	67ee      	str	r6, [r5, #124]	; 0x7c
		HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 804c598:	f7f6 fd38 	bl	804300c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 804c59c:	200f      	movs	r0, #15
 804c59e:	f7f6 fd69 	bl	8043074 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 804c5a2:	2027      	movs	r0, #39	; 0x27
 804c5a4:	2201      	movs	r2, #1
 804c5a6:	4621      	mov	r1, r4
 804c5a8:	f7f6 fd30 	bl	804300c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USARTx_IRQn);
 804c5ac:	2027      	movs	r0, #39	; 0x27
 804c5ae:	e77a      	b.n	804c4a6 <HAL_UART_MspInit+0x6a>
 804c5b0:	40011000 	.word	0x40011000
 804c5b4:	40023800 	.word	0x40023800
 804c5b8:	40020000 	.word	0x40020000
 804c5bc:	40004400 	.word	0x40004400
 804c5c0:	40004800 	.word	0x40004800
 804c5c4:	20009680 	.word	0x20009680
 804c5c8:	40026070 	.word	0x40026070

0804c5cc <vcom_IoDeInit>:

void vcom_IoDeInit(void)
{
 804c5cc:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 804c5ce:	2300      	movs	r3, #0
{
 804c5d0:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 804c5d2:	e9cd 3303 	strd	r3, r3, [sp, #12]

  USARTx_TX_GPIO_CLK_ENABLE();
 804c5d6:	9300      	str	r3, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 804c5d8:	9305      	str	r3, [sp, #20]
  USARTx_TX_GPIO_CLK_ENABLE();
 804c5da:	4b0f      	ldr	r3, [pc, #60]	; (804c618 <vcom_IoDeInit+0x4c>)

  GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStructure.Pull = GPIO_NOPULL;

  GPIO_InitStructure.Pin =  USARTx_TX_PIN ;
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStructure);
 804c5dc:	4d0f      	ldr	r5, [pc, #60]	; (804c61c <vcom_IoDeInit+0x50>)
  USARTx_TX_GPIO_CLK_ENABLE();
 804c5de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804c5e0:	f042 0202 	orr.w	r2, r2, #2
 804c5e4:	631a      	str	r2, [r3, #48]	; 0x30
 804c5e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804c5e8:	f003 0302 	and.w	r3, r3, #2
 804c5ec:	9300      	str	r3, [sp, #0]
  GPIO_InitStructure.Pin =  USARTx_TX_PIN ;
 804c5ee:	ac06      	add	r4, sp, #24
  USARTx_TX_GPIO_CLK_ENABLE();
 804c5f0:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 804c5f2:	2303      	movs	r3, #3
 804c5f4:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Pin =  USARTx_TX_PIN ;
 804c5f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 804c5fa:	f844 3d14 	str.w	r3, [r4, #-20]!
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStructure);
 804c5fe:	4628      	mov	r0, r5
 804c600:	4621      	mov	r1, r4
 804c602:	f7f7 f8fd 	bl	8043800 <HAL_GPIO_Init>

  GPIO_InitStructure.Pin =  USARTx_RX_PIN ;
 804c606:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStructure);
 804c60a:	4621      	mov	r1, r4
 804c60c:	4628      	mov	r0, r5
  GPIO_InitStructure.Pin =  USARTx_RX_PIN ;
 804c60e:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStructure);
 804c610:	f7f7 f8f6 	bl	8043800 <HAL_GPIO_Init>
}
 804c614:	b007      	add	sp, #28
 804c616:	bd30      	pop	{r4, r5, pc}
 804c618:	40023800 	.word	0x40023800
 804c61c:	40020400 	.word	0x40020400

0804c620 <HAL_UART_MspDeInit>:
void HAL_UART_MspDeInit(UART_HandleTypeDef *huart) {
 804c620:	b538      	push	{r3, r4, r5, lr}
	if (huart->Instance == USART1) {
 804c622:	4a1a      	ldr	r2, [pc, #104]	; (804c68c <HAL_UART_MspDeInit+0x6c>)
 804c624:	6803      	ldr	r3, [r0, #0]
 804c626:	4c1a      	ldr	r4, [pc, #104]	; (804c690 <HAL_UART_MspDeInit+0x70>)
 804c628:	4293      	cmp	r3, r2
void HAL_UART_MspDeInit(UART_HandleTypeDef *huart) {
 804c62a:	4605      	mov	r5, r0
	if (huart->Instance == USART1) {
 804c62c:	d10d      	bne.n	804c64a <HAL_UART_MspDeInit+0x2a>
		__HAL_RCC_USART1_CLK_DISABLE();
 804c62e:	6c63      	ldr	r3, [r4, #68]	; 0x44
		HAL_GPIO_DeInit(BLE_TX_GPIO_Port, BLE_TX_Pin | BLE_RX_Pin);
 804c630:	4818      	ldr	r0, [pc, #96]	; (804c694 <HAL_UART_MspDeInit+0x74>)
		__HAL_RCC_USART1_CLK_DISABLE();
 804c632:	f023 0310 	bic.w	r3, r3, #16
 804c636:	6463      	str	r3, [r4, #68]	; 0x44
		HAL_GPIO_DeInit(BLE_TX_GPIO_Port, BLE_TX_Pin | BLE_RX_Pin);
 804c638:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 804c63c:	f7f7 f9c0 	bl	80439c0 <HAL_GPIO_DeInit>
		HAL_NVIC_DisableIRQ(USART1_IRQn);
 804c640:	2025      	movs	r0, #37	; 0x25
}
 804c642:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_NVIC_DisableIRQ(USARTx_DMA_TX_IRQn);
 804c646:	f7f6 bd23 	b.w	8043090 <HAL_NVIC_DisableIRQ>
	} else if (huart->Instance == USART2) {
 804c64a:	4a13      	ldr	r2, [pc, #76]	; (804c698 <HAL_UART_MspDeInit+0x78>)
 804c64c:	4293      	cmp	r3, r2
 804c64e:	d109      	bne.n	804c664 <HAL_UART_MspDeInit+0x44>
		__HAL_RCC_USART2_CLK_DISABLE();
 804c650:	6c23      	ldr	r3, [r4, #64]	; 0x40
		HAL_GPIO_DeInit(RFID_TX_GPIO_Port, GPIO_PIN_2 | GPIO_PIN_3);
 804c652:	4810      	ldr	r0, [pc, #64]	; (804c694 <HAL_UART_MspDeInit+0x74>)
		__HAL_RCC_USART2_CLK_DISABLE();
 804c654:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 804c658:	6423      	str	r3, [r4, #64]	; 0x40
		HAL_GPIO_DeInit(RFID_TX_GPIO_Port, GPIO_PIN_2 | GPIO_PIN_3);
 804c65a:	210c      	movs	r1, #12
 804c65c:	f7f7 f9b0 	bl	80439c0 <HAL_GPIO_DeInit>
		HAL_NVIC_DisableIRQ(USART2_IRQn);
 804c660:	2026      	movs	r0, #38	; 0x26
 804c662:	e7ee      	b.n	804c642 <HAL_UART_MspDeInit+0x22>
		vcom_IoDeInit();
 804c664:	f7ff ffb2 	bl	804c5cc <vcom_IoDeInit>
		USARTx_FORCE_RESET();
 804c668:	6a23      	ldr	r3, [r4, #32]
		if (huart->hdmarx != 0) {
 804c66a:	6b68      	ldr	r0, [r5, #52]	; 0x34
		USARTx_FORCE_RESET();
 804c66c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 804c670:	6223      	str	r3, [r4, #32]
		USARTx_RELEASE_RESET();
 804c672:	6a23      	ldr	r3, [r4, #32]
 804c674:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 804c678:	6223      	str	r3, [r4, #32]
		if (huart->hdmarx != 0) {
 804c67a:	b108      	cbz	r0, 804c680 <HAL_UART_MspDeInit+0x60>
			HAL_DMA_DeInit(huart->hdmarx);
 804c67c:	f7f6 fdd2 	bl	8043224 <HAL_DMA_DeInit>
		if (huart->hdmatx != 0) {
 804c680:	6b28      	ldr	r0, [r5, #48]	; 0x30
 804c682:	b108      	cbz	r0, 804c688 <HAL_UART_MspDeInit+0x68>
			HAL_DMA_DeInit(huart->hdmatx);
 804c684:	f7f6 fdce 	bl	8043224 <HAL_DMA_DeInit>
		HAL_NVIC_DisableIRQ(USARTx_DMA_TX_IRQn);
 804c688:	200f      	movs	r0, #15
 804c68a:	e7da      	b.n	804c642 <HAL_UART_MspDeInit+0x22>
 804c68c:	40011000 	.word	0x40011000
 804c690:	40023800 	.word	0x40023800
 804c694:	40020000 	.word	0x40020000
 804c698:	40004400 	.word	0x40004400

0804c69c <COM_Init>:
  * @brief  Initialize COM module.
  * @param  None.
  * @retval HAL Status.
  */
HAL_StatusTypeDef  COM_Init(void)
{
 804c69c:	b508      	push	{r3, lr}
#if defined(__GNUC__)
  setvbuf(stdout, NULL, _IONBF, 0);
 804c69e:	4b0c      	ldr	r3, [pc, #48]	; (804c6d0 <COM_Init+0x34>)
 804c6a0:	6818      	ldr	r0, [r3, #0]
 804c6a2:	2300      	movs	r3, #0
 804c6a4:	2202      	movs	r2, #2
 804c6a6:	4619      	mov	r1, r3
 804c6a8:	6880      	ldr	r0, [r0, #8]
 804c6aa:	f000 fa47 	bl	804cb3c <setvbuf>
  - One Stop Bit
  - No parity
  - Hardware flow control disabled (RTS and CTS signals)
  - Receive and transmit enabled
  */
  /*UartHandleUpdate*/huart1.Instance = COM_UART;
 804c6ae:	4809      	ldr	r0, [pc, #36]	; (804c6d4 <COM_Init+0x38>)
  /*UartHandleUpdate*/huart1.Init.BaudRate = 9600;
 804c6b0:	4a09      	ldr	r2, [pc, #36]	; (804c6d8 <COM_Init+0x3c>)
 804c6b2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 804c6b6:	e9c0 2300 	strd	r2, r3, [r0]
  /*UartHandleUpdate*/huart1.Init.WordLength = UART_WORDLENGTH_8B;
 804c6ba:	2300      	movs	r3, #0
  /*UartHandleUpdate*/huart1.Init.StopBits = UART_STOPBITS_1;
 804c6bc:	e9c0 3302 	strd	r3, r3, [r0, #8]
  /*UartHandleUpdate*/huart1.Init.Parity = UART_PARITY_NONE;
 804c6c0:	6103      	str	r3, [r0, #16]
  /*UartHandleUpdate*/huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 804c6c2:	6183      	str	r3, [r0, #24]
  /*UartHandleUpdate*/huart1.Init.Mode = UART_MODE_RX | UART_MODE_TX;
 804c6c4:	230c      	movs	r3, #12
 804c6c6:	6143      	str	r3, [r0, #20]

  return HAL_UART_Init(&huart1/*UartHandleUpdate*/);
}
 804c6c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return HAL_UART_Init(&huart1/*UartHandleUpdate*/);
 804c6cc:	f7f9 b9fc 	b.w	8045ac8 <HAL_UART_Init>
 804c6d0:	200010ec 	.word	0x200010ec
 804c6d4:	20009b4c 	.word	0x20009b4c
 804c6d8:	40011000 	.word	0x40011000

0804c6dc <COM_Transmit>:
  * @param uTimeout: Timeout duration.
  * @retval Status of the Transmit operation.
  */
HAL_StatusTypeDef COM_Transmit(uint8_t *Data, uint16_t uDataLength, uint32_t uTimeout)
{ //UartHandleUpdate
  return HAL_UART_Transmit(&huart1, (uint8_t *)Data, uDataLength, uTimeout);
 804c6dc:	4613      	mov	r3, r2
 804c6de:	460a      	mov	r2, r1
 804c6e0:	4601      	mov	r1, r0
 804c6e2:	4801      	ldr	r0, [pc, #4]	; (804c6e8 <COM_Transmit+0xc>)
 804c6e4:	f7f9 ba36 	b.w	8045b54 <HAL_UART_Transmit>
 804c6e8:	20009b4c 	.word	0x20009b4c

0804c6ec <COM_Receive>:
  * @param uTimeout: Timeout duration.
  * @retval Status of the Receive operation.
  */
HAL_StatusTypeDef COM_Receive(uint8_t *Data, uint16_t uDataLength, uint32_t uTimeout)
{
  return HAL_UART_Receive(&huart1, (uint8_t *)Data, uDataLength, uTimeout);
 804c6ec:	4613      	mov	r3, r2
 804c6ee:	460a      	mov	r2, r1
 804c6f0:	4601      	mov	r1, r0
 804c6f2:	4801      	ldr	r0, [pc, #4]	; (804c6f8 <COM_Receive+0xc>)
 804c6f4:	f7f9 ba8a 	b.w	8045c0c <HAL_UART_Receive>
 804c6f8:	20009b4c 	.word	0x20009b4c

0804c6fc <COM_Flush>:
  * @retval HAL_Status.
  */
HAL_StatusTypeDef COM_Flush(void)
{
  /* Clean the input path */
  __HAL_UART_FLUSH_DRREGISTER(&huart1);
 804c6fc:	4b02      	ldr	r3, [pc, #8]	; (804c708 <COM_Flush+0xc>)
 804c6fe:	681b      	ldr	r3, [r3, #0]
  return HAL_OK;
}
 804c700:	2000      	movs	r0, #0
  __HAL_UART_FLUSH_DRREGISTER(&huart1);
 804c702:	685b      	ldr	r3, [r3, #4]
}
 804c704:	4770      	bx	lr
 804c706:	bf00      	nop
 804c708:	20009b4c 	.word	0x20009b4c

0804c70c <Ymodem_Init>:
  * @param None.
  * @retval None.
  */
void Ymodem_Init(void)
{
}
 804c70c:	4770      	bx	lr
	...

0804c710 <Ymodem_Receive>:
  * @param  puSize The uSize of the file.
  * @param  uFlashDestination where the file has to be downloaded.
  * @retval COM_StatusTypeDef result of reception/programming
  */
COM_StatusTypeDef Ymodem_Receive(uint32_t *puSize, uint32_t uFlashDestination, YMODEM_CallbacksTypeDef *appCb)
{
 804c710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804c714:	b08d      	sub	sp, #52	; 0x34
 804c716:	e9cd 0102 	strd	r0, r1, [sp, #8]
    *pData = char1;
 804c71a:	4fa0      	ldr	r7, [pc, #640]	; (804c99c <Ymodem_Receive+0x28c>)
{
 804c71c:	4692      	mov	sl, r2
  uint32_t i;
  uint32_t packet_length;
  uint32_t session_done = 0U;
  uint32_t file_done;
  uint32_t errors = 0U;
  uint32_t session_begin = 0U;
 804c71e:	f04f 0900 	mov.w	r9, #0
 804c722:	2600      	movs	r6, #0
 804c724:	e0db      	b.n	804c8de <Ymodem_Receive+0x1ce>
    switch (char1)
 804c726:	2b61      	cmp	r3, #97	; 0x61
 804c728:	d004      	beq.n	804c734 <Ymodem_Receive+0x24>
 804c72a:	2b72      	cmp	r3, #114	; 0x72
 804c72c:	d076      	beq.n	804c81c <Ymodem_Receive+0x10c>
 804c72e:	2b41      	cmp	r3, #65	; 0x41
 804c730:	f040 8084 	bne.w	804c83c <Ymodem_Receive+0x12c>
        status = HAL_BUSY;
 804c734:	2402      	movs	r4, #2
  uint32_t packet_size = 0U;
 804c736:	2500      	movs	r5, #0
 804c738:	e001      	b.n	804c73e <Ymodem_Receive+0x2e>
        packet_size = PACKET_1K_SIZE;
 804c73a:	f44f 6580 	mov.w	r5, #1024	; 0x400
    *pData = char1;
 804c73e:	f89d 3017 	ldrb.w	r3, [sp, #23]
 804c742:	703b      	strb	r3, [r7, #0]
    if (packet_size >= PACKET_SIZE)
 804c744:	2d7f      	cmp	r5, #127	; 0x7f
 804c746:	d97d      	bls.n	804c844 <Ymodem_Receive+0x134>
      status = COM_Receive(&pData[PACKET_NUMBER_INDEX], packet_size + PACKET_OVERHEAD_SIZE, uTimeout);
 804c748:	fa1f fb85 	uxth.w	fp, r5
 804c74c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 804c750:	f10b 0104 	add.w	r1, fp, #4
 804c754:	4892      	ldr	r0, [pc, #584]	; (804c9a0 <Ymodem_Receive+0x290>)
 804c756:	f7ff ffc9 	bl	804c6ec <COM_Receive>
      if (status == HAL_OK)
 804c75a:	4604      	mov	r4, r0
 804c75c:	2800      	cmp	r0, #0
 804c75e:	d172      	bne.n	804c846 <Ymodem_Receive+0x136>
        if (pData[PACKET_NUMBER_INDEX] != ((pData[PACKET_CNUMBER_INDEX]) ^ NEGATIVE_BYTE))
 804c760:	78fb      	ldrb	r3, [r7, #3]
 804c762:	78ba      	ldrb	r2, [r7, #2]
 804c764:	43db      	mvns	r3, r3
 804c766:	b2db      	uxtb	r3, r3
 804c768:	429a      	cmp	r2, r3
 804c76a:	d16e      	bne.n	804c84a <Ymodem_Receive+0x13a>
          crc = pData[ packet_size + PACKET_DATA_INDEX ] << 8U;
 804c76c:	197b      	adds	r3, r7, r5
    out ^= 0x1021;
 804c76e:	f241 0e21 	movw	lr, #4129	; 0x1021
          crc = pData[ packet_size + PACKET_DATA_INDEX ] << 8U;
 804c772:	791a      	ldrb	r2, [r3, #4]
          crc += pData[ packet_size + PACKET_DATA_INDEX + 1U ];
 804c774:	795b      	ldrb	r3, [r3, #5]
 804c776:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 804c77a:	4a8a      	ldr	r2, [pc, #552]	; (804c9a4 <Ymodem_Receive+0x294>)
 804c77c:	9301      	str	r3, [sp, #4]
 804c77e:	1c51      	adds	r1, r2, #1
 804c780:	f10b 33ff 	add.w	r3, fp, #4294967295
 804c784:	fa11 f383 	uxtah	r3, r1, r3
      crc = crc_update(crc, *pdata & i);
 804c788:	f812 cf01 	ldrb.w	ip, [r2, #1]!
 804c78c:	2008      	movs	r0, #8
    for (i = 0x80; i; i >>= 1)
 804c78e:	2180      	movs	r1, #128	; 0x80
  uint16_t xor = crc_in >> 15;
 804c790:	ea4f 3bd4 	mov.w	fp, r4, lsr #15
  uint16_t out = crc_in << 1;
 804c794:	0064      	lsls	r4, r4, #1
 804c796:	b2a4      	uxth	r4, r4
  if (incr)
 804c798:	ea1c 0f01 	tst.w	ip, r1
    out++;
 804c79c:	bf1c      	itt	ne
 804c79e:	3401      	addne	r4, #1
 804c7a0:	b2a4      	uxthne	r4, r4
  if (xor)
 804c7a2:	f1bb 0f00 	cmp.w	fp, #0
 804c7a6:	d001      	beq.n	804c7ac <Ymodem_Receive+0x9c>
    out ^= 0x1021;
 804c7a8:	ea84 040e 	eor.w	r4, r4, lr
    for (i = 0x80; i; i >>= 1)
 804c7ac:	3801      	subs	r0, #1
 804c7ae:	ea4f 0151 	mov.w	r1, r1, lsr #1
 804c7b2:	d1ed      	bne.n	804c790 <Ymodem_Receive+0x80>
  for (crc = 0; size > 0; size--, pdata++)
 804c7b4:	429a      	cmp	r2, r3
 804c7b6:	d1e7      	bne.n	804c788 <Ymodem_Receive+0x78>
 804c7b8:	2310      	movs	r3, #16
    out ^= 0x1021;
 804c7ba:	f241 0221 	movw	r2, #4129	; 0x1021
  uint16_t xor = crc_in >> 15;
 804c7be:	0be1      	lsrs	r1, r4, #15
  uint16_t out = crc_in << 1;
 804c7c0:	0064      	lsls	r4, r4, #1
 804c7c2:	b2a4      	uxth	r4, r4
  if (xor)
 804c7c4:	b101      	cbz	r1, 804c7c8 <Ymodem_Receive+0xb8>
    out ^= 0x1021;
 804c7c6:	4054      	eors	r4, r2
 804c7c8:	3b01      	subs	r3, #1
  for (i = 0; i < 16; i++)
 804c7ca:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 804c7ce:	d1f6      	bne.n	804c7be <Ymodem_Receive+0xae>
          if (crc16(&pData[PACKET_DATA_INDEX], packet_size) != crc)
 804c7d0:	9b01      	ldr	r3, [sp, #4]
 804c7d2:	42a3      	cmp	r3, r4
 804c7d4:	d139      	bne.n	804c84a <Ymodem_Receive+0x13a>
              *puSize = filesize;
              file_done = 1U;           /* file reception ended */
              break;
            default:
              /* Normal packet */
              if (m_aPacketData[PACKET_NUMBER_INDEX] != (packets_received & 0xff))
 804c7d6:	78ba      	ldrb	r2, [r7, #2]
 804c7d8:	b2f3      	uxtb	r3, r6
 804c7da:	429a      	cmp	r2, r3
 804c7dc:	d17f      	bne.n	804c8de <Ymodem_Receive+0x1ce>
                /* Serial_PutByte(NAK); */
              }
              else
              {
                /* first packet : header (file name + file size) */
                if (packets_received == 0U)
 804c7de:	2e00      	cmp	r6, #0
 804c7e0:	f040 80b8 	bne.w	804c954 <Ymodem_Receive+0x244>
                {
                  /* File name packet */
                  if (m_aPacketData[PACKET_DATA_INDEX] != 0U)
 804c7e4:	793b      	ldrb	r3, [r7, #4]
 804c7e6:	2b00      	cmp	r3, #0
 804c7e8:	f040 809b 	bne.w	804c922 <Ymodem_Receive+0x212>

                  }
                  /* File header packet is empty, end session */
                  else
                  {
                    Serial_PutByte(ACK);
 804c7ec:	2006      	movs	r0, #6
 804c7ee:	f7fe fa9a 	bl	804ad26 <Serial_PutByte>
 804c7f2:	4630      	mov	r0, r6
          break;
      }
    }
  }
  return e_result;
}
 804c7f4:	b00d      	add	sp, #52	; 0x34
 804c7f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((COM_Receive(&char1, 1U, uTimeout) == HAL_OK) && (char1 == CA))
 804c7fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 804c7fe:	2101      	movs	r1, #1
 804c800:	f10d 0017 	add.w	r0, sp, #23
 804c804:	f7ff ff72 	bl	804c6ec <COM_Receive>
 804c808:	4604      	mov	r4, r0
 804c80a:	b9c8      	cbnz	r0, 804c840 <Ymodem_Receive+0x130>
 804c80c:	f89d 3017 	ldrb.w	r3, [sp, #23]
          packet_size = 2U;                               /* specific packet_size to indicate transmission aborted */
 804c810:	2b18      	cmp	r3, #24
 804c812:	bf16      	itet	ne
 804c814:	2500      	movne	r5, #0
 804c816:	2502      	moveq	r5, #2
 804c818:	2401      	movne	r4, #1
 804c81a:	e790      	b.n	804c73e <Ymodem_Receive+0x2e>
        COM_Receive(&char1, 1U, uTimeout);                /* Ymodem startup sequence : rb ==> 0x72 + 0x62 + 0x0D */
 804c81c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 804c820:	2101      	movs	r1, #1
 804c822:	f10d 0017 	add.w	r0, sp, #23
 804c826:	f7ff ff61 	bl	804c6ec <COM_Receive>
        COM_Receive(&char1, 1U, uTimeout);
 804c82a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 804c82e:	2101      	movs	r1, #1
 804c830:	f10d 0017 	add.w	r0, sp, #23
 804c834:	f7ff ff5a 	bl	804c6ec <COM_Receive>
        packet_size = 3U;                                 /* specific packet_size to indicate transmission started */
 804c838:	2503      	movs	r5, #3
 804c83a:	e780      	b.n	804c73e <Ymodem_Receive+0x2e>
        status = HAL_ERROR;
 804c83c:	2401      	movs	r4, #1
 804c83e:	e77a      	b.n	804c736 <Ymodem_Receive+0x26>
          status = HAL_ERROR;
 804c840:	2401      	movs	r4, #1
 804c842:	e77c      	b.n	804c73e <Ymodem_Receive+0x2e>
      switch (ReceivePacket(m_aPacketData, &packet_length, DOWNLOAD_TIMEOUT))
 804c844:	b17c      	cbz	r4, 804c866 <Ymodem_Receive+0x156>
 804c846:	2c02      	cmp	r4, #2
 804c848:	d008      	beq.n	804c85c <Ymodem_Receive+0x14c>
          if (session_begin > 0U)
 804c84a:	f1b9 0f00 	cmp.w	r9, #0
 804c84e:	d001      	beq.n	804c854 <Ymodem_Receive+0x144>
            errors ++;
 804c850:	f108 0801 	add.w	r8, r8, #1
          if (errors > MAX_ERRORS)
 804c854:	f1b8 0f05 	cmp.w	r8, #5
 804c858:	f240 8098 	bls.w	804c98c <Ymodem_Receive+0x27c>
          Serial_PutByte(CA);
 804c85c:	2018      	movs	r0, #24
 804c85e:	f7fe fa62 	bl	804ad26 <Serial_PutByte>
          Serial_PutByte(CA);
 804c862:	2018      	movs	r0, #24
 804c864:	e00d      	b.n	804c882 <Ymodem_Receive+0x172>
          switch (packet_length)
 804c866:	2d02      	cmp	r5, #2
 804c868:	d00a      	beq.n	804c880 <Ymodem_Receive+0x170>
 804c86a:	2d03      	cmp	r5, #3
 804c86c:	d037      	beq.n	804c8de <Ymodem_Receive+0x1ce>
 804c86e:	2d00      	cmp	r5, #0
 804c870:	d1b1      	bne.n	804c7d6 <Ymodem_Receive+0xc6>
              Serial_PutByte(ACK);
 804c872:	2006      	movs	r0, #6
 804c874:	f7fe fa57 	bl	804ad26 <Serial_PutByte>
              *puSize = filesize;
 804c878:	9a02      	ldr	r2, [sp, #8]
 804c87a:	9b06      	ldr	r3, [sp, #24]
 804c87c:	6013      	str	r3, [r2, #0]
 804c87e:	e750      	b.n	804c722 <Ymodem_Receive+0x12>
              Serial_PutByte(ACK);
 804c880:	2006      	movs	r0, #6
          Serial_PutByte(CA);
 804c882:	f7fe fa50 	bl	804ad26 <Serial_PutByte>
          break;
 804c886:	e063      	b.n	804c950 <Ymodem_Receive+0x240>
                      m_aFileName[i++] = *file_ptr++;
 804c888:	5483      	strb	r3, [r0, r2]
 804c88a:	3201      	adds	r2, #1
                    while ((*file_ptr != 0U) && (i < FILE_NAME_LENGTH))
 804c88c:	f811 3b01 	ldrb.w	r3, [r1], #1
 804c890:	b10b      	cbz	r3, 804c896 <Ymodem_Receive+0x186>
 804c892:	2a40      	cmp	r2, #64	; 0x40
 804c894:	d1f8      	bne.n	804c888 <Ymodem_Receive+0x178>
                    m_aFileName[i++] = '\0';
 804c896:	2300      	movs	r3, #0
 804c898:	5483      	strb	r3, [r0, r2]
 804c89a:	a807      	add	r0, sp, #28
                    while ((*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 804c89c:	5cca      	ldrb	r2, [r1, r3]
 804c89e:	2a20      	cmp	r2, #32
 804c8a0:	d001      	beq.n	804c8a6 <Ymodem_Receive+0x196>
 804c8a2:	2b10      	cmp	r3, #16
 804c8a4:	d141      	bne.n	804c92a <Ymodem_Receive+0x21a>
                    file_size[i++] = '\0';
 804c8a6:	aa0c      	add	r2, sp, #48	; 0x30
 804c8a8:	4413      	add	r3, r2
                    Str2Int(file_size, &filesize);
 804c8aa:	a906      	add	r1, sp, #24
                    file_size[i++] = '\0';
 804c8ac:	2200      	movs	r2, #0
 804c8ae:	f803 2c14 	strb.w	r2, [r3, #-20]
                    Str2Int(file_size, &filesize);
 804c8b2:	f7fe f9ea 	bl	804ac8a <Str2Int>
                    if (appCb->Ymodem_HeaderPktRxCpltCallback((uint32_t) filesize) == HAL_OK)
 804c8b6:	f8da 3000 	ldr.w	r3, [sl]
 804c8ba:	9806      	ldr	r0, [sp, #24]
 804c8bc:	4798      	blx	r3
 804c8be:	4604      	mov	r4, r0
 804c8c0:	bbb0      	cbnz	r0, 804c930 <Ymodem_Receive+0x220>
                      Serial_PutByte(ACK);
 804c8c2:	2006      	movs	r0, #6
 804c8c4:	f7fe fa2f 	bl	804ad26 <Serial_PutByte>
                      COM_Flush();
 804c8c8:	f7ff ff18 	bl	804c6fc <COM_Flush>
                      Serial_PutByte(CRC16);
 804c8cc:	2043      	movs	r0, #67	; 0x43
                    Serial_PutByte(ACK);
 804c8ce:	f7fe fa2a 	bl	804ad26 <Serial_PutByte>
 804c8d2:	4620      	mov	r0, r4
                packets_received ++;
 804c8d4:	3601      	adds	r6, #1
                session_begin = 1U;
 804c8d6:	f04f 0901 	mov.w	r9, #1
    while ((file_done == 0U) && (e_result == COM_OK))
 804c8da:	2800      	cmp	r0, #0
 804c8dc:	d18a      	bne.n	804c7f4 <Ymodem_Receive+0xe4>
 804c8de:	f04f 0800 	mov.w	r8, #0
  WRITE_REG(IWDG->KR, IWDG_KEY_RELOAD);
 804c8e2:	4b31      	ldr	r3, [pc, #196]	; (804c9a8 <Ymodem_Receive+0x298>)
 804c8e4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 804c8e8:	601a      	str	r2, [r3, #0]
  status = (HAL_StatusTypeDef)COM_Receive(&char1, 1, uTimeout);
 804c8ea:	2101      	movs	r1, #1
 804c8ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 804c8f0:	f10d 0017 	add.w	r0, sp, #23
 804c8f4:	f7ff fefa 	bl	804c6ec <COM_Receive>
 804c8f8:	4604      	mov	r4, r0
 804c8fa:	4605      	mov	r5, r0
  if (status == HAL_OK)
 804c8fc:	2800      	cmp	r0, #0
 804c8fe:	d1a2      	bne.n	804c846 <Ymodem_Receive+0x136>
    switch (char1)
 804c900:	f89d 3017 	ldrb.w	r3, [sp, #23]
 804c904:	2b18      	cmp	r3, #24
 804c906:	f43f af78 	beq.w	804c7fa <Ymodem_Receive+0xea>
 804c90a:	f63f af0c 	bhi.w	804c726 <Ymodem_Receive+0x16>
 804c90e:	2b02      	cmp	r3, #2
 804c910:	f43f af13 	beq.w	804c73a <Ymodem_Receive+0x2a>
 804c914:	2b04      	cmp	r3, #4
 804c916:	f43f af0e 	beq.w	804c736 <Ymodem_Receive+0x26>
 804c91a:	2b01      	cmp	r3, #1
 804c91c:	d18e      	bne.n	804c83c <Ymodem_Receive+0x12c>
        packet_size = PACKET_SIZE;
 804c91e:	2580      	movs	r5, #128	; 0x80
 804c920:	e70d      	b.n	804c73e <Ymodem_Receive+0x2e>
 804c922:	4632      	mov	r2, r6
                    file_ptr = m_aPacketData + PACKET_DATA_INDEX;
 804c924:	4921      	ldr	r1, [pc, #132]	; (804c9ac <Ymodem_Receive+0x29c>)
 804c926:	4822      	ldr	r0, [pc, #136]	; (804c9b0 <Ymodem_Receive+0x2a0>)
 804c928:	e7b0      	b.n	804c88c <Ymodem_Receive+0x17c>
                      file_size[i++] = *file_ptr++;
 804c92a:	54c2      	strb	r2, [r0, r3]
 804c92c:	3301      	adds	r3, #1
 804c92e:	e7b5      	b.n	804c89c <Ymodem_Receive+0x18c>
                      tmp = CA;
 804c930:	ac0c      	add	r4, sp, #48	; 0x30
 804c932:	2318      	movs	r3, #24
 804c934:	f804 3d1a 	strb.w	r3, [r4, #-26]!
                      COM_Transmit(&tmp, 1U, NAK_TIMEOUT);
 804c938:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 804c93c:	2101      	movs	r1, #1
 804c93e:	4620      	mov	r0, r4
 804c940:	f7ff fecc 	bl	804c6dc <COM_Transmit>
                      COM_Transmit(&tmp, 1U, NAK_TIMEOUT);
 804c944:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 804c948:	2101      	movs	r1, #1
 804c94a:	4620      	mov	r0, r4
 804c94c:	f7ff fec6 	bl	804c6dc <COM_Transmit>
                session_begin = 1U;
 804c950:	2002      	movs	r0, #2
  return e_result;
 804c952:	e74f      	b.n	804c7f4 <Ymodem_Receive+0xe4>
                  if (appCb->Ymodem_DataPktRxCpltCallback((uint8_t *) ramsource, uFlashDestination,
 804c954:	f8da 3004 	ldr.w	r3, [sl, #4]
 804c958:	9903      	ldr	r1, [sp, #12]
 804c95a:	4814      	ldr	r0, [pc, #80]	; (804c9ac <Ymodem_Receive+0x29c>)
 804c95c:	462a      	mov	r2, r5
 804c95e:	4798      	blx	r3
 804c960:	4604      	mov	r4, r0
 804c962:	b908      	cbnz	r0, 804c968 <Ymodem_Receive+0x258>
                    Serial_PutByte(ACK);
 804c964:	2006      	movs	r0, #6
 804c966:	e7b2      	b.n	804c8ce <Ymodem_Receive+0x1be>
                    tmp = CA;
 804c968:	ac0c      	add	r4, sp, #48	; 0x30
 804c96a:	2318      	movs	r3, #24
 804c96c:	f804 3d1a 	strb.w	r3, [r4, #-26]!
                    COM_Transmit(&tmp, 1U, NAK_TIMEOUT);
 804c970:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 804c974:	2101      	movs	r1, #1
 804c976:	4620      	mov	r0, r4
 804c978:	f7ff feb0 	bl	804c6dc <COM_Transmit>
                    COM_Transmit(&tmp, 1U, NAK_TIMEOUT);
 804c97c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 804c980:	2101      	movs	r1, #1
 804c982:	4620      	mov	r0, r4
 804c984:	f7ff feaa 	bl	804c6dc <COM_Transmit>
                    e_result = COM_ERROR;
 804c988:	2001      	movs	r0, #1
 804c98a:	e7a3      	b.n	804c8d4 <Ymodem_Receive+0x1c4>
            Serial_PutByte(CRC16); /* Ask for a packet */
 804c98c:	2043      	movs	r0, #67	; 0x43
 804c98e:	f7fe f9ca 	bl	804ad26 <Serial_PutByte>
            printf("\b.");         /* Replace C char by . on display console */
 804c992:	4808      	ldr	r0, [pc, #32]	; (804c9b4 <Ymodem_Receive+0x2a4>)
 804c994:	f000 f856 	bl	804ca44 <iprintf>
 804c998:	e7a3      	b.n	804c8e2 <Ymodem_Receive+0x1d2>
 804c99a:	bf00      	nop
 804c99c:	20009724 	.word	0x20009724
 804c9a0:	20009726 	.word	0x20009726
 804c9a4:	20009727 	.word	0x20009727
 804c9a8:	40003000 	.word	0x40003000
 804c9ac:	20009728 	.word	0x20009728
 804c9b0:	2000c344 	.word	0x2000c344
 804c9b4:	0804ed9c 	.word	0x0804ed9c

0804c9b8 <__libc_init_array>:
 804c9b8:	b570      	push	{r4, r5, r6, lr}
 804c9ba:	4e0d      	ldr	r6, [pc, #52]	; (804c9f0 <__libc_init_array+0x38>)
 804c9bc:	4c0d      	ldr	r4, [pc, #52]	; (804c9f4 <__libc_init_array+0x3c>)
 804c9be:	1ba4      	subs	r4, r4, r6
 804c9c0:	10a4      	asrs	r4, r4, #2
 804c9c2:	2500      	movs	r5, #0
 804c9c4:	42a5      	cmp	r5, r4
 804c9c6:	d109      	bne.n	804c9dc <__libc_init_array+0x24>
 804c9c8:	4e0b      	ldr	r6, [pc, #44]	; (804c9f8 <__libc_init_array+0x40>)
 804c9ca:	4c0c      	ldr	r4, [pc, #48]	; (804c9fc <__libc_init_array+0x44>)
 804c9cc:	f001 fb98 	bl	804e100 <_init>
 804c9d0:	1ba4      	subs	r4, r4, r6
 804c9d2:	10a4      	asrs	r4, r4, #2
 804c9d4:	2500      	movs	r5, #0
 804c9d6:	42a5      	cmp	r5, r4
 804c9d8:	d105      	bne.n	804c9e6 <__libc_init_array+0x2e>
 804c9da:	bd70      	pop	{r4, r5, r6, pc}
 804c9dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 804c9e0:	4798      	blx	r3
 804c9e2:	3501      	adds	r5, #1
 804c9e4:	e7ee      	b.n	804c9c4 <__libc_init_array+0xc>
 804c9e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 804c9ea:	4798      	blx	r3
 804c9ec:	3501      	adds	r5, #1
 804c9ee:	e7f2      	b.n	804c9d6 <__libc_init_array+0x1e>
 804c9f0:	0804ee40 	.word	0x0804ee40
 804c9f4:	0804ee40 	.word	0x0804ee40
 804c9f8:	0804ee40 	.word	0x0804ee40
 804c9fc:	0804ee44 	.word	0x0804ee44

0804ca00 <memcmp>:
 804ca00:	b530      	push	{r4, r5, lr}
 804ca02:	2400      	movs	r4, #0
 804ca04:	42a2      	cmp	r2, r4
 804ca06:	d101      	bne.n	804ca0c <memcmp+0xc>
 804ca08:	2000      	movs	r0, #0
 804ca0a:	e007      	b.n	804ca1c <memcmp+0x1c>
 804ca0c:	5d03      	ldrb	r3, [r0, r4]
 804ca0e:	3401      	adds	r4, #1
 804ca10:	190d      	adds	r5, r1, r4
 804ca12:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 804ca16:	42ab      	cmp	r3, r5
 804ca18:	d0f4      	beq.n	804ca04 <memcmp+0x4>
 804ca1a:	1b58      	subs	r0, r3, r5
 804ca1c:	bd30      	pop	{r4, r5, pc}

0804ca1e <memcpy>:
 804ca1e:	b510      	push	{r4, lr}
 804ca20:	1e43      	subs	r3, r0, #1
 804ca22:	440a      	add	r2, r1
 804ca24:	4291      	cmp	r1, r2
 804ca26:	d100      	bne.n	804ca2a <memcpy+0xc>
 804ca28:	bd10      	pop	{r4, pc}
 804ca2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 804ca2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 804ca32:	e7f7      	b.n	804ca24 <memcpy+0x6>

0804ca34 <memset>:
 804ca34:	4402      	add	r2, r0
 804ca36:	4603      	mov	r3, r0
 804ca38:	4293      	cmp	r3, r2
 804ca3a:	d100      	bne.n	804ca3e <memset+0xa>
 804ca3c:	4770      	bx	lr
 804ca3e:	f803 1b01 	strb.w	r1, [r3], #1
 804ca42:	e7f9      	b.n	804ca38 <memset+0x4>

0804ca44 <iprintf>:
 804ca44:	b40f      	push	{r0, r1, r2, r3}
 804ca46:	4b0a      	ldr	r3, [pc, #40]	; (804ca70 <iprintf+0x2c>)
 804ca48:	b513      	push	{r0, r1, r4, lr}
 804ca4a:	681c      	ldr	r4, [r3, #0]
 804ca4c:	b124      	cbz	r4, 804ca58 <iprintf+0x14>
 804ca4e:	69a3      	ldr	r3, [r4, #24]
 804ca50:	b913      	cbnz	r3, 804ca58 <iprintf+0x14>
 804ca52:	4620      	mov	r0, r4
 804ca54:	f000 fb0a 	bl	804d06c <__sinit>
 804ca58:	ab05      	add	r3, sp, #20
 804ca5a:	9a04      	ldr	r2, [sp, #16]
 804ca5c:	68a1      	ldr	r1, [r4, #8]
 804ca5e:	9301      	str	r3, [sp, #4]
 804ca60:	4620      	mov	r0, r4
 804ca62:	f000 fe1d 	bl	804d6a0 <_vfiprintf_r>
 804ca66:	b002      	add	sp, #8
 804ca68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 804ca6c:	b004      	add	sp, #16
 804ca6e:	4770      	bx	lr
 804ca70:	200010ec 	.word	0x200010ec

0804ca74 <_puts_r>:
 804ca74:	b570      	push	{r4, r5, r6, lr}
 804ca76:	460e      	mov	r6, r1
 804ca78:	4605      	mov	r5, r0
 804ca7a:	b118      	cbz	r0, 804ca84 <_puts_r+0x10>
 804ca7c:	6983      	ldr	r3, [r0, #24]
 804ca7e:	b90b      	cbnz	r3, 804ca84 <_puts_r+0x10>
 804ca80:	f000 faf4 	bl	804d06c <__sinit>
 804ca84:	69ab      	ldr	r3, [r5, #24]
 804ca86:	68ac      	ldr	r4, [r5, #8]
 804ca88:	b913      	cbnz	r3, 804ca90 <_puts_r+0x1c>
 804ca8a:	4628      	mov	r0, r5
 804ca8c:	f000 faee 	bl	804d06c <__sinit>
 804ca90:	4b23      	ldr	r3, [pc, #140]	; (804cb20 <_puts_r+0xac>)
 804ca92:	429c      	cmp	r4, r3
 804ca94:	d117      	bne.n	804cac6 <_puts_r+0x52>
 804ca96:	686c      	ldr	r4, [r5, #4]
 804ca98:	89a3      	ldrh	r3, [r4, #12]
 804ca9a:	071b      	lsls	r3, r3, #28
 804ca9c:	d51d      	bpl.n	804cada <_puts_r+0x66>
 804ca9e:	6923      	ldr	r3, [r4, #16]
 804caa0:	b1db      	cbz	r3, 804cada <_puts_r+0x66>
 804caa2:	3e01      	subs	r6, #1
 804caa4:	68a3      	ldr	r3, [r4, #8]
 804caa6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 804caaa:	3b01      	subs	r3, #1
 804caac:	60a3      	str	r3, [r4, #8]
 804caae:	b9e9      	cbnz	r1, 804caec <_puts_r+0x78>
 804cab0:	2b00      	cmp	r3, #0
 804cab2:	da2e      	bge.n	804cb12 <_puts_r+0x9e>
 804cab4:	4622      	mov	r2, r4
 804cab6:	210a      	movs	r1, #10
 804cab8:	4628      	mov	r0, r5
 804caba:	f000 f927 	bl	804cd0c <__swbuf_r>
 804cabe:	3001      	adds	r0, #1
 804cac0:	d011      	beq.n	804cae6 <_puts_r+0x72>
 804cac2:	200a      	movs	r0, #10
 804cac4:	e011      	b.n	804caea <_puts_r+0x76>
 804cac6:	4b17      	ldr	r3, [pc, #92]	; (804cb24 <_puts_r+0xb0>)
 804cac8:	429c      	cmp	r4, r3
 804caca:	d101      	bne.n	804cad0 <_puts_r+0x5c>
 804cacc:	68ac      	ldr	r4, [r5, #8]
 804cace:	e7e3      	b.n	804ca98 <_puts_r+0x24>
 804cad0:	4b15      	ldr	r3, [pc, #84]	; (804cb28 <_puts_r+0xb4>)
 804cad2:	429c      	cmp	r4, r3
 804cad4:	bf08      	it	eq
 804cad6:	68ec      	ldreq	r4, [r5, #12]
 804cad8:	e7de      	b.n	804ca98 <_puts_r+0x24>
 804cada:	4621      	mov	r1, r4
 804cadc:	4628      	mov	r0, r5
 804cade:	f000 f967 	bl	804cdb0 <__swsetup_r>
 804cae2:	2800      	cmp	r0, #0
 804cae4:	d0dd      	beq.n	804caa2 <_puts_r+0x2e>
 804cae6:	f04f 30ff 	mov.w	r0, #4294967295
 804caea:	bd70      	pop	{r4, r5, r6, pc}
 804caec:	2b00      	cmp	r3, #0
 804caee:	da04      	bge.n	804cafa <_puts_r+0x86>
 804caf0:	69a2      	ldr	r2, [r4, #24]
 804caf2:	429a      	cmp	r2, r3
 804caf4:	dc06      	bgt.n	804cb04 <_puts_r+0x90>
 804caf6:	290a      	cmp	r1, #10
 804caf8:	d004      	beq.n	804cb04 <_puts_r+0x90>
 804cafa:	6823      	ldr	r3, [r4, #0]
 804cafc:	1c5a      	adds	r2, r3, #1
 804cafe:	6022      	str	r2, [r4, #0]
 804cb00:	7019      	strb	r1, [r3, #0]
 804cb02:	e7cf      	b.n	804caa4 <_puts_r+0x30>
 804cb04:	4622      	mov	r2, r4
 804cb06:	4628      	mov	r0, r5
 804cb08:	f000 f900 	bl	804cd0c <__swbuf_r>
 804cb0c:	3001      	adds	r0, #1
 804cb0e:	d1c9      	bne.n	804caa4 <_puts_r+0x30>
 804cb10:	e7e9      	b.n	804cae6 <_puts_r+0x72>
 804cb12:	6823      	ldr	r3, [r4, #0]
 804cb14:	200a      	movs	r0, #10
 804cb16:	1c5a      	adds	r2, r3, #1
 804cb18:	6022      	str	r2, [r4, #0]
 804cb1a:	7018      	strb	r0, [r3, #0]
 804cb1c:	e7e5      	b.n	804caea <_puts_r+0x76>
 804cb1e:	bf00      	nop
 804cb20:	0804edc4 	.word	0x0804edc4
 804cb24:	0804ede4 	.word	0x0804ede4
 804cb28:	0804eda4 	.word	0x0804eda4

0804cb2c <puts>:
 804cb2c:	4b02      	ldr	r3, [pc, #8]	; (804cb38 <puts+0xc>)
 804cb2e:	4601      	mov	r1, r0
 804cb30:	6818      	ldr	r0, [r3, #0]
 804cb32:	f7ff bf9f 	b.w	804ca74 <_puts_r>
 804cb36:	bf00      	nop
 804cb38:	200010ec 	.word	0x200010ec

0804cb3c <setvbuf>:
 804cb3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 804cb40:	461d      	mov	r5, r3
 804cb42:	4b51      	ldr	r3, [pc, #324]	; (804cc88 <setvbuf+0x14c>)
 804cb44:	681e      	ldr	r6, [r3, #0]
 804cb46:	4604      	mov	r4, r0
 804cb48:	460f      	mov	r7, r1
 804cb4a:	4690      	mov	r8, r2
 804cb4c:	b126      	cbz	r6, 804cb58 <setvbuf+0x1c>
 804cb4e:	69b3      	ldr	r3, [r6, #24]
 804cb50:	b913      	cbnz	r3, 804cb58 <setvbuf+0x1c>
 804cb52:	4630      	mov	r0, r6
 804cb54:	f000 fa8a 	bl	804d06c <__sinit>
 804cb58:	4b4c      	ldr	r3, [pc, #304]	; (804cc8c <setvbuf+0x150>)
 804cb5a:	429c      	cmp	r4, r3
 804cb5c:	d152      	bne.n	804cc04 <setvbuf+0xc8>
 804cb5e:	6874      	ldr	r4, [r6, #4]
 804cb60:	f1b8 0f02 	cmp.w	r8, #2
 804cb64:	d006      	beq.n	804cb74 <setvbuf+0x38>
 804cb66:	f1b8 0f01 	cmp.w	r8, #1
 804cb6a:	f200 8089 	bhi.w	804cc80 <setvbuf+0x144>
 804cb6e:	2d00      	cmp	r5, #0
 804cb70:	f2c0 8086 	blt.w	804cc80 <setvbuf+0x144>
 804cb74:	4621      	mov	r1, r4
 804cb76:	4630      	mov	r0, r6
 804cb78:	f000 fa0e 	bl	804cf98 <_fflush_r>
 804cb7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 804cb7e:	b141      	cbz	r1, 804cb92 <setvbuf+0x56>
 804cb80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 804cb84:	4299      	cmp	r1, r3
 804cb86:	d002      	beq.n	804cb8e <setvbuf+0x52>
 804cb88:	4630      	mov	r0, r6
 804cb8a:	f000 fb65 	bl	804d258 <_free_r>
 804cb8e:	2300      	movs	r3, #0
 804cb90:	6363      	str	r3, [r4, #52]	; 0x34
 804cb92:	2300      	movs	r3, #0
 804cb94:	61a3      	str	r3, [r4, #24]
 804cb96:	6063      	str	r3, [r4, #4]
 804cb98:	89a3      	ldrh	r3, [r4, #12]
 804cb9a:	061b      	lsls	r3, r3, #24
 804cb9c:	d503      	bpl.n	804cba6 <setvbuf+0x6a>
 804cb9e:	6921      	ldr	r1, [r4, #16]
 804cba0:	4630      	mov	r0, r6
 804cba2:	f000 fb59 	bl	804d258 <_free_r>
 804cba6:	89a3      	ldrh	r3, [r4, #12]
 804cba8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 804cbac:	f023 0303 	bic.w	r3, r3, #3
 804cbb0:	f1b8 0f02 	cmp.w	r8, #2
 804cbb4:	81a3      	strh	r3, [r4, #12]
 804cbb6:	d05d      	beq.n	804cc74 <setvbuf+0x138>
 804cbb8:	ab01      	add	r3, sp, #4
 804cbba:	466a      	mov	r2, sp
 804cbbc:	4621      	mov	r1, r4
 804cbbe:	4630      	mov	r0, r6
 804cbc0:	f000 fade 	bl	804d180 <__swhatbuf_r>
 804cbc4:	89a3      	ldrh	r3, [r4, #12]
 804cbc6:	4318      	orrs	r0, r3
 804cbc8:	81a0      	strh	r0, [r4, #12]
 804cbca:	bb2d      	cbnz	r5, 804cc18 <setvbuf+0xdc>
 804cbcc:	9d00      	ldr	r5, [sp, #0]
 804cbce:	4628      	mov	r0, r5
 804cbd0:	f000 fb3a 	bl	804d248 <malloc>
 804cbd4:	4607      	mov	r7, r0
 804cbd6:	2800      	cmp	r0, #0
 804cbd8:	d14e      	bne.n	804cc78 <setvbuf+0x13c>
 804cbda:	f8dd 9000 	ldr.w	r9, [sp]
 804cbde:	45a9      	cmp	r9, r5
 804cbe0:	d13c      	bne.n	804cc5c <setvbuf+0x120>
 804cbe2:	f04f 30ff 	mov.w	r0, #4294967295
 804cbe6:	89a3      	ldrh	r3, [r4, #12]
 804cbe8:	f043 0302 	orr.w	r3, r3, #2
 804cbec:	81a3      	strh	r3, [r4, #12]
 804cbee:	2300      	movs	r3, #0
 804cbf0:	60a3      	str	r3, [r4, #8]
 804cbf2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 804cbf6:	6023      	str	r3, [r4, #0]
 804cbf8:	6123      	str	r3, [r4, #16]
 804cbfa:	2301      	movs	r3, #1
 804cbfc:	6163      	str	r3, [r4, #20]
 804cbfe:	b003      	add	sp, #12
 804cc00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 804cc04:	4b22      	ldr	r3, [pc, #136]	; (804cc90 <setvbuf+0x154>)
 804cc06:	429c      	cmp	r4, r3
 804cc08:	d101      	bne.n	804cc0e <setvbuf+0xd2>
 804cc0a:	68b4      	ldr	r4, [r6, #8]
 804cc0c:	e7a8      	b.n	804cb60 <setvbuf+0x24>
 804cc0e:	4b21      	ldr	r3, [pc, #132]	; (804cc94 <setvbuf+0x158>)
 804cc10:	429c      	cmp	r4, r3
 804cc12:	bf08      	it	eq
 804cc14:	68f4      	ldreq	r4, [r6, #12]
 804cc16:	e7a3      	b.n	804cb60 <setvbuf+0x24>
 804cc18:	2f00      	cmp	r7, #0
 804cc1a:	d0d8      	beq.n	804cbce <setvbuf+0x92>
 804cc1c:	69b3      	ldr	r3, [r6, #24]
 804cc1e:	b913      	cbnz	r3, 804cc26 <setvbuf+0xea>
 804cc20:	4630      	mov	r0, r6
 804cc22:	f000 fa23 	bl	804d06c <__sinit>
 804cc26:	f1b8 0f01 	cmp.w	r8, #1
 804cc2a:	bf08      	it	eq
 804cc2c:	89a3      	ldrheq	r3, [r4, #12]
 804cc2e:	6027      	str	r7, [r4, #0]
 804cc30:	bf04      	itt	eq
 804cc32:	f043 0301 	orreq.w	r3, r3, #1
 804cc36:	81a3      	strheq	r3, [r4, #12]
 804cc38:	89a3      	ldrh	r3, [r4, #12]
 804cc3a:	f013 0008 	ands.w	r0, r3, #8
 804cc3e:	e9c4 7504 	strd	r7, r5, [r4, #16]
 804cc42:	d01b      	beq.n	804cc7c <setvbuf+0x140>
 804cc44:	f013 0001 	ands.w	r0, r3, #1
 804cc48:	bf18      	it	ne
 804cc4a:	426d      	negne	r5, r5
 804cc4c:	f04f 0300 	mov.w	r3, #0
 804cc50:	bf1d      	ittte	ne
 804cc52:	60a3      	strne	r3, [r4, #8]
 804cc54:	61a5      	strne	r5, [r4, #24]
 804cc56:	4618      	movne	r0, r3
 804cc58:	60a5      	streq	r5, [r4, #8]
 804cc5a:	e7d0      	b.n	804cbfe <setvbuf+0xc2>
 804cc5c:	4648      	mov	r0, r9
 804cc5e:	f000 faf3 	bl	804d248 <malloc>
 804cc62:	4607      	mov	r7, r0
 804cc64:	2800      	cmp	r0, #0
 804cc66:	d0bc      	beq.n	804cbe2 <setvbuf+0xa6>
 804cc68:	89a3      	ldrh	r3, [r4, #12]
 804cc6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 804cc6e:	81a3      	strh	r3, [r4, #12]
 804cc70:	464d      	mov	r5, r9
 804cc72:	e7d3      	b.n	804cc1c <setvbuf+0xe0>
 804cc74:	2000      	movs	r0, #0
 804cc76:	e7b6      	b.n	804cbe6 <setvbuf+0xaa>
 804cc78:	46a9      	mov	r9, r5
 804cc7a:	e7f5      	b.n	804cc68 <setvbuf+0x12c>
 804cc7c:	60a0      	str	r0, [r4, #8]
 804cc7e:	e7be      	b.n	804cbfe <setvbuf+0xc2>
 804cc80:	f04f 30ff 	mov.w	r0, #4294967295
 804cc84:	e7bb      	b.n	804cbfe <setvbuf+0xc2>
 804cc86:	bf00      	nop
 804cc88:	200010ec 	.word	0x200010ec
 804cc8c:	0804edc4 	.word	0x0804edc4
 804cc90:	0804ede4 	.word	0x0804ede4
 804cc94:	0804eda4 	.word	0x0804eda4

0804cc98 <_vsniprintf_r>:
 804cc98:	b530      	push	{r4, r5, lr}
 804cc9a:	1e14      	subs	r4, r2, #0
 804cc9c:	4605      	mov	r5, r0
 804cc9e:	b09b      	sub	sp, #108	; 0x6c
 804cca0:	4618      	mov	r0, r3
 804cca2:	da05      	bge.n	804ccb0 <_vsniprintf_r+0x18>
 804cca4:	238b      	movs	r3, #139	; 0x8b
 804cca6:	602b      	str	r3, [r5, #0]
 804cca8:	f04f 30ff 	mov.w	r0, #4294967295
 804ccac:	b01b      	add	sp, #108	; 0x6c
 804ccae:	bd30      	pop	{r4, r5, pc}
 804ccb0:	f44f 7302 	mov.w	r3, #520	; 0x208
 804ccb4:	f8ad 300c 	strh.w	r3, [sp, #12]
 804ccb8:	bf14      	ite	ne
 804ccba:	f104 33ff 	addne.w	r3, r4, #4294967295
 804ccbe:	4623      	moveq	r3, r4
 804ccc0:	9302      	str	r3, [sp, #8]
 804ccc2:	9305      	str	r3, [sp, #20]
 804ccc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 804ccc8:	9100      	str	r1, [sp, #0]
 804ccca:	9104      	str	r1, [sp, #16]
 804cccc:	f8ad 300e 	strh.w	r3, [sp, #14]
 804ccd0:	4602      	mov	r2, r0
 804ccd2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 804ccd4:	4669      	mov	r1, sp
 804ccd6:	4628      	mov	r0, r5
 804ccd8:	f000 fbc0 	bl	804d45c <_svfiprintf_r>
 804ccdc:	1c43      	adds	r3, r0, #1
 804ccde:	bfbc      	itt	lt
 804cce0:	238b      	movlt	r3, #139	; 0x8b
 804cce2:	602b      	strlt	r3, [r5, #0]
 804cce4:	2c00      	cmp	r4, #0
 804cce6:	d0e1      	beq.n	804ccac <_vsniprintf_r+0x14>
 804cce8:	9b00      	ldr	r3, [sp, #0]
 804ccea:	2200      	movs	r2, #0
 804ccec:	701a      	strb	r2, [r3, #0]
 804ccee:	e7dd      	b.n	804ccac <_vsniprintf_r+0x14>

0804ccf0 <vsniprintf>:
 804ccf0:	b507      	push	{r0, r1, r2, lr}
 804ccf2:	9300      	str	r3, [sp, #0]
 804ccf4:	4613      	mov	r3, r2
 804ccf6:	460a      	mov	r2, r1
 804ccf8:	4601      	mov	r1, r0
 804ccfa:	4803      	ldr	r0, [pc, #12]	; (804cd08 <vsniprintf+0x18>)
 804ccfc:	6800      	ldr	r0, [r0, #0]
 804ccfe:	f7ff ffcb 	bl	804cc98 <_vsniprintf_r>
 804cd02:	b003      	add	sp, #12
 804cd04:	f85d fb04 	ldr.w	pc, [sp], #4
 804cd08:	200010ec 	.word	0x200010ec

0804cd0c <__swbuf_r>:
 804cd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804cd0e:	460e      	mov	r6, r1
 804cd10:	4614      	mov	r4, r2
 804cd12:	4605      	mov	r5, r0
 804cd14:	b118      	cbz	r0, 804cd1e <__swbuf_r+0x12>
 804cd16:	6983      	ldr	r3, [r0, #24]
 804cd18:	b90b      	cbnz	r3, 804cd1e <__swbuf_r+0x12>
 804cd1a:	f000 f9a7 	bl	804d06c <__sinit>
 804cd1e:	4b21      	ldr	r3, [pc, #132]	; (804cda4 <__swbuf_r+0x98>)
 804cd20:	429c      	cmp	r4, r3
 804cd22:	d12a      	bne.n	804cd7a <__swbuf_r+0x6e>
 804cd24:	686c      	ldr	r4, [r5, #4]
 804cd26:	69a3      	ldr	r3, [r4, #24]
 804cd28:	60a3      	str	r3, [r4, #8]
 804cd2a:	89a3      	ldrh	r3, [r4, #12]
 804cd2c:	071a      	lsls	r2, r3, #28
 804cd2e:	d52e      	bpl.n	804cd8e <__swbuf_r+0x82>
 804cd30:	6923      	ldr	r3, [r4, #16]
 804cd32:	b363      	cbz	r3, 804cd8e <__swbuf_r+0x82>
 804cd34:	6923      	ldr	r3, [r4, #16]
 804cd36:	6820      	ldr	r0, [r4, #0]
 804cd38:	1ac0      	subs	r0, r0, r3
 804cd3a:	6963      	ldr	r3, [r4, #20]
 804cd3c:	b2f6      	uxtb	r6, r6
 804cd3e:	4283      	cmp	r3, r0
 804cd40:	4637      	mov	r7, r6
 804cd42:	dc04      	bgt.n	804cd4e <__swbuf_r+0x42>
 804cd44:	4621      	mov	r1, r4
 804cd46:	4628      	mov	r0, r5
 804cd48:	f000 f926 	bl	804cf98 <_fflush_r>
 804cd4c:	bb28      	cbnz	r0, 804cd9a <__swbuf_r+0x8e>
 804cd4e:	68a3      	ldr	r3, [r4, #8]
 804cd50:	3b01      	subs	r3, #1
 804cd52:	60a3      	str	r3, [r4, #8]
 804cd54:	6823      	ldr	r3, [r4, #0]
 804cd56:	1c5a      	adds	r2, r3, #1
 804cd58:	6022      	str	r2, [r4, #0]
 804cd5a:	701e      	strb	r6, [r3, #0]
 804cd5c:	6963      	ldr	r3, [r4, #20]
 804cd5e:	3001      	adds	r0, #1
 804cd60:	4283      	cmp	r3, r0
 804cd62:	d004      	beq.n	804cd6e <__swbuf_r+0x62>
 804cd64:	89a3      	ldrh	r3, [r4, #12]
 804cd66:	07db      	lsls	r3, r3, #31
 804cd68:	d519      	bpl.n	804cd9e <__swbuf_r+0x92>
 804cd6a:	2e0a      	cmp	r6, #10
 804cd6c:	d117      	bne.n	804cd9e <__swbuf_r+0x92>
 804cd6e:	4621      	mov	r1, r4
 804cd70:	4628      	mov	r0, r5
 804cd72:	f000 f911 	bl	804cf98 <_fflush_r>
 804cd76:	b190      	cbz	r0, 804cd9e <__swbuf_r+0x92>
 804cd78:	e00f      	b.n	804cd9a <__swbuf_r+0x8e>
 804cd7a:	4b0b      	ldr	r3, [pc, #44]	; (804cda8 <__swbuf_r+0x9c>)
 804cd7c:	429c      	cmp	r4, r3
 804cd7e:	d101      	bne.n	804cd84 <__swbuf_r+0x78>
 804cd80:	68ac      	ldr	r4, [r5, #8]
 804cd82:	e7d0      	b.n	804cd26 <__swbuf_r+0x1a>
 804cd84:	4b09      	ldr	r3, [pc, #36]	; (804cdac <__swbuf_r+0xa0>)
 804cd86:	429c      	cmp	r4, r3
 804cd88:	bf08      	it	eq
 804cd8a:	68ec      	ldreq	r4, [r5, #12]
 804cd8c:	e7cb      	b.n	804cd26 <__swbuf_r+0x1a>
 804cd8e:	4621      	mov	r1, r4
 804cd90:	4628      	mov	r0, r5
 804cd92:	f000 f80d 	bl	804cdb0 <__swsetup_r>
 804cd96:	2800      	cmp	r0, #0
 804cd98:	d0cc      	beq.n	804cd34 <__swbuf_r+0x28>
 804cd9a:	f04f 37ff 	mov.w	r7, #4294967295
 804cd9e:	4638      	mov	r0, r7
 804cda0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804cda2:	bf00      	nop
 804cda4:	0804edc4 	.word	0x0804edc4
 804cda8:	0804ede4 	.word	0x0804ede4
 804cdac:	0804eda4 	.word	0x0804eda4

0804cdb0 <__swsetup_r>:
 804cdb0:	4b32      	ldr	r3, [pc, #200]	; (804ce7c <__swsetup_r+0xcc>)
 804cdb2:	b570      	push	{r4, r5, r6, lr}
 804cdb4:	681d      	ldr	r5, [r3, #0]
 804cdb6:	4606      	mov	r6, r0
 804cdb8:	460c      	mov	r4, r1
 804cdba:	b125      	cbz	r5, 804cdc6 <__swsetup_r+0x16>
 804cdbc:	69ab      	ldr	r3, [r5, #24]
 804cdbe:	b913      	cbnz	r3, 804cdc6 <__swsetup_r+0x16>
 804cdc0:	4628      	mov	r0, r5
 804cdc2:	f000 f953 	bl	804d06c <__sinit>
 804cdc6:	4b2e      	ldr	r3, [pc, #184]	; (804ce80 <__swsetup_r+0xd0>)
 804cdc8:	429c      	cmp	r4, r3
 804cdca:	d10f      	bne.n	804cdec <__swsetup_r+0x3c>
 804cdcc:	686c      	ldr	r4, [r5, #4]
 804cdce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804cdd2:	b29a      	uxth	r2, r3
 804cdd4:	0715      	lsls	r5, r2, #28
 804cdd6:	d42c      	bmi.n	804ce32 <__swsetup_r+0x82>
 804cdd8:	06d0      	lsls	r0, r2, #27
 804cdda:	d411      	bmi.n	804ce00 <__swsetup_r+0x50>
 804cddc:	2209      	movs	r2, #9
 804cdde:	6032      	str	r2, [r6, #0]
 804cde0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804cde4:	81a3      	strh	r3, [r4, #12]
 804cde6:	f04f 30ff 	mov.w	r0, #4294967295
 804cdea:	e03e      	b.n	804ce6a <__swsetup_r+0xba>
 804cdec:	4b25      	ldr	r3, [pc, #148]	; (804ce84 <__swsetup_r+0xd4>)
 804cdee:	429c      	cmp	r4, r3
 804cdf0:	d101      	bne.n	804cdf6 <__swsetup_r+0x46>
 804cdf2:	68ac      	ldr	r4, [r5, #8]
 804cdf4:	e7eb      	b.n	804cdce <__swsetup_r+0x1e>
 804cdf6:	4b24      	ldr	r3, [pc, #144]	; (804ce88 <__swsetup_r+0xd8>)
 804cdf8:	429c      	cmp	r4, r3
 804cdfa:	bf08      	it	eq
 804cdfc:	68ec      	ldreq	r4, [r5, #12]
 804cdfe:	e7e6      	b.n	804cdce <__swsetup_r+0x1e>
 804ce00:	0751      	lsls	r1, r2, #29
 804ce02:	d512      	bpl.n	804ce2a <__swsetup_r+0x7a>
 804ce04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 804ce06:	b141      	cbz	r1, 804ce1a <__swsetup_r+0x6a>
 804ce08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 804ce0c:	4299      	cmp	r1, r3
 804ce0e:	d002      	beq.n	804ce16 <__swsetup_r+0x66>
 804ce10:	4630      	mov	r0, r6
 804ce12:	f000 fa21 	bl	804d258 <_free_r>
 804ce16:	2300      	movs	r3, #0
 804ce18:	6363      	str	r3, [r4, #52]	; 0x34
 804ce1a:	89a3      	ldrh	r3, [r4, #12]
 804ce1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 804ce20:	81a3      	strh	r3, [r4, #12]
 804ce22:	2300      	movs	r3, #0
 804ce24:	6063      	str	r3, [r4, #4]
 804ce26:	6923      	ldr	r3, [r4, #16]
 804ce28:	6023      	str	r3, [r4, #0]
 804ce2a:	89a3      	ldrh	r3, [r4, #12]
 804ce2c:	f043 0308 	orr.w	r3, r3, #8
 804ce30:	81a3      	strh	r3, [r4, #12]
 804ce32:	6923      	ldr	r3, [r4, #16]
 804ce34:	b94b      	cbnz	r3, 804ce4a <__swsetup_r+0x9a>
 804ce36:	89a3      	ldrh	r3, [r4, #12]
 804ce38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 804ce3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804ce40:	d003      	beq.n	804ce4a <__swsetup_r+0x9a>
 804ce42:	4621      	mov	r1, r4
 804ce44:	4630      	mov	r0, r6
 804ce46:	f000 f9bf 	bl	804d1c8 <__smakebuf_r>
 804ce4a:	89a2      	ldrh	r2, [r4, #12]
 804ce4c:	f012 0301 	ands.w	r3, r2, #1
 804ce50:	d00c      	beq.n	804ce6c <__swsetup_r+0xbc>
 804ce52:	2300      	movs	r3, #0
 804ce54:	60a3      	str	r3, [r4, #8]
 804ce56:	6963      	ldr	r3, [r4, #20]
 804ce58:	425b      	negs	r3, r3
 804ce5a:	61a3      	str	r3, [r4, #24]
 804ce5c:	6923      	ldr	r3, [r4, #16]
 804ce5e:	b953      	cbnz	r3, 804ce76 <__swsetup_r+0xc6>
 804ce60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804ce64:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 804ce68:	d1ba      	bne.n	804cde0 <__swsetup_r+0x30>
 804ce6a:	bd70      	pop	{r4, r5, r6, pc}
 804ce6c:	0792      	lsls	r2, r2, #30
 804ce6e:	bf58      	it	pl
 804ce70:	6963      	ldrpl	r3, [r4, #20]
 804ce72:	60a3      	str	r3, [r4, #8]
 804ce74:	e7f2      	b.n	804ce5c <__swsetup_r+0xac>
 804ce76:	2000      	movs	r0, #0
 804ce78:	e7f7      	b.n	804ce6a <__swsetup_r+0xba>
 804ce7a:	bf00      	nop
 804ce7c:	200010ec 	.word	0x200010ec
 804ce80:	0804edc4 	.word	0x0804edc4
 804ce84:	0804ede4 	.word	0x0804ede4
 804ce88:	0804eda4 	.word	0x0804eda4

0804ce8c <__sflush_r>:
 804ce8c:	898a      	ldrh	r2, [r1, #12]
 804ce8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804ce92:	4605      	mov	r5, r0
 804ce94:	0710      	lsls	r0, r2, #28
 804ce96:	460c      	mov	r4, r1
 804ce98:	d458      	bmi.n	804cf4c <__sflush_r+0xc0>
 804ce9a:	684b      	ldr	r3, [r1, #4]
 804ce9c:	2b00      	cmp	r3, #0
 804ce9e:	dc05      	bgt.n	804ceac <__sflush_r+0x20>
 804cea0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 804cea2:	2b00      	cmp	r3, #0
 804cea4:	dc02      	bgt.n	804ceac <__sflush_r+0x20>
 804cea6:	2000      	movs	r0, #0
 804cea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804ceac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 804ceae:	2e00      	cmp	r6, #0
 804ceb0:	d0f9      	beq.n	804cea6 <__sflush_r+0x1a>
 804ceb2:	2300      	movs	r3, #0
 804ceb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 804ceb8:	682f      	ldr	r7, [r5, #0]
 804ceba:	6a21      	ldr	r1, [r4, #32]
 804cebc:	602b      	str	r3, [r5, #0]
 804cebe:	d032      	beq.n	804cf26 <__sflush_r+0x9a>
 804cec0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 804cec2:	89a3      	ldrh	r3, [r4, #12]
 804cec4:	075a      	lsls	r2, r3, #29
 804cec6:	d505      	bpl.n	804ced4 <__sflush_r+0x48>
 804cec8:	6863      	ldr	r3, [r4, #4]
 804ceca:	1ac0      	subs	r0, r0, r3
 804cecc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 804cece:	b10b      	cbz	r3, 804ced4 <__sflush_r+0x48>
 804ced0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 804ced2:	1ac0      	subs	r0, r0, r3
 804ced4:	2300      	movs	r3, #0
 804ced6:	4602      	mov	r2, r0
 804ced8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 804ceda:	6a21      	ldr	r1, [r4, #32]
 804cedc:	4628      	mov	r0, r5
 804cede:	47b0      	blx	r6
 804cee0:	1c43      	adds	r3, r0, #1
 804cee2:	89a3      	ldrh	r3, [r4, #12]
 804cee4:	d106      	bne.n	804cef4 <__sflush_r+0x68>
 804cee6:	6829      	ldr	r1, [r5, #0]
 804cee8:	291d      	cmp	r1, #29
 804ceea:	d848      	bhi.n	804cf7e <__sflush_r+0xf2>
 804ceec:	4a29      	ldr	r2, [pc, #164]	; (804cf94 <__sflush_r+0x108>)
 804ceee:	40ca      	lsrs	r2, r1
 804cef0:	07d6      	lsls	r6, r2, #31
 804cef2:	d544      	bpl.n	804cf7e <__sflush_r+0xf2>
 804cef4:	2200      	movs	r2, #0
 804cef6:	6062      	str	r2, [r4, #4]
 804cef8:	04d9      	lsls	r1, r3, #19
 804cefa:	6922      	ldr	r2, [r4, #16]
 804cefc:	6022      	str	r2, [r4, #0]
 804cefe:	d504      	bpl.n	804cf0a <__sflush_r+0x7e>
 804cf00:	1c42      	adds	r2, r0, #1
 804cf02:	d101      	bne.n	804cf08 <__sflush_r+0x7c>
 804cf04:	682b      	ldr	r3, [r5, #0]
 804cf06:	b903      	cbnz	r3, 804cf0a <__sflush_r+0x7e>
 804cf08:	6560      	str	r0, [r4, #84]	; 0x54
 804cf0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 804cf0c:	602f      	str	r7, [r5, #0]
 804cf0e:	2900      	cmp	r1, #0
 804cf10:	d0c9      	beq.n	804cea6 <__sflush_r+0x1a>
 804cf12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 804cf16:	4299      	cmp	r1, r3
 804cf18:	d002      	beq.n	804cf20 <__sflush_r+0x94>
 804cf1a:	4628      	mov	r0, r5
 804cf1c:	f000 f99c 	bl	804d258 <_free_r>
 804cf20:	2000      	movs	r0, #0
 804cf22:	6360      	str	r0, [r4, #52]	; 0x34
 804cf24:	e7c0      	b.n	804cea8 <__sflush_r+0x1c>
 804cf26:	2301      	movs	r3, #1
 804cf28:	4628      	mov	r0, r5
 804cf2a:	47b0      	blx	r6
 804cf2c:	1c41      	adds	r1, r0, #1
 804cf2e:	d1c8      	bne.n	804cec2 <__sflush_r+0x36>
 804cf30:	682b      	ldr	r3, [r5, #0]
 804cf32:	2b00      	cmp	r3, #0
 804cf34:	d0c5      	beq.n	804cec2 <__sflush_r+0x36>
 804cf36:	2b1d      	cmp	r3, #29
 804cf38:	d001      	beq.n	804cf3e <__sflush_r+0xb2>
 804cf3a:	2b16      	cmp	r3, #22
 804cf3c:	d101      	bne.n	804cf42 <__sflush_r+0xb6>
 804cf3e:	602f      	str	r7, [r5, #0]
 804cf40:	e7b1      	b.n	804cea6 <__sflush_r+0x1a>
 804cf42:	89a3      	ldrh	r3, [r4, #12]
 804cf44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804cf48:	81a3      	strh	r3, [r4, #12]
 804cf4a:	e7ad      	b.n	804cea8 <__sflush_r+0x1c>
 804cf4c:	690f      	ldr	r7, [r1, #16]
 804cf4e:	2f00      	cmp	r7, #0
 804cf50:	d0a9      	beq.n	804cea6 <__sflush_r+0x1a>
 804cf52:	0793      	lsls	r3, r2, #30
 804cf54:	680e      	ldr	r6, [r1, #0]
 804cf56:	bf08      	it	eq
 804cf58:	694b      	ldreq	r3, [r1, #20]
 804cf5a:	600f      	str	r7, [r1, #0]
 804cf5c:	bf18      	it	ne
 804cf5e:	2300      	movne	r3, #0
 804cf60:	eba6 0807 	sub.w	r8, r6, r7
 804cf64:	608b      	str	r3, [r1, #8]
 804cf66:	f1b8 0f00 	cmp.w	r8, #0
 804cf6a:	dd9c      	ble.n	804cea6 <__sflush_r+0x1a>
 804cf6c:	4643      	mov	r3, r8
 804cf6e:	463a      	mov	r2, r7
 804cf70:	6a21      	ldr	r1, [r4, #32]
 804cf72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 804cf74:	4628      	mov	r0, r5
 804cf76:	47b0      	blx	r6
 804cf78:	2800      	cmp	r0, #0
 804cf7a:	dc06      	bgt.n	804cf8a <__sflush_r+0xfe>
 804cf7c:	89a3      	ldrh	r3, [r4, #12]
 804cf7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804cf82:	81a3      	strh	r3, [r4, #12]
 804cf84:	f04f 30ff 	mov.w	r0, #4294967295
 804cf88:	e78e      	b.n	804cea8 <__sflush_r+0x1c>
 804cf8a:	4407      	add	r7, r0
 804cf8c:	eba8 0800 	sub.w	r8, r8, r0
 804cf90:	e7e9      	b.n	804cf66 <__sflush_r+0xda>
 804cf92:	bf00      	nop
 804cf94:	20400001 	.word	0x20400001

0804cf98 <_fflush_r>:
 804cf98:	b538      	push	{r3, r4, r5, lr}
 804cf9a:	690b      	ldr	r3, [r1, #16]
 804cf9c:	4605      	mov	r5, r0
 804cf9e:	460c      	mov	r4, r1
 804cfa0:	b1db      	cbz	r3, 804cfda <_fflush_r+0x42>
 804cfa2:	b118      	cbz	r0, 804cfac <_fflush_r+0x14>
 804cfa4:	6983      	ldr	r3, [r0, #24]
 804cfa6:	b90b      	cbnz	r3, 804cfac <_fflush_r+0x14>
 804cfa8:	f000 f860 	bl	804d06c <__sinit>
 804cfac:	4b0c      	ldr	r3, [pc, #48]	; (804cfe0 <_fflush_r+0x48>)
 804cfae:	429c      	cmp	r4, r3
 804cfb0:	d109      	bne.n	804cfc6 <_fflush_r+0x2e>
 804cfb2:	686c      	ldr	r4, [r5, #4]
 804cfb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804cfb8:	b17b      	cbz	r3, 804cfda <_fflush_r+0x42>
 804cfba:	4621      	mov	r1, r4
 804cfbc:	4628      	mov	r0, r5
 804cfbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 804cfc2:	f7ff bf63 	b.w	804ce8c <__sflush_r>
 804cfc6:	4b07      	ldr	r3, [pc, #28]	; (804cfe4 <_fflush_r+0x4c>)
 804cfc8:	429c      	cmp	r4, r3
 804cfca:	d101      	bne.n	804cfd0 <_fflush_r+0x38>
 804cfcc:	68ac      	ldr	r4, [r5, #8]
 804cfce:	e7f1      	b.n	804cfb4 <_fflush_r+0x1c>
 804cfd0:	4b05      	ldr	r3, [pc, #20]	; (804cfe8 <_fflush_r+0x50>)
 804cfd2:	429c      	cmp	r4, r3
 804cfd4:	bf08      	it	eq
 804cfd6:	68ec      	ldreq	r4, [r5, #12]
 804cfd8:	e7ec      	b.n	804cfb4 <_fflush_r+0x1c>
 804cfda:	2000      	movs	r0, #0
 804cfdc:	bd38      	pop	{r3, r4, r5, pc}
 804cfde:	bf00      	nop
 804cfe0:	0804edc4 	.word	0x0804edc4
 804cfe4:	0804ede4 	.word	0x0804ede4
 804cfe8:	0804eda4 	.word	0x0804eda4

0804cfec <std>:
 804cfec:	2300      	movs	r3, #0
 804cfee:	b510      	push	{r4, lr}
 804cff0:	4604      	mov	r4, r0
 804cff2:	e9c0 3300 	strd	r3, r3, [r0]
 804cff6:	6083      	str	r3, [r0, #8]
 804cff8:	8181      	strh	r1, [r0, #12]
 804cffa:	6643      	str	r3, [r0, #100]	; 0x64
 804cffc:	81c2      	strh	r2, [r0, #14]
 804cffe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 804d002:	6183      	str	r3, [r0, #24]
 804d004:	4619      	mov	r1, r3
 804d006:	2208      	movs	r2, #8
 804d008:	305c      	adds	r0, #92	; 0x5c
 804d00a:	f7ff fd13 	bl	804ca34 <memset>
 804d00e:	4b05      	ldr	r3, [pc, #20]	; (804d024 <std+0x38>)
 804d010:	6263      	str	r3, [r4, #36]	; 0x24
 804d012:	4b05      	ldr	r3, [pc, #20]	; (804d028 <std+0x3c>)
 804d014:	62a3      	str	r3, [r4, #40]	; 0x28
 804d016:	4b05      	ldr	r3, [pc, #20]	; (804d02c <std+0x40>)
 804d018:	62e3      	str	r3, [r4, #44]	; 0x2c
 804d01a:	4b05      	ldr	r3, [pc, #20]	; (804d030 <std+0x44>)
 804d01c:	6224      	str	r4, [r4, #32]
 804d01e:	6323      	str	r3, [r4, #48]	; 0x30
 804d020:	bd10      	pop	{r4, pc}
 804d022:	bf00      	nop
 804d024:	0804dbfd 	.word	0x0804dbfd
 804d028:	0804dc1f 	.word	0x0804dc1f
 804d02c:	0804dc57 	.word	0x0804dc57
 804d030:	0804dc7b 	.word	0x0804dc7b

0804d034 <_cleanup_r>:
 804d034:	4901      	ldr	r1, [pc, #4]	; (804d03c <_cleanup_r+0x8>)
 804d036:	f000 b885 	b.w	804d144 <_fwalk_reent>
 804d03a:	bf00      	nop
 804d03c:	0804cf99 	.word	0x0804cf99

0804d040 <__sfmoreglue>:
 804d040:	b570      	push	{r4, r5, r6, lr}
 804d042:	1e4a      	subs	r2, r1, #1
 804d044:	2568      	movs	r5, #104	; 0x68
 804d046:	4355      	muls	r5, r2
 804d048:	460e      	mov	r6, r1
 804d04a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 804d04e:	f000 f951 	bl	804d2f4 <_malloc_r>
 804d052:	4604      	mov	r4, r0
 804d054:	b140      	cbz	r0, 804d068 <__sfmoreglue+0x28>
 804d056:	2100      	movs	r1, #0
 804d058:	e9c0 1600 	strd	r1, r6, [r0]
 804d05c:	300c      	adds	r0, #12
 804d05e:	60a0      	str	r0, [r4, #8]
 804d060:	f105 0268 	add.w	r2, r5, #104	; 0x68
 804d064:	f7ff fce6 	bl	804ca34 <memset>
 804d068:	4620      	mov	r0, r4
 804d06a:	bd70      	pop	{r4, r5, r6, pc}

0804d06c <__sinit>:
 804d06c:	6983      	ldr	r3, [r0, #24]
 804d06e:	b510      	push	{r4, lr}
 804d070:	4604      	mov	r4, r0
 804d072:	bb33      	cbnz	r3, 804d0c2 <__sinit+0x56>
 804d074:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 804d078:	6503      	str	r3, [r0, #80]	; 0x50
 804d07a:	4b12      	ldr	r3, [pc, #72]	; (804d0c4 <__sinit+0x58>)
 804d07c:	4a12      	ldr	r2, [pc, #72]	; (804d0c8 <__sinit+0x5c>)
 804d07e:	681b      	ldr	r3, [r3, #0]
 804d080:	6282      	str	r2, [r0, #40]	; 0x28
 804d082:	4298      	cmp	r0, r3
 804d084:	bf04      	itt	eq
 804d086:	2301      	moveq	r3, #1
 804d088:	6183      	streq	r3, [r0, #24]
 804d08a:	f000 f81f 	bl	804d0cc <__sfp>
 804d08e:	6060      	str	r0, [r4, #4]
 804d090:	4620      	mov	r0, r4
 804d092:	f000 f81b 	bl	804d0cc <__sfp>
 804d096:	60a0      	str	r0, [r4, #8]
 804d098:	4620      	mov	r0, r4
 804d09a:	f000 f817 	bl	804d0cc <__sfp>
 804d09e:	2200      	movs	r2, #0
 804d0a0:	60e0      	str	r0, [r4, #12]
 804d0a2:	2104      	movs	r1, #4
 804d0a4:	6860      	ldr	r0, [r4, #4]
 804d0a6:	f7ff ffa1 	bl	804cfec <std>
 804d0aa:	2201      	movs	r2, #1
 804d0ac:	2109      	movs	r1, #9
 804d0ae:	68a0      	ldr	r0, [r4, #8]
 804d0b0:	f7ff ff9c 	bl	804cfec <std>
 804d0b4:	2202      	movs	r2, #2
 804d0b6:	2112      	movs	r1, #18
 804d0b8:	68e0      	ldr	r0, [r4, #12]
 804d0ba:	f7ff ff97 	bl	804cfec <std>
 804d0be:	2301      	movs	r3, #1
 804d0c0:	61a3      	str	r3, [r4, #24]
 804d0c2:	bd10      	pop	{r4, pc}
 804d0c4:	0804eda0 	.word	0x0804eda0
 804d0c8:	0804d035 	.word	0x0804d035

0804d0cc <__sfp>:
 804d0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804d0ce:	4b1b      	ldr	r3, [pc, #108]	; (804d13c <__sfp+0x70>)
 804d0d0:	681e      	ldr	r6, [r3, #0]
 804d0d2:	69b3      	ldr	r3, [r6, #24]
 804d0d4:	4607      	mov	r7, r0
 804d0d6:	b913      	cbnz	r3, 804d0de <__sfp+0x12>
 804d0d8:	4630      	mov	r0, r6
 804d0da:	f7ff ffc7 	bl	804d06c <__sinit>
 804d0de:	3648      	adds	r6, #72	; 0x48
 804d0e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 804d0e4:	3b01      	subs	r3, #1
 804d0e6:	d503      	bpl.n	804d0f0 <__sfp+0x24>
 804d0e8:	6833      	ldr	r3, [r6, #0]
 804d0ea:	b133      	cbz	r3, 804d0fa <__sfp+0x2e>
 804d0ec:	6836      	ldr	r6, [r6, #0]
 804d0ee:	e7f7      	b.n	804d0e0 <__sfp+0x14>
 804d0f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 804d0f4:	b16d      	cbz	r5, 804d112 <__sfp+0x46>
 804d0f6:	3468      	adds	r4, #104	; 0x68
 804d0f8:	e7f4      	b.n	804d0e4 <__sfp+0x18>
 804d0fa:	2104      	movs	r1, #4
 804d0fc:	4638      	mov	r0, r7
 804d0fe:	f7ff ff9f 	bl	804d040 <__sfmoreglue>
 804d102:	6030      	str	r0, [r6, #0]
 804d104:	2800      	cmp	r0, #0
 804d106:	d1f1      	bne.n	804d0ec <__sfp+0x20>
 804d108:	230c      	movs	r3, #12
 804d10a:	603b      	str	r3, [r7, #0]
 804d10c:	4604      	mov	r4, r0
 804d10e:	4620      	mov	r0, r4
 804d110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804d112:	4b0b      	ldr	r3, [pc, #44]	; (804d140 <__sfp+0x74>)
 804d114:	6665      	str	r5, [r4, #100]	; 0x64
 804d116:	e9c4 5500 	strd	r5, r5, [r4]
 804d11a:	60a5      	str	r5, [r4, #8]
 804d11c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 804d120:	e9c4 5505 	strd	r5, r5, [r4, #20]
 804d124:	2208      	movs	r2, #8
 804d126:	4629      	mov	r1, r5
 804d128:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 804d12c:	f7ff fc82 	bl	804ca34 <memset>
 804d130:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 804d134:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 804d138:	e7e9      	b.n	804d10e <__sfp+0x42>
 804d13a:	bf00      	nop
 804d13c:	0804eda0 	.word	0x0804eda0
 804d140:	ffff0001 	.word	0xffff0001

0804d144 <_fwalk_reent>:
 804d144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 804d148:	4680      	mov	r8, r0
 804d14a:	4689      	mov	r9, r1
 804d14c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 804d150:	2600      	movs	r6, #0
 804d152:	b914      	cbnz	r4, 804d15a <_fwalk_reent+0x16>
 804d154:	4630      	mov	r0, r6
 804d156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 804d15a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 804d15e:	3f01      	subs	r7, #1
 804d160:	d501      	bpl.n	804d166 <_fwalk_reent+0x22>
 804d162:	6824      	ldr	r4, [r4, #0]
 804d164:	e7f5      	b.n	804d152 <_fwalk_reent+0xe>
 804d166:	89ab      	ldrh	r3, [r5, #12]
 804d168:	2b01      	cmp	r3, #1
 804d16a:	d907      	bls.n	804d17c <_fwalk_reent+0x38>
 804d16c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 804d170:	3301      	adds	r3, #1
 804d172:	d003      	beq.n	804d17c <_fwalk_reent+0x38>
 804d174:	4629      	mov	r1, r5
 804d176:	4640      	mov	r0, r8
 804d178:	47c8      	blx	r9
 804d17a:	4306      	orrs	r6, r0
 804d17c:	3568      	adds	r5, #104	; 0x68
 804d17e:	e7ee      	b.n	804d15e <_fwalk_reent+0x1a>

0804d180 <__swhatbuf_r>:
 804d180:	b570      	push	{r4, r5, r6, lr}
 804d182:	460e      	mov	r6, r1
 804d184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804d188:	2900      	cmp	r1, #0
 804d18a:	b096      	sub	sp, #88	; 0x58
 804d18c:	4614      	mov	r4, r2
 804d18e:	461d      	mov	r5, r3
 804d190:	da07      	bge.n	804d1a2 <__swhatbuf_r+0x22>
 804d192:	2300      	movs	r3, #0
 804d194:	602b      	str	r3, [r5, #0]
 804d196:	89b3      	ldrh	r3, [r6, #12]
 804d198:	061a      	lsls	r2, r3, #24
 804d19a:	d410      	bmi.n	804d1be <__swhatbuf_r+0x3e>
 804d19c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 804d1a0:	e00e      	b.n	804d1c0 <__swhatbuf_r+0x40>
 804d1a2:	466a      	mov	r2, sp
 804d1a4:	f000 fd90 	bl	804dcc8 <_fstat_r>
 804d1a8:	2800      	cmp	r0, #0
 804d1aa:	dbf2      	blt.n	804d192 <__swhatbuf_r+0x12>
 804d1ac:	9a01      	ldr	r2, [sp, #4]
 804d1ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 804d1b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 804d1b6:	425a      	negs	r2, r3
 804d1b8:	415a      	adcs	r2, r3
 804d1ba:	602a      	str	r2, [r5, #0]
 804d1bc:	e7ee      	b.n	804d19c <__swhatbuf_r+0x1c>
 804d1be:	2340      	movs	r3, #64	; 0x40
 804d1c0:	2000      	movs	r0, #0
 804d1c2:	6023      	str	r3, [r4, #0]
 804d1c4:	b016      	add	sp, #88	; 0x58
 804d1c6:	bd70      	pop	{r4, r5, r6, pc}

0804d1c8 <__smakebuf_r>:
 804d1c8:	898b      	ldrh	r3, [r1, #12]
 804d1ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 804d1cc:	079d      	lsls	r5, r3, #30
 804d1ce:	4606      	mov	r6, r0
 804d1d0:	460c      	mov	r4, r1
 804d1d2:	d507      	bpl.n	804d1e4 <__smakebuf_r+0x1c>
 804d1d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 804d1d8:	6023      	str	r3, [r4, #0]
 804d1da:	6123      	str	r3, [r4, #16]
 804d1dc:	2301      	movs	r3, #1
 804d1de:	6163      	str	r3, [r4, #20]
 804d1e0:	b002      	add	sp, #8
 804d1e2:	bd70      	pop	{r4, r5, r6, pc}
 804d1e4:	ab01      	add	r3, sp, #4
 804d1e6:	466a      	mov	r2, sp
 804d1e8:	f7ff ffca 	bl	804d180 <__swhatbuf_r>
 804d1ec:	9900      	ldr	r1, [sp, #0]
 804d1ee:	4605      	mov	r5, r0
 804d1f0:	4630      	mov	r0, r6
 804d1f2:	f000 f87f 	bl	804d2f4 <_malloc_r>
 804d1f6:	b948      	cbnz	r0, 804d20c <__smakebuf_r+0x44>
 804d1f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804d1fc:	059a      	lsls	r2, r3, #22
 804d1fe:	d4ef      	bmi.n	804d1e0 <__smakebuf_r+0x18>
 804d200:	f023 0303 	bic.w	r3, r3, #3
 804d204:	f043 0302 	orr.w	r3, r3, #2
 804d208:	81a3      	strh	r3, [r4, #12]
 804d20a:	e7e3      	b.n	804d1d4 <__smakebuf_r+0xc>
 804d20c:	4b0d      	ldr	r3, [pc, #52]	; (804d244 <__smakebuf_r+0x7c>)
 804d20e:	62b3      	str	r3, [r6, #40]	; 0x28
 804d210:	89a3      	ldrh	r3, [r4, #12]
 804d212:	6020      	str	r0, [r4, #0]
 804d214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 804d218:	81a3      	strh	r3, [r4, #12]
 804d21a:	9b00      	ldr	r3, [sp, #0]
 804d21c:	6163      	str	r3, [r4, #20]
 804d21e:	9b01      	ldr	r3, [sp, #4]
 804d220:	6120      	str	r0, [r4, #16]
 804d222:	b15b      	cbz	r3, 804d23c <__smakebuf_r+0x74>
 804d224:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 804d228:	4630      	mov	r0, r6
 804d22a:	f000 fd5f 	bl	804dcec <_isatty_r>
 804d22e:	b128      	cbz	r0, 804d23c <__smakebuf_r+0x74>
 804d230:	89a3      	ldrh	r3, [r4, #12]
 804d232:	f023 0303 	bic.w	r3, r3, #3
 804d236:	f043 0301 	orr.w	r3, r3, #1
 804d23a:	81a3      	strh	r3, [r4, #12]
 804d23c:	89a3      	ldrh	r3, [r4, #12]
 804d23e:	431d      	orrs	r5, r3
 804d240:	81a5      	strh	r5, [r4, #12]
 804d242:	e7cd      	b.n	804d1e0 <__smakebuf_r+0x18>
 804d244:	0804d035 	.word	0x0804d035

0804d248 <malloc>:
 804d248:	4b02      	ldr	r3, [pc, #8]	; (804d254 <malloc+0xc>)
 804d24a:	4601      	mov	r1, r0
 804d24c:	6818      	ldr	r0, [r3, #0]
 804d24e:	f000 b851 	b.w	804d2f4 <_malloc_r>
 804d252:	bf00      	nop
 804d254:	200010ec 	.word	0x200010ec

0804d258 <_free_r>:
 804d258:	b538      	push	{r3, r4, r5, lr}
 804d25a:	4605      	mov	r5, r0
 804d25c:	2900      	cmp	r1, #0
 804d25e:	d045      	beq.n	804d2ec <_free_r+0x94>
 804d260:	f851 3c04 	ldr.w	r3, [r1, #-4]
 804d264:	1f0c      	subs	r4, r1, #4
 804d266:	2b00      	cmp	r3, #0
 804d268:	bfb8      	it	lt
 804d26a:	18e4      	addlt	r4, r4, r3
 804d26c:	f000 fd79 	bl	804dd62 <__malloc_lock>
 804d270:	4a1f      	ldr	r2, [pc, #124]	; (804d2f0 <_free_r+0x98>)
 804d272:	6813      	ldr	r3, [r2, #0]
 804d274:	4610      	mov	r0, r2
 804d276:	b933      	cbnz	r3, 804d286 <_free_r+0x2e>
 804d278:	6063      	str	r3, [r4, #4]
 804d27a:	6014      	str	r4, [r2, #0]
 804d27c:	4628      	mov	r0, r5
 804d27e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 804d282:	f000 bd6f 	b.w	804dd64 <__malloc_unlock>
 804d286:	42a3      	cmp	r3, r4
 804d288:	d90c      	bls.n	804d2a4 <_free_r+0x4c>
 804d28a:	6821      	ldr	r1, [r4, #0]
 804d28c:	1862      	adds	r2, r4, r1
 804d28e:	4293      	cmp	r3, r2
 804d290:	bf04      	itt	eq
 804d292:	681a      	ldreq	r2, [r3, #0]
 804d294:	685b      	ldreq	r3, [r3, #4]
 804d296:	6063      	str	r3, [r4, #4]
 804d298:	bf04      	itt	eq
 804d29a:	1852      	addeq	r2, r2, r1
 804d29c:	6022      	streq	r2, [r4, #0]
 804d29e:	6004      	str	r4, [r0, #0]
 804d2a0:	e7ec      	b.n	804d27c <_free_r+0x24>
 804d2a2:	4613      	mov	r3, r2
 804d2a4:	685a      	ldr	r2, [r3, #4]
 804d2a6:	b10a      	cbz	r2, 804d2ac <_free_r+0x54>
 804d2a8:	42a2      	cmp	r2, r4
 804d2aa:	d9fa      	bls.n	804d2a2 <_free_r+0x4a>
 804d2ac:	6819      	ldr	r1, [r3, #0]
 804d2ae:	1858      	adds	r0, r3, r1
 804d2b0:	42a0      	cmp	r0, r4
 804d2b2:	d10b      	bne.n	804d2cc <_free_r+0x74>
 804d2b4:	6820      	ldr	r0, [r4, #0]
 804d2b6:	4401      	add	r1, r0
 804d2b8:	1858      	adds	r0, r3, r1
 804d2ba:	4282      	cmp	r2, r0
 804d2bc:	6019      	str	r1, [r3, #0]
 804d2be:	d1dd      	bne.n	804d27c <_free_r+0x24>
 804d2c0:	6810      	ldr	r0, [r2, #0]
 804d2c2:	6852      	ldr	r2, [r2, #4]
 804d2c4:	605a      	str	r2, [r3, #4]
 804d2c6:	4401      	add	r1, r0
 804d2c8:	6019      	str	r1, [r3, #0]
 804d2ca:	e7d7      	b.n	804d27c <_free_r+0x24>
 804d2cc:	d902      	bls.n	804d2d4 <_free_r+0x7c>
 804d2ce:	230c      	movs	r3, #12
 804d2d0:	602b      	str	r3, [r5, #0]
 804d2d2:	e7d3      	b.n	804d27c <_free_r+0x24>
 804d2d4:	6820      	ldr	r0, [r4, #0]
 804d2d6:	1821      	adds	r1, r4, r0
 804d2d8:	428a      	cmp	r2, r1
 804d2da:	bf04      	itt	eq
 804d2dc:	6811      	ldreq	r1, [r2, #0]
 804d2de:	6852      	ldreq	r2, [r2, #4]
 804d2e0:	6062      	str	r2, [r4, #4]
 804d2e2:	bf04      	itt	eq
 804d2e4:	1809      	addeq	r1, r1, r0
 804d2e6:	6021      	streq	r1, [r4, #0]
 804d2e8:	605c      	str	r4, [r3, #4]
 804d2ea:	e7c7      	b.n	804d27c <_free_r+0x24>
 804d2ec:	bd38      	pop	{r3, r4, r5, pc}
 804d2ee:	bf00      	nop
 804d2f0:	20009b2c 	.word	0x20009b2c

0804d2f4 <_malloc_r>:
 804d2f4:	b570      	push	{r4, r5, r6, lr}
 804d2f6:	1ccd      	adds	r5, r1, #3
 804d2f8:	f025 0503 	bic.w	r5, r5, #3
 804d2fc:	3508      	adds	r5, #8
 804d2fe:	2d0c      	cmp	r5, #12
 804d300:	bf38      	it	cc
 804d302:	250c      	movcc	r5, #12
 804d304:	2d00      	cmp	r5, #0
 804d306:	4606      	mov	r6, r0
 804d308:	db01      	blt.n	804d30e <_malloc_r+0x1a>
 804d30a:	42a9      	cmp	r1, r5
 804d30c:	d903      	bls.n	804d316 <_malloc_r+0x22>
 804d30e:	230c      	movs	r3, #12
 804d310:	6033      	str	r3, [r6, #0]
 804d312:	2000      	movs	r0, #0
 804d314:	bd70      	pop	{r4, r5, r6, pc}
 804d316:	f000 fd24 	bl	804dd62 <__malloc_lock>
 804d31a:	4a21      	ldr	r2, [pc, #132]	; (804d3a0 <_malloc_r+0xac>)
 804d31c:	6814      	ldr	r4, [r2, #0]
 804d31e:	4621      	mov	r1, r4
 804d320:	b991      	cbnz	r1, 804d348 <_malloc_r+0x54>
 804d322:	4c20      	ldr	r4, [pc, #128]	; (804d3a4 <_malloc_r+0xb0>)
 804d324:	6823      	ldr	r3, [r4, #0]
 804d326:	b91b      	cbnz	r3, 804d330 <_malloc_r+0x3c>
 804d328:	4630      	mov	r0, r6
 804d32a:	f000 fc57 	bl	804dbdc <_sbrk_r>
 804d32e:	6020      	str	r0, [r4, #0]
 804d330:	4629      	mov	r1, r5
 804d332:	4630      	mov	r0, r6
 804d334:	f000 fc52 	bl	804dbdc <_sbrk_r>
 804d338:	1c43      	adds	r3, r0, #1
 804d33a:	d124      	bne.n	804d386 <_malloc_r+0x92>
 804d33c:	230c      	movs	r3, #12
 804d33e:	6033      	str	r3, [r6, #0]
 804d340:	4630      	mov	r0, r6
 804d342:	f000 fd0f 	bl	804dd64 <__malloc_unlock>
 804d346:	e7e4      	b.n	804d312 <_malloc_r+0x1e>
 804d348:	680b      	ldr	r3, [r1, #0]
 804d34a:	1b5b      	subs	r3, r3, r5
 804d34c:	d418      	bmi.n	804d380 <_malloc_r+0x8c>
 804d34e:	2b0b      	cmp	r3, #11
 804d350:	d90f      	bls.n	804d372 <_malloc_r+0x7e>
 804d352:	600b      	str	r3, [r1, #0]
 804d354:	50cd      	str	r5, [r1, r3]
 804d356:	18cc      	adds	r4, r1, r3
 804d358:	4630      	mov	r0, r6
 804d35a:	f000 fd03 	bl	804dd64 <__malloc_unlock>
 804d35e:	f104 000b 	add.w	r0, r4, #11
 804d362:	1d23      	adds	r3, r4, #4
 804d364:	f020 0007 	bic.w	r0, r0, #7
 804d368:	1ac3      	subs	r3, r0, r3
 804d36a:	d0d3      	beq.n	804d314 <_malloc_r+0x20>
 804d36c:	425a      	negs	r2, r3
 804d36e:	50e2      	str	r2, [r4, r3]
 804d370:	e7d0      	b.n	804d314 <_malloc_r+0x20>
 804d372:	428c      	cmp	r4, r1
 804d374:	684b      	ldr	r3, [r1, #4]
 804d376:	bf16      	itet	ne
 804d378:	6063      	strne	r3, [r4, #4]
 804d37a:	6013      	streq	r3, [r2, #0]
 804d37c:	460c      	movne	r4, r1
 804d37e:	e7eb      	b.n	804d358 <_malloc_r+0x64>
 804d380:	460c      	mov	r4, r1
 804d382:	6849      	ldr	r1, [r1, #4]
 804d384:	e7cc      	b.n	804d320 <_malloc_r+0x2c>
 804d386:	1cc4      	adds	r4, r0, #3
 804d388:	f024 0403 	bic.w	r4, r4, #3
 804d38c:	42a0      	cmp	r0, r4
 804d38e:	d005      	beq.n	804d39c <_malloc_r+0xa8>
 804d390:	1a21      	subs	r1, r4, r0
 804d392:	4630      	mov	r0, r6
 804d394:	f000 fc22 	bl	804dbdc <_sbrk_r>
 804d398:	3001      	adds	r0, #1
 804d39a:	d0cf      	beq.n	804d33c <_malloc_r+0x48>
 804d39c:	6025      	str	r5, [r4, #0]
 804d39e:	e7db      	b.n	804d358 <_malloc_r+0x64>
 804d3a0:	20009b2c 	.word	0x20009b2c
 804d3a4:	20009b30 	.word	0x20009b30

0804d3a8 <__ssputs_r>:
 804d3a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804d3ac:	688e      	ldr	r6, [r1, #8]
 804d3ae:	429e      	cmp	r6, r3
 804d3b0:	4682      	mov	sl, r0
 804d3b2:	460c      	mov	r4, r1
 804d3b4:	4690      	mov	r8, r2
 804d3b6:	4699      	mov	r9, r3
 804d3b8:	d837      	bhi.n	804d42a <__ssputs_r+0x82>
 804d3ba:	898a      	ldrh	r2, [r1, #12]
 804d3bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 804d3c0:	d031      	beq.n	804d426 <__ssputs_r+0x7e>
 804d3c2:	6825      	ldr	r5, [r4, #0]
 804d3c4:	6909      	ldr	r1, [r1, #16]
 804d3c6:	1a6f      	subs	r7, r5, r1
 804d3c8:	6965      	ldr	r5, [r4, #20]
 804d3ca:	2302      	movs	r3, #2
 804d3cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 804d3d0:	fb95 f5f3 	sdiv	r5, r5, r3
 804d3d4:	f109 0301 	add.w	r3, r9, #1
 804d3d8:	443b      	add	r3, r7
 804d3da:	429d      	cmp	r5, r3
 804d3dc:	bf38      	it	cc
 804d3de:	461d      	movcc	r5, r3
 804d3e0:	0553      	lsls	r3, r2, #21
 804d3e2:	d530      	bpl.n	804d446 <__ssputs_r+0x9e>
 804d3e4:	4629      	mov	r1, r5
 804d3e6:	f7ff ff85 	bl	804d2f4 <_malloc_r>
 804d3ea:	4606      	mov	r6, r0
 804d3ec:	b950      	cbnz	r0, 804d404 <__ssputs_r+0x5c>
 804d3ee:	230c      	movs	r3, #12
 804d3f0:	f8ca 3000 	str.w	r3, [sl]
 804d3f4:	89a3      	ldrh	r3, [r4, #12]
 804d3f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804d3fa:	81a3      	strh	r3, [r4, #12]
 804d3fc:	f04f 30ff 	mov.w	r0, #4294967295
 804d400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804d404:	463a      	mov	r2, r7
 804d406:	6921      	ldr	r1, [r4, #16]
 804d408:	f7ff fb09 	bl	804ca1e <memcpy>
 804d40c:	89a3      	ldrh	r3, [r4, #12]
 804d40e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 804d412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 804d416:	81a3      	strh	r3, [r4, #12]
 804d418:	6126      	str	r6, [r4, #16]
 804d41a:	6165      	str	r5, [r4, #20]
 804d41c:	443e      	add	r6, r7
 804d41e:	1bed      	subs	r5, r5, r7
 804d420:	6026      	str	r6, [r4, #0]
 804d422:	60a5      	str	r5, [r4, #8]
 804d424:	464e      	mov	r6, r9
 804d426:	454e      	cmp	r6, r9
 804d428:	d900      	bls.n	804d42c <__ssputs_r+0x84>
 804d42a:	464e      	mov	r6, r9
 804d42c:	4632      	mov	r2, r6
 804d42e:	4641      	mov	r1, r8
 804d430:	6820      	ldr	r0, [r4, #0]
 804d432:	f000 fc7d 	bl	804dd30 <memmove>
 804d436:	68a3      	ldr	r3, [r4, #8]
 804d438:	1b9b      	subs	r3, r3, r6
 804d43a:	60a3      	str	r3, [r4, #8]
 804d43c:	6823      	ldr	r3, [r4, #0]
 804d43e:	441e      	add	r6, r3
 804d440:	6026      	str	r6, [r4, #0]
 804d442:	2000      	movs	r0, #0
 804d444:	e7dc      	b.n	804d400 <__ssputs_r+0x58>
 804d446:	462a      	mov	r2, r5
 804d448:	f000 fc8d 	bl	804dd66 <_realloc_r>
 804d44c:	4606      	mov	r6, r0
 804d44e:	2800      	cmp	r0, #0
 804d450:	d1e2      	bne.n	804d418 <__ssputs_r+0x70>
 804d452:	6921      	ldr	r1, [r4, #16]
 804d454:	4650      	mov	r0, sl
 804d456:	f7ff feff 	bl	804d258 <_free_r>
 804d45a:	e7c8      	b.n	804d3ee <__ssputs_r+0x46>

0804d45c <_svfiprintf_r>:
 804d45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804d460:	461d      	mov	r5, r3
 804d462:	898b      	ldrh	r3, [r1, #12]
 804d464:	061f      	lsls	r7, r3, #24
 804d466:	b09d      	sub	sp, #116	; 0x74
 804d468:	4680      	mov	r8, r0
 804d46a:	460c      	mov	r4, r1
 804d46c:	4616      	mov	r6, r2
 804d46e:	d50f      	bpl.n	804d490 <_svfiprintf_r+0x34>
 804d470:	690b      	ldr	r3, [r1, #16]
 804d472:	b96b      	cbnz	r3, 804d490 <_svfiprintf_r+0x34>
 804d474:	2140      	movs	r1, #64	; 0x40
 804d476:	f7ff ff3d 	bl	804d2f4 <_malloc_r>
 804d47a:	6020      	str	r0, [r4, #0]
 804d47c:	6120      	str	r0, [r4, #16]
 804d47e:	b928      	cbnz	r0, 804d48c <_svfiprintf_r+0x30>
 804d480:	230c      	movs	r3, #12
 804d482:	f8c8 3000 	str.w	r3, [r8]
 804d486:	f04f 30ff 	mov.w	r0, #4294967295
 804d48a:	e0c8      	b.n	804d61e <_svfiprintf_r+0x1c2>
 804d48c:	2340      	movs	r3, #64	; 0x40
 804d48e:	6163      	str	r3, [r4, #20]
 804d490:	2300      	movs	r3, #0
 804d492:	9309      	str	r3, [sp, #36]	; 0x24
 804d494:	2320      	movs	r3, #32
 804d496:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 804d49a:	2330      	movs	r3, #48	; 0x30
 804d49c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 804d4a0:	9503      	str	r5, [sp, #12]
 804d4a2:	f04f 0b01 	mov.w	fp, #1
 804d4a6:	4637      	mov	r7, r6
 804d4a8:	463d      	mov	r5, r7
 804d4aa:	f815 3b01 	ldrb.w	r3, [r5], #1
 804d4ae:	b10b      	cbz	r3, 804d4b4 <_svfiprintf_r+0x58>
 804d4b0:	2b25      	cmp	r3, #37	; 0x25
 804d4b2:	d13e      	bne.n	804d532 <_svfiprintf_r+0xd6>
 804d4b4:	ebb7 0a06 	subs.w	sl, r7, r6
 804d4b8:	d00b      	beq.n	804d4d2 <_svfiprintf_r+0x76>
 804d4ba:	4653      	mov	r3, sl
 804d4bc:	4632      	mov	r2, r6
 804d4be:	4621      	mov	r1, r4
 804d4c0:	4640      	mov	r0, r8
 804d4c2:	f7ff ff71 	bl	804d3a8 <__ssputs_r>
 804d4c6:	3001      	adds	r0, #1
 804d4c8:	f000 80a4 	beq.w	804d614 <_svfiprintf_r+0x1b8>
 804d4cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804d4ce:	4453      	add	r3, sl
 804d4d0:	9309      	str	r3, [sp, #36]	; 0x24
 804d4d2:	783b      	ldrb	r3, [r7, #0]
 804d4d4:	2b00      	cmp	r3, #0
 804d4d6:	f000 809d 	beq.w	804d614 <_svfiprintf_r+0x1b8>
 804d4da:	2300      	movs	r3, #0
 804d4dc:	f04f 32ff 	mov.w	r2, #4294967295
 804d4e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 804d4e4:	9304      	str	r3, [sp, #16]
 804d4e6:	9307      	str	r3, [sp, #28]
 804d4e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 804d4ec:	931a      	str	r3, [sp, #104]	; 0x68
 804d4ee:	462f      	mov	r7, r5
 804d4f0:	2205      	movs	r2, #5
 804d4f2:	f817 1b01 	ldrb.w	r1, [r7], #1
 804d4f6:	4850      	ldr	r0, [pc, #320]	; (804d638 <_svfiprintf_r+0x1dc>)
 804d4f8:	f7f2 ffa2 	bl	8040440 <memchr>
 804d4fc:	9b04      	ldr	r3, [sp, #16]
 804d4fe:	b9d0      	cbnz	r0, 804d536 <_svfiprintf_r+0xda>
 804d500:	06d9      	lsls	r1, r3, #27
 804d502:	bf44      	itt	mi
 804d504:	2220      	movmi	r2, #32
 804d506:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 804d50a:	071a      	lsls	r2, r3, #28
 804d50c:	bf44      	itt	mi
 804d50e:	222b      	movmi	r2, #43	; 0x2b
 804d510:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 804d514:	782a      	ldrb	r2, [r5, #0]
 804d516:	2a2a      	cmp	r2, #42	; 0x2a
 804d518:	d015      	beq.n	804d546 <_svfiprintf_r+0xea>
 804d51a:	9a07      	ldr	r2, [sp, #28]
 804d51c:	462f      	mov	r7, r5
 804d51e:	2000      	movs	r0, #0
 804d520:	250a      	movs	r5, #10
 804d522:	4639      	mov	r1, r7
 804d524:	f811 3b01 	ldrb.w	r3, [r1], #1
 804d528:	3b30      	subs	r3, #48	; 0x30
 804d52a:	2b09      	cmp	r3, #9
 804d52c:	d94d      	bls.n	804d5ca <_svfiprintf_r+0x16e>
 804d52e:	b1b8      	cbz	r0, 804d560 <_svfiprintf_r+0x104>
 804d530:	e00f      	b.n	804d552 <_svfiprintf_r+0xf6>
 804d532:	462f      	mov	r7, r5
 804d534:	e7b8      	b.n	804d4a8 <_svfiprintf_r+0x4c>
 804d536:	4a40      	ldr	r2, [pc, #256]	; (804d638 <_svfiprintf_r+0x1dc>)
 804d538:	1a80      	subs	r0, r0, r2
 804d53a:	fa0b f000 	lsl.w	r0, fp, r0
 804d53e:	4318      	orrs	r0, r3
 804d540:	9004      	str	r0, [sp, #16]
 804d542:	463d      	mov	r5, r7
 804d544:	e7d3      	b.n	804d4ee <_svfiprintf_r+0x92>
 804d546:	9a03      	ldr	r2, [sp, #12]
 804d548:	1d11      	adds	r1, r2, #4
 804d54a:	6812      	ldr	r2, [r2, #0]
 804d54c:	9103      	str	r1, [sp, #12]
 804d54e:	2a00      	cmp	r2, #0
 804d550:	db01      	blt.n	804d556 <_svfiprintf_r+0xfa>
 804d552:	9207      	str	r2, [sp, #28]
 804d554:	e004      	b.n	804d560 <_svfiprintf_r+0x104>
 804d556:	4252      	negs	r2, r2
 804d558:	f043 0302 	orr.w	r3, r3, #2
 804d55c:	9207      	str	r2, [sp, #28]
 804d55e:	9304      	str	r3, [sp, #16]
 804d560:	783b      	ldrb	r3, [r7, #0]
 804d562:	2b2e      	cmp	r3, #46	; 0x2e
 804d564:	d10c      	bne.n	804d580 <_svfiprintf_r+0x124>
 804d566:	787b      	ldrb	r3, [r7, #1]
 804d568:	2b2a      	cmp	r3, #42	; 0x2a
 804d56a:	d133      	bne.n	804d5d4 <_svfiprintf_r+0x178>
 804d56c:	9b03      	ldr	r3, [sp, #12]
 804d56e:	1d1a      	adds	r2, r3, #4
 804d570:	681b      	ldr	r3, [r3, #0]
 804d572:	9203      	str	r2, [sp, #12]
 804d574:	2b00      	cmp	r3, #0
 804d576:	bfb8      	it	lt
 804d578:	f04f 33ff 	movlt.w	r3, #4294967295
 804d57c:	3702      	adds	r7, #2
 804d57e:	9305      	str	r3, [sp, #20]
 804d580:	4d2e      	ldr	r5, [pc, #184]	; (804d63c <_svfiprintf_r+0x1e0>)
 804d582:	7839      	ldrb	r1, [r7, #0]
 804d584:	2203      	movs	r2, #3
 804d586:	4628      	mov	r0, r5
 804d588:	f7f2 ff5a 	bl	8040440 <memchr>
 804d58c:	b138      	cbz	r0, 804d59e <_svfiprintf_r+0x142>
 804d58e:	2340      	movs	r3, #64	; 0x40
 804d590:	1b40      	subs	r0, r0, r5
 804d592:	fa03 f000 	lsl.w	r0, r3, r0
 804d596:	9b04      	ldr	r3, [sp, #16]
 804d598:	4303      	orrs	r3, r0
 804d59a:	3701      	adds	r7, #1
 804d59c:	9304      	str	r3, [sp, #16]
 804d59e:	7839      	ldrb	r1, [r7, #0]
 804d5a0:	4827      	ldr	r0, [pc, #156]	; (804d640 <_svfiprintf_r+0x1e4>)
 804d5a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 804d5a6:	2206      	movs	r2, #6
 804d5a8:	1c7e      	adds	r6, r7, #1
 804d5aa:	f7f2 ff49 	bl	8040440 <memchr>
 804d5ae:	2800      	cmp	r0, #0
 804d5b0:	d038      	beq.n	804d624 <_svfiprintf_r+0x1c8>
 804d5b2:	4b24      	ldr	r3, [pc, #144]	; (804d644 <_svfiprintf_r+0x1e8>)
 804d5b4:	bb13      	cbnz	r3, 804d5fc <_svfiprintf_r+0x1a0>
 804d5b6:	9b03      	ldr	r3, [sp, #12]
 804d5b8:	3307      	adds	r3, #7
 804d5ba:	f023 0307 	bic.w	r3, r3, #7
 804d5be:	3308      	adds	r3, #8
 804d5c0:	9303      	str	r3, [sp, #12]
 804d5c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804d5c4:	444b      	add	r3, r9
 804d5c6:	9309      	str	r3, [sp, #36]	; 0x24
 804d5c8:	e76d      	b.n	804d4a6 <_svfiprintf_r+0x4a>
 804d5ca:	fb05 3202 	mla	r2, r5, r2, r3
 804d5ce:	2001      	movs	r0, #1
 804d5d0:	460f      	mov	r7, r1
 804d5d2:	e7a6      	b.n	804d522 <_svfiprintf_r+0xc6>
 804d5d4:	2300      	movs	r3, #0
 804d5d6:	3701      	adds	r7, #1
 804d5d8:	9305      	str	r3, [sp, #20]
 804d5da:	4619      	mov	r1, r3
 804d5dc:	250a      	movs	r5, #10
 804d5de:	4638      	mov	r0, r7
 804d5e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 804d5e4:	3a30      	subs	r2, #48	; 0x30
 804d5e6:	2a09      	cmp	r2, #9
 804d5e8:	d903      	bls.n	804d5f2 <_svfiprintf_r+0x196>
 804d5ea:	2b00      	cmp	r3, #0
 804d5ec:	d0c8      	beq.n	804d580 <_svfiprintf_r+0x124>
 804d5ee:	9105      	str	r1, [sp, #20]
 804d5f0:	e7c6      	b.n	804d580 <_svfiprintf_r+0x124>
 804d5f2:	fb05 2101 	mla	r1, r5, r1, r2
 804d5f6:	2301      	movs	r3, #1
 804d5f8:	4607      	mov	r7, r0
 804d5fa:	e7f0      	b.n	804d5de <_svfiprintf_r+0x182>
 804d5fc:	ab03      	add	r3, sp, #12
 804d5fe:	9300      	str	r3, [sp, #0]
 804d600:	4622      	mov	r2, r4
 804d602:	4b11      	ldr	r3, [pc, #68]	; (804d648 <_svfiprintf_r+0x1ec>)
 804d604:	a904      	add	r1, sp, #16
 804d606:	4640      	mov	r0, r8
 804d608:	f3af 8000 	nop.w
 804d60c:	f1b0 3fff 	cmp.w	r0, #4294967295
 804d610:	4681      	mov	r9, r0
 804d612:	d1d6      	bne.n	804d5c2 <_svfiprintf_r+0x166>
 804d614:	89a3      	ldrh	r3, [r4, #12]
 804d616:	065b      	lsls	r3, r3, #25
 804d618:	f53f af35 	bmi.w	804d486 <_svfiprintf_r+0x2a>
 804d61c:	9809      	ldr	r0, [sp, #36]	; 0x24
 804d61e:	b01d      	add	sp, #116	; 0x74
 804d620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804d624:	ab03      	add	r3, sp, #12
 804d626:	9300      	str	r3, [sp, #0]
 804d628:	4622      	mov	r2, r4
 804d62a:	4b07      	ldr	r3, [pc, #28]	; (804d648 <_svfiprintf_r+0x1ec>)
 804d62c:	a904      	add	r1, sp, #16
 804d62e:	4640      	mov	r0, r8
 804d630:	f000 f9c2 	bl	804d9b8 <_printf_i>
 804d634:	e7ea      	b.n	804d60c <_svfiprintf_r+0x1b0>
 804d636:	bf00      	nop
 804d638:	0804ee04 	.word	0x0804ee04
 804d63c:	0804ee0a 	.word	0x0804ee0a
 804d640:	0804ee0e 	.word	0x0804ee0e
 804d644:	00000000 	.word	0x00000000
 804d648:	0804d3a9 	.word	0x0804d3a9

0804d64c <__sfputc_r>:
 804d64c:	6893      	ldr	r3, [r2, #8]
 804d64e:	3b01      	subs	r3, #1
 804d650:	2b00      	cmp	r3, #0
 804d652:	b410      	push	{r4}
 804d654:	6093      	str	r3, [r2, #8]
 804d656:	da08      	bge.n	804d66a <__sfputc_r+0x1e>
 804d658:	6994      	ldr	r4, [r2, #24]
 804d65a:	42a3      	cmp	r3, r4
 804d65c:	db01      	blt.n	804d662 <__sfputc_r+0x16>
 804d65e:	290a      	cmp	r1, #10
 804d660:	d103      	bne.n	804d66a <__sfputc_r+0x1e>
 804d662:	f85d 4b04 	ldr.w	r4, [sp], #4
 804d666:	f7ff bb51 	b.w	804cd0c <__swbuf_r>
 804d66a:	6813      	ldr	r3, [r2, #0]
 804d66c:	1c58      	adds	r0, r3, #1
 804d66e:	6010      	str	r0, [r2, #0]
 804d670:	7019      	strb	r1, [r3, #0]
 804d672:	4608      	mov	r0, r1
 804d674:	f85d 4b04 	ldr.w	r4, [sp], #4
 804d678:	4770      	bx	lr

0804d67a <__sfputs_r>:
 804d67a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804d67c:	4606      	mov	r6, r0
 804d67e:	460f      	mov	r7, r1
 804d680:	4614      	mov	r4, r2
 804d682:	18d5      	adds	r5, r2, r3
 804d684:	42ac      	cmp	r4, r5
 804d686:	d101      	bne.n	804d68c <__sfputs_r+0x12>
 804d688:	2000      	movs	r0, #0
 804d68a:	e007      	b.n	804d69c <__sfputs_r+0x22>
 804d68c:	463a      	mov	r2, r7
 804d68e:	f814 1b01 	ldrb.w	r1, [r4], #1
 804d692:	4630      	mov	r0, r6
 804d694:	f7ff ffda 	bl	804d64c <__sfputc_r>
 804d698:	1c43      	adds	r3, r0, #1
 804d69a:	d1f3      	bne.n	804d684 <__sfputs_r+0xa>
 804d69c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0804d6a0 <_vfiprintf_r>:
 804d6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804d6a4:	460c      	mov	r4, r1
 804d6a6:	b09d      	sub	sp, #116	; 0x74
 804d6a8:	4617      	mov	r7, r2
 804d6aa:	461d      	mov	r5, r3
 804d6ac:	4606      	mov	r6, r0
 804d6ae:	b118      	cbz	r0, 804d6b8 <_vfiprintf_r+0x18>
 804d6b0:	6983      	ldr	r3, [r0, #24]
 804d6b2:	b90b      	cbnz	r3, 804d6b8 <_vfiprintf_r+0x18>
 804d6b4:	f7ff fcda 	bl	804d06c <__sinit>
 804d6b8:	4b7c      	ldr	r3, [pc, #496]	; (804d8ac <_vfiprintf_r+0x20c>)
 804d6ba:	429c      	cmp	r4, r3
 804d6bc:	d158      	bne.n	804d770 <_vfiprintf_r+0xd0>
 804d6be:	6874      	ldr	r4, [r6, #4]
 804d6c0:	89a3      	ldrh	r3, [r4, #12]
 804d6c2:	0718      	lsls	r0, r3, #28
 804d6c4:	d55e      	bpl.n	804d784 <_vfiprintf_r+0xe4>
 804d6c6:	6923      	ldr	r3, [r4, #16]
 804d6c8:	2b00      	cmp	r3, #0
 804d6ca:	d05b      	beq.n	804d784 <_vfiprintf_r+0xe4>
 804d6cc:	2300      	movs	r3, #0
 804d6ce:	9309      	str	r3, [sp, #36]	; 0x24
 804d6d0:	2320      	movs	r3, #32
 804d6d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 804d6d6:	2330      	movs	r3, #48	; 0x30
 804d6d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 804d6dc:	9503      	str	r5, [sp, #12]
 804d6de:	f04f 0b01 	mov.w	fp, #1
 804d6e2:	46b8      	mov	r8, r7
 804d6e4:	4645      	mov	r5, r8
 804d6e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 804d6ea:	b10b      	cbz	r3, 804d6f0 <_vfiprintf_r+0x50>
 804d6ec:	2b25      	cmp	r3, #37	; 0x25
 804d6ee:	d154      	bne.n	804d79a <_vfiprintf_r+0xfa>
 804d6f0:	ebb8 0a07 	subs.w	sl, r8, r7
 804d6f4:	d00b      	beq.n	804d70e <_vfiprintf_r+0x6e>
 804d6f6:	4653      	mov	r3, sl
 804d6f8:	463a      	mov	r2, r7
 804d6fa:	4621      	mov	r1, r4
 804d6fc:	4630      	mov	r0, r6
 804d6fe:	f7ff ffbc 	bl	804d67a <__sfputs_r>
 804d702:	3001      	adds	r0, #1
 804d704:	f000 80c2 	beq.w	804d88c <_vfiprintf_r+0x1ec>
 804d708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804d70a:	4453      	add	r3, sl
 804d70c:	9309      	str	r3, [sp, #36]	; 0x24
 804d70e:	f898 3000 	ldrb.w	r3, [r8]
 804d712:	2b00      	cmp	r3, #0
 804d714:	f000 80ba 	beq.w	804d88c <_vfiprintf_r+0x1ec>
 804d718:	2300      	movs	r3, #0
 804d71a:	f04f 32ff 	mov.w	r2, #4294967295
 804d71e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 804d722:	9304      	str	r3, [sp, #16]
 804d724:	9307      	str	r3, [sp, #28]
 804d726:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 804d72a:	931a      	str	r3, [sp, #104]	; 0x68
 804d72c:	46a8      	mov	r8, r5
 804d72e:	2205      	movs	r2, #5
 804d730:	f818 1b01 	ldrb.w	r1, [r8], #1
 804d734:	485e      	ldr	r0, [pc, #376]	; (804d8b0 <_vfiprintf_r+0x210>)
 804d736:	f7f2 fe83 	bl	8040440 <memchr>
 804d73a:	9b04      	ldr	r3, [sp, #16]
 804d73c:	bb78      	cbnz	r0, 804d79e <_vfiprintf_r+0xfe>
 804d73e:	06d9      	lsls	r1, r3, #27
 804d740:	bf44      	itt	mi
 804d742:	2220      	movmi	r2, #32
 804d744:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 804d748:	071a      	lsls	r2, r3, #28
 804d74a:	bf44      	itt	mi
 804d74c:	222b      	movmi	r2, #43	; 0x2b
 804d74e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 804d752:	782a      	ldrb	r2, [r5, #0]
 804d754:	2a2a      	cmp	r2, #42	; 0x2a
 804d756:	d02a      	beq.n	804d7ae <_vfiprintf_r+0x10e>
 804d758:	9a07      	ldr	r2, [sp, #28]
 804d75a:	46a8      	mov	r8, r5
 804d75c:	2000      	movs	r0, #0
 804d75e:	250a      	movs	r5, #10
 804d760:	4641      	mov	r1, r8
 804d762:	f811 3b01 	ldrb.w	r3, [r1], #1
 804d766:	3b30      	subs	r3, #48	; 0x30
 804d768:	2b09      	cmp	r3, #9
 804d76a:	d969      	bls.n	804d840 <_vfiprintf_r+0x1a0>
 804d76c:	b360      	cbz	r0, 804d7c8 <_vfiprintf_r+0x128>
 804d76e:	e024      	b.n	804d7ba <_vfiprintf_r+0x11a>
 804d770:	4b50      	ldr	r3, [pc, #320]	; (804d8b4 <_vfiprintf_r+0x214>)
 804d772:	429c      	cmp	r4, r3
 804d774:	d101      	bne.n	804d77a <_vfiprintf_r+0xda>
 804d776:	68b4      	ldr	r4, [r6, #8]
 804d778:	e7a2      	b.n	804d6c0 <_vfiprintf_r+0x20>
 804d77a:	4b4f      	ldr	r3, [pc, #316]	; (804d8b8 <_vfiprintf_r+0x218>)
 804d77c:	429c      	cmp	r4, r3
 804d77e:	bf08      	it	eq
 804d780:	68f4      	ldreq	r4, [r6, #12]
 804d782:	e79d      	b.n	804d6c0 <_vfiprintf_r+0x20>
 804d784:	4621      	mov	r1, r4
 804d786:	4630      	mov	r0, r6
 804d788:	f7ff fb12 	bl	804cdb0 <__swsetup_r>
 804d78c:	2800      	cmp	r0, #0
 804d78e:	d09d      	beq.n	804d6cc <_vfiprintf_r+0x2c>
 804d790:	f04f 30ff 	mov.w	r0, #4294967295
 804d794:	b01d      	add	sp, #116	; 0x74
 804d796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804d79a:	46a8      	mov	r8, r5
 804d79c:	e7a2      	b.n	804d6e4 <_vfiprintf_r+0x44>
 804d79e:	4a44      	ldr	r2, [pc, #272]	; (804d8b0 <_vfiprintf_r+0x210>)
 804d7a0:	1a80      	subs	r0, r0, r2
 804d7a2:	fa0b f000 	lsl.w	r0, fp, r0
 804d7a6:	4318      	orrs	r0, r3
 804d7a8:	9004      	str	r0, [sp, #16]
 804d7aa:	4645      	mov	r5, r8
 804d7ac:	e7be      	b.n	804d72c <_vfiprintf_r+0x8c>
 804d7ae:	9a03      	ldr	r2, [sp, #12]
 804d7b0:	1d11      	adds	r1, r2, #4
 804d7b2:	6812      	ldr	r2, [r2, #0]
 804d7b4:	9103      	str	r1, [sp, #12]
 804d7b6:	2a00      	cmp	r2, #0
 804d7b8:	db01      	blt.n	804d7be <_vfiprintf_r+0x11e>
 804d7ba:	9207      	str	r2, [sp, #28]
 804d7bc:	e004      	b.n	804d7c8 <_vfiprintf_r+0x128>
 804d7be:	4252      	negs	r2, r2
 804d7c0:	f043 0302 	orr.w	r3, r3, #2
 804d7c4:	9207      	str	r2, [sp, #28]
 804d7c6:	9304      	str	r3, [sp, #16]
 804d7c8:	f898 3000 	ldrb.w	r3, [r8]
 804d7cc:	2b2e      	cmp	r3, #46	; 0x2e
 804d7ce:	d10e      	bne.n	804d7ee <_vfiprintf_r+0x14e>
 804d7d0:	f898 3001 	ldrb.w	r3, [r8, #1]
 804d7d4:	2b2a      	cmp	r3, #42	; 0x2a
 804d7d6:	d138      	bne.n	804d84a <_vfiprintf_r+0x1aa>
 804d7d8:	9b03      	ldr	r3, [sp, #12]
 804d7da:	1d1a      	adds	r2, r3, #4
 804d7dc:	681b      	ldr	r3, [r3, #0]
 804d7de:	9203      	str	r2, [sp, #12]
 804d7e0:	2b00      	cmp	r3, #0
 804d7e2:	bfb8      	it	lt
 804d7e4:	f04f 33ff 	movlt.w	r3, #4294967295
 804d7e8:	f108 0802 	add.w	r8, r8, #2
 804d7ec:	9305      	str	r3, [sp, #20]
 804d7ee:	4d33      	ldr	r5, [pc, #204]	; (804d8bc <_vfiprintf_r+0x21c>)
 804d7f0:	f898 1000 	ldrb.w	r1, [r8]
 804d7f4:	2203      	movs	r2, #3
 804d7f6:	4628      	mov	r0, r5
 804d7f8:	f7f2 fe22 	bl	8040440 <memchr>
 804d7fc:	b140      	cbz	r0, 804d810 <_vfiprintf_r+0x170>
 804d7fe:	2340      	movs	r3, #64	; 0x40
 804d800:	1b40      	subs	r0, r0, r5
 804d802:	fa03 f000 	lsl.w	r0, r3, r0
 804d806:	9b04      	ldr	r3, [sp, #16]
 804d808:	4303      	orrs	r3, r0
 804d80a:	f108 0801 	add.w	r8, r8, #1
 804d80e:	9304      	str	r3, [sp, #16]
 804d810:	f898 1000 	ldrb.w	r1, [r8]
 804d814:	482a      	ldr	r0, [pc, #168]	; (804d8c0 <_vfiprintf_r+0x220>)
 804d816:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 804d81a:	2206      	movs	r2, #6
 804d81c:	f108 0701 	add.w	r7, r8, #1
 804d820:	f7f2 fe0e 	bl	8040440 <memchr>
 804d824:	2800      	cmp	r0, #0
 804d826:	d037      	beq.n	804d898 <_vfiprintf_r+0x1f8>
 804d828:	4b26      	ldr	r3, [pc, #152]	; (804d8c4 <_vfiprintf_r+0x224>)
 804d82a:	bb1b      	cbnz	r3, 804d874 <_vfiprintf_r+0x1d4>
 804d82c:	9b03      	ldr	r3, [sp, #12]
 804d82e:	3307      	adds	r3, #7
 804d830:	f023 0307 	bic.w	r3, r3, #7
 804d834:	3308      	adds	r3, #8
 804d836:	9303      	str	r3, [sp, #12]
 804d838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804d83a:	444b      	add	r3, r9
 804d83c:	9309      	str	r3, [sp, #36]	; 0x24
 804d83e:	e750      	b.n	804d6e2 <_vfiprintf_r+0x42>
 804d840:	fb05 3202 	mla	r2, r5, r2, r3
 804d844:	2001      	movs	r0, #1
 804d846:	4688      	mov	r8, r1
 804d848:	e78a      	b.n	804d760 <_vfiprintf_r+0xc0>
 804d84a:	2300      	movs	r3, #0
 804d84c:	f108 0801 	add.w	r8, r8, #1
 804d850:	9305      	str	r3, [sp, #20]
 804d852:	4619      	mov	r1, r3
 804d854:	250a      	movs	r5, #10
 804d856:	4640      	mov	r0, r8
 804d858:	f810 2b01 	ldrb.w	r2, [r0], #1
 804d85c:	3a30      	subs	r2, #48	; 0x30
 804d85e:	2a09      	cmp	r2, #9
 804d860:	d903      	bls.n	804d86a <_vfiprintf_r+0x1ca>
 804d862:	2b00      	cmp	r3, #0
 804d864:	d0c3      	beq.n	804d7ee <_vfiprintf_r+0x14e>
 804d866:	9105      	str	r1, [sp, #20]
 804d868:	e7c1      	b.n	804d7ee <_vfiprintf_r+0x14e>
 804d86a:	fb05 2101 	mla	r1, r5, r1, r2
 804d86e:	2301      	movs	r3, #1
 804d870:	4680      	mov	r8, r0
 804d872:	e7f0      	b.n	804d856 <_vfiprintf_r+0x1b6>
 804d874:	ab03      	add	r3, sp, #12
 804d876:	9300      	str	r3, [sp, #0]
 804d878:	4622      	mov	r2, r4
 804d87a:	4b13      	ldr	r3, [pc, #76]	; (804d8c8 <_vfiprintf_r+0x228>)
 804d87c:	a904      	add	r1, sp, #16
 804d87e:	4630      	mov	r0, r6
 804d880:	f3af 8000 	nop.w
 804d884:	f1b0 3fff 	cmp.w	r0, #4294967295
 804d888:	4681      	mov	r9, r0
 804d88a:	d1d5      	bne.n	804d838 <_vfiprintf_r+0x198>
 804d88c:	89a3      	ldrh	r3, [r4, #12]
 804d88e:	065b      	lsls	r3, r3, #25
 804d890:	f53f af7e 	bmi.w	804d790 <_vfiprintf_r+0xf0>
 804d894:	9809      	ldr	r0, [sp, #36]	; 0x24
 804d896:	e77d      	b.n	804d794 <_vfiprintf_r+0xf4>
 804d898:	ab03      	add	r3, sp, #12
 804d89a:	9300      	str	r3, [sp, #0]
 804d89c:	4622      	mov	r2, r4
 804d89e:	4b0a      	ldr	r3, [pc, #40]	; (804d8c8 <_vfiprintf_r+0x228>)
 804d8a0:	a904      	add	r1, sp, #16
 804d8a2:	4630      	mov	r0, r6
 804d8a4:	f000 f888 	bl	804d9b8 <_printf_i>
 804d8a8:	e7ec      	b.n	804d884 <_vfiprintf_r+0x1e4>
 804d8aa:	bf00      	nop
 804d8ac:	0804edc4 	.word	0x0804edc4
 804d8b0:	0804ee04 	.word	0x0804ee04
 804d8b4:	0804ede4 	.word	0x0804ede4
 804d8b8:	0804eda4 	.word	0x0804eda4
 804d8bc:	0804ee0a 	.word	0x0804ee0a
 804d8c0:	0804ee0e 	.word	0x0804ee0e
 804d8c4:	00000000 	.word	0x00000000
 804d8c8:	0804d67b 	.word	0x0804d67b

0804d8cc <_printf_common>:
 804d8cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804d8d0:	4691      	mov	r9, r2
 804d8d2:	461f      	mov	r7, r3
 804d8d4:	688a      	ldr	r2, [r1, #8]
 804d8d6:	690b      	ldr	r3, [r1, #16]
 804d8d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 804d8dc:	4293      	cmp	r3, r2
 804d8de:	bfb8      	it	lt
 804d8e0:	4613      	movlt	r3, r2
 804d8e2:	f8c9 3000 	str.w	r3, [r9]
 804d8e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 804d8ea:	4606      	mov	r6, r0
 804d8ec:	460c      	mov	r4, r1
 804d8ee:	b112      	cbz	r2, 804d8f6 <_printf_common+0x2a>
 804d8f0:	3301      	adds	r3, #1
 804d8f2:	f8c9 3000 	str.w	r3, [r9]
 804d8f6:	6823      	ldr	r3, [r4, #0]
 804d8f8:	0699      	lsls	r1, r3, #26
 804d8fa:	bf42      	ittt	mi
 804d8fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 804d900:	3302      	addmi	r3, #2
 804d902:	f8c9 3000 	strmi.w	r3, [r9]
 804d906:	6825      	ldr	r5, [r4, #0]
 804d908:	f015 0506 	ands.w	r5, r5, #6
 804d90c:	d107      	bne.n	804d91e <_printf_common+0x52>
 804d90e:	f104 0a19 	add.w	sl, r4, #25
 804d912:	68e3      	ldr	r3, [r4, #12]
 804d914:	f8d9 2000 	ldr.w	r2, [r9]
 804d918:	1a9b      	subs	r3, r3, r2
 804d91a:	42ab      	cmp	r3, r5
 804d91c:	dc28      	bgt.n	804d970 <_printf_common+0xa4>
 804d91e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 804d922:	6822      	ldr	r2, [r4, #0]
 804d924:	3300      	adds	r3, #0
 804d926:	bf18      	it	ne
 804d928:	2301      	movne	r3, #1
 804d92a:	0692      	lsls	r2, r2, #26
 804d92c:	d42d      	bmi.n	804d98a <_printf_common+0xbe>
 804d92e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 804d932:	4639      	mov	r1, r7
 804d934:	4630      	mov	r0, r6
 804d936:	47c0      	blx	r8
 804d938:	3001      	adds	r0, #1
 804d93a:	d020      	beq.n	804d97e <_printf_common+0xb2>
 804d93c:	6823      	ldr	r3, [r4, #0]
 804d93e:	68e5      	ldr	r5, [r4, #12]
 804d940:	f8d9 2000 	ldr.w	r2, [r9]
 804d944:	f003 0306 	and.w	r3, r3, #6
 804d948:	2b04      	cmp	r3, #4
 804d94a:	bf08      	it	eq
 804d94c:	1aad      	subeq	r5, r5, r2
 804d94e:	68a3      	ldr	r3, [r4, #8]
 804d950:	6922      	ldr	r2, [r4, #16]
 804d952:	bf0c      	ite	eq
 804d954:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 804d958:	2500      	movne	r5, #0
 804d95a:	4293      	cmp	r3, r2
 804d95c:	bfc4      	itt	gt
 804d95e:	1a9b      	subgt	r3, r3, r2
 804d960:	18ed      	addgt	r5, r5, r3
 804d962:	f04f 0900 	mov.w	r9, #0
 804d966:	341a      	adds	r4, #26
 804d968:	454d      	cmp	r5, r9
 804d96a:	d11a      	bne.n	804d9a2 <_printf_common+0xd6>
 804d96c:	2000      	movs	r0, #0
 804d96e:	e008      	b.n	804d982 <_printf_common+0xb6>
 804d970:	2301      	movs	r3, #1
 804d972:	4652      	mov	r2, sl
 804d974:	4639      	mov	r1, r7
 804d976:	4630      	mov	r0, r6
 804d978:	47c0      	blx	r8
 804d97a:	3001      	adds	r0, #1
 804d97c:	d103      	bne.n	804d986 <_printf_common+0xba>
 804d97e:	f04f 30ff 	mov.w	r0, #4294967295
 804d982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804d986:	3501      	adds	r5, #1
 804d988:	e7c3      	b.n	804d912 <_printf_common+0x46>
 804d98a:	18e1      	adds	r1, r4, r3
 804d98c:	1c5a      	adds	r2, r3, #1
 804d98e:	2030      	movs	r0, #48	; 0x30
 804d990:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 804d994:	4422      	add	r2, r4
 804d996:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 804d99a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 804d99e:	3302      	adds	r3, #2
 804d9a0:	e7c5      	b.n	804d92e <_printf_common+0x62>
 804d9a2:	2301      	movs	r3, #1
 804d9a4:	4622      	mov	r2, r4
 804d9a6:	4639      	mov	r1, r7
 804d9a8:	4630      	mov	r0, r6
 804d9aa:	47c0      	blx	r8
 804d9ac:	3001      	adds	r0, #1
 804d9ae:	d0e6      	beq.n	804d97e <_printf_common+0xb2>
 804d9b0:	f109 0901 	add.w	r9, r9, #1
 804d9b4:	e7d8      	b.n	804d968 <_printf_common+0x9c>
	...

0804d9b8 <_printf_i>:
 804d9b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 804d9bc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 804d9c0:	460c      	mov	r4, r1
 804d9c2:	7e09      	ldrb	r1, [r1, #24]
 804d9c4:	b085      	sub	sp, #20
 804d9c6:	296e      	cmp	r1, #110	; 0x6e
 804d9c8:	4617      	mov	r7, r2
 804d9ca:	4606      	mov	r6, r0
 804d9cc:	4698      	mov	r8, r3
 804d9ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 804d9d0:	f000 80b3 	beq.w	804db3a <_printf_i+0x182>
 804d9d4:	d822      	bhi.n	804da1c <_printf_i+0x64>
 804d9d6:	2963      	cmp	r1, #99	; 0x63
 804d9d8:	d036      	beq.n	804da48 <_printf_i+0x90>
 804d9da:	d80a      	bhi.n	804d9f2 <_printf_i+0x3a>
 804d9dc:	2900      	cmp	r1, #0
 804d9de:	f000 80b9 	beq.w	804db54 <_printf_i+0x19c>
 804d9e2:	2958      	cmp	r1, #88	; 0x58
 804d9e4:	f000 8083 	beq.w	804daee <_printf_i+0x136>
 804d9e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 804d9ec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 804d9f0:	e032      	b.n	804da58 <_printf_i+0xa0>
 804d9f2:	2964      	cmp	r1, #100	; 0x64
 804d9f4:	d001      	beq.n	804d9fa <_printf_i+0x42>
 804d9f6:	2969      	cmp	r1, #105	; 0x69
 804d9f8:	d1f6      	bne.n	804d9e8 <_printf_i+0x30>
 804d9fa:	6820      	ldr	r0, [r4, #0]
 804d9fc:	6813      	ldr	r3, [r2, #0]
 804d9fe:	0605      	lsls	r5, r0, #24
 804da00:	f103 0104 	add.w	r1, r3, #4
 804da04:	d52a      	bpl.n	804da5c <_printf_i+0xa4>
 804da06:	681b      	ldr	r3, [r3, #0]
 804da08:	6011      	str	r1, [r2, #0]
 804da0a:	2b00      	cmp	r3, #0
 804da0c:	da03      	bge.n	804da16 <_printf_i+0x5e>
 804da0e:	222d      	movs	r2, #45	; 0x2d
 804da10:	425b      	negs	r3, r3
 804da12:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 804da16:	486f      	ldr	r0, [pc, #444]	; (804dbd4 <_printf_i+0x21c>)
 804da18:	220a      	movs	r2, #10
 804da1a:	e039      	b.n	804da90 <_printf_i+0xd8>
 804da1c:	2973      	cmp	r1, #115	; 0x73
 804da1e:	f000 809d 	beq.w	804db5c <_printf_i+0x1a4>
 804da22:	d808      	bhi.n	804da36 <_printf_i+0x7e>
 804da24:	296f      	cmp	r1, #111	; 0x6f
 804da26:	d020      	beq.n	804da6a <_printf_i+0xb2>
 804da28:	2970      	cmp	r1, #112	; 0x70
 804da2a:	d1dd      	bne.n	804d9e8 <_printf_i+0x30>
 804da2c:	6823      	ldr	r3, [r4, #0]
 804da2e:	f043 0320 	orr.w	r3, r3, #32
 804da32:	6023      	str	r3, [r4, #0]
 804da34:	e003      	b.n	804da3e <_printf_i+0x86>
 804da36:	2975      	cmp	r1, #117	; 0x75
 804da38:	d017      	beq.n	804da6a <_printf_i+0xb2>
 804da3a:	2978      	cmp	r1, #120	; 0x78
 804da3c:	d1d4      	bne.n	804d9e8 <_printf_i+0x30>
 804da3e:	2378      	movs	r3, #120	; 0x78
 804da40:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 804da44:	4864      	ldr	r0, [pc, #400]	; (804dbd8 <_printf_i+0x220>)
 804da46:	e055      	b.n	804daf4 <_printf_i+0x13c>
 804da48:	6813      	ldr	r3, [r2, #0]
 804da4a:	1d19      	adds	r1, r3, #4
 804da4c:	681b      	ldr	r3, [r3, #0]
 804da4e:	6011      	str	r1, [r2, #0]
 804da50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 804da54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 804da58:	2301      	movs	r3, #1
 804da5a:	e08c      	b.n	804db76 <_printf_i+0x1be>
 804da5c:	681b      	ldr	r3, [r3, #0]
 804da5e:	6011      	str	r1, [r2, #0]
 804da60:	f010 0f40 	tst.w	r0, #64	; 0x40
 804da64:	bf18      	it	ne
 804da66:	b21b      	sxthne	r3, r3
 804da68:	e7cf      	b.n	804da0a <_printf_i+0x52>
 804da6a:	6813      	ldr	r3, [r2, #0]
 804da6c:	6825      	ldr	r5, [r4, #0]
 804da6e:	1d18      	adds	r0, r3, #4
 804da70:	6010      	str	r0, [r2, #0]
 804da72:	0628      	lsls	r0, r5, #24
 804da74:	d501      	bpl.n	804da7a <_printf_i+0xc2>
 804da76:	681b      	ldr	r3, [r3, #0]
 804da78:	e002      	b.n	804da80 <_printf_i+0xc8>
 804da7a:	0668      	lsls	r0, r5, #25
 804da7c:	d5fb      	bpl.n	804da76 <_printf_i+0xbe>
 804da7e:	881b      	ldrh	r3, [r3, #0]
 804da80:	4854      	ldr	r0, [pc, #336]	; (804dbd4 <_printf_i+0x21c>)
 804da82:	296f      	cmp	r1, #111	; 0x6f
 804da84:	bf14      	ite	ne
 804da86:	220a      	movne	r2, #10
 804da88:	2208      	moveq	r2, #8
 804da8a:	2100      	movs	r1, #0
 804da8c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 804da90:	6865      	ldr	r5, [r4, #4]
 804da92:	60a5      	str	r5, [r4, #8]
 804da94:	2d00      	cmp	r5, #0
 804da96:	f2c0 8095 	blt.w	804dbc4 <_printf_i+0x20c>
 804da9a:	6821      	ldr	r1, [r4, #0]
 804da9c:	f021 0104 	bic.w	r1, r1, #4
 804daa0:	6021      	str	r1, [r4, #0]
 804daa2:	2b00      	cmp	r3, #0
 804daa4:	d13d      	bne.n	804db22 <_printf_i+0x16a>
 804daa6:	2d00      	cmp	r5, #0
 804daa8:	f040 808e 	bne.w	804dbc8 <_printf_i+0x210>
 804daac:	4665      	mov	r5, ip
 804daae:	2a08      	cmp	r2, #8
 804dab0:	d10b      	bne.n	804daca <_printf_i+0x112>
 804dab2:	6823      	ldr	r3, [r4, #0]
 804dab4:	07db      	lsls	r3, r3, #31
 804dab6:	d508      	bpl.n	804daca <_printf_i+0x112>
 804dab8:	6923      	ldr	r3, [r4, #16]
 804daba:	6862      	ldr	r2, [r4, #4]
 804dabc:	429a      	cmp	r2, r3
 804dabe:	bfde      	ittt	le
 804dac0:	2330      	movle	r3, #48	; 0x30
 804dac2:	f805 3c01 	strble.w	r3, [r5, #-1]
 804dac6:	f105 35ff 	addle.w	r5, r5, #4294967295
 804daca:	ebac 0305 	sub.w	r3, ip, r5
 804dace:	6123      	str	r3, [r4, #16]
 804dad0:	f8cd 8000 	str.w	r8, [sp]
 804dad4:	463b      	mov	r3, r7
 804dad6:	aa03      	add	r2, sp, #12
 804dad8:	4621      	mov	r1, r4
 804dada:	4630      	mov	r0, r6
 804dadc:	f7ff fef6 	bl	804d8cc <_printf_common>
 804dae0:	3001      	adds	r0, #1
 804dae2:	d14d      	bne.n	804db80 <_printf_i+0x1c8>
 804dae4:	f04f 30ff 	mov.w	r0, #4294967295
 804dae8:	b005      	add	sp, #20
 804daea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 804daee:	4839      	ldr	r0, [pc, #228]	; (804dbd4 <_printf_i+0x21c>)
 804daf0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 804daf4:	6813      	ldr	r3, [r2, #0]
 804daf6:	6821      	ldr	r1, [r4, #0]
 804daf8:	1d1d      	adds	r5, r3, #4
 804dafa:	681b      	ldr	r3, [r3, #0]
 804dafc:	6015      	str	r5, [r2, #0]
 804dafe:	060a      	lsls	r2, r1, #24
 804db00:	d50b      	bpl.n	804db1a <_printf_i+0x162>
 804db02:	07ca      	lsls	r2, r1, #31
 804db04:	bf44      	itt	mi
 804db06:	f041 0120 	orrmi.w	r1, r1, #32
 804db0a:	6021      	strmi	r1, [r4, #0]
 804db0c:	b91b      	cbnz	r3, 804db16 <_printf_i+0x15e>
 804db0e:	6822      	ldr	r2, [r4, #0]
 804db10:	f022 0220 	bic.w	r2, r2, #32
 804db14:	6022      	str	r2, [r4, #0]
 804db16:	2210      	movs	r2, #16
 804db18:	e7b7      	b.n	804da8a <_printf_i+0xd2>
 804db1a:	064d      	lsls	r5, r1, #25
 804db1c:	bf48      	it	mi
 804db1e:	b29b      	uxthmi	r3, r3
 804db20:	e7ef      	b.n	804db02 <_printf_i+0x14a>
 804db22:	4665      	mov	r5, ip
 804db24:	fbb3 f1f2 	udiv	r1, r3, r2
 804db28:	fb02 3311 	mls	r3, r2, r1, r3
 804db2c:	5cc3      	ldrb	r3, [r0, r3]
 804db2e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 804db32:	460b      	mov	r3, r1
 804db34:	2900      	cmp	r1, #0
 804db36:	d1f5      	bne.n	804db24 <_printf_i+0x16c>
 804db38:	e7b9      	b.n	804daae <_printf_i+0xf6>
 804db3a:	6813      	ldr	r3, [r2, #0]
 804db3c:	6825      	ldr	r5, [r4, #0]
 804db3e:	6961      	ldr	r1, [r4, #20]
 804db40:	1d18      	adds	r0, r3, #4
 804db42:	6010      	str	r0, [r2, #0]
 804db44:	0628      	lsls	r0, r5, #24
 804db46:	681b      	ldr	r3, [r3, #0]
 804db48:	d501      	bpl.n	804db4e <_printf_i+0x196>
 804db4a:	6019      	str	r1, [r3, #0]
 804db4c:	e002      	b.n	804db54 <_printf_i+0x19c>
 804db4e:	066a      	lsls	r2, r5, #25
 804db50:	d5fb      	bpl.n	804db4a <_printf_i+0x192>
 804db52:	8019      	strh	r1, [r3, #0]
 804db54:	2300      	movs	r3, #0
 804db56:	6123      	str	r3, [r4, #16]
 804db58:	4665      	mov	r5, ip
 804db5a:	e7b9      	b.n	804dad0 <_printf_i+0x118>
 804db5c:	6813      	ldr	r3, [r2, #0]
 804db5e:	1d19      	adds	r1, r3, #4
 804db60:	6011      	str	r1, [r2, #0]
 804db62:	681d      	ldr	r5, [r3, #0]
 804db64:	6862      	ldr	r2, [r4, #4]
 804db66:	2100      	movs	r1, #0
 804db68:	4628      	mov	r0, r5
 804db6a:	f7f2 fc69 	bl	8040440 <memchr>
 804db6e:	b108      	cbz	r0, 804db74 <_printf_i+0x1bc>
 804db70:	1b40      	subs	r0, r0, r5
 804db72:	6060      	str	r0, [r4, #4]
 804db74:	6863      	ldr	r3, [r4, #4]
 804db76:	6123      	str	r3, [r4, #16]
 804db78:	2300      	movs	r3, #0
 804db7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 804db7e:	e7a7      	b.n	804dad0 <_printf_i+0x118>
 804db80:	6923      	ldr	r3, [r4, #16]
 804db82:	462a      	mov	r2, r5
 804db84:	4639      	mov	r1, r7
 804db86:	4630      	mov	r0, r6
 804db88:	47c0      	blx	r8
 804db8a:	3001      	adds	r0, #1
 804db8c:	d0aa      	beq.n	804dae4 <_printf_i+0x12c>
 804db8e:	6823      	ldr	r3, [r4, #0]
 804db90:	079b      	lsls	r3, r3, #30
 804db92:	d413      	bmi.n	804dbbc <_printf_i+0x204>
 804db94:	68e0      	ldr	r0, [r4, #12]
 804db96:	9b03      	ldr	r3, [sp, #12]
 804db98:	4298      	cmp	r0, r3
 804db9a:	bfb8      	it	lt
 804db9c:	4618      	movlt	r0, r3
 804db9e:	e7a3      	b.n	804dae8 <_printf_i+0x130>
 804dba0:	2301      	movs	r3, #1
 804dba2:	464a      	mov	r2, r9
 804dba4:	4639      	mov	r1, r7
 804dba6:	4630      	mov	r0, r6
 804dba8:	47c0      	blx	r8
 804dbaa:	3001      	adds	r0, #1
 804dbac:	d09a      	beq.n	804dae4 <_printf_i+0x12c>
 804dbae:	3501      	adds	r5, #1
 804dbb0:	68e3      	ldr	r3, [r4, #12]
 804dbb2:	9a03      	ldr	r2, [sp, #12]
 804dbb4:	1a9b      	subs	r3, r3, r2
 804dbb6:	42ab      	cmp	r3, r5
 804dbb8:	dcf2      	bgt.n	804dba0 <_printf_i+0x1e8>
 804dbba:	e7eb      	b.n	804db94 <_printf_i+0x1dc>
 804dbbc:	2500      	movs	r5, #0
 804dbbe:	f104 0919 	add.w	r9, r4, #25
 804dbc2:	e7f5      	b.n	804dbb0 <_printf_i+0x1f8>
 804dbc4:	2b00      	cmp	r3, #0
 804dbc6:	d1ac      	bne.n	804db22 <_printf_i+0x16a>
 804dbc8:	7803      	ldrb	r3, [r0, #0]
 804dbca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 804dbce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 804dbd2:	e76c      	b.n	804daae <_printf_i+0xf6>
 804dbd4:	0804ee15 	.word	0x0804ee15
 804dbd8:	0804ee26 	.word	0x0804ee26

0804dbdc <_sbrk_r>:
 804dbdc:	b538      	push	{r3, r4, r5, lr}
 804dbde:	4c06      	ldr	r4, [pc, #24]	; (804dbf8 <_sbrk_r+0x1c>)
 804dbe0:	2300      	movs	r3, #0
 804dbe2:	4605      	mov	r5, r0
 804dbe4:	4608      	mov	r0, r1
 804dbe6:	6023      	str	r3, [r4, #0]
 804dbe8:	f000 fa74 	bl	804e0d4 <_sbrk>
 804dbec:	1c43      	adds	r3, r0, #1
 804dbee:	d102      	bne.n	804dbf6 <_sbrk_r+0x1a>
 804dbf0:	6823      	ldr	r3, [r4, #0]
 804dbf2:	b103      	cbz	r3, 804dbf6 <_sbrk_r+0x1a>
 804dbf4:	602b      	str	r3, [r5, #0]
 804dbf6:	bd38      	pop	{r3, r4, r5, pc}
 804dbf8:	2000c388 	.word	0x2000c388

0804dbfc <__sread>:
 804dbfc:	b510      	push	{r4, lr}
 804dbfe:	460c      	mov	r4, r1
 804dc00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804dc04:	f000 f8d6 	bl	804ddb4 <_read_r>
 804dc08:	2800      	cmp	r0, #0
 804dc0a:	bfab      	itete	ge
 804dc0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 804dc0e:	89a3      	ldrhlt	r3, [r4, #12]
 804dc10:	181b      	addge	r3, r3, r0
 804dc12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 804dc16:	bfac      	ite	ge
 804dc18:	6563      	strge	r3, [r4, #84]	; 0x54
 804dc1a:	81a3      	strhlt	r3, [r4, #12]
 804dc1c:	bd10      	pop	{r4, pc}

0804dc1e <__swrite>:
 804dc1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804dc22:	461f      	mov	r7, r3
 804dc24:	898b      	ldrh	r3, [r1, #12]
 804dc26:	05db      	lsls	r3, r3, #23
 804dc28:	4605      	mov	r5, r0
 804dc2a:	460c      	mov	r4, r1
 804dc2c:	4616      	mov	r6, r2
 804dc2e:	d505      	bpl.n	804dc3c <__swrite+0x1e>
 804dc30:	2302      	movs	r3, #2
 804dc32:	2200      	movs	r2, #0
 804dc34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804dc38:	f000 f868 	bl	804dd0c <_lseek_r>
 804dc3c:	89a3      	ldrh	r3, [r4, #12]
 804dc3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 804dc42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 804dc46:	81a3      	strh	r3, [r4, #12]
 804dc48:	4632      	mov	r2, r6
 804dc4a:	463b      	mov	r3, r7
 804dc4c:	4628      	mov	r0, r5
 804dc4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 804dc52:	f000 b817 	b.w	804dc84 <_write_r>

0804dc56 <__sseek>:
 804dc56:	b510      	push	{r4, lr}
 804dc58:	460c      	mov	r4, r1
 804dc5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804dc5e:	f000 f855 	bl	804dd0c <_lseek_r>
 804dc62:	1c43      	adds	r3, r0, #1
 804dc64:	89a3      	ldrh	r3, [r4, #12]
 804dc66:	bf15      	itete	ne
 804dc68:	6560      	strne	r0, [r4, #84]	; 0x54
 804dc6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 804dc6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 804dc72:	81a3      	strheq	r3, [r4, #12]
 804dc74:	bf18      	it	ne
 804dc76:	81a3      	strhne	r3, [r4, #12]
 804dc78:	bd10      	pop	{r4, pc}

0804dc7a <__sclose>:
 804dc7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804dc7e:	f000 b813 	b.w	804dca8 <_close_r>
	...

0804dc84 <_write_r>:
 804dc84:	b538      	push	{r3, r4, r5, lr}
 804dc86:	4c07      	ldr	r4, [pc, #28]	; (804dca4 <_write_r+0x20>)
 804dc88:	4605      	mov	r5, r0
 804dc8a:	4608      	mov	r0, r1
 804dc8c:	4611      	mov	r1, r2
 804dc8e:	2200      	movs	r2, #0
 804dc90:	6022      	str	r2, [r4, #0]
 804dc92:	461a      	mov	r2, r3
 804dc94:	f000 fa2c 	bl	804e0f0 <_write>
 804dc98:	1c43      	adds	r3, r0, #1
 804dc9a:	d102      	bne.n	804dca2 <_write_r+0x1e>
 804dc9c:	6823      	ldr	r3, [r4, #0]
 804dc9e:	b103      	cbz	r3, 804dca2 <_write_r+0x1e>
 804dca0:	602b      	str	r3, [r5, #0]
 804dca2:	bd38      	pop	{r3, r4, r5, pc}
 804dca4:	2000c388 	.word	0x2000c388

0804dca8 <_close_r>:
 804dca8:	b538      	push	{r3, r4, r5, lr}
 804dcaa:	4c06      	ldr	r4, [pc, #24]	; (804dcc4 <_close_r+0x1c>)
 804dcac:	2300      	movs	r3, #0
 804dcae:	4605      	mov	r5, r0
 804dcb0:	4608      	mov	r0, r1
 804dcb2:	6023      	str	r3, [r4, #0]
 804dcb4:	f000 f9e6 	bl	804e084 <_close>
 804dcb8:	1c43      	adds	r3, r0, #1
 804dcba:	d102      	bne.n	804dcc2 <_close_r+0x1a>
 804dcbc:	6823      	ldr	r3, [r4, #0]
 804dcbe:	b103      	cbz	r3, 804dcc2 <_close_r+0x1a>
 804dcc0:	602b      	str	r3, [r5, #0]
 804dcc2:	bd38      	pop	{r3, r4, r5, pc}
 804dcc4:	2000c388 	.word	0x2000c388

0804dcc8 <_fstat_r>:
 804dcc8:	b538      	push	{r3, r4, r5, lr}
 804dcca:	4c07      	ldr	r4, [pc, #28]	; (804dce8 <_fstat_r+0x20>)
 804dccc:	2300      	movs	r3, #0
 804dcce:	4605      	mov	r5, r0
 804dcd0:	4608      	mov	r0, r1
 804dcd2:	4611      	mov	r1, r2
 804dcd4:	6023      	str	r3, [r4, #0]
 804dcd6:	f000 f9dd 	bl	804e094 <_fstat>
 804dcda:	1c43      	adds	r3, r0, #1
 804dcdc:	d102      	bne.n	804dce4 <_fstat_r+0x1c>
 804dcde:	6823      	ldr	r3, [r4, #0]
 804dce0:	b103      	cbz	r3, 804dce4 <_fstat_r+0x1c>
 804dce2:	602b      	str	r3, [r5, #0]
 804dce4:	bd38      	pop	{r3, r4, r5, pc}
 804dce6:	bf00      	nop
 804dce8:	2000c388 	.word	0x2000c388

0804dcec <_isatty_r>:
 804dcec:	b538      	push	{r3, r4, r5, lr}
 804dcee:	4c06      	ldr	r4, [pc, #24]	; (804dd08 <_isatty_r+0x1c>)
 804dcf0:	2300      	movs	r3, #0
 804dcf2:	4605      	mov	r5, r0
 804dcf4:	4608      	mov	r0, r1
 804dcf6:	6023      	str	r3, [r4, #0]
 804dcf8:	f000 f9d4 	bl	804e0a4 <_isatty>
 804dcfc:	1c43      	adds	r3, r0, #1
 804dcfe:	d102      	bne.n	804dd06 <_isatty_r+0x1a>
 804dd00:	6823      	ldr	r3, [r4, #0]
 804dd02:	b103      	cbz	r3, 804dd06 <_isatty_r+0x1a>
 804dd04:	602b      	str	r3, [r5, #0]
 804dd06:	bd38      	pop	{r3, r4, r5, pc}
 804dd08:	2000c388 	.word	0x2000c388

0804dd0c <_lseek_r>:
 804dd0c:	b538      	push	{r3, r4, r5, lr}
 804dd0e:	4c07      	ldr	r4, [pc, #28]	; (804dd2c <_lseek_r+0x20>)
 804dd10:	4605      	mov	r5, r0
 804dd12:	4608      	mov	r0, r1
 804dd14:	4611      	mov	r1, r2
 804dd16:	2200      	movs	r2, #0
 804dd18:	6022      	str	r2, [r4, #0]
 804dd1a:	461a      	mov	r2, r3
 804dd1c:	f000 f9ca 	bl	804e0b4 <_lseek>
 804dd20:	1c43      	adds	r3, r0, #1
 804dd22:	d102      	bne.n	804dd2a <_lseek_r+0x1e>
 804dd24:	6823      	ldr	r3, [r4, #0]
 804dd26:	b103      	cbz	r3, 804dd2a <_lseek_r+0x1e>
 804dd28:	602b      	str	r3, [r5, #0]
 804dd2a:	bd38      	pop	{r3, r4, r5, pc}
 804dd2c:	2000c388 	.word	0x2000c388

0804dd30 <memmove>:
 804dd30:	4288      	cmp	r0, r1
 804dd32:	b510      	push	{r4, lr}
 804dd34:	eb01 0302 	add.w	r3, r1, r2
 804dd38:	d807      	bhi.n	804dd4a <memmove+0x1a>
 804dd3a:	1e42      	subs	r2, r0, #1
 804dd3c:	4299      	cmp	r1, r3
 804dd3e:	d00a      	beq.n	804dd56 <memmove+0x26>
 804dd40:	f811 4b01 	ldrb.w	r4, [r1], #1
 804dd44:	f802 4f01 	strb.w	r4, [r2, #1]!
 804dd48:	e7f8      	b.n	804dd3c <memmove+0xc>
 804dd4a:	4283      	cmp	r3, r0
 804dd4c:	d9f5      	bls.n	804dd3a <memmove+0xa>
 804dd4e:	1881      	adds	r1, r0, r2
 804dd50:	1ad2      	subs	r2, r2, r3
 804dd52:	42d3      	cmn	r3, r2
 804dd54:	d100      	bne.n	804dd58 <memmove+0x28>
 804dd56:	bd10      	pop	{r4, pc}
 804dd58:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 804dd5c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 804dd60:	e7f7      	b.n	804dd52 <memmove+0x22>

0804dd62 <__malloc_lock>:
 804dd62:	4770      	bx	lr

0804dd64 <__malloc_unlock>:
 804dd64:	4770      	bx	lr

0804dd66 <_realloc_r>:
 804dd66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804dd68:	4607      	mov	r7, r0
 804dd6a:	4614      	mov	r4, r2
 804dd6c:	460e      	mov	r6, r1
 804dd6e:	b921      	cbnz	r1, 804dd7a <_realloc_r+0x14>
 804dd70:	4611      	mov	r1, r2
 804dd72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 804dd76:	f7ff babd 	b.w	804d2f4 <_malloc_r>
 804dd7a:	b922      	cbnz	r2, 804dd86 <_realloc_r+0x20>
 804dd7c:	f7ff fa6c 	bl	804d258 <_free_r>
 804dd80:	4625      	mov	r5, r4
 804dd82:	4628      	mov	r0, r5
 804dd84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804dd86:	f000 f827 	bl	804ddd8 <_malloc_usable_size_r>
 804dd8a:	42a0      	cmp	r0, r4
 804dd8c:	d20f      	bcs.n	804ddae <_realloc_r+0x48>
 804dd8e:	4621      	mov	r1, r4
 804dd90:	4638      	mov	r0, r7
 804dd92:	f7ff faaf 	bl	804d2f4 <_malloc_r>
 804dd96:	4605      	mov	r5, r0
 804dd98:	2800      	cmp	r0, #0
 804dd9a:	d0f2      	beq.n	804dd82 <_realloc_r+0x1c>
 804dd9c:	4631      	mov	r1, r6
 804dd9e:	4622      	mov	r2, r4
 804dda0:	f7fe fe3d 	bl	804ca1e <memcpy>
 804dda4:	4631      	mov	r1, r6
 804dda6:	4638      	mov	r0, r7
 804dda8:	f7ff fa56 	bl	804d258 <_free_r>
 804ddac:	e7e9      	b.n	804dd82 <_realloc_r+0x1c>
 804ddae:	4635      	mov	r5, r6
 804ddb0:	e7e7      	b.n	804dd82 <_realloc_r+0x1c>
	...

0804ddb4 <_read_r>:
 804ddb4:	b538      	push	{r3, r4, r5, lr}
 804ddb6:	4c07      	ldr	r4, [pc, #28]	; (804ddd4 <_read_r+0x20>)
 804ddb8:	4605      	mov	r5, r0
 804ddba:	4608      	mov	r0, r1
 804ddbc:	4611      	mov	r1, r2
 804ddbe:	2200      	movs	r2, #0
 804ddc0:	6022      	str	r2, [r4, #0]
 804ddc2:	461a      	mov	r2, r3
 804ddc4:	f000 f97e 	bl	804e0c4 <_read>
 804ddc8:	1c43      	adds	r3, r0, #1
 804ddca:	d102      	bne.n	804ddd2 <_read_r+0x1e>
 804ddcc:	6823      	ldr	r3, [r4, #0]
 804ddce:	b103      	cbz	r3, 804ddd2 <_read_r+0x1e>
 804ddd0:	602b      	str	r3, [r5, #0]
 804ddd2:	bd38      	pop	{r3, r4, r5, pc}
 804ddd4:	2000c388 	.word	0x2000c388

0804ddd8 <_malloc_usable_size_r>:
 804ddd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 804dddc:	1f18      	subs	r0, r3, #4
 804ddde:	2b00      	cmp	r3, #0
 804dde0:	bfbc      	itt	lt
 804dde2:	580b      	ldrlt	r3, [r1, r0]
 804dde4:	18c0      	addlt	r0, r0, r3
 804dde6:	4770      	bx	lr

0804dde8 <ceil>:
 804dde8:	ec51 0b10 	vmov	r0, r1, d0
 804ddec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804ddf0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 804ddf4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 804ddf8:	2e13      	cmp	r6, #19
 804ddfa:	460c      	mov	r4, r1
 804ddfc:	ee10 5a10 	vmov	r5, s0
 804de00:	4680      	mov	r8, r0
 804de02:	dc30      	bgt.n	804de66 <ceil+0x7e>
 804de04:	2e00      	cmp	r6, #0
 804de06:	da12      	bge.n	804de2e <ceil+0x46>
 804de08:	a333      	add	r3, pc, #204	; (adr r3, 804ded8 <ceil+0xf0>)
 804de0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804de0e:	f7f2 fb6d 	bl	80404ec <__adddf3>
 804de12:	2200      	movs	r2, #0
 804de14:	2300      	movs	r3, #0
 804de16:	f7f2 ffaf 	bl	8040d78 <__aeabi_dcmpgt>
 804de1a:	b128      	cbz	r0, 804de28 <ceil+0x40>
 804de1c:	2c00      	cmp	r4, #0
 804de1e:	db55      	blt.n	804decc <ceil+0xe4>
 804de20:	432c      	orrs	r4, r5
 804de22:	d057      	beq.n	804ded4 <ceil+0xec>
 804de24:	4c2e      	ldr	r4, [pc, #184]	; (804dee0 <ceil+0xf8>)
 804de26:	2500      	movs	r5, #0
 804de28:	4621      	mov	r1, r4
 804de2a:	4628      	mov	r0, r5
 804de2c:	e025      	b.n	804de7a <ceil+0x92>
 804de2e:	4f2d      	ldr	r7, [pc, #180]	; (804dee4 <ceil+0xfc>)
 804de30:	4137      	asrs	r7, r6
 804de32:	ea01 0307 	and.w	r3, r1, r7
 804de36:	4303      	orrs	r3, r0
 804de38:	d01f      	beq.n	804de7a <ceil+0x92>
 804de3a:	a327      	add	r3, pc, #156	; (adr r3, 804ded8 <ceil+0xf0>)
 804de3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 804de40:	f7f2 fb54 	bl	80404ec <__adddf3>
 804de44:	2200      	movs	r2, #0
 804de46:	2300      	movs	r3, #0
 804de48:	f7f2 ff96 	bl	8040d78 <__aeabi_dcmpgt>
 804de4c:	2800      	cmp	r0, #0
 804de4e:	d0eb      	beq.n	804de28 <ceil+0x40>
 804de50:	2c00      	cmp	r4, #0
 804de52:	bfc2      	ittt	gt
 804de54:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 804de58:	fa43 f606 	asrgt.w	r6, r3, r6
 804de5c:	19a4      	addgt	r4, r4, r6
 804de5e:	ea24 0407 	bic.w	r4, r4, r7
 804de62:	2500      	movs	r5, #0
 804de64:	e7e0      	b.n	804de28 <ceil+0x40>
 804de66:	2e33      	cmp	r6, #51	; 0x33
 804de68:	dd0b      	ble.n	804de82 <ceil+0x9a>
 804de6a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 804de6e:	d104      	bne.n	804de7a <ceil+0x92>
 804de70:	ee10 2a10 	vmov	r2, s0
 804de74:	460b      	mov	r3, r1
 804de76:	f7f2 fb39 	bl	80404ec <__adddf3>
 804de7a:	ec41 0b10 	vmov	d0, r0, r1
 804de7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804de82:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 804de86:	f04f 33ff 	mov.w	r3, #4294967295
 804de8a:	fa23 f707 	lsr.w	r7, r3, r7
 804de8e:	4207      	tst	r7, r0
 804de90:	d0f3      	beq.n	804de7a <ceil+0x92>
 804de92:	a311      	add	r3, pc, #68	; (adr r3, 804ded8 <ceil+0xf0>)
 804de94:	e9d3 2300 	ldrd	r2, r3, [r3]
 804de98:	f7f2 fb28 	bl	80404ec <__adddf3>
 804de9c:	2200      	movs	r2, #0
 804de9e:	2300      	movs	r3, #0
 804dea0:	f7f2 ff6a 	bl	8040d78 <__aeabi_dcmpgt>
 804dea4:	2800      	cmp	r0, #0
 804dea6:	d0bf      	beq.n	804de28 <ceil+0x40>
 804dea8:	2c00      	cmp	r4, #0
 804deaa:	dd02      	ble.n	804deb2 <ceil+0xca>
 804deac:	2e14      	cmp	r6, #20
 804deae:	d103      	bne.n	804deb8 <ceil+0xd0>
 804deb0:	3401      	adds	r4, #1
 804deb2:	ea25 0507 	bic.w	r5, r5, r7
 804deb6:	e7b7      	b.n	804de28 <ceil+0x40>
 804deb8:	2301      	movs	r3, #1
 804deba:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 804debe:	fa03 f606 	lsl.w	r6, r3, r6
 804dec2:	4435      	add	r5, r6
 804dec4:	4545      	cmp	r5, r8
 804dec6:	bf38      	it	cc
 804dec8:	18e4      	addcc	r4, r4, r3
 804deca:	e7f2      	b.n	804deb2 <ceil+0xca>
 804decc:	2500      	movs	r5, #0
 804dece:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 804ded2:	e7a9      	b.n	804de28 <ceil+0x40>
 804ded4:	4625      	mov	r5, r4
 804ded6:	e7a7      	b.n	804de28 <ceil+0x40>
 804ded8:	8800759c 	.word	0x8800759c
 804dedc:	7e37e43c 	.word	0x7e37e43c
 804dee0:	3ff00000 	.word	0x3ff00000
 804dee4:	000fffff 	.word	0x000fffff

0804dee8 <floor>:
 804dee8:	ec51 0b10 	vmov	r0, r1, d0
 804deec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804def0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 804def4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 804def8:	2e13      	cmp	r6, #19
 804defa:	460c      	mov	r4, r1
 804defc:	ee10 5a10 	vmov	r5, s0
 804df00:	4680      	mov	r8, r0
 804df02:	dc34      	bgt.n	804df6e <floor+0x86>
 804df04:	2e00      	cmp	r6, #0
 804df06:	da16      	bge.n	804df36 <floor+0x4e>
 804df08:	a335      	add	r3, pc, #212	; (adr r3, 804dfe0 <floor+0xf8>)
 804df0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804df0e:	f7f2 faed 	bl	80404ec <__adddf3>
 804df12:	2200      	movs	r2, #0
 804df14:	2300      	movs	r3, #0
 804df16:	f7f2 ff2f 	bl	8040d78 <__aeabi_dcmpgt>
 804df1a:	b148      	cbz	r0, 804df30 <floor+0x48>
 804df1c:	2c00      	cmp	r4, #0
 804df1e:	da59      	bge.n	804dfd4 <floor+0xec>
 804df20:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 804df24:	4a30      	ldr	r2, [pc, #192]	; (804dfe8 <floor+0x100>)
 804df26:	432b      	orrs	r3, r5
 804df28:	2500      	movs	r5, #0
 804df2a:	42ab      	cmp	r3, r5
 804df2c:	bf18      	it	ne
 804df2e:	4614      	movne	r4, r2
 804df30:	4621      	mov	r1, r4
 804df32:	4628      	mov	r0, r5
 804df34:	e025      	b.n	804df82 <floor+0x9a>
 804df36:	4f2d      	ldr	r7, [pc, #180]	; (804dfec <floor+0x104>)
 804df38:	4137      	asrs	r7, r6
 804df3a:	ea01 0307 	and.w	r3, r1, r7
 804df3e:	4303      	orrs	r3, r0
 804df40:	d01f      	beq.n	804df82 <floor+0x9a>
 804df42:	a327      	add	r3, pc, #156	; (adr r3, 804dfe0 <floor+0xf8>)
 804df44:	e9d3 2300 	ldrd	r2, r3, [r3]
 804df48:	f7f2 fad0 	bl	80404ec <__adddf3>
 804df4c:	2200      	movs	r2, #0
 804df4e:	2300      	movs	r3, #0
 804df50:	f7f2 ff12 	bl	8040d78 <__aeabi_dcmpgt>
 804df54:	2800      	cmp	r0, #0
 804df56:	d0eb      	beq.n	804df30 <floor+0x48>
 804df58:	2c00      	cmp	r4, #0
 804df5a:	bfbe      	ittt	lt
 804df5c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 804df60:	fa43 f606 	asrlt.w	r6, r3, r6
 804df64:	19a4      	addlt	r4, r4, r6
 804df66:	ea24 0407 	bic.w	r4, r4, r7
 804df6a:	2500      	movs	r5, #0
 804df6c:	e7e0      	b.n	804df30 <floor+0x48>
 804df6e:	2e33      	cmp	r6, #51	; 0x33
 804df70:	dd0b      	ble.n	804df8a <floor+0xa2>
 804df72:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 804df76:	d104      	bne.n	804df82 <floor+0x9a>
 804df78:	ee10 2a10 	vmov	r2, s0
 804df7c:	460b      	mov	r3, r1
 804df7e:	f7f2 fab5 	bl	80404ec <__adddf3>
 804df82:	ec41 0b10 	vmov	d0, r0, r1
 804df86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804df8a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 804df8e:	f04f 33ff 	mov.w	r3, #4294967295
 804df92:	fa23 f707 	lsr.w	r7, r3, r7
 804df96:	4207      	tst	r7, r0
 804df98:	d0f3      	beq.n	804df82 <floor+0x9a>
 804df9a:	a311      	add	r3, pc, #68	; (adr r3, 804dfe0 <floor+0xf8>)
 804df9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 804dfa0:	f7f2 faa4 	bl	80404ec <__adddf3>
 804dfa4:	2200      	movs	r2, #0
 804dfa6:	2300      	movs	r3, #0
 804dfa8:	f7f2 fee6 	bl	8040d78 <__aeabi_dcmpgt>
 804dfac:	2800      	cmp	r0, #0
 804dfae:	d0bf      	beq.n	804df30 <floor+0x48>
 804dfb0:	2c00      	cmp	r4, #0
 804dfb2:	da02      	bge.n	804dfba <floor+0xd2>
 804dfb4:	2e14      	cmp	r6, #20
 804dfb6:	d103      	bne.n	804dfc0 <floor+0xd8>
 804dfb8:	3401      	adds	r4, #1
 804dfba:	ea25 0507 	bic.w	r5, r5, r7
 804dfbe:	e7b7      	b.n	804df30 <floor+0x48>
 804dfc0:	2301      	movs	r3, #1
 804dfc2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 804dfc6:	fa03 f606 	lsl.w	r6, r3, r6
 804dfca:	4435      	add	r5, r6
 804dfcc:	4545      	cmp	r5, r8
 804dfce:	bf38      	it	cc
 804dfd0:	18e4      	addcc	r4, r4, r3
 804dfd2:	e7f2      	b.n	804dfba <floor+0xd2>
 804dfd4:	2500      	movs	r5, #0
 804dfd6:	462c      	mov	r4, r5
 804dfd8:	e7aa      	b.n	804df30 <floor+0x48>
 804dfda:	bf00      	nop
 804dfdc:	f3af 8000 	nop.w
 804dfe0:	8800759c 	.word	0x8800759c
 804dfe4:	7e37e43c 	.word	0x7e37e43c
 804dfe8:	bff00000 	.word	0xbff00000
 804dfec:	000fffff 	.word	0x000fffff

0804dff0 <round>:
 804dff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804dff2:	ec57 6b10 	vmov	r6, r7, d0
 804dff6:	f3c7 500a 	ubfx	r0, r7, #20, #11
 804dffa:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 804dffe:	2c13      	cmp	r4, #19
 804e000:	463b      	mov	r3, r7
 804e002:	463d      	mov	r5, r7
 804e004:	dc17      	bgt.n	804e036 <round+0x46>
 804e006:	2c00      	cmp	r4, #0
 804e008:	da09      	bge.n	804e01e <round+0x2e>
 804e00a:	3401      	adds	r4, #1
 804e00c:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 804e010:	d103      	bne.n	804e01a <round+0x2a>
 804e012:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 804e016:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 804e01a:	2100      	movs	r1, #0
 804e01c:	e02c      	b.n	804e078 <round+0x88>
 804e01e:	4a18      	ldr	r2, [pc, #96]	; (804e080 <round+0x90>)
 804e020:	4122      	asrs	r2, r4
 804e022:	4217      	tst	r7, r2
 804e024:	d100      	bne.n	804e028 <round+0x38>
 804e026:	b19e      	cbz	r6, 804e050 <round+0x60>
 804e028:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 804e02c:	4123      	asrs	r3, r4
 804e02e:	442b      	add	r3, r5
 804e030:	ea23 0302 	bic.w	r3, r3, r2
 804e034:	e7f1      	b.n	804e01a <round+0x2a>
 804e036:	2c33      	cmp	r4, #51	; 0x33
 804e038:	dd0d      	ble.n	804e056 <round+0x66>
 804e03a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 804e03e:	d107      	bne.n	804e050 <round+0x60>
 804e040:	4630      	mov	r0, r6
 804e042:	4639      	mov	r1, r7
 804e044:	ee10 2a10 	vmov	r2, s0
 804e048:	f7f2 fa50 	bl	80404ec <__adddf3>
 804e04c:	4606      	mov	r6, r0
 804e04e:	460f      	mov	r7, r1
 804e050:	ec47 6b10 	vmov	d0, r6, r7
 804e054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804e056:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 804e05a:	f04f 30ff 	mov.w	r0, #4294967295
 804e05e:	40d0      	lsrs	r0, r2
 804e060:	4206      	tst	r6, r0
 804e062:	d0f5      	beq.n	804e050 <round+0x60>
 804e064:	2201      	movs	r2, #1
 804e066:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 804e06a:	fa02 f404 	lsl.w	r4, r2, r4
 804e06e:	1931      	adds	r1, r6, r4
 804e070:	bf28      	it	cs
 804e072:	189b      	addcs	r3, r3, r2
 804e074:	ea21 0100 	bic.w	r1, r1, r0
 804e078:	461f      	mov	r7, r3
 804e07a:	460e      	mov	r6, r1
 804e07c:	e7e8      	b.n	804e050 <round+0x60>
 804e07e:	bf00      	nop
 804e080:	000fffff 	.word	0x000fffff

0804e084 <_close>:
 804e084:	4b02      	ldr	r3, [pc, #8]	; (804e090 <_close+0xc>)
 804e086:	2258      	movs	r2, #88	; 0x58
 804e088:	601a      	str	r2, [r3, #0]
 804e08a:	f04f 30ff 	mov.w	r0, #4294967295
 804e08e:	4770      	bx	lr
 804e090:	2000c388 	.word	0x2000c388

0804e094 <_fstat>:
 804e094:	4b02      	ldr	r3, [pc, #8]	; (804e0a0 <_fstat+0xc>)
 804e096:	2258      	movs	r2, #88	; 0x58
 804e098:	601a      	str	r2, [r3, #0]
 804e09a:	f04f 30ff 	mov.w	r0, #4294967295
 804e09e:	4770      	bx	lr
 804e0a0:	2000c388 	.word	0x2000c388

0804e0a4 <_isatty>:
 804e0a4:	4b02      	ldr	r3, [pc, #8]	; (804e0b0 <_isatty+0xc>)
 804e0a6:	2258      	movs	r2, #88	; 0x58
 804e0a8:	601a      	str	r2, [r3, #0]
 804e0aa:	2000      	movs	r0, #0
 804e0ac:	4770      	bx	lr
 804e0ae:	bf00      	nop
 804e0b0:	2000c388 	.word	0x2000c388

0804e0b4 <_lseek>:
 804e0b4:	4b02      	ldr	r3, [pc, #8]	; (804e0c0 <_lseek+0xc>)
 804e0b6:	2258      	movs	r2, #88	; 0x58
 804e0b8:	601a      	str	r2, [r3, #0]
 804e0ba:	f04f 30ff 	mov.w	r0, #4294967295
 804e0be:	4770      	bx	lr
 804e0c0:	2000c388 	.word	0x2000c388

0804e0c4 <_read>:
 804e0c4:	4b02      	ldr	r3, [pc, #8]	; (804e0d0 <_read+0xc>)
 804e0c6:	2258      	movs	r2, #88	; 0x58
 804e0c8:	601a      	str	r2, [r3, #0]
 804e0ca:	f04f 30ff 	mov.w	r0, #4294967295
 804e0ce:	4770      	bx	lr
 804e0d0:	2000c388 	.word	0x2000c388

0804e0d4 <_sbrk>:
 804e0d4:	4b04      	ldr	r3, [pc, #16]	; (804e0e8 <_sbrk+0x14>)
 804e0d6:	6819      	ldr	r1, [r3, #0]
 804e0d8:	4602      	mov	r2, r0
 804e0da:	b909      	cbnz	r1, 804e0e0 <_sbrk+0xc>
 804e0dc:	4903      	ldr	r1, [pc, #12]	; (804e0ec <_sbrk+0x18>)
 804e0de:	6019      	str	r1, [r3, #0]
 804e0e0:	6818      	ldr	r0, [r3, #0]
 804e0e2:	4402      	add	r2, r0
 804e0e4:	601a      	str	r2, [r3, #0]
 804e0e6:	4770      	bx	lr
 804e0e8:	20009b34 	.word	0x20009b34
 804e0ec:	2000c390 	.word	0x2000c390

0804e0f0 <_write>:
 804e0f0:	4b02      	ldr	r3, [pc, #8]	; (804e0fc <_write+0xc>)
 804e0f2:	2258      	movs	r2, #88	; 0x58
 804e0f4:	601a      	str	r2, [r3, #0]
 804e0f6:	f04f 30ff 	mov.w	r0, #4294967295
 804e0fa:	4770      	bx	lr
 804e0fc:	2000c388 	.word	0x2000c388

0804e100 <_init>:
 804e100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804e102:	bf00      	nop
 804e104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804e106:	bc08      	pop	{r3}
 804e108:	469e      	mov	lr, r3
 804e10a:	4770      	bx	lr

0804e10c <_fini>:
 804e10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804e10e:	bf00      	nop
 804e110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804e112:	bc08      	pop	{r3}
 804e114:	469e      	mov	lr, r3
 804e116:	4770      	bx	lr
