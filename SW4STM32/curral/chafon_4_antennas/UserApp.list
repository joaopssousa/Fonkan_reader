
UserApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000200  08040200  08040200  00000200  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011430  08040400  08040400  00000400  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001338  08051830  08051830  00011830  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08052b68  08052b68  00022eb0  2**0
                  CONTENTS
  4 .ARM          00000008  08052b68  08052b68  00012b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08052b70  08052b70  00022eb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08052b70  08052b70  00012b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08052b78  08052b78  00012b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000320  20001000  08052b80  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .align16      00000010  08052ea0  08052ea0  00022ea0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000d238  20001320  20001320  00031320  2**2
                  ALLOC
 11 ._user_heap_stack 00001200  2000e558  2000e558  00031320  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00022eb0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0006f31a  00000000  00000000  00022ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000d2a4  00000000  00000000  000921fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0002029f  00000000  00000000  0009f49e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00002610  00000000  00000000  000bf740  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00003988  00000000  00000000  000c1d50  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00016331  00000000  00000000  000c56d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00039e2d  00000000  00000000  000dba09  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000fee87  00000000  00000000  00115836  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  002146bd  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007e68  00000000  00000000  00214738  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stab         0000009c  00000000  00000000  0021c5a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 24 .stabstr      0000014d  00000000  00000000  0021c63c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08040400 <__do_global_dtors_aux>:
 8040400:	b510      	push	{r4, lr}
 8040402:	4c05      	ldr	r4, [pc, #20]	; (8040418 <APPLI_region_ROM_start+0x18>)
 8040404:	7823      	ldrb	r3, [r4, #0]
 8040406:	b933      	cbnz	r3, 8040416 <__do_global_dtors_aux+0x16>
 8040408:	4b04      	ldr	r3, [pc, #16]	; (804041c <APPLI_region_ROM_start+0x1c>)
 804040a:	b113      	cbz	r3, 8040412 <__do_global_dtors_aux+0x12>
 804040c:	4804      	ldr	r0, [pc, #16]	; (8040420 <APPLI_region_ROM_start+0x20>)
 804040e:	f3af 8000 	nop.w
 8040412:	2301      	movs	r3, #1
 8040414:	7023      	strb	r3, [r4, #0]
 8040416:	bd10      	pop	{r4, pc}
 8040418:	20001320 	.word	0x20001320
 804041c:	00000000 	.word	0x00000000
 8040420:	08051818 	.word	0x08051818

08040424 <frame_dummy>:
 8040424:	b508      	push	{r3, lr}
 8040426:	4b03      	ldr	r3, [pc, #12]	; (8040434 <frame_dummy+0x10>)
 8040428:	b11b      	cbz	r3, 8040432 <frame_dummy+0xe>
 804042a:	4903      	ldr	r1, [pc, #12]	; (8040438 <frame_dummy+0x14>)
 804042c:	4803      	ldr	r0, [pc, #12]	; (804043c <frame_dummy+0x18>)
 804042e:	f3af 8000 	nop.w
 8040432:	bd08      	pop	{r3, pc}
 8040434:	00000000 	.word	0x00000000
 8040438:	20001324 	.word	0x20001324
 804043c:	08051818 	.word	0x08051818

08040440 <memchr>:
 8040440:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8040444:	2a10      	cmp	r2, #16
 8040446:	db2b      	blt.n	80404a0 <memchr+0x60>
 8040448:	f010 0f07 	tst.w	r0, #7
 804044c:	d008      	beq.n	8040460 <memchr+0x20>
 804044e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040452:	3a01      	subs	r2, #1
 8040454:	428b      	cmp	r3, r1
 8040456:	d02d      	beq.n	80404b4 <memchr+0x74>
 8040458:	f010 0f07 	tst.w	r0, #7
 804045c:	b342      	cbz	r2, 80404b0 <memchr+0x70>
 804045e:	d1f6      	bne.n	804044e <memchr+0xe>
 8040460:	b4f0      	push	{r4, r5, r6, r7}
 8040462:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8040466:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 804046a:	f022 0407 	bic.w	r4, r2, #7
 804046e:	f07f 0700 	mvns.w	r7, #0
 8040472:	2300      	movs	r3, #0
 8040474:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8040478:	3c08      	subs	r4, #8
 804047a:	ea85 0501 	eor.w	r5, r5, r1
 804047e:	ea86 0601 	eor.w	r6, r6, r1
 8040482:	fa85 f547 	uadd8	r5, r5, r7
 8040486:	faa3 f587 	sel	r5, r3, r7
 804048a:	fa86 f647 	uadd8	r6, r6, r7
 804048e:	faa5 f687 	sel	r6, r5, r7
 8040492:	b98e      	cbnz	r6, 80404b8 <memchr+0x78>
 8040494:	d1ee      	bne.n	8040474 <memchr+0x34>
 8040496:	bcf0      	pop	{r4, r5, r6, r7}
 8040498:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 804049c:	f002 0207 	and.w	r2, r2, #7
 80404a0:	b132      	cbz	r2, 80404b0 <memchr+0x70>
 80404a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80404a6:	3a01      	subs	r2, #1
 80404a8:	ea83 0301 	eor.w	r3, r3, r1
 80404ac:	b113      	cbz	r3, 80404b4 <memchr+0x74>
 80404ae:	d1f8      	bne.n	80404a2 <memchr+0x62>
 80404b0:	2000      	movs	r0, #0
 80404b2:	4770      	bx	lr
 80404b4:	3801      	subs	r0, #1
 80404b6:	4770      	bx	lr
 80404b8:	2d00      	cmp	r5, #0
 80404ba:	bf06      	itte	eq
 80404bc:	4635      	moveq	r5, r6
 80404be:	3803      	subeq	r0, #3
 80404c0:	3807      	subne	r0, #7
 80404c2:	f015 0f01 	tst.w	r5, #1
 80404c6:	d107      	bne.n	80404d8 <memchr+0x98>
 80404c8:	3001      	adds	r0, #1
 80404ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80404ce:	bf02      	ittt	eq
 80404d0:	3001      	addeq	r0, #1
 80404d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80404d6:	3001      	addeq	r0, #1
 80404d8:	bcf0      	pop	{r4, r5, r6, r7}
 80404da:	3801      	subs	r0, #1
 80404dc:	4770      	bx	lr
 80404de:	bf00      	nop

080404e0 <__aeabi_drsub>:
 80404e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80404e4:	e002      	b.n	80404ec <__adddf3>
 80404e6:	bf00      	nop

080404e8 <__aeabi_dsub>:
 80404e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080404ec <__adddf3>:
 80404ec:	b530      	push	{r4, r5, lr}
 80404ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80404f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80404f6:	ea94 0f05 	teq	r4, r5
 80404fa:	bf08      	it	eq
 80404fc:	ea90 0f02 	teqeq	r0, r2
 8040500:	bf1f      	itttt	ne
 8040502:	ea54 0c00 	orrsne.w	ip, r4, r0
 8040506:	ea55 0c02 	orrsne.w	ip, r5, r2
 804050a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 804050e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8040512:	f000 80e2 	beq.w	80406da <__adddf3+0x1ee>
 8040516:	ea4f 5454 	mov.w	r4, r4, lsr #21
 804051a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 804051e:	bfb8      	it	lt
 8040520:	426d      	neglt	r5, r5
 8040522:	dd0c      	ble.n	804053e <__adddf3+0x52>
 8040524:	442c      	add	r4, r5
 8040526:	ea80 0202 	eor.w	r2, r0, r2
 804052a:	ea81 0303 	eor.w	r3, r1, r3
 804052e:	ea82 0000 	eor.w	r0, r2, r0
 8040532:	ea83 0101 	eor.w	r1, r3, r1
 8040536:	ea80 0202 	eor.w	r2, r0, r2
 804053a:	ea81 0303 	eor.w	r3, r1, r3
 804053e:	2d36      	cmp	r5, #54	; 0x36
 8040540:	bf88      	it	hi
 8040542:	bd30      	pophi	{r4, r5, pc}
 8040544:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8040548:	ea4f 3101 	mov.w	r1, r1, lsl #12
 804054c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8040550:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8040554:	d002      	beq.n	804055c <__adddf3+0x70>
 8040556:	4240      	negs	r0, r0
 8040558:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 804055c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8040560:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8040564:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8040568:	d002      	beq.n	8040570 <__adddf3+0x84>
 804056a:	4252      	negs	r2, r2
 804056c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8040570:	ea94 0f05 	teq	r4, r5
 8040574:	f000 80a7 	beq.w	80406c6 <__adddf3+0x1da>
 8040578:	f1a4 0401 	sub.w	r4, r4, #1
 804057c:	f1d5 0e20 	rsbs	lr, r5, #32
 8040580:	db0d      	blt.n	804059e <__adddf3+0xb2>
 8040582:	fa02 fc0e 	lsl.w	ip, r2, lr
 8040586:	fa22 f205 	lsr.w	r2, r2, r5
 804058a:	1880      	adds	r0, r0, r2
 804058c:	f141 0100 	adc.w	r1, r1, #0
 8040590:	fa03 f20e 	lsl.w	r2, r3, lr
 8040594:	1880      	adds	r0, r0, r2
 8040596:	fa43 f305 	asr.w	r3, r3, r5
 804059a:	4159      	adcs	r1, r3
 804059c:	e00e      	b.n	80405bc <__adddf3+0xd0>
 804059e:	f1a5 0520 	sub.w	r5, r5, #32
 80405a2:	f10e 0e20 	add.w	lr, lr, #32
 80405a6:	2a01      	cmp	r2, #1
 80405a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80405ac:	bf28      	it	cs
 80405ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80405b2:	fa43 f305 	asr.w	r3, r3, r5
 80405b6:	18c0      	adds	r0, r0, r3
 80405b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80405bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80405c0:	d507      	bpl.n	80405d2 <__adddf3+0xe6>
 80405c2:	f04f 0e00 	mov.w	lr, #0
 80405c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80405ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80405ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80405d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80405d6:	d31b      	bcc.n	8040610 <__adddf3+0x124>
 80405d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80405dc:	d30c      	bcc.n	80405f8 <__adddf3+0x10c>
 80405de:	0849      	lsrs	r1, r1, #1
 80405e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80405e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80405e8:	f104 0401 	add.w	r4, r4, #1
 80405ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80405f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80405f4:	f080 809a 	bcs.w	804072c <__adddf3+0x240>
 80405f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80405fc:	bf08      	it	eq
 80405fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8040602:	f150 0000 	adcs.w	r0, r0, #0
 8040606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 804060a:	ea41 0105 	orr.w	r1, r1, r5
 804060e:	bd30      	pop	{r4, r5, pc}
 8040610:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8040614:	4140      	adcs	r0, r0
 8040616:	eb41 0101 	adc.w	r1, r1, r1
 804061a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 804061e:	f1a4 0401 	sub.w	r4, r4, #1
 8040622:	d1e9      	bne.n	80405f8 <__adddf3+0x10c>
 8040624:	f091 0f00 	teq	r1, #0
 8040628:	bf04      	itt	eq
 804062a:	4601      	moveq	r1, r0
 804062c:	2000      	moveq	r0, #0
 804062e:	fab1 f381 	clz	r3, r1
 8040632:	bf08      	it	eq
 8040634:	3320      	addeq	r3, #32
 8040636:	f1a3 030b 	sub.w	r3, r3, #11
 804063a:	f1b3 0220 	subs.w	r2, r3, #32
 804063e:	da0c      	bge.n	804065a <__adddf3+0x16e>
 8040640:	320c      	adds	r2, #12
 8040642:	dd08      	ble.n	8040656 <__adddf3+0x16a>
 8040644:	f102 0c14 	add.w	ip, r2, #20
 8040648:	f1c2 020c 	rsb	r2, r2, #12
 804064c:	fa01 f00c 	lsl.w	r0, r1, ip
 8040650:	fa21 f102 	lsr.w	r1, r1, r2
 8040654:	e00c      	b.n	8040670 <__adddf3+0x184>
 8040656:	f102 0214 	add.w	r2, r2, #20
 804065a:	bfd8      	it	le
 804065c:	f1c2 0c20 	rsble	ip, r2, #32
 8040660:	fa01 f102 	lsl.w	r1, r1, r2
 8040664:	fa20 fc0c 	lsr.w	ip, r0, ip
 8040668:	bfdc      	itt	le
 804066a:	ea41 010c 	orrle.w	r1, r1, ip
 804066e:	4090      	lslle	r0, r2
 8040670:	1ae4      	subs	r4, r4, r3
 8040672:	bfa2      	ittt	ge
 8040674:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8040678:	4329      	orrge	r1, r5
 804067a:	bd30      	popge	{r4, r5, pc}
 804067c:	ea6f 0404 	mvn.w	r4, r4
 8040680:	3c1f      	subs	r4, #31
 8040682:	da1c      	bge.n	80406be <__adddf3+0x1d2>
 8040684:	340c      	adds	r4, #12
 8040686:	dc0e      	bgt.n	80406a6 <__adddf3+0x1ba>
 8040688:	f104 0414 	add.w	r4, r4, #20
 804068c:	f1c4 0220 	rsb	r2, r4, #32
 8040690:	fa20 f004 	lsr.w	r0, r0, r4
 8040694:	fa01 f302 	lsl.w	r3, r1, r2
 8040698:	ea40 0003 	orr.w	r0, r0, r3
 804069c:	fa21 f304 	lsr.w	r3, r1, r4
 80406a0:	ea45 0103 	orr.w	r1, r5, r3
 80406a4:	bd30      	pop	{r4, r5, pc}
 80406a6:	f1c4 040c 	rsb	r4, r4, #12
 80406aa:	f1c4 0220 	rsb	r2, r4, #32
 80406ae:	fa20 f002 	lsr.w	r0, r0, r2
 80406b2:	fa01 f304 	lsl.w	r3, r1, r4
 80406b6:	ea40 0003 	orr.w	r0, r0, r3
 80406ba:	4629      	mov	r1, r5
 80406bc:	bd30      	pop	{r4, r5, pc}
 80406be:	fa21 f004 	lsr.w	r0, r1, r4
 80406c2:	4629      	mov	r1, r5
 80406c4:	bd30      	pop	{r4, r5, pc}
 80406c6:	f094 0f00 	teq	r4, #0
 80406ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80406ce:	bf06      	itte	eq
 80406d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80406d4:	3401      	addeq	r4, #1
 80406d6:	3d01      	subne	r5, #1
 80406d8:	e74e      	b.n	8040578 <__adddf3+0x8c>
 80406da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80406de:	bf18      	it	ne
 80406e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80406e4:	d029      	beq.n	804073a <__adddf3+0x24e>
 80406e6:	ea94 0f05 	teq	r4, r5
 80406ea:	bf08      	it	eq
 80406ec:	ea90 0f02 	teqeq	r0, r2
 80406f0:	d005      	beq.n	80406fe <__adddf3+0x212>
 80406f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80406f6:	bf04      	itt	eq
 80406f8:	4619      	moveq	r1, r3
 80406fa:	4610      	moveq	r0, r2
 80406fc:	bd30      	pop	{r4, r5, pc}
 80406fe:	ea91 0f03 	teq	r1, r3
 8040702:	bf1e      	ittt	ne
 8040704:	2100      	movne	r1, #0
 8040706:	2000      	movne	r0, #0
 8040708:	bd30      	popne	{r4, r5, pc}
 804070a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 804070e:	d105      	bne.n	804071c <__adddf3+0x230>
 8040710:	0040      	lsls	r0, r0, #1
 8040712:	4149      	adcs	r1, r1
 8040714:	bf28      	it	cs
 8040716:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 804071a:	bd30      	pop	{r4, r5, pc}
 804071c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8040720:	bf3c      	itt	cc
 8040722:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8040726:	bd30      	popcc	{r4, r5, pc}
 8040728:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 804072c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8040730:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8040734:	f04f 0000 	mov.w	r0, #0
 8040738:	bd30      	pop	{r4, r5, pc}
 804073a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 804073e:	bf1a      	itte	ne
 8040740:	4619      	movne	r1, r3
 8040742:	4610      	movne	r0, r2
 8040744:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8040748:	bf1c      	itt	ne
 804074a:	460b      	movne	r3, r1
 804074c:	4602      	movne	r2, r0
 804074e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8040752:	bf06      	itte	eq
 8040754:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8040758:	ea91 0f03 	teqeq	r1, r3
 804075c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8040760:	bd30      	pop	{r4, r5, pc}
 8040762:	bf00      	nop

08040764 <__aeabi_ui2d>:
 8040764:	f090 0f00 	teq	r0, #0
 8040768:	bf04      	itt	eq
 804076a:	2100      	moveq	r1, #0
 804076c:	4770      	bxeq	lr
 804076e:	b530      	push	{r4, r5, lr}
 8040770:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8040774:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8040778:	f04f 0500 	mov.w	r5, #0
 804077c:	f04f 0100 	mov.w	r1, #0
 8040780:	e750      	b.n	8040624 <__adddf3+0x138>
 8040782:	bf00      	nop

08040784 <__aeabi_i2d>:
 8040784:	f090 0f00 	teq	r0, #0
 8040788:	bf04      	itt	eq
 804078a:	2100      	moveq	r1, #0
 804078c:	4770      	bxeq	lr
 804078e:	b530      	push	{r4, r5, lr}
 8040790:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8040794:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8040798:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 804079c:	bf48      	it	mi
 804079e:	4240      	negmi	r0, r0
 80407a0:	f04f 0100 	mov.w	r1, #0
 80407a4:	e73e      	b.n	8040624 <__adddf3+0x138>
 80407a6:	bf00      	nop

080407a8 <__aeabi_f2d>:
 80407a8:	0042      	lsls	r2, r0, #1
 80407aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80407ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80407b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80407b6:	bf1f      	itttt	ne
 80407b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80407bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80407c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80407c4:	4770      	bxne	lr
 80407c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80407ca:	bf08      	it	eq
 80407cc:	4770      	bxeq	lr
 80407ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80407d2:	bf04      	itt	eq
 80407d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80407d8:	4770      	bxeq	lr
 80407da:	b530      	push	{r4, r5, lr}
 80407dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80407e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80407e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80407e8:	e71c      	b.n	8040624 <__adddf3+0x138>
 80407ea:	bf00      	nop

080407ec <__aeabi_ul2d>:
 80407ec:	ea50 0201 	orrs.w	r2, r0, r1
 80407f0:	bf08      	it	eq
 80407f2:	4770      	bxeq	lr
 80407f4:	b530      	push	{r4, r5, lr}
 80407f6:	f04f 0500 	mov.w	r5, #0
 80407fa:	e00a      	b.n	8040812 <__aeabi_l2d+0x16>

080407fc <__aeabi_l2d>:
 80407fc:	ea50 0201 	orrs.w	r2, r0, r1
 8040800:	bf08      	it	eq
 8040802:	4770      	bxeq	lr
 8040804:	b530      	push	{r4, r5, lr}
 8040806:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 804080a:	d502      	bpl.n	8040812 <__aeabi_l2d+0x16>
 804080c:	4240      	negs	r0, r0
 804080e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8040812:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8040816:	f104 0432 	add.w	r4, r4, #50	; 0x32
 804081a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 804081e:	f43f aed8 	beq.w	80405d2 <__adddf3+0xe6>
 8040822:	f04f 0203 	mov.w	r2, #3
 8040826:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 804082a:	bf18      	it	ne
 804082c:	3203      	addne	r2, #3
 804082e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8040832:	bf18      	it	ne
 8040834:	3203      	addne	r2, #3
 8040836:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 804083a:	f1c2 0320 	rsb	r3, r2, #32
 804083e:	fa00 fc03 	lsl.w	ip, r0, r3
 8040842:	fa20 f002 	lsr.w	r0, r0, r2
 8040846:	fa01 fe03 	lsl.w	lr, r1, r3
 804084a:	ea40 000e 	orr.w	r0, r0, lr
 804084e:	fa21 f102 	lsr.w	r1, r1, r2
 8040852:	4414      	add	r4, r2
 8040854:	e6bd      	b.n	80405d2 <__adddf3+0xe6>
 8040856:	bf00      	nop

08040858 <__aeabi_dmul>:
 8040858:	b570      	push	{r4, r5, r6, lr}
 804085a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 804085e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8040862:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8040866:	bf1d      	ittte	ne
 8040868:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 804086c:	ea94 0f0c 	teqne	r4, ip
 8040870:	ea95 0f0c 	teqne	r5, ip
 8040874:	f000 f8de 	bleq	8040a34 <__aeabi_dmul+0x1dc>
 8040878:	442c      	add	r4, r5
 804087a:	ea81 0603 	eor.w	r6, r1, r3
 804087e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8040882:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8040886:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 804088a:	bf18      	it	ne
 804088c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8040890:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8040894:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8040898:	d038      	beq.n	804090c <__aeabi_dmul+0xb4>
 804089a:	fba0 ce02 	umull	ip, lr, r0, r2
 804089e:	f04f 0500 	mov.w	r5, #0
 80408a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80408a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80408aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80408ae:	f04f 0600 	mov.w	r6, #0
 80408b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80408b6:	f09c 0f00 	teq	ip, #0
 80408ba:	bf18      	it	ne
 80408bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80408c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80408c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80408c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80408cc:	d204      	bcs.n	80408d8 <__aeabi_dmul+0x80>
 80408ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80408d2:	416d      	adcs	r5, r5
 80408d4:	eb46 0606 	adc.w	r6, r6, r6
 80408d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80408dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80408e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80408e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80408e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80408ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80408f0:	bf88      	it	hi
 80408f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80408f6:	d81e      	bhi.n	8040936 <__aeabi_dmul+0xde>
 80408f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80408fc:	bf08      	it	eq
 80408fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8040902:	f150 0000 	adcs.w	r0, r0, #0
 8040906:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 804090a:	bd70      	pop	{r4, r5, r6, pc}
 804090c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8040910:	ea46 0101 	orr.w	r1, r6, r1
 8040914:	ea40 0002 	orr.w	r0, r0, r2
 8040918:	ea81 0103 	eor.w	r1, r1, r3
 804091c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8040920:	bfc2      	ittt	gt
 8040922:	ebd4 050c 	rsbsgt	r5, r4, ip
 8040926:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 804092a:	bd70      	popgt	{r4, r5, r6, pc}
 804092c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8040930:	f04f 0e00 	mov.w	lr, #0
 8040934:	3c01      	subs	r4, #1
 8040936:	f300 80ab 	bgt.w	8040a90 <__aeabi_dmul+0x238>
 804093a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 804093e:	bfde      	ittt	le
 8040940:	2000      	movle	r0, #0
 8040942:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8040946:	bd70      	pople	{r4, r5, r6, pc}
 8040948:	f1c4 0400 	rsb	r4, r4, #0
 804094c:	3c20      	subs	r4, #32
 804094e:	da35      	bge.n	80409bc <__aeabi_dmul+0x164>
 8040950:	340c      	adds	r4, #12
 8040952:	dc1b      	bgt.n	804098c <__aeabi_dmul+0x134>
 8040954:	f104 0414 	add.w	r4, r4, #20
 8040958:	f1c4 0520 	rsb	r5, r4, #32
 804095c:	fa00 f305 	lsl.w	r3, r0, r5
 8040960:	fa20 f004 	lsr.w	r0, r0, r4
 8040964:	fa01 f205 	lsl.w	r2, r1, r5
 8040968:	ea40 0002 	orr.w	r0, r0, r2
 804096c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8040970:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8040974:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8040978:	fa21 f604 	lsr.w	r6, r1, r4
 804097c:	eb42 0106 	adc.w	r1, r2, r6
 8040980:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8040984:	bf08      	it	eq
 8040986:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 804098a:	bd70      	pop	{r4, r5, r6, pc}
 804098c:	f1c4 040c 	rsb	r4, r4, #12
 8040990:	f1c4 0520 	rsb	r5, r4, #32
 8040994:	fa00 f304 	lsl.w	r3, r0, r4
 8040998:	fa20 f005 	lsr.w	r0, r0, r5
 804099c:	fa01 f204 	lsl.w	r2, r1, r4
 80409a0:	ea40 0002 	orr.w	r0, r0, r2
 80409a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80409a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80409ac:	f141 0100 	adc.w	r1, r1, #0
 80409b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80409b4:	bf08      	it	eq
 80409b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80409ba:	bd70      	pop	{r4, r5, r6, pc}
 80409bc:	f1c4 0520 	rsb	r5, r4, #32
 80409c0:	fa00 f205 	lsl.w	r2, r0, r5
 80409c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80409c8:	fa20 f304 	lsr.w	r3, r0, r4
 80409cc:	fa01 f205 	lsl.w	r2, r1, r5
 80409d0:	ea43 0302 	orr.w	r3, r3, r2
 80409d4:	fa21 f004 	lsr.w	r0, r1, r4
 80409d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80409dc:	fa21 f204 	lsr.w	r2, r1, r4
 80409e0:	ea20 0002 	bic.w	r0, r0, r2
 80409e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80409e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80409ec:	bf08      	it	eq
 80409ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80409f2:	bd70      	pop	{r4, r5, r6, pc}
 80409f4:	f094 0f00 	teq	r4, #0
 80409f8:	d10f      	bne.n	8040a1a <__aeabi_dmul+0x1c2>
 80409fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80409fe:	0040      	lsls	r0, r0, #1
 8040a00:	eb41 0101 	adc.w	r1, r1, r1
 8040a04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8040a08:	bf08      	it	eq
 8040a0a:	3c01      	subeq	r4, #1
 8040a0c:	d0f7      	beq.n	80409fe <__aeabi_dmul+0x1a6>
 8040a0e:	ea41 0106 	orr.w	r1, r1, r6
 8040a12:	f095 0f00 	teq	r5, #0
 8040a16:	bf18      	it	ne
 8040a18:	4770      	bxne	lr
 8040a1a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8040a1e:	0052      	lsls	r2, r2, #1
 8040a20:	eb43 0303 	adc.w	r3, r3, r3
 8040a24:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8040a28:	bf08      	it	eq
 8040a2a:	3d01      	subeq	r5, #1
 8040a2c:	d0f7      	beq.n	8040a1e <__aeabi_dmul+0x1c6>
 8040a2e:	ea43 0306 	orr.w	r3, r3, r6
 8040a32:	4770      	bx	lr
 8040a34:	ea94 0f0c 	teq	r4, ip
 8040a38:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8040a3c:	bf18      	it	ne
 8040a3e:	ea95 0f0c 	teqne	r5, ip
 8040a42:	d00c      	beq.n	8040a5e <__aeabi_dmul+0x206>
 8040a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8040a48:	bf18      	it	ne
 8040a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8040a4e:	d1d1      	bne.n	80409f4 <__aeabi_dmul+0x19c>
 8040a50:	ea81 0103 	eor.w	r1, r1, r3
 8040a54:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8040a58:	f04f 0000 	mov.w	r0, #0
 8040a5c:	bd70      	pop	{r4, r5, r6, pc}
 8040a5e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8040a62:	bf06      	itte	eq
 8040a64:	4610      	moveq	r0, r2
 8040a66:	4619      	moveq	r1, r3
 8040a68:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8040a6c:	d019      	beq.n	8040aa2 <__aeabi_dmul+0x24a>
 8040a6e:	ea94 0f0c 	teq	r4, ip
 8040a72:	d102      	bne.n	8040a7a <__aeabi_dmul+0x222>
 8040a74:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8040a78:	d113      	bne.n	8040aa2 <__aeabi_dmul+0x24a>
 8040a7a:	ea95 0f0c 	teq	r5, ip
 8040a7e:	d105      	bne.n	8040a8c <__aeabi_dmul+0x234>
 8040a80:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8040a84:	bf1c      	itt	ne
 8040a86:	4610      	movne	r0, r2
 8040a88:	4619      	movne	r1, r3
 8040a8a:	d10a      	bne.n	8040aa2 <__aeabi_dmul+0x24a>
 8040a8c:	ea81 0103 	eor.w	r1, r1, r3
 8040a90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8040a94:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8040a98:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8040a9c:	f04f 0000 	mov.w	r0, #0
 8040aa0:	bd70      	pop	{r4, r5, r6, pc}
 8040aa2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8040aa6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8040aaa:	bd70      	pop	{r4, r5, r6, pc}

08040aac <__aeabi_ddiv>:
 8040aac:	b570      	push	{r4, r5, r6, lr}
 8040aae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8040ab2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8040ab6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8040aba:	bf1d      	ittte	ne
 8040abc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8040ac0:	ea94 0f0c 	teqne	r4, ip
 8040ac4:	ea95 0f0c 	teqne	r5, ip
 8040ac8:	f000 f8a7 	bleq	8040c1a <__aeabi_ddiv+0x16e>
 8040acc:	eba4 0405 	sub.w	r4, r4, r5
 8040ad0:	ea81 0e03 	eor.w	lr, r1, r3
 8040ad4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8040ad8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8040adc:	f000 8088 	beq.w	8040bf0 <__aeabi_ddiv+0x144>
 8040ae0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8040ae4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8040ae8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8040aec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8040af0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8040af4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8040af8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8040afc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8040b00:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8040b04:	429d      	cmp	r5, r3
 8040b06:	bf08      	it	eq
 8040b08:	4296      	cmpeq	r6, r2
 8040b0a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8040b0e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8040b12:	d202      	bcs.n	8040b1a <__aeabi_ddiv+0x6e>
 8040b14:	085b      	lsrs	r3, r3, #1
 8040b16:	ea4f 0232 	mov.w	r2, r2, rrx
 8040b1a:	1ab6      	subs	r6, r6, r2
 8040b1c:	eb65 0503 	sbc.w	r5, r5, r3
 8040b20:	085b      	lsrs	r3, r3, #1
 8040b22:	ea4f 0232 	mov.w	r2, r2, rrx
 8040b26:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8040b2a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8040b2e:	ebb6 0e02 	subs.w	lr, r6, r2
 8040b32:	eb75 0e03 	sbcs.w	lr, r5, r3
 8040b36:	bf22      	ittt	cs
 8040b38:	1ab6      	subcs	r6, r6, r2
 8040b3a:	4675      	movcs	r5, lr
 8040b3c:	ea40 000c 	orrcs.w	r0, r0, ip
 8040b40:	085b      	lsrs	r3, r3, #1
 8040b42:	ea4f 0232 	mov.w	r2, r2, rrx
 8040b46:	ebb6 0e02 	subs.w	lr, r6, r2
 8040b4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8040b4e:	bf22      	ittt	cs
 8040b50:	1ab6      	subcs	r6, r6, r2
 8040b52:	4675      	movcs	r5, lr
 8040b54:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8040b58:	085b      	lsrs	r3, r3, #1
 8040b5a:	ea4f 0232 	mov.w	r2, r2, rrx
 8040b5e:	ebb6 0e02 	subs.w	lr, r6, r2
 8040b62:	eb75 0e03 	sbcs.w	lr, r5, r3
 8040b66:	bf22      	ittt	cs
 8040b68:	1ab6      	subcs	r6, r6, r2
 8040b6a:	4675      	movcs	r5, lr
 8040b6c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8040b70:	085b      	lsrs	r3, r3, #1
 8040b72:	ea4f 0232 	mov.w	r2, r2, rrx
 8040b76:	ebb6 0e02 	subs.w	lr, r6, r2
 8040b7a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8040b7e:	bf22      	ittt	cs
 8040b80:	1ab6      	subcs	r6, r6, r2
 8040b82:	4675      	movcs	r5, lr
 8040b84:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8040b88:	ea55 0e06 	orrs.w	lr, r5, r6
 8040b8c:	d018      	beq.n	8040bc0 <__aeabi_ddiv+0x114>
 8040b8e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8040b92:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8040b96:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8040b9a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8040b9e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8040ba2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8040ba6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8040baa:	d1c0      	bne.n	8040b2e <__aeabi_ddiv+0x82>
 8040bac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8040bb0:	d10b      	bne.n	8040bca <__aeabi_ddiv+0x11e>
 8040bb2:	ea41 0100 	orr.w	r1, r1, r0
 8040bb6:	f04f 0000 	mov.w	r0, #0
 8040bba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8040bbe:	e7b6      	b.n	8040b2e <__aeabi_ddiv+0x82>
 8040bc0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8040bc4:	bf04      	itt	eq
 8040bc6:	4301      	orreq	r1, r0
 8040bc8:	2000      	moveq	r0, #0
 8040bca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8040bce:	bf88      	it	hi
 8040bd0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8040bd4:	f63f aeaf 	bhi.w	8040936 <__aeabi_dmul+0xde>
 8040bd8:	ebb5 0c03 	subs.w	ip, r5, r3
 8040bdc:	bf04      	itt	eq
 8040bde:	ebb6 0c02 	subseq.w	ip, r6, r2
 8040be2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8040be6:	f150 0000 	adcs.w	r0, r0, #0
 8040bea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8040bee:	bd70      	pop	{r4, r5, r6, pc}
 8040bf0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8040bf4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8040bf8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8040bfc:	bfc2      	ittt	gt
 8040bfe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8040c02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8040c06:	bd70      	popgt	{r4, r5, r6, pc}
 8040c08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8040c0c:	f04f 0e00 	mov.w	lr, #0
 8040c10:	3c01      	subs	r4, #1
 8040c12:	e690      	b.n	8040936 <__aeabi_dmul+0xde>
 8040c14:	ea45 0e06 	orr.w	lr, r5, r6
 8040c18:	e68d      	b.n	8040936 <__aeabi_dmul+0xde>
 8040c1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8040c1e:	ea94 0f0c 	teq	r4, ip
 8040c22:	bf08      	it	eq
 8040c24:	ea95 0f0c 	teqeq	r5, ip
 8040c28:	f43f af3b 	beq.w	8040aa2 <__aeabi_dmul+0x24a>
 8040c2c:	ea94 0f0c 	teq	r4, ip
 8040c30:	d10a      	bne.n	8040c48 <__aeabi_ddiv+0x19c>
 8040c32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8040c36:	f47f af34 	bne.w	8040aa2 <__aeabi_dmul+0x24a>
 8040c3a:	ea95 0f0c 	teq	r5, ip
 8040c3e:	f47f af25 	bne.w	8040a8c <__aeabi_dmul+0x234>
 8040c42:	4610      	mov	r0, r2
 8040c44:	4619      	mov	r1, r3
 8040c46:	e72c      	b.n	8040aa2 <__aeabi_dmul+0x24a>
 8040c48:	ea95 0f0c 	teq	r5, ip
 8040c4c:	d106      	bne.n	8040c5c <__aeabi_ddiv+0x1b0>
 8040c4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8040c52:	f43f aefd 	beq.w	8040a50 <__aeabi_dmul+0x1f8>
 8040c56:	4610      	mov	r0, r2
 8040c58:	4619      	mov	r1, r3
 8040c5a:	e722      	b.n	8040aa2 <__aeabi_dmul+0x24a>
 8040c5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8040c60:	bf18      	it	ne
 8040c62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8040c66:	f47f aec5 	bne.w	80409f4 <__aeabi_dmul+0x19c>
 8040c6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8040c6e:	f47f af0d 	bne.w	8040a8c <__aeabi_dmul+0x234>
 8040c72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8040c76:	f47f aeeb 	bne.w	8040a50 <__aeabi_dmul+0x1f8>
 8040c7a:	e712      	b.n	8040aa2 <__aeabi_dmul+0x24a>

08040c7c <__gedf2>:
 8040c7c:	f04f 3cff 	mov.w	ip, #4294967295
 8040c80:	e006      	b.n	8040c90 <__cmpdf2+0x4>
 8040c82:	bf00      	nop

08040c84 <__ledf2>:
 8040c84:	f04f 0c01 	mov.w	ip, #1
 8040c88:	e002      	b.n	8040c90 <__cmpdf2+0x4>
 8040c8a:	bf00      	nop

08040c8c <__cmpdf2>:
 8040c8c:	f04f 0c01 	mov.w	ip, #1
 8040c90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8040c94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8040c98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040c9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8040ca0:	bf18      	it	ne
 8040ca2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8040ca6:	d01b      	beq.n	8040ce0 <__cmpdf2+0x54>
 8040ca8:	b001      	add	sp, #4
 8040caa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8040cae:	bf0c      	ite	eq
 8040cb0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8040cb4:	ea91 0f03 	teqne	r1, r3
 8040cb8:	bf02      	ittt	eq
 8040cba:	ea90 0f02 	teqeq	r0, r2
 8040cbe:	2000      	moveq	r0, #0
 8040cc0:	4770      	bxeq	lr
 8040cc2:	f110 0f00 	cmn.w	r0, #0
 8040cc6:	ea91 0f03 	teq	r1, r3
 8040cca:	bf58      	it	pl
 8040ccc:	4299      	cmppl	r1, r3
 8040cce:	bf08      	it	eq
 8040cd0:	4290      	cmpeq	r0, r2
 8040cd2:	bf2c      	ite	cs
 8040cd4:	17d8      	asrcs	r0, r3, #31
 8040cd6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8040cda:	f040 0001 	orr.w	r0, r0, #1
 8040cde:	4770      	bx	lr
 8040ce0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8040ce4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040ce8:	d102      	bne.n	8040cf0 <__cmpdf2+0x64>
 8040cea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8040cee:	d107      	bne.n	8040d00 <__cmpdf2+0x74>
 8040cf0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8040cf4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040cf8:	d1d6      	bne.n	8040ca8 <__cmpdf2+0x1c>
 8040cfa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8040cfe:	d0d3      	beq.n	8040ca8 <__cmpdf2+0x1c>
 8040d00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8040d04:	4770      	bx	lr
 8040d06:	bf00      	nop

08040d08 <__aeabi_cdrcmple>:
 8040d08:	4684      	mov	ip, r0
 8040d0a:	4610      	mov	r0, r2
 8040d0c:	4662      	mov	r2, ip
 8040d0e:	468c      	mov	ip, r1
 8040d10:	4619      	mov	r1, r3
 8040d12:	4663      	mov	r3, ip
 8040d14:	e000      	b.n	8040d18 <__aeabi_cdcmpeq>
 8040d16:	bf00      	nop

08040d18 <__aeabi_cdcmpeq>:
 8040d18:	b501      	push	{r0, lr}
 8040d1a:	f7ff ffb7 	bl	8040c8c <__cmpdf2>
 8040d1e:	2800      	cmp	r0, #0
 8040d20:	bf48      	it	mi
 8040d22:	f110 0f00 	cmnmi.w	r0, #0
 8040d26:	bd01      	pop	{r0, pc}

08040d28 <__aeabi_dcmpeq>:
 8040d28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040d2c:	f7ff fff4 	bl	8040d18 <__aeabi_cdcmpeq>
 8040d30:	bf0c      	ite	eq
 8040d32:	2001      	moveq	r0, #1
 8040d34:	2000      	movne	r0, #0
 8040d36:	f85d fb08 	ldr.w	pc, [sp], #8
 8040d3a:	bf00      	nop

08040d3c <__aeabi_dcmplt>:
 8040d3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040d40:	f7ff ffea 	bl	8040d18 <__aeabi_cdcmpeq>
 8040d44:	bf34      	ite	cc
 8040d46:	2001      	movcc	r0, #1
 8040d48:	2000      	movcs	r0, #0
 8040d4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8040d4e:	bf00      	nop

08040d50 <__aeabi_dcmple>:
 8040d50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040d54:	f7ff ffe0 	bl	8040d18 <__aeabi_cdcmpeq>
 8040d58:	bf94      	ite	ls
 8040d5a:	2001      	movls	r0, #1
 8040d5c:	2000      	movhi	r0, #0
 8040d5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8040d62:	bf00      	nop

08040d64 <__aeabi_dcmpge>:
 8040d64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040d68:	f7ff ffce 	bl	8040d08 <__aeabi_cdrcmple>
 8040d6c:	bf94      	ite	ls
 8040d6e:	2001      	movls	r0, #1
 8040d70:	2000      	movhi	r0, #0
 8040d72:	f85d fb08 	ldr.w	pc, [sp], #8
 8040d76:	bf00      	nop

08040d78 <__aeabi_dcmpgt>:
 8040d78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040d7c:	f7ff ffc4 	bl	8040d08 <__aeabi_cdrcmple>
 8040d80:	bf34      	ite	cc
 8040d82:	2001      	movcc	r0, #1
 8040d84:	2000      	movcs	r0, #0
 8040d86:	f85d fb08 	ldr.w	pc, [sp], #8
 8040d8a:	bf00      	nop

08040d8c <__aeabi_d2iz>:
 8040d8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8040d90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8040d94:	d215      	bcs.n	8040dc2 <__aeabi_d2iz+0x36>
 8040d96:	d511      	bpl.n	8040dbc <__aeabi_d2iz+0x30>
 8040d98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8040d9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8040da0:	d912      	bls.n	8040dc8 <__aeabi_d2iz+0x3c>
 8040da2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8040da6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8040daa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8040dae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8040db2:	fa23 f002 	lsr.w	r0, r3, r2
 8040db6:	bf18      	it	ne
 8040db8:	4240      	negne	r0, r0
 8040dba:	4770      	bx	lr
 8040dbc:	f04f 0000 	mov.w	r0, #0
 8040dc0:	4770      	bx	lr
 8040dc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8040dc6:	d105      	bne.n	8040dd4 <__aeabi_d2iz+0x48>
 8040dc8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8040dcc:	bf08      	it	eq
 8040dce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8040dd2:	4770      	bx	lr
 8040dd4:	f04f 0000 	mov.w	r0, #0
 8040dd8:	4770      	bx	lr
 8040dda:	bf00      	nop

08040ddc <__aeabi_d2uiz>:
 8040ddc:	004a      	lsls	r2, r1, #1
 8040dde:	d211      	bcs.n	8040e04 <__aeabi_d2uiz+0x28>
 8040de0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8040de4:	d211      	bcs.n	8040e0a <__aeabi_d2uiz+0x2e>
 8040de6:	d50d      	bpl.n	8040e04 <__aeabi_d2uiz+0x28>
 8040de8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8040dec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8040df0:	d40e      	bmi.n	8040e10 <__aeabi_d2uiz+0x34>
 8040df2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8040df6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8040dfa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8040dfe:	fa23 f002 	lsr.w	r0, r3, r2
 8040e02:	4770      	bx	lr
 8040e04:	f04f 0000 	mov.w	r0, #0
 8040e08:	4770      	bx	lr
 8040e0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8040e0e:	d102      	bne.n	8040e16 <__aeabi_d2uiz+0x3a>
 8040e10:	f04f 30ff 	mov.w	r0, #4294967295
 8040e14:	4770      	bx	lr
 8040e16:	f04f 0000 	mov.w	r0, #0
 8040e1a:	4770      	bx	lr

08040e1c <__aeabi_uldivmod>:
 8040e1c:	b953      	cbnz	r3, 8040e34 <__aeabi_uldivmod+0x18>
 8040e1e:	b94a      	cbnz	r2, 8040e34 <__aeabi_uldivmod+0x18>
 8040e20:	2900      	cmp	r1, #0
 8040e22:	bf08      	it	eq
 8040e24:	2800      	cmpeq	r0, #0
 8040e26:	bf1c      	itt	ne
 8040e28:	f04f 31ff 	movne.w	r1, #4294967295
 8040e2c:	f04f 30ff 	movne.w	r0, #4294967295
 8040e30:	f000 b972 	b.w	8041118 <__aeabi_idiv0>
 8040e34:	f1ad 0c08 	sub.w	ip, sp, #8
 8040e38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8040e3c:	f000 f806 	bl	8040e4c <__udivmoddi4>
 8040e40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040e44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8040e48:	b004      	add	sp, #16
 8040e4a:	4770      	bx	lr

08040e4c <__udivmoddi4>:
 8040e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8040e50:	9e08      	ldr	r6, [sp, #32]
 8040e52:	4604      	mov	r4, r0
 8040e54:	4688      	mov	r8, r1
 8040e56:	2b00      	cmp	r3, #0
 8040e58:	d14b      	bne.n	8040ef2 <__udivmoddi4+0xa6>
 8040e5a:	428a      	cmp	r2, r1
 8040e5c:	4615      	mov	r5, r2
 8040e5e:	d967      	bls.n	8040f30 <__udivmoddi4+0xe4>
 8040e60:	fab2 f282 	clz	r2, r2
 8040e64:	b14a      	cbz	r2, 8040e7a <__udivmoddi4+0x2e>
 8040e66:	f1c2 0720 	rsb	r7, r2, #32
 8040e6a:	fa01 f302 	lsl.w	r3, r1, r2
 8040e6e:	fa20 f707 	lsr.w	r7, r0, r7
 8040e72:	4095      	lsls	r5, r2
 8040e74:	ea47 0803 	orr.w	r8, r7, r3
 8040e78:	4094      	lsls	r4, r2
 8040e7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8040e7e:	0c23      	lsrs	r3, r4, #16
 8040e80:	fbb8 f7fe 	udiv	r7, r8, lr
 8040e84:	fa1f fc85 	uxth.w	ip, r5
 8040e88:	fb0e 8817 	mls	r8, lr, r7, r8
 8040e8c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8040e90:	fb07 f10c 	mul.w	r1, r7, ip
 8040e94:	4299      	cmp	r1, r3
 8040e96:	d909      	bls.n	8040eac <__udivmoddi4+0x60>
 8040e98:	18eb      	adds	r3, r5, r3
 8040e9a:	f107 30ff 	add.w	r0, r7, #4294967295
 8040e9e:	f080 811b 	bcs.w	80410d8 <__udivmoddi4+0x28c>
 8040ea2:	4299      	cmp	r1, r3
 8040ea4:	f240 8118 	bls.w	80410d8 <__udivmoddi4+0x28c>
 8040ea8:	3f02      	subs	r7, #2
 8040eaa:	442b      	add	r3, r5
 8040eac:	1a5b      	subs	r3, r3, r1
 8040eae:	b2a4      	uxth	r4, r4
 8040eb0:	fbb3 f0fe 	udiv	r0, r3, lr
 8040eb4:	fb0e 3310 	mls	r3, lr, r0, r3
 8040eb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8040ebc:	fb00 fc0c 	mul.w	ip, r0, ip
 8040ec0:	45a4      	cmp	ip, r4
 8040ec2:	d909      	bls.n	8040ed8 <__udivmoddi4+0x8c>
 8040ec4:	192c      	adds	r4, r5, r4
 8040ec6:	f100 33ff 	add.w	r3, r0, #4294967295
 8040eca:	f080 8107 	bcs.w	80410dc <__udivmoddi4+0x290>
 8040ece:	45a4      	cmp	ip, r4
 8040ed0:	f240 8104 	bls.w	80410dc <__udivmoddi4+0x290>
 8040ed4:	3802      	subs	r0, #2
 8040ed6:	442c      	add	r4, r5
 8040ed8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8040edc:	eba4 040c 	sub.w	r4, r4, ip
 8040ee0:	2700      	movs	r7, #0
 8040ee2:	b11e      	cbz	r6, 8040eec <__udivmoddi4+0xa0>
 8040ee4:	40d4      	lsrs	r4, r2
 8040ee6:	2300      	movs	r3, #0
 8040ee8:	e9c6 4300 	strd	r4, r3, [r6]
 8040eec:	4639      	mov	r1, r7
 8040eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040ef2:	428b      	cmp	r3, r1
 8040ef4:	d909      	bls.n	8040f0a <__udivmoddi4+0xbe>
 8040ef6:	2e00      	cmp	r6, #0
 8040ef8:	f000 80eb 	beq.w	80410d2 <__udivmoddi4+0x286>
 8040efc:	2700      	movs	r7, #0
 8040efe:	e9c6 0100 	strd	r0, r1, [r6]
 8040f02:	4638      	mov	r0, r7
 8040f04:	4639      	mov	r1, r7
 8040f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040f0a:	fab3 f783 	clz	r7, r3
 8040f0e:	2f00      	cmp	r7, #0
 8040f10:	d147      	bne.n	8040fa2 <__udivmoddi4+0x156>
 8040f12:	428b      	cmp	r3, r1
 8040f14:	d302      	bcc.n	8040f1c <__udivmoddi4+0xd0>
 8040f16:	4282      	cmp	r2, r0
 8040f18:	f200 80fa 	bhi.w	8041110 <__udivmoddi4+0x2c4>
 8040f1c:	1a84      	subs	r4, r0, r2
 8040f1e:	eb61 0303 	sbc.w	r3, r1, r3
 8040f22:	2001      	movs	r0, #1
 8040f24:	4698      	mov	r8, r3
 8040f26:	2e00      	cmp	r6, #0
 8040f28:	d0e0      	beq.n	8040eec <__udivmoddi4+0xa0>
 8040f2a:	e9c6 4800 	strd	r4, r8, [r6]
 8040f2e:	e7dd      	b.n	8040eec <__udivmoddi4+0xa0>
 8040f30:	b902      	cbnz	r2, 8040f34 <__udivmoddi4+0xe8>
 8040f32:	deff      	udf	#255	; 0xff
 8040f34:	fab2 f282 	clz	r2, r2
 8040f38:	2a00      	cmp	r2, #0
 8040f3a:	f040 808f 	bne.w	804105c <__udivmoddi4+0x210>
 8040f3e:	1b49      	subs	r1, r1, r5
 8040f40:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8040f44:	fa1f f885 	uxth.w	r8, r5
 8040f48:	2701      	movs	r7, #1
 8040f4a:	fbb1 fcfe 	udiv	ip, r1, lr
 8040f4e:	0c23      	lsrs	r3, r4, #16
 8040f50:	fb0e 111c 	mls	r1, lr, ip, r1
 8040f54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8040f58:	fb08 f10c 	mul.w	r1, r8, ip
 8040f5c:	4299      	cmp	r1, r3
 8040f5e:	d907      	bls.n	8040f70 <__udivmoddi4+0x124>
 8040f60:	18eb      	adds	r3, r5, r3
 8040f62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8040f66:	d202      	bcs.n	8040f6e <__udivmoddi4+0x122>
 8040f68:	4299      	cmp	r1, r3
 8040f6a:	f200 80cd 	bhi.w	8041108 <__udivmoddi4+0x2bc>
 8040f6e:	4684      	mov	ip, r0
 8040f70:	1a59      	subs	r1, r3, r1
 8040f72:	b2a3      	uxth	r3, r4
 8040f74:	fbb1 f0fe 	udiv	r0, r1, lr
 8040f78:	fb0e 1410 	mls	r4, lr, r0, r1
 8040f7c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8040f80:	fb08 f800 	mul.w	r8, r8, r0
 8040f84:	45a0      	cmp	r8, r4
 8040f86:	d907      	bls.n	8040f98 <__udivmoddi4+0x14c>
 8040f88:	192c      	adds	r4, r5, r4
 8040f8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8040f8e:	d202      	bcs.n	8040f96 <__udivmoddi4+0x14a>
 8040f90:	45a0      	cmp	r8, r4
 8040f92:	f200 80b6 	bhi.w	8041102 <__udivmoddi4+0x2b6>
 8040f96:	4618      	mov	r0, r3
 8040f98:	eba4 0408 	sub.w	r4, r4, r8
 8040f9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8040fa0:	e79f      	b.n	8040ee2 <__udivmoddi4+0x96>
 8040fa2:	f1c7 0c20 	rsb	ip, r7, #32
 8040fa6:	40bb      	lsls	r3, r7
 8040fa8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8040fac:	ea4e 0e03 	orr.w	lr, lr, r3
 8040fb0:	fa01 f407 	lsl.w	r4, r1, r7
 8040fb4:	fa20 f50c 	lsr.w	r5, r0, ip
 8040fb8:	fa21 f30c 	lsr.w	r3, r1, ip
 8040fbc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8040fc0:	4325      	orrs	r5, r4
 8040fc2:	fbb3 f9f8 	udiv	r9, r3, r8
 8040fc6:	0c2c      	lsrs	r4, r5, #16
 8040fc8:	fb08 3319 	mls	r3, r8, r9, r3
 8040fcc:	fa1f fa8e 	uxth.w	sl, lr
 8040fd0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8040fd4:	fb09 f40a 	mul.w	r4, r9, sl
 8040fd8:	429c      	cmp	r4, r3
 8040fda:	fa02 f207 	lsl.w	r2, r2, r7
 8040fde:	fa00 f107 	lsl.w	r1, r0, r7
 8040fe2:	d90b      	bls.n	8040ffc <__udivmoddi4+0x1b0>
 8040fe4:	eb1e 0303 	adds.w	r3, lr, r3
 8040fe8:	f109 30ff 	add.w	r0, r9, #4294967295
 8040fec:	f080 8087 	bcs.w	80410fe <__udivmoddi4+0x2b2>
 8040ff0:	429c      	cmp	r4, r3
 8040ff2:	f240 8084 	bls.w	80410fe <__udivmoddi4+0x2b2>
 8040ff6:	f1a9 0902 	sub.w	r9, r9, #2
 8040ffa:	4473      	add	r3, lr
 8040ffc:	1b1b      	subs	r3, r3, r4
 8040ffe:	b2ad      	uxth	r5, r5
 8041000:	fbb3 f0f8 	udiv	r0, r3, r8
 8041004:	fb08 3310 	mls	r3, r8, r0, r3
 8041008:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 804100c:	fb00 fa0a 	mul.w	sl, r0, sl
 8041010:	45a2      	cmp	sl, r4
 8041012:	d908      	bls.n	8041026 <__udivmoddi4+0x1da>
 8041014:	eb1e 0404 	adds.w	r4, lr, r4
 8041018:	f100 33ff 	add.w	r3, r0, #4294967295
 804101c:	d26b      	bcs.n	80410f6 <__udivmoddi4+0x2aa>
 804101e:	45a2      	cmp	sl, r4
 8041020:	d969      	bls.n	80410f6 <__udivmoddi4+0x2aa>
 8041022:	3802      	subs	r0, #2
 8041024:	4474      	add	r4, lr
 8041026:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 804102a:	fba0 8902 	umull	r8, r9, r0, r2
 804102e:	eba4 040a 	sub.w	r4, r4, sl
 8041032:	454c      	cmp	r4, r9
 8041034:	46c2      	mov	sl, r8
 8041036:	464b      	mov	r3, r9
 8041038:	d354      	bcc.n	80410e4 <__udivmoddi4+0x298>
 804103a:	d051      	beq.n	80410e0 <__udivmoddi4+0x294>
 804103c:	2e00      	cmp	r6, #0
 804103e:	d069      	beq.n	8041114 <__udivmoddi4+0x2c8>
 8041040:	ebb1 050a 	subs.w	r5, r1, sl
 8041044:	eb64 0403 	sbc.w	r4, r4, r3
 8041048:	fa04 fc0c 	lsl.w	ip, r4, ip
 804104c:	40fd      	lsrs	r5, r7
 804104e:	40fc      	lsrs	r4, r7
 8041050:	ea4c 0505 	orr.w	r5, ip, r5
 8041054:	e9c6 5400 	strd	r5, r4, [r6]
 8041058:	2700      	movs	r7, #0
 804105a:	e747      	b.n	8040eec <__udivmoddi4+0xa0>
 804105c:	f1c2 0320 	rsb	r3, r2, #32
 8041060:	fa20 f703 	lsr.w	r7, r0, r3
 8041064:	4095      	lsls	r5, r2
 8041066:	fa01 f002 	lsl.w	r0, r1, r2
 804106a:	fa21 f303 	lsr.w	r3, r1, r3
 804106e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8041072:	4338      	orrs	r0, r7
 8041074:	0c01      	lsrs	r1, r0, #16
 8041076:	fbb3 f7fe 	udiv	r7, r3, lr
 804107a:	fa1f f885 	uxth.w	r8, r5
 804107e:	fb0e 3317 	mls	r3, lr, r7, r3
 8041082:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8041086:	fb07 f308 	mul.w	r3, r7, r8
 804108a:	428b      	cmp	r3, r1
 804108c:	fa04 f402 	lsl.w	r4, r4, r2
 8041090:	d907      	bls.n	80410a2 <__udivmoddi4+0x256>
 8041092:	1869      	adds	r1, r5, r1
 8041094:	f107 3cff 	add.w	ip, r7, #4294967295
 8041098:	d22f      	bcs.n	80410fa <__udivmoddi4+0x2ae>
 804109a:	428b      	cmp	r3, r1
 804109c:	d92d      	bls.n	80410fa <__udivmoddi4+0x2ae>
 804109e:	3f02      	subs	r7, #2
 80410a0:	4429      	add	r1, r5
 80410a2:	1acb      	subs	r3, r1, r3
 80410a4:	b281      	uxth	r1, r0
 80410a6:	fbb3 f0fe 	udiv	r0, r3, lr
 80410aa:	fb0e 3310 	mls	r3, lr, r0, r3
 80410ae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80410b2:	fb00 f308 	mul.w	r3, r0, r8
 80410b6:	428b      	cmp	r3, r1
 80410b8:	d907      	bls.n	80410ca <__udivmoddi4+0x27e>
 80410ba:	1869      	adds	r1, r5, r1
 80410bc:	f100 3cff 	add.w	ip, r0, #4294967295
 80410c0:	d217      	bcs.n	80410f2 <__udivmoddi4+0x2a6>
 80410c2:	428b      	cmp	r3, r1
 80410c4:	d915      	bls.n	80410f2 <__udivmoddi4+0x2a6>
 80410c6:	3802      	subs	r0, #2
 80410c8:	4429      	add	r1, r5
 80410ca:	1ac9      	subs	r1, r1, r3
 80410cc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80410d0:	e73b      	b.n	8040f4a <__udivmoddi4+0xfe>
 80410d2:	4637      	mov	r7, r6
 80410d4:	4630      	mov	r0, r6
 80410d6:	e709      	b.n	8040eec <__udivmoddi4+0xa0>
 80410d8:	4607      	mov	r7, r0
 80410da:	e6e7      	b.n	8040eac <__udivmoddi4+0x60>
 80410dc:	4618      	mov	r0, r3
 80410de:	e6fb      	b.n	8040ed8 <__udivmoddi4+0x8c>
 80410e0:	4541      	cmp	r1, r8
 80410e2:	d2ab      	bcs.n	804103c <__udivmoddi4+0x1f0>
 80410e4:	ebb8 0a02 	subs.w	sl, r8, r2
 80410e8:	eb69 020e 	sbc.w	r2, r9, lr
 80410ec:	3801      	subs	r0, #1
 80410ee:	4613      	mov	r3, r2
 80410f0:	e7a4      	b.n	804103c <__udivmoddi4+0x1f0>
 80410f2:	4660      	mov	r0, ip
 80410f4:	e7e9      	b.n	80410ca <__udivmoddi4+0x27e>
 80410f6:	4618      	mov	r0, r3
 80410f8:	e795      	b.n	8041026 <__udivmoddi4+0x1da>
 80410fa:	4667      	mov	r7, ip
 80410fc:	e7d1      	b.n	80410a2 <__udivmoddi4+0x256>
 80410fe:	4681      	mov	r9, r0
 8041100:	e77c      	b.n	8040ffc <__udivmoddi4+0x1b0>
 8041102:	3802      	subs	r0, #2
 8041104:	442c      	add	r4, r5
 8041106:	e747      	b.n	8040f98 <__udivmoddi4+0x14c>
 8041108:	f1ac 0c02 	sub.w	ip, ip, #2
 804110c:	442b      	add	r3, r5
 804110e:	e72f      	b.n	8040f70 <__udivmoddi4+0x124>
 8041110:	4638      	mov	r0, r7
 8041112:	e708      	b.n	8040f26 <__udivmoddi4+0xda>
 8041114:	4637      	mov	r7, r6
 8041116:	e6e9      	b.n	8040eec <__udivmoddi4+0xa0>

08041118 <__aeabi_idiv0>:
 8041118:	4770      	bx	lr
 804111a:	bf00      	nop

0804111c <INIT_ReaderUART>:

static void chafon_init_GPIO(void);
static void verification_Comunication_Buffer();
static uint8_t check_earring_size();

void INIT_ReaderUART(USART_TypeDef *uartPort, uint32_t baudRate) {
 804111c:	b510      	push	{r4, lr}
	huart2.Instance = uartPort;
 804111e:	4b1f      	ldr	r3, [pc, #124]	; (804119c <INIT_ReaderUART+0x80>)
	huart2.Init.BaudRate = baudRate;
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8041120:	2400      	movs	r4, #0
void INIT_ReaderUART(USART_TypeDef *uartPort, uint32_t baudRate) {
 8041122:	b088      	sub	sp, #32
	huart2.Init.BaudRate = baudRate;
 8041124:	e9c3 0100 	strd	r0, r1, [r3]
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.Mode = UART_MODE_TX_RX;
 8041128:	220c      	movs	r2, #12
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 804112a:	4618      	mov	r0, r3
	huart2.Init.StopBits = UART_STOPBITS_1;
 804112c:	e9c3 4402 	strd	r4, r4, [r3, #8]
	huart2.Init.Parity = UART_PARITY_NONE;
 8041130:	611c      	str	r4, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8041132:	e9c3 2405 	strd	r2, r4, [r3, #20]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8041136:	61dc      	str	r4, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8041138:	f004 ff36 	bl	8045fa8 <HAL_UART_Init>
 804113c:	b108      	cbz	r0, 8041142 <INIT_ReaderUART+0x26>
		Error_Handler();
 804113e:	f00c ff15 	bl	804df6c <Error_Handler>
}

static void chafon_init_GPIO(void) {
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };

	__HAL_RCC_USART2_CLK_ENABLE();
 8041142:	4b17      	ldr	r3, [pc, #92]	; (80411a0 <INIT_ReaderUART+0x84>)
 8041144:	9401      	str	r4, [sp, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8041146:	9405      	str	r4, [sp, #20]
	__HAL_RCC_USART2_CLK_ENABLE();
 8041148:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 804114a:	4816      	ldr	r0, [pc, #88]	; (80411a4 <INIT_ReaderUART+0x88>)
	__HAL_RCC_USART2_CLK_ENABLE();
 804114c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8041150:	641a      	str	r2, [r3, #64]	; 0x40
 8041152:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8041154:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8041158:	9201      	str	r2, [sp, #4]
 804115a:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 804115c:	9402      	str	r4, [sp, #8]
 804115e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8041160:	f042 0201 	orr.w	r2, r2, #1
 8041164:	631a      	str	r2, [r3, #48]	; 0x30
 8041166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041168:	f003 0301 	and.w	r3, r3, #1
 804116c:	9302      	str	r3, [sp, #8]
 804116e:	9b02      	ldr	r3, [sp, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041170:	220c      	movs	r2, #12
 8041172:	2302      	movs	r3, #2
 8041174:	e9cd 2303 	strd	r2, r3, [sp, #12]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8041178:	2103      	movs	r1, #3
 804117a:	2307      	movs	r3, #7
 804117c:	e9cd 1306 	strd	r1, r3, [sp, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8041180:	a903      	add	r1, sp, #12
 8041182:	f002 fdad 	bl	8043ce0 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8041186:	2200      	movs	r2, #0
 8041188:	4611      	mov	r1, r2
 804118a:	2026      	movs	r0, #38	; 0x26
 804118c:	f002 f9ae 	bl	80434ec <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8041190:	2026      	movs	r0, #38	; 0x26
 8041192:	f002 f9df 	bl	8043554 <HAL_NVIC_EnableIRQ>
}
 8041196:	b008      	add	sp, #32
 8041198:	bd10      	pop	{r4, pc}
 804119a:	bf00      	nop
 804119c:	2000bbf8 	.word	0x2000bbf8
 80411a0:	40023800 	.word	0x40023800
 80411a4:	40020000 	.word	0x40020000

080411a8 <init_Communication>:
//        j+=2;
//    }
//    return 0;
//}

void init_Communication() {
 80411a8:	b510      	push	{r4, lr}
	HAL_UART_Receive_IT(&huart2, reciver_buffer, 1);
 80411aa:	4c07      	ldr	r4, [pc, #28]	; (80411c8 <init_Communication+0x20>)
 80411ac:	4907      	ldr	r1, [pc, #28]	; (80411cc <init_Communication+0x24>)
 80411ae:	2201      	movs	r2, #1
 80411b0:	4620      	mov	r0, r4
 80411b2:	f004 fffd 	bl	80461b0 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, (uint8_t*) INIT_COMMUNICATION_CHAFON,
			INIT_COMMUNICATION_CHAFON[0] + 1, 100);
 80411b6:	4906      	ldr	r1, [pc, #24]	; (80411d0 <init_Communication+0x28>)
 80411b8:	780a      	ldrb	r2, [r1, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*) INIT_COMMUNICATION_CHAFON,
 80411ba:	4620      	mov	r0, r4
 80411bc:	2364      	movs	r3, #100	; 0x64
 80411be:	3201      	adds	r2, #1
}
 80411c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Transmit(&huart2, (uint8_t*) INIT_COMMUNICATION_CHAFON,
 80411c4:	f004 bf36 	b.w	8046034 <HAL_UART_Transmit>
 80411c8:	2000bbf8 	.word	0x2000bbf8
 80411cc:	2000bc38 	.word	0x2000bc38
 80411d0:	20001000 	.word	0x20001000

080411d4 <get_Earrings>:
//	}
//	return 0;
//}

static uint8_t check_earring_size() {
	if (last_earring > -1 && last_earring >= number_earrings) {
 80411d4:	4a0d      	ldr	r2, [pc, #52]	; (804120c <get_Earrings+0x38>)
 80411d6:	490e      	ldr	r1, [pc, #56]	; (8041210 <get_Earrings+0x3c>)
uint8_t get_Earrings(Model_earrings *earring) {
 80411d8:	b510      	push	{r4, lr}
	if (last_earring > -1 && last_earring >= number_earrings) {
 80411da:	6894      	ldr	r4, [r2, #8]
 80411dc:	2c00      	cmp	r4, #0
 80411de:	db0e      	blt.n	80411fe <get_Earrings+0x2a>
 80411e0:	680b      	ldr	r3, [r1, #0]
 80411e2:	429c      	cmp	r4, r3
 80411e4:	db0b      	blt.n	80411fe <get_Earrings+0x2a>
		memcpy(earring->N_TAG, &earrings[number_earrings].N_TAG, EARRING_SIZE);
 80411e6:	4a0b      	ldr	r2, [pc, #44]	; (8041214 <get_Earrings+0x40>)
 80411e8:	2124      	movs	r1, #36	; 0x24
 80411ea:	fb01 2303 	mla	r3, r1, r3, r2
 80411ee:	681a      	ldr	r2, [r3, #0]
 80411f0:	6002      	str	r2, [r0, #0]
 80411f2:	685a      	ldr	r2, [r3, #4]
 80411f4:	6042      	str	r2, [r0, #4]
 80411f6:	689a      	ldr	r2, [r3, #8]
 80411f8:	6082      	str	r2, [r0, #8]
		return 1;
 80411fa:	2001      	movs	r0, #1
}
 80411fc:	bd10      	pop	{r4, pc}
		return 1;
	} else {
		//PRINTF("\n-----ZEROU------(%d)(%d)\n", number_earrings, last_earring);
		number_earrings = 0;
 80411fe:	2000      	movs	r0, #0
		last_earring = -1;
 8041200:	f04f 33ff 	mov.w	r3, #4294967295
		number_earrings = 0;
 8041204:	6008      	str	r0, [r1, #0]
		last_earring = -1;
 8041206:	6093      	str	r3, [r2, #8]
 8041208:	e7f8      	b.n	80411fc <get_Earrings+0x28>
 804120a:	bf00      	nop
 804120c:	20001000 	.word	0x20001000
 8041210:	2000133c 	.word	0x2000133c
 8041214:	20001410 	.word	0x20001410

08041218 <data_request_chafon>:
		return 0;
	}
}

void data_request_chafon(ANTENNAS antenna) {
	DATA_REQUEST[6] = antenna;
 8041218:	4b0f      	ldr	r3, [pc, #60]	; (8041258 <data_request_chafon+0x40>)
 804121a:	7498      	strb	r0, [r3, #18]
	ANTENNA_CRC(antenna, DATA_REQUEST[8], DATA_REQUEST[9]);
 804121c:	3880      	subs	r0, #128	; 0x80
 804121e:	2803      	cmp	r0, #3
 8041220:	d807      	bhi.n	8041232 <data_request_chafon+0x1a>
 8041222:	e8df f000 	tbb	[pc, r0]
 8041226:	0d02      	.short	0x0d02
 8041228:	1511      	.short	0x1511
 804122a:	22dd      	movs	r2, #221	; 0xdd
 804122c:	751a      	strb	r2, [r3, #20]
 804122e:	2223      	movs	r2, #35	; 0x23
 8041230:	755a      	strb	r2, [r3, #21]
	HAL_UART_Transmit(&huart2, (uint8_t*) DATA_REQUEST, DATA_REQUEST[0] + 1,
 8041232:	7b1a      	ldrb	r2, [r3, #12]
 8041234:	4909      	ldr	r1, [pc, #36]	; (804125c <data_request_chafon+0x44>)
 8041236:	480a      	ldr	r0, [pc, #40]	; (8041260 <data_request_chafon+0x48>)
 8041238:	2364      	movs	r3, #100	; 0x64
 804123a:	3201      	adds	r2, #1
 804123c:	f004 befa 	b.w	8046034 <HAL_UART_Transmit>
	ANTENNA_CRC(antenna, DATA_REQUEST[8], DATA_REQUEST[9]);
 8041240:	2205      	movs	r2, #5
 8041242:	751a      	strb	r2, [r3, #20]
 8041244:	223a      	movs	r2, #58	; 0x3a
 8041246:	e7f3      	b.n	8041230 <data_request_chafon+0x18>
 8041248:	226d      	movs	r2, #109	; 0x6d
 804124a:	751a      	strb	r2, [r3, #20]
 804124c:	2210      	movs	r2, #16
 804124e:	e7ef      	b.n	8041230 <data_request_chafon+0x18>
 8041250:	22b5      	movs	r2, #181	; 0xb5
 8041252:	751a      	strb	r2, [r3, #20]
 8041254:	2209      	movs	r2, #9
 8041256:	e7eb      	b.n	8041230 <data_request_chafon+0x18>
 8041258:	20001000 	.word	0x20001000
 804125c:	2000100c 	.word	0x2000100c
 8041260:	2000bbf8 	.word	0x2000bbf8

08041264 <data_Validation>:
			100);
}

void data_Validation() {
 8041264:	b5f0      	push	{r4, r5, r6, r7, lr}

	uint8_t verification_buffer[500];
	PRINTF(" count_byte: %d \n\n",count_tags);
 8041266:	4c1f      	ldr	r4, [pc, #124]	; (80412e4 <data_Validation+0x80>)
 8041268:	481f      	ldr	r0, [pc, #124]	; (80412e8 <data_Validation+0x84>)
 804126a:	6861      	ldr	r1, [r4, #4]
void data_Validation() {
 804126c:	b0ff      	sub	sp, #508	; 0x1fc
	PRINTF(" count_byte: %d \n\n",count_tags);
 804126e:	f00c fd79 	bl	804dd64 <TraceSend>
	if (flag_new_pack) {
 8041272:	7a23      	ldrb	r3, [r4, #8]
 8041274:	b363      	cbz	r3, 80412d0 <data_Validation+0x6c>

		memcpy(verification_buffer, data, count_tags);
 8041276:	6862      	ldr	r2, [r4, #4]

		for (int i = 0; i < count_tags ; i++) {

			PRINTF("%x ", data[i]);
 8041278:	4f1c      	ldr	r7, [pc, #112]	; (80412ec <data_Validation+0x88>)
		memcpy(verification_buffer, data, count_tags);
 804127a:	f104 0109 	add.w	r1, r4, #9
 804127e:	a801      	add	r0, sp, #4
 8041280:	f00e ff59 	bl	8050136 <memcpy>
		for (int i = 0; i < count_tags ; i++) {
 8041284:	2500      	movs	r5, #0
 8041286:	f104 0609 	add.w	r6, r4, #9
 804128a:	6863      	ldr	r3, [r4, #4]
 804128c:	42ab      	cmp	r3, r5
 804128e:	dc21      	bgt.n	80412d4 <data_Validation+0x70>

		}
		PRINTF(" endPack\n\n");
 8041290:	4817      	ldr	r0, [pc, #92]	; (80412f0 <data_Validation+0x8c>)
 8041292:	f00c fd67 	bl	804dd64 <TraceSend>
		count_tags = 0;
 8041296:	2300      	movs	r3, #0
 8041298:	6063      	str	r3, [r4, #4]

		if (!verification_flag && verification_buffer[0] == ANSWER_COMMUNICATION_SIZE) {
 804129a:	f894 30d1 	ldrb.w	r3, [r4, #209]	; 0xd1
 804129e:	b9ab      	cbnz	r3, 80412cc <data_Validation+0x68>
 80412a0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80412a4:	2b11      	cmp	r3, #17
 80412a6:	d111      	bne.n	80412cc <data_Validation+0x68>
}
static void verification_Comunication_Buffer(uint8_t verification_buffer[TAGS_DATA_SIZE]) {
//memcpy(verification_buffer,data,19);

	if (verification_buffer[0] == 0x11
			&& memcmp(verification_buffer, CHAFON_ANSWER, CHAFON_ANSWER[0] + 1)
 80412a8:	4912      	ldr	r1, [pc, #72]	; (80412f4 <data_Validation+0x90>)
 80412aa:	f811 2f16 	ldrb.w	r2, [r1, #22]!
 80412ae:	a801      	add	r0, sp, #4
 80412b0:	3201      	adds	r2, #1
 80412b2:	f00e ff31 	bl	8050118 <memcmp>
 80412b6:	b998      	cbnz	r0, 80412e0 <data_Validation+0x7c>
					== 0) {
		communication_validation_flag = 1;
 80412b8:	2301      	movs	r3, #1
		reciever_flag = 1;
		verification_flag = 1;
		PRINTF("Successful Communication CHAFON \r\n");
 80412ba:	480f      	ldr	r0, [pc, #60]	; (80412f8 <data_Validation+0x94>)
		communication_validation_flag = 1;
 80412bc:	f884 30d2 	strb.w	r3, [r4, #210]	; 0xd2
		reciever_flag = 1;
 80412c0:	f884 30d3 	strb.w	r3, [r4, #211]	; 0xd3
		verification_flag = 1;
 80412c4:	f884 30d1 	strb.w	r3, [r4, #209]	; 0xd1

	} else
		PRINTF("\n Communication Fail CHAFON \n");
 80412c8:	f00c fd4c 	bl	804dd64 <TraceSend>
		flag_new_pack = 0;
 80412cc:	2300      	movs	r3, #0
 80412ce:	7223      	strb	r3, [r4, #8]
}
 80412d0:	b07f      	add	sp, #508	; 0x1fc
 80412d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			PRINTF("%x ", data[i]);
 80412d4:	5d71      	ldrb	r1, [r6, r5]
 80412d6:	4638      	mov	r0, r7
 80412d8:	f00c fd44 	bl	804dd64 <TraceSend>
		for (int i = 0; i < count_tags ; i++) {
 80412dc:	3501      	adds	r5, #1
 80412de:	e7d4      	b.n	804128a <data_Validation+0x26>
		PRINTF("\n Communication Fail CHAFON \n");
 80412e0:	4806      	ldr	r0, [pc, #24]	; (80412fc <data_Validation+0x98>)
 80412e2:	e7f1      	b.n	80412c8 <data_Validation+0x64>
 80412e4:	2000133c 	.word	0x2000133c
 80412e8:	08051e30 	.word	0x08051e30
 80412ec:	08051e43 	.word	0x08051e43
 80412f0:	08051e47 	.word	0x08051e47
 80412f4:	20001000 	.word	0x20001000
 80412f8:	08051e52 	.word	0x08051e52
 80412fc:	08051e75 	.word	0x08051e75

08041300 <assert_version>:
		return true;
	return false;
}

bool assert_version(uint8_t major_version, uint8_t minor_version, uint8_t patch_version){
	if(MAJOR_FIRMWARE_VERSION == major_version){ // Criar define para posições da versão
 8041300:	2801      	cmp	r0, #1
 8041302:	d105      	bne.n	8041310 <assert_version+0x10>
		if (MINOR_FIRMWARE_VERSION == minor_version){
 8041304:	b939      	cbnz	r1, 8041316 <assert_version+0x16>
			if (PATCH_FIRMWARE_VERSION < patch_version){
 8041306:	2a07      	cmp	r2, #7
 8041308:	bf94      	ite	ls
 804130a:	2000      	movls	r0, #0
 804130c:	2001      	movhi	r0, #1
 804130e:	4770      	bx	lr
		}
		else if(MINOR_FIRMWARE_VERSION < minor_version){
			return true;
		}
	}
	else if (MAJOR_FIRMWARE_VERSION < major_version){
 8041310:	bf8c      	ite	hi
 8041312:	2001      	movhi	r0, #1
 8041314:	2000      	movls	r0, #0
		return true;
	}
	return false;
}
 8041316:	4770      	bx	lr

08041318 <break_connection>:
//	 if (comVAR==length)
//		 	return 1;
//	 else 	return 0;
//}

void break_connection(){
 8041318:	b510      	push	{r4, lr}

	HAL_GPIO_WritePin(BLE_BRK_GPIO_Port, BLE_BRK_Pin, RESET);		// Aciona o pino que interrompe a possível conexão errada.
 804131a:	4c07      	ldr	r4, [pc, #28]	; (8041338 <break_connection+0x20>)
 804131c:	2200      	movs	r2, #0
 804131e:	4620      	mov	r0, r4
 8041320:	f44f 7180 	mov.w	r1, #256	; 0x100
 8041324:	f002 fe50 	bl	8043fc8 <HAL_GPIO_WritePin>

	uint32_t aux = 0;
	while(aux<1*100000)
		aux++;

	HAL_GPIO_WritePin(BLE_BRK_GPIO_Port, BLE_BRK_Pin, SET);			// Se a conexão for quebrada, restaura a forma original.
 8041328:	4620      	mov	r0, r4
 804132a:	2201      	movs	r2, #1
 804132c:	f44f 7180 	mov.w	r1, #256	; 0x100

}
 8041330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(BLE_BRK_GPIO_Port, BLE_BRK_Pin, SET);			// Se a conexão for quebrada, restaura a forma original.
 8041334:	f002 be48 	b.w	8043fc8 <HAL_GPIO_WritePin>
 8041338:	40020000 	.word	0x40020000

0804133c <ble_handler>:
{
 804133c:	b538      	push	{r3, r4, r5, lr}
	switch (message[1]) {
 804133e:	7842      	ldrb	r2, [r0, #1]
 8041340:	2a60      	cmp	r2, #96	; 0x60
{
 8041342:	4603      	mov	r3, r0
	switch (message[1]) {
 8041344:	d016      	beq.n	8041374 <ble_handler+0x38>
 8041346:	d809      	bhi.n	804135c <ble_handler+0x20>
 8041348:	2a21      	cmp	r2, #33	; 0x21
 804134a:	d05f      	beq.n	804140c <ble_handler+0xd0>
 804134c:	2a22      	cmp	r2, #34	; 0x22
 804134e:	d061      	beq.n	8041414 <ble_handler+0xd8>
 8041350:	2a20      	cmp	r2, #32
 8041352:	d121      	bne.n	8041398 <ble_handler+0x5c>
			HAL_UART_Transmit(&huart1, (uint8_t *) &answer_firmware_version_buffer, sizeof(answer_firmware_version_buffer), 100);
 8041354:	2364      	movs	r3, #100	; 0x64
 8041356:	2206      	movs	r2, #6
 8041358:	493b      	ldr	r1, [pc, #236]	; (8041448 <ble_handler+0x10c>)
 804135a:	e053      	b.n	8041404 <ble_handler+0xc8>
	switch (message[1]) {
 804135c:	2a65      	cmp	r2, #101	; 0x65
 804135e:	d03b      	beq.n	80413d8 <ble_handler+0x9c>
 8041360:	2a6f      	cmp	r2, #111	; 0x6f
 8041362:	d025      	beq.n	80413b0 <ble_handler+0x74>
 8041364:	2a61      	cmp	r2, #97	; 0x61
 8041366:	d117      	bne.n	8041398 <ble_handler+0x5c>
			flags_ble.confirm = SET;
 8041368:	4a38      	ldr	r2, [pc, #224]	; (804144c <ble_handler+0x110>)
 804136a:	7813      	ldrb	r3, [r2, #0]
 804136c:	f043 0304 	orr.w	r3, r3, #4
 8041370:	7013      	strb	r3, [r2, #0]
			break;
 8041372:	e011      	b.n	8041398 <ble_handler+0x5c>
			if(flags_ble.connection == SET)
 8041374:	4c35      	ldr	r4, [pc, #212]	; (804144c <ble_handler+0x110>)
 8041376:	7823      	ldrb	r3, [r4, #0]
 8041378:	f013 0508 	ands.w	r5, r3, #8
 804137c:	d00e      	beq.n	804139c <ble_handler+0x60>
				HAL_UART_Transmit(&huart1, (uint8_t *)BLE_ESTABLISHED_CONNECTION, MSG_CONNECTION_ESTABLISHED_SIZE, 100);
 804137e:	2364      	movs	r3, #100	; 0x64
 8041380:	2203      	movs	r2, #3
 8041382:	4933      	ldr	r1, [pc, #204]	; (8041450 <ble_handler+0x114>)
 8041384:	4833      	ldr	r0, [pc, #204]	; (8041454 <ble_handler+0x118>)
 8041386:	f004 fe55 	bl	8046034 <HAL_UART_Transmit>
			  	HAL_TIM_Base_Start_IT(&htim2);			// Inicia o timer que envia as requisições para o módulo RFID
 804138a:	4833      	ldr	r0, [pc, #204]	; (8041458 <ble_handler+0x11c>)
 804138c:	f004 fb37 	bl	80459fe <HAL_TIM_Base_Start_IT>
			  	flags_ble.start = SET;
 8041390:	7823      	ldrb	r3, [r4, #0]
 8041392:	f043 0301 	orr.w	r3, r3, #1
 8041396:	7023      	strb	r3, [r4, #0]
}
 8041398:	2000      	movs	r0, #0
 804139a:	bd38      	pop	{r3, r4, r5, pc}
				HAL_TIM_Base_Stop_IT(&htim2);			// Para momentâneamente as requisições e leituras de TAG para requisição do ID do RFID
 804139c:	482e      	ldr	r0, [pc, #184]	; (8041458 <ble_handler+0x11c>)
 804139e:	f004 fb3e 	bl	8045a1e <HAL_TIM_Base_Stop_IT>
				flags_ble.start = RESET;						// Reseta a flag de inicio da comunicação
 80413a2:	7823      	ldrb	r3, [r4, #0]
 80413a4:	f365 0300 	bfi	r3, r5, #0, #1
				flags_ble.start = RESET;				// Reseta a flag de inicio da comunicação
 80413a8:	7023      	strb	r3, [r4, #0]
				break_connection();						// Função de quebra de conexão
 80413aa:	f7ff ffb5 	bl	8041318 <break_connection>
 80413ae:	e7f3      	b.n	8041398 <ble_handler+0x5c>
			if (flags_ble.start == SET)
 80413b0:	4c26      	ldr	r4, [pc, #152]	; (804144c <ble_handler+0x110>)
			HAL_UART_Transmit(&huart1, (uint8_t *) answer_end_connection, 3, 100);
 80413b2:	492a      	ldr	r1, [pc, #168]	; (804145c <ble_handler+0x120>)
 80413b4:	4827      	ldr	r0, [pc, #156]	; (8041454 <ble_handler+0x118>)
 80413b6:	2364      	movs	r3, #100	; 0x64
 80413b8:	2203      	movs	r2, #3
 80413ba:	f004 fe3b 	bl	8046034 <HAL_UART_Transmit>
			if (flags_ble.start == SET)
 80413be:	7823      	ldrb	r3, [r4, #0]
 80413c0:	07db      	lsls	r3, r3, #31
 80413c2:	d5e9      	bpl.n	8041398 <ble_handler+0x5c>
				PRINTF("====>   START = RESET \r\n");
 80413c4:	4826      	ldr	r0, [pc, #152]	; (8041460 <ble_handler+0x124>)
 80413c6:	f00c fccd 	bl	804dd64 <TraceSend>
				HAL_TIM_Base_Stop_IT(&htim2);			// Para momentâneamente as requisições e leituras de TAG
 80413ca:	4823      	ldr	r0, [pc, #140]	; (8041458 <ble_handler+0x11c>)
 80413cc:	f004 fb27 	bl	8045a1e <HAL_TIM_Base_Stop_IT>
				flags_ble.start = RESET;				// Reseta a flag de inicio da comunicação
 80413d0:	7823      	ldrb	r3, [r4, #0]
 80413d2:	f36f 0300 	bfc	r3, #0, #1
 80413d6:	e7e7      	b.n	80413a8 <ble_handler+0x6c>
	switch (message[1]) {
 80413d8:	2102      	movs	r1, #2
				if(message[sizeofEarring] == 0x0D)
 80413da:	5c58      	ldrb	r0, [r3, r1]
 80413dc:	280d      	cmp	r0, #13
 80413de:	b2ca      	uxtb	r2, r1
 80413e0:	d003      	beq.n	80413ea <ble_handler+0xae>
 80413e2:	3101      	adds	r1, #1
			for (sizeofEarring=2; sizeofEarring<TAG_SIZE; sizeofEarring++)
 80413e4:	2924      	cmp	r1, #36	; 0x24
 80413e6:	d1f8      	bne.n	80413da <ble_handler+0x9e>
 80413e8:	460a      	mov	r2, r1
			sizeofEarring -= 2;
 80413ea:	3a02      	subs	r2, #2
 80413ec:	b2d2      	uxtb	r2, r2
			memcpy(&MSG_WRITE_EARRING[initialPosition], &message[2], sizeofEarring );
 80413ee:	4c1d      	ldr	r4, [pc, #116]	; (8041464 <ble_handler+0x128>)
			initialPosition = (MSG_WRITE_EARRING_SIZE-1) - sizeofEarring;
 80413f0:	f1c2 0020 	rsb	r0, r2, #32
			memcpy(&MSG_WRITE_EARRING[initialPosition], &message[2], sizeofEarring );
 80413f4:	1c99      	adds	r1, r3, #2
 80413f6:	fa54 f080 	uxtab	r0, r4, r0
 80413fa:	f00e fe9c 	bl	8050136 <memcpy>
			HAL_UART_Transmit(&huart1, (uint8_t *) MSG_WRITE_EARRING, MSG_WRITE_EARRING_SIZE, 100);
 80413fe:	2364      	movs	r3, #100	; 0x64
 8041400:	2221      	movs	r2, #33	; 0x21
 8041402:	4621      	mov	r1, r4
				HAL_UART_Transmit(&huart1, (uint8_t *) &answer_wrong_file_buffer, sizeof(answer_wrong_file_buffer), 100);
 8041404:	4813      	ldr	r0, [pc, #76]	; (8041454 <ble_handler+0x118>)
 8041406:	f004 fe15 	bl	8046034 <HAL_UART_Transmit>
 804140a:	e7c5      	b.n	8041398 <ble_handler+0x5c>
			HAL_UART_Transmit(&huart1, (uint8_t *) &answer_device_type,sizeof(answer_device_type),100);
 804140c:	2364      	movs	r3, #100	; 0x64
 804140e:	2204      	movs	r2, #4
 8041410:	4915      	ldr	r1, [pc, #84]	; (8041468 <ble_handler+0x12c>)
 8041412:	e7f7      	b.n	8041404 <ble_handler+0xc8>
			if(assert_version(message[2], message[3], message[4])){
 8041414:	7902      	ldrb	r2, [r0, #4]
 8041416:	78c1      	ldrb	r1, [r0, #3]
 8041418:	7880      	ldrb	r0, [r0, #2]
 804141a:	f7ff ff71 	bl	8041300 <assert_version>
 804141e:	b178      	cbz	r0, 8041440 <ble_handler+0x104>
	if (DEVICE_TYPE == device_type)
 8041420:	795b      	ldrb	r3, [r3, #5]
 8041422:	2b02      	cmp	r3, #2
 8041424:	d108      	bne.n	8041438 <ble_handler+0xfc>
					flags_ble.update_mode = SET;
 8041426:	4a09      	ldr	r2, [pc, #36]	; (804144c <ble_handler+0x110>)
					HAL_UART_Transmit(&huart1, (uint8_t *) &answer_execute_update_buffer, sizeof(answer_execute_update_buffer), 100);
 8041428:	4910      	ldr	r1, [pc, #64]	; (804146c <ble_handler+0x130>)
					flags_ble.update_mode = SET;
 804142a:	7813      	ldrb	r3, [r2, #0]
 804142c:	f043 0310 	orr.w	r3, r3, #16
 8041430:	7013      	strb	r3, [r2, #0]
					HAL_UART_Transmit(&huart1, (uint8_t *) &answer_execute_update_buffer, sizeof(answer_execute_update_buffer), 100);
 8041432:	2364      	movs	r3, #100	; 0x64
 8041434:	2203      	movs	r2, #3
 8041436:	e7e5      	b.n	8041404 <ble_handler+0xc8>
					HAL_UART_Transmit(&huart1, (uint8_t *) &answer_wrong_device_type, sizeof(answer_wrong_device_type),100);
 8041438:	2364      	movs	r3, #100	; 0x64
 804143a:	2203      	movs	r2, #3
 804143c:	490c      	ldr	r1, [pc, #48]	; (8041470 <ble_handler+0x134>)
 804143e:	e7e1      	b.n	8041404 <ble_handler+0xc8>
				HAL_UART_Transmit(&huart1, (uint8_t *) &answer_wrong_file_buffer, sizeof(answer_wrong_file_buffer), 100);
 8041440:	2364      	movs	r3, #100	; 0x64
 8041442:	2203      	movs	r2, #3
 8041444:	490b      	ldr	r1, [pc, #44]	; (8041474 <ble_handler+0x138>)
 8041446:	e7dd      	b.n	8041404 <ble_handler+0xc8>
 8041448:	2000106b 	.word	0x2000106b
 804144c:	2000bc70 	.word	0x2000bc70
 8041450:	20001040 	.word	0x20001040
 8041454:	2000bc74 	.word	0x2000bc74
 8041458:	2000de88 	.word	0x2000de88
 804145c:	20001043 	.word	0x20001043
 8041460:	08051e93 	.word	0x08051e93
 8041464:	20001046 	.word	0x20001046
 8041468:	20001067 	.word	0x20001067
 804146c:	20001071 	.word	0x20001071
 8041470:	20001074 	.word	0x20001074
 8041474:	20001077 	.word	0x20001077

08041478 <MX_USART1_UART_Init>:
  * @retval None
  */
void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 8041478:	480b      	ldr	r0, [pc, #44]	; (80414a8 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 9600;
 804147a:	4a0c      	ldr	r2, [pc, #48]	; (80414ac <MX_USART1_UART_Init+0x34>)
{
 804147c:	b508      	push	{r3, lr}
  huart1.Init.BaudRate = 9600;
 804147e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8041482:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8041486:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8041488:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 804148a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 804148e:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8041490:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8041494:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8041496:	f004 fd87 	bl	8045fa8 <HAL_UART_Init>
 804149a:	b118      	cbz	r0, 80414a4 <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 804149c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80414a0:	f00c bd64 	b.w	804df6c <Error_Handler>
}
 80414a4:	bd08      	pop	{r3, pc}
 80414a6:	bf00      	nop
 80414a8:	2000bc74 	.word	0x2000bc74
 80414ac:	40011000 	.word	0x40011000

080414b0 <MX_USART2_UART_Init>:
  * @retval None
  */
void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
 80414b0:	480b      	ldr	r0, [pc, #44]	; (80414e0 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 38400;
 80414b2:	4a0c      	ldr	r2, [pc, #48]	; (80414e4 <MX_USART2_UART_Init+0x34>)
{
 80414b4:	b508      	push	{r3, lr}
  huart2.Init.BaudRate = 38400;
 80414b6:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80414ba:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80414be:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80414c0:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80414c2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Parity = UART_PARITY_NONE;
 80414c6:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80414c8:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80414cc:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80414ce:	f004 fd6b 	bl	8045fa8 <HAL_UART_Init>
 80414d2:	b118      	cbz	r0, 80414dc <MX_USART2_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 80414d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80414d8:	f00c bd48 	b.w	804df6c <Error_Handler>
}
 80414dc:	bd08      	pop	{r3, pc}
 80414de:	bf00      	nop
 80414e0:	2000bbf8 	.word	0x2000bbf8
 80414e4:	40004400 	.word	0x40004400

080414e8 <Ble_Init_GPIO>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void Ble_Init_GPIO(void)
{
 80414e8:	b530      	push	{r4, r5, lr}
 80414ea:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80414ec:	2214      	movs	r2, #20
 80414ee:	2100      	movs	r1, #0
 80414f0:	a803      	add	r0, sp, #12
 80414f2:	f00e fe2b 	bl	805014c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80414f6:	2400      	movs	r4, #0
 80414f8:	4b18      	ldr	r3, [pc, #96]	; (804155c <Ble_Init_GPIO+0x74>)
 80414fa:	9401      	str	r4, [sp, #4]
 80414fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_BRK_GPIO_Port, BLE_BRK_Pin, GPIO_PIN_SET);
 80414fe:	4d18      	ldr	r5, [pc, #96]	; (8041560 <Ble_Init_GPIO+0x78>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8041500:	f042 0201 	orr.w	r2, r2, #1
 8041504:	631a      	str	r2, [r3, #48]	; 0x30
 8041506:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8041508:	f002 0201 	and.w	r2, r2, #1
 804150c:	9201      	str	r2, [sp, #4]
 804150e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8041510:	9402      	str	r4, [sp, #8]
 8041512:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8041514:	f042 0202 	orr.w	r2, r2, #2
 8041518:	631a      	str	r2, [r3, #48]	; 0x30
 804151a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804151c:	f003 0302 	and.w	r3, r3, #2
 8041520:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(BLE_BRK_GPIO_Port, BLE_BRK_Pin, GPIO_PIN_SET);
 8041522:	4628      	mov	r0, r5
 8041524:	2201      	movs	r2, #1
 8041526:	f44f 7180 	mov.w	r1, #256	; 0x100
  __HAL_RCC_GPIOB_CLK_ENABLE();
 804152a:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(BLE_BRK_GPIO_Port, BLE_BRK_Pin, GPIO_PIN_SET);
 804152c:	f002 fd4c 	bl	8043fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLE_BRK_Pin */
  GPIO_InitStruct.Pin = BLE_BRK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8041530:	f44f 7280 	mov.w	r2, #256	; 0x100
 8041534:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(BLE_BRK_GPIO_Port, &GPIO_InitStruct);
 8041536:	a903      	add	r1, sp, #12
 8041538:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 804153a:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804153e:	e9cd 3405 	strd	r3, r4, [sp, #20]
  HAL_GPIO_Init(BLE_BRK_GPIO_Port, &GPIO_InitStruct);
 8041542:	f002 fbcd 	bl	8043ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_STATE_Pin */
  GPIO_InitStruct.Pin = BLE_STATE_Pin;
 8041546:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BLE_STATE_GPIO_Port, &GPIO_InitStruct);
 804154a:	a903      	add	r1, sp, #12
 804154c:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 804154e:	e9cd 3403 	strd	r3, r4, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041552:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(BLE_STATE_GPIO_Port, &GPIO_InitStruct);
 8041554:	f002 fbc4 	bl	8043ce0 <HAL_GPIO_Init>

}
 8041558:	b009      	add	sp, #36	; 0x24
 804155a:	bd30      	pop	{r4, r5, pc}
 804155c:	40023800 	.word	0x40023800
 8041560:	40020000 	.word	0x40020000

08041564 <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8041564:	b510      	push	{r4, lr}
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 8041566:	4909      	ldr	r1, [pc, #36]	; (804158c <GetFskBandwidthRegValue+0x28>)
{
 8041568:	2300      	movs	r3, #0
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 804156a:	f851 4033 	ldr.w	r4, [r1, r3, lsl #3]
 804156e:	4284      	cmp	r4, r0
 8041570:	ea4f 02c3 	mov.w	r2, r3, lsl #3
 8041574:	d803      	bhi.n	804157e <GetFskBandwidthRegValue+0x1a>
 8041576:	440a      	add	r2, r1
 8041578:	6894      	ldr	r4, [r2, #8]
 804157a:	4284      	cmp	r4, r0
 804157c:	d803      	bhi.n	8041586 <GetFskBandwidthRegValue+0x22>
 804157e:	3301      	adds	r3, #1
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8041580:	2b15      	cmp	r3, #21
 8041582:	d1f2      	bne.n	804156a <GetFskBandwidthRegValue+0x6>
 8041584:	e7fe      	b.n	8041584 <GetFskBandwidthRegValue+0x20>
        {
            return FskBandwidths[i].RegValue;
 8041586:	7910      	ldrb	r0, [r2, #4]
        }
    }
    // ERROR: Value not found
    while( 1 );
}
 8041588:	bd10      	pop	{r4, pc}
 804158a:	bf00      	nop
 804158c:	08051830 	.word	0x08051830

08041590 <SX1276OnDio4Irq>:
    }
}

void SX1276OnDio4Irq( void* context )
{
    switch( SX1276.Settings.Modem )
 8041590:	4b04      	ldr	r3, [pc, #16]	; (80415a4 <SX1276OnDio4Irq+0x14>)
 8041592:	795a      	ldrb	r2, [r3, #5]
 8041594:	b92a      	cbnz	r2, 80415a2 <SX1276OnDio4Irq+0x12>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8041596:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 804159a:	b912      	cbnz	r2, 80415a2 <SX1276OnDio4Irq+0x12>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 804159c:	2201      	movs	r2, #1
 804159e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 80415a2:	4770      	bx	lr
 80415a4:	2000bce8 	.word	0x2000bce8

080415a8 <SX1276BoardInit>:
    LoRaBoardCallbacks =callbacks;
 80415a8:	4b01      	ldr	r3, [pc, #4]	; (80415b0 <SX1276BoardInit+0x8>)
 80415aa:	6018      	str	r0, [r3, #0]
}
 80415ac:	4770      	bx	lr
 80415ae:	bf00      	nop
 80415b0:	2000a2bc 	.word	0x2000a2bc

080415b4 <SX1276GetStatus>:
}
 80415b4:	4b01      	ldr	r3, [pc, #4]	; (80415bc <SX1276GetStatus+0x8>)
 80415b6:	7918      	ldrb	r0, [r3, #4]
 80415b8:	4770      	bx	lr
 80415ba:	bf00      	nop
 80415bc:	2000bce8 	.word	0x2000bce8

080415c0 <SX1276Reset>:
{
 80415c0:	b530      	push	{r4, r5, lr}
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 80415c2:	4d12      	ldr	r5, [pc, #72]	; (804160c <SX1276Reset+0x4c>)
{
 80415c4:	b087      	sub	sp, #28
    initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 80415c6:	2401      	movs	r4, #1
    GPIO_InitTypeDef initStruct = { 0 };
 80415c8:	2214      	movs	r2, #20
 80415ca:	2100      	movs	r1, #0
 80415cc:	a801      	add	r0, sp, #4
 80415ce:	f00e fdbd 	bl	805014c <memset>
    initStruct.Speed = GPIO_SPEED_HIGH;
 80415d2:	2303      	movs	r3, #3
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 80415d4:	aa01      	add	r2, sp, #4
 80415d6:	4621      	mov	r1, r4
 80415d8:	4628      	mov	r0, r5
    initStruct.Speed = GPIO_SPEED_HIGH;
 80415da:	9304      	str	r3, [sp, #16]
    initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 80415dc:	9402      	str	r4, [sp, #8]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 80415de:	f00c fea3 	bl	804e328 <HW_GPIO_Init>
    HW_GPIO_Write( RADIO_RESET_PORT, RADIO_RESET_PIN, 0 );
 80415e2:	4621      	mov	r1, r4
 80415e4:	2200      	movs	r2, #0
 80415e6:	4628      	mov	r0, r5
 80415e8:	f00c ff20 	bl	804e42c <HW_GPIO_Write>
    DelayMs( 1 );
 80415ec:	4620      	mov	r0, r4
 80415ee:	f00d fe71 	bl	804f2d4 <HAL_Delay>
    initStruct.Mode = GPIO_NOPULL;
 80415f2:	2300      	movs	r3, #0
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 80415f4:	aa01      	add	r2, sp, #4
 80415f6:	4621      	mov	r1, r4
 80415f8:	4628      	mov	r0, r5
    initStruct.Mode = GPIO_NOPULL;
 80415fa:	9302      	str	r3, [sp, #8]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 80415fc:	f00c fe94 	bl	804e328 <HW_GPIO_Init>
    DelayMs( 6 );
 8041600:	2006      	movs	r0, #6
 8041602:	f00d fe67 	bl	804f2d4 <HAL_Delay>
}
 8041606:	b007      	add	sp, #28
 8041608:	bd30      	pop	{r4, r5, pc}
 804160a:	bf00      	nop
 804160c:	40020400 	.word	0x40020400

08041610 <SX1276WriteBuffer>:
{
 8041610:	b570      	push	{r4, r5, r6, lr}
 8041612:	4606      	mov	r6, r0
 8041614:	460c      	mov	r4, r1
 8041616:	4615      	mov	r5, r2
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 8041618:	2102      	movs	r1, #2
 804161a:	2200      	movs	r2, #0
 804161c:	480b      	ldr	r0, [pc, #44]	; (804164c <SX1276WriteBuffer+0x3c>)
 804161e:	f00c ff05 	bl	804e42c <HW_GPIO_Write>
    HW_SPI_InOut( addr | 0x80 );
 8041622:	f046 0080 	orr.w	r0, r6, #128	; 0x80
 8041626:	f00d f9a5 	bl	804e974 <HW_SPI_InOut>
 804162a:	3c01      	subs	r4, #1
 804162c:	4425      	add	r5, r4
    for( i = 0; i < size; i++ )
 804162e:	42ac      	cmp	r4, r5
 8041630:	d106      	bne.n	8041640 <SX1276WriteBuffer+0x30>
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 8041632:	2201      	movs	r2, #1
 8041634:	2102      	movs	r1, #2
 8041636:	4805      	ldr	r0, [pc, #20]	; (804164c <SX1276WriteBuffer+0x3c>)
}
 8041638:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 804163c:	f00c bef6 	b.w	804e42c <HW_GPIO_Write>
        HW_SPI_InOut( buffer[i] );
 8041640:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8041644:	f00d f996 	bl	804e974 <HW_SPI_InOut>
 8041648:	e7f1      	b.n	804162e <SX1276WriteBuffer+0x1e>
 804164a:	bf00      	nop
 804164c:	40020400 	.word	0x40020400

08041650 <SX1276Write>:
{
 8041650:	b507      	push	{r0, r1, r2, lr}
 8041652:	ab02      	add	r3, sp, #8
    SX1276WriteBuffer( addr, &data, 1 );
 8041654:	2201      	movs	r2, #1
{
 8041656:	f803 1d01 	strb.w	r1, [r3, #-1]!
    SX1276WriteBuffer( addr, &data, 1 );
 804165a:	4619      	mov	r1, r3
 804165c:	f7ff ffd8 	bl	8041610 <SX1276WriteBuffer>
}
 8041660:	b003      	add	sp, #12
 8041662:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08041668 <SX1276SetChannel>:
    SX1276.Settings.Channel = freq;
 8041668:	4b10      	ldr	r3, [pc, #64]	; (80416ac <SX1276SetChannel+0x44>)
{
 804166a:	b510      	push	{r4, lr}
    SX1276.Settings.Channel = freq;
 804166c:	6098      	str	r0, [r3, #8]
    SX_FREQ_TO_CHANNEL( channel, freq );
 804166e:	f643 5309 	movw	r3, #15625	; 0x3d09
 8041672:	f641 6484 	movw	r4, #7812	; 0x1e84
 8041676:	fbb0 f2f3 	udiv	r2, r0, r3
 804167a:	fb03 0012 	mls	r0, r3, r2, r0
 804167e:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 8041682:	fbb4 f4f3 	udiv	r4, r4, r3
 8041686:	eb04 2402 	add.w	r4, r4, r2, lsl #8
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 804168a:	f3c4 4107 	ubfx	r1, r4, #16, #8
 804168e:	2006      	movs	r0, #6
 8041690:	f7ff ffde 	bl	8041650 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 8041694:	f3c4 2107 	ubfx	r1, r4, #8, #8
 8041698:	2007      	movs	r0, #7
 804169a:	f7ff ffd9 	bl	8041650 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 804169e:	b2e1      	uxtb	r1, r4
 80416a0:	2008      	movs	r0, #8
}
 80416a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 80416a6:	f7ff bfd3 	b.w	8041650 <SX1276Write>
 80416aa:	bf00      	nop
 80416ac:	2000bce8 	.word	0x2000bce8

080416b0 <SX1276ReadBuffer>:
{
 80416b0:	b570      	push	{r4, r5, r6, lr}
 80416b2:	4606      	mov	r6, r0
 80416b4:	460c      	mov	r4, r1
 80416b6:	4615      	mov	r5, r2
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 80416b8:	2102      	movs	r1, #2
 80416ba:	2200      	movs	r2, #0
 80416bc:	480b      	ldr	r0, [pc, #44]	; (80416ec <SX1276ReadBuffer+0x3c>)
 80416be:	f00c feb5 	bl	804e42c <HW_GPIO_Write>
    HW_SPI_InOut( addr & 0x7F );
 80416c2:	f006 007f 	and.w	r0, r6, #127	; 0x7f
 80416c6:	f00d f955 	bl	804e974 <HW_SPI_InOut>
 80416ca:	3c01      	subs	r4, #1
 80416cc:	4425      	add	r5, r4
    for( i = 0; i < size; i++ )
 80416ce:	42ac      	cmp	r4, r5
 80416d0:	d106      	bne.n	80416e0 <SX1276ReadBuffer+0x30>
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 80416d2:	2201      	movs	r2, #1
 80416d4:	2102      	movs	r1, #2
 80416d6:	4805      	ldr	r0, [pc, #20]	; (80416ec <SX1276ReadBuffer+0x3c>)
}
 80416d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 80416dc:	f00c bea6 	b.w	804e42c <HW_GPIO_Write>
        buffer[i] = HW_SPI_InOut( 0 );
 80416e0:	2000      	movs	r0, #0
 80416e2:	f00d f947 	bl	804e974 <HW_SPI_InOut>
 80416e6:	f804 0f01 	strb.w	r0, [r4, #1]!
 80416ea:	e7f0      	b.n	80416ce <SX1276ReadBuffer+0x1e>
 80416ec:	40020400 	.word	0x40020400

080416f0 <SX1276Read>:
{
 80416f0:	b507      	push	{r0, r1, r2, lr}
    SX1276ReadBuffer( addr, &data, 1 );
 80416f2:	2201      	movs	r2, #1
 80416f4:	f10d 0107 	add.w	r1, sp, #7
 80416f8:	f7ff ffda 	bl	80416b0 <SX1276ReadBuffer>
}
 80416fc:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8041700:	b003      	add	sp, #12
 8041702:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08041708 <RxChainCalibration>:
{
 8041708:	b538      	push	{r3, r4, r5, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 804170a:	2009      	movs	r0, #9
 804170c:	f7ff fff0 	bl	80416f0 <SX1276Read>
 8041710:	4605      	mov	r5, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8041712:	2006      	movs	r0, #6
 8041714:	f7ff ffec 	bl	80416f0 <SX1276Read>
 8041718:	4604      	mov	r4, r0
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 804171a:	2007      	movs	r0, #7
 804171c:	f7ff ffe8 	bl	80416f0 <SX1276Read>
 8041720:	0200      	lsls	r0, r0, #8
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8041722:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 8041726:	2008      	movs	r0, #8
 8041728:	f7ff ffe2 	bl	80416f0 <SX1276Read>
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 804172c:	4320      	orrs	r0, r4
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 804172e:	f643 5309 	movw	r3, #15625	; 0x3d09
 8041732:	b2c4      	uxtb	r4, r0
 8041734:	435c      	muls	r4, r3
 8041736:	0a00      	lsrs	r0, r0, #8
 8041738:	4358      	muls	r0, r3
 804173a:	3480      	adds	r4, #128	; 0x80
    SX1276Write( REG_PACONFIG, 0x00 );
 804173c:	2100      	movs	r1, #0
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 804173e:	eb00 2414 	add.w	r4, r0, r4, lsr #8
    SX1276Write( REG_PACONFIG, 0x00 );
 8041742:	2009      	movs	r0, #9
 8041744:	f7ff ff84 	bl	8041650 <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8041748:	203b      	movs	r0, #59	; 0x3b
 804174a:	f7ff ffd1 	bl	80416f0 <SX1276Read>
 804174e:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8041752:	b2c9      	uxtb	r1, r1
 8041754:	203b      	movs	r0, #59	; 0x3b
 8041756:	f7ff ff7b 	bl	8041650 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 804175a:	203b      	movs	r0, #59	; 0x3b
 804175c:	f7ff ffc8 	bl	80416f0 <SX1276Read>
 8041760:	0682      	lsls	r2, r0, #26
 8041762:	d4fa      	bmi.n	804175a <RxChainCalibration+0x52>
    SX1276SetChannel( 868000000 );
 8041764:	480c      	ldr	r0, [pc, #48]	; (8041798 <RxChainCalibration+0x90>)
 8041766:	f7ff ff7f 	bl	8041668 <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 804176a:	203b      	movs	r0, #59	; 0x3b
 804176c:	f7ff ffc0 	bl	80416f0 <SX1276Read>
 8041770:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8041774:	b2c9      	uxtb	r1, r1
 8041776:	203b      	movs	r0, #59	; 0x3b
 8041778:	f7ff ff6a 	bl	8041650 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 804177c:	203b      	movs	r0, #59	; 0x3b
 804177e:	f7ff ffb7 	bl	80416f0 <SX1276Read>
 8041782:	0683      	lsls	r3, r0, #26
 8041784:	d4fa      	bmi.n	804177c <RxChainCalibration+0x74>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 8041786:	4629      	mov	r1, r5
 8041788:	2009      	movs	r0, #9
 804178a:	f7ff ff61 	bl	8041650 <SX1276Write>
    SX1276SetChannel( initialFreq );
 804178e:	4620      	mov	r0, r4
}
 8041790:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    SX1276SetChannel( initialFreq );
 8041794:	f7ff bf68 	b.w	8041668 <SX1276SetChannel>
 8041798:	33bca100 	.word	0x33bca100
 804179c:	00000000 	.word	0x00000000

080417a0 <SX1276GetTimeOnAir>:
{
 80417a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80417a4:	4688      	mov	r8, r1
    switch( modem )
 80417a6:	b118      	cbz	r0, 80417b0 <SX1276GetTimeOnAir+0x10>
 80417a8:	2801      	cmp	r0, #1
 80417aa:	d058      	beq.n	804185e <SX1276GetTimeOnAir+0xbe>
    uint32_t airTime = 0;
 80417ac:	2000      	movs	r0, #0
    return airTime;
 80417ae:	e04e      	b.n	804184e <SX1276GetTimeOnAir+0xae>
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 80417b0:	4c75      	ldr	r4, [pc, #468]	; (8041988 <SX1276GetTimeOnAir+0x1e8>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 80417b2:	2027      	movs	r0, #39	; 0x27
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 80417b4:	8c25      	ldrh	r5, [r4, #32]
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 80417b6:	f7ff ff9b 	bl	80416f0 <SX1276Read>
 80417ba:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 80417be:	3001      	adds	r0, #1
 80417c0:	4428      	add	r0, r5
 80417c2:	f7fe ffdf 	bl	8040784 <__aeabi_i2d>
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 80417c6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80417ca:	2200      	movs	r2, #0
 80417cc:	2b00      	cmp	r3, #0
 80417ce:	d141      	bne.n	8041854 <SX1276GetTimeOnAir+0xb4>
 80417d0:	4b6e      	ldr	r3, [pc, #440]	; (804198c <SX1276GetTimeOnAir+0x1ec>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 80417d2:	f7fe fe8b 	bl	80404ec <__adddf3>
 80417d6:	4606      	mov	r6, r0
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 80417d8:	2030      	movs	r0, #48	; 0x30
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 80417da:	460f      	mov	r7, r1
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 80417dc:	f7ff ff88 	bl	80416f0 <SX1276Read>
 80417e0:	f030 03f9 	bics.w	r3, r0, #249	; 0xf9
 80417e4:	bf0c      	ite	eq
 80417e6:	2300      	moveq	r3, #0
 80417e8:	4b68      	ldrne	r3, [pc, #416]	; (804198c <SX1276GetTimeOnAir+0x1ec>)
 80417ea:	2200      	movs	r2, #0
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 80417ec:	4630      	mov	r0, r6
 80417ee:	4639      	mov	r1, r7
 80417f0:	f7fe fe7c 	bl	80404ec <__adddf3>
 80417f4:	4606      	mov	r6, r0
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 80417f6:	4640      	mov	r0, r8
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 80417f8:	460f      	mov	r7, r1
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 80417fa:	f7fe ffc3 	bl	8040784 <__aeabi_i2d>
 80417fe:	4602      	mov	r2, r0
 8041800:	460b      	mov	r3, r1
 8041802:	4630      	mov	r0, r6
 8041804:	4639      	mov	r1, r7
 8041806:	f7fe fe71 	bl	80404ec <__adddf3>
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 804180a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 804180e:	2200      	movs	r2, #0
 8041810:	bb13      	cbnz	r3, 8041858 <SX1276GetTimeOnAir+0xb8>
 8041812:	2300      	movs	r3, #0
                                     pktLen +
 8041814:	f7fe fe6a 	bl	80404ec <__adddf3>
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8041818:	2200      	movs	r2, #0
 804181a:	4b5d      	ldr	r3, [pc, #372]	; (8041990 <SX1276GetTimeOnAir+0x1f0>)
 804181c:	f7ff f81c 	bl	8040858 <__aeabi_dmul>
 8041820:	4606      	mov	r6, r0
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8041822:	69e0      	ldr	r0, [r4, #28]
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8041824:	460f      	mov	r7, r1
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8041826:	f7fe ff9d 	bl	8040764 <__aeabi_ui2d>
 804182a:	4602      	mov	r2, r0
 804182c:	460b      	mov	r3, r1
 804182e:	4630      	mov	r0, r6
 8041830:	4639      	mov	r1, r7
 8041832:	f7ff f93b 	bl	8040aac <__aeabi_ddiv>
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8041836:	2200      	movs	r2, #0
 8041838:	4b56      	ldr	r3, [pc, #344]	; (8041994 <SX1276GetTimeOnAir+0x1f4>)
 804183a:	f7ff f80d 	bl	8040858 <__aeabi_dmul>
 804183e:	ec41 0b10 	vmov	d0, r0, r1
 8041842:	f00f ff61 	bl	8051708 <round>
            airTime = (uint32_t) floor( tOnAir * 1000 + 0.999 );
 8041846:	ec51 0b10 	vmov	r0, r1, d0
 804184a:	f7ff fac7 	bl	8040ddc <__aeabi_d2uiz>
}
 804184e:	b003      	add	sp, #12
 8041850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8041854:	2300      	movs	r3, #0
 8041856:	e7bc      	b.n	80417d2 <SX1276GetTimeOnAir+0x32>
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8041858:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 804185c:	e7da      	b.n	8041814 <SX1276GetTimeOnAir+0x74>
            switch( SX1276.Settings.LoRa.Bandwidth )
 804185e:	4a4a      	ldr	r2, [pc, #296]	; (8041988 <SX1276GetTimeOnAir+0x1e8>)
 8041860:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8041862:	3b07      	subs	r3, #7
 8041864:	2b02      	cmp	r3, #2
 8041866:	4692      	mov	sl, r2
 8041868:	f200 8082 	bhi.w	8041970 <SX1276GetTimeOnAir+0x1d0>
 804186c:	4a4a      	ldr	r2, [pc, #296]	; (8041998 <SX1276GetTimeOnAir+0x1f8>)
 804186e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8041872:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 8041876:	f8da b048 	ldr.w	fp, [sl, #72]	; 0x48
 804187a:	2001      	movs	r0, #1
 804187c:	fa00 f00b 	lsl.w	r0, r0, fp
 8041880:	f7fe ff80 	bl	8040784 <__aeabi_i2d>
 8041884:	4602      	mov	r2, r0
 8041886:	460b      	mov	r3, r1
 8041888:	4620      	mov	r0, r4
 804188a:	4629      	mov	r1, r5
 804188c:	f7ff f90e 	bl	8040aac <__aeabi_ddiv>
            double ts = 1 / rs;
 8041890:	4602      	mov	r2, r0
 8041892:	460b      	mov	r3, r1
 8041894:	2000      	movs	r0, #0
 8041896:	493d      	ldr	r1, [pc, #244]	; (804198c <SX1276GetTimeOnAir+0x1ec>)
 8041898:	f7ff f908 	bl	8040aac <__aeabi_ddiv>
 804189c:	4604      	mov	r4, r0
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 804189e:	f8ba 004e 	ldrh.w	r0, [sl, #78]	; 0x4e
            double ts = 1 / rs;
 80418a2:	460d      	mov	r5, r1
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 80418a4:	f7fe ff6e 	bl	8040784 <__aeabi_i2d>
 80418a8:	2200      	movs	r2, #0
 80418aa:	4b3c      	ldr	r3, [pc, #240]	; (804199c <SX1276GetTimeOnAir+0x1fc>)
 80418ac:	f7fe fe1e 	bl	80404ec <__adddf3>
 80418b0:	4622      	mov	r2, r4
 80418b2:	462b      	mov	r3, r5
 80418b4:	f7fe ffd0 	bl	8040858 <__aeabi_dmul>
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 80418b8:	f89a 3050 	ldrb.w	r3, [sl, #80]	; 0x50
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 80418bc:	4606      	mov	r6, r0
 80418be:	460f      	mov	r7, r1
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 80418c0:	f89a 0052 	ldrb.w	r0, [sl, #82]	; 0x52
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80418c4:	ea4f 018b 	mov.w	r1, fp, lsl #2
 80418c8:	f1c1 011c 	rsb	r1, r1, #28
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 80418cc:	2b00      	cmp	r3, #0
 80418ce:	eb01 1100 	add.w	r1, r1, r0, lsl #4
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 80418d2:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 80418d6:	bf14      	ite	ne
 80418d8:	2014      	movne	r0, #20
 80418da:	2000      	moveq	r0, #0
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80418dc:	1a08      	subs	r0, r1, r0
 80418de:	f7fe ff41 	bl	8040764 <__aeabi_ui2d>
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 80418e2:	f89a 304c 	ldrb.w	r3, [sl, #76]	; 0x4c
 80418e6:	2b00      	cmp	r3, #0
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80418e8:	4680      	mov	r8, r0
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 80418ea:	bf14      	ite	ne
 80418ec:	2002      	movne	r0, #2
 80418ee:	2000      	moveq	r0, #0
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 80418f0:	ebab 0000 	sub.w	r0, fp, r0
 80418f4:	0080      	lsls	r0, r0, #2
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80418f6:	4689      	mov	r9, r1
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 80418f8:	f7fe ff34 	bl	8040764 <__aeabi_ui2d>
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80418fc:	4602      	mov	r2, r0
 80418fe:	460b      	mov	r3, r1
 8041900:	4640      	mov	r0, r8
 8041902:	4649      	mov	r1, r9
 8041904:	f7ff f8d2 	bl	8040aac <__aeabi_ddiv>
 8041908:	ec41 0b10 	vmov	d0, r0, r1
 804190c:	f00f fdf8 	bl	8051500 <ceil>
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
 8041910:	f89a 004d 	ldrb.w	r0, [sl, #77]	; 0x4d
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8041914:	ec53 2b10 	vmov	r2, r3, d0
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8041918:	3004      	adds	r0, #4
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 804191a:	e9cd 2300 	strd	r2, r3, [sp]
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 804191e:	f7fe ff31 	bl	8040784 <__aeabi_i2d>
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8041922:	e9dd 2300 	ldrd	r2, r3, [sp]
 8041926:	f7fe ff97 	bl	8040858 <__aeabi_dmul>
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 804192a:	2200      	movs	r2, #0
 804192c:	2300      	movs	r3, #0
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 804192e:	4680      	mov	r8, r0
 8041930:	4689      	mov	r9, r1
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 8041932:	f7ff fa21 	bl	8040d78 <__aeabi_dcmpgt>
 8041936:	b1f0      	cbz	r0, 8041976 <SX1276GetTimeOnAir+0x1d6>
 8041938:	2200      	movs	r2, #0
 804193a:	4b15      	ldr	r3, [pc, #84]	; (8041990 <SX1276GetTimeOnAir+0x1f0>)
 804193c:	4640      	mov	r0, r8
 804193e:	4649      	mov	r1, r9
 8041940:	f7fe fdd4 	bl	80404ec <__adddf3>
            double tPayload = nPayload * ts;
 8041944:	4622      	mov	r2, r4
 8041946:	462b      	mov	r3, r5
 8041948:	f7fe ff86 	bl	8040858 <__aeabi_dmul>
            double tOnAir = tPreamble + tPayload;
 804194c:	4632      	mov	r2, r6
 804194e:	463b      	mov	r3, r7
 8041950:	f7fe fdcc 	bl	80404ec <__adddf3>
            airTime = (uint32_t) floor( tOnAir * 1000 + 0.999 );
 8041954:	2200      	movs	r2, #0
 8041956:	4b0f      	ldr	r3, [pc, #60]	; (8041994 <SX1276GetTimeOnAir+0x1f4>)
 8041958:	f7fe ff7e 	bl	8040858 <__aeabi_dmul>
 804195c:	a308      	add	r3, pc, #32	; (adr r3, 8041980 <SX1276GetTimeOnAir+0x1e0>)
 804195e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8041962:	f7fe fdc3 	bl	80404ec <__adddf3>
 8041966:	ec41 0b10 	vmov	d0, r0, r1
 804196a:	f00f fe49 	bl	8051600 <floor>
 804196e:	e76a      	b.n	8041846 <SX1276GetTimeOnAir+0xa6>
            switch( SX1276.Settings.LoRa.Bandwidth )
 8041970:	2400      	movs	r4, #0
 8041972:	2500      	movs	r5, #0
 8041974:	e77f      	b.n	8041876 <SX1276GetTimeOnAir+0xd6>
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 8041976:	2000      	movs	r0, #0
 8041978:	4905      	ldr	r1, [pc, #20]	; (8041990 <SX1276GetTimeOnAir+0x1f0>)
 804197a:	e7e3      	b.n	8041944 <SX1276GetTimeOnAir+0x1a4>
 804197c:	f3af 8000 	nop.w
 8041980:	d916872b 	.word	0xd916872b
 8041984:	3feff7ce 	.word	0x3feff7ce
 8041988:	2000bce8 	.word	0x2000bce8
 804198c:	3ff00000 	.word	0x3ff00000
 8041990:	40200000 	.word	0x40200000
 8041994:	408f4000 	.word	0x408f4000
 8041998:	08051830 	.word	0x08051830
 804199c:	40110000 	.word	0x40110000

080419a0 <SX1276ReadRssi>:
{
 80419a0:	b508      	push	{r3, lr}
    switch( modem )
 80419a2:	b120      	cbz	r0, 80419ae <SX1276ReadRssi+0xe>
 80419a4:	2801      	cmp	r0, #1
 80419a6:	d00a      	beq.n	80419be <SX1276ReadRssi+0x1e>
        rssi = -1;
 80419a8:	f04f 30ff 	mov.w	r0, #4294967295
 80419ac:	e006      	b.n	80419bc <SX1276ReadRssi+0x1c>
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 80419ae:	2011      	movs	r0, #17
 80419b0:	f7ff fe9e 	bl	80416f0 <SX1276Read>
 80419b4:	f3c0 0047 	ubfx	r0, r0, #1, #8
 80419b8:	4240      	negs	r0, r0
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 80419ba:	b200      	sxth	r0, r0
}
 80419bc:	bd08      	pop	{r3, pc}
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80419be:	4b07      	ldr	r3, [pc, #28]	; (80419dc <SX1276ReadRssi+0x3c>)
 80419c0:	689a      	ldr	r2, [r3, #8]
 80419c2:	4b07      	ldr	r3, [pc, #28]	; (80419e0 <SX1276ReadRssi+0x40>)
 80419c4:	429a      	cmp	r2, r3
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 80419c6:	f04f 001b 	mov.w	r0, #27
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80419ca:	d903      	bls.n	80419d4 <SX1276ReadRssi+0x34>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 80419cc:	f7ff fe90 	bl	80416f0 <SX1276Read>
 80419d0:	389d      	subs	r0, #157	; 0x9d
 80419d2:	e7f2      	b.n	80419ba <SX1276ReadRssi+0x1a>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 80419d4:	f7ff fe8c 	bl	80416f0 <SX1276Read>
 80419d8:	38a4      	subs	r0, #164	; 0xa4
 80419da:	e7ee      	b.n	80419ba <SX1276ReadRssi+0x1a>
 80419dc:	2000bce8 	.word	0x2000bce8
 80419e0:	1f4add40 	.word	0x1f4add40

080419e4 <SX1276SetOpMode.part.2>:
void SX1276SetOpMode( uint8_t opMode )
 80419e4:	b510      	push	{r4, lr}
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 80419e6:	2001      	movs	r0, #1
 80419e8:	f7ff fe82 	bl	80416f0 <SX1276Read>
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( true );
 80419ec:	4c07      	ldr	r4, [pc, #28]	; (8041a0c <SX1276SetOpMode.part.2+0x28>)
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 80419ee:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
 80419f2:	2001      	movs	r0, #1
 80419f4:	f7ff fe2c 	bl	8041650 <SX1276Write>
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( true );
 80419f8:	6823      	ldr	r3, [r4, #0]
 80419fa:	2001      	movs	r0, #1
 80419fc:	691b      	ldr	r3, [r3, #16]
 80419fe:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetXO( RESET ); 
 8041a00:	6823      	ldr	r3, [r4, #0]
 8041a02:	2000      	movs	r0, #0
 8041a04:	681b      	ldr	r3, [r3, #0]
}
 8041a06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      LoRaBoardCallbacks->SX1276BoardSetXO( RESET ); 
 8041a0a:	4718      	bx	r3
 8041a0c:	2000a2bc 	.word	0x2000a2bc

08041a10 <SX1276SetSleep>:
{
 8041a10:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
 8041a12:	480a      	ldr	r0, [pc, #40]	; (8041a3c <SX1276SetSleep+0x2c>)
 8041a14:	f00c f91c 	bl	804dc50 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8041a18:	4809      	ldr	r0, [pc, #36]	; (8041a40 <SX1276SetSleep+0x30>)
 8041a1a:	f00c f919 	bl	804dc50 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 8041a1e:	4809      	ldr	r0, [pc, #36]	; (8041a44 <SX1276SetSleep+0x34>)
 8041a20:	f00c f916 	bl	804dc50 <TimerStop>
 8041a24:	f7ff ffde 	bl	80419e4 <SX1276SetOpMode.part.2>
    LoRaBoardCallbacks->SX1276BoardSetXO( RESET );
 8041a28:	4b07      	ldr	r3, [pc, #28]	; (8041a48 <SX1276SetSleep+0x38>)
 8041a2a:	681b      	ldr	r3, [r3, #0]
 8041a2c:	2000      	movs	r0, #0
 8041a2e:	681b      	ldr	r3, [r3, #0]
 8041a30:	4798      	blx	r3
    SX1276.Settings.State = RF_IDLE;
 8041a32:	4b06      	ldr	r3, [pc, #24]	; (8041a4c <SX1276SetSleep+0x3c>)
 8041a34:	2200      	movs	r2, #0
 8041a36:	711a      	strb	r2, [r3, #4]
}
 8041a38:	bd08      	pop	{r3, pc}
 8041a3a:	bf00      	nop
 8041a3c:	2000bd50 	.word	0x2000bd50
 8041a40:	2000bcb8 	.word	0x2000bcb8
 8041a44:	2000bcd0 	.word	0x2000bcd0
 8041a48:	2000a2bc 	.word	0x2000a2bc
 8041a4c:	2000bce8 	.word	0x2000bce8

08041a50 <SX1276SetOpMode>:
{
 8041a50:	b538      	push	{r3, r4, r5, lr}
    if( opMode == RF_OPMODE_SLEEP )
 8041a52:	4604      	mov	r4, r0
 8041a54:	b918      	cbnz	r0, 8041a5e <SX1276SetOpMode+0xe>
}
 8041a56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8041a5a:	f7ff bfc3 	b.w	80419e4 <SX1276SetOpMode.part.2>
      LoRaBoardCallbacks->SX1276BoardSetXO( SET ); 
 8041a5e:	4d0c      	ldr	r5, [pc, #48]	; (8041a90 <SX1276SetOpMode+0x40>)
 8041a60:	682b      	ldr	r3, [r5, #0]
 8041a62:	2001      	movs	r0, #1
 8041a64:	681b      	ldr	r3, [r3, #0]
 8041a66:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( false );
 8041a68:	682b      	ldr	r3, [r5, #0]
 8041a6a:	2000      	movs	r0, #0
 8041a6c:	691b      	ldr	r3, [r3, #16]
 8041a6e:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSw( opMode );
 8041a70:	682b      	ldr	r3, [r5, #0]
 8041a72:	4620      	mov	r0, r4
 8041a74:	695b      	ldr	r3, [r3, #20]
 8041a76:	4798      	blx	r3
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8041a78:	2001      	movs	r0, #1
 8041a7a:	f7ff fe39 	bl	80416f0 <SX1276Read>
 8041a7e:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
 8041a82:	4321      	orrs	r1, r4
 8041a84:	2001      	movs	r0, #1
}
 8041a86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8041a8a:	f7ff bde1 	b.w	8041650 <SX1276Write>
 8041a8e:	bf00      	nop
 8041a90:	2000a2bc 	.word	0x2000a2bc

08041a94 <SX1276SetStby>:
{
 8041a94:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
 8041a96:	4808      	ldr	r0, [pc, #32]	; (8041ab8 <SX1276SetStby+0x24>)
 8041a98:	f00c f8da 	bl	804dc50 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8041a9c:	4807      	ldr	r0, [pc, #28]	; (8041abc <SX1276SetStby+0x28>)
 8041a9e:	f00c f8d7 	bl	804dc50 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 8041aa2:	4807      	ldr	r0, [pc, #28]	; (8041ac0 <SX1276SetStby+0x2c>)
 8041aa4:	f00c f8d4 	bl	804dc50 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
 8041aa8:	2001      	movs	r0, #1
 8041aaa:	f7ff ffd1 	bl	8041a50 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 8041aae:	4b05      	ldr	r3, [pc, #20]	; (8041ac4 <SX1276SetStby+0x30>)
 8041ab0:	2200      	movs	r2, #0
 8041ab2:	711a      	strb	r2, [r3, #4]
}
 8041ab4:	bd08      	pop	{r3, pc}
 8041ab6:	bf00      	nop
 8041ab8:	2000bd50 	.word	0x2000bd50
 8041abc:	2000bcb8 	.word	0x2000bcb8
 8041ac0:	2000bcd0 	.word	0x2000bcd0
 8041ac4:	2000bce8 	.word	0x2000bce8

08041ac8 <SX1276SetRx>:
{
 8041ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch( SX1276.Settings.Modem )
 8041aca:	4c79      	ldr	r4, [pc, #484]	; (8041cb0 <SX1276SetRx+0x1e8>)
{
 8041acc:	4607      	mov	r7, r0
    TimerStop( &TxTimeoutTimer );
 8041ace:	4879      	ldr	r0, [pc, #484]	; (8041cb4 <SX1276SetRx+0x1ec>)
 8041ad0:	f00c f8be 	bl	804dc50 <TimerStop>
    switch( SX1276.Settings.Modem )
 8041ad4:	7965      	ldrb	r5, [r4, #5]
 8041ad6:	b11d      	cbz	r5, 8041ae0 <SX1276SetRx+0x18>
 8041ad8:	2d01      	cmp	r5, #1
 8041ada:	d044      	beq.n	8041b66 <SX1276SetRx+0x9e>
    bool rxContinuous = false;
 8041adc:	2600      	movs	r6, #0
 8041ade:	e022      	b.n	8041b26 <SX1276SetRx+0x5e>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8041ae0:	2040      	movs	r0, #64	; 0x40
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8041ae2:	f894 6026 	ldrb.w	r6, [r4, #38]	; 0x26
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8041ae6:	f7ff fe03 	bl	80416f0 <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8041aea:	f000 0103 	and.w	r1, r0, #3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8041aee:	f041 010c 	orr.w	r1, r1, #12
 8041af2:	2040      	movs	r0, #64	; 0x40
 8041af4:	f7ff fdac 	bl	8041650 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8041af8:	2041      	movs	r0, #65	; 0x41
 8041afa:	f7ff fdf9 	bl	80416f0 <SX1276Read>
 8041afe:	f060 013e 	orn	r1, r0, #62	; 0x3e
 8041b02:	b2c9      	uxtb	r1, r1
 8041b04:	2041      	movs	r0, #65	; 0x41
 8041b06:	f7ff fda3 	bl	8041650 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8041b0a:	2035      	movs	r0, #53	; 0x35
 8041b0c:	f7ff fdf0 	bl	80416f0 <SX1276Read>
 8041b10:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8041b14:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 8041b18:	211e      	movs	r1, #30
 8041b1a:	200d      	movs	r0, #13
 8041b1c:	f7ff fd98 	bl	8041650 <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8041b20:	8625      	strh	r5, [r4, #48]	; 0x30
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8041b22:	87a5      	strh	r5, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8041b24:	8765      	strh	r5, [r4, #58]	; 0x3a
    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 8041b26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8041b2a:	2100      	movs	r1, #0
 8041b2c:	4862      	ldr	r0, [pc, #392]	; (8041cb8 <SX1276SetRx+0x1f0>)
 8041b2e:	f00e fb0d 	bl	805014c <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
 8041b32:	2301      	movs	r3, #1
 8041b34:	7123      	strb	r3, [r4, #4]
    if( timeout != 0 )
 8041b36:	b137      	cbz	r7, 8041b46 <SX1276SetRx+0x7e>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8041b38:	4860      	ldr	r0, [pc, #384]	; (8041cbc <SX1276SetRx+0x1f4>)
 8041b3a:	4639      	mov	r1, r7
 8041b3c:	f00c f8b0 	bl	804dca0 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8041b40:	485e      	ldr	r0, [pc, #376]	; (8041cbc <SX1276SetRx+0x1f4>)
 8041b42:	f00c f813 	bl	804db6c <TimerStart>
    if( SX1276.Settings.Modem == MODEM_FSK )
 8041b46:	7963      	ldrb	r3, [r4, #5]
 8041b48:	2b00      	cmp	r3, #0
 8041b4a:	f040 80a9 	bne.w	8041ca0 <SX1276SetRx+0x1d8>
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8041b4e:	2005      	movs	r0, #5
 8041b50:	f7ff ff7e 	bl	8041a50 <SX1276SetOpMode>
        TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 8041b54:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8041b56:	485a      	ldr	r0, [pc, #360]	; (8041cc0 <SX1276SetRx+0x1f8>)
 8041b58:	f00c f8a2 	bl	804dca0 <TimerSetValue>
        TimerStart( &RxTimeoutSyncWord );
 8041b5c:	4858      	ldr	r0, [pc, #352]	; (8041cc0 <SX1276SetRx+0x1f8>)
}
 8041b5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        TimerStart( &RxTimeoutSyncWord );
 8041b62:	f00c b803 	b.w	804db6c <TimerStart>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8041b66:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8041b6a:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 8041b6c:	b32b      	cbz	r3, 8041bba <SX1276SetRx+0xf2>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8041b6e:	f7ff fdbf 	bl	80416f0 <SX1276Read>
 8041b72:	f040 0141 	orr.w	r1, r0, #65	; 0x41
 8041b76:	b2c9      	uxtb	r1, r1
 8041b78:	2033      	movs	r0, #51	; 0x33
 8041b7a:	f7ff fd69 	bl	8041650 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8041b7e:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8041b80:	203b      	movs	r0, #59	; 0x3b
 8041b82:	f7ff fd65 	bl	8041650 <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8041b86:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8041b88:	2b08      	cmp	r3, #8
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8041b8a:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8041b8e:	d876      	bhi.n	8041c7e <SX1276SetRx+0x1b6>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8041b90:	f7ff fdae 	bl	80416f0 <SX1276Read>
 8041b94:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8041b98:	2031      	movs	r0, #49	; 0x31
 8041b9a:	f7ff fd59 	bl	8041650 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 8041b9e:	2100      	movs	r1, #0
 8041ba0:	2030      	movs	r0, #48	; 0x30
 8041ba2:	f7ff fd55 	bl	8041650 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 8041ba6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8041ba8:	2b08      	cmp	r3, #8
 8041baa:	d81b      	bhi.n	8041be4 <SX1276SetRx+0x11c>
 8041bac:	e8df f003 	tbb	[pc, r3]
 8041bb0:	473e3510 	.word	0x473e3510
 8041bb4:	62625950 	.word	0x62625950
 8041bb8:	62          	.byte	0x62
 8041bb9:	00          	.byte	0x00
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8041bba:	f7ff fd99 	bl	80416f0 <SX1276Read>
 8041bbe:	f000 01be 	and.w	r1, r0, #190	; 0xbe
 8041bc2:	f041 0101 	orr.w	r1, r1, #1
 8041bc6:	2033      	movs	r0, #51	; 0x33
 8041bc8:	f7ff fd42 	bl	8041650 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8041bcc:	211d      	movs	r1, #29
 8041bce:	e7d7      	b.n	8041b80 <SX1276SetRx+0xb8>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 8041bd0:	202f      	movs	r0, #47	; 0x2f
 8041bd2:	2148      	movs	r1, #72	; 0x48
 8041bd4:	f7ff fd3c 	bl	8041650 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 8041bd8:	68a0      	ldr	r0, [r4, #8]
 8041bda:	f500 50f4 	add.w	r0, r0, #7808	; 0x1e80
 8041bde:	3002      	adds	r0, #2
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8041be0:	f7ff fd42 	bl	8041668 <SX1276SetChannel>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8041be4:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 8041be8:	f894 6056 	ldrb.w	r6, [r4, #86]	; 0x56
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8041bec:	2b00      	cmp	r3, #0
 8041bee:	d04d      	beq.n	8041c8c <SX1276SetRx+0x1c4>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8041bf0:	211d      	movs	r1, #29
 8041bf2:	2011      	movs	r0, #17
 8041bf4:	f7ff fd2c 	bl	8041650 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8041bf8:	2040      	movs	r0, #64	; 0x40
 8041bfa:	f7ff fd79 	bl	80416f0 <SX1276Read>
 8041bfe:	f000 0133 	and.w	r1, r0, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8041c02:	2040      	movs	r0, #64	; 0x40
 8041c04:	f7ff fd24 	bl	8041650 <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8041c08:	2100      	movs	r1, #0
 8041c0a:	200f      	movs	r0, #15
 8041c0c:	f7ff fd20 	bl	8041650 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8041c10:	2100      	movs	r1, #0
 8041c12:	200d      	movs	r0, #13
 8041c14:	f7ff fd1c 	bl	8041650 <SX1276Write>
        break;
 8041c18:	e785      	b.n	8041b26 <SX1276SetRx+0x5e>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8041c1a:	202f      	movs	r0, #47	; 0x2f
 8041c1c:	2144      	movs	r1, #68	; 0x44
 8041c1e:	f7ff fd17 	bl	8041650 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 8041c22:	68a0      	ldr	r0, [r4, #8]
 8041c24:	f500 5022 	add.w	r0, r0, #10368	; 0x2880
 8041c28:	3034      	adds	r0, #52	; 0x34
 8041c2a:	e7d9      	b.n	8041be0 <SX1276SetRx+0x118>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8041c2c:	202f      	movs	r0, #47	; 0x2f
 8041c2e:	2144      	movs	r1, #68	; 0x44
 8041c30:	f7ff fd0e 	bl	8041650 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 8041c34:	68a0      	ldr	r0, [r4, #8]
 8041c36:	f500 5074 	add.w	r0, r0, #15616	; 0x3d00
 8041c3a:	3004      	adds	r0, #4
 8041c3c:	e7d0      	b.n	8041be0 <SX1276SetRx+0x118>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8041c3e:	202f      	movs	r0, #47	; 0x2f
 8041c40:	2144      	movs	r1, #68	; 0x44
 8041c42:	f7ff fd05 	bl	8041650 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 8041c46:	68a0      	ldr	r0, [r4, #8]
 8041c48:	f500 40a2 	add.w	r0, r0, #20736	; 0x5100
 8041c4c:	305e      	adds	r0, #94	; 0x5e
 8041c4e:	e7c7      	b.n	8041be0 <SX1276SetRx+0x118>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8041c50:	202f      	movs	r0, #47	; 0x2f
 8041c52:	2144      	movs	r1, #68	; 0x44
 8041c54:	f7ff fcfc 	bl	8041650 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 8041c58:	68a0      	ldr	r0, [r4, #8]
 8041c5a:	f500 40f4 	add.w	r0, r0, #31232	; 0x7a00
 8041c5e:	3012      	adds	r0, #18
 8041c60:	e7be      	b.n	8041be0 <SX1276SetRx+0x118>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8041c62:	202f      	movs	r0, #47	; 0x2f
 8041c64:	2144      	movs	r1, #68	; 0x44
 8041c66:	f7ff fcf3 	bl	8041650 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8041c6a:	68a0      	ldr	r0, [r4, #8]
 8041c6c:	f500 4022 	add.w	r0, r0, #41472	; 0xa200
 8041c70:	30c6      	adds	r0, #198	; 0xc6
 8041c72:	e7b5      	b.n	8041be0 <SX1276SetRx+0x118>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8041c74:	2140      	movs	r1, #64	; 0x40
 8041c76:	202f      	movs	r0, #47	; 0x2f
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 8041c78:	f7ff fcea 	bl	8041650 <SX1276Write>
 8041c7c:	e7b2      	b.n	8041be4 <SX1276SetRx+0x11c>
 8041c7e:	f7ff fd37 	bl	80416f0 <SX1276Read>
 8041c82:	f060 017f 	orn	r1, r0, #127	; 0x7f
 8041c86:	b2c9      	uxtb	r1, r1
 8041c88:	2031      	movs	r0, #49	; 0x31
 8041c8a:	e7f5      	b.n	8041c78 <SX1276SetRx+0x1b0>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8041c8c:	211f      	movs	r1, #31
 8041c8e:	2011      	movs	r0, #17
 8041c90:	f7ff fcde 	bl	8041650 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8041c94:	2040      	movs	r0, #64	; 0x40
 8041c96:	f7ff fd2b 	bl	80416f0 <SX1276Read>
 8041c9a:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 8041c9e:	e7b0      	b.n	8041c02 <SX1276SetRx+0x13a>
        if( rxContinuous == true )
 8041ca0:	b126      	cbz	r6, 8041cac <SX1276SetRx+0x1e4>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 8041ca2:	2005      	movs	r0, #5
}
 8041ca4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8041ca8:	f7ff bed2 	b.w	8041a50 <SX1276SetOpMode>
 8041cac:	2006      	movs	r0, #6
 8041cae:	e7f9      	b.n	8041ca4 <SX1276SetRx+0x1dc>
 8041cb0:	2000bce8 	.word	0x2000bce8
 8041cb4:	2000bcb8 	.word	0x2000bcb8
 8041cb8:	2000a2c0 	.word	0x2000a2c0
 8041cbc:	2000bd50 	.word	0x2000bd50
 8041cc0:	2000bcd0 	.word	0x2000bcd0

08041cc4 <SX1276SetTx>:
{
 8041cc4:	b510      	push	{r4, lr}
 8041cc6:	4604      	mov	r4, r0
    TimerStop( &RxTimeoutTimer );
 8041cc8:	4825      	ldr	r0, [pc, #148]	; (8041d60 <SX1276SetTx+0x9c>)
 8041cca:	f00b ffc1 	bl	804dc50 <TimerStop>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8041cce:	4621      	mov	r1, r4
    switch( SX1276.Settings.Modem )
 8041cd0:	4c24      	ldr	r4, [pc, #144]	; (8041d64 <SX1276SetTx+0xa0>)
    TimerSetValue( &TxTimeoutTimer, timeout );
 8041cd2:	4825      	ldr	r0, [pc, #148]	; (8041d68 <SX1276SetTx+0xa4>)
 8041cd4:	f00b ffe4 	bl	804dca0 <TimerSetValue>
    switch( SX1276.Settings.Modem )
 8041cd8:	7963      	ldrb	r3, [r4, #5]
 8041cda:	b15b      	cbz	r3, 8041cf4 <SX1276SetTx+0x30>
 8041cdc:	2b01      	cmp	r3, #1
 8041cde:	d023      	beq.n	8041d28 <SX1276SetTx+0x64>
    SX1276.Settings.State = RF_TX_RUNNING;
 8041ce0:	2302      	movs	r3, #2
    TimerStart( &TxTimeoutTimer );
 8041ce2:	4821      	ldr	r0, [pc, #132]	; (8041d68 <SX1276SetTx+0xa4>)
    SX1276.Settings.State = RF_TX_RUNNING;
 8041ce4:	7123      	strb	r3, [r4, #4]
    TimerStart( &TxTimeoutTimer );
 8041ce6:	f00b ff41 	bl	804db6c <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8041cea:	2003      	movs	r0, #3
}
 8041cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8041cf0:	f7ff beae 	b.w	8041a50 <SX1276SetOpMode>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8041cf4:	2040      	movs	r0, #64	; 0x40
 8041cf6:	f7ff fcfb 	bl	80416f0 <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 8041cfa:	f000 0103 	and.w	r1, r0, #3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8041cfe:	f041 0110 	orr.w	r1, r1, #16
 8041d02:	2040      	movs	r0, #64	; 0x40
 8041d04:	f7ff fca4 	bl	8041650 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8041d08:	2041      	movs	r0, #65	; 0x41
 8041d0a:	f7ff fcf1 	bl	80416f0 <SX1276Read>
 8041d0e:	f000 013e 	and.w	r1, r0, #62	; 0x3e
 8041d12:	2041      	movs	r0, #65	; 0x41
 8041d14:	f7ff fc9c 	bl	8041650 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8041d18:	2035      	movs	r0, #53	; 0x35
 8041d1a:	f7ff fce9 	bl	80416f0 <SX1276Read>
 8041d1e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8041d22:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
        break;
 8041d26:	e7db      	b.n	8041ce0 <SX1276SetTx+0x1c>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8041d28:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 8041d2c:	b173      	cbz	r3, 8041d4c <SX1276SetTx+0x88>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8041d2e:	21f5      	movs	r1, #245	; 0xf5
 8041d30:	2011      	movs	r0, #17
 8041d32:	f7ff fc8d 	bl	8041650 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8041d36:	2040      	movs	r0, #64	; 0x40
 8041d38:	f7ff fcda 	bl	80416f0 <SX1276Read>
 8041d3c:	f000 0133 	and.w	r1, r0, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8041d40:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8041d44:	2040      	movs	r0, #64	; 0x40
 8041d46:	f7ff fc83 	bl	8041650 <SX1276Write>
 8041d4a:	e7c9      	b.n	8041ce0 <SX1276SetTx+0x1c>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8041d4c:	21f7      	movs	r1, #247	; 0xf7
 8041d4e:	2011      	movs	r0, #17
 8041d50:	f7ff fc7e 	bl	8041650 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8041d54:	2040      	movs	r0, #64	; 0x40
 8041d56:	f7ff fccb 	bl	80416f0 <SX1276Read>
 8041d5a:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 8041d5e:	e7ef      	b.n	8041d40 <SX1276SetTx+0x7c>
 8041d60:	2000bd50 	.word	0x2000bd50
 8041d64:	2000bce8 	.word	0x2000bce8
 8041d68:	2000bcb8 	.word	0x2000bcb8

08041d6c <SX1276StartCad>:
{
 8041d6c:	b510      	push	{r4, lr}
    switch( SX1276.Settings.Modem )
 8041d6e:	4c0c      	ldr	r4, [pc, #48]	; (8041da0 <SX1276StartCad+0x34>)
 8041d70:	7963      	ldrb	r3, [r4, #5]
 8041d72:	2b01      	cmp	r3, #1
 8041d74:	d112      	bne.n	8041d9c <SX1276StartCad+0x30>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8041d76:	21fa      	movs	r1, #250	; 0xfa
 8041d78:	2011      	movs	r0, #17
 8041d7a:	f7ff fc69 	bl	8041650 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 8041d7e:	2040      	movs	r0, #64	; 0x40
 8041d80:	f7ff fcb6 	bl	80416f0 <SX1276Read>
 8041d84:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
 8041d88:	2040      	movs	r0, #64	; 0x40
 8041d8a:	f7ff fc61 	bl	8041650 <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 8041d8e:	2303      	movs	r3, #3
 8041d90:	7123      	strb	r3, [r4, #4]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 8041d92:	2007      	movs	r0, #7
}
 8041d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 8041d98:	f7ff be5a 	b.w	8041a50 <SX1276SetOpMode>
}
 8041d9c:	bd10      	pop	{r4, pc}
 8041d9e:	bf00      	nop
 8041da0:	2000bce8 	.word	0x2000bce8

08041da4 <SX1276SetModem>:
{
 8041da4:	b510      	push	{r4, lr}
 8041da6:	4604      	mov	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 8041da8:	2001      	movs	r0, #1
 8041daa:	f7ff fca1 	bl	80416f0 <SX1276Read>
 8041dae:	4b19      	ldr	r3, [pc, #100]	; (8041e14 <SX1276SetModem+0x70>)
 8041db0:	f010 0f80 	tst.w	r0, #128	; 0x80
        SX1276.Settings.Modem = MODEM_LORA;
 8041db4:	bf14      	ite	ne
 8041db6:	2201      	movne	r2, #1
        SX1276.Settings.Modem = MODEM_FSK;
 8041db8:	2200      	moveq	r2, #0
 8041dba:	715a      	strb	r2, [r3, #5]
    if( SX1276.Settings.Modem == modem )
 8041dbc:	795a      	ldrb	r2, [r3, #5]
 8041dbe:	42a2      	cmp	r2, r4
 8041dc0:	d027      	beq.n	8041e12 <SX1276SetModem+0x6e>
    switch( SX1276.Settings.Modem )
 8041dc2:	2c01      	cmp	r4, #1
    SX1276.Settings.Modem = modem;
 8041dc4:	715c      	strb	r4, [r3, #5]
    switch( SX1276.Settings.Modem )
 8041dc6:	d013      	beq.n	8041df0 <SX1276SetModem+0x4c>
 8041dc8:	f7ff fe0c 	bl	80419e4 <SX1276SetOpMode.part.2>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8041dcc:	2001      	movs	r0, #1
 8041dce:	f7ff fc8f 	bl	80416f0 <SX1276Read>
 8041dd2:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8041dd6:	2001      	movs	r0, #1
 8041dd8:	f7ff fc3a 	bl	8041650 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8041ddc:	2100      	movs	r1, #0
 8041dde:	2040      	movs	r0, #64	; 0x40
 8041de0:	f7ff fc36 	bl	8041650 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8041de4:	2130      	movs	r1, #48	; 0x30
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8041de6:	2041      	movs	r0, #65	; 0x41
}
 8041de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8041dec:	f7ff bc30 	b.w	8041650 <SX1276Write>
 8041df0:	f7ff fdf8 	bl	80419e4 <SX1276SetOpMode.part.2>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8041df4:	4620      	mov	r0, r4
 8041df6:	f7ff fc7b 	bl	80416f0 <SX1276Read>
 8041dfa:	f060 017f 	orn	r1, r0, #127	; 0x7f
 8041dfe:	b2c9      	uxtb	r1, r1
 8041e00:	4620      	mov	r0, r4
 8041e02:	f7ff fc25 	bl	8041650 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8041e06:	2100      	movs	r1, #0
 8041e08:	2040      	movs	r0, #64	; 0x40
 8041e0a:	f7ff fc21 	bl	8041650 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8041e0e:	2100      	movs	r1, #0
 8041e10:	e7e9      	b.n	8041de6 <SX1276SetModem+0x42>
}
 8041e12:	bd10      	pop	{r4, pc}
 8041e14:	2000bce8 	.word	0x2000bce8

08041e18 <SX1276Init>:
{
 8041e18:	b570      	push	{r4, r5, r6, lr}
    RadioEvents = events;
 8041e1a:	4d1b      	ldr	r5, [pc, #108]	; (8041e88 <SX1276Init+0x70>)
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8041e1c:	491b      	ldr	r1, [pc, #108]	; (8041e8c <SX1276Init+0x74>)
    RadioEvents = events;
 8041e1e:	f8c5 0104 	str.w	r0, [r5, #260]	; 0x104
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8041e22:	481b      	ldr	r0, [pc, #108]	; (8041e90 <SX1276Init+0x78>)
 8041e24:	4c1b      	ldr	r4, [pc, #108]	; (8041e94 <SX1276Init+0x7c>)
 8041e26:	f00b fe97 	bl	804db58 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 8041e2a:	4918      	ldr	r1, [pc, #96]	; (8041e8c <SX1276Init+0x74>)
 8041e2c:	481a      	ldr	r0, [pc, #104]	; (8041e98 <SX1276Init+0x80>)
 8041e2e:	f00b fe93 	bl	804db58 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 8041e32:	4916      	ldr	r1, [pc, #88]	; (8041e8c <SX1276Init+0x74>)
 8041e34:	4819      	ldr	r0, [pc, #100]	; (8041e9c <SX1276Init+0x84>)
 8041e36:	f00b fe8f 	bl	804db58 <TimerInit>
    LoRaBoardCallbacks->SX1276BoardSetXO( SET );
 8041e3a:	682b      	ldr	r3, [r5, #0]
 8041e3c:	2001      	movs	r0, #1
 8041e3e:	681b      	ldr	r3, [r3, #0]
 8041e40:	4798      	blx	r3
    SX1276Reset( );
 8041e42:	f7ff fbbd 	bl	80415c0 <SX1276Reset>
    RxChainCalibration( );
 8041e46:	f7ff fc5f 	bl	8041708 <RxChainCalibration>
 8041e4a:	f7ff fdcb 	bl	80419e4 <SX1276SetOpMode.part.2>
    LoRaBoardCallbacks->SX1276BoardIoIrqInit( DioIrq );
 8041e4e:	682b      	ldr	r3, [r5, #0]
 8041e50:	4813      	ldr	r0, [pc, #76]	; (8041ea0 <SX1276Init+0x88>)
 8041e52:	689b      	ldr	r3, [r3, #8]
 8041e54:	4798      	blx	r3
 8041e56:	f104 0630 	add.w	r6, r4, #48	; 0x30
        SX1276SetModem( RadioRegsInit[i].Modem );
 8041e5a:	7820      	ldrb	r0, [r4, #0]
 8041e5c:	f7ff ffa2 	bl	8041da4 <SX1276SetModem>
 8041e60:	3403      	adds	r4, #3
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8041e62:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8041e66:	f814 0c02 	ldrb.w	r0, [r4, #-2]
 8041e6a:	f7ff fbf1 	bl	8041650 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8041e6e:	42b4      	cmp	r4, r6
 8041e70:	d1f3      	bne.n	8041e5a <SX1276Init+0x42>
    SX1276SetModem( MODEM_FSK );
 8041e72:	2000      	movs	r0, #0
 8041e74:	f7ff ff96 	bl	8041da4 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 8041e78:	4b0a      	ldr	r3, [pc, #40]	; (8041ea4 <SX1276Init+0x8c>)
 8041e7a:	2200      	movs	r2, #0
 8041e7c:	711a      	strb	r2, [r3, #4]
    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 8041e7e:	682b      	ldr	r3, [r5, #0]
 8041e80:	685b      	ldr	r3, [r3, #4]
 8041e82:	4798      	blx	r3
}
 8041e84:	3002      	adds	r0, #2
 8041e86:	bd70      	pop	{r4, r5, r6, pc}
 8041e88:	2000a2bc 	.word	0x2000a2bc
 8041e8c:	08042ab1 	.word	0x08042ab1
 8041e90:	2000bcb8 	.word	0x2000bcb8
 8041e94:	080518f8 	.word	0x080518f8
 8041e98:	2000bd50 	.word	0x2000bd50
 8041e9c:	2000bcd0 	.word	0x2000bcd0
 8041ea0:	2000109c 	.word	0x2000109c
 8041ea4:	2000bce8 	.word	0x2000bce8

08041ea8 <SX1276IsChannelFree>:
{
 8041ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8041eaa:	461c      	mov	r4, r3
    return SX1276.Settings.State;
 8041eac:	4b13      	ldr	r3, [pc, #76]	; (8041efc <SX1276IsChannelFree+0x54>)
    if( SX1276GetStatus( ) != RF_IDLE )
 8041eae:	791b      	ldrb	r3, [r3, #4]
{
 8041eb0:	4606      	mov	r6, r0
 8041eb2:	460d      	mov	r5, r1
 8041eb4:	4617      	mov	r7, r2
    if( SX1276GetStatus( ) != RF_IDLE )
 8041eb6:	b9f3      	cbnz	r3, 8041ef6 <SX1276IsChannelFree+0x4e>
    SX1276SetModem( modem );
 8041eb8:	f7ff ff74 	bl	8041da4 <SX1276SetModem>
    SX1276SetChannel( freq );
 8041ebc:	4628      	mov	r0, r5
 8041ebe:	f7ff fbd3 	bl	8041668 <SX1276SetChannel>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8041ec2:	2005      	movs	r0, #5
 8041ec4:	f7ff fdc4 	bl	8041a50 <SX1276SetOpMode>
    DelayMs( 1 );
 8041ec8:	2001      	movs	r0, #1
 8041eca:	f00d fa03 	bl	804f2d4 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 8041ece:	f00b fef8 	bl	804dcc2 <TimerGetCurrentTime>
 8041ed2:	4605      	mov	r5, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8041ed4:	4628      	mov	r0, r5
 8041ed6:	f00b fefb 	bl	804dcd0 <TimerGetElapsedTime>
 8041eda:	42a0      	cmp	r0, r4
 8041edc:	d304      	bcc.n	8041ee8 <SX1276IsChannelFree+0x40>
    bool status = true;
 8041ede:	2401      	movs	r4, #1
    SX1276SetSleep( );
 8041ee0:	f7ff fd96 	bl	8041a10 <SX1276SetSleep>
}
 8041ee4:	4620      	mov	r0, r4
 8041ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rssi = SX1276ReadRssi( modem );
 8041ee8:	4630      	mov	r0, r6
 8041eea:	f7ff fd59 	bl	80419a0 <SX1276ReadRssi>
        if( rssi > rssiThresh )
 8041eee:	42b8      	cmp	r0, r7
 8041ef0:	ddf0      	ble.n	8041ed4 <SX1276IsChannelFree+0x2c>
            status = false;
 8041ef2:	2400      	movs	r4, #0
 8041ef4:	e7f4      	b.n	8041ee0 <SX1276IsChannelFree+0x38>
        return false;
 8041ef6:	2400      	movs	r4, #0
 8041ef8:	e7f4      	b.n	8041ee4 <SX1276IsChannelFree+0x3c>
 8041efa:	bf00      	nop
 8041efc:	2000bce8 	.word	0x2000bce8

08041f00 <SX1276Random>:
{
 8041f00:	b538      	push	{r3, r4, r5, lr}
    SX1276SetModem( MODEM_LORA );
 8041f02:	2001      	movs	r0, #1
 8041f04:	f7ff ff4e 	bl	8041da4 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8041f08:	21ff      	movs	r1, #255	; 0xff
 8041f0a:	2011      	movs	r0, #17
 8041f0c:	f7ff fba0 	bl	8041650 <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8041f10:	2005      	movs	r0, #5
 8041f12:	f7ff fd9d 	bl	8041a50 <SX1276SetOpMode>
 8041f16:	2400      	movs	r4, #0
    uint32_t rnd = 0;
 8041f18:	4625      	mov	r5, r4
        DelayMs( 1 );
 8041f1a:	2001      	movs	r0, #1
 8041f1c:	f00d f9da 	bl	804f2d4 <HAL_Delay>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8041f20:	202c      	movs	r0, #44	; 0x2c
 8041f22:	f7ff fbe5 	bl	80416f0 <SX1276Read>
 8041f26:	f000 0001 	and.w	r0, r0, #1
 8041f2a:	40a0      	lsls	r0, r4
 8041f2c:	3401      	adds	r4, #1
    for( i = 0; i < 32; i++ )
 8041f2e:	2c20      	cmp	r4, #32
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8041f30:	ea45 0500 	orr.w	r5, r5, r0
    for( i = 0; i < 32; i++ )
 8041f34:	d1f1      	bne.n	8041f1a <SX1276Random+0x1a>
    SX1276SetSleep( );
 8041f36:	f7ff fd6b 	bl	8041a10 <SX1276SetSleep>
}
 8041f3a:	4628      	mov	r0, r5
 8041f3c:	bd38      	pop	{r3, r4, r5, pc}
	...

08041f40 <SX1276SetRxConfig>:
{
 8041f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8041f44:	b089      	sub	sp, #36	; 0x24
 8041f46:	4604      	mov	r4, r0
 8041f48:	9300      	str	r3, [sp, #0]
 8041f4a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8041f4e:	9304      	str	r3, [sp, #16]
 8041f50:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8041f54:	9302      	str	r3, [sp, #8]
 8041f56:	468a      	mov	sl, r1
 8041f58:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8041f5c:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
 8041f60:	9305      	str	r3, [sp, #20]
 8041f62:	4615      	mov	r5, r2
 8041f64:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 8041f68:	9206      	str	r2, [sp, #24]
 8041f6a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 8041f6e:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8041f72:	f89d 8054 	ldrb.w	r8, [sp, #84]	; 0x54
 8041f76:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
 8041f7a:	f89d 605c 	ldrb.w	r6, [sp, #92]	; 0x5c
 8041f7e:	9107      	str	r1, [sp, #28]
    SX1276SetModem( modem );
 8041f80:	f7ff ff10 	bl	8041da4 <SX1276SetModem>
    switch( modem )
 8041f84:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8041f88:	b134      	cbz	r4, 8041f98 <SX1276SetRxConfig+0x58>
 8041f8a:	2c01      	cmp	r4, #1
 8041f8c:	9907      	ldr	r1, [sp, #28]
 8041f8e:	f000 8083 	beq.w	8042098 <SX1276SetRxConfig+0x158>
}
 8041f92:	b009      	add	sp, #36	; 0x24
 8041f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8041f98:	4ca1      	ldr	r4, [pc, #644]	; (8042220 <SX1276SetRxConfig+0x2e0>)
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 8041f9a:	4628      	mov	r0, r5
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8041f9c:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8041fa0:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8041fa4:	f8c4 a014 	str.w	sl, [r4, #20]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8041fa8:	e9c4 9506 	strd	r9, r5, [r4, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8041fac:	f884 8022 	strb.w	r8, [r4, #34]	; 0x22
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8041fb0:	f884 b023 	strb.w	fp, [r4, #35]	; 0x23
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8041fb4:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8041fb8:	8427      	strh	r7, [r4, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 8041fba:	f7fe fbd3 	bl	8040764 <__aeabi_ui2d>
 8041fbe:	e9cd 0100 	strd	r0, r1, [sp]
 8041fc2:	4602      	mov	r2, r0
 8041fc4:	460b      	mov	r3, r1
 8041fc6:	2000      	movs	r0, #0
 8041fc8:	4996      	ldr	r1, [pc, #600]	; (8042224 <SX1276SetRxConfig+0x2e4>)
 8041fca:	f7fe fd6f 	bl	8040aac <__aeabi_ddiv>
 8041fce:	2200      	movs	r2, #0
 8041fd0:	4b95      	ldr	r3, [pc, #596]	; (8042228 <SX1276SetRxConfig+0x2e8>)
 8041fd2:	f7fe fc41 	bl	8040858 <__aeabi_dmul>
 8041fd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8041fda:	9804      	ldr	r0, [sp, #16]
 8041fdc:	f7fe fbd2 	bl	8040784 <__aeabi_i2d>
 8041fe0:	4602      	mov	r2, r0
 8041fe2:	460b      	mov	r3, r1
 8041fe4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8041fe8:	f7fe fc36 	bl	8040858 <__aeabi_dmul>
 8041fec:	2200      	movs	r2, #0
 8041fee:	4b8f      	ldr	r3, [pc, #572]	; (804222c <SX1276SetRxConfig+0x2ec>)
 8041ff0:	f7fe fc32 	bl	8040858 <__aeabi_dmul>
 8041ff4:	f7fe fef2 	bl	8040ddc <__aeabi_d2uiz>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8041ff8:	e9dd 2300 	ldrd	r2, r3, [sp]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 8041ffc:	62e0      	str	r0, [r4, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8041ffe:	a186      	add	r1, pc, #536	; (adr r1, 8042218 <SX1276SetRxConfig+0x2d8>)
 8042000:	e9d1 0100 	ldrd	r0, r1, [r1]
 8042004:	f7fe fd52 	bl	8040aac <__aeabi_ddiv>
 8042008:	f7fe fee8 	bl	8040ddc <__aeabi_d2uiz>
 804200c:	b284      	uxth	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 804200e:	0a21      	lsrs	r1, r4, #8
 8042010:	2002      	movs	r0, #2
 8042012:	f7ff fb1d 	bl	8041650 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8042016:	b2e1      	uxtb	r1, r4
 8042018:	2003      	movs	r0, #3
 804201a:	f7ff fb19 	bl	8041650 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 804201e:	4650      	mov	r0, sl
 8042020:	f7ff faa0 	bl	8041564 <GetFskBandwidthRegValue>
 8042024:	4601      	mov	r1, r0
 8042026:	2012      	movs	r0, #18
 8042028:	f7ff fb12 	bl	8041650 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 804202c:	4648      	mov	r0, r9
 804202e:	f7ff fa99 	bl	8041564 <GetFskBandwidthRegValue>
 8042032:	4601      	mov	r1, r0
 8042034:	2013      	movs	r0, #19
 8042036:	f7ff fb0b 	bl	8041650 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 804203a:	0a39      	lsrs	r1, r7, #8
 804203c:	2025      	movs	r0, #37	; 0x25
 804203e:	f7ff fb07 	bl	8041650 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8042042:	b2f9      	uxtb	r1, r7
 8042044:	2026      	movs	r0, #38	; 0x26
 8042046:	f7ff fb03 	bl	8041650 <SX1276Write>
            if( fixLen == 1 )
 804204a:	f1b8 0f00 	cmp.w	r8, #0
 804204e:	d021      	beq.n	8042094 <SX1276SetRxConfig+0x154>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8042050:	4659      	mov	r1, fp
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8042052:	2032      	movs	r0, #50	; 0x32
 8042054:	f7ff fafc 	bl	8041650 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8042058:	2030      	movs	r0, #48	; 0x30
 804205a:	f7ff fb49 	bl	80416f0 <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 804205e:	f1b8 0f00 	cmp.w	r8, #0
                           RF_PACKETCONFIG1_CRC_MASK &
 8042062:	f000 006f 	and.w	r0, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8042066:	bf14      	ite	ne
 8042068:	2100      	movne	r1, #0
 804206a:	f06f 017f 	mvneq.w	r1, #127	; 0x7f
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 804206e:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
 8042072:	4301      	orrs	r1, r0
            SX1276Write( REG_PACKETCONFIG1,
 8042074:	b2c9      	uxtb	r1, r1
 8042076:	2030      	movs	r0, #48	; 0x30
 8042078:	f7ff faea 	bl	8041650 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 804207c:	2031      	movs	r0, #49	; 0x31
 804207e:	f7ff fb37 	bl	80416f0 <SX1276Read>
 8042082:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8042086:	b2c9      	uxtb	r1, r1
 8042088:	2031      	movs	r0, #49	; 0x31
}
 804208a:	b009      	add	sp, #36	; 0x24
 804208c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8042090:	f7ff bade 	b.w	8041650 <SX1276Write>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8042094:	21ff      	movs	r1, #255	; 0xff
 8042096:	e7dc      	b.n	8042052 <SX1276SetRxConfig+0x112>
            if( bandwidth > 2 )
 8042098:	f1ba 0f02 	cmp.w	sl, #2
 804209c:	d900      	bls.n	80420a0 <SX1276SetRxConfig+0x160>
 804209e:	e7fe      	b.n	804209e <SX1276SetRxConfig+0x15e>
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 80420a0:	4c5f      	ldr	r4, [pc, #380]	; (8042220 <SX1276SetRxConfig+0x2e0>)
            SX1276.Settings.LoRa.Coderate = coderate;
 80420a2:	9800      	ldr	r0, [sp, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 80420a4:	f884 1053 	strb.w	r1, [r4, #83]	; 0x53
            bandwidth += 7;
 80420a8:	f10a 0907 	add.w	r9, sl, #7
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 80420ac:	9902      	ldr	r1, [sp, #8]
            SX1276.Settings.LoRa.Coderate = coderate;
 80420ae:	f884 004d 	strb.w	r0, [r4, #77]	; 0x4d
            if( datarate > 12 )
 80420b2:	2d0c      	cmp	r5, #12
            SX1276.Settings.LoRa.Datarate = datarate;
 80420b4:	e9c4 9511 	strd	r9, r5, [r4, #68]	; 0x44
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 80420b8:	f8a4 704e 	strh.w	r7, [r4, #78]	; 0x4e
            SX1276.Settings.LoRa.FixLen = fixLen;
 80420bc:	f884 8050 	strb.w	r8, [r4, #80]	; 0x50
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 80420c0:	f884 b051 	strb.w	fp, [r4, #81]	; 0x51
            SX1276.Settings.LoRa.CrcOn = crcOn;
 80420c4:	f884 6052 	strb.w	r6, [r4, #82]	; 0x52
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 80420c8:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 80420cc:	f884 2055 	strb.w	r2, [r4, #85]	; 0x55
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 80420d0:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
            if( datarate > 12 )
 80420d4:	f200 8098 	bhi.w	8042208 <SX1276SetRxConfig+0x2c8>
            else if( datarate < 6 )
 80420d8:	2d05      	cmp	r5, #5
 80420da:	f240 8081 	bls.w	80421e0 <SX1276SetRxConfig+0x2a0>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80420de:	f1b9 0f07 	cmp.w	r9, #7
 80420e2:	d176      	bne.n	80421d2 <SX1276SetRxConfig+0x292>
 80420e4:	f1a5 030b 	sub.w	r3, r5, #11
 80420e8:	2b01      	cmp	r3, #1
 80420ea:	d877      	bhi.n	80421dc <SX1276SetRxConfig+0x29c>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 80420ec:	2301      	movs	r3, #1
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 80420ee:	201d      	movs	r0, #29
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80420f0:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 80420f4:	f7ff fafc 	bl	80416f0 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80420f8:	9b00      	ldr	r3, [sp, #0]
 80420fa:	ea48 0143 	orr.w	r1, r8, r3, lsl #1
 80420fe:	ea41 1109 	orr.w	r1, r1, r9, lsl #4
            SX1276Write( REG_LR_MODEMCONFIG1,
 8042102:	b2c9      	uxtb	r1, r1
 8042104:	201d      	movs	r0, #29
 8042106:	f7ff faa3 	bl	8041650 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 804210a:	201e      	movs	r0, #30
 804210c:	f7ff faf0 	bl	80416f0 <SX1276Read>
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8042110:	9b04      	ldr	r3, [sp, #16]
 8042112:	f3c3 2101 	ubfx	r1, r3, #8, #2
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8042116:	f000 0008 	and.w	r0, r0, #8
            SX1276Write( REG_LR_MODEMCONFIG2,
 804211a:	ea41 0186 	orr.w	r1, r1, r6, lsl #2
 804211e:	4301      	orrs	r1, r0
 8042120:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 8042124:	b2c9      	uxtb	r1, r1
 8042126:	201e      	movs	r0, #30
 8042128:	f7ff fa92 	bl	8041650 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 804212c:	2026      	movs	r0, #38	; 0x26
 804212e:	f7ff fadf 	bl	80416f0 <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8042132:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8042136:	f020 0008 	bic.w	r0, r0, #8
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 804213a:	ea40 01c1 	orr.w	r1, r0, r1, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
 804213e:	b2c9      	uxtb	r1, r1
 8042140:	2026      	movs	r0, #38	; 0x26
 8042142:	f7ff fa85 	bl	8041650 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8042146:	f89d 1010 	ldrb.w	r1, [sp, #16]
 804214a:	201f      	movs	r0, #31
 804214c:	f7ff fa80 	bl	8041650 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8042150:	0a39      	lsrs	r1, r7, #8
 8042152:	2020      	movs	r0, #32
 8042154:	f7ff fa7c 	bl	8041650 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8042158:	b2f9      	uxtb	r1, r7
 804215a:	2021      	movs	r0, #33	; 0x21
 804215c:	f7ff fa78 	bl	8041650 <SX1276Write>
            if( fixLen == 1 )
 8042160:	f1b8 0f00 	cmp.w	r8, #0
 8042164:	d003      	beq.n	804216e <SX1276SetRxConfig+0x22e>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8042166:	4659      	mov	r1, fp
 8042168:	2022      	movs	r0, #34	; 0x22
 804216a:	f7ff fa71 	bl	8041650 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 804216e:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 8042172:	b16b      	cbz	r3, 8042190 <SX1276SetRxConfig+0x250>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8042174:	2044      	movs	r0, #68	; 0x44
 8042176:	f7ff fabb 	bl	80416f0 <SX1276Read>
 804217a:	f060 017f 	orn	r1, r0, #127	; 0x7f
 804217e:	b2c9      	uxtb	r1, r1
 8042180:	2044      	movs	r0, #68	; 0x44
 8042182:	f7ff fa65 	bl	8041650 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8042186:	f894 1054 	ldrb.w	r1, [r4, #84]	; 0x54
 804218a:	2024      	movs	r0, #36	; 0x24
 804218c:	f7ff fa60 	bl	8041650 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8042190:	f1b9 0f09 	cmp.w	r9, #9
 8042194:	d12a      	bne.n	80421ec <SX1276SetRxConfig+0x2ac>
 8042196:	68a2      	ldr	r2, [r4, #8]
 8042198:	4b25      	ldr	r3, [pc, #148]	; (8042230 <SX1276SetRxConfig+0x2f0>)
 804219a:	429a      	cmp	r2, r3
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 804219c:	f04f 0102 	mov.w	r1, #2
 80421a0:	f04f 0036 	mov.w	r0, #54	; 0x36
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 80421a4:	d91e      	bls.n	80421e4 <SX1276SetRxConfig+0x2a4>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 80421a6:	f7ff fa53 	bl	8041650 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 80421aa:	2164      	movs	r1, #100	; 0x64
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 80421ac:	203a      	movs	r0, #58	; 0x3a
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 80421ae:	f7ff fa4f 	bl	8041650 <SX1276Write>
            if( datarate == 6 )
 80421b2:	2d06      	cmp	r5, #6
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80421b4:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( datarate == 6 )
 80421b8:	d11b      	bne.n	80421f2 <SX1276SetRxConfig+0x2b2>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80421ba:	f7ff fa99 	bl	80416f0 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80421be:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80421c2:	f041 0105 	orr.w	r1, r1, #5
 80421c6:	2031      	movs	r0, #49	; 0x31
 80421c8:	f7ff fa42 	bl	8041650 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80421cc:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80421ce:	2037      	movs	r0, #55	; 0x37
 80421d0:	e75b      	b.n	804208a <SX1276SetRxConfig+0x14a>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80421d2:	f1b9 0f08 	cmp.w	r9, #8
 80421d6:	d101      	bne.n	80421dc <SX1276SetRxConfig+0x29c>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 80421d8:	2d0c      	cmp	r5, #12
 80421da:	d087      	beq.n	80420ec <SX1276SetRxConfig+0x1ac>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80421dc:	2300      	movs	r3, #0
 80421de:	e786      	b.n	80420ee <SX1276SetRxConfig+0x1ae>
                datarate = 6;
 80421e0:	2506      	movs	r5, #6
 80421e2:	e7fb      	b.n	80421dc <SX1276SetRxConfig+0x29c>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 80421e4:	f7ff fa34 	bl	8041650 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 80421e8:	217f      	movs	r1, #127	; 0x7f
 80421ea:	e7df      	b.n	80421ac <SX1276SetRxConfig+0x26c>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 80421ec:	2103      	movs	r1, #3
 80421ee:	2036      	movs	r0, #54	; 0x36
 80421f0:	e7dd      	b.n	80421ae <SX1276SetRxConfig+0x26e>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80421f2:	f7ff fa7d 	bl	80416f0 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80421f6:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80421fa:	f041 0103 	orr.w	r1, r1, #3
 80421fe:	2031      	movs	r0, #49	; 0x31
 8042200:	f7ff fa26 	bl	8041650 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8042204:	210a      	movs	r1, #10
 8042206:	e7e2      	b.n	80421ce <SX1276SetRxConfig+0x28e>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8042208:	f1ba 0f02 	cmp.w	sl, #2
 804220c:	f04f 050c 	mov.w	r5, #12
 8042210:	d0e4      	beq.n	80421dc <SX1276SetRxConfig+0x29c>
 8042212:	e76b      	b.n	80420ec <SX1276SetRxConfig+0x1ac>
 8042214:	f3af 8000 	nop.w
 8042218:	00000000 	.word	0x00000000
 804221c:	417e8480 	.word	0x417e8480
 8042220:	2000bce8 	.word	0x2000bce8
 8042224:	3ff00000 	.word	0x3ff00000
 8042228:	40200000 	.word	0x40200000
 804222c:	408f4000 	.word	0x408f4000
 8042230:	1f4add40 	.word	0x1f4add40
 8042234:	00000000 	.word	0x00000000

08042238 <SX1276SetTxConfig>:
{
 8042238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804223c:	b087      	sub	sp, #28
 804223e:	4698      	mov	r8, r3
 8042240:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8042244:	9301      	str	r3, [sp, #4]
 8042246:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 804224a:	9303      	str	r3, [sp, #12]
 804224c:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 8042250:	9304      	str	r3, [sp, #16]
 8042252:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8042254:	9205      	str	r2, [sp, #20]
 8042256:	4689      	mov	r9, r1
 8042258:	9302      	str	r3, [sp, #8]
 804225a:	4683      	mov	fp, r0
 804225c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 804225e:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
 8042262:	f8bd 7048 	ldrh.w	r7, [sp, #72]	; 0x48
 8042266:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 804226a:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
    SX1276SetModem( modem );
 804226e:	f7ff fd99 	bl	8041da4 <SX1276SetModem>
    LoRaBoardCallbacks->SX1276BoardSetRfTxPower( power );
 8042272:	4985      	ldr	r1, [pc, #532]	; (8042488 <SX1276SetTxConfig+0x250>)
 8042274:	6809      	ldr	r1, [r1, #0]
 8042276:	4648      	mov	r0, r9
 8042278:	68c9      	ldr	r1, [r1, #12]
 804227a:	4788      	blx	r1
    switch( modem )
 804227c:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8042280:	f1bb 0f00 	cmp.w	fp, #0
 8042284:	d005      	beq.n	8042292 <SX1276SetTxConfig+0x5a>
 8042286:	f1bb 0f01 	cmp.w	fp, #1
 804228a:	d061      	beq.n	8042350 <SX1276SetTxConfig+0x118>
}
 804228c:	b007      	add	sp, #28
 804228e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Power = power;
 8042292:	497e      	ldr	r1, [pc, #504]	; (804248c <SX1276SetTxConfig+0x254>)
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8042294:	f881 3025 	strb.w	r3, [r1, #37]	; 0x25
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8042298:	9b02      	ldr	r3, [sp, #8]
            SX1276.Settings.Fsk.Datarate = datarate;
 804229a:	61cc      	str	r4, [r1, #28]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 804229c:	e9c1 2804 	strd	r2, r8, [r1, #16]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 80422a0:	f881 5024 	strb.w	r5, [r1, #36]	; 0x24
            SX1276.Settings.Fsk.TxTimeout = timeout;
 80422a4:	628b      	str	r3, [r1, #40]	; 0x28
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 80422a6:	4610      	mov	r0, r2
            SX1276.Settings.Fsk.Power = power;
 80422a8:	f881 900c 	strb.w	r9, [r1, #12]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 80422ac:	840f      	strh	r7, [r1, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 80422ae:	f881 6022 	strb.w	r6, [r1, #34]	; 0x22
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 80422b2:	f7fe fa57 	bl	8040764 <__aeabi_ui2d>
 80422b6:	a370      	add	r3, pc, #448	; (adr r3, 8042478 <SX1276SetTxConfig+0x240>)
 80422b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80422bc:	f7fe fbf6 	bl	8040aac <__aeabi_ddiv>
 80422c0:	f7fe fd8c 	bl	8040ddc <__aeabi_d2uiz>
 80422c4:	fa1f f880 	uxth.w	r8, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 80422c8:	ea4f 2118 	mov.w	r1, r8, lsr #8
 80422cc:	2004      	movs	r0, #4
 80422ce:	f7ff f9bf 	bl	8041650 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 80422d2:	fa5f f188 	uxtb.w	r1, r8
 80422d6:	2005      	movs	r0, #5
 80422d8:	f7ff f9ba 	bl	8041650 <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 80422dc:	4620      	mov	r0, r4
 80422de:	f7fe fa41 	bl	8040764 <__aeabi_ui2d>
 80422e2:	4602      	mov	r2, r0
 80422e4:	460b      	mov	r3, r1
 80422e6:	a166      	add	r1, pc, #408	; (adr r1, 8042480 <SX1276SetTxConfig+0x248>)
 80422e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80422ec:	f7fe fbde 	bl	8040aac <__aeabi_ddiv>
 80422f0:	f7fe fd74 	bl	8040ddc <__aeabi_d2uiz>
 80422f4:	b284      	uxth	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 80422f6:	0a21      	lsrs	r1, r4, #8
 80422f8:	2002      	movs	r0, #2
 80422fa:	f7ff f9a9 	bl	8041650 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 80422fe:	b2e1      	uxtb	r1, r4
 8042300:	2003      	movs	r0, #3
 8042302:	f7ff f9a5 	bl	8041650 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8042306:	0a39      	lsrs	r1, r7, #8
 8042308:	2025      	movs	r0, #37	; 0x25
 804230a:	f7ff f9a1 	bl	8041650 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 804230e:	b2f9      	uxtb	r1, r7
 8042310:	2026      	movs	r0, #38	; 0x26
 8042312:	f7ff f99d 	bl	8041650 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8042316:	2030      	movs	r0, #48	; 0x30
 8042318:	f7ff f9ea 	bl	80416f0 <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 804231c:	2e00      	cmp	r6, #0
                           RF_PACKETCONFIG1_CRC_MASK &
 804231e:	f000 006f 	and.w	r0, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8042322:	bf14      	ite	ne
 8042324:	2100      	movne	r1, #0
 8042326:	f06f 017f 	mvneq.w	r1, #127	; 0x7f
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 804232a:	ea40 1505 	orr.w	r5, r0, r5, lsl #4
 804232e:	4329      	orrs	r1, r5
            SX1276Write( REG_PACKETCONFIG1,
 8042330:	b2c9      	uxtb	r1, r1
 8042332:	2030      	movs	r0, #48	; 0x30
 8042334:	f7ff f98c 	bl	8041650 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8042338:	2031      	movs	r0, #49	; 0x31
 804233a:	f7ff f9d9 	bl	80416f0 <SX1276Read>
 804233e:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8042342:	b2c9      	uxtb	r1, r1
 8042344:	2031      	movs	r0, #49	; 0x31
}
 8042346:	b007      	add	sp, #28
 8042348:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 804234c:	f7ff b980 	b.w	8041650 <SX1276Write>
            SX1276.Settings.LoRa.Power = power;
 8042350:	4a4e      	ldr	r2, [pc, #312]	; (804248c <SX1276SetTxConfig+0x254>)
            if( bandwidth > 2 )
 8042352:	f1b8 0f02 	cmp.w	r8, #2
            SX1276.Settings.LoRa.Power = power;
 8042356:	f882 9040 	strb.w	r9, [r2, #64]	; 0x40
 804235a:	4691      	mov	r9, r2
            if( bandwidth > 2 )
 804235c:	d900      	bls.n	8042360 <SX1276SetTxConfig+0x128>
 804235e:	e7fe      	b.n	804235e <SX1276SetTxConfig+0x126>
            bandwidth += 7;
 8042360:	f108 0b07 	add.w	fp, r8, #7
            SX1276.Settings.LoRa.Datarate = datarate;
 8042364:	e9c2 b411 	strd	fp, r4, [r2, #68]	; 0x44
            SX1276.Settings.LoRa.Coderate = coderate;
 8042368:	f882 a04d 	strb.w	sl, [r2, #77]	; 0x4d
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 804236c:	f8a2 704e 	strh.w	r7, [r2, #78]	; 0x4e
            SX1276.Settings.LoRa.FixLen = fixLen;
 8042370:	f882 6050 	strb.w	r6, [r2, #80]	; 0x50
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8042374:	9a01      	ldr	r2, [sp, #4]
 8042376:	f889 2053 	strb.w	r2, [r9, #83]	; 0x53
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 804237a:	f889 3055 	strb.w	r3, [r9, #85]	; 0x55
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 804237e:	9a03      	ldr	r2, [sp, #12]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8042380:	9b02      	ldr	r3, [sp, #8]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8042382:	f889 2054 	strb.w	r2, [r9, #84]	; 0x54
            if( datarate > 12 )
 8042386:	2c0c      	cmp	r4, #12
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8042388:	f889 5052 	strb.w	r5, [r9, #82]	; 0x52
            SX1276.Settings.LoRa.TxTimeout = timeout;
 804238c:	f8c9 3058 	str.w	r3, [r9, #88]	; 0x58
            if( datarate > 12 )
 8042390:	d86c      	bhi.n	804246c <SX1276SetTxConfig+0x234>
            else if( datarate < 6 )
 8042392:	2c05      	cmp	r4, #5
 8042394:	d95d      	bls.n	8042452 <SX1276SetTxConfig+0x21a>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8042396:	f1bb 0f07 	cmp.w	fp, #7
 804239a:	d153      	bne.n	8042444 <SX1276SetTxConfig+0x20c>
 804239c:	f1a4 030b 	sub.w	r3, r4, #11
 80423a0:	2b01      	cmp	r3, #1
 80423a2:	d854      	bhi.n	804244e <SX1276SetTxConfig+0x216>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 80423a4:	2301      	movs	r3, #1
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80423a6:	f889 304c 	strb.w	r3, [r9, #76]	; 0x4c
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80423aa:	9b01      	ldr	r3, [sp, #4]
 80423ac:	b16b      	cbz	r3, 80423ca <SX1276SetTxConfig+0x192>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 80423ae:	2044      	movs	r0, #68	; 0x44
 80423b0:	f7ff f99e 	bl	80416f0 <SX1276Read>
 80423b4:	f060 017f 	orn	r1, r0, #127	; 0x7f
 80423b8:	b2c9      	uxtb	r1, r1
 80423ba:	2044      	movs	r0, #68	; 0x44
 80423bc:	f7ff f948 	bl	8041650 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 80423c0:	f899 1054 	ldrb.w	r1, [r9, #84]	; 0x54
 80423c4:	2024      	movs	r0, #36	; 0x24
 80423c6:	f7ff f943 	bl	8041650 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 80423ca:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80423cc:	ea46 064a 	orr.w	r6, r6, sl, lsl #1
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 80423d0:	f7ff f98e 	bl	80416f0 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80423d4:	ea46 110b 	orr.w	r1, r6, fp, lsl #4
            SX1276Write( REG_LR_MODEMCONFIG1,
 80423d8:	b2c9      	uxtb	r1, r1
 80423da:	201d      	movs	r0, #29
 80423dc:	f7ff f938 	bl	8041650 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 80423e0:	201e      	movs	r0, #30
 80423e2:	f7ff f985 	bl	80416f0 <SX1276Read>
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 80423e6:	00ad      	lsls	r5, r5, #2
                           RFLR_MODEMCONFIG2_SF_MASK &
 80423e8:	f000 000b 	and.w	r0, r0, #11
            SX1276Write( REG_LR_MODEMCONFIG2,
 80423ec:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
 80423f0:	4305      	orrs	r5, r0
 80423f2:	b2e9      	uxtb	r1, r5
 80423f4:	201e      	movs	r0, #30
 80423f6:	f7ff f92b 	bl	8041650 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 80423fa:	2026      	movs	r0, #38	; 0x26
 80423fc:	f7ff f978 	bl	80416f0 <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8042400:	f899 104c 	ldrb.w	r1, [r9, #76]	; 0x4c
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8042404:	f020 0008 	bic.w	r0, r0, #8
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8042408:	ea40 01c1 	orr.w	r1, r0, r1, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
 804240c:	b2c9      	uxtb	r1, r1
 804240e:	2026      	movs	r0, #38	; 0x26
 8042410:	f7ff f91e 	bl	8041650 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8042414:	0a39      	lsrs	r1, r7, #8
 8042416:	2020      	movs	r0, #32
 8042418:	f7ff f91a 	bl	8041650 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 804241c:	2021      	movs	r0, #33	; 0x21
 804241e:	b2f9      	uxtb	r1, r7
 8042420:	f7ff f916 	bl	8041650 <SX1276Write>
            if( datarate == 6 )
 8042424:	2c06      	cmp	r4, #6
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8042426:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( datarate == 6 )
 804242a:	d114      	bne.n	8042456 <SX1276SetTxConfig+0x21e>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 804242c:	f7ff f960 	bl	80416f0 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8042430:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8042434:	f041 0105 	orr.w	r1, r1, #5
 8042438:	2031      	movs	r0, #49	; 0x31
 804243a:	f7ff f909 	bl	8041650 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 804243e:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8042440:	2037      	movs	r0, #55	; 0x37
 8042442:	e780      	b.n	8042346 <SX1276SetTxConfig+0x10e>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8042444:	f1bb 0f08 	cmp.w	fp, #8
 8042448:	d101      	bne.n	804244e <SX1276SetTxConfig+0x216>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 804244a:	2c0c      	cmp	r4, #12
 804244c:	d0aa      	beq.n	80423a4 <SX1276SetTxConfig+0x16c>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 804244e:	2300      	movs	r3, #0
 8042450:	e7a9      	b.n	80423a6 <SX1276SetTxConfig+0x16e>
                datarate = 6;
 8042452:	2406      	movs	r4, #6
 8042454:	e7fb      	b.n	804244e <SX1276SetTxConfig+0x216>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8042456:	f7ff f94b 	bl	80416f0 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 804245a:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 804245e:	f041 0103 	orr.w	r1, r1, #3
 8042462:	2031      	movs	r0, #49	; 0x31
 8042464:	f7ff f8f4 	bl	8041650 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8042468:	210a      	movs	r1, #10
 804246a:	e7e9      	b.n	8042440 <SX1276SetTxConfig+0x208>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 804246c:	f1b8 0f02 	cmp.w	r8, #2
 8042470:	f04f 040c 	mov.w	r4, #12
 8042474:	d0eb      	beq.n	804244e <SX1276SetTxConfig+0x216>
 8042476:	e795      	b.n	80423a4 <SX1276SetTxConfig+0x16c>
 8042478:	00000000 	.word	0x00000000
 804247c:	404e8480 	.word	0x404e8480
 8042480:	00000000 	.word	0x00000000
 8042484:	417e8480 	.word	0x417e8480
 8042488:	2000a2bc 	.word	0x2000a2bc
 804248c:	2000bce8 	.word	0x2000bce8

08042490 <SX1276SetTxContinuousWave>:
{
 8042490:	b530      	push	{r4, r5, lr}
    uint32_t timeout = ( uint32_t )( time * 1000 );
 8042492:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
 8042496:	b08b      	sub	sp, #44	; 0x2c
    uint32_t timeout = ( uint32_t )( time * 1000 );
 8042498:	4354      	muls	r4, r2
{
 804249a:	460d      	mov	r5, r1
    SX1276SetChannel( freq );
 804249c:	f7ff f8e4 	bl	8041668 <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 80424a0:	2300      	movs	r3, #0
 80424a2:	2205      	movs	r2, #5
 80424a4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80424a8:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 80424ac:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80424b0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80424b4:	9303      	str	r3, [sp, #12]
 80424b6:	4618      	mov	r0, r3
 80424b8:	4629      	mov	r1, r5
 80424ba:	9200      	str	r2, [sp, #0]
 80424bc:	9408      	str	r4, [sp, #32]
 80424be:	461a      	mov	r2, r3
 80424c0:	f7ff feba 	bl	8042238 <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 80424c4:	2031      	movs	r0, #49	; 0x31
 80424c6:	f7ff f913 	bl	80416f0 <SX1276Read>
 80424ca:	f000 01bf 	and.w	r1, r0, #191	; 0xbf
 80424ce:	2031      	movs	r0, #49	; 0x31
 80424d0:	f7ff f8be 	bl	8041650 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 80424d4:	4d0c      	ldr	r5, [pc, #48]	; (8042508 <SX1276SetTxContinuousWave+0x78>)
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 80424d6:	21f0      	movs	r1, #240	; 0xf0
 80424d8:	2040      	movs	r0, #64	; 0x40
 80424da:	f7ff f8b9 	bl	8041650 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 80424de:	21a0      	movs	r1, #160	; 0xa0
 80424e0:	2041      	movs	r0, #65	; 0x41
 80424e2:	f7ff f8b5 	bl	8041650 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 80424e6:	4621      	mov	r1, r4
 80424e8:	4628      	mov	r0, r5
 80424ea:	f00b fbd9 	bl	804dca0 <TimerSetValue>
    SX1276.Settings.State = RF_TX_RUNNING;
 80424ee:	4b07      	ldr	r3, [pc, #28]	; (804250c <SX1276SetTxContinuousWave+0x7c>)
 80424f0:	2202      	movs	r2, #2
    TimerStart( &TxTimeoutTimer );
 80424f2:	4628      	mov	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 80424f4:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 80424f6:	f00b fb39 	bl	804db6c <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 80424fa:	2003      	movs	r0, #3
}
 80424fc:	b00b      	add	sp, #44	; 0x2c
 80424fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8042502:	f7ff baa5 	b.w	8041a50 <SX1276SetOpMode>
 8042506:	bf00      	nop
 8042508:	2000bcb8 	.word	0x2000bcb8
 804250c:	2000bce8 	.word	0x2000bce8

08042510 <SX1276OnDio2Irq>:
{
 8042510:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8042512:	4c2b      	ldr	r4, [pc, #172]	; (80425c0 <SX1276OnDio2Irq+0xb0>)
 8042514:	7921      	ldrb	r1, [r4, #4]
 8042516:	2901      	cmp	r1, #1
 8042518:	d002      	beq.n	8042520 <SX1276OnDio2Irq+0x10>
 804251a:	2902      	cmp	r1, #2
 804251c:	d048      	beq.n	80425b0 <SX1276OnDio2Irq+0xa0>
}
 804251e:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 8042520:	7963      	ldrb	r3, [r4, #5]
 8042522:	b1d3      	cbz	r3, 804255a <SX1276OnDio2Irq+0x4a>
 8042524:	2b01      	cmp	r3, #1
 8042526:	d1fa      	bne.n	804251e <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8042528:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 804252c:	2b00      	cmp	r3, #0
 804252e:	d0f6      	beq.n	804251e <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8042530:	2102      	movs	r1, #2
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8042532:	2012      	movs	r0, #18
 8042534:	f7ff f88c 	bl	8041650 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8042538:	4b22      	ldr	r3, [pc, #136]	; (80425c4 <SX1276OnDio2Irq+0xb4>)
 804253a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 804253e:	2b00      	cmp	r3, #0
 8042540:	d0ed      	beq.n	804251e <SX1276OnDio2Irq+0xe>
 8042542:	695c      	ldr	r4, [r3, #20]
 8042544:	2c00      	cmp	r4, #0
 8042546:	d0ea      	beq.n	804251e <SX1276OnDio2Irq+0xe>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8042548:	201c      	movs	r0, #28
 804254a:	f7ff f8d1 	bl	80416f0 <SX1276Read>
 804254e:	4623      	mov	r3, r4
 8042550:	f000 003f 	and.w	r0, r0, #63	; 0x3f
}
 8042554:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8042558:	4718      	bx	r3
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 804255a:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
 804255e:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 8042560:	2d01      	cmp	r5, #1
 8042562:	d1dc      	bne.n	804251e <SX1276OnDio2Irq+0xe>
                    TimerStop( &RxTimeoutSyncWord );
 8042564:	4818      	ldr	r0, [pc, #96]	; (80425c8 <SX1276OnDio2Irq+0xb8>)
 8042566:	f00b fb73 	bl	804dc50 <TimerStop>
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 804256a:	2011      	movs	r0, #17
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 804256c:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8042570:	f7ff f8be 	bl	80416f0 <SX1276Read>
 8042574:	0840      	lsrs	r0, r0, #1
 8042576:	4240      	negs	r0, r0
 8042578:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 804257c:	201b      	movs	r0, #27
 804257e:	f7ff f8b7 	bl	80416f0 <SX1276Read>
 8042582:	4605      	mov	r5, r0
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 8042584:	201c      	movs	r0, #28
 8042586:	f7ff f8b3 	bl	80416f0 <SX1276Read>
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 804258a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 804258e:	b2c2      	uxtb	r2, r0
 8042590:	f643 5309 	movw	r3, #15625	; 0x3d09
 8042594:	435a      	muls	r2, r3
 8042596:	0a00      	lsrs	r0, r0, #8
 8042598:	3280      	adds	r2, #128	; 0x80
 804259a:	4343      	muls	r3, r0
 804259c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 80425a0:	200c      	movs	r0, #12
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 80425a2:	6363      	str	r3, [r4, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 80425a4:	f7ff f8a4 	bl	80416f0 <SX1276Read>
 80425a8:	0940      	lsrs	r0, r0, #5
 80425aa:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
 80425ae:	e7b6      	b.n	804251e <SX1276OnDio2Irq+0xe>
            switch( SX1276.Settings.Modem )
 80425b0:	7963      	ldrb	r3, [r4, #5]
 80425b2:	2b01      	cmp	r3, #1
 80425b4:	d1b3      	bne.n	804251e <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 80425b6:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 80425ba:	2b00      	cmp	r3, #0
 80425bc:	d0af      	beq.n	804251e <SX1276OnDio2Irq+0xe>
 80425be:	e7b8      	b.n	8042532 <SX1276OnDio2Irq+0x22>
 80425c0:	2000bce8 	.word	0x2000bce8
 80425c4:	2000a2bc 	.word	0x2000a2bc
 80425c8:	2000bcd0 	.word	0x2000bcd0

080425cc <SX1276OnDio3Irq>:
    switch( SX1276.Settings.Modem )
 80425cc:	4b12      	ldr	r3, [pc, #72]	; (8042618 <SX1276OnDio3Irq+0x4c>)
{
 80425ce:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 80425d0:	795d      	ldrb	r5, [r3, #5]
 80425d2:	2d01      	cmp	r5, #1
 80425d4:	d11e      	bne.n	8042614 <SX1276OnDio3Irq+0x48>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 80425d6:	2012      	movs	r0, #18
 80425d8:	f7ff f88a 	bl	80416f0 <SX1276Read>
 80425dc:	f010 0601 	ands.w	r6, r0, #1
 80425e0:	4c0e      	ldr	r4, [pc, #56]	; (804261c <SX1276OnDio3Irq+0x50>)
 80425e2:	d00c      	beq.n	80425fe <SX1276OnDio3Irq+0x32>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 80425e4:	2105      	movs	r1, #5
 80425e6:	2012      	movs	r0, #18
 80425e8:	f7ff f832 	bl	8041650 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80425ec:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 80425f0:	b183      	cbz	r3, 8042614 <SX1276OnDio3Irq+0x48>
 80425f2:	699b      	ldr	r3, [r3, #24]
 80425f4:	b173      	cbz	r3, 8042614 <SX1276OnDio3Irq+0x48>
                RadioEvents->CadDone( true );
 80425f6:	4628      	mov	r0, r5
}
 80425f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                RadioEvents->CadDone( false );
 80425fc:	4718      	bx	r3
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 80425fe:	2104      	movs	r1, #4
 8042600:	2012      	movs	r0, #18
 8042602:	f7ff f825 	bl	8041650 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8042606:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 804260a:	b11b      	cbz	r3, 8042614 <SX1276OnDio3Irq+0x48>
 804260c:	699b      	ldr	r3, [r3, #24]
 804260e:	b10b      	cbz	r3, 8042614 <SX1276OnDio3Irq+0x48>
                RadioEvents->CadDone( false );
 8042610:	4630      	mov	r0, r6
 8042612:	e7f1      	b.n	80425f8 <SX1276OnDio3Irq+0x2c>
}
 8042614:	bd70      	pop	{r4, r5, r6, pc}
 8042616:	bf00      	nop
 8042618:	2000bce8 	.word	0x2000bce8
 804261c:	2000a2bc 	.word	0x2000a2bc

08042620 <SX1276WriteFifo>:
    SX1276WriteBuffer( 0, buffer, size );
 8042620:	460a      	mov	r2, r1
 8042622:	4601      	mov	r1, r0
 8042624:	2000      	movs	r0, #0
 8042626:	f7fe bff3 	b.w	8041610 <SX1276WriteBuffer>
	...

0804262c <SX1276Send>:
{
 804262c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch( SX1276.Settings.Modem )
 804262e:	4c39      	ldr	r4, [pc, #228]	; (8042714 <SX1276Send+0xe8>)
{
 8042630:	f88d 1007 	strb.w	r1, [sp, #7]
    switch( SX1276.Settings.Modem )
 8042634:	7963      	ldrb	r3, [r4, #5]
{
 8042636:	4605      	mov	r5, r0
    switch( SX1276.Settings.Modem )
 8042638:	b11b      	cbz	r3, 8042642 <SX1276Send+0x16>
 804263a:	2b01      	cmp	r3, #1
 804263c:	d02f      	beq.n	804269e <SX1276Send+0x72>
    uint32_t txTimeout = 0;
 804263e:	2000      	movs	r0, #0
 8042640:	e01d      	b.n	804267e <SX1276Send+0x52>
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8042642:	87a3      	strh	r3, [r4, #60]	; 0x3c
            if( SX1276.Settings.Fsk.FixLen == false )
 8042644:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
            SX1276.Settings.FskPacketHandler.Size = size;
 8042648:	f89d 1007 	ldrb.w	r1, [sp, #7]
 804264c:	8761      	strh	r1, [r4, #58]	; 0x3a
            if( SX1276.Settings.Fsk.FixLen == false )
 804264e:	b9d3      	cbnz	r3, 8042686 <SX1276Send+0x5a>
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 8042650:	2101      	movs	r1, #1
 8042652:	f10d 0007 	add.w	r0, sp, #7
 8042656:	f7ff ffe3 	bl	8042620 <SX1276WriteFifo>
            if( ( size > 0 ) && ( size <= 64 ) )
 804265a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 804265e:	1e53      	subs	r3, r2, #1
 8042660:	2b3f      	cmp	r3, #63	; 0x3f
 8042662:	d814      	bhi.n	804268e <SX1276Send+0x62>
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8042664:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 8042668:	4628      	mov	r0, r5
 804266a:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
 804266e:	f7ff ffd7 	bl	8042620 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8042672:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8042674:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 8042678:	6aa0      	ldr	r0, [r4, #40]	; 0x28
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 804267a:	4413      	add	r3, r2
 804267c:	87a3      	strh	r3, [r4, #60]	; 0x3c
    SX1276SetTx( txTimeout );
 804267e:	f7ff fb21 	bl	8041cc4 <SX1276SetTx>
}
 8042682:	b003      	add	sp, #12
 8042684:	bd30      	pop	{r4, r5, pc}
                SX1276Write( REG_PAYLOADLENGTH, size );
 8042686:	2032      	movs	r0, #50	; 0x32
 8042688:	f7fe ffe2 	bl	8041650 <SX1276Write>
 804268c:	e7e5      	b.n	804265a <SX1276Send+0x2e>
                memcpy1( RxTxBuffer, buffer, size );
 804268e:	4629      	mov	r1, r5
 8042690:	4821      	ldr	r0, [pc, #132]	; (8042718 <SX1276Send+0xec>)
 8042692:	f00b fbcc 	bl	804de2e <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8042696:	2320      	movs	r3, #32
 8042698:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 804269c:	e7e4      	b.n	8042668 <SX1276Send+0x3c>
            if( SX1276.Settings.LoRa.IqInverted == true )
 804269e:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 80426a2:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 80426a4:	b35b      	cbz	r3, 80426fe <SX1276Send+0xd2>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 80426a6:	f7ff f823 	bl	80416f0 <SX1276Read>
 80426aa:	f000 01be 	and.w	r1, r0, #190	; 0xbe
 80426ae:	2033      	movs	r0, #51	; 0x33
 80426b0:	f7fe ffce 	bl	8041650 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 80426b4:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80426b6:	203b      	movs	r0, #59	; 0x3b
 80426b8:	f7fe ffca 	bl	8041650 <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 80426bc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80426c0:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 80426c4:	2022      	movs	r0, #34	; 0x22
 80426c6:	f7fe ffc3 	bl	8041650 <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 80426ca:	2100      	movs	r1, #0
 80426cc:	200e      	movs	r0, #14
 80426ce:	f7fe ffbf 	bl	8041650 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 80426d2:	2100      	movs	r1, #0
 80426d4:	200d      	movs	r0, #13
 80426d6:	f7fe ffbb 	bl	8041650 <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 80426da:	2001      	movs	r0, #1
 80426dc:	f7ff f808 	bl	80416f0 <SX1276Read>
 80426e0:	f030 03f8 	bics.w	r3, r0, #248	; 0xf8
 80426e4:	d104      	bne.n	80426f0 <SX1276Send+0xc4>
                SX1276SetStby( );
 80426e6:	f7ff f9d5 	bl	8041a94 <SX1276SetStby>
                DelayMs( 1 );
 80426ea:	2001      	movs	r0, #1
 80426ec:	f00c fdf2 	bl	804f2d4 <HAL_Delay>
            SX1276WriteFifo( buffer, size );
 80426f0:	4628      	mov	r0, r5
 80426f2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80426f6:	f7ff ff93 	bl	8042620 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 80426fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
        break;
 80426fc:	e7bf      	b.n	804267e <SX1276Send+0x52>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 80426fe:	f7fe fff7 	bl	80416f0 <SX1276Read>
 8042702:	f000 01be 	and.w	r1, r0, #190	; 0xbe
 8042706:	f041 0101 	orr.w	r1, r1, #1
 804270a:	2033      	movs	r0, #51	; 0x33
 804270c:	f7fe ffa0 	bl	8041650 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8042710:	211d      	movs	r1, #29
 8042712:	e7d0      	b.n	80426b6 <SX1276Send+0x8a>
 8042714:	2000bce8 	.word	0x2000bce8
 8042718:	2000a2c0 	.word	0x2000a2c0

0804271c <SX1276ReadFifo>:
    SX1276ReadBuffer( 0, buffer, size );
 804271c:	460a      	mov	r2, r1
 804271e:	4601      	mov	r1, r0
 8042720:	2000      	movs	r0, #0
 8042722:	f7fe bfc5 	b.w	80416b0 <SX1276ReadBuffer>
	...

08042728 <SX1276OnDio0Irq>:
{
 8042728:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 804272a:	4e89      	ldr	r6, [pc, #548]	; (8042950 <SX1276OnDio0Irq+0x228>)
    volatile uint8_t irqFlags = 0;
 804272c:	2300      	movs	r3, #0
 804272e:	f88d 3007 	strb.w	r3, [sp, #7]
    switch( SX1276.Settings.State )
 8042732:	7933      	ldrb	r3, [r6, #4]
 8042734:	2b01      	cmp	r3, #1
 8042736:	4634      	mov	r4, r6
 8042738:	d004      	beq.n	8042744 <SX1276OnDio0Irq+0x1c>
 804273a:	2b02      	cmp	r3, #2
 804273c:	f000 80f4 	beq.w	8042928 <SX1276OnDio0Irq+0x200>
}
 8042740:	b002      	add	sp, #8
 8042742:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 8042744:	7973      	ldrb	r3, [r6, #5]
 8042746:	b33b      	cbz	r3, 8042798 <SX1276OnDio0Irq+0x70>
 8042748:	2b01      	cmp	r3, #1
 804274a:	d1f9      	bne.n	8042740 <SX1276OnDio0Irq+0x18>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 804274c:	2140      	movs	r1, #64	; 0x40
 804274e:	2012      	movs	r0, #18
 8042750:	f7fe ff7e 	bl	8041650 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8042754:	2012      	movs	r0, #18
 8042756:	f7fe ffcb 	bl	80416f0 <SX1276Read>
 804275a:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 804275e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8042762:	4d7c      	ldr	r5, [pc, #496]	; (8042954 <SX1276OnDio0Irq+0x22c>)
 8042764:	f013 0f20 	tst.w	r3, #32
 8042768:	f000 808d 	beq.w	8042886 <SX1276OnDio0Irq+0x15e>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 804276c:	2120      	movs	r1, #32
 804276e:	2012      	movs	r0, #18
 8042770:	f7fe ff6e 	bl	8041650 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 8042774:	f896 3056 	ldrb.w	r3, [r6, #86]	; 0x56
 8042778:	b903      	cbnz	r3, 804277c <SX1276OnDio0Irq+0x54>
                            SX1276.Settings.State = RF_IDLE;
 804277a:	7133      	strb	r3, [r6, #4]
                        TimerStop( &RxTimeoutTimer );
 804277c:	4876      	ldr	r0, [pc, #472]	; (8042958 <SX1276OnDio0Irq+0x230>)
 804277e:	f00b fa67 	bl	804dc50 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8042782:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
 8042786:	2b00      	cmp	r3, #0
 8042788:	d0da      	beq.n	8042740 <SX1276OnDio0Irq+0x18>
 804278a:	691b      	ldr	r3, [r3, #16]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 804278c:	2b00      	cmp	r3, #0
 804278e:	d0d7      	beq.n	8042740 <SX1276OnDio0Irq+0x18>
}
 8042790:	b002      	add	sp, #8
 8042792:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    RadioEvents->TxDone( );
 8042796:	4718      	bx	r3
                if( SX1276.Settings.Fsk.CrcOn == true )
 8042798:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
 804279c:	4d6d      	ldr	r5, [pc, #436]	; (8042954 <SX1276OnDio0Irq+0x22c>)
 804279e:	b393      	cbz	r3, 8042806 <SX1276OnDio0Irq+0xde>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 80427a0:	203f      	movs	r0, #63	; 0x3f
 80427a2:	f7fe ffa5 	bl	80416f0 <SX1276Read>
 80427a6:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 80427aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80427ae:	079b      	lsls	r3, r3, #30
 80427b0:	d429      	bmi.n	8042806 <SX1276OnDio0Irq+0xde>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 80427b2:	210b      	movs	r1, #11
 80427b4:	203e      	movs	r0, #62	; 0x3e
 80427b6:	f7fe ff4b 	bl	8041650 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 80427ba:	2110      	movs	r1, #16
 80427bc:	203f      	movs	r0, #63	; 0x3f
 80427be:	f7fe ff47 	bl	8041650 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 80427c2:	4865      	ldr	r0, [pc, #404]	; (8042958 <SX1276OnDio0Irq+0x230>)
 80427c4:	f00b fa44 	bl	804dc50 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 80427c8:	f896 6026 	ldrb.w	r6, [r6, #38]	; 0x26
 80427cc:	b976      	cbnz	r6, 80427ec <SX1276OnDio0Irq+0xc4>
                            TimerStop( &RxTimeoutSyncWord );
 80427ce:	4863      	ldr	r0, [pc, #396]	; (804295c <SX1276OnDio0Irq+0x234>)
 80427d0:	f00b fa3e 	bl	804dc50 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 80427d4:	7126      	strb	r6, [r4, #4]
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 80427d6:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
 80427da:	b113      	cbz	r3, 80427e2 <SX1276OnDio0Irq+0xba>
 80427dc:	691b      	ldr	r3, [r3, #16]
 80427de:	b103      	cbz	r3, 80427e2 <SX1276OnDio0Irq+0xba>
                            RadioEvents->RxError( );
 80427e0:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80427e2:	2300      	movs	r3, #0
 80427e4:	8623      	strh	r3, [r4, #48]	; 0x30
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80427e6:	87a3      	strh	r3, [r4, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 80427e8:	8763      	strh	r3, [r4, #58]	; 0x3a
                        break;
 80427ea:	e7a9      	b.n	8042740 <SX1276OnDio0Irq+0x18>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80427ec:	200d      	movs	r0, #13
 80427ee:	f7fe ff7f 	bl	80416f0 <SX1276Read>
 80427f2:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 80427f6:	b2c9      	uxtb	r1, r1
 80427f8:	200d      	movs	r0, #13
 80427fa:	f7fe ff29 	bl	8041650 <SX1276Write>
                            TimerStart( &RxTimeoutSyncWord );
 80427fe:	4857      	ldr	r0, [pc, #348]	; (804295c <SX1276OnDio0Irq+0x234>)
 8042800:	f00b f9b4 	bl	804db6c <TimerStart>
 8042804:	e7e7      	b.n	80427d6 <SX1276OnDio0Irq+0xae>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8042806:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 8042808:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 804280a:	4e55      	ldr	r6, [pc, #340]	; (8042960 <SX1276OnDio0Irq+0x238>)
 804280c:	b951      	cbnz	r1, 8042824 <SX1276OnDio0Irq+0xfc>
 804280e:	b948      	cbnz	r0, 8042824 <SX1276OnDio0Irq+0xfc>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8042810:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8042814:	bb2b      	cbnz	r3, 8042862 <SX1276OnDio0Irq+0x13a>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8042816:	2101      	movs	r1, #1
 8042818:	4852      	ldr	r0, [pc, #328]	; (8042964 <SX1276OnDio0Irq+0x23c>)
 804281a:	f7ff ff7f 	bl	804271c <SX1276ReadFifo>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 804281e:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 8042820:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8042824:	1a09      	subs	r1, r1, r0
 8042826:	b2c9      	uxtb	r1, r1
 8042828:	4430      	add	r0, r6
 804282a:	f7ff ff77 	bl	804271c <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 804282e:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
                TimerStop( &RxTimeoutTimer );
 8042830:	4849      	ldr	r0, [pc, #292]	; (8042958 <SX1276OnDio0Irq+0x230>)
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8042832:	87a3      	strh	r3, [r4, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 8042834:	f00b fa0c 	bl	804dc50 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 8042838:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 804283c:	b9b3      	cbnz	r3, 804286c <SX1276OnDio0Irq+0x144>
                    TimerStop( &RxTimeoutSyncWord );
 804283e:	4847      	ldr	r0, [pc, #284]	; (804295c <SX1276OnDio0Irq+0x234>)
                    SX1276.Settings.State = RF_IDLE;
 8042840:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutSyncWord );
 8042842:	f00b fa05 	bl	804dc50 <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8042846:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
 804284a:	2b00      	cmp	r3, #0
 804284c:	d0c9      	beq.n	80427e2 <SX1276OnDio0Irq+0xba>
 804284e:	689d      	ldr	r5, [r3, #8]
 8042850:	2d00      	cmp	r5, #0
 8042852:	d0c6      	beq.n	80427e2 <SX1276OnDio0Irq+0xba>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 8042854:	2300      	movs	r3, #0
 8042856:	f994 2032 	ldrsb.w	r2, [r4, #50]	; 0x32
 804285a:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 804285c:	4840      	ldr	r0, [pc, #256]	; (8042960 <SX1276OnDio0Irq+0x238>)
 804285e:	47a8      	blx	r5
 8042860:	e7bf      	b.n	80427e2 <SX1276OnDio0Irq+0xba>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8042862:	2032      	movs	r0, #50	; 0x32
 8042864:	f7fe ff44 	bl	80416f0 <SX1276Read>
 8042868:	8760      	strh	r0, [r4, #58]	; 0x3a
 804286a:	e7d8      	b.n	804281e <SX1276OnDio0Irq+0xf6>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 804286c:	200d      	movs	r0, #13
 804286e:	f7fe ff3f 	bl	80416f0 <SX1276Read>
 8042872:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8042876:	b2c9      	uxtb	r1, r1
 8042878:	200d      	movs	r0, #13
 804287a:	f7fe fee9 	bl	8041650 <SX1276Write>
                    TimerStart( &RxTimeoutSyncWord );
 804287e:	4837      	ldr	r0, [pc, #220]	; (804295c <SX1276OnDio0Irq+0x234>)
 8042880:	f00b f974 	bl	804db6c <TimerStart>
 8042884:	e7df      	b.n	8042846 <SX1276OnDio0Irq+0x11e>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 8042886:	2019      	movs	r0, #25
 8042888:	f7fe ff32 	bl	80416f0 <SX1276Read>
 804288c:	b240      	sxtb	r0, r0
 804288e:	3002      	adds	r0, #2
 8042890:	1080      	asrs	r0, r0, #2
 8042892:	f886 0060 	strb.w	r0, [r6, #96]	; 0x60
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 8042896:	201a      	movs	r0, #26
 8042898:	f7fe ff2a 	bl	80416f0 <SX1276Read>
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 804289c:	f996 3060 	ldrsb.w	r3, [r6, #96]	; 0x60
 80428a0:	4931      	ldr	r1, [pc, #196]	; (8042968 <SX1276OnDio0Irq+0x240>)
 80428a2:	f340 120b 	sbfx	r2, r0, #4, #12
 80428a6:	2b00      	cmp	r3, #0
 80428a8:	b292      	uxth	r2, r2
 80428aa:	b280      	uxth	r0, r0
 80428ac:	da36      	bge.n	804291c <SX1276OnDio0Irq+0x1f4>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80428ae:	68b6      	ldr	r6, [r6, #8]
 80428b0:	b29b      	uxth	r3, r3
 80428b2:	428e      	cmp	r6, r1
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 80428b4:	bf8c      	ite	hi
 80428b6:	3b9d      	subhi	r3, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 80428b8:	3ba4      	subls	r3, #164	; 0xa4
 80428ba:	4418      	add	r0, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 80428bc:	4410      	add	r0, r2
 80428be:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 80428c2:	2013      	movs	r0, #19
 80428c4:	f7fe ff14 	bl	80416f0 <SX1276Read>
 80428c8:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 80428cc:	2010      	movs	r0, #16
 80428ce:	f7fe ff0f 	bl	80416f0 <SX1276Read>
 80428d2:	4601      	mov	r1, r0
 80428d4:	200d      	movs	r0, #13
 80428d6:	f7fe febb 	bl	8041650 <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 80428da:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
 80428de:	4820      	ldr	r0, [pc, #128]	; (8042960 <SX1276OnDio0Irq+0x238>)
 80428e0:	f7ff ff1c 	bl	804271c <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 80428e4:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
 80428e8:	b903      	cbnz	r3, 80428ec <SX1276OnDio0Irq+0x1c4>
                        SX1276.Settings.State = RF_IDLE;
 80428ea:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutTimer );
 80428ec:	481a      	ldr	r0, [pc, #104]	; (8042958 <SX1276OnDio0Irq+0x230>)
 80428ee:	f00b f9af 	bl	804dc50 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80428f2:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
 80428f6:	2b00      	cmp	r3, #0
 80428f8:	f43f af22 	beq.w	8042740 <SX1276OnDio0Irq+0x18>
 80428fc:	689d      	ldr	r5, [r3, #8]
 80428fe:	2d00      	cmp	r5, #0
 8042900:	f43f af1e 	beq.w	8042740 <SX1276OnDio0Irq+0x18>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 8042904:	f994 3060 	ldrsb.w	r3, [r4, #96]	; 0x60
 8042908:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	; 0x62
 804290c:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
 8042910:	4813      	ldr	r0, [pc, #76]	; (8042960 <SX1276OnDio0Irq+0x238>)
 8042912:	46ac      	mov	ip, r5
}
 8042914:	b002      	add	sp, #8
 8042916:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 804291a:	4760      	bx	ip
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 804291c:	68b3      	ldr	r3, [r6, #8]
 804291e:	428b      	cmp	r3, r1
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 8042920:	bf8c      	ite	hi
 8042922:	389d      	subhi	r0, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8042924:	38a4      	subls	r0, #164	; 0xa4
 8042926:	e7c9      	b.n	80428bc <SX1276OnDio0Irq+0x194>
            TimerStop( &TxTimeoutTimer );
 8042928:	4810      	ldr	r0, [pc, #64]	; (804296c <SX1276OnDio0Irq+0x244>)
 804292a:	f00b f991 	bl	804dc50 <TimerStop>
            switch( SX1276.Settings.Modem )
 804292e:	7973      	ldrb	r3, [r6, #5]
 8042930:	2b01      	cmp	r3, #1
 8042932:	d103      	bne.n	804293c <SX1276OnDio0Irq+0x214>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 8042934:	2108      	movs	r1, #8
 8042936:	2012      	movs	r0, #18
 8042938:	f7fe fe8a 	bl	8041650 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 804293c:	2300      	movs	r3, #0
 804293e:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8042940:	4b04      	ldr	r3, [pc, #16]	; (8042954 <SX1276OnDio0Irq+0x22c>)
 8042942:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8042946:	2b00      	cmp	r3, #0
 8042948:	f43f aefa 	beq.w	8042740 <SX1276OnDio0Irq+0x18>
 804294c:	681b      	ldr	r3, [r3, #0]
 804294e:	e71d      	b.n	804278c <SX1276OnDio0Irq+0x64>
 8042950:	2000bce8 	.word	0x2000bce8
 8042954:	2000a2bc 	.word	0x2000a2bc
 8042958:	2000bd50 	.word	0x2000bd50
 804295c:	2000bcd0 	.word	0x2000bcd0
 8042960:	2000a2c0 	.word	0x2000a2c0
 8042964:	2000bd22 	.word	0x2000bd22
 8042968:	1f4add40 	.word	0x1f4add40
 804296c:	2000bcb8 	.word	0x2000bcb8

08042970 <SX1276OnDio1Irq>:
{
 8042970:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8042972:	4c33      	ldr	r4, [pc, #204]	; (8042a40 <SX1276OnDio1Irq+0xd0>)
 8042974:	7926      	ldrb	r6, [r4, #4]
 8042976:	2e01      	cmp	r6, #1
 8042978:	4625      	mov	r5, r4
 804297a:	d002      	beq.n	8042982 <SX1276OnDio1Irq+0x12>
 804297c:	2e02      	cmp	r6, #2
 804297e:	d045      	beq.n	8042a0c <SX1276OnDio1Irq+0x9c>
}
 8042980:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 8042982:	7963      	ldrb	r3, [r4, #5]
 8042984:	b1ab      	cbz	r3, 80429b2 <SX1276OnDio1Irq+0x42>
 8042986:	2b01      	cmp	r3, #1
 8042988:	d1fa      	bne.n	8042980 <SX1276OnDio1Irq+0x10>
                TimerStop( &RxTimeoutTimer );
 804298a:	482e      	ldr	r0, [pc, #184]	; (8042a44 <SX1276OnDio1Irq+0xd4>)
 804298c:	f00b f960 	bl	804dc50 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8042990:	2180      	movs	r1, #128	; 0x80
 8042992:	2012      	movs	r0, #18
 8042994:	f7fe fe5c 	bl	8041650 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8042998:	2300      	movs	r3, #0
 804299a:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 804299c:	4b2a      	ldr	r3, [pc, #168]	; (8042a48 <SX1276OnDio1Irq+0xd8>)
 804299e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80429a2:	2b00      	cmp	r3, #0
 80429a4:	d0ec      	beq.n	8042980 <SX1276OnDio1Irq+0x10>
 80429a6:	68db      	ldr	r3, [r3, #12]
 80429a8:	2b00      	cmp	r3, #0
 80429aa:	d0e9      	beq.n	8042980 <SX1276OnDio1Irq+0x10>
}
 80429ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    RadioEvents->RxTimeout( );
 80429b0:	4718      	bx	r3
                TimerStop( &RxTimeoutSyncWord );
 80429b2:	4826      	ldr	r0, [pc, #152]	; (8042a4c <SX1276OnDio1Irq+0xdc>)
 80429b4:	f00b f94c 	bl	804dc50 <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 80429b8:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 80429ba:	b94b      	cbnz	r3, 80429d0 <SX1276OnDio1Irq+0x60>
 80429bc:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 80429be:	b93b      	cbnz	r3, 80429d0 <SX1276OnDio1Irq+0x60>
                    if( SX1276.Settings.Fsk.FixLen == false )
 80429c0:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80429c4:	b9c3      	cbnz	r3, 80429f8 <SX1276OnDio1Irq+0x88>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 80429c6:	4631      	mov	r1, r6
 80429c8:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 80429cc:	f7ff fea6 	bl	804271c <SX1276ReadFifo>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 80429d0:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
 80429d2:	8f69      	ldrh	r1, [r5, #58]	; 0x3a
 80429d4:	f895 303e 	ldrb.w	r3, [r5, #62]	; 0x3e
 80429d8:	481d      	ldr	r0, [pc, #116]	; (8042a50 <SX1276OnDio1Irq+0xe0>)
 80429da:	1a89      	subs	r1, r1, r2
 80429dc:	4299      	cmp	r1, r3
 80429de:	4410      	add	r0, r2
 80429e0:	db0f      	blt.n	8042a02 <SX1276OnDio1Irq+0x92>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 80429e2:	1e59      	subs	r1, r3, #1
 80429e4:	b2c9      	uxtb	r1, r1
 80429e6:	f7ff fe99 	bl	804271c <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 80429ea:	8fab      	ldrh	r3, [r5, #60]	; 0x3c
 80429ec:	1e5a      	subs	r2, r3, #1
 80429ee:	f895 303e 	ldrb.w	r3, [r5, #62]	; 0x3e
 80429f2:	4413      	add	r3, r2
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80429f4:	87ab      	strh	r3, [r5, #60]	; 0x3c
 80429f6:	e7c3      	b.n	8042980 <SX1276OnDio1Irq+0x10>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 80429f8:	2032      	movs	r0, #50	; 0x32
 80429fa:	f7fe fe79 	bl	80416f0 <SX1276Read>
 80429fe:	8760      	strh	r0, [r4, #58]	; 0x3a
 8042a00:	e7e6      	b.n	80429d0 <SX1276OnDio1Irq+0x60>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8042a02:	b2c9      	uxtb	r1, r1
 8042a04:	f7ff fe8a 	bl	804271c <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8042a08:	8f6b      	ldrh	r3, [r5, #58]	; 0x3a
 8042a0a:	e7f3      	b.n	80429f4 <SX1276OnDio1Irq+0x84>
            switch( SX1276.Settings.Modem )
 8042a0c:	7963      	ldrb	r3, [r4, #5]
 8042a0e:	2b00      	cmp	r3, #0
 8042a10:	d1b6      	bne.n	8042980 <SX1276OnDio1Irq+0x10>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 8042a12:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8042a14:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8042a16:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
 8042a1a:	480d      	ldr	r0, [pc, #52]	; (8042a50 <SX1276OnDio1Irq+0xe0>)
 8042a1c:	1a9b      	subs	r3, r3, r2
 8042a1e:	428b      	cmp	r3, r1
 8042a20:	4410      	add	r0, r2
 8042a22:	dd07      	ble.n	8042a34 <SX1276OnDio1Irq+0xc4>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 8042a24:	f7ff fdfc 	bl	8042620 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8042a28:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8042a2c:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8042a2e:	4413      	add	r3, r2
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8042a30:	87a3      	strh	r3, [r4, #60]	; 0x3c
}
 8042a32:	e7a5      	b.n	8042980 <SX1276OnDio1Irq+0x10>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8042a34:	b2d9      	uxtb	r1, r3
 8042a36:	f7ff fdf3 	bl	8042620 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8042a3a:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8042a3c:	e7f8      	b.n	8042a30 <SX1276OnDio1Irq+0xc0>
 8042a3e:	bf00      	nop
 8042a40:	2000bce8 	.word	0x2000bce8
 8042a44:	2000bd50 	.word	0x2000bd50
 8042a48:	2000a2bc 	.word	0x2000a2bc
 8042a4c:	2000bcd0 	.word	0x2000bcd0
 8042a50:	2000a2c0 	.word	0x2000a2c0

08042a54 <SX1276SetMaxPayloadLength>:
{
 8042a54:	b538      	push	{r3, r4, r5, lr}
 8042a56:	4605      	mov	r5, r0
 8042a58:	460c      	mov	r4, r1
    SX1276SetModem( modem );
 8042a5a:	f7ff f9a3 	bl	8041da4 <SX1276SetModem>
    switch( modem )
 8042a5e:	b115      	cbz	r5, 8042a66 <SX1276SetMaxPayloadLength+0x12>
 8042a60:	2d01      	cmp	r5, #1
 8042a62:	d00b      	beq.n	8042a7c <SX1276SetMaxPayloadLength+0x28>
}
 8042a64:	bd38      	pop	{r3, r4, r5, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
 8042a66:	4b07      	ldr	r3, [pc, #28]	; (8042a84 <SX1276SetMaxPayloadLength+0x30>)
 8042a68:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8042a6c:	2b00      	cmp	r3, #0
 8042a6e:	d1f9      	bne.n	8042a64 <SX1276SetMaxPayloadLength+0x10>
            SX1276Write( REG_PAYLOADLENGTH, max );
 8042a70:	4621      	mov	r1, r4
 8042a72:	2032      	movs	r0, #50	; 0x32
}
 8042a74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8042a78:	f7fe bdea 	b.w	8041650 <SX1276Write>
 8042a7c:	4621      	mov	r1, r4
 8042a7e:	2023      	movs	r0, #35	; 0x23
 8042a80:	e7f8      	b.n	8042a74 <SX1276SetMaxPayloadLength+0x20>
 8042a82:	bf00      	nop
 8042a84:	2000bce8 	.word	0x2000bce8

08042a88 <SX1276SetPublicNetwork>:
{
 8042a88:	b510      	push	{r4, lr}
 8042a8a:	4604      	mov	r4, r0
    SX1276SetModem( MODEM_LORA );
 8042a8c:	2001      	movs	r0, #1
 8042a8e:	f7ff f989 	bl	8041da4 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 8042a92:	4b06      	ldr	r3, [pc, #24]	; (8042aac <SX1276SetPublicNetwork+0x24>)
 8042a94:	f883 405c 	strb.w	r4, [r3, #92]	; 0x5c
    if( enable == true )
 8042a98:	b12c      	cbz	r4, 8042aa6 <SX1276SetPublicNetwork+0x1e>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 8042a9a:	2134      	movs	r1, #52	; 0x34
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 8042a9c:	2039      	movs	r0, #57	; 0x39
}
 8042a9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 8042aa2:	f7fe bdd5 	b.w	8041650 <SX1276Write>
 8042aa6:	2112      	movs	r1, #18
 8042aa8:	e7f8      	b.n	8042a9c <SX1276SetPublicNetwork+0x14>
 8042aaa:	bf00      	nop
 8042aac:	2000bce8 	.word	0x2000bce8

08042ab0 <SX1276OnTimeoutIrq>:
{
 8042ab0:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8042ab2:	4c2c      	ldr	r4, [pc, #176]	; (8042b64 <SX1276OnTimeoutIrq+0xb4>)
 8042ab4:	7923      	ldrb	r3, [r4, #4]
 8042ab6:	2b01      	cmp	r3, #1
 8042ab8:	4625      	mov	r5, r4
 8042aba:	d002      	beq.n	8042ac2 <SX1276OnTimeoutIrq+0x12>
 8042abc:	2b02      	cmp	r3, #2
 8042abe:	d02c      	beq.n	8042b1a <SX1276OnTimeoutIrq+0x6a>
}
 8042ac0:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
 8042ac2:	7963      	ldrb	r3, [r4, #5]
 8042ac4:	b9cb      	cbnz	r3, 8042afa <SX1276OnTimeoutIrq+0x4a>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8042ac6:	8623      	strh	r3, [r4, #48]	; 0x30
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8042ac8:	210b      	movs	r1, #11
 8042aca:	203e      	movs	r0, #62	; 0x3e
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8042acc:	87a3      	strh	r3, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8042ace:	8763      	strh	r3, [r4, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8042ad0:	f7fe fdbe 	bl	8041650 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8042ad4:	2110      	movs	r1, #16
 8042ad6:	203f      	movs	r0, #63	; 0x3f
 8042ad8:	f7fe fdba 	bl	8041650 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 8042adc:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8042ae0:	b1b3      	cbz	r3, 8042b10 <SX1276OnTimeoutIrq+0x60>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8042ae2:	200d      	movs	r0, #13
 8042ae4:	f7fe fe04 	bl	80416f0 <SX1276Read>
 8042ae8:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8042aec:	b2c9      	uxtb	r1, r1
 8042aee:	200d      	movs	r0, #13
 8042af0:	f7fe fdae 	bl	8041650 <SX1276Write>
                TimerStart( &RxTimeoutSyncWord );
 8042af4:	481c      	ldr	r0, [pc, #112]	; (8042b68 <SX1276OnTimeoutIrq+0xb8>)
 8042af6:	f00b f839 	bl	804db6c <TimerStart>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8042afa:	4b1c      	ldr	r3, [pc, #112]	; (8042b6c <SX1276OnTimeoutIrq+0xbc>)
 8042afc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8042b00:	2b00      	cmp	r3, #0
 8042b02:	d0dd      	beq.n	8042ac0 <SX1276OnTimeoutIrq+0x10>
 8042b04:	68db      	ldr	r3, [r3, #12]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8042b06:	2b00      	cmp	r3, #0
 8042b08:	d0da      	beq.n	8042ac0 <SX1276OnTimeoutIrq+0x10>
}
 8042b0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            RadioEvents->TxTimeout( );
 8042b0e:	4718      	bx	r3
                TimerStop( &RxTimeoutSyncWord );
 8042b10:	4815      	ldr	r0, [pc, #84]	; (8042b68 <SX1276OnTimeoutIrq+0xb8>)
                SX1276.Settings.State = RF_IDLE;
 8042b12:	7123      	strb	r3, [r4, #4]
                TimerStop( &RxTimeoutSyncWord );
 8042b14:	f00b f89c 	bl	804dc50 <TimerStop>
 8042b18:	e7ef      	b.n	8042afa <SX1276OnTimeoutIrq+0x4a>
        SX1276Reset( );
 8042b1a:	f7fe fd51 	bl	80415c0 <SX1276Reset>
 8042b1e:	4c14      	ldr	r4, [pc, #80]	; (8042b70 <SX1276OnTimeoutIrq+0xc0>)
        RxChainCalibration( );
 8042b20:	f7fe fdf2 	bl	8041708 <RxChainCalibration>
 8042b24:	f7fe ff5e 	bl	80419e4 <SX1276SetOpMode.part.2>
 8042b28:	f104 0630 	add.w	r6, r4, #48	; 0x30
            SX1276SetModem( RadioRegsInit[i].Modem );
 8042b2c:	7820      	ldrb	r0, [r4, #0]
 8042b2e:	f7ff f939 	bl	8041da4 <SX1276SetModem>
 8042b32:	3403      	adds	r4, #3
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8042b34:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8042b38:	f814 0c02 	ldrb.w	r0, [r4, #-2]
 8042b3c:	f7fe fd88 	bl	8041650 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8042b40:	42b4      	cmp	r4, r6
 8042b42:	d1f3      	bne.n	8042b2c <SX1276OnTimeoutIrq+0x7c>
        SX1276SetModem( MODEM_FSK );
 8042b44:	2000      	movs	r0, #0
 8042b46:	f7ff f92d 	bl	8041da4 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 8042b4a:	f895 005c 	ldrb.w	r0, [r5, #92]	; 0x5c
 8042b4e:	f7ff ff9b 	bl	8042a88 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 8042b52:	2300      	movs	r3, #0
 8042b54:	712b      	strb	r3, [r5, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8042b56:	4b05      	ldr	r3, [pc, #20]	; (8042b6c <SX1276OnTimeoutIrq+0xbc>)
 8042b58:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8042b5c:	2b00      	cmp	r3, #0
 8042b5e:	d0af      	beq.n	8042ac0 <SX1276OnTimeoutIrq+0x10>
 8042b60:	685b      	ldr	r3, [r3, #4]
 8042b62:	e7d0      	b.n	8042b06 <SX1276OnTimeoutIrq+0x56>
 8042b64:	2000bce8 	.word	0x2000bce8
 8042b68:	2000bcd0 	.word	0x2000bcd0
 8042b6c:	2000a2bc 	.word	0x2000a2bc
 8042b70:	080518f8 	.word	0x080518f8

08042b74 <SX1276GetWakeupTime>:
{
 8042b74:	b508      	push	{r3, lr}
    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 8042b76:	4b03      	ldr	r3, [pc, #12]	; (8042b84 <SX1276GetWakeupTime+0x10>)
 8042b78:	681b      	ldr	r3, [r3, #0]
 8042b7a:	685b      	ldr	r3, [r3, #4]
 8042b7c:	4798      	blx	r3
}
 8042b7e:	3002      	adds	r0, #2
 8042b80:	bd08      	pop	{r3, pc}
 8042b82:	bf00      	nop
 8042b84:	2000a2bc 	.word	0x2000a2bc

08042b88 <SX1276GetWakeTime>:
};

uint32_t SX1276GetWakeTime( void )
{
  return  BOARD_WAKEUP_TIME;
}
 8042b88:	2000      	movs	r0, #0
 8042b8a:	4770      	bx	lr

08042b8c <SX1276SetXO>:

void SX1276SetXO( uint8_t state )
{
}
 8042b8c:	4770      	bx	lr

08042b8e <SX1276CheckRfFrequency>:

bool SX1276CheckRfFrequency( uint32_t frequency )
{
    // Implement check. Currently all frequencies are supported
    return true;
}
 8042b8e:	2001      	movs	r0, #1
 8042b90:	4770      	bx	lr
	...

08042b94 <SX1276IoInit>:
{
 8042b94:	b510      	push	{r4, lr}
 8042b96:	b086      	sub	sp, #24
  GPIO_InitTypeDef initStruct={0};
 8042b98:	2214      	movs	r2, #20
 8042b9a:	2100      	movs	r1, #0
 8042b9c:	a801      	add	r0, sp, #4
 8042b9e:	f00d fad5 	bl	805014c <memset>
  SX1276BoardInit( &BoardCallbacks );
 8042ba2:	4811      	ldr	r0, [pc, #68]	; (8042be8 <SX1276IoInit+0x54>)
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8042ba4:	4c11      	ldr	r4, [pc, #68]	; (8042bec <SX1276IoInit+0x58>)
  SX1276BoardInit( &BoardCallbacks );
 8042ba6:	f7fe fcff 	bl	80415a8 <SX1276BoardInit>
  initStruct.Pull = GPIO_PULLDOWN;
 8042baa:	4a11      	ldr	r2, [pc, #68]	; (8042bf0 <SX1276IoInit+0x5c>)
 8042bac:	2302      	movs	r3, #2
 8042bae:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8042bb2:	4620      	mov	r0, r4
  initStruct.Speed = GPIO_SPEED_HIGH;
 8042bb4:	2303      	movs	r3, #3
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8042bb6:	aa01      	add	r2, sp, #4
 8042bb8:	f44f 7100 	mov.w	r1, #512	; 0x200
  initStruct.Speed = GPIO_SPEED_HIGH;
 8042bbc:	9304      	str	r3, [sp, #16]
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8042bbe:	f00b fbb3 	bl	804e328 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 8042bc2:	aa01      	add	r2, sp, #4
 8042bc4:	4620      	mov	r0, r4
 8042bc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8042bca:	f00b fbad 	bl	804e328 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 8042bce:	aa01      	add	r2, sp, #4
 8042bd0:	4620      	mov	r0, r4
 8042bd2:	2180      	movs	r1, #128	; 0x80
 8042bd4:	f00b fba8 	bl	804e328 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 8042bd8:	aa01      	add	r2, sp, #4
 8042bda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8042bde:	4620      	mov	r0, r4
 8042be0:	f00b fba2 	bl	804e328 <HW_GPIO_Init>
}
 8042be4:	b006      	add	sp, #24
 8042be6:	bd10      	pop	{r4, pc}
 8042be8:	200010b4 	.word	0x200010b4
 8042bec:	40021000 	.word	0x40021000
 8042bf0:	10110000 	.word	0x10110000

08042bf4 <SX1276IoDeInit>:
{
 8042bf4:	b510      	push	{r4, lr}
 8042bf6:	b086      	sub	sp, #24
  GPIO_InitTypeDef initStruct={0};
 8042bf8:	2214      	movs	r2, #20
 8042bfa:	2100      	movs	r1, #0
 8042bfc:	a801      	add	r0, sp, #4
 8042bfe:	f00d faa5 	bl	805014c <memset>
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8042c02:	4c0f      	ldr	r4, [pc, #60]	; (8042c40 <SX1276IoDeInit+0x4c>)
  initStruct.Pull = GPIO_PULLDOWN;
 8042c04:	4a0f      	ldr	r2, [pc, #60]	; (8042c44 <SX1276IoDeInit+0x50>)
 8042c06:	2302      	movs	r3, #2
 8042c08:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8042c0c:	4620      	mov	r0, r4
 8042c0e:	aa01      	add	r2, sp, #4
 8042c10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8042c14:	f00b fb88 	bl	804e328 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 8042c18:	aa01      	add	r2, sp, #4
 8042c1a:	4620      	mov	r0, r4
 8042c1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8042c20:	f00b fb82 	bl	804e328 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 8042c24:	aa01      	add	r2, sp, #4
 8042c26:	4620      	mov	r0, r4
 8042c28:	2180      	movs	r1, #128	; 0x80
 8042c2a:	f00b fb7d 	bl	804e328 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 8042c2e:	aa01      	add	r2, sp, #4
 8042c30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8042c34:	4620      	mov	r0, r4
 8042c36:	f00b fb77 	bl	804e328 <HW_GPIO_Init>
}
 8042c3a:	b006      	add	sp, #24
 8042c3c:	bd10      	pop	{r4, pc}
 8042c3e:	bf00      	nop
 8042c40:	40021000 	.word	0x40021000
 8042c44:	10110000 	.word	0x10110000

08042c48 <SX1276IoIrqInit>:
{
 8042c48:	b570      	push	{r4, r5, r6, lr}
  HW_GPIO_SetIrq( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 8042c4a:	4c0f      	ldr	r4, [pc, #60]	; (8042c88 <SX1276IoIrqInit+0x40>)
 8042c4c:	6803      	ldr	r3, [r0, #0]
{
 8042c4e:	4605      	mov	r5, r0
  HW_GPIO_SetIrq( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 8042c50:	2200      	movs	r2, #0
 8042c52:	4620      	mov	r0, r4
 8042c54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8042c58:	f00b fbc0 	bl	804e3dc <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, IRQ_HIGH_PRIORITY, irqHandlers[1] );
 8042c5c:	686b      	ldr	r3, [r5, #4]
 8042c5e:	4620      	mov	r0, r4
 8042c60:	2200      	movs	r2, #0
 8042c62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8042c66:	f00b fbb9 	bl	804e3dc <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, IRQ_HIGH_PRIORITY, irqHandlers[2] );
 8042c6a:	68ab      	ldr	r3, [r5, #8]
 8042c6c:	4620      	mov	r0, r4
 8042c6e:	2200      	movs	r2, #0
 8042c70:	2180      	movs	r1, #128	; 0x80
 8042c72:	f00b fbb3 	bl	804e3dc <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, IRQ_HIGH_PRIORITY, irqHandlers[3] );
 8042c76:	68eb      	ldr	r3, [r5, #12]
 8042c78:	4620      	mov	r0, r4
 8042c7a:	2200      	movs	r2, #0
 8042c7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
}
 8042c80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HW_GPIO_SetIrq( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, IRQ_HIGH_PRIORITY, irqHandlers[3] );
 8042c84:	f00b bbaa 	b.w	804e3dc <HW_GPIO_SetIrq>
 8042c88:	40021000 	.word	0x40021000

08042c8c <SX1276SetRfTxPower>:
{
 8042c8c:	b570      	push	{r4, r5, r6, lr}
 8042c8e:	4606      	mov	r6, r0
    paConfig = SX1276Read( REG_PACONFIG );
 8042c90:	2009      	movs	r0, #9
 8042c92:	f7fe fd2d 	bl	80416f0 <SX1276Read>
 8042c96:	4604      	mov	r4, r0
    paDac = SX1276Read( REG_PADAC );
 8042c98:	204d      	movs	r0, #77	; 0x4d
 8042c9a:	f7fe fd29 	bl	80416f0 <SX1276Read>
        if( power > 17 )
 8042c9e:	2e11      	cmp	r6, #17
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 8042ca0:	bfcb      	itete	gt
 8042ca2:	f040 0507 	orrgt.w	r5, r0, #7
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 8042ca6:	f000 05f8 	andle.w	r5, r0, #248	; 0xf8
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 8042caa:	b2ed      	uxtbgt	r5, r5
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 8042cac:	f045 0504 	orrle.w	r5, r5, #4
    paConfig |= RF_PACONFIG_PASELECT_PABOOST;
 8042cb0:	f064 047f 	orn	r4, r4, #127	; 0x7f
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 8042cb4:	f005 0307 	and.w	r3, r5, #7
    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8042cb8:	b264      	sxtb	r4, r4
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 8042cba:	2b07      	cmp	r3, #7
 8042cbc:	f024 040f 	bic.w	r4, r4, #15
 8042cc0:	d115      	bne.n	8042cee <SX1276SetRfTxPower+0x62>
            if( power < 5 )
 8042cc2:	2e04      	cmp	r6, #4
 8042cc4:	dd11      	ble.n	8042cea <SX1276SetRfTxPower+0x5e>
            if( power > 20 )
 8042cc6:	2e14      	cmp	r6, #20
 8042cc8:	dd03      	ble.n	8042cd2 <SX1276SetRfTxPower+0x46>
            	PRINTF("Full Power 20\r\n");
 8042cca:	480d      	ldr	r0, [pc, #52]	; (8042d00 <SX1276SetRfTxPower+0x74>)
 8042ccc:	f00b f84a 	bl	804dd64 <TraceSend>
                power = 20;
 8042cd0:	2614      	movs	r6, #20
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 8042cd2:	1f71      	subs	r1, r6, #5
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 8042cd4:	430c      	orrs	r4, r1
 8042cd6:	b2e1      	uxtb	r1, r4
    SX1276Write( REG_PACONFIG, paConfig );
 8042cd8:	2009      	movs	r0, #9
 8042cda:	f7fe fcb9 	bl	8041650 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 8042cde:	4629      	mov	r1, r5
 8042ce0:	204d      	movs	r0, #77	; 0x4d
}
 8042ce2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    SX1276Write( REG_PADAC, paDac );
 8042ce6:	f7fe bcb3 	b.w	8041650 <SX1276Write>
                power = 5;
 8042cea:	2605      	movs	r6, #5
 8042cec:	e7f1      	b.n	8042cd2 <SX1276SetRfTxPower+0x46>
 8042cee:	2e11      	cmp	r6, #17
 8042cf0:	bfa8      	it	ge
 8042cf2:	2611      	movge	r6, #17
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 8042cf4:	2e02      	cmp	r6, #2
 8042cf6:	bfb8      	it	lt
 8042cf8:	2602      	movlt	r6, #2
 8042cfa:	1eb1      	subs	r1, r6, #2
 8042cfc:	e7ea      	b.n	8042cd4 <SX1276SetRfTxPower+0x48>
 8042cfe:	bf00      	nop
 8042d00:	08051ebc 	.word	0x08051ebc

08042d04 <SX1276SetAntSwLowPower>:
{
 8042d04:	b510      	push	{r4, lr}
    if( RadioIsActive != status )
 8042d06:	4b14      	ldr	r3, [pc, #80]	; (8042d58 <SX1276SetAntSwLowPower+0x54>)
 8042d08:	781a      	ldrb	r2, [r3, #0]
 8042d0a:	4282      	cmp	r2, r0
{
 8042d0c:	b086      	sub	sp, #24
    if( RadioIsActive != status )
 8042d0e:	d017      	beq.n	8042d40 <SX1276SetAntSwLowPower+0x3c>
        RadioIsActive = status;
 8042d10:	7018      	strb	r0, [r3, #0]
  GPIO_InitTypeDef initStruct={0};
 8042d12:	2214      	movs	r2, #20
        if( status == false )
 8042d14:	b9b0      	cbnz	r0, 8042d44 <SX1276SetAntSwLowPower+0x40>
  GPIO_InitTypeDef initStruct={0};
 8042d16:	4601      	mov	r1, r0
 8042d18:	a801      	add	r0, sp, #4
 8042d1a:	f00d fa17 	bl	805014c <memset>
  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8042d1e:	2301      	movs	r3, #1
 8042d20:	9302      	str	r3, [sp, #8]
  PRINTF("Antenna Init\r\n");
 8042d22:	480e      	ldr	r0, [pc, #56]	; (8042d5c <SX1276SetAntSwLowPower+0x58>)
  initStruct.Speed = GPIO_SPEED_HIGH;
 8042d24:	2303      	movs	r3, #3
 8042d26:	9304      	str	r3, [sp, #16]
  PRINTF("Antenna Init\r\n");
 8042d28:	f00b f81c 	bl	804dd64 <TraceSend>
  HW_GPIO_Init(  RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, &initStruct ); 
 8042d2c:	aa01      	add	r2, sp, #4
 8042d2e:	2102      	movs	r1, #2
 8042d30:	480b      	ldr	r0, [pc, #44]	; (8042d60 <SX1276SetAntSwLowPower+0x5c>)
 8042d32:	f00b faf9 	bl	804e328 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, 0);
 8042d36:	2200      	movs	r2, #0
 8042d38:	2102      	movs	r1, #2
 8042d3a:	4809      	ldr	r0, [pc, #36]	; (8042d60 <SX1276SetAntSwLowPower+0x5c>)
 8042d3c:	f00b fb76 	bl	804e42c <HW_GPIO_Write>
}
 8042d40:	b006      	add	sp, #24
 8042d42:	bd10      	pop	{r4, pc}
  GPIO_InitTypeDef initStruct={0};
 8042d44:	2100      	movs	r1, #0
 8042d46:	a801      	add	r0, sp, #4
 8042d48:	f00d fa00 	bl	805014c <memset>
  initStruct.Mode = GPIO_MODE_OUTPUT_PP ;
 8042d4c:	2301      	movs	r3, #1
 8042d4e:	9302      	str	r3, [sp, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8042d50:	2303      	movs	r3, #3
 8042d52:	9304      	str	r3, [sp, #16]
 8042d54:	e7ea      	b.n	8042d2c <SX1276SetAntSwLowPower+0x28>
 8042d56:	bf00      	nop
 8042d58:	2000a3c4 	.word	0x2000a3c4
 8042d5c:	08051ecc 	.word	0x08051ecc
 8042d60:	40020800 	.word	0x40020800

08042d64 <SX1276SetAntSw>:
{
 8042d64:	b510      	push	{r4, lr}
	PRINTF("opMode = %d\r\n", opMode);
 8042d66:	4601      	mov	r1, r0
{
 8042d68:	4604      	mov	r4, r0
	PRINTF("opMode = %d\r\n", opMode);
 8042d6a:	4806      	ldr	r0, [pc, #24]	; (8042d84 <SX1276SetAntSw+0x20>)
 8042d6c:	f00a fffa 	bl	804dd64 <TraceSend>
    switch( opMode )
 8042d70:	2c03      	cmp	r4, #3
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, RADIO_ANT_SWITCH_SET_TX);
 8042d72:	bf0c      	ite	eq
 8042d74:	2201      	moveq	r2, #1
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, RADIO_ANT_SWITCH_SET_RX);
 8042d76:	2200      	movne	r2, #0
 8042d78:	2102      	movs	r1, #2
 8042d7a:	4803      	ldr	r0, [pc, #12]	; (8042d88 <SX1276SetAntSw+0x24>)
}
 8042d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, RADIO_ANT_SWITCH_SET_RX);
 8042d80:	f00b bb54 	b.w	804e42c <HW_GPIO_Write>
 8042d84:	08051edb 	.word	0x08051edb
 8042d88:	40020800 	.word	0x40020800

08042d8c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8042d8c:	490e      	ldr	r1, [pc, #56]	; (8042dc8 <SystemInit+0x3c>)
 8042d8e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8042d92:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8042d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8042d9a:	4b0c      	ldr	r3, [pc, #48]	; (8042dcc <SystemInit+0x40>)
 8042d9c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8042d9e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8042da0:	f042 0201 	orr.w	r2, r2, #1
 8042da4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8042da6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8042da8:	681a      	ldr	r2, [r3, #0]
 8042daa:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8042dae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8042db2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8042db4:	4a06      	ldr	r2, [pc, #24]	; (8042dd0 <SystemInit+0x44>)
 8042db6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8042db8:	681a      	ldr	r2, [r3, #0]
 8042dba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8042dbe:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8042dc0:	60d8      	str	r0, [r3, #12]
#if defined (DATA_IN_ExtSRAM) || defined (DATA_IN_ExtSDRAM)
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location  ------------------*/
  SCB->VTOR = INTVECT_START;
 8042dc2:	4b04      	ldr	r3, [pc, #16]	; (8042dd4 <SystemInit+0x48>)
 8042dc4:	608b      	str	r3, [r1, #8]
}
 8042dc6:	4770      	bx	lr
 8042dc8:	e000ed00 	.word	0xe000ed00
 8042dcc:	40023800 	.word	0x40023800
 8042dd0:	24003010 	.word	0x24003010
 8042dd4:	08040200 	.word	0x08040200

08042dd8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8042dd8:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8042dda:	4613      	mov	r3, r2
 8042ddc:	460a      	mov	r2, r1
 8042dde:	4601      	mov	r1, r0
 8042de0:	4803      	ldr	r0, [pc, #12]	; (8042df0 <BSP_SD_ReadBlocks_DMA+0x18>)
 8042de2:	f001 ff59 	bl	8044c98 <HAL_SD_ReadBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8042de6:	3000      	adds	r0, #0
 8042de8:	bf18      	it	ne
 8042dea:	2001      	movne	r0, #1
 8042dec:	bd08      	pop	{r3, pc}
 8042dee:	bf00      	nop
 8042df0:	2000e3fc 	.word	0x2000e3fc

08042df4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8042df4:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8042df6:	4613      	mov	r3, r2
 8042df8:	460a      	mov	r2, r1
 8042dfa:	4601      	mov	r1, r0
 8042dfc:	4803      	ldr	r0, [pc, #12]	; (8042e0c <BSP_SD_WriteBlocks_DMA+0x18>)
 8042dfe:	f001 ffe1 	bl	8044dc4 <HAL_SD_WriteBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8042e02:	3000      	adds	r0, #0
 8042e04:	bf18      	it	ne
 8042e06:	2001      	movne	r0, #1
 8042e08:	bd08      	pop	{r3, pc}
 8042e0a:	bf00      	nop
 8042e0c:	2000e3fc 	.word	0x2000e3fc

08042e10 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8042e10:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8042e12:	4803      	ldr	r0, [pc, #12]	; (8042e20 <BSP_SD_GetCardState+0x10>)
 8042e14:	f002 faec 	bl	80453f0 <HAL_SD_GetCardState>
}
 8042e18:	3804      	subs	r0, #4
 8042e1a:	bf18      	it	ne
 8042e1c:	2001      	movne	r0, #1
 8042e1e:	bd08      	pop	{r3, pc}
 8042e20:	2000e3fc 	.word	0x2000e3fc

08042e24 <BSP_SD_GetCardInfo>:
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8042e24:	4601      	mov	r1, r0
 8042e26:	4801      	ldr	r0, [pc, #4]	; (8042e2c <BSP_SD_GetCardInfo+0x8>)
 8042e28:	f002 ba4b 	b.w	80452c2 <HAL_SD_GetCardInfo>
 8042e2c:	2000e3fc 	.word	0x2000e3fc

08042e30 <BSP_SD_AbortCallback>:
 8042e30:	4770      	bx	lr

08042e32 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8042e32:	b508      	push	{r3, lr}
  BSP_SD_AbortCallback();
 8042e34:	f7ff fffc 	bl	8042e30 <BSP_SD_AbortCallback>
}
 8042e38:	bd08      	pop	{r3, pc}

08042e3a <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8042e3a:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 8042e3c:	f000 f90c 	bl	8043058 <BSP_SD_WriteCpltCallback>
}
 8042e40:	bd08      	pop	{r3, pc}

08042e42 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8042e42:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 8042e44:	f000 f90e 	bl	8043064 <BSP_SD_ReadCpltCallback>
}
 8042e48:	bd08      	pop	{r3, pc}

08042e4a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8042e4a:	b507      	push	{r0, r1, r2, lr}
  __IO uint8_t status = SD_PRESENT;
 8042e4c:	2301      	movs	r3, #1
 8042e4e:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8042e52:	f000 f82f 	bl	8042eb4 <BSP_PlatformIsDetected>
 8042e56:	b908      	cbnz	r0, 8042e5c <BSP_SD_IsDetected+0x12>
  {
    status = SD_NOT_PRESENT;
 8042e58:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 8042e5c:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8042e60:	b003      	add	sp, #12
 8042e62:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08042e68 <BSP_SD_Init>:
{
 8042e68:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8042e6a:	f7ff ffee 	bl	8042e4a <BSP_SD_IsDetected>
 8042e6e:	2801      	cmp	r0, #1
 8042e70:	d10c      	bne.n	8042e8c <BSP_SD_Init+0x24>
  sd_state = HAL_SD_Init(&hsd);
 8042e72:	4807      	ldr	r0, [pc, #28]	; (8042e90 <BSP_SD_Init+0x28>)
 8042e74:	f002 fa0a 	bl	804528c <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8042e78:	b938      	cbnz	r0, 8042e8a <BSP_SD_Init+0x22>
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8042e7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8042e7e:	4804      	ldr	r0, [pc, #16]	; (8042e90 <BSP_SD_Init+0x28>)
 8042e80:	f002 fa32 	bl	80452e8 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR;
 8042e84:	3000      	adds	r0, #0
 8042e86:	bf18      	it	ne
 8042e88:	2001      	movne	r0, #1
}
 8042e8a:	bd08      	pop	{r3, pc}
    return MSD_ERROR;
 8042e8c:	2001      	movs	r0, #1
 8042e8e:	e7fc      	b.n	8042e8a <BSP_SD_Init+0x22>
 8042e90:	2000e3fc 	.word	0x2000e3fc

08042e94 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8042e94:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8042e96:	4903      	ldr	r1, [pc, #12]	; (8042ea4 <MX_FATFS_Init+0x10>)
 8042e98:	4803      	ldr	r0, [pc, #12]	; (8042ea8 <MX_FATFS_Init+0x14>)
 8042e9a:	f004 fde9 	bl	8047a70 <FATFS_LinkDriver>
 8042e9e:	4b03      	ldr	r3, [pc, #12]	; (8042eac <MX_FATFS_Init+0x18>)
 8042ea0:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8042ea2:	bd08      	pop	{r3, pc}
 8042ea4:	2000bd69 	.word	0x2000bd69
 8042ea8:	080519b4 	.word	0x080519b4
 8042eac:	2000bd68 	.word	0x2000bd68

08042eb0 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 8042eb0:	2000      	movs	r0, #0
 8042eb2:	4770      	bx	lr

08042eb4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8042eb4:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8042eb6:	2180      	movs	r1, #128	; 0x80
 8042eb8:	4803      	ldr	r0, [pc, #12]	; (8042ec8 <BSP_PlatformIsDetected+0x14>)
 8042eba:	f001 f87f 	bl	8043fbc <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 8042ebe:	fab0 f080 	clz	r0, r0
 8042ec2:	0940      	lsrs	r0, r0, #5
 8042ec4:	bd08      	pop	{r3, pc}
 8042ec6:	bf00      	nop
 8042ec8:	40020800 	.word	0x40020800

08042ecc <SD_CheckStatus.isra.0>:
  }

  return -1;
}

static DSTATUS SD_CheckStatus(BYTE lun)
 8042ecc:	b510      	push	{r4, lr}
{
  Stat = STA_NOINIT;
 8042ece:	4c06      	ldr	r4, [pc, #24]	; (8042ee8 <SD_CheckStatus.isra.0+0x1c>)
 8042ed0:	2301      	movs	r3, #1
 8042ed2:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8042ed4:	f7ff ff9c 	bl	8042e10 <BSP_SD_GetCardState>
 8042ed8:	4623      	mov	r3, r4
 8042eda:	b918      	cbnz	r0, 8042ee4 <SD_CheckStatus.isra.0+0x18>
  {
    Stat &= ~STA_NOINIT;
 8042edc:	7822      	ldrb	r2, [r4, #0]
 8042ede:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8042ee2:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 8042ee4:	7818      	ldrb	r0, [r3, #0]
}
 8042ee6:	bd10      	pop	{r4, pc}
 8042ee8:	200010d0 	.word	0x200010d0

08042eec <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8042eec:	b510      	push	{r4, lr}

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8042eee:	f7ff ffbb 	bl	8042e68 <BSP_SD_Init>
 8042ef2:	4c03      	ldr	r4, [pc, #12]	; (8042f00 <SD_initialize+0x14>)
 8042ef4:	b910      	cbnz	r0, 8042efc <SD_initialize+0x10>
  {
    Stat = SD_CheckStatus(lun);
 8042ef6:	f7ff ffe9 	bl	8042ecc <SD_CheckStatus.isra.0>
 8042efa:	7020      	strb	r0, [r4, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8042efc:	7820      	ldrb	r0, [r4, #0]
}
 8042efe:	bd10      	pop	{r4, pc}
 8042f00:	200010d0 	.word	0x200010d0

08042f04 <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  return SD_CheckStatus(lun);
 8042f04:	f7ff bfe2 	b.w	8042ecc <SD_CheckStatus.isra.0>

08042f08 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8042f08:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8042f0a:	4b12      	ldr	r3, [pc, #72]	; (8042f54 <SD_ioctl+0x4c>)
 8042f0c:	781b      	ldrb	r3, [r3, #0]
 8042f0e:	07db      	lsls	r3, r3, #31
{
 8042f10:	b088      	sub	sp, #32
 8042f12:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8042f14:	d41b      	bmi.n	8042f4e <SD_ioctl+0x46>

  switch (cmd)
 8042f16:	2903      	cmp	r1, #3
 8042f18:	d803      	bhi.n	8042f22 <SD_ioctl+0x1a>
 8042f1a:	e8df f001 	tbb	[pc, r1]
 8042f1e:	0510      	.short	0x0510
 8042f20:	120b      	.short	0x120b
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
    res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 8042f22:	2004      	movs	r0, #4
  }

  return res;
}
 8042f24:	b008      	add	sp, #32
 8042f26:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8042f28:	4668      	mov	r0, sp
 8042f2a:	f7ff ff7b 	bl	8042e24 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8042f2e:	9b06      	ldr	r3, [sp, #24]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8042f30:	6023      	str	r3, [r4, #0]
 8042f32:	e004      	b.n	8042f3e <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 8042f34:	4668      	mov	r0, sp
 8042f36:	f7ff ff75 	bl	8042e24 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8042f3a:	9b07      	ldr	r3, [sp, #28]
 8042f3c:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 8042f3e:	2000      	movs	r0, #0
 8042f40:	e7f0      	b.n	8042f24 <SD_ioctl+0x1c>
    BSP_SD_GetCardInfo(&CardInfo);
 8042f42:	4668      	mov	r0, sp
 8042f44:	f7ff ff6e 	bl	8042e24 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8042f48:	9b07      	ldr	r3, [sp, #28]
 8042f4a:	0a5b      	lsrs	r3, r3, #9
 8042f4c:	e7f0      	b.n	8042f30 <SD_ioctl+0x28>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8042f4e:	2003      	movs	r0, #3
 8042f50:	e7e8      	b.n	8042f24 <SD_ioctl+0x1c>
 8042f52:	bf00      	nop
 8042f54:	200010d0 	.word	0x200010d0

08042f58 <SD_CheckStatusWithTimeout.constprop.4>:
static int SD_CheckStatusWithTimeout(uint32_t timeout)
 8042f58:	b538      	push	{r3, r4, r5, lr}
  uint32_t timer = HAL_GetTick();
 8042f5a:	f000 f8af 	bl	80430bc <HAL_GetTick>
  while(HAL_GetTick() - timer < timeout)
 8042f5e:	f247 542f 	movw	r4, #29999	; 0x752f
  uint32_t timer = HAL_GetTick();
 8042f62:	4605      	mov	r5, r0
  while(HAL_GetTick() - timer < timeout)
 8042f64:	f000 f8aa 	bl	80430bc <HAL_GetTick>
 8042f68:	1b40      	subs	r0, r0, r5
 8042f6a:	42a0      	cmp	r0, r4
 8042f6c:	d902      	bls.n	8042f74 <SD_CheckStatusWithTimeout.constprop.4+0x1c>
  return -1;
 8042f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8042f72:	e003      	b.n	8042f7c <SD_CheckStatusWithTimeout.constprop.4+0x24>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8042f74:	f7ff ff4c 	bl	8042e10 <BSP_SD_GetCardState>
 8042f78:	2800      	cmp	r0, #0
 8042f7a:	d1f3      	bne.n	8042f64 <SD_CheckStatusWithTimeout.constprop.4+0xc>
}
 8042f7c:	bd38      	pop	{r3, r4, r5, pc}
	...

08042f80 <SD_write>:
{
 8042f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   WriteStatus = 0;
 8042f82:	4c19      	ldr	r4, [pc, #100]	; (8042fe8 <SD_write+0x68>)
{
 8042f84:	461f      	mov	r7, r3
   WriteStatus = 0;
 8042f86:	2300      	movs	r3, #0
{
 8042f88:	460d      	mov	r5, r1
 8042f8a:	4616      	mov	r6, r2
   WriteStatus = 0;
 8042f8c:	6023      	str	r3, [r4, #0]
  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8042f8e:	f7ff ffe3 	bl	8042f58 <SD_CheckStatusWithTimeout.constprop.4>
 8042f92:	2800      	cmp	r0, #0
 8042f94:	da01      	bge.n	8042f9a <SD_write+0x1a>
    return res;
 8042f96:	2001      	movs	r0, #1
}
 8042f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8042f9a:	463a      	mov	r2, r7
 8042f9c:	4631      	mov	r1, r6
 8042f9e:	4628      	mov	r0, r5
 8042fa0:	f7ff ff28 	bl	8042df4 <BSP_SD_WriteBlocks_DMA>
 8042fa4:	2800      	cmp	r0, #0
 8042fa6:	d1f6      	bne.n	8042f96 <SD_write+0x16>
      timeout = HAL_GetTick();
 8042fa8:	f000 f888 	bl	80430bc <HAL_GetTick>
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8042fac:	f247 552f 	movw	r5, #29999	; 0x752f
      timeout = HAL_GetTick();
 8042fb0:	4606      	mov	r6, r0
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8042fb2:	6823      	ldr	r3, [r4, #0]
 8042fb4:	b923      	cbnz	r3, 8042fc0 <SD_write+0x40>
 8042fb6:	f000 f881 	bl	80430bc <HAL_GetTick>
 8042fba:	1b80      	subs	r0, r0, r6
 8042fbc:	42a8      	cmp	r0, r5
 8042fbe:	d9f8      	bls.n	8042fb2 <SD_write+0x32>
      if (WriteStatus == 0)
 8042fc0:	6823      	ldr	r3, [r4, #0]
 8042fc2:	2b00      	cmp	r3, #0
 8042fc4:	d0e7      	beq.n	8042f96 <SD_write+0x16>
        WriteStatus = 0;
 8042fc6:	2300      	movs	r3, #0
 8042fc8:	6023      	str	r3, [r4, #0]
        timeout = HAL_GetTick();
 8042fca:	f000 f877 	bl	80430bc <HAL_GetTick>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8042fce:	f247 542f 	movw	r4, #29999	; 0x752f
        timeout = HAL_GetTick();
 8042fd2:	4605      	mov	r5, r0
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8042fd4:	f000 f872 	bl	80430bc <HAL_GetTick>
 8042fd8:	1b40      	subs	r0, r0, r5
 8042fda:	42a0      	cmp	r0, r4
 8042fdc:	d8db      	bhi.n	8042f96 <SD_write+0x16>
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8042fde:	f7ff ff17 	bl	8042e10 <BSP_SD_GetCardState>
 8042fe2:	2800      	cmp	r0, #0
 8042fe4:	d1f6      	bne.n	8042fd4 <SD_write+0x54>
 8042fe6:	e7d7      	b.n	8042f98 <SD_write+0x18>
 8042fe8:	2000a3c8 	.word	0x2000a3c8

08042fec <SD_read>:
{
 8042fec:	b570      	push	{r4, r5, r6, lr}
 8042fee:	460c      	mov	r4, r1
 8042ff0:	4615      	mov	r5, r2
 8042ff2:	461e      	mov	r6, r3
  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8042ff4:	f7ff ffb0 	bl	8042f58 <SD_CheckStatusWithTimeout.constprop.4>
 8042ff8:	2800      	cmp	r0, #0
 8042ffa:	da01      	bge.n	8043000 <SD_read+0x14>
    return res;
 8042ffc:	2001      	movs	r0, #1
}
 8042ffe:	bd70      	pop	{r4, r5, r6, pc}
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8043000:	4632      	mov	r2, r6
 8043002:	4629      	mov	r1, r5
 8043004:	4620      	mov	r0, r4
 8043006:	f7ff fee7 	bl	8042dd8 <BSP_SD_ReadBlocks_DMA>
 804300a:	2800      	cmp	r0, #0
 804300c:	d1f6      	bne.n	8042ffc <SD_read+0x10>
      ReadStatus = 0;
 804300e:	4c11      	ldr	r4, [pc, #68]	; (8043054 <SD_read+0x68>)
 8043010:	6060      	str	r0, [r4, #4]
      timeout = HAL_GetTick();
 8043012:	f000 f853 	bl	80430bc <HAL_GetTick>
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8043016:	f247 552f 	movw	r5, #29999	; 0x752f
      timeout = HAL_GetTick();
 804301a:	4606      	mov	r6, r0
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 804301c:	6863      	ldr	r3, [r4, #4]
 804301e:	b923      	cbnz	r3, 804302a <SD_read+0x3e>
 8043020:	f000 f84c 	bl	80430bc <HAL_GetTick>
 8043024:	1b80      	subs	r0, r0, r6
 8043026:	42a8      	cmp	r0, r5
 8043028:	d9f8      	bls.n	804301c <SD_read+0x30>
      if (ReadStatus == 0)
 804302a:	6863      	ldr	r3, [r4, #4]
 804302c:	2b00      	cmp	r3, #0
 804302e:	d0e5      	beq.n	8042ffc <SD_read+0x10>
        ReadStatus = 0;
 8043030:	2300      	movs	r3, #0
 8043032:	6063      	str	r3, [r4, #4]
        timeout = HAL_GetTick();
 8043034:	f000 f842 	bl	80430bc <HAL_GetTick>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8043038:	f247 542f 	movw	r4, #29999	; 0x752f
        timeout = HAL_GetTick();
 804303c:	4605      	mov	r5, r0
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 804303e:	f000 f83d 	bl	80430bc <HAL_GetTick>
 8043042:	1b40      	subs	r0, r0, r5
 8043044:	42a0      	cmp	r0, r4
 8043046:	d8d9      	bhi.n	8042ffc <SD_read+0x10>
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8043048:	f7ff fee2 	bl	8042e10 <BSP_SD_GetCardState>
 804304c:	2800      	cmp	r0, #0
 804304e:	d1f6      	bne.n	804303e <SD_read+0x52>
 8043050:	e7d5      	b.n	8042ffe <SD_read+0x12>
 8043052:	bf00      	nop
 8043054:	2000a3c8 	.word	0x2000a3c8

08043058 <BSP_SD_WriteCpltCallback>:
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{

  WriteStatus = 1;
 8043058:	4b01      	ldr	r3, [pc, #4]	; (8043060 <BSP_SD_WriteCpltCallback+0x8>)
 804305a:	2201      	movs	r2, #1
 804305c:	601a      	str	r2, [r3, #0]
}
 804305e:	4770      	bx	lr
 8043060:	2000a3c8 	.word	0x2000a3c8

08043064 <BSP_SD_ReadCpltCallback>:
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
  ReadStatus = 1;
 8043064:	4b01      	ldr	r3, [pc, #4]	; (804306c <BSP_SD_ReadCpltCallback+0x8>)
 8043066:	2201      	movs	r2, #1
 8043068:	605a      	str	r2, [r3, #4]
}
 804306a:	4770      	bx	lr
 804306c:	2000a3c8 	.word	0x2000a3c8

08043070 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8043070:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8043072:	4b0b      	ldr	r3, [pc, #44]	; (80430a0 <HAL_Init+0x30>)
 8043074:	681a      	ldr	r2, [r3, #0]
 8043076:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 804307a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 804307c:	681a      	ldr	r2, [r3, #0]
 804307e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8043082:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8043084:	681a      	ldr	r2, [r3, #0]
 8043086:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 804308a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 804308c:	2003      	movs	r0, #3
 804308e:	f000 fa1b 	bl	80434c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8043092:	2000      	movs	r0, #0
 8043094:	f00c f91c 	bl	804f2d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8043098:	f00c f922 	bl	804f2e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 804309c:	2000      	movs	r0, #0
 804309e:	bd08      	pop	{r3, pc}
 80430a0:	40023c00 	.word	0x40023c00

080430a4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80430a4:	4a03      	ldr	r2, [pc, #12]	; (80430b4 <HAL_IncTick+0x10>)
 80430a6:	4b04      	ldr	r3, [pc, #16]	; (80430b8 <HAL_IncTick+0x14>)
 80430a8:	6811      	ldr	r1, [r2, #0]
 80430aa:	781b      	ldrb	r3, [r3, #0]
 80430ac:	440b      	add	r3, r1
 80430ae:	6013      	str	r3, [r2, #0]
}
 80430b0:	4770      	bx	lr
 80430b2:	bf00      	nop
 80430b4:	2000ddd8 	.word	0x2000ddd8
 80430b8:	200010d4 	.word	0x200010d4

080430bc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80430bc:	4b01      	ldr	r3, [pc, #4]	; (80430c4 <HAL_GetTick+0x8>)
 80430be:	6818      	ldr	r0, [r3, #0]
}
 80430c0:	4770      	bx	lr
 80430c2:	bf00      	nop
 80430c4:	2000ddd8 	.word	0x2000ddd8

080430c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80430c8:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80430ca:	4604      	mov	r4, r0
 80430cc:	2800      	cmp	r0, #0
 80430ce:	f000 809b 	beq.w	8043208 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80430d2:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80430d4:	b925      	cbnz	r5, 80430e0 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80430d6:	f00c f85d 	bl	804f194 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80430da:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80430dc:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80430e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80430e2:	06db      	lsls	r3, r3, #27
 80430e4:	f100 808e 	bmi.w	8043204 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80430e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80430ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80430ee:	f023 0302 	bic.w	r3, r3, #2
 80430f2:	f043 0302 	orr.w	r3, r3, #2
 80430f6:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80430f8:	4b44      	ldr	r3, [pc, #272]	; (804320c <HAL_ADC_Init+0x144>)
 80430fa:	685a      	ldr	r2, [r3, #4]
 80430fc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8043100:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8043102:	685a      	ldr	r2, [r3, #4]
 8043104:	6861      	ldr	r1, [r4, #4]
 8043106:	430a      	orrs	r2, r1
 8043108:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 804310a:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 804310c:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 804310e:	685a      	ldr	r2, [r3, #4]
 8043110:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8043114:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8043116:	685a      	ldr	r2, [r3, #4]
 8043118:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 804311c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 804311e:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8043120:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8043122:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8043126:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8043128:	685a      	ldr	r2, [r3, #4]
 804312a:	430a      	orrs	r2, r1
 804312c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 804312e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8043130:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8043132:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8043136:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8043138:	689a      	ldr	r2, [r3, #8]
 804313a:	430a      	orrs	r2, r1
 804313c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 804313e:	4934      	ldr	r1, [pc, #208]	; (8043210 <HAL_ADC_Init+0x148>)
 8043140:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8043142:	428a      	cmp	r2, r1
 8043144:	d052      	beq.n	80431ec <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8043146:	6899      	ldr	r1, [r3, #8]
 8043148:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 804314c:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 804314e:	6899      	ldr	r1, [r3, #8]
 8043150:	430a      	orrs	r2, r1
 8043152:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8043154:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8043156:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8043158:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 804315c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 804315e:	689a      	ldr	r2, [r3, #8]
 8043160:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8043162:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8043164:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8043166:	7e21      	ldrb	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8043168:	f022 0202 	bic.w	r2, r2, #2
 804316c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 804316e:	689a      	ldr	r2, [r3, #8]
 8043170:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8043174:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8043176:	f894 2020 	ldrb.w	r2, [r4, #32]
 804317a:	2a00      	cmp	r2, #0
 804317c:	d03e      	beq.n	80431fc <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 804317e:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8043180:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8043182:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8043186:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8043188:	685a      	ldr	r2, [r3, #4]
 804318a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 804318e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8043190:	685a      	ldr	r2, [r3, #4]
 8043192:	3901      	subs	r1, #1
 8043194:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8043198:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 804319a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 804319c:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 804319e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80431a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80431a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80431a6:	3901      	subs	r1, #1
 80431a8:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80431ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80431ae:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80431b0:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80431b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80431b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80431ba:	689a      	ldr	r2, [r3, #8]
 80431bc:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 80431c0:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80431c2:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80431c4:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80431c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80431ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80431cc:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80431ce:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80431d0:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80431d4:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80431d6:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80431d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80431da:	f023 0303 	bic.w	r3, r3, #3
 80431de:	f043 0301 	orr.w	r3, r3, #1
 80431e2:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80431e4:	2300      	movs	r3, #0
 80431e6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80431ea:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80431ec:	689a      	ldr	r2, [r3, #8]
 80431ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80431f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80431f4:	689a      	ldr	r2, [r3, #8]
 80431f6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80431fa:	e7b2      	b.n	8043162 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80431fc:	685a      	ldr	r2, [r3, #4]
 80431fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8043202:	e7c9      	b.n	8043198 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 8043204:	2001      	movs	r0, #1
 8043206:	e7ed      	b.n	80431e4 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8043208:	2001      	movs	r0, #1
 804320a:	e7ee      	b.n	80431ea <HAL_ADC_Init+0x122>
 804320c:	40012300 	.word	0x40012300
 8043210:	0f000001 	.word	0x0f000001

08043214 <HAL_ADC_Start>:
{
 8043214:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8043216:	2300      	movs	r3, #0
 8043218:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 804321a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 804321e:	2b01      	cmp	r3, #1
 8043220:	d061      	beq.n	80432e6 <HAL_ADC_Start+0xd2>
 8043222:	2301      	movs	r3, #1
 8043224:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8043228:	6803      	ldr	r3, [r0, #0]
 804322a:	689a      	ldr	r2, [r3, #8]
 804322c:	07d1      	lsls	r1, r2, #31
 804322e:	d505      	bpl.n	804323c <HAL_ADC_Start+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8043230:	689a      	ldr	r2, [r3, #8]
 8043232:	07d2      	lsls	r2, r2, #31
 8043234:	d414      	bmi.n	8043260 <HAL_ADC_Start+0x4c>
  return HAL_OK;
 8043236:	2000      	movs	r0, #0
}
 8043238:	b002      	add	sp, #8
 804323a:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 804323c:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 804323e:	492b      	ldr	r1, [pc, #172]	; (80432ec <HAL_ADC_Start+0xd8>)
    __HAL_ADC_ENABLE(hadc);
 8043240:	f042 0201 	orr.w	r2, r2, #1
 8043244:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8043246:	4a2a      	ldr	r2, [pc, #168]	; (80432f0 <HAL_ADC_Start+0xdc>)
 8043248:	6812      	ldr	r2, [r2, #0]
 804324a:	fbb2 f2f1 	udiv	r2, r2, r1
 804324e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 8043252:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 8043254:	9a01      	ldr	r2, [sp, #4]
 8043256:	2a00      	cmp	r2, #0
 8043258:	d0ea      	beq.n	8043230 <HAL_ADC_Start+0x1c>
      counter--;
 804325a:	9a01      	ldr	r2, [sp, #4]
 804325c:	3a01      	subs	r2, #1
 804325e:	e7f8      	b.n	8043252 <HAL_ADC_Start+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 8043260:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8043262:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8043266:	f022 0201 	bic.w	r2, r2, #1
 804326a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 804326e:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8043270:	685a      	ldr	r2, [r3, #4]
 8043272:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8043274:	bf41      	itttt	mi
 8043276:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 8043278:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 804327c:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8043280:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8043282:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8043284:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8043288:	bf1c      	itt	ne
 804328a:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 804328c:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8043290:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8043292:	2200      	movs	r2, #0
 8043294:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8043298:	f06f 0222 	mvn.w	r2, #34	; 0x22
 804329c:	601a      	str	r2, [r3, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 804329e:	4a15      	ldr	r2, [pc, #84]	; (80432f4 <HAL_ADC_Start+0xe0>)
 80432a0:	6851      	ldr	r1, [r2, #4]
 80432a2:	f011 0f1f 	tst.w	r1, #31
 80432a6:	4914      	ldr	r1, [pc, #80]	; (80432f8 <HAL_ADC_Start+0xe4>)
 80432a8:	d11a      	bne.n	80432e0 <HAL_ADC_Start+0xcc>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80432aa:	428b      	cmp	r3, r1
 80432ac:	d006      	beq.n	80432bc <HAL_ADC_Start+0xa8>
 80432ae:	f501 7180 	add.w	r1, r1, #256	; 0x100
 80432b2:	428b      	cmp	r3, r1
 80432b4:	d10b      	bne.n	80432ce <HAL_ADC_Start+0xba>
 80432b6:	6852      	ldr	r2, [r2, #4]
 80432b8:	06d2      	lsls	r2, r2, #27
 80432ba:	d1bc      	bne.n	8043236 <HAL_ADC_Start+0x22>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80432bc:	6898      	ldr	r0, [r3, #8]
 80432be:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80432c2:	d1b8      	bne.n	8043236 <HAL_ADC_Start+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80432c4:	689a      	ldr	r2, [r3, #8]
 80432c6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80432ca:	609a      	str	r2, [r3, #8]
 80432cc:	e7b4      	b.n	8043238 <HAL_ADC_Start+0x24>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80432ce:	490b      	ldr	r1, [pc, #44]	; (80432fc <HAL_ADC_Start+0xe8>)
 80432d0:	428b      	cmp	r3, r1
 80432d2:	d1b0      	bne.n	8043236 <HAL_ADC_Start+0x22>
 80432d4:	6852      	ldr	r2, [r2, #4]
 80432d6:	f002 021f 	and.w	r2, r2, #31
 80432da:	2a0f      	cmp	r2, #15
 80432dc:	d9ee      	bls.n	80432bc <HAL_ADC_Start+0xa8>
 80432de:	e7aa      	b.n	8043236 <HAL_ADC_Start+0x22>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80432e0:	428b      	cmp	r3, r1
 80432e2:	d1a8      	bne.n	8043236 <HAL_ADC_Start+0x22>
 80432e4:	e7ea      	b.n	80432bc <HAL_ADC_Start+0xa8>
  __HAL_LOCK(hadc);
 80432e6:	2002      	movs	r0, #2
 80432e8:	e7a6      	b.n	8043238 <HAL_ADC_Start+0x24>
 80432ea:	bf00      	nop
 80432ec:	000f4240 	.word	0x000f4240
 80432f0:	200010cc 	.word	0x200010cc
 80432f4:	40012300 	.word	0x40012300
 80432f8:	40012000 	.word	0x40012000
 80432fc:	40012200 	.word	0x40012200

08043300 <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8043300:	6803      	ldr	r3, [r0, #0]
 8043302:	689a      	ldr	r2, [r3, #8]
{
 8043304:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8043306:	0556      	lsls	r6, r2, #21
{
 8043308:	4604      	mov	r4, r0
 804330a:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 804330c:	d50b      	bpl.n	8043326 <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 804330e:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8043310:	05d8      	lsls	r0, r3, #23
 8043312:	d508      	bpl.n	8043326 <HAL_ADC_PollForConversion+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8043314:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8043316:	f043 0320 	orr.w	r3, r3, #32
 804331a:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 804331c:	2300      	movs	r3, #0
 804331e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8043322:	2001      	movs	r0, #1
}
 8043324:	bd70      	pop	{r4, r5, r6, pc}
  tickstart = HAL_GetTick();
 8043326:	f7ff fec9 	bl	80430bc <HAL_GetTick>
 804332a:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 804332c:	6823      	ldr	r3, [r4, #0]
 804332e:	681a      	ldr	r2, [r3, #0]
 8043330:	0792      	lsls	r2, r2, #30
 8043332:	d50c      	bpl.n	804334e <HAL_ADC_PollForConversion+0x4e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8043334:	f06f 0212 	mvn.w	r2, #18
 8043338:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 804333a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 804333c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8043340:	6422      	str	r2, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8043342:	689a      	ldr	r2, [r3, #8]
 8043344:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8043348:	d013      	beq.n	8043372 <HAL_ADC_PollForConversion+0x72>
  return HAL_OK;
 804334a:	2000      	movs	r0, #0
 804334c:	e7ea      	b.n	8043324 <HAL_ADC_PollForConversion+0x24>
    if(Timeout != HAL_MAX_DELAY)
 804334e:	1c69      	adds	r1, r5, #1
 8043350:	d0ed      	beq.n	804332e <HAL_ADC_PollForConversion+0x2e>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8043352:	b945      	cbnz	r5, 8043366 <HAL_ADC_PollForConversion+0x66>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8043354:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8043356:	f043 0304 	orr.w	r3, r3, #4
 804335a:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 804335c:	2300      	movs	r3, #0
 804335e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 8043362:	2003      	movs	r0, #3
 8043364:	e7de      	b.n	8043324 <HAL_ADC_PollForConversion+0x24>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8043366:	f7ff fea9 	bl	80430bc <HAL_GetTick>
 804336a:	1b80      	subs	r0, r0, r6
 804336c:	42a8      	cmp	r0, r5
 804336e:	d9dd      	bls.n	804332c <HAL_ADC_PollForConversion+0x2c>
 8043370:	e7f0      	b.n	8043354 <HAL_ADC_PollForConversion+0x54>
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8043372:	7e22      	ldrb	r2, [r4, #24]
 8043374:	2a00      	cmp	r2, #0
 8043376:	d1e8      	bne.n	804334a <HAL_ADC_PollForConversion+0x4a>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8043378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 804337a:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 804337e:	d002      	beq.n	8043386 <HAL_ADC_PollForConversion+0x86>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8043380:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8043382:	055b      	lsls	r3, r3, #21
 8043384:	d4e1      	bmi.n	804334a <HAL_ADC_PollForConversion+0x4a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8043386:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8043388:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 804338c:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 804338e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8043390:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8043394:	d1d9      	bne.n	804334a <HAL_ADC_PollForConversion+0x4a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8043396:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8043398:	f043 0301 	orr.w	r3, r3, #1
 804339c:	6423      	str	r3, [r4, #64]	; 0x40
 804339e:	e7c1      	b.n	8043324 <HAL_ADC_PollForConversion+0x24>

080433a0 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80433a0:	6803      	ldr	r3, [r0, #0]
 80433a2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 80433a4:	4770      	bx	lr
	...

080433a8 <HAL_ADC_ConfigChannel>:
{
 80433a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 80433aa:	2300      	movs	r3, #0
 80433ac:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80433ae:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80433b2:	2b01      	cmp	r3, #1
 80433b4:	d07e      	beq.n	80434b4 <HAL_ADC_ConfigChannel+0x10c>
  if (sConfig->Channel > ADC_CHANNEL_9)
 80433b6:	680d      	ldr	r5, [r1, #0]
 80433b8:	688e      	ldr	r6, [r1, #8]
  __HAL_LOCK(hadc);
 80433ba:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 80433bc:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 80433be:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80433c2:	b2ac      	uxth	r4, r5
 80433c4:	6803      	ldr	r3, [r0, #0]
  if (sConfig->Channel > ADC_CHANNEL_9)
 80433c6:	d929      	bls.n	804341c <HAL_ADC_ConfigChannel+0x74>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80433c8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80433cc:	68df      	ldr	r7, [r3, #12]
 80433ce:	3a1e      	subs	r2, #30
 80433d0:	f04f 0c07 	mov.w	ip, #7
 80433d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80433d8:	ea27 070c 	bic.w	r7, r7, ip
 80433dc:	60df      	str	r7, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80433de:	68df      	ldr	r7, [r3, #12]
 80433e0:	fa06 f202 	lsl.w	r2, r6, r2
 80433e4:	433a      	orrs	r2, r7
 80433e6:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 80433e8:	6849      	ldr	r1, [r1, #4]
 80433ea:	2906      	cmp	r1, #6
 80433ec:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80433f0:	d824      	bhi.n	804343c <HAL_ADC_ConfigChannel+0x94>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80433f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80433f4:	3a05      	subs	r2, #5
 80433f6:	261f      	movs	r6, #31
 80433f8:	4096      	lsls	r6, r2
 80433fa:	ea21 0106 	bic.w	r1, r1, r6
 80433fe:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8043400:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8043402:	fa04 f202 	lsl.w	r2, r4, r2
 8043406:	430a      	orrs	r2, r1
 8043408:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 804340a:	4a2b      	ldr	r2, [pc, #172]	; (80434b8 <HAL_ADC_ConfigChannel+0x110>)
 804340c:	4293      	cmp	r3, r2
 804340e:	d031      	beq.n	8043474 <HAL_ADC_ConfigChannel+0xcc>
  __HAL_UNLOCK(hadc);
 8043410:	2300      	movs	r3, #0
 8043412:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8043416:	4618      	mov	r0, r3
}
 8043418:	b003      	add	sp, #12
 804341a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 804341c:	691f      	ldr	r7, [r3, #16]
 804341e:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8043422:	f04f 0c07 	mov.w	ip, #7
 8043426:	fa0c fc02 	lsl.w	ip, ip, r2
 804342a:	ea27 070c 	bic.w	r7, r7, ip
 804342e:	611f      	str	r7, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8043430:	691f      	ldr	r7, [r3, #16]
 8043432:	fa06 f202 	lsl.w	r2, r6, r2
 8043436:	433a      	orrs	r2, r7
 8043438:	611a      	str	r2, [r3, #16]
 804343a:	e7d5      	b.n	80433e8 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 804343c:	290c      	cmp	r1, #12
 804343e:	f04f 011f 	mov.w	r1, #31
 8043442:	d80b      	bhi.n	804345c <HAL_ADC_ConfigChannel+0xb4>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8043444:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8043446:	3a23      	subs	r2, #35	; 0x23
 8043448:	4091      	lsls	r1, r2
 804344a:	ea26 0101 	bic.w	r1, r6, r1
 804344e:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8043450:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8043452:	fa04 f202 	lsl.w	r2, r4, r2
 8043456:	430a      	orrs	r2, r1
 8043458:	631a      	str	r2, [r3, #48]	; 0x30
 804345a:	e7d6      	b.n	804340a <HAL_ADC_ConfigChannel+0x62>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 804345c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 804345e:	3a41      	subs	r2, #65	; 0x41
 8043460:	4091      	lsls	r1, r2
 8043462:	ea26 0101 	bic.w	r1, r6, r1
 8043466:	62d9      	str	r1, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8043468:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 804346a:	fa04 f202 	lsl.w	r2, r4, r2
 804346e:	430a      	orrs	r2, r1
 8043470:	62da      	str	r2, [r3, #44]	; 0x2c
 8043472:	e7ca      	b.n	804340a <HAL_ADC_ConfigChannel+0x62>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8043474:	2d12      	cmp	r5, #18
 8043476:	d104      	bne.n	8043482 <HAL_ADC_ConfigChannel+0xda>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8043478:	4a10      	ldr	r2, [pc, #64]	; (80434bc <HAL_ADC_ConfigChannel+0x114>)
 804347a:	6853      	ldr	r3, [r2, #4]
 804347c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8043480:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8043482:	f1a5 0310 	sub.w	r3, r5, #16
 8043486:	2b01      	cmp	r3, #1
 8043488:	d8c2      	bhi.n	8043410 <HAL_ADC_ConfigChannel+0x68>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 804348a:	4a0c      	ldr	r2, [pc, #48]	; (80434bc <HAL_ADC_ConfigChannel+0x114>)
 804348c:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 804348e:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8043490:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8043494:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8043496:	d1bb      	bne.n	8043410 <HAL_ADC_ConfigChannel+0x68>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8043498:	4b09      	ldr	r3, [pc, #36]	; (80434c0 <HAL_ADC_ConfigChannel+0x118>)
 804349a:	4a0a      	ldr	r2, [pc, #40]	; (80434c4 <HAL_ADC_ConfigChannel+0x11c>)
 804349c:	681b      	ldr	r3, [r3, #0]
 804349e:	fbb3 f2f2 	udiv	r2, r3, r2
 80434a2:	230a      	movs	r3, #10
 80434a4:	4353      	muls	r3, r2
        counter--;
 80434a6:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80434a8:	9b01      	ldr	r3, [sp, #4]
 80434aa:	2b00      	cmp	r3, #0
 80434ac:	d0b0      	beq.n	8043410 <HAL_ADC_ConfigChannel+0x68>
        counter--;
 80434ae:	9b01      	ldr	r3, [sp, #4]
 80434b0:	3b01      	subs	r3, #1
 80434b2:	e7f8      	b.n	80434a6 <HAL_ADC_ConfigChannel+0xfe>
  __HAL_LOCK(hadc);
 80434b4:	2002      	movs	r0, #2
 80434b6:	e7af      	b.n	8043418 <HAL_ADC_ConfigChannel+0x70>
 80434b8:	40012000 	.word	0x40012000
 80434bc:	40012300 	.word	0x40012300
 80434c0:	200010cc 	.word	0x200010cc
 80434c4:	000f4240 	.word	0x000f4240

080434c8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80434c8:	4a07      	ldr	r2, [pc, #28]	; (80434e8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80434ca:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80434cc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80434d0:	041b      	lsls	r3, r3, #16
 80434d2:	0c1b      	lsrs	r3, r3, #16
 80434d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80434d8:	0200      	lsls	r0, r0, #8
 80434da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80434de:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80434e2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80434e4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80434e6:	4770      	bx	lr
 80434e8:	e000ed00 	.word	0xe000ed00

080434ec <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80434ec:	4b17      	ldr	r3, [pc, #92]	; (804354c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80434ee:	b570      	push	{r4, r5, r6, lr}
 80434f0:	68dc      	ldr	r4, [r3, #12]
 80434f2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80434f6:	f1c4 0507 	rsb	r5, r4, #7
 80434fa:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80434fc:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8043500:	bf28      	it	cs
 8043502:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8043504:	f04f 36ff 	mov.w	r6, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8043508:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 804350a:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 804350e:	bf8c      	ite	hi
 8043510:	3c03      	subhi	r4, #3
 8043512:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8043514:	ea21 0303 	bic.w	r3, r1, r3
 8043518:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 804351a:	fa06 f404 	lsl.w	r4, r6, r4
 804351e:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8043522:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8043524:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8043528:	bfa8      	it	ge
 804352a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 804352e:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8043532:	bfbc      	itt	lt
 8043534:	f000 000f 	andlt.w	r0, r0, #15
 8043538:	4a05      	ldrlt	r2, [pc, #20]	; (8043550 <HAL_NVIC_SetPriority+0x64>)
 804353a:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 804353c:	bfaa      	itet	ge
 804353e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8043542:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8043544:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8043548:	bd70      	pop	{r4, r5, r6, pc}
 804354a:	bf00      	nop
 804354c:	e000ed00 	.word	0xe000ed00
 8043550:	e000ed14 	.word	0xe000ed14

08043554 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8043554:	2800      	cmp	r0, #0
 8043556:	db08      	blt.n	804356a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8043558:	0942      	lsrs	r2, r0, #5
 804355a:	2301      	movs	r3, #1
 804355c:	f000 001f 	and.w	r0, r0, #31
 8043560:	fa03 f000 	lsl.w	r0, r3, r0
 8043564:	4b01      	ldr	r3, [pc, #4]	; (804356c <HAL_NVIC_EnableIRQ+0x18>)
 8043566:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 804356a:	4770      	bx	lr
 804356c:	e000e100 	.word	0xe000e100

08043570 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8043570:	2800      	cmp	r0, #0
 8043572:	db0d      	blt.n	8043590 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8043574:	0943      	lsrs	r3, r0, #5
 8043576:	2201      	movs	r2, #1
 8043578:	f000 001f 	and.w	r0, r0, #31
 804357c:	fa02 f000 	lsl.w	r0, r2, r0
 8043580:	3320      	adds	r3, #32
 8043582:	4a04      	ldr	r2, [pc, #16]	; (8043594 <HAL_NVIC_DisableIRQ+0x24>)
 8043584:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8043588:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 804358c:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8043590:	4770      	bx	lr
 8043592:	bf00      	nop
 8043594:	e000e100 	.word	0xe000e100

08043598 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8043598:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 804359c:	4905      	ldr	r1, [pc, #20]	; (80435b4 <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 804359e:	4b06      	ldr	r3, [pc, #24]	; (80435b8 <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80435a0:	68ca      	ldr	r2, [r1, #12]
 80435a2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80435a6:	4313      	orrs	r3, r2
 80435a8:	60cb      	str	r3, [r1, #12]
 80435aa:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80435ae:	bf00      	nop
 80435b0:	e7fd      	b.n	80435ae <HAL_NVIC_SystemReset+0x16>
 80435b2:	bf00      	nop
 80435b4:	e000ed00 	.word	0xe000ed00
 80435b8:	05fa0004 	.word	0x05fa0004

080435bc <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80435bc:	2800      	cmp	r0, #0
 80435be:	db09      	blt.n	80435d4 <HAL_NVIC_ClearPendingIRQ+0x18>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80435c0:	0943      	lsrs	r3, r0, #5
 80435c2:	2201      	movs	r2, #1
 80435c4:	f000 001f 	and.w	r0, r0, #31
 80435c8:	fa02 f000 	lsl.w	r0, r2, r0
 80435cc:	3360      	adds	r3, #96	; 0x60
 80435ce:	4a02      	ldr	r2, [pc, #8]	; (80435d8 <HAL_NVIC_ClearPendingIRQ+0x1c>)
 80435d0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 80435d4:	4770      	bx	lr
 80435d6:	bf00      	nop
 80435d8:	e000e100 	.word	0xe000e100

080435dc <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80435dc:	6803      	ldr	r3, [r0, #0]
 80435de:	b2da      	uxtb	r2, r3
 80435e0:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80435e4:	f023 0303 	bic.w	r3, r3, #3
 80435e8:	2118      	movs	r1, #24
 80435ea:	3a10      	subs	r2, #16
 80435ec:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80435f0:	4904      	ldr	r1, [pc, #16]	; (8043604 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 80435f2:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80435f4:	bf88      	it	hi
 80435f6:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80435f8:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80435fa:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80435fc:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 80435fe:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8043600:	4770      	bx	lr
 8043602:	bf00      	nop
 8043604:	080519c8 	.word	0x080519c8

08043608 <HAL_DMA_Init>:
{
 8043608:	b570      	push	{r4, r5, r6, lr}
 804360a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 804360c:	f7ff fd56 	bl	80430bc <HAL_GetTick>
 8043610:	4605      	mov	r5, r0
  if(hdma == NULL)
 8043612:	2c00      	cmp	r4, #0
 8043614:	d071      	beq.n	80436fa <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8043616:	2300      	movs	r3, #0
 8043618:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 804361c:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 804361e:	2302      	movs	r3, #2
 8043620:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8043624:	6813      	ldr	r3, [r2, #0]
 8043626:	f023 0301 	bic.w	r3, r3, #1
 804362a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 804362c:	6821      	ldr	r1, [r4, #0]
 804362e:	680b      	ldr	r3, [r1, #0]
 8043630:	07d8      	lsls	r0, r3, #31
 8043632:	d43c      	bmi.n	80436ae <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8043634:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8043636:	4d32      	ldr	r5, [pc, #200]	; (8043700 <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8043638:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 804363a:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 804363c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8043640:	4313      	orrs	r3, r2
 8043642:	68e2      	ldr	r2, [r4, #12]
 8043644:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8043646:	6922      	ldr	r2, [r4, #16]
 8043648:	4313      	orrs	r3, r2
 804364a:	6962      	ldr	r2, [r4, #20]
 804364c:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 804364e:	69e2      	ldr	r2, [r4, #28]
 8043650:	4303      	orrs	r3, r0
 8043652:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8043654:	6a22      	ldr	r2, [r4, #32]
 8043656:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8043658:	6a62      	ldr	r2, [r4, #36]	; 0x24
 804365a:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 804365c:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8043660:	bf02      	ittt	eq
 8043662:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8043666:	4335      	orreq	r5, r6
 8043668:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 804366a:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 804366c:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 804366e:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8043670:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8043674:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8043678:	d10b      	bne.n	8043692 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 804367a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 804367c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 804367e:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8043680:	b13d      	cbz	r5, 8043692 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8043682:	b9f8      	cbnz	r0, 80436c4 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8043684:	2a01      	cmp	r2, #1
 8043686:	d02d      	beq.n	80436e4 <HAL_DMA_Init+0xdc>
 8043688:	d301      	bcc.n	804368e <HAL_DMA_Init+0x86>
 804368a:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 804368c:	d101      	bne.n	8043692 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 804368e:	01ea      	lsls	r2, r5, #7
 8043690:	d42b      	bmi.n	80436ea <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8043692:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8043694:	4620      	mov	r0, r4
 8043696:	f7ff ffa1 	bl	80435dc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 804369a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 804369c:	233f      	movs	r3, #63	; 0x3f
 804369e:	4093      	lsls	r3, r2
 80436a0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80436a2:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80436a4:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80436a6:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80436a8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80436ac:	e009      	b.n	80436c2 <HAL_DMA_Init+0xba>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80436ae:	f7ff fd05 	bl	80430bc <HAL_GetTick>
 80436b2:	1b40      	subs	r0, r0, r5
 80436b4:	2805      	cmp	r0, #5
 80436b6:	d9b9      	bls.n	804362c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80436b8:	2320      	movs	r3, #32
 80436ba:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80436bc:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 80436be:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80436c2:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80436c4:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80436c8:	d113      	bne.n	80436f2 <HAL_DMA_Init+0xea>
    switch (tmp)
 80436ca:	2a03      	cmp	r2, #3
 80436cc:	d8e1      	bhi.n	8043692 <HAL_DMA_Init+0x8a>
 80436ce:	a001      	add	r0, pc, #4	; (adr r0, 80436d4 <HAL_DMA_Init+0xcc>)
 80436d0:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80436d4:	080436eb 	.word	0x080436eb
 80436d8:	0804368f 	.word	0x0804368f
 80436dc:	080436eb 	.word	0x080436eb
 80436e0:	080436e5 	.word	0x080436e5
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80436e4:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80436e8:	d1d3      	bne.n	8043692 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80436ea:	2340      	movs	r3, #64	; 0x40
 80436ec:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80436ee:	2001      	movs	r0, #1
 80436f0:	e7e5      	b.n	80436be <HAL_DMA_Init+0xb6>
    switch (tmp)
 80436f2:	2a02      	cmp	r2, #2
 80436f4:	d9f9      	bls.n	80436ea <HAL_DMA_Init+0xe2>
 80436f6:	2a03      	cmp	r2, #3
 80436f8:	e7c8      	b.n	804368c <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 80436fa:	2001      	movs	r0, #1
 80436fc:	e7e1      	b.n	80436c2 <HAL_DMA_Init+0xba>
 80436fe:	bf00      	nop
 8043700:	f010803f 	.word	0xf010803f

08043704 <HAL_DMA_DeInit>:
{
 8043704:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 8043706:	4605      	mov	r5, r0
 8043708:	b320      	cbz	r0, 8043754 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 804370a:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 804370e:	b2e4      	uxtb	r4, r4
 8043710:	2c02      	cmp	r4, #2
 8043712:	d01d      	beq.n	8043750 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 8043714:	6803      	ldr	r3, [r0, #0]
 8043716:	681a      	ldr	r2, [r3, #0]
 8043718:	f022 0201 	bic.w	r2, r2, #1
  hdma->Instance->CR   = 0U;
 804371c:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 804371e:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = 0x00000021U;
 8043720:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 8043722:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8043724:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8043726:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8043728:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 804372a:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 804372c:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 804372e:	f7ff ff55 	bl	80435dc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8043732:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8043734:	233f      	movs	r3, #63	; 0x3f
 8043736:	4093      	lsls	r3, r2
  hdma->XferHalfCpltCallback = NULL;
 8043738:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 804373c:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;
 8043740:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8043744:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8043746:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8043748:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 804374c:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
    return HAL_BUSY;
 8043750:	4620      	mov	r0, r4
 8043752:	e000      	b.n	8043756 <HAL_DMA_DeInit+0x52>
    return HAL_ERROR;
 8043754:	2001      	movs	r0, #1
}
 8043756:	bd38      	pop	{r3, r4, r5, pc}

08043758 <HAL_DMA_Start_IT>:
{
 8043758:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 804375a:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 804375e:	2c01      	cmp	r4, #1
 8043760:	d032      	beq.n	80437c8 <HAL_DMA_Start_IT+0x70>
 8043762:	2401      	movs	r4, #1
 8043764:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8043768:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 804376c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 804376e:	2c01      	cmp	r4, #1
 8043770:	f04f 0500 	mov.w	r5, #0
 8043774:	f04f 0402 	mov.w	r4, #2
 8043778:	d124      	bne.n	80437c4 <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 804377a:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 804377e:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8043780:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8043782:	6825      	ldr	r5, [r4, #0]
 8043784:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8043788:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 804378a:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 804378c:	6883      	ldr	r3, [r0, #8]
 804378e:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8043790:	bf0e      	itee	eq
 8043792:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8043794:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8043796:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8043798:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 804379a:	bf08      	it	eq
 804379c:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 804379e:	233f      	movs	r3, #63	; 0x3f
 80437a0:	4093      	lsls	r3, r2
 80437a2:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80437a4:	6823      	ldr	r3, [r4, #0]
 80437a6:	f043 0316 	orr.w	r3, r3, #22
 80437aa:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80437ac:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80437ae:	b11b      	cbz	r3, 80437b8 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 80437b0:	6823      	ldr	r3, [r4, #0]
 80437b2:	f043 0308 	orr.w	r3, r3, #8
 80437b6:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80437b8:	6823      	ldr	r3, [r4, #0]
 80437ba:	f043 0301 	orr.w	r3, r3, #1
 80437be:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80437c0:	2000      	movs	r0, #0
}
 80437c2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 80437c4:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 80437c8:	2002      	movs	r0, #2
 80437ca:	e7fa      	b.n	80437c2 <HAL_DMA_Start_IT+0x6a>

080437cc <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80437cc:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80437d0:	2b02      	cmp	r3, #2
 80437d2:	d003      	beq.n	80437dc <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80437d4:	2380      	movs	r3, #128	; 0x80
 80437d6:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80437d8:	2001      	movs	r0, #1
 80437da:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80437dc:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80437de:	2305      	movs	r3, #5
 80437e0:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80437e4:	6813      	ldr	r3, [r2, #0]
 80437e6:	f023 0301 	bic.w	r3, r3, #1
 80437ea:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80437ec:	2000      	movs	r0, #0
}
 80437ee:	4770      	bx	lr

080437f0 <HAL_DMA_IRQHandler>:
{
 80437f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 80437f2:	2300      	movs	r3, #0
 80437f4:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80437f6:	4b5c      	ldr	r3, [pc, #368]	; (8043968 <HAL_DMA_IRQHandler+0x178>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80437f8:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80437fa:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80437fc:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80437fe:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8043800:	2208      	movs	r2, #8
 8043802:	409a      	lsls	r2, r3
 8043804:	4232      	tst	r2, r6
{
 8043806:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8043808:	d00c      	beq.n	8043824 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 804380a:	6801      	ldr	r1, [r0, #0]
 804380c:	6808      	ldr	r0, [r1, #0]
 804380e:	0740      	lsls	r0, r0, #29
 8043810:	d508      	bpl.n	8043824 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8043812:	6808      	ldr	r0, [r1, #0]
 8043814:	f020 0004 	bic.w	r0, r0, #4
 8043818:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 804381a:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 804381c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 804381e:	f042 0201 	orr.w	r2, r2, #1
 8043822:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8043824:	2201      	movs	r2, #1
 8043826:	409a      	lsls	r2, r3
 8043828:	4232      	tst	r2, r6
 804382a:	d008      	beq.n	804383e <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 804382c:	6821      	ldr	r1, [r4, #0]
 804382e:	6949      	ldr	r1, [r1, #20]
 8043830:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8043832:	bf41      	itttt	mi
 8043834:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8043836:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8043838:	f042 0202 	orrmi.w	r2, r2, #2
 804383c:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 804383e:	2204      	movs	r2, #4
 8043840:	409a      	lsls	r2, r3
 8043842:	4232      	tst	r2, r6
 8043844:	d008      	beq.n	8043858 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8043846:	6821      	ldr	r1, [r4, #0]
 8043848:	6809      	ldr	r1, [r1, #0]
 804384a:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 804384c:	bf41      	itttt	mi
 804384e:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8043850:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8043852:	f042 0204 	orrmi.w	r2, r2, #4
 8043856:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8043858:	2210      	movs	r2, #16
 804385a:	409a      	lsls	r2, r3
 804385c:	4232      	tst	r2, r6
 804385e:	d010      	beq.n	8043882 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8043860:	6823      	ldr	r3, [r4, #0]
 8043862:	6819      	ldr	r1, [r3, #0]
 8043864:	0709      	lsls	r1, r1, #28
 8043866:	d50c      	bpl.n	8043882 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8043868:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 804386a:	681a      	ldr	r2, [r3, #0]
 804386c:	0350      	lsls	r0, r2, #13
 804386e:	d537      	bpl.n	80438e0 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8043870:	681b      	ldr	r3, [r3, #0]
 8043872:	0319      	lsls	r1, r3, #12
 8043874:	d401      	bmi.n	804387a <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8043876:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8043878:	e000      	b.n	804387c <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 804387a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 804387c:	b10b      	cbz	r3, 8043882 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 804387e:	4620      	mov	r0, r4
 8043880:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8043882:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8043884:	2220      	movs	r2, #32
 8043886:	408a      	lsls	r2, r1
 8043888:	4232      	tst	r2, r6
 804388a:	d03a      	beq.n	8043902 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 804388c:	6823      	ldr	r3, [r4, #0]
 804388e:	6818      	ldr	r0, [r3, #0]
 8043890:	06c6      	lsls	r6, r0, #27
 8043892:	d536      	bpl.n	8043902 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8043894:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8043896:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 804389a:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 804389c:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 804389e:	d127      	bne.n	80438f0 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80438a0:	f022 0216 	bic.w	r2, r2, #22
 80438a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80438a6:	695a      	ldr	r2, [r3, #20]
 80438a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80438ac:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80438ae:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80438b0:	b90a      	cbnz	r2, 80438b6 <HAL_DMA_IRQHandler+0xc6>
 80438b2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80438b4:	b11a      	cbz	r2, 80438be <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80438b6:	681a      	ldr	r2, [r3, #0]
 80438b8:	f022 0208 	bic.w	r2, r2, #8
 80438bc:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80438be:	233f      	movs	r3, #63	; 0x3f
 80438c0:	408b      	lsls	r3, r1
 80438c2:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 80438c4:	2300      	movs	r3, #0
 80438c6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80438ca:	2301      	movs	r3, #1
 80438cc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80438d0:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 80438d2:	2b00      	cmp	r3, #0
 80438d4:	d045      	beq.n	8043962 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 80438d6:	4620      	mov	r0, r4
}
 80438d8:	b003      	add	sp, #12
 80438da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 80438de:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80438e0:	681a      	ldr	r2, [r3, #0]
 80438e2:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80438e4:	bf5e      	ittt	pl
 80438e6:	681a      	ldrpl	r2, [r3, #0]
 80438e8:	f022 0208 	bicpl.w	r2, r2, #8
 80438ec:	601a      	strpl	r2, [r3, #0]
 80438ee:	e7c2      	b.n	8043876 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80438f0:	0350      	lsls	r0, r2, #13
 80438f2:	d527      	bpl.n	8043944 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80438f4:	681b      	ldr	r3, [r3, #0]
 80438f6:	0319      	lsls	r1, r3, #12
 80438f8:	d431      	bmi.n	804395e <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 80438fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 80438fc:	b10b      	cbz	r3, 8043902 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 80438fe:	4620      	mov	r0, r4
 8043900:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8043902:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8043904:	b36b      	cbz	r3, 8043962 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8043906:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8043908:	07da      	lsls	r2, r3, #31
 804390a:	d519      	bpl.n	8043940 <HAL_DMA_IRQHandler+0x150>
      hdma->State = HAL_DMA_STATE_ABORT;
 804390c:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 804390e:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8043910:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8043914:	6813      	ldr	r3, [r2, #0]
 8043916:	f023 0301 	bic.w	r3, r3, #1
 804391a:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 804391c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8043920:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8043924:	9b01      	ldr	r3, [sp, #4]
 8043926:	3301      	adds	r3, #1
 8043928:	42bb      	cmp	r3, r7
 804392a:	9301      	str	r3, [sp, #4]
 804392c:	d802      	bhi.n	8043934 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 804392e:	6813      	ldr	r3, [r2, #0]
 8043930:	07db      	lsls	r3, r3, #31
 8043932:	d4f7      	bmi.n	8043924 <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 8043934:	2300      	movs	r3, #0
 8043936:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 804393a:	2301      	movs	r3, #1
 804393c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8043940:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8043942:	e7c6      	b.n	80438d2 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8043944:	681a      	ldr	r2, [r3, #0]
 8043946:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 804394a:	d108      	bne.n	804395e <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 804394c:	6819      	ldr	r1, [r3, #0]
 804394e:	f021 0110 	bic.w	r1, r1, #16
 8043952:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8043954:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8043956:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 804395a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 804395e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8043960:	e7cc      	b.n	80438fc <HAL_DMA_IRQHandler+0x10c>
}
 8043962:	b003      	add	sp, #12
 8043964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8043966:	bf00      	nop
 8043968:	200010cc 	.word	0x200010cc

0804396c <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 804396c:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 804396e:	4770      	bx	lr

08043970 <FLASH_Program_DoubleWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8043970:	4909      	ldr	r1, [pc, #36]	; (8043998 <FLASH_Program_DoubleWord+0x28>)
{
 8043972:	b510      	push	{r4, lr}
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8043974:	690c      	ldr	r4, [r1, #16]
 8043976:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 804397a:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 804397c:	690c      	ldr	r4, [r1, #16]
 804397e:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8043982:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 8043984:	690c      	ldr	r4, [r1, #16]
 8043986:	f044 0401 	orr.w	r4, r4, #1
 804398a:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 804398c:	6002      	str	r2, [r0, #0]
  __ASM volatile ("isb 0xF":::"memory");
 804398e:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8043992:	6043      	str	r3, [r0, #4]
}
 8043994:	bd10      	pop	{r4, pc}
 8043996:	bf00      	nop
 8043998:	40023c00 	.word	0x40023c00

0804399c <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 804399c:	4b07      	ldr	r3, [pc, #28]	; (80439bc <FLASH_Program_Word+0x20>)
 804399e:	691a      	ldr	r2, [r3, #16]
 80439a0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80439a4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80439a6:	691a      	ldr	r2, [r3, #16]
 80439a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80439ac:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80439ae:	691a      	ldr	r2, [r3, #16]
 80439b0:	f042 0201 	orr.w	r2, r2, #1
 80439b4:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 80439b6:	6001      	str	r1, [r0, #0]
}
 80439b8:	4770      	bx	lr
 80439ba:	bf00      	nop
 80439bc:	40023c00 	.word	0x40023c00

080439c0 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80439c0:	4b07      	ldr	r3, [pc, #28]	; (80439e0 <FLASH_Program_HalfWord+0x20>)
 80439c2:	691a      	ldr	r2, [r3, #16]
 80439c4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80439c8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80439ca:	691a      	ldr	r2, [r3, #16]
 80439cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80439d0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80439d2:	691a      	ldr	r2, [r3, #16]
 80439d4:	f042 0201 	orr.w	r2, r2, #1
 80439d8:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 80439da:	8001      	strh	r1, [r0, #0]
}
 80439dc:	4770      	bx	lr
 80439de:	bf00      	nop
 80439e0:	40023c00 	.word	0x40023c00

080439e4 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80439e4:	4b1a      	ldr	r3, [pc, #104]	; (8043a50 <FLASH_SetErrorCode+0x6c>)
 80439e6:	68da      	ldr	r2, [r3, #12]
 80439e8:	06d2      	lsls	r2, r2, #27
 80439ea:	d506      	bpl.n	80439fa <FLASH_SetErrorCode+0x16>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80439ec:	4919      	ldr	r1, [pc, #100]	; (8043a54 <FLASH_SetErrorCode+0x70>)
 80439ee:	69ca      	ldr	r2, [r1, #28]
 80439f0:	f042 0210 	orr.w	r2, r2, #16
 80439f4:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80439f6:	2210      	movs	r2, #16
 80439f8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80439fa:	68da      	ldr	r2, [r3, #12]
 80439fc:	0690      	lsls	r0, r2, #26
 80439fe:	d506      	bpl.n	8043a0e <FLASH_SetErrorCode+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8043a00:	4914      	ldr	r1, [pc, #80]	; (8043a54 <FLASH_SetErrorCode+0x70>)
 8043a02:	69ca      	ldr	r2, [r1, #28]
 8043a04:	f042 0208 	orr.w	r2, r2, #8
 8043a08:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8043a0a:	2220      	movs	r2, #32
 8043a0c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8043a0e:	4b10      	ldr	r3, [pc, #64]	; (8043a50 <FLASH_SetErrorCode+0x6c>)
 8043a10:	68da      	ldr	r2, [r3, #12]
 8043a12:	0651      	lsls	r1, r2, #25
 8043a14:	d506      	bpl.n	8043a24 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8043a16:	490f      	ldr	r1, [pc, #60]	; (8043a54 <FLASH_SetErrorCode+0x70>)
 8043a18:	69ca      	ldr	r2, [r1, #28]
 8043a1a:	f042 0204 	orr.w	r2, r2, #4
 8043a1e:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8043a20:	2240      	movs	r2, #64	; 0x40
 8043a22:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8043a24:	68da      	ldr	r2, [r3, #12]
 8043a26:	0612      	lsls	r2, r2, #24
 8043a28:	d506      	bpl.n	8043a38 <FLASH_SetErrorCode+0x54>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8043a2a:	490a      	ldr	r1, [pc, #40]	; (8043a54 <FLASH_SetErrorCode+0x70>)
 8043a2c:	69ca      	ldr	r2, [r1, #28]
 8043a2e:	f042 0202 	orr.w	r2, r2, #2
 8043a32:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8043a34:	2280      	movs	r2, #128	; 0x80
 8043a36:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8043a38:	4a05      	ldr	r2, [pc, #20]	; (8043a50 <FLASH_SetErrorCode+0x6c>)
 8043a3a:	68d3      	ldr	r3, [r2, #12]
 8043a3c:	079b      	lsls	r3, r3, #30
 8043a3e:	d506      	bpl.n	8043a4e <FLASH_SetErrorCode+0x6a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8043a40:	4904      	ldr	r1, [pc, #16]	; (8043a54 <FLASH_SetErrorCode+0x70>)
 8043a42:	69cb      	ldr	r3, [r1, #28]
 8043a44:	f043 0320 	orr.w	r3, r3, #32
 8043a48:	61cb      	str	r3, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8043a4a:	2302      	movs	r3, #2
 8043a4c:	60d3      	str	r3, [r2, #12]
  }
}
 8043a4e:	4770      	bx	lr
 8043a50:	40023c00 	.word	0x40023c00
 8043a54:	2000dddc 	.word	0x2000dddc

08043a58 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8043a58:	4b06      	ldr	r3, [pc, #24]	; (8043a74 <HAL_FLASH_Unlock+0x1c>)
 8043a5a:	691a      	ldr	r2, [r3, #16]
 8043a5c:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8043a5e:	bfbf      	itttt	lt
 8043a60:	4a05      	ldrlt	r2, [pc, #20]	; (8043a78 <HAL_FLASH_Unlock+0x20>)
 8043a62:	605a      	strlt	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8043a64:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 8043a68:	605a      	strlt	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8043a6a:	bfba      	itte	lt
 8043a6c:	6918      	ldrlt	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8043a6e:	0fc0      	lsrlt	r0, r0, #31
 8043a70:	2000      	movge	r0, #0
}
 8043a72:	4770      	bx	lr
 8043a74:	40023c00 	.word	0x40023c00
 8043a78:	45670123 	.word	0x45670123

08043a7c <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 8043a7c:	4a03      	ldr	r2, [pc, #12]	; (8043a8c <HAL_FLASH_Lock+0x10>)
 8043a7e:	6913      	ldr	r3, [r2, #16]
 8043a80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8043a84:	6113      	str	r3, [r2, #16]
}
 8043a86:	2000      	movs	r0, #0
 8043a88:	4770      	bx	lr
 8043a8a:	bf00      	nop
 8043a8c:	40023c00 	.word	0x40023c00

08043a90 <HAL_FLASH_GetError>:
   return pFlash.ErrorCode;
 8043a90:	4b01      	ldr	r3, [pc, #4]	; (8043a98 <HAL_FLASH_GetError+0x8>)
 8043a92:	69d8      	ldr	r0, [r3, #28]
}  
 8043a94:	4770      	bx	lr
 8043a96:	bf00      	nop
 8043a98:	2000dddc 	.word	0x2000dddc

08043a9c <FLASH_WaitForLastOperation>:
{ 
 8043a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8043a9e:	4b12      	ldr	r3, [pc, #72]	; (8043ae8 <FLASH_WaitForLastOperation+0x4c>)
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8043aa0:	4c12      	ldr	r4, [pc, #72]	; (8043aec <FLASH_WaitForLastOperation+0x50>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8043aa2:	2200      	movs	r2, #0
{ 
 8043aa4:	4605      	mov	r5, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8043aa6:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 8043aa8:	f7ff fb08 	bl	80430bc <HAL_GetTick>
 8043aac:	4626      	mov	r6, r4
 8043aae:	4607      	mov	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8043ab0:	68e3      	ldr	r3, [r4, #12]
 8043ab2:	03da      	lsls	r2, r3, #15
 8043ab4:	d40c      	bmi.n	8043ad0 <FLASH_WaitForLastOperation+0x34>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8043ab6:	68e3      	ldr	r3, [r4, #12]
 8043ab8:	07db      	lsls	r3, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8043aba:	bf44      	itt	mi
 8043abc:	2301      	movmi	r3, #1
 8043abe:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8043ac0:	68f0      	ldr	r0, [r6, #12]
 8043ac2:	f010 00f2 	ands.w	r0, r0, #242	; 0xf2
 8043ac6:	d007      	beq.n	8043ad8 <FLASH_WaitForLastOperation+0x3c>
    FLASH_SetErrorCode();
 8043ac8:	f7ff ff8c 	bl	80439e4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8043acc:	2001      	movs	r0, #1
 8043ace:	e003      	b.n	8043ad8 <FLASH_WaitForLastOperation+0x3c>
    if(Timeout != HAL_MAX_DELAY)
 8043ad0:	1c69      	adds	r1, r5, #1
 8043ad2:	d0ed      	beq.n	8043ab0 <FLASH_WaitForLastOperation+0x14>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8043ad4:	b90d      	cbnz	r5, 8043ada <FLASH_WaitForLastOperation+0x3e>
        return HAL_TIMEOUT;
 8043ad6:	2003      	movs	r0, #3
}  
 8043ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8043ada:	f7ff faef 	bl	80430bc <HAL_GetTick>
 8043ade:	1bc0      	subs	r0, r0, r7
 8043ae0:	42a8      	cmp	r0, r5
 8043ae2:	d9e5      	bls.n	8043ab0 <FLASH_WaitForLastOperation+0x14>
 8043ae4:	e7f7      	b.n	8043ad6 <FLASH_WaitForLastOperation+0x3a>
 8043ae6:	bf00      	nop
 8043ae8:	2000dddc 	.word	0x2000dddc
 8043aec:	40023c00 	.word	0x40023c00

08043af0 <HAL_FLASH_Program>:
{
 8043af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8043af4:	4d1f      	ldr	r5, [pc, #124]	; (8043b74 <HAL_FLASH_Program+0x84>)
{
 8043af6:	4698      	mov	r8, r3
  __HAL_LOCK(&pFlash);
 8043af8:	7e2b      	ldrb	r3, [r5, #24]
 8043afa:	2b01      	cmp	r3, #1
{
 8043afc:	4607      	mov	r7, r0
 8043afe:	460e      	mov	r6, r1
 8043b00:	4614      	mov	r4, r2
  __HAL_LOCK(&pFlash);
 8043b02:	d035      	beq.n	8043b70 <HAL_FLASH_Program+0x80>
 8043b04:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8043b06:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8043b0a:	762b      	strb	r3, [r5, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8043b0c:	f7ff ffc6 	bl	8043a9c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8043b10:	b9b0      	cbnz	r0, 8043b40 <HAL_FLASH_Program+0x50>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8043b12:	b9cf      	cbnz	r7, 8043b48 <HAL_FLASH_Program+0x58>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8043b14:	4b18      	ldr	r3, [pc, #96]	; (8043b78 <HAL_FLASH_Program+0x88>)
 8043b16:	691a      	ldr	r2, [r3, #16]
 8043b18:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8043b1c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8043b1e:	691a      	ldr	r2, [r3, #16]
 8043b20:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8043b22:	691a      	ldr	r2, [r3, #16]
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8043b24:	b2e4      	uxtb	r4, r4
  FLASH->CR |= FLASH_CR_PG;
 8043b26:	f042 0201 	orr.w	r2, r2, #1
 8043b2a:	611a      	str	r2, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 8043b2c:	7034      	strb	r4, [r6, #0]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8043b2e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8043b32:	f7ff ffb3 	bl	8043a9c <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 8043b36:	4a10      	ldr	r2, [pc, #64]	; (8043b78 <HAL_FLASH_Program+0x88>)
 8043b38:	6913      	ldr	r3, [r2, #16]
 8043b3a:	f023 0301 	bic.w	r3, r3, #1
 8043b3e:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8043b40:	2300      	movs	r3, #0
 8043b42:	762b      	strb	r3, [r5, #24]
}
 8043b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8043b48:	2f01      	cmp	r7, #1
 8043b4a:	d104      	bne.n	8043b56 <HAL_FLASH_Program+0x66>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8043b4c:	b2a1      	uxth	r1, r4
 8043b4e:	4630      	mov	r0, r6
 8043b50:	f7ff ff36 	bl	80439c0 <FLASH_Program_HalfWord>
 8043b54:	e7eb      	b.n	8043b2e <HAL_FLASH_Program+0x3e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8043b56:	2f02      	cmp	r7, #2
 8043b58:	d104      	bne.n	8043b64 <HAL_FLASH_Program+0x74>
      FLASH_Program_Word(Address, (uint32_t) Data);
 8043b5a:	4621      	mov	r1, r4
 8043b5c:	4630      	mov	r0, r6
 8043b5e:	f7ff ff1d 	bl	804399c <FLASH_Program_Word>
 8043b62:	e7e4      	b.n	8043b2e <HAL_FLASH_Program+0x3e>
      FLASH_Program_DoubleWord(Address, Data);
 8043b64:	4622      	mov	r2, r4
 8043b66:	4643      	mov	r3, r8
 8043b68:	4630      	mov	r0, r6
 8043b6a:	f7ff ff01 	bl	8043970 <FLASH_Program_DoubleWord>
 8043b6e:	e7de      	b.n	8043b2e <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
 8043b70:	2002      	movs	r0, #2
 8043b72:	e7e7      	b.n	8043b44 <HAL_FLASH_Program+0x54>
 8043b74:	2000dddc 	.word	0x2000dddc
 8043b78:	40023c00 	.word	0x40023c00

08043b7c <FLASH_MassErase.isra.0>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8043b7c:	4b07      	ldr	r3, [pc, #28]	; (8043b9c <FLASH_MassErase.isra.0+0x20>)
 8043b7e:	691a      	ldr	r2, [r3, #16]
 8043b80:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8043b84:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 8043b86:	691a      	ldr	r2, [r3, #16]
 8043b88:	f042 0204 	orr.w	r2, r2, #4
 8043b8c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8043b8e:	691a      	ldr	r2, [r3, #16]
 8043b90:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8043b94:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8043b98:	6118      	str	r0, [r3, #16]
}
 8043b9a:	4770      	bx	lr
 8043b9c:	40023c00 	.word	0x40023c00

08043ba0 <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8043ba0:	b139      	cbz	r1, 8043bb2 <FLASH_Erase_Sector+0x12>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8043ba2:	2901      	cmp	r1, #1
 8043ba4:	d01c      	beq.n	8043be0 <FLASH_Erase_Sector+0x40>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8043ba6:	2902      	cmp	r1, #2
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8043ba8:	bf0c      	ite	eq
 8043baa:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8043bae:	f44f 7140 	movne.w	r1, #768	; 0x300
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8043bb2:	4b0d      	ldr	r3, [pc, #52]	; (8043be8 <FLASH_Erase_Sector+0x48>)
 8043bb4:	691a      	ldr	r2, [r3, #16]
 8043bb6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8043bba:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8043bbc:	691a      	ldr	r2, [r3, #16]
 8043bbe:	4311      	orrs	r1, r2
 8043bc0:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8043bc2:	691a      	ldr	r2, [r3, #16]
 8043bc4:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8043bc8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8043bca:	691a      	ldr	r2, [r3, #16]
 8043bcc:	f042 0202 	orr.w	r2, r2, #2
 8043bd0:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8043bd4:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8043bd6:	691a      	ldr	r2, [r3, #16]
 8043bd8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8043bdc:	611a      	str	r2, [r3, #16]
}
 8043bde:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8043be0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8043be4:	e7e5      	b.n	8043bb2 <FLASH_Erase_Sector+0x12>
 8043be6:	bf00      	nop
 8043be8:	40023c00 	.word	0x40023c00

08043bec <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8043bec:	4b14      	ldr	r3, [pc, #80]	; (8043c40 <FLASH_FlushCaches+0x54>)
 8043bee:	681a      	ldr	r2, [r3, #0]
 8043bf0:	0591      	lsls	r1, r2, #22
 8043bf2:	d50f      	bpl.n	8043c14 <FLASH_FlushCaches+0x28>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8043bf4:	681a      	ldr	r2, [r3, #0]
 8043bf6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8043bfa:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8043bfc:	681a      	ldr	r2, [r3, #0]
 8043bfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8043c02:	601a      	str	r2, [r3, #0]
 8043c04:	681a      	ldr	r2, [r3, #0]
 8043c06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8043c0a:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8043c0c:	681a      	ldr	r2, [r3, #0]
 8043c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8043c12:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8043c14:	4b0a      	ldr	r3, [pc, #40]	; (8043c40 <FLASH_FlushCaches+0x54>)
 8043c16:	681a      	ldr	r2, [r3, #0]
 8043c18:	0552      	lsls	r2, r2, #21
 8043c1a:	d50f      	bpl.n	8043c3c <FLASH_FlushCaches+0x50>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8043c1c:	681a      	ldr	r2, [r3, #0]
 8043c1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8043c22:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8043c24:	681a      	ldr	r2, [r3, #0]
 8043c26:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8043c2a:	601a      	str	r2, [r3, #0]
 8043c2c:	681a      	ldr	r2, [r3, #0]
 8043c2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8043c32:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8043c34:	681a      	ldr	r2, [r3, #0]
 8043c36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8043c3a:	601a      	str	r2, [r3, #0]
  }
}
 8043c3c:	4770      	bx	lr
 8043c3e:	bf00      	nop
 8043c40:	40023c00 	.word	0x40023c00

08043c44 <HAL_FLASHEx_Erase>:
{
 8043c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8043c48:	4e23      	ldr	r6, [pc, #140]	; (8043cd8 <HAL_FLASHEx_Erase+0x94>)
 8043c4a:	7e33      	ldrb	r3, [r6, #24]
 8043c4c:	2b01      	cmp	r3, #1
{
 8043c4e:	4604      	mov	r4, r0
 8043c50:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8043c52:	d03f      	beq.n	8043cd4 <HAL_FLASHEx_Erase+0x90>
 8043c54:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8043c56:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8043c5a:	7633      	strb	r3, [r6, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8043c5c:	f7ff ff1e 	bl	8043a9c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8043c60:	4605      	mov	r5, r0
 8043c62:	b9a8      	cbnz	r0, 8043c90 <HAL_FLASHEx_Erase+0x4c>
    *SectorError = 0xFFFFFFFFU;
 8043c64:	f04f 33ff 	mov.w	r3, #4294967295
 8043c68:	f8c8 3000 	str.w	r3, [r8]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8043c6c:	6823      	ldr	r3, [r4, #0]
 8043c6e:	2b01      	cmp	r3, #1
 8043c70:	d113      	bne.n	8043c9a <HAL_FLASHEx_Erase+0x56>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8043c72:	7c20      	ldrb	r0, [r4, #16]
 8043c74:	f7ff ff82 	bl	8043b7c <FLASH_MassErase.isra.0>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8043c78:	f24c 3050 	movw	r0, #50000	; 0xc350
 8043c7c:	f7ff ff0e 	bl	8043a9c <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 8043c80:	4a16      	ldr	r2, [pc, #88]	; (8043cdc <HAL_FLASHEx_Erase+0x98>)
 8043c82:	6913      	ldr	r3, [r2, #16]
 8043c84:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8043c88:	4605      	mov	r5, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 8043c8a:	6113      	str	r3, [r2, #16]
    FLASH_FlushCaches();    
 8043c8c:	f7ff ffae 	bl	8043bec <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8043c90:	2300      	movs	r3, #0
 8043c92:	7633      	strb	r3, [r6, #24]
}
 8043c94:	4628      	mov	r0, r5
 8043c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8043c9a:	68a7      	ldr	r7, [r4, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8043c9c:	f8df 903c 	ldr.w	r9, [pc, #60]	; 8043cdc <HAL_FLASHEx_Erase+0x98>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8043ca0:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8043ca4:	4413      	add	r3, r2
 8043ca6:	42bb      	cmp	r3, r7
 8043ca8:	d9f0      	bls.n	8043c8c <HAL_FLASHEx_Erase+0x48>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8043caa:	7c21      	ldrb	r1, [r4, #16]
 8043cac:	4638      	mov	r0, r7
 8043cae:	f7ff ff77 	bl	8043ba0 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8043cb2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8043cb6:	f7ff fef1 	bl	8043a9c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8043cba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8043cbe:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8043cc2:	f8c9 3010 	str.w	r3, [r9, #16]
        if(status != HAL_OK) 
 8043cc6:	b118      	cbz	r0, 8043cd0 <HAL_FLASHEx_Erase+0x8c>
          *SectorError = index;
 8043cc8:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8043ccc:	4605      	mov	r5, r0
          break;
 8043cce:	e7dd      	b.n	8043c8c <HAL_FLASHEx_Erase+0x48>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8043cd0:	3701      	adds	r7, #1
 8043cd2:	e7e5      	b.n	8043ca0 <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 8043cd4:	2502      	movs	r5, #2
 8043cd6:	e7dd      	b.n	8043c94 <HAL_FLASHEx_Erase+0x50>
 8043cd8:	2000dddc 	.word	0x2000dddc
 8043cdc:	40023c00 	.word	0x40023c00

08043ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8043ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8043ce4:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8043ce6:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8043ce8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8043e98 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8043cec:	4a68      	ldr	r2, [pc, #416]	; (8043e90 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8043cee:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8043e9c <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8043cf2:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8043cf4:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8043cf6:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8043cf8:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 8043cfa:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8043cfc:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8043cfe:	42ac      	cmp	r4, r5
 8043d00:	f040 80b0 	bne.w	8043e64 <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8043d04:	684c      	ldr	r4, [r1, #4]
 8043d06:	f024 0c10 	bic.w	ip, r4, #16
 8043d0a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8043d0e:	2603      	movs	r6, #3
 8043d10:	f10c 37ff 	add.w	r7, ip, #4294967295
 8043d14:	fa06 f60e 	lsl.w	r6, r6, lr
 8043d18:	2f01      	cmp	r7, #1
 8043d1a:	ea6f 0606 	mvn.w	r6, r6
 8043d1e:	d811      	bhi.n	8043d44 <HAL_GPIO_Init+0x64>
        temp = GPIOx->OSPEEDR; 
 8043d20:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8043d22:	ea07 0a06 	and.w	sl, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8043d26:	68cf      	ldr	r7, [r1, #12]
 8043d28:	fa07 f70e 	lsl.w	r7, r7, lr
 8043d2c:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8043d30:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8043d32:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8043d34:	ea27 0a05 	bic.w	sl, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8043d38:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8043d3c:	409f      	lsls	r7, r3
 8043d3e:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8043d42:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8043d44:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8043d46:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8043d4a:	688f      	ldr	r7, [r1, #8]
 8043d4c:	fa07 f70e 	lsl.w	r7, r7, lr
 8043d50:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8043d54:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8043d58:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8043d5a:	d116      	bne.n	8043d8a <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8043d5c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8043d60:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8043d64:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8043d68:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8043d6c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8043d70:	f04f 0c0f 	mov.w	ip, #15
 8043d74:	fa0c fc0b 	lsl.w	ip, ip, fp
 8043d78:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8043d7c:	690f      	ldr	r7, [r1, #16]
 8043d7e:	fa07 f70b 	lsl.w	r7, r7, fp
 8043d82:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8043d86:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8043d8a:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8043d8c:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8043d8e:	f004 0703 	and.w	r7, r4, #3
 8043d92:	fa07 fe0e 	lsl.w	lr, r7, lr
 8043d96:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8043d9a:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8043d9c:	00e6      	lsls	r6, r4, #3
 8043d9e:	d561      	bpl.n	8043e64 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8043da0:	f04f 0b00 	mov.w	fp, #0
 8043da4:	f8cd b00c 	str.w	fp, [sp, #12]
 8043da8:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8043dac:	4e39      	ldr	r6, [pc, #228]	; (8043e94 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8043dae:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8043db2:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8043db6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8043dba:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8043dbe:	9703      	str	r7, [sp, #12]
 8043dc0:	9f03      	ldr	r7, [sp, #12]
 8043dc2:	f023 0703 	bic.w	r7, r3, #3
 8043dc6:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8043dca:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8043dce:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8043dd2:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8043dd6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8043dda:	f04f 0c0f 	mov.w	ip, #15
 8043dde:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8043de2:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8043de4:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8043de8:	d043      	beq.n	8043e72 <HAL_GPIO_Init+0x192>
 8043dea:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8043dee:	42b0      	cmp	r0, r6
 8043df0:	d041      	beq.n	8043e76 <HAL_GPIO_Init+0x196>
 8043df2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8043df6:	42b0      	cmp	r0, r6
 8043df8:	d03f      	beq.n	8043e7a <HAL_GPIO_Init+0x19a>
 8043dfa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8043dfe:	42b0      	cmp	r0, r6
 8043e00:	d03d      	beq.n	8043e7e <HAL_GPIO_Init+0x19e>
 8043e02:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8043e06:	42b0      	cmp	r0, r6
 8043e08:	d03b      	beq.n	8043e82 <HAL_GPIO_Init+0x1a2>
 8043e0a:	4548      	cmp	r0, r9
 8043e0c:	d03b      	beq.n	8043e86 <HAL_GPIO_Init+0x1a6>
 8043e0e:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8043e12:	42b0      	cmp	r0, r6
 8043e14:	d039      	beq.n	8043e8a <HAL_GPIO_Init+0x1aa>
 8043e16:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8043e1a:	42b0      	cmp	r0, r6
 8043e1c:	bf14      	ite	ne
 8043e1e:	2608      	movne	r6, #8
 8043e20:	2607      	moveq	r6, #7
 8043e22:	fa06 f60e 	lsl.w	r6, r6, lr
 8043e26:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8043e2a:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8043e2c:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8043e2e:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8043e30:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8043e34:	bf0c      	ite	eq
 8043e36:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8043e38:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8043e3a:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8043e3c:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8043e3e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8043e42:	bf0c      	ite	eq
 8043e44:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8043e46:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8043e48:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8043e4a:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8043e4c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8043e50:	bf0c      	ite	eq
 8043e52:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8043e54:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8043e56:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8043e58:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8043e5a:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8043e5c:	bf54      	ite	pl
 8043e5e:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8043e60:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8043e62:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8043e64:	3301      	adds	r3, #1
 8043e66:	2b10      	cmp	r3, #16
 8043e68:	f47f af45 	bne.w	8043cf6 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8043e6c:	b005      	add	sp, #20
 8043e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8043e72:	465e      	mov	r6, fp
 8043e74:	e7d5      	b.n	8043e22 <HAL_GPIO_Init+0x142>
 8043e76:	2601      	movs	r6, #1
 8043e78:	e7d3      	b.n	8043e22 <HAL_GPIO_Init+0x142>
 8043e7a:	2602      	movs	r6, #2
 8043e7c:	e7d1      	b.n	8043e22 <HAL_GPIO_Init+0x142>
 8043e7e:	2603      	movs	r6, #3
 8043e80:	e7cf      	b.n	8043e22 <HAL_GPIO_Init+0x142>
 8043e82:	2604      	movs	r6, #4
 8043e84:	e7cd      	b.n	8043e22 <HAL_GPIO_Init+0x142>
 8043e86:	2605      	movs	r6, #5
 8043e88:	e7cb      	b.n	8043e22 <HAL_GPIO_Init+0x142>
 8043e8a:	2606      	movs	r6, #6
 8043e8c:	e7c9      	b.n	8043e22 <HAL_GPIO_Init+0x142>
 8043e8e:	bf00      	nop
 8043e90:	40013c00 	.word	0x40013c00
 8043e94:	40020000 	.word	0x40020000
 8043e98:	40023800 	.word	0x40023800
 8043e9c:	40021400 	.word	0x40021400

08043ea0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8043ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8043ea4:	4d40      	ldr	r5, [pc, #256]	; (8043fa8 <HAL_GPIO_DeInit+0x108>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8043ea6:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8043fb0 <HAL_GPIO_DeInit+0x110>
 8043eaa:	f8df a108 	ldr.w	sl, [pc, #264]	; 8043fb4 <HAL_GPIO_DeInit+0x114>
 8043eae:	f8df b108 	ldr.w	fp, [pc, #264]	; 8043fb8 <HAL_GPIO_DeInit+0x118>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8043eb2:	2200      	movs	r2, #0
    ioposition = 0x01U << position;
 8043eb4:	2301      	movs	r3, #1
 8043eb6:	fa03 fe02 	lsl.w	lr, r3, r2
    iocurrent = (GPIO_Pin) & ioposition;
 8043eba:	ea0e 0401 	and.w	r4, lr, r1
    if(iocurrent == ioposition)
 8043ebe:	45a6      	cmp	lr, r4
 8043ec0:	d15f      	bne.n	8043f82 <HAL_GPIO_DeInit+0xe2>
 8043ec2:	f022 0603 	bic.w	r6, r2, #3
 8043ec6:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8043eca:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8043ece:	f002 0c03 	and.w	ip, r2, #3
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8043ed2:	4b36      	ldr	r3, [pc, #216]	; (8043fac <HAL_GPIO_DeInit+0x10c>)
      tmp = SYSCFG->EXTICR[position >> 2U];
 8043ed4:	f8d6 8008 	ldr.w	r8, [r6, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8043ed8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8043edc:	270f      	movs	r7, #15
 8043ede:	fa07 f70c 	lsl.w	r7, r7, ip
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8043ee2:	4298      	cmp	r0, r3
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8043ee4:	ea07 0808 	and.w	r8, r7, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8043ee8:	d050      	beq.n	8043f8c <HAL_GPIO_DeInit+0xec>
 8043eea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8043eee:	4298      	cmp	r0, r3
 8043ef0:	d04e      	beq.n	8043f90 <HAL_GPIO_DeInit+0xf0>
 8043ef2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8043ef6:	4298      	cmp	r0, r3
 8043ef8:	d04c      	beq.n	8043f94 <HAL_GPIO_DeInit+0xf4>
 8043efa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8043efe:	4298      	cmp	r0, r3
 8043f00:	d04a      	beq.n	8043f98 <HAL_GPIO_DeInit+0xf8>
 8043f02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8043f06:	4298      	cmp	r0, r3
 8043f08:	d048      	beq.n	8043f9c <HAL_GPIO_DeInit+0xfc>
 8043f0a:	4548      	cmp	r0, r9
 8043f0c:	d048      	beq.n	8043fa0 <HAL_GPIO_DeInit+0x100>
 8043f0e:	4550      	cmp	r0, sl
 8043f10:	d048      	beq.n	8043fa4 <HAL_GPIO_DeInit+0x104>
 8043f12:	4558      	cmp	r0, fp
 8043f14:	bf0c      	ite	eq
 8043f16:	2307      	moveq	r3, #7
 8043f18:	2308      	movne	r3, #8
 8043f1a:	fa03 f30c 	lsl.w	r3, r3, ip
 8043f1e:	4543      	cmp	r3, r8
 8043f20:	d110      	bne.n	8043f44 <HAL_GPIO_DeInit+0xa4>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8043f22:	682b      	ldr	r3, [r5, #0]
 8043f24:	43e4      	mvns	r4, r4
 8043f26:	4023      	ands	r3, r4
 8043f28:	602b      	str	r3, [r5, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8043f2a:	686b      	ldr	r3, [r5, #4]
 8043f2c:	4023      	ands	r3, r4
 8043f2e:	606b      	str	r3, [r5, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8043f30:	68ab      	ldr	r3, [r5, #8]
 8043f32:	4023      	ands	r3, r4
 8043f34:	60ab      	str	r3, [r5, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8043f36:	68eb      	ldr	r3, [r5, #12]
 8043f38:	401c      	ands	r4, r3
 8043f3a:	60ec      	str	r4, [r5, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8043f3c:	68b3      	ldr	r3, [r6, #8]
 8043f3e:	ea23 0707 	bic.w	r7, r3, r7
 8043f42:	60b7      	str	r7, [r6, #8]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8043f44:	0056      	lsls	r6, r2, #1
 8043f46:	2303      	movs	r3, #3
 8043f48:	6804      	ldr	r4, [r0, #0]
 8043f4a:	40b3      	lsls	r3, r6
 8043f4c:	43db      	mvns	r3, r3
 8043f4e:	401c      	ands	r4, r3
 8043f50:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8043f52:	08d4      	lsrs	r4, r2, #3
 8043f54:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8043f58:	f002 0c07 	and.w	ip, r2, #7
 8043f5c:	6a26      	ldr	r6, [r4, #32]
 8043f5e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8043f62:	270f      	movs	r7, #15
 8043f64:	fa07 f70c 	lsl.w	r7, r7, ip
 8043f68:	ea26 0707 	bic.w	r7, r6, r7
 8043f6c:	6227      	str	r7, [r4, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8043f6e:	68c4      	ldr	r4, [r0, #12]
 8043f70:	401c      	ands	r4, r3
 8043f72:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8043f74:	6844      	ldr	r4, [r0, #4]
 8043f76:	ea24 040e 	bic.w	r4, r4, lr
 8043f7a:	6044      	str	r4, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8043f7c:	6884      	ldr	r4, [r0, #8]
 8043f7e:	4023      	ands	r3, r4
 8043f80:	6083      	str	r3, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8043f82:	3201      	adds	r2, #1
 8043f84:	2a10      	cmp	r2, #16
 8043f86:	d195      	bne.n	8043eb4 <HAL_GPIO_DeInit+0x14>
    }
  }
}
 8043f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8043f8c:	2300      	movs	r3, #0
 8043f8e:	e7c4      	b.n	8043f1a <HAL_GPIO_DeInit+0x7a>
 8043f90:	2301      	movs	r3, #1
 8043f92:	e7c2      	b.n	8043f1a <HAL_GPIO_DeInit+0x7a>
 8043f94:	2302      	movs	r3, #2
 8043f96:	e7c0      	b.n	8043f1a <HAL_GPIO_DeInit+0x7a>
 8043f98:	2303      	movs	r3, #3
 8043f9a:	e7be      	b.n	8043f1a <HAL_GPIO_DeInit+0x7a>
 8043f9c:	2304      	movs	r3, #4
 8043f9e:	e7bc      	b.n	8043f1a <HAL_GPIO_DeInit+0x7a>
 8043fa0:	2305      	movs	r3, #5
 8043fa2:	e7ba      	b.n	8043f1a <HAL_GPIO_DeInit+0x7a>
 8043fa4:	2306      	movs	r3, #6
 8043fa6:	e7b8      	b.n	8043f1a <HAL_GPIO_DeInit+0x7a>
 8043fa8:	40013c00 	.word	0x40013c00
 8043fac:	40020000 	.word	0x40020000
 8043fb0:	40021400 	.word	0x40021400
 8043fb4:	40021800 	.word	0x40021800
 8043fb8:	40021c00 	.word	0x40021c00

08043fbc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8043fbc:	6903      	ldr	r3, [r0, #16]
 8043fbe:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8043fc0:	bf14      	ite	ne
 8043fc2:	2001      	movne	r0, #1
 8043fc4:	2000      	moveq	r0, #0
 8043fc6:	4770      	bx	lr

08043fc8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8043fc8:	b10a      	cbz	r2, 8043fce <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8043fca:	6181      	str	r1, [r0, #24]
  }
}
 8043fcc:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8043fce:	0409      	lsls	r1, r1, #16
 8043fd0:	e7fb      	b.n	8043fca <HAL_GPIO_WritePin+0x2>
	...

08043fd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8043fd4:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8043fd6:	4b04      	ldr	r3, [pc, #16]	; (8043fe8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8043fd8:	6959      	ldr	r1, [r3, #20]
 8043fda:	4201      	tst	r1, r0
 8043fdc:	d002      	beq.n	8043fe4 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8043fde:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8043fe0:	f00b f9c4 	bl	804f36c <HAL_GPIO_EXTI_Callback>
  }
}
 8043fe4:	bd08      	pop	{r3, pc}
 8043fe6:	bf00      	nop
 8043fe8:	40013c00 	.word	0x40013c00

08043fec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8043fec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8043ff0:	4604      	mov	r4, r0
 8043ff2:	b908      	cbnz	r0, 8043ff8 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8043ff4:	2001      	movs	r0, #1
 8043ff6:	e03f      	b.n	8044078 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8043ff8:	6803      	ldr	r3, [r0, #0]
 8043ffa:	07dd      	lsls	r5, r3, #31
 8043ffc:	d410      	bmi.n	8044020 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8043ffe:	6823      	ldr	r3, [r4, #0]
 8044000:	0798      	lsls	r0, r3, #30
 8044002:	d45a      	bmi.n	80440ba <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8044004:	6823      	ldr	r3, [r4, #0]
 8044006:	071a      	lsls	r2, r3, #28
 8044008:	f100 809c 	bmi.w	8044144 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 804400c:	6823      	ldr	r3, [r4, #0]
 804400e:	075b      	lsls	r3, r3, #29
 8044010:	f100 80ba 	bmi.w	8044188 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8044014:	69a0      	ldr	r0, [r4, #24]
 8044016:	2800      	cmp	r0, #0
 8044018:	f040 811b 	bne.w	8044252 <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 804401c:	2000      	movs	r0, #0
 804401e:	e02b      	b.n	8044078 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8044020:	4ba7      	ldr	r3, [pc, #668]	; (80442c0 <HAL_RCC_OscConfig+0x2d4>)
 8044022:	689a      	ldr	r2, [r3, #8]
 8044024:	f002 020c 	and.w	r2, r2, #12
 8044028:	2a04      	cmp	r2, #4
 804402a:	d007      	beq.n	804403c <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 804402c:	689a      	ldr	r2, [r3, #8]
 804402e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8044032:	2a08      	cmp	r2, #8
 8044034:	d10a      	bne.n	804404c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8044036:	685b      	ldr	r3, [r3, #4]
 8044038:	0259      	lsls	r1, r3, #9
 804403a:	d507      	bpl.n	804404c <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 804403c:	4ba0      	ldr	r3, [pc, #640]	; (80442c0 <HAL_RCC_OscConfig+0x2d4>)
 804403e:	681b      	ldr	r3, [r3, #0]
 8044040:	039a      	lsls	r2, r3, #14
 8044042:	d5dc      	bpl.n	8043ffe <HAL_RCC_OscConfig+0x12>
 8044044:	6863      	ldr	r3, [r4, #4]
 8044046:	2b00      	cmp	r3, #0
 8044048:	d1d9      	bne.n	8043ffe <HAL_RCC_OscConfig+0x12>
 804404a:	e7d3      	b.n	8043ff4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 804404c:	6863      	ldr	r3, [r4, #4]
 804404e:	4d9c      	ldr	r5, [pc, #624]	; (80442c0 <HAL_RCC_OscConfig+0x2d4>)
 8044050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8044054:	d113      	bne.n	804407e <HAL_RCC_OscConfig+0x92>
 8044056:	682b      	ldr	r3, [r5, #0]
 8044058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 804405c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 804405e:	f7ff f82d 	bl	80430bc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8044062:	4d97      	ldr	r5, [pc, #604]	; (80442c0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8044064:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8044066:	682b      	ldr	r3, [r5, #0]
 8044068:	039b      	lsls	r3, r3, #14
 804406a:	d4c8      	bmi.n	8043ffe <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 804406c:	f7ff f826 	bl	80430bc <HAL_GetTick>
 8044070:	1b80      	subs	r0, r0, r6
 8044072:	2864      	cmp	r0, #100	; 0x64
 8044074:	d9f7      	bls.n	8044066 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8044076:	2003      	movs	r0, #3
}
 8044078:	b002      	add	sp, #8
 804407a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 804407e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8044082:	d104      	bne.n	804408e <HAL_RCC_OscConfig+0xa2>
 8044084:	682b      	ldr	r3, [r5, #0]
 8044086:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 804408a:	602b      	str	r3, [r5, #0]
 804408c:	e7e3      	b.n	8044056 <HAL_RCC_OscConfig+0x6a>
 804408e:	682a      	ldr	r2, [r5, #0]
 8044090:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8044094:	602a      	str	r2, [r5, #0]
 8044096:	682a      	ldr	r2, [r5, #0]
 8044098:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 804409c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 804409e:	2b00      	cmp	r3, #0
 80440a0:	d1dd      	bne.n	804405e <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 80440a2:	f7ff f80b 	bl	80430bc <HAL_GetTick>
 80440a6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80440a8:	682b      	ldr	r3, [r5, #0]
 80440aa:	039f      	lsls	r7, r3, #14
 80440ac:	d5a7      	bpl.n	8043ffe <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80440ae:	f7ff f805 	bl	80430bc <HAL_GetTick>
 80440b2:	1b80      	subs	r0, r0, r6
 80440b4:	2864      	cmp	r0, #100	; 0x64
 80440b6:	d9f7      	bls.n	80440a8 <HAL_RCC_OscConfig+0xbc>
 80440b8:	e7dd      	b.n	8044076 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80440ba:	4b81      	ldr	r3, [pc, #516]	; (80442c0 <HAL_RCC_OscConfig+0x2d4>)
 80440bc:	689a      	ldr	r2, [r3, #8]
 80440be:	f012 0f0c 	tst.w	r2, #12
 80440c2:	d007      	beq.n	80440d4 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80440c4:	689a      	ldr	r2, [r3, #8]
 80440c6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80440ca:	2a08      	cmp	r2, #8
 80440cc:	d111      	bne.n	80440f2 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80440ce:	685b      	ldr	r3, [r3, #4]
 80440d0:	025e      	lsls	r6, r3, #9
 80440d2:	d40e      	bmi.n	80440f2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80440d4:	4b7a      	ldr	r3, [pc, #488]	; (80442c0 <HAL_RCC_OscConfig+0x2d4>)
 80440d6:	681a      	ldr	r2, [r3, #0]
 80440d8:	0795      	lsls	r5, r2, #30
 80440da:	d502      	bpl.n	80440e2 <HAL_RCC_OscConfig+0xf6>
 80440dc:	68e2      	ldr	r2, [r4, #12]
 80440de:	2a01      	cmp	r2, #1
 80440e0:	d188      	bne.n	8043ff4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80440e2:	681a      	ldr	r2, [r3, #0]
 80440e4:	6921      	ldr	r1, [r4, #16]
 80440e6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80440ea:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80440ee:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80440f0:	e788      	b.n	8044004 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80440f2:	68e2      	ldr	r2, [r4, #12]
 80440f4:	4b73      	ldr	r3, [pc, #460]	; (80442c4 <HAL_RCC_OscConfig+0x2d8>)
 80440f6:	b1b2      	cbz	r2, 8044126 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80440f8:	2201      	movs	r2, #1
 80440fa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80440fc:	f7fe ffde 	bl	80430bc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8044100:	4d6f      	ldr	r5, [pc, #444]	; (80442c0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8044102:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8044104:	682b      	ldr	r3, [r5, #0]
 8044106:	0798      	lsls	r0, r3, #30
 8044108:	d507      	bpl.n	804411a <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 804410a:	682b      	ldr	r3, [r5, #0]
 804410c:	6922      	ldr	r2, [r4, #16]
 804410e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8044112:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8044116:	602b      	str	r3, [r5, #0]
 8044118:	e774      	b.n	8044004 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 804411a:	f7fe ffcf 	bl	80430bc <HAL_GetTick>
 804411e:	1b80      	subs	r0, r0, r6
 8044120:	2802      	cmp	r0, #2
 8044122:	d9ef      	bls.n	8044104 <HAL_RCC_OscConfig+0x118>
 8044124:	e7a7      	b.n	8044076 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8044126:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8044128:	f7fe ffc8 	bl	80430bc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 804412c:	4d64      	ldr	r5, [pc, #400]	; (80442c0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 804412e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8044130:	682b      	ldr	r3, [r5, #0]
 8044132:	0799      	lsls	r1, r3, #30
 8044134:	f57f af66 	bpl.w	8044004 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8044138:	f7fe ffc0 	bl	80430bc <HAL_GetTick>
 804413c:	1b80      	subs	r0, r0, r6
 804413e:	2802      	cmp	r0, #2
 8044140:	d9f6      	bls.n	8044130 <HAL_RCC_OscConfig+0x144>
 8044142:	e798      	b.n	8044076 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8044144:	6962      	ldr	r2, [r4, #20]
 8044146:	4b60      	ldr	r3, [pc, #384]	; (80442c8 <HAL_RCC_OscConfig+0x2dc>)
 8044148:	b17a      	cbz	r2, 804416a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 804414a:	2201      	movs	r2, #1
 804414c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 804414e:	f7fe ffb5 	bl	80430bc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8044152:	4d5b      	ldr	r5, [pc, #364]	; (80442c0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8044154:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8044156:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8044158:	079f      	lsls	r7, r3, #30
 804415a:	f53f af57 	bmi.w	804400c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 804415e:	f7fe ffad 	bl	80430bc <HAL_GetTick>
 8044162:	1b80      	subs	r0, r0, r6
 8044164:	2802      	cmp	r0, #2
 8044166:	d9f6      	bls.n	8044156 <HAL_RCC_OscConfig+0x16a>
 8044168:	e785      	b.n	8044076 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 804416a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 804416c:	f7fe ffa6 	bl	80430bc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8044170:	4d53      	ldr	r5, [pc, #332]	; (80442c0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8044172:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8044174:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8044176:	0798      	lsls	r0, r3, #30
 8044178:	f57f af48 	bpl.w	804400c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 804417c:	f7fe ff9e 	bl	80430bc <HAL_GetTick>
 8044180:	1b80      	subs	r0, r0, r6
 8044182:	2802      	cmp	r0, #2
 8044184:	d9f6      	bls.n	8044174 <HAL_RCC_OscConfig+0x188>
 8044186:	e776      	b.n	8044076 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8044188:	4b4d      	ldr	r3, [pc, #308]	; (80442c0 <HAL_RCC_OscConfig+0x2d4>)
 804418a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804418c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8044190:	d128      	bne.n	80441e4 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8044192:	9201      	str	r2, [sp, #4]
 8044194:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8044196:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 804419a:	641a      	str	r2, [r3, #64]	; 0x40
 804419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804419e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80441a2:	9301      	str	r3, [sp, #4]
 80441a4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80441a6:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80441a8:	4d48      	ldr	r5, [pc, #288]	; (80442cc <HAL_RCC_OscConfig+0x2e0>)
 80441aa:	682b      	ldr	r3, [r5, #0]
 80441ac:	05d9      	lsls	r1, r3, #23
 80441ae:	d51b      	bpl.n	80441e8 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80441b0:	68a3      	ldr	r3, [r4, #8]
 80441b2:	4d43      	ldr	r5, [pc, #268]	; (80442c0 <HAL_RCC_OscConfig+0x2d4>)
 80441b4:	2b01      	cmp	r3, #1
 80441b6:	d127      	bne.n	8044208 <HAL_RCC_OscConfig+0x21c>
 80441b8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80441ba:	f043 0301 	orr.w	r3, r3, #1
 80441be:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80441c0:	f7fe ff7c 	bl	80430bc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80441c4:	4d3e      	ldr	r5, [pc, #248]	; (80442c0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80441c6:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80441c8:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80441cc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80441ce:	079b      	lsls	r3, r3, #30
 80441d0:	d539      	bpl.n	8044246 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80441d2:	2e00      	cmp	r6, #0
 80441d4:	f43f af1e 	beq.w	8044014 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80441d8:	4a39      	ldr	r2, [pc, #228]	; (80442c0 <HAL_RCC_OscConfig+0x2d4>)
 80441da:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80441dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80441e0:	6413      	str	r3, [r2, #64]	; 0x40
 80441e2:	e717      	b.n	8044014 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80441e4:	2600      	movs	r6, #0
 80441e6:	e7df      	b.n	80441a8 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80441e8:	682b      	ldr	r3, [r5, #0]
 80441ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80441ee:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80441f0:	f7fe ff64 	bl	80430bc <HAL_GetTick>
 80441f4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80441f6:	682b      	ldr	r3, [r5, #0]
 80441f8:	05da      	lsls	r2, r3, #23
 80441fa:	d4d9      	bmi.n	80441b0 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80441fc:	f7fe ff5e 	bl	80430bc <HAL_GetTick>
 8044200:	1bc0      	subs	r0, r0, r7
 8044202:	2802      	cmp	r0, #2
 8044204:	d9f7      	bls.n	80441f6 <HAL_RCC_OscConfig+0x20a>
 8044206:	e736      	b.n	8044076 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8044208:	2b05      	cmp	r3, #5
 804420a:	d104      	bne.n	8044216 <HAL_RCC_OscConfig+0x22a>
 804420c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 804420e:	f043 0304 	orr.w	r3, r3, #4
 8044212:	672b      	str	r3, [r5, #112]	; 0x70
 8044214:	e7d0      	b.n	80441b8 <HAL_RCC_OscConfig+0x1cc>
 8044216:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8044218:	f022 0201 	bic.w	r2, r2, #1
 804421c:	672a      	str	r2, [r5, #112]	; 0x70
 804421e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8044220:	f022 0204 	bic.w	r2, r2, #4
 8044224:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8044226:	2b00      	cmp	r3, #0
 8044228:	d1ca      	bne.n	80441c0 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 804422a:	f7fe ff47 	bl	80430bc <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 804422e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8044232:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8044234:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8044236:	0798      	lsls	r0, r3, #30
 8044238:	d5cb      	bpl.n	80441d2 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 804423a:	f7fe ff3f 	bl	80430bc <HAL_GetTick>
 804423e:	1bc0      	subs	r0, r0, r7
 8044240:	4540      	cmp	r0, r8
 8044242:	d9f7      	bls.n	8044234 <HAL_RCC_OscConfig+0x248>
 8044244:	e717      	b.n	8044076 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8044246:	f7fe ff39 	bl	80430bc <HAL_GetTick>
 804424a:	1bc0      	subs	r0, r0, r7
 804424c:	4540      	cmp	r0, r8
 804424e:	d9bd      	bls.n	80441cc <HAL_RCC_OscConfig+0x1e0>
 8044250:	e711      	b.n	8044076 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8044252:	4d1b      	ldr	r5, [pc, #108]	; (80442c0 <HAL_RCC_OscConfig+0x2d4>)
 8044254:	68ab      	ldr	r3, [r5, #8]
 8044256:	f003 030c 	and.w	r3, r3, #12
 804425a:	2b08      	cmp	r3, #8
 804425c:	d047      	beq.n	80442ee <HAL_RCC_OscConfig+0x302>
 804425e:	4e1c      	ldr	r6, [pc, #112]	; (80442d0 <HAL_RCC_OscConfig+0x2e4>)
 8044260:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8044262:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8044264:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8044266:	d135      	bne.n	80442d4 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8044268:	f7fe ff28 	bl	80430bc <HAL_GetTick>
 804426c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 804426e:	682b      	ldr	r3, [r5, #0]
 8044270:	0199      	lsls	r1, r3, #6
 8044272:	d41e      	bmi.n	80442b2 <HAL_RCC_OscConfig+0x2c6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8044274:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8044278:	4313      	orrs	r3, r2
 804427a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 804427c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8044280:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8044282:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8044286:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8044288:	4c0d      	ldr	r4, [pc, #52]	; (80442c0 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 804428a:	0852      	lsrs	r2, r2, #1
 804428c:	3a01      	subs	r2, #1
 804428e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8044292:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8044294:	2301      	movs	r3, #1
 8044296:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8044298:	f7fe ff10 	bl	80430bc <HAL_GetTick>
 804429c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 804429e:	6823      	ldr	r3, [r4, #0]
 80442a0:	019a      	lsls	r2, r3, #6
 80442a2:	f53f aebb 	bmi.w	804401c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80442a6:	f7fe ff09 	bl	80430bc <HAL_GetTick>
 80442aa:	1b40      	subs	r0, r0, r5
 80442ac:	2802      	cmp	r0, #2
 80442ae:	d9f6      	bls.n	804429e <HAL_RCC_OscConfig+0x2b2>
 80442b0:	e6e1      	b.n	8044076 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80442b2:	f7fe ff03 	bl	80430bc <HAL_GetTick>
 80442b6:	1bc0      	subs	r0, r0, r7
 80442b8:	2802      	cmp	r0, #2
 80442ba:	d9d8      	bls.n	804426e <HAL_RCC_OscConfig+0x282>
 80442bc:	e6db      	b.n	8044076 <HAL_RCC_OscConfig+0x8a>
 80442be:	bf00      	nop
 80442c0:	40023800 	.word	0x40023800
 80442c4:	42470000 	.word	0x42470000
 80442c8:	42470e80 	.word	0x42470e80
 80442cc:	40007000 	.word	0x40007000
 80442d0:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 80442d4:	f7fe fef2 	bl	80430bc <HAL_GetTick>
 80442d8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80442da:	682b      	ldr	r3, [r5, #0]
 80442dc:	019b      	lsls	r3, r3, #6
 80442de:	f57f ae9d 	bpl.w	804401c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80442e2:	f7fe feeb 	bl	80430bc <HAL_GetTick>
 80442e6:	1b00      	subs	r0, r0, r4
 80442e8:	2802      	cmp	r0, #2
 80442ea:	d9f6      	bls.n	80442da <HAL_RCC_OscConfig+0x2ee>
 80442ec:	e6c3      	b.n	8044076 <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80442ee:	2801      	cmp	r0, #1
 80442f0:	f43f aec2 	beq.w	8044078 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->PLLCFGR;
 80442f4:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80442f6:	69e3      	ldr	r3, [r4, #28]
 80442f8:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 80442fc:	429a      	cmp	r2, r3
 80442fe:	f47f ae79 	bne.w	8043ff4 <HAL_RCC_OscConfig+0x8>
 8044302:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8044304:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8044308:	4293      	cmp	r3, r2
 804430a:	f47f ae73 	bne.w	8043ff4 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 804430e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8044310:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8044314:	4003      	ands	r3, r0
 8044316:	4293      	cmp	r3, r2
 8044318:	f47f ae6c 	bne.w	8043ff4 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 804431c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 804431e:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8044322:	4293      	cmp	r3, r2
 8044324:	f47f ae66 	bne.w	8043ff4 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8044328:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 804432a:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 804432e:	1ac0      	subs	r0, r0, r3
 8044330:	bf18      	it	ne
 8044332:	2001      	movne	r0, #1
 8044334:	e6a0      	b.n	8044078 <HAL_RCC_OscConfig+0x8c>
 8044336:	bf00      	nop

08044338 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8044338:	4913      	ldr	r1, [pc, #76]	; (8044388 <HAL_RCC_GetSysClockFreq+0x50>)
{
 804433a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 804433c:	688b      	ldr	r3, [r1, #8]
 804433e:	f003 030c 	and.w	r3, r3, #12
 8044342:	2b04      	cmp	r3, #4
 8044344:	d003      	beq.n	804434e <HAL_RCC_GetSysClockFreq+0x16>
 8044346:	2b08      	cmp	r3, #8
 8044348:	d003      	beq.n	8044352 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 804434a:	4810      	ldr	r0, [pc, #64]	; (804438c <HAL_RCC_GetSysClockFreq+0x54>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 804434c:	e000      	b.n	8044350 <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 804434e:	4810      	ldr	r0, [pc, #64]	; (8044390 <HAL_RCC_GetSysClockFreq+0x58>)
}
 8044350:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8044352:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8044354:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8044356:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8044358:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 804435c:	bf14      	ite	ne
 804435e:	480c      	ldrne	r0, [pc, #48]	; (8044390 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8044360:	480a      	ldreq	r0, [pc, #40]	; (804438c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8044362:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8044366:	bf18      	it	ne
 8044368:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 804436a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 804436e:	fba1 0100 	umull	r0, r1, r1, r0
 8044372:	f7fc fd53 	bl	8040e1c <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8044376:	4b04      	ldr	r3, [pc, #16]	; (8044388 <HAL_RCC_GetSysClockFreq+0x50>)
 8044378:	685b      	ldr	r3, [r3, #4]
 804437a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 804437e:	3301      	adds	r3, #1
 8044380:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8044382:	fbb0 f0f3 	udiv	r0, r0, r3
 8044386:	e7e3      	b.n	8044350 <HAL_RCC_GetSysClockFreq+0x18>
 8044388:	40023800 	.word	0x40023800
 804438c:	00f42400 	.word	0x00f42400
 8044390:	007a1200 	.word	0x007a1200

08044394 <HAL_RCC_ClockConfig>:
{
 8044394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8044398:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 804439a:	4604      	mov	r4, r0
 804439c:	b910      	cbnz	r0, 80443a4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 804439e:	2001      	movs	r0, #1
}
 80443a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80443a4:	4b43      	ldr	r3, [pc, #268]	; (80444b4 <HAL_RCC_ClockConfig+0x120>)
 80443a6:	681a      	ldr	r2, [r3, #0]
 80443a8:	f002 020f 	and.w	r2, r2, #15
 80443ac:	428a      	cmp	r2, r1
 80443ae:	d328      	bcc.n	8044402 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80443b0:	6821      	ldr	r1, [r4, #0]
 80443b2:	078f      	lsls	r7, r1, #30
 80443b4:	d42d      	bmi.n	8044412 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80443b6:	07c8      	lsls	r0, r1, #31
 80443b8:	d440      	bmi.n	804443c <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80443ba:	4b3e      	ldr	r3, [pc, #248]	; (80444b4 <HAL_RCC_ClockConfig+0x120>)
 80443bc:	681a      	ldr	r2, [r3, #0]
 80443be:	f002 020f 	and.w	r2, r2, #15
 80443c2:	42aa      	cmp	r2, r5
 80443c4:	d865      	bhi.n	8044492 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80443c6:	6822      	ldr	r2, [r4, #0]
 80443c8:	0751      	lsls	r1, r2, #29
 80443ca:	d46b      	bmi.n	80444a4 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80443cc:	0713      	lsls	r3, r2, #28
 80443ce:	d507      	bpl.n	80443e0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80443d0:	4a39      	ldr	r2, [pc, #228]	; (80444b8 <HAL_RCC_ClockConfig+0x124>)
 80443d2:	6921      	ldr	r1, [r4, #16]
 80443d4:	6893      	ldr	r3, [r2, #8]
 80443d6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80443da:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80443de:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80443e0:	f7ff ffaa 	bl	8044338 <HAL_RCC_GetSysClockFreq>
 80443e4:	4b34      	ldr	r3, [pc, #208]	; (80444b8 <HAL_RCC_ClockConfig+0x124>)
 80443e6:	4a35      	ldr	r2, [pc, #212]	; (80444bc <HAL_RCC_ClockConfig+0x128>)
 80443e8:	689b      	ldr	r3, [r3, #8]
 80443ea:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80443ee:	5cd3      	ldrb	r3, [r2, r3]
 80443f0:	40d8      	lsrs	r0, r3
 80443f2:	4b33      	ldr	r3, [pc, #204]	; (80444c0 <HAL_RCC_ClockConfig+0x12c>)
 80443f4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80443f6:	4b33      	ldr	r3, [pc, #204]	; (80444c4 <HAL_RCC_ClockConfig+0x130>)
 80443f8:	6818      	ldr	r0, [r3, #0]
 80443fa:	f00a ff69 	bl	804f2d0 <HAL_InitTick>
  return HAL_OK;
 80443fe:	2000      	movs	r0, #0
 8044400:	e7ce      	b.n	80443a0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8044402:	b2ca      	uxtb	r2, r1
 8044404:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8044406:	681b      	ldr	r3, [r3, #0]
 8044408:	f003 030f 	and.w	r3, r3, #15
 804440c:	428b      	cmp	r3, r1
 804440e:	d1c6      	bne.n	804439e <HAL_RCC_ClockConfig+0xa>
 8044410:	e7ce      	b.n	80443b0 <HAL_RCC_ClockConfig+0x1c>
 8044412:	4b29      	ldr	r3, [pc, #164]	; (80444b8 <HAL_RCC_ClockConfig+0x124>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8044414:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8044418:	bf1e      	ittt	ne
 804441a:	689a      	ldrne	r2, [r3, #8]
 804441c:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8044420:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8044422:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8044424:	bf42      	ittt	mi
 8044426:	689a      	ldrmi	r2, [r3, #8]
 8044428:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 804442c:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 804442e:	689a      	ldr	r2, [r3, #8]
 8044430:	68a0      	ldr	r0, [r4, #8]
 8044432:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8044436:	4302      	orrs	r2, r0
 8044438:	609a      	str	r2, [r3, #8]
 804443a:	e7bc      	b.n	80443b6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 804443c:	6862      	ldr	r2, [r4, #4]
 804443e:	4b1e      	ldr	r3, [pc, #120]	; (80444b8 <HAL_RCC_ClockConfig+0x124>)
 8044440:	2a01      	cmp	r2, #1
 8044442:	d11c      	bne.n	804447e <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8044444:	681b      	ldr	r3, [r3, #0]
 8044446:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 804444a:	d0a8      	beq.n	804439e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 804444c:	4e1a      	ldr	r6, [pc, #104]	; (80444b8 <HAL_RCC_ClockConfig+0x124>)
 804444e:	68b3      	ldr	r3, [r6, #8]
 8044450:	f023 0303 	bic.w	r3, r3, #3
 8044454:	4313      	orrs	r3, r2
 8044456:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8044458:	f7fe fe30 	bl	80430bc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 804445c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8044460:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8044462:	68b3      	ldr	r3, [r6, #8]
 8044464:	6862      	ldr	r2, [r4, #4]
 8044466:	f003 030c 	and.w	r3, r3, #12
 804446a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 804446e:	d0a4      	beq.n	80443ba <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8044470:	f7fe fe24 	bl	80430bc <HAL_GetTick>
 8044474:	1bc0      	subs	r0, r0, r7
 8044476:	4540      	cmp	r0, r8
 8044478:	d9f3      	bls.n	8044462 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 804447a:	2003      	movs	r0, #3
 804447c:	e790      	b.n	80443a0 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 804447e:	1e91      	subs	r1, r2, #2
 8044480:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8044482:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8044484:	d802      	bhi.n	804448c <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8044486:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 804448a:	e7de      	b.n	804444a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 804448c:	f013 0f02 	tst.w	r3, #2
 8044490:	e7db      	b.n	804444a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8044492:	b2ea      	uxtb	r2, r5
 8044494:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8044496:	681b      	ldr	r3, [r3, #0]
 8044498:	f003 030f 	and.w	r3, r3, #15
 804449c:	42ab      	cmp	r3, r5
 804449e:	f47f af7e 	bne.w	804439e <HAL_RCC_ClockConfig+0xa>
 80444a2:	e790      	b.n	80443c6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80444a4:	4904      	ldr	r1, [pc, #16]	; (80444b8 <HAL_RCC_ClockConfig+0x124>)
 80444a6:	68e0      	ldr	r0, [r4, #12]
 80444a8:	688b      	ldr	r3, [r1, #8]
 80444aa:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80444ae:	4303      	orrs	r3, r0
 80444b0:	608b      	str	r3, [r1, #8]
 80444b2:	e78b      	b.n	80443cc <HAL_RCC_ClockConfig+0x38>
 80444b4:	40023c00 	.word	0x40023c00
 80444b8:	40023800 	.word	0x40023800
 80444bc:	0805199c 	.word	0x0805199c
 80444c0:	200010cc 	.word	0x200010cc
 80444c4:	200010d8 	.word	0x200010d8

080444c8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80444c8:	4b04      	ldr	r3, [pc, #16]	; (80444dc <HAL_RCC_GetPCLK1Freq+0x14>)
 80444ca:	4a05      	ldr	r2, [pc, #20]	; (80444e0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80444cc:	689b      	ldr	r3, [r3, #8]
 80444ce:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80444d2:	5cd3      	ldrb	r3, [r2, r3]
 80444d4:	4a03      	ldr	r2, [pc, #12]	; (80444e4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80444d6:	6810      	ldr	r0, [r2, #0]
}
 80444d8:	40d8      	lsrs	r0, r3
 80444da:	4770      	bx	lr
 80444dc:	40023800 	.word	0x40023800
 80444e0:	080519ac 	.word	0x080519ac
 80444e4:	200010cc 	.word	0x200010cc

080444e8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80444e8:	4b04      	ldr	r3, [pc, #16]	; (80444fc <HAL_RCC_GetPCLK2Freq+0x14>)
 80444ea:	4a05      	ldr	r2, [pc, #20]	; (8044500 <HAL_RCC_GetPCLK2Freq+0x18>)
 80444ec:	689b      	ldr	r3, [r3, #8]
 80444ee:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80444f2:	5cd3      	ldrb	r3, [r2, r3]
 80444f4:	4a03      	ldr	r2, [pc, #12]	; (8044504 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80444f6:	6810      	ldr	r0, [r2, #0]
}
 80444f8:	40d8      	lsrs	r0, r3
 80444fa:	4770      	bx	lr
 80444fc:	40023800 	.word	0x40023800
 8044500:	080519ac 	.word	0x080519ac
 8044504:	200010cc 	.word	0x200010cc

08044508 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8044508:	6803      	ldr	r3, [r0, #0]
 804450a:	f013 0f05 	tst.w	r3, #5
{
 804450e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8044510:	4605      	mov	r5, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8044512:	d105      	bne.n	8044520 <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8044514:	6828      	ldr	r0, [r5, #0]
 8044516:	f010 0002 	ands.w	r0, r0, #2
 804451a:	d128      	bne.n	804456e <HAL_RCCEx_PeriphCLKConfig+0x66>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
}
 804451c:	b003      	add	sp, #12
 804451e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8044520:	4c41      	ldr	r4, [pc, #260]	; (8044628 <HAL_RCCEx_PeriphCLKConfig+0x120>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8044522:	4e42      	ldr	r6, [pc, #264]	; (804462c <HAL_RCCEx_PeriphCLKConfig+0x124>)
    __HAL_RCC_PLLI2S_DISABLE();
 8044524:	2300      	movs	r3, #0
 8044526:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8044528:	f7fe fdc8 	bl	80430bc <HAL_GetTick>
 804452c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 804452e:	6833      	ldr	r3, [r6, #0]
 8044530:	011b      	lsls	r3, r3, #4
 8044532:	d415      	bmi.n	8044560 <HAL_RCCEx_PeriphCLKConfig+0x58>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8044534:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 8044538:	071b      	lsls	r3, r3, #28
 804453a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 804453e:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8044542:	2301      	movs	r3, #1
 8044544:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8044546:	f7fe fdb9 	bl	80430bc <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 804454a:	4c38      	ldr	r4, [pc, #224]	; (804462c <HAL_RCCEx_PeriphCLKConfig+0x124>)
    tickstart = HAL_GetTick();
 804454c:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 804454e:	6823      	ldr	r3, [r4, #0]
 8044550:	0118      	lsls	r0, r3, #4
 8044552:	d4df      	bmi.n	8044514 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8044554:	f7fe fdb2 	bl	80430bc <HAL_GetTick>
 8044558:	1b80      	subs	r0, r0, r6
 804455a:	2802      	cmp	r0, #2
 804455c:	d9f7      	bls.n	804454e <HAL_RCCEx_PeriphCLKConfig+0x46>
 804455e:	e004      	b.n	804456a <HAL_RCCEx_PeriphCLKConfig+0x62>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8044560:	f7fe fdac 	bl	80430bc <HAL_GetTick>
 8044564:	1bc0      	subs	r0, r0, r7
 8044566:	2802      	cmp	r0, #2
 8044568:	d9e1      	bls.n	804452e <HAL_RCCEx_PeriphCLKConfig+0x26>
        return HAL_TIMEOUT;
 804456a:	2003      	movs	r0, #3
 804456c:	e7d6      	b.n	804451c <HAL_RCCEx_PeriphCLKConfig+0x14>
    __HAL_RCC_PWR_CLK_ENABLE();
 804456e:	2300      	movs	r3, #0
 8044570:	9301      	str	r3, [sp, #4]
 8044572:	4b2e      	ldr	r3, [pc, #184]	; (804462c <HAL_RCCEx_PeriphCLKConfig+0x124>)
    PWR->CR |= PWR_CR_DBP;
 8044574:	4c2e      	ldr	r4, [pc, #184]	; (8044630 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8044576:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8044578:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 804457c:	641a      	str	r2, [r3, #64]	; 0x40
 804457e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8044580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8044584:	9301      	str	r3, [sp, #4]
 8044586:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8044588:	6823      	ldr	r3, [r4, #0]
 804458a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 804458e:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8044590:	f7fe fd94 	bl	80430bc <HAL_GetTick>
 8044594:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8044596:	6823      	ldr	r3, [r4, #0]
 8044598:	05d9      	lsls	r1, r3, #23
 804459a:	d51b      	bpl.n	80445d4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 804459c:	4c23      	ldr	r4, [pc, #140]	; (804462c <HAL_RCCEx_PeriphCLKConfig+0x124>)
 804459e:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80445a0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80445a4:	d11c      	bne.n	80445e0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80445a6:	68eb      	ldr	r3, [r5, #12]
 80445a8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80445ac:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80445b0:	4a1e      	ldr	r2, [pc, #120]	; (804462c <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80445b2:	d134      	bne.n	804461e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80445b4:	6891      	ldr	r1, [r2, #8]
 80445b6:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80445ba:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80445be:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80445c2:	4301      	orrs	r1, r0
 80445c4:	6091      	str	r1, [r2, #8]
 80445c6:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80445c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80445cc:	430b      	orrs	r3, r1
 80445ce:	6713      	str	r3, [r2, #112]	; 0x70
  return HAL_OK;
 80445d0:	2000      	movs	r0, #0
 80445d2:	e7a3      	b.n	804451c <HAL_RCCEx_PeriphCLKConfig+0x14>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80445d4:	f7fe fd72 	bl	80430bc <HAL_GetTick>
 80445d8:	1b80      	subs	r0, r0, r6
 80445da:	2802      	cmp	r0, #2
 80445dc:	d9db      	bls.n	8044596 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 80445de:	e7c4      	b.n	804456a <HAL_RCCEx_PeriphCLKConfig+0x62>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80445e0:	68ea      	ldr	r2, [r5, #12]
 80445e2:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80445e6:	4293      	cmp	r3, r2
 80445e8:	d0dd      	beq.n	80445a6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80445ea:	6f23      	ldr	r3, [r4, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80445ec:	4a11      	ldr	r2, [pc, #68]	; (8044634 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80445ee:	2101      	movs	r1, #1
 80445f0:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80445f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80445f6:	2100      	movs	r1, #0
 80445f8:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 80445fa:	6723      	str	r3, [r4, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80445fc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80445fe:	07da      	lsls	r2, r3, #31
 8044600:	d5d1      	bpl.n	80445a6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
        tickstart = HAL_GetTick();
 8044602:	f7fe fd5b 	bl	80430bc <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8044606:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 804460a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 804460c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 804460e:	079b      	lsls	r3, r3, #30
 8044610:	d4c9      	bmi.n	80445a6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8044612:	f7fe fd53 	bl	80430bc <HAL_GetTick>
 8044616:	1b80      	subs	r0, r0, r6
 8044618:	42b8      	cmp	r0, r7
 804461a:	d9f7      	bls.n	804460c <HAL_RCCEx_PeriphCLKConfig+0x104>
 804461c:	e7a5      	b.n	804456a <HAL_RCCEx_PeriphCLKConfig+0x62>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 804461e:	6891      	ldr	r1, [r2, #8]
 8044620:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8044624:	e7ce      	b.n	80445c4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
 8044626:	bf00      	nop
 8044628:	42470068 	.word	0x42470068
 804462c:	40023800 	.word	0x40023800
 8044630:	40007000 	.word	0x40007000
 8044634:	42470e40 	.word	0x42470e40

08044638 <HAL_RTC_DeactivateAlarm>:

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8044638:	7f03      	ldrb	r3, [r0, #28]
 804463a:	2b01      	cmp	r3, #1
{
 804463c:	b570      	push	{r4, r5, r6, lr}
 804463e:	4604      	mov	r4, r0
 8044640:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8044644:	d021      	beq.n	804468a <HAL_RTC_DeactivateAlarm+0x52>
 8044646:	2301      	movs	r3, #1
 8044648:	7723      	strb	r3, [r4, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 804464a:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 804464c:	7760      	strb	r0, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 804464e:	22ca      	movs	r2, #202	; 0xca
 8044650:	625a      	str	r2, [r3, #36]	; 0x24
 8044652:	2253      	movs	r2, #83	; 0x53
 8044654:	625a      	str	r2, [r3, #36]	; 0x24

  if(Alarm == RTC_ALARM_A)
 8044656:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 804465a:	689a      	ldr	r2, [r3, #8]
  if(Alarm == RTC_ALARM_A)
 804465c:	d123      	bne.n	80446a6 <HAL_RTC_DeactivateAlarm+0x6e>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 804465e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8044662:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8044664:	689a      	ldr	r2, [r3, #8]
 8044666:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 804466a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 804466c:	f7fe fd26 	bl	80430bc <HAL_GetTick>
 8044670:	4606      	mov	r6, r0

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8044672:	6823      	ldr	r3, [r4, #0]
 8044674:	68dd      	ldr	r5, [r3, #12]
 8044676:	f015 0501 	ands.w	r5, r5, #1
 804467a:	d007      	beq.n	804468c <HAL_RTC_DeactivateAlarm+0x54>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 804467c:	6823      	ldr	r3, [r4, #0]
 804467e:	22ff      	movs	r2, #255	; 0xff
 8044680:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8044682:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY;
 8044684:	2301      	movs	r3, #1
 8044686:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hrtc);
 8044688:	7720      	strb	r0, [r4, #28]

  return HAL_OK;
}
 804468a:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 804468c:	f7fe fd16 	bl	80430bc <HAL_GetTick>
 8044690:	1b80      	subs	r0, r0, r6
 8044692:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8044696:	d9ec      	bls.n	8044672 <HAL_RTC_DeactivateAlarm+0x3a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8044698:	6823      	ldr	r3, [r4, #0]
 804469a:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 804469c:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 804469e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80446a0:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 80446a2:	7725      	strb	r5, [r4, #28]
        return HAL_TIMEOUT;
 80446a4:	e7f1      	b.n	804468a <HAL_RTC_DeactivateAlarm+0x52>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80446a6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80446aa:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc,RTC_IT_ALRB);
 80446ac:	689a      	ldr	r2, [r3, #8]
 80446ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80446b2:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80446b4:	f7fe fd02 	bl	80430bc <HAL_GetTick>
 80446b8:	4606      	mov	r6, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80446ba:	6823      	ldr	r3, [r4, #0]
 80446bc:	68dd      	ldr	r5, [r3, #12]
 80446be:	f015 0502 	ands.w	r5, r5, #2
 80446c2:	d1db      	bne.n	804467c <HAL_RTC_DeactivateAlarm+0x44>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80446c4:	f7fe fcfa 	bl	80430bc <HAL_GetTick>
 80446c8:	1b80      	subs	r0, r0, r6
 80446ca:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80446ce:	d9f4      	bls.n	80446ba <HAL_RTC_DeactivateAlarm+0x82>
 80446d0:	e7e2      	b.n	8044698 <HAL_RTC_DeactivateAlarm+0x60>

080446d2 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80446d2:	6802      	ldr	r2, [r0, #0]
{
 80446d4:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80446d6:	68d3      	ldr	r3, [r2, #12]
 80446d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80446dc:	60d3      	str	r3, [r2, #12]
{
 80446de:	4604      	mov	r4, r0

    /* Get tick */
    tickstart = HAL_GetTick();
 80446e0:	f7fe fcec 	bl	80430bc <HAL_GetTick>
 80446e4:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80446e6:	6823      	ldr	r3, [r4, #0]
 80446e8:	68db      	ldr	r3, [r3, #12]
 80446ea:	069b      	lsls	r3, r3, #26
 80446ec:	d501      	bpl.n	80446f2 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80446ee:	2000      	movs	r0, #0
}
 80446f0:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80446f2:	f7fe fce3 	bl	80430bc <HAL_GetTick>
 80446f6:	1b40      	subs	r0, r0, r5
 80446f8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80446fc:	d9f3      	bls.n	80446e6 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 80446fe:	2003      	movs	r0, #3
 8044700:	e7f6      	b.n	80446f0 <HAL_RTC_WaitForSynchro+0x1e>

08044702 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8044702:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8044704:	6803      	ldr	r3, [r0, #0]
 8044706:	68da      	ldr	r2, [r3, #12]
 8044708:	0652      	lsls	r2, r2, #25
{
 804470a:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 804470c:	d501      	bpl.n	8044712 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 804470e:	2000      	movs	r0, #0
}
 8044710:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8044712:	f04f 32ff 	mov.w	r2, #4294967295
 8044716:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8044718:	f7fe fcd0 	bl	80430bc <HAL_GetTick>
 804471c:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 804471e:	6823      	ldr	r3, [r4, #0]
 8044720:	68db      	ldr	r3, [r3, #12]
 8044722:	065b      	lsls	r3, r3, #25
 8044724:	d4f3      	bmi.n	804470e <RTC_EnterInitMode+0xc>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8044726:	f7fe fcc9 	bl	80430bc <HAL_GetTick>
 804472a:	1b40      	subs	r0, r0, r5
 804472c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8044730:	d9f5      	bls.n	804471e <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8044732:	2003      	movs	r0, #3
 8044734:	e7ec      	b.n	8044710 <RTC_EnterInitMode+0xe>

08044736 <HAL_RTC_Init>:
{
 8044736:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8044738:	4604      	mov	r4, r0
 804473a:	b1b8      	cbz	r0, 804476c <HAL_RTC_Init+0x36>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 804473c:	7f43      	ldrb	r3, [r0, #29]
 804473e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8044742:	b913      	cbnz	r3, 804474a <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8044744:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8044746:	f00a fddd 	bl	804f304 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 804474a:	2302      	movs	r3, #2
 804474c:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 804474e:	6823      	ldr	r3, [r4, #0]
 8044750:	22ca      	movs	r2, #202	; 0xca
 8044752:	625a      	str	r2, [r3, #36]	; 0x24
 8044754:	2253      	movs	r2, #83	; 0x53
 8044756:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8044758:	4620      	mov	r0, r4
 804475a:	f7ff ffd2 	bl	8044702 <RTC_EnterInitMode>
 804475e:	6823      	ldr	r3, [r4, #0]
 8044760:	4605      	mov	r5, r0
 8044762:	b128      	cbz	r0, 8044770 <HAL_RTC_Init+0x3a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8044764:	22ff      	movs	r2, #255	; 0xff
 8044766:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8044768:	2304      	movs	r3, #4
 804476a:	7763      	strb	r3, [r4, #29]
     return HAL_ERROR;
 804476c:	2501      	movs	r5, #1
 804476e:	e02e      	b.n	80447ce <HAL_RTC_Init+0x98>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8044770:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8044772:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8044774:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8044778:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 804477c:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 804477e:	6862      	ldr	r2, [r4, #4]
 8044780:	6899      	ldr	r1, [r3, #8]
 8044782:	4302      	orrs	r2, r0
 8044784:	6960      	ldr	r0, [r4, #20]
 8044786:	4302      	orrs	r2, r0
 8044788:	430a      	orrs	r2, r1
 804478a:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 804478c:	68e2      	ldr	r2, [r4, #12]
 804478e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8044790:	691a      	ldr	r2, [r3, #16]
 8044792:	68a1      	ldr	r1, [r4, #8]
 8044794:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8044798:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 804479a:	68da      	ldr	r2, [r3, #12]
 804479c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80447a0:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80447a2:	689b      	ldr	r3, [r3, #8]
 80447a4:	069b      	lsls	r3, r3, #26
 80447a6:	d405      	bmi.n	80447b4 <HAL_RTC_Init+0x7e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80447a8:	4620      	mov	r0, r4
 80447aa:	f7ff ff92 	bl	80446d2 <HAL_RTC_WaitForSynchro>
 80447ae:	b108      	cbz	r0, 80447b4 <HAL_RTC_Init+0x7e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80447b0:	6823      	ldr	r3, [r4, #0]
 80447b2:	e7d7      	b.n	8044764 <HAL_RTC_Init+0x2e>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80447b4:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80447b6:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80447b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80447ba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80447be:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80447c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80447c2:	430a      	orrs	r2, r1
 80447c4:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80447c6:	22ff      	movs	r2, #255	; 0xff
 80447c8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80447ca:	2301      	movs	r3, #1
 80447cc:	7763      	strb	r3, [r4, #29]
}
 80447ce:	4628      	mov	r0, r5
 80447d0:	bd38      	pop	{r3, r4, r5, pc}

080447d2 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 80447d2:	2300      	movs	r3, #0

  while(Value >= 10U)
 80447d4:	2809      	cmp	r0, #9
 80447d6:	d803      	bhi.n	80447e0 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80447d8:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 80447dc:	b2c0      	uxtb	r0, r0
 80447de:	4770      	bx	lr
    Value -= 10U;
 80447e0:	380a      	subs	r0, #10
    bcdhigh++;
 80447e2:	3301      	adds	r3, #1
    Value -= 10U;
 80447e4:	b2c0      	uxtb	r0, r0
 80447e6:	e7f5      	b.n	80447d4 <RTC_ByteToBcd2+0x2>

080447e8 <HAL_RTC_SetTime>:
  __HAL_LOCK(hrtc);
 80447e8:	7f03      	ldrb	r3, [r0, #28]
 80447ea:	2b01      	cmp	r3, #1
{
 80447ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80447f0:	4606      	mov	r6, r0
 80447f2:	460f      	mov	r7, r1
 80447f4:	f04f 0502 	mov.w	r5, #2
  __HAL_LOCK(hrtc);
 80447f8:	d02e      	beq.n	8044858 <HAL_RTC_SetTime+0x70>
 80447fa:	2301      	movs	r3, #1
 80447fc:	6801      	ldr	r1, [r0, #0]
 80447fe:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8044800:	7745      	strb	r5, [r0, #29]
 8044802:	7838      	ldrb	r0, [r7, #0]
 8044804:	787d      	ldrb	r5, [r7, #1]
 8044806:	78bc      	ldrb	r4, [r7, #2]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8044808:	688b      	ldr	r3, [r1, #8]
  if(Format == RTC_FORMAT_BIN)
 804480a:	bb42      	cbnz	r2, 804485e <HAL_RTC_SetTime+0x76>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 804480c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sTime->TimeFormat = 0x00U;
 8044810:	bf08      	it	eq
 8044812:	70fb      	strbeq	r3, [r7, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8044814:	f7ff ffdd 	bl	80447d2 <RTC_ByteToBcd2>
 8044818:	4680      	mov	r8, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 804481a:	4628      	mov	r0, r5
 804481c:	f7ff ffd9 	bl	80447d2 <RTC_ByteToBcd2>
 8044820:	4602      	mov	r2, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8044822:	4620      	mov	r0, r4
 8044824:	f7ff ffd5 	bl	80447d2 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8044828:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 804482a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 804482e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8044832:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8044836:	23ca      	movs	r3, #202	; 0xca
 8044838:	624b      	str	r3, [r1, #36]	; 0x24
 804483a:	2353      	movs	r3, #83	; 0x53
 804483c:	624b      	str	r3, [r1, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 804483e:	4630      	mov	r0, r6
 8044840:	f7ff ff5f 	bl	8044702 <RTC_EnterInitMode>
 8044844:	6833      	ldr	r3, [r6, #0]
 8044846:	4605      	mov	r5, r0
 8044848:	b1b0      	cbz	r0, 8044878 <HAL_RTC_SetTime+0x90>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 804484a:	22ff      	movs	r2, #255	; 0xff
 804484c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 804484e:	2304      	movs	r3, #4
 8044850:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 8044852:	2300      	movs	r3, #0
 8044854:	7733      	strb	r3, [r6, #28]
        return HAL_ERROR;
 8044856:	2501      	movs	r5, #1
}
 8044858:	4628      	mov	r0, r5
 804485a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 804485e:	f013 0340 	ands.w	r3, r3, #64	; 0x40
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8044862:	ea4f 2505 	mov.w	r5, r5, lsl #8
      sTime->TimeFormat = 0x00U;
 8044866:	bf08      	it	eq
 8044868:	70fb      	strbeq	r3, [r7, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 804486a:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 804486e:	4320      	orrs	r0, r4
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8044870:	78fc      	ldrb	r4, [r7, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8044872:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8044876:	e7de      	b.n	8044836 <HAL_RTC_SetTime+0x4e>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8044878:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 804487c:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 8044880:	601c      	str	r4, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8044882:	689a      	ldr	r2, [r3, #8]
 8044884:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8044888:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 804488a:	e9d7 2003 	ldrd	r2, r0, [r7, #12]
 804488e:	6899      	ldr	r1, [r3, #8]
 8044890:	4302      	orrs	r2, r0
 8044892:	430a      	orrs	r2, r1
 8044894:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8044896:	68da      	ldr	r2, [r3, #12]
 8044898:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 804489c:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 804489e:	689b      	ldr	r3, [r3, #8]
 80448a0:	069b      	lsls	r3, r3, #26
 80448a2:	d40a      	bmi.n	80448ba <HAL_RTC_SetTime+0xd2>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80448a4:	4630      	mov	r0, r6
 80448a6:	f7ff ff14 	bl	80446d2 <HAL_RTC_WaitForSynchro>
 80448aa:	b130      	cbz	r0, 80448ba <HAL_RTC_SetTime+0xd2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80448ac:	6833      	ldr	r3, [r6, #0]
 80448ae:	22ff      	movs	r2, #255	; 0xff
 80448b0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80448b2:	2304      	movs	r3, #4
 80448b4:	7773      	strb	r3, [r6, #29]
        __HAL_UNLOCK(hrtc);
 80448b6:	7735      	strb	r5, [r6, #28]
 80448b8:	e7cd      	b.n	8044856 <HAL_RTC_SetTime+0x6e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80448ba:	6833      	ldr	r3, [r6, #0]
 80448bc:	22ff      	movs	r2, #255	; 0xff
 80448be:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 80448c0:	2301      	movs	r3, #1
 80448c2:	7773      	strb	r3, [r6, #29]
   __HAL_UNLOCK(hrtc);
 80448c4:	2300      	movs	r3, #0
 80448c6:	7733      	strb	r3, [r6, #28]
   return HAL_OK;
 80448c8:	e7c6      	b.n	8044858 <HAL_RTC_SetTime+0x70>

080448ca <HAL_RTC_SetDate>:
{
 80448ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 80448cc:	7f03      	ldrb	r3, [r0, #28]
 80448ce:	2b01      	cmp	r3, #1
{
 80448d0:	4606      	mov	r6, r0
 80448d2:	f04f 0502 	mov.w	r5, #2
 __HAL_LOCK(hrtc);
 80448d6:	d030      	beq.n	804493a <HAL_RTC_SetDate+0x70>
 80448d8:	2301      	movs	r3, #1
 80448da:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80448dc:	7745      	strb	r5, [r0, #29]
 80448de:	780d      	ldrb	r5, [r1, #0]
 80448e0:	78c8      	ldrb	r0, [r1, #3]
 80448e2:	784c      	ldrb	r4, [r1, #1]
 80448e4:	788f      	ldrb	r7, [r1, #2]
 80448e6:	036d      	lsls	r5, r5, #13
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80448e8:	2a00      	cmp	r2, #0
 80448ea:	d147      	bne.n	804497c <HAL_RTC_SetDate+0xb2>
 80448ec:	06e2      	lsls	r2, r4, #27
 80448ee:	d503      	bpl.n	80448f8 <HAL_RTC_SetDate+0x2e>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80448f0:	f024 0410 	bic.w	r4, r4, #16
 80448f4:	340a      	adds	r4, #10
 80448f6:	704c      	strb	r4, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80448f8:	f7ff ff6b 	bl	80447d2 <RTC_ByteToBcd2>
 80448fc:	4602      	mov	r2, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80448fe:	7848      	ldrb	r0, [r1, #1]
 8044900:	f7ff ff67 	bl	80447d2 <RTC_ByteToBcd2>
 8044904:	4604      	mov	r4, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8044906:	4638      	mov	r0, r7
 8044908:	f7ff ff63 	bl	80447d2 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 804490c:	4328      	orrs	r0, r5
 804490e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8044912:	6833      	ldr	r3, [r6, #0]
 8044914:	22ca      	movs	r2, #202	; 0xca
 8044916:	625a      	str	r2, [r3, #36]	; 0x24
 8044918:	2253      	movs	r2, #83	; 0x53
 804491a:	625a      	str	r2, [r3, #36]	; 0x24
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 804491c:	ea40 2404 	orr.w	r4, r0, r4, lsl #8
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8044920:	4630      	mov	r0, r6
 8044922:	f7ff feee 	bl	8044702 <RTC_EnterInitMode>
 8044926:	6833      	ldr	r3, [r6, #0]
 8044928:	4605      	mov	r5, r0
 804492a:	b140      	cbz	r0, 804493e <HAL_RTC_SetDate+0x74>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 804492c:	22ff      	movs	r2, #255	; 0xff
 804492e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8044930:	2304      	movs	r3, #4
 8044932:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 8044934:	2300      	movs	r3, #0
 8044936:	7733      	strb	r3, [r6, #28]
        return HAL_ERROR;
 8044938:	2501      	movs	r5, #1
}
 804493a:	4628      	mov	r0, r5
 804493c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 804493e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8044942:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 8044946:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8044948:	68da      	ldr	r2, [r3, #12]
 804494a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 804494e:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8044950:	689b      	ldr	r3, [r3, #8]
 8044952:	069b      	lsls	r3, r3, #26
 8044954:	d40a      	bmi.n	804496c <HAL_RTC_SetDate+0xa2>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8044956:	4630      	mov	r0, r6
 8044958:	f7ff febb 	bl	80446d2 <HAL_RTC_WaitForSynchro>
 804495c:	b130      	cbz	r0, 804496c <HAL_RTC_SetDate+0xa2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 804495e:	6833      	ldr	r3, [r6, #0]
 8044960:	22ff      	movs	r2, #255	; 0xff
 8044962:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8044964:	2304      	movs	r3, #4
 8044966:	7773      	strb	r3, [r6, #29]
        __HAL_UNLOCK(hrtc);
 8044968:	7735      	strb	r5, [r6, #28]
 804496a:	e7e5      	b.n	8044938 <HAL_RTC_SetDate+0x6e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 804496c:	6833      	ldr	r3, [r6, #0]
 804496e:	22ff      	movs	r2, #255	; 0xff
 8044970:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8044972:	2301      	movs	r3, #1
 8044974:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 8044976:	2300      	movs	r3, #0
 8044978:	7733      	strb	r3, [r6, #28]
    return HAL_OK;
 804497a:	e7de      	b.n	804493a <HAL_RTC_SetDate+0x70>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 804497c:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
 8044980:	4338      	orrs	r0, r7
 8044982:	e7c6      	b.n	8044912 <HAL_RTC_SetDate+0x48>

08044984 <HAL_RTC_SetAlarm_IT>:
{
 8044984:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8044988:	4b53      	ldr	r3, [pc, #332]	; (8044ad8 <HAL_RTC_SetAlarm_IT+0x154>)
{
 804498a:	4606      	mov	r6, r0
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 804498c:	681b      	ldr	r3, [r3, #0]
 804498e:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8044992:	fbb3 f0f0 	udiv	r0, r3, r0
 8044996:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 804499a:	4343      	muls	r3, r0
 804499c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hrtc);
 804499e:	7f33      	ldrb	r3, [r6, #28]
 80449a0:	2b01      	cmp	r3, #1
 80449a2:	f04f 0002 	mov.w	r0, #2
 80449a6:	d04a      	beq.n	8044a3e <HAL_RTC_SetAlarm_IT+0xba>
 80449a8:	2301      	movs	r3, #1
 80449aa:	6834      	ldr	r4, [r6, #0]
 80449ac:	7733      	strb	r3, [r6, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80449ae:	7770      	strb	r0, [r6, #29]
 80449b0:	7808      	ldrb	r0, [r1, #0]
 80449b2:	f891 9001 	ldrb.w	r9, [r1, #1]
 80449b6:	f891 a002 	ldrb.w	sl, [r1, #2]
 80449ba:	f891 7020 	ldrb.w	r7, [r1, #32]
 80449be:	69cd      	ldr	r5, [r1, #28]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80449c0:	68a3      	ldr	r3, [r4, #8]
  if(Format == RTC_FORMAT_BIN)
 80449c2:	2a00      	cmp	r2, #0
 80449c4:	d13e      	bne.n	8044a44 <HAL_RTC_SetAlarm_IT+0xc0>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80449c6:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80449ca:	bf08      	it	eq
 80449cc:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80449ce:	f7ff ff00 	bl	80447d2 <RTC_ByteToBcd2>
 80449d2:	4680      	mov	r8, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80449d4:	4648      	mov	r0, r9
 80449d6:	f7ff fefc 	bl	80447d2 <RTC_ByteToBcd2>
 80449da:	4602      	mov	r2, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80449dc:	4650      	mov	r0, sl
 80449de:	f7ff fef8 	bl	80447d2 <RTC_ByteToBcd2>
 80449e2:	4681      	mov	r9, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80449e4:	4638      	mov	r0, r7
 80449e6:	f7ff fef4 	bl	80447d2 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80449ea:	694b      	ldr	r3, [r1, #20]
 80449ec:	432b      	orrs	r3, r5
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80449ee:	78cd      	ldrb	r5, [r1, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80449f0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80449f4:	ea43 0309 	orr.w	r3, r3, r9
 80449f8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80449fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8044a00:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8044a04:	698b      	ldr	r3, [r1, #24]
 8044a06:	684a      	ldr	r2, [r1, #4]
 8044a08:	431a      	orrs	r2, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8044a0a:	23ca      	movs	r3, #202	; 0xca
 8044a0c:	6263      	str	r3, [r4, #36]	; 0x24
 8044a0e:	2353      	movs	r3, #83	; 0x53
 8044a10:	6263      	str	r3, [r4, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 8044a12:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8044a14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8044a18:	68a3      	ldr	r3, [r4, #8]
  if(sAlarm->Alarm == RTC_ALARM_A)
 8044a1a:	d142      	bne.n	8044aa2 <HAL_RTC_SetAlarm_IT+0x11e>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8044a1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8044a20:	60a3      	str	r3, [r4, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8044a22:	68e3      	ldr	r3, [r4, #12]
 8044a24:	b2db      	uxtb	r3, r3
 8044a26:	f463 73c0 	orn	r3, r3, #384	; 0x180
 8044a2a:	60e3      	str	r3, [r4, #12]
      if (count-- == 0U)
 8044a2c:	9b01      	ldr	r3, [sp, #4]
 8044a2e:	1e59      	subs	r1, r3, #1
 8044a30:	9101      	str	r1, [sp, #4]
 8044a32:	b9cb      	cbnz	r3, 8044a68 <HAL_RTC_SetAlarm_IT+0xe4>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8044a34:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8044a36:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8044a38:	6262      	str	r2, [r4, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8044a3a:	7770      	strb	r0, [r6, #29]
        __HAL_UNLOCK(hrtc);
 8044a3c:	7733      	strb	r3, [r6, #28]
}
 8044a3e:	b002      	add	sp, #8
 8044a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8044a44:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8044a48:	bf08      	it	eq
 8044a4a:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8044a4c:	694b      	ldr	r3, [r1, #20]
 8044a4e:	431d      	orrs	r5, r3
 8044a50:	ea45 050a 	orr.w	r5, r5, sl
 8044a54:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8044a58:	78cb      	ldrb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8044a5a:	ea40 2009 	orr.w	r0, r0, r9, lsl #8
 8044a5e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8044a62:	ea40 6007 	orr.w	r0, r0, r7, lsl #24
 8044a66:	e7cd      	b.n	8044a04 <HAL_RTC_SetAlarm_IT+0x80>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8044a68:	68e3      	ldr	r3, [r4, #12]
 8044a6a:	07d9      	lsls	r1, r3, #31
 8044a6c:	d5de      	bpl.n	8044a2c <HAL_RTC_SetAlarm_IT+0xa8>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8044a6e:	61e0      	str	r0, [r4, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8044a70:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8044a72:	68a3      	ldr	r3, [r4, #8]
 8044a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8044a78:	60a3      	str	r3, [r4, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8044a7a:	68a3      	ldr	r3, [r4, #8]
 8044a7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8044a80:	60a3      	str	r3, [r4, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8044a82:	4b16      	ldr	r3, [pc, #88]	; (8044adc <HAL_RTC_SetAlarm_IT+0x158>)
 8044a84:	681a      	ldr	r2, [r3, #0]
 8044a86:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8044a8a:	601a      	str	r2, [r3, #0]
  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8044a8c:	689a      	ldr	r2, [r3, #8]
 8044a8e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8044a92:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8044a94:	23ff      	movs	r3, #255	; 0xff
 8044a96:	6263      	str	r3, [r4, #36]	; 0x24
  __HAL_UNLOCK(hrtc);
 8044a98:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY;
 8044a9a:	2301      	movs	r3, #1
 8044a9c:	7773      	strb	r3, [r6, #29]
  __HAL_UNLOCK(hrtc);
 8044a9e:	7730      	strb	r0, [r6, #28]
  return HAL_OK;
 8044aa0:	e7cd      	b.n	8044a3e <HAL_RTC_SetAlarm_IT+0xba>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8044aa2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8044aa6:	60a3      	str	r3, [r4, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8044aa8:	68e3      	ldr	r3, [r4, #12]
 8044aaa:	b2db      	uxtb	r3, r3
 8044aac:	f463 7320 	orn	r3, r3, #640	; 0x280
 8044ab0:	60e3      	str	r3, [r4, #12]
      if (count-- == 0U)
 8044ab2:	9b01      	ldr	r3, [sp, #4]
 8044ab4:	1e59      	subs	r1, r3, #1
 8044ab6:	9101      	str	r1, [sp, #4]
 8044ab8:	2b00      	cmp	r3, #0
 8044aba:	d0bb      	beq.n	8044a34 <HAL_RTC_SetAlarm_IT+0xb0>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8044abc:	68e3      	ldr	r3, [r4, #12]
 8044abe:	079b      	lsls	r3, r3, #30
 8044ac0:	d5f7      	bpl.n	8044ab2 <HAL_RTC_SetAlarm_IT+0x12e>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8044ac2:	6220      	str	r0, [r4, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8044ac4:	64a2      	str	r2, [r4, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8044ac6:	68a3      	ldr	r3, [r4, #8]
 8044ac8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8044acc:	60a3      	str	r3, [r4, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8044ace:	68a3      	ldr	r3, [r4, #8]
 8044ad0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8044ad4:	e7d4      	b.n	8044a80 <HAL_RTC_SetAlarm_IT+0xfc>
 8044ad6:	bf00      	nop
 8044ad8:	200010cc 	.word	0x200010cc
 8044adc:	40013c00 	.word	0x40013c00

08044ae0 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8044ae0:	0903      	lsrs	r3, r0, #4
 8044ae2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8044ae6:	f000 000f 	and.w	r0, r0, #15
 8044aea:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8044aee:	b2c0      	uxtb	r0, r0
 8044af0:	4770      	bx	lr

08044af2 <HAL_RTC_GetTime>:
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8044af2:	6803      	ldr	r3, [r0, #0]
 8044af4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8044af6:	6048      	str	r0, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8044af8:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8044afa:	681b      	ldr	r3, [r3, #0]
 8044afc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8044b00:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
{
 8044b04:	b570      	push	{r4, r5, r6, lr}
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8044b06:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8044b0a:	0c1d      	lsrs	r5, r3, #16
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8044b0c:	6088      	str	r0, [r1, #8]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8044b0e:	f3c3 2606 	ubfx	r6, r3, #8, #7
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8044b12:	f005 003f 	and.w	r0, r5, #63	; 0x3f
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8044b16:	b2dc      	uxtb	r4, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8044b18:	f005 0540 	and.w	r5, r5, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8044b1c:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8044b1e:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8044b20:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8044b22:	70cd      	strb	r5, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 8044b24:	b952      	cbnz	r2, 8044b3c <HAL_RTC_GetTime+0x4a>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8044b26:	f7ff ffdb 	bl	8044ae0 <RTC_Bcd2ToByte>
 8044b2a:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8044b2c:	4630      	mov	r0, r6
 8044b2e:	f7ff ffd7 	bl	8044ae0 <RTC_Bcd2ToByte>
 8044b32:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8044b34:	4620      	mov	r0, r4
 8044b36:	f7ff ffd3 	bl	8044ae0 <RTC_Bcd2ToByte>
 8044b3a:	7088      	strb	r0, [r1, #2]
}
 8044b3c:	2000      	movs	r0, #0
 8044b3e:	bd70      	pop	{r4, r5, r6, pc}

08044b40 <HAL_RTC_GetDate>:
{
 8044b40:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8044b42:	6803      	ldr	r3, [r0, #0]
 8044b44:	685b      	ldr	r3, [r3, #4]
 8044b46:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8044b4a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8044b4e:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8044b50:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8044b54:	b2dc      	uxtb	r4, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8044b56:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8044b5a:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8044b5c:	704d      	strb	r5, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8044b5e:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8044b60:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 8044b62:	b952      	cbnz	r2, 8044b7a <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8044b64:	f7ff ffbc 	bl	8044ae0 <RTC_Bcd2ToByte>
 8044b68:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8044b6a:	4628      	mov	r0, r5
 8044b6c:	f7ff ffb8 	bl	8044ae0 <RTC_Bcd2ToByte>
 8044b70:	7048      	strb	r0, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8044b72:	4620      	mov	r0, r4
 8044b74:	f7ff ffb4 	bl	8044ae0 <RTC_Bcd2ToByte>
 8044b78:	7088      	strb	r0, [r1, #2]
}
 8044b7a:	2000      	movs	r0, #0
 8044b7c:	bd38      	pop	{r3, r4, r5, pc}

08044b7e <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8044b7e:	6803      	ldr	r3, [r0, #0]
 8044b80:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8044b82:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8044b86:	4770      	bx	lr

08044b88 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8044b88:	6803      	ldr	r3, [r0, #0]
 8044b8a:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8044b8c:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 8044b90:	4770      	bx	lr

08044b92 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8044b92:	7f03      	ldrb	r3, [r0, #28]
 8044b94:	2b01      	cmp	r3, #1
 8044b96:	f04f 0302 	mov.w	r3, #2
 8044b9a:	d00f      	beq.n	8044bbc <HAL_RTCEx_EnableBypassShadow+0x2a>

  hrtc->State = HAL_RTC_STATE_BUSY;
 8044b9c:	7743      	strb	r3, [r0, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8044b9e:	6803      	ldr	r3, [r0, #0]
 8044ba0:	22ca      	movs	r2, #202	; 0xca
 8044ba2:	625a      	str	r2, [r3, #36]	; 0x24
 8044ba4:	2253      	movs	r2, #83	; 0x53
 8044ba6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8044ba8:	689a      	ldr	r2, [r3, #8]
 8044baa:	f042 0220 	orr.w	r2, r2, #32
 8044bae:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8044bb0:	22ff      	movs	r2, #255	; 0xff
 8044bb2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8044bb4:	2301      	movs	r3, #1
 8044bb6:	7743      	strb	r3, [r0, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8044bb8:	2300      	movs	r3, #0
 8044bba:	7703      	strb	r3, [r0, #28]
  __HAL_LOCK(hrtc);
 8044bbc:	4618      	mov	r0, r3

  return HAL_OK;
}
 8044bbe:	4770      	bx	lr

08044bc0 <SD_DMATransmitCplt>:
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8044bc0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8044bc2:	681a      	ldr	r2, [r3, #0]
 8044bc4:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8044bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8044bca:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8044bcc:	4770      	bx	lr

08044bce <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8044bce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8044bd2:	b089      	sub	sp, #36	; 0x24
 8044bd4:	4605      	mov	r5, r0
 8044bd6:	460e      	mov	r6, r1
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8044bd8:	f7fe fa70 	bl	80430bc <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 8044bdc:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 8044bde:	4681      	mov	r9, r0
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8044be0:	2108      	movs	r1, #8
 8044be2:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2U] = {0U, 0U};
 8044be4:	e9cd 3300 	strd	r3, r3, [sp]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8044be8:	f001 fe55 	bl	8046896 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8044bec:	4604      	mov	r4, r0
 8044bee:	bb40      	cbnz	r0, 8044c42 <SD_FindSCR+0x74>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8044bf0:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8044bf2:	6828      	ldr	r0, [r5, #0]
 8044bf4:	0409      	lsls	r1, r1, #16
 8044bf6:	f001 ff61 	bl	8046abc <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8044bfa:	4604      	mov	r4, r0
 8044bfc:	bb08      	cbnz	r0, 8044c42 <SD_FindSCR+0x74>
  {
    return errorstate;
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
  config.DataLength    = 8U;
 8044bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8044c02:	2308      	movs	r3, #8
 8044c04:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8044c08:	2130      	movs	r1, #48	; 0x30
 8044c0a:	2302      	movs	r3, #2
 8044c0c:	e9cd 1304 	strd	r1, r3, [sp, #16]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8044c10:	9006      	str	r0, [sp, #24]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8044c12:	2301      	movs	r3, #1
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8044c14:	a902      	add	r1, sp, #8
 8044c16:	6828      	ldr	r0, [r5, #0]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8044c18:	9307      	str	r3, [sp, #28]
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8044c1a:	f001 fe29 	bl	8046870 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8044c1e:	6828      	ldr	r0, [r5, #0]
 8044c20:	f001 ff95 	bl	8046b4e <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8044c24:	4604      	mov	r4, r0
 8044c26:	b960      	cbnz	r0, 8044c42 <SD_FindSCR+0x74>
  uint32_t index = 0U;
 8044c28:	4607      	mov	r7, r0
  {
    return errorstate;
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8044c2a:	f240 482a 	movw	r8, #1066	; 0x42a
 8044c2e:	6828      	ldr	r0, [r5, #0]
 8044c30:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8044c32:	ea13 0f08 	tst.w	r3, r8
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8044c36:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8044c38:	d007      	beq.n	8044c4a <SD_FindSCR+0x7c>
    {
      return HAL_SD_ERROR_TIMEOUT;
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8044c3a:	0719      	lsls	r1, r3, #28
 8044c3c:	d518      	bpl.n	8044c70 <SD_FindSCR+0xa2>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8044c3e:	2408      	movs	r4, #8

    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8044c40:	6384      	str	r4, [r0, #56]	; 0x38
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8044c42:	4620      	mov	r0, r4
 8044c44:	b009      	add	sp, #36	; 0x24
 8044c46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8044c4a:	029b      	lsls	r3, r3, #10
 8044c4c:	d507      	bpl.n	8044c5e <SD_FindSCR+0x90>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8044c4e:	f001 fde5 	bl	804681c <SDIO_ReadFIFO>
 8044c52:	ab08      	add	r3, sp, #32
 8044c54:	eb03 0387 	add.w	r3, r3, r7, lsl #2
      index++;
 8044c58:	3701      	adds	r7, #1
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8044c5a:	f843 0c20 	str.w	r0, [r3, #-32]
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8044c5e:	f7fe fa2d 	bl	80430bc <HAL_GetTick>
 8044c62:	eba0 0009 	sub.w	r0, r0, r9
 8044c66:	3001      	adds	r0, #1
 8044c68:	d1e1      	bne.n	8044c2e <SD_FindSCR+0x60>
      return HAL_SD_ERROR_TIMEOUT;
 8044c6a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8044c6e:	e7e8      	b.n	8044c42 <SD_FindSCR+0x74>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8044c70:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8044c72:	079a      	lsls	r2, r3, #30
 8044c74:	d501      	bpl.n	8044c7a <SD_FindSCR+0xac>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8044c76:	2402      	movs	r4, #2
 8044c78:	e7e2      	b.n	8044c40 <SD_FindSCR+0x72>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8044c7a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8044c7c:	069b      	lsls	r3, r3, #26
 8044c7e:	d501      	bpl.n	8044c84 <SD_FindSCR+0xb6>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8044c80:	2420      	movs	r4, #32
 8044c82:	e7dd      	b.n	8044c40 <SD_FindSCR+0x72>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8044c84:	f240 533a 	movw	r3, #1338	; 0x53a
 8044c88:	6383      	str	r3, [r0, #56]	; 0x38
 8044c8a:	9b01      	ldr	r3, [sp, #4]
 8044c8c:	ba1b      	rev	r3, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8044c8e:	6033      	str	r3, [r6, #0]
 8044c90:	9b00      	ldr	r3, [sp, #0]
 8044c92:	ba1b      	rev	r3, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8044c94:	6073      	str	r3, [r6, #4]
  return HAL_SD_ERROR_NONE;
 8044c96:	e7d4      	b.n	8044c42 <SD_FindSCR+0x74>

08044c98 <HAL_SD_ReadBlocks_DMA>:
{
 8044c98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8044c9c:	4604      	mov	r4, r0
 8044c9e:	b087      	sub	sp, #28
 8044ca0:	4617      	mov	r7, r2
 8044ca2:	4698      	mov	r8, r3
  if(NULL == pData)
 8044ca4:	b941      	cbnz	r1, 8044cb8 <HAL_SD_ReadBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8044ca6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8044ca8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8044cac:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8044cae:	2501      	movs	r5, #1
}
 8044cb0:	4628      	mov	r0, r5
 8044cb2:	b007      	add	sp, #28
 8044cb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 8044cb8:	f890 6034 	ldrb.w	r6, [r0, #52]	; 0x34
 8044cbc:	b2f6      	uxtb	r6, r6
 8044cbe:	2e01      	cmp	r6, #1
 8044cc0:	d176      	bne.n	8044db0 <HAL_SD_ReadBlocks_DMA+0x118>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8044cc2:	2200      	movs	r2, #0
 8044cc4:	6382      	str	r2, [r0, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8044cc6:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8044cc8:	18fb      	adds	r3, r7, r3
 8044cca:	4283      	cmp	r3, r0
 8044ccc:	d903      	bls.n	8044cd6 <HAL_SD_ReadBlocks_DMA+0x3e>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8044cce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8044cd0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8044cd4:	e7ea      	b.n	8044cac <HAL_SD_ReadBlocks_DMA+0x14>
    hsd->Instance->DCTRL = 0U;
 8044cd6:	6825      	ldr	r5, [r4, #0]
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8044cd8:	6c20      	ldr	r0, [r4, #64]	; 0x40
    hsd->State = HAL_SD_STATE_BUSY;
 8044cda:	2303      	movs	r3, #3
 8044cdc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8044ce0:	62ea      	str	r2, [r5, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8044ce2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8044ce4:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8044ce8:	f043 0302 	orr.w	r3, r3, #2
 8044cec:	63eb      	str	r3, [r5, #60]	; 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8044cee:	4b31      	ldr	r3, [pc, #196]	; (8044db4 <HAL_SD_ReadBlocks_DMA+0x11c>)
 8044cf0:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8044cf2:	4b31      	ldr	r3, [pc, #196]	; (8044db8 <HAL_SD_ReadBlocks_DMA+0x120>)
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8044cf4:	ea4f 2948 	mov.w	r9, r8, lsl #9
    hsd->hdmarx->XferAbortCallback = NULL;
 8044cf8:	e9c0 3213 	strd	r3, r2, [r0, #76]	; 0x4c
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8044cfc:	460a      	mov	r2, r1
 8044cfe:	ea4f 0399 	mov.w	r3, r9, lsr #2
 8044d02:	f105 0180 	add.w	r1, r5, #128	; 0x80
 8044d06:	f7fe fd27 	bl	8043758 <HAL_DMA_Start_IT>
 8044d0a:	4605      	mov	r5, r0
 8044d0c:	b168      	cbz	r0, 8044d2a <HAL_SD_ReadBlocks_DMA+0x92>
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8044d0e:	6823      	ldr	r3, [r4, #0]
 8044d10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8044d12:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8044d16:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8044d18:	4a28      	ldr	r2, [pc, #160]	; (8044dbc <HAL_SD_ReadBlocks_DMA+0x124>)
 8044d1a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8044d1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8044d1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8044d22:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8044d24:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
 8044d28:	e7c1      	b.n	8044cae <HAL_SD_ReadBlocks_DMA+0x16>
      __HAL_SD_DMA_ENABLE(hsd);
 8044d2a:	4b25      	ldr	r3, [pc, #148]	; (8044dc0 <HAL_SD_ReadBlocks_DMA+0x128>)
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8044d2c:	6820      	ldr	r0, [r4, #0]
      __HAL_SD_DMA_ENABLE(hsd);
 8044d2e:	601e      	str	r6, [r3, #0]
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8044d30:	6c63      	ldr	r3, [r4, #68]	; 0x44
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8044d32:	f44f 7100 	mov.w	r1, #512	; 0x200
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8044d36:	2b01      	cmp	r3, #1
        add *= 512U;
 8044d38:	bf18      	it	ne
 8044d3a:	027f      	lslne	r7, r7, #9
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8044d3c:	f001 fdab 	bl	8046896 <SDMMC_CmdBlockLength>
      if(errorstate != HAL_SD_ERROR_NONE)
 8044d40:	b148      	cbz	r0, 8044d56 <HAL_SD_ReadBlocks_DMA+0xbe>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8044d42:	6823      	ldr	r3, [r4, #0]
 8044d44:	4a1d      	ldr	r2, [pc, #116]	; (8044dbc <HAL_SD_ReadBlocks_DMA+0x124>)
 8044d46:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8044d48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8044d4a:	2501      	movs	r5, #1
        hsd->ErrorCode |= errorstate;
 8044d4c:	4318      	orrs	r0, r3
 8044d4e:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8044d50:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
        return HAL_ERROR;
 8044d54:	e7ac      	b.n	8044cb0 <HAL_SD_ReadBlocks_DMA+0x18>
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8044d56:	f04f 33ff 	mov.w	r3, #4294967295
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8044d5a:	e9cd 3900 	strd	r3, r9, [sp]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8044d5e:	2290      	movs	r2, #144	; 0x90
 8044d60:	2302      	movs	r3, #2
 8044d62:	e9cd 2302 	strd	r2, r3, [sp, #8]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8044d66:	9004      	str	r0, [sp, #16]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8044d68:	2301      	movs	r3, #1
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8044d6a:	4669      	mov	r1, sp
 8044d6c:	6820      	ldr	r0, [r4, #0]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8044d6e:	9305      	str	r3, [sp, #20]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8044d70:	f001 fd7e 	bl	8046870 <SDIO_ConfigData>
      if(NumberOfBlocks > 1U)
 8044d74:	f1b8 0f01 	cmp.w	r8, #1
 8044d78:	d913      	bls.n	8044da2 <HAL_SD_ReadBlocks_DMA+0x10a>
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8044d7a:	2382      	movs	r3, #130	; 0x82
 8044d7c:	6323      	str	r3, [r4, #48]	; 0x30
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8044d7e:	4639      	mov	r1, r7
 8044d80:	6820      	ldr	r0, [r4, #0]
 8044d82:	f001 fdb8 	bl	80468f6 <SDMMC_CmdReadMultiBlock>
      if(errorstate != HAL_SD_ERROR_NONE)
 8044d86:	2800      	cmp	r0, #0
 8044d88:	d092      	beq.n	8044cb0 <HAL_SD_ReadBlocks_DMA+0x18>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8044d8a:	6823      	ldr	r3, [r4, #0]
 8044d8c:	4a0b      	ldr	r2, [pc, #44]	; (8044dbc <HAL_SD_ReadBlocks_DMA+0x124>)
 8044d8e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8044d90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8044d92:	2501      	movs	r5, #1
        hsd->ErrorCode |= errorstate;
 8044d94:	4318      	orrs	r0, r3
        hsd->Context = SD_CONTEXT_NONE;
 8044d96:	2300      	movs	r3, #0
        hsd->ErrorCode |= errorstate;
 8044d98:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8044d9a:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8044d9e:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_ERROR;
 8044da0:	e786      	b.n	8044cb0 <HAL_SD_ReadBlocks_DMA+0x18>
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8044da2:	2381      	movs	r3, #129	; 0x81
 8044da4:	6323      	str	r3, [r4, #48]	; 0x30
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8044da6:	4639      	mov	r1, r7
 8044da8:	6820      	ldr	r0, [r4, #0]
 8044daa:	f001 fd8c 	bl	80468c6 <SDMMC_CmdReadSingleBlock>
 8044dae:	e7ea      	b.n	8044d86 <HAL_SD_ReadBlocks_DMA+0xee>
    return HAL_BUSY;
 8044db0:	2502      	movs	r5, #2
 8044db2:	e77d      	b.n	8044cb0 <HAL_SD_ReadBlocks_DMA+0x18>
 8044db4:	08044ef7 	.word	0x08044ef7
 8044db8:	08045419 	.word	0x08045419
 8044dbc:	004005ff 	.word	0x004005ff
 8044dc0:	4225858c 	.word	0x4225858c

08044dc4 <HAL_SD_WriteBlocks_DMA>:
{
 8044dc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8044dc8:	4604      	mov	r4, r0
 8044dca:	b087      	sub	sp, #28
 8044dcc:	4616      	mov	r6, r2
 8044dce:	461f      	mov	r7, r3
  if(NULL == pData)
 8044dd0:	4689      	mov	r9, r1
 8044dd2:	b941      	cbnz	r1, 8044de6 <HAL_SD_WriteBlocks_DMA+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8044dd4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8044dd6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8044dda:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8044ddc:	2501      	movs	r5, #1
}
 8044dde:	4628      	mov	r0, r5
 8044de0:	b007      	add	sp, #28
 8044de2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 8044de6:	f890 5034 	ldrb.w	r5, [r0, #52]	; 0x34
 8044dea:	b2ed      	uxtb	r5, r5
 8044dec:	2d01      	cmp	r5, #1
 8044dee:	d177      	bne.n	8044ee0 <HAL_SD_WriteBlocks_DMA+0x11c>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8044df0:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8044df2:	18f3      	adds	r3, r6, r3
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8044df4:	2200      	movs	r2, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8044df6:	428b      	cmp	r3, r1
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8044df8:	6382      	str	r2, [r0, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8044dfa:	d904      	bls.n	8044e06 <HAL_SD_WriteBlocks_DMA+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8044dfc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8044dfe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8044e02:	6383      	str	r3, [r0, #56]	; 0x38
      return HAL_ERROR;
 8044e04:	e7eb      	b.n	8044dde <HAL_SD_WriteBlocks_DMA+0x1a>
    hsd->State = HAL_SD_STATE_BUSY;
 8044e06:	2303      	movs	r3, #3
 8044e08:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8044e0c:	6800      	ldr	r0, [r0, #0]
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8044e0e:	4935      	ldr	r1, [pc, #212]	; (8044ee4 <HAL_SD_WriteBlocks_DMA+0x120>)
    hsd->Instance->DCTRL = 0U;
 8044e10:	62c2      	str	r2, [r0, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8044e12:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8044e14:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8044e18:	f043 0302 	orr.w	r3, r3, #2
 8044e1c:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8044e1e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8044e20:	63d9      	str	r1, [r3, #60]	; 0x3c
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8044e22:	4931      	ldr	r1, [pc, #196]	; (8044ee8 <HAL_SD_WriteBlocks_DMA+0x124>)
    hsd->hdmatx->XferAbortCallback = NULL;
 8044e24:	e9c3 1213 	strd	r1, r2, [r3, #76]	; 0x4c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8044e28:	6c63      	ldr	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8044e2a:	f44f 7100 	mov.w	r1, #512	; 0x200
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8044e2e:	2b01      	cmp	r3, #1
      add *= 512U;
 8044e30:	bf18      	it	ne
 8044e32:	0276      	lslne	r6, r6, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8044e34:	f001 fd2f 	bl	8046896 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8044e38:	4602      	mov	r2, r0
 8044e3a:	6820      	ldr	r0, [r4, #0]
 8044e3c:	b142      	cbz	r2, 8044e50 <HAL_SD_WriteBlocks_DMA+0x8c>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8044e3e:	4b2b      	ldr	r3, [pc, #172]	; (8044eec <HAL_SD_WriteBlocks_DMA+0x128>)
 8044e40:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8044e42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8044e44:	2501      	movs	r5, #1
      hsd->ErrorCode |= errorstate;
 8044e46:	4313      	orrs	r3, r2
 8044e48:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8044e4a:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
      return HAL_ERROR;
 8044e4e:	e7c6      	b.n	8044dde <HAL_SD_WriteBlocks_DMA+0x1a>
    if(NumberOfBlocks > 1U)
 8044e50:	2f01      	cmp	r7, #1
 8044e52:	d912      	bls.n	8044e7a <HAL_SD_WriteBlocks_DMA+0xb6>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8044e54:	23a0      	movs	r3, #160	; 0xa0
 8044e56:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8044e58:	4631      	mov	r1, r6
 8044e5a:	f001 fd7c 	bl	8046956 <SDMMC_CmdWriteMultiBlock>
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8044e5e:	4606      	mov	r6, r0
 8044e60:	6822      	ldr	r2, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 8044e62:	b180      	cbz	r0, 8044e86 <HAL_SD_WriteBlocks_DMA+0xc2>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8044e64:	4b21      	ldr	r3, [pc, #132]	; (8044eec <HAL_SD_WriteBlocks_DMA+0x128>)
 8044e66:	6393      	str	r3, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8044e68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8044e6a:	2501      	movs	r5, #1
      hsd->ErrorCode |= errorstate;
 8044e6c:	431e      	orrs	r6, r3
      hsd->Context = SD_CONTEXT_NONE;
 8044e6e:	2300      	movs	r3, #0
      hsd->ErrorCode |= errorstate;
 8044e70:	63a6      	str	r6, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8044e72:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8044e76:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8044e78:	e7b1      	b.n	8044dde <HAL_SD_WriteBlocks_DMA+0x1a>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8044e7a:	2390      	movs	r3, #144	; 0x90
 8044e7c:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8044e7e:	4631      	mov	r1, r6
 8044e80:	f001 fd51 	bl	8046926 <SDMMC_CmdWriteSingleBlock>
 8044e84:	e7eb      	b.n	8044e5e <HAL_SD_WriteBlocks_DMA+0x9a>
    __HAL_SD_DMA_ENABLE(hsd);
 8044e86:	4b1a      	ldr	r3, [pc, #104]	; (8044ef0 <HAL_SD_WriteBlocks_DMA+0x12c>)
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8044e88:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    __HAL_SD_DMA_ENABLE(hsd);
 8044e8a:	f04f 0801 	mov.w	r8, #1
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8044e8e:	027f      	lsls	r7, r7, #9
    __HAL_SD_DMA_ENABLE(hsd);
 8044e90:	f8c3 8000 	str.w	r8, [r3]
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8044e94:	3280      	adds	r2, #128	; 0x80
 8044e96:	08bb      	lsrs	r3, r7, #2
 8044e98:	4649      	mov	r1, r9
 8044e9a:	f7fe fc5d 	bl	8043758 <HAL_DMA_Start_IT>
 8044e9e:	4605      	mov	r5, r0
 8044ea0:	b180      	cbz	r0, 8044ec4 <HAL_SD_WriteBlocks_DMA+0x100>
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8044ea2:	6822      	ldr	r2, [r4, #0]
 8044ea4:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8044ea6:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8044eaa:	f023 0302 	bic.w	r3, r3, #2
 8044eae:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8044eb0:	4b0e      	ldr	r3, [pc, #56]	; (8044eec <HAL_SD_WriteBlocks_DMA+0x128>)
 8044eb2:	6393      	str	r3, [r2, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8044eb4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8044eb6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8044eba:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8044ebc:	f884 8034 	strb.w	r8, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8044ec0:	6326      	str	r6, [r4, #48]	; 0x30
 8044ec2:	e78b      	b.n	8044ddc <HAL_SD_WriteBlocks_DMA+0x18>
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8044ec4:	f04f 33ff 	mov.w	r3, #4294967295
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8044ec8:	e9cd 3700 	strd	r3, r7, [sp]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8044ecc:	4669      	mov	r1, sp
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8044ece:	2390      	movs	r3, #144	; 0x90
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8044ed0:	6820      	ldr	r0, [r4, #0]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8044ed2:	e9cd 3602 	strd	r3, r6, [sp, #8]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8044ed6:	e9cd 6804 	strd	r6, r8, [sp, #16]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8044eda:	f001 fcc9 	bl	8046870 <SDIO_ConfigData>
      return HAL_OK;
 8044ede:	e77e      	b.n	8044dde <HAL_SD_WriteBlocks_DMA+0x1a>
    return HAL_BUSY;
 8044ee0:	2502      	movs	r5, #2
 8044ee2:	e77c      	b.n	8044dde <HAL_SD_WriteBlocks_DMA+0x1a>
 8044ee4:	08044bc1 	.word	0x08044bc1
 8044ee8:	08045419 	.word	0x08045419
 8044eec:	004005ff 	.word	0x004005ff
 8044ef0:	4225858c 	.word	0x4225858c

08044ef4 <HAL_SD_ErrorCallback>:
 8044ef4:	4770      	bx	lr

08044ef6 <SD_DMAReceiveCplt>:
{
 8044ef6:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8044ef8:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8044efa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8044efc:	2b82      	cmp	r3, #130	; 0x82
 8044efe:	d109      	bne.n	8044f14 <SD_DMAReceiveCplt+0x1e>
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8044f00:	6820      	ldr	r0, [r4, #0]
 8044f02:	f001 fd41 	bl	8046988 <SDMMC_CmdStopTransfer>
    if(errorstate != HAL_SD_ERROR_NONE)
 8044f06:	b128      	cbz	r0, 8044f14 <SD_DMAReceiveCplt+0x1e>
      hsd->ErrorCode |= errorstate;
 8044f08:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8044f0a:	4318      	orrs	r0, r3
 8044f0c:	63a0      	str	r0, [r4, #56]	; 0x38
      HAL_SD_ErrorCallback(hsd);
 8044f0e:	4620      	mov	r0, r4
 8044f10:	f7ff fff0 	bl	8044ef4 <HAL_SD_ErrorCallback>
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8044f14:	6823      	ldr	r3, [r4, #0]
 8044f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8044f18:	f022 0208 	bic.w	r2, r2, #8
 8044f1c:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8044f1e:	f240 523a 	movw	r2, #1338	; 0x53a
 8044f22:	639a      	str	r2, [r3, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 8044f24:	2301      	movs	r3, #1
 8044f26:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8044f2a:	2300      	movs	r3, #0
 8044f2c:	6323      	str	r3, [r4, #48]	; 0x30
  HAL_SD_RxCpltCallback(hsd);
 8044f2e:	4620      	mov	r0, r4
 8044f30:	f7fd ff87 	bl	8042e42 <HAL_SD_RxCpltCallback>
}
 8044f34:	bd10      	pop	{r4, pc}
	...

08044f38 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8044f38:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8044f3a:	0f9a      	lsrs	r2, r3, #30
 8044f3c:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8044f3e:	f3c3 6283 	ubfx	r2, r3, #26, #4
 8044f42:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8044f44:	f3c3 6201 	ubfx	r2, r3, #24, #2
 8044f48:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8044f4a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8044f4e:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8044f50:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8044f54:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8044f56:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8044f58:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8044f5a:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8044f5c:	0d1a      	lsrs	r2, r3, #20
 8044f5e:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8044f60:	f3c3 4203 	ubfx	r2, r3, #16, #4
 8044f64:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8044f66:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8044f6a:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8044f6c:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8044f70:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8044f72:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8044f76:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8044f78:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8044f7c:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8044f7e:	2200      	movs	r2, #0
 8044f80:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8044f82:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 8044f84:	b510      	push	{r4, lr}
  if(hsd->SdCard.CardType == CARD_SDSC)
 8044f86:	2a00      	cmp	r2, #0
 8044f88:	d16b      	bne.n	8045062 <HAL_SD_GetCardCSD+0x12a>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8044f8a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8044f8c:	f640 74fc 	movw	r4, #4092	; 0xffc
 8044f90:	ea04 0383 	and.w	r3, r4, r3, lsl #2
 8044f94:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8044f98:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8044f9a:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 8044f9e:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8044fa0:	f3c2 6302 	ubfx	r3, r2, #24, #3
 8044fa4:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8044fa6:	f3c2 5342 	ubfx	r3, r2, #21, #3
 8044faa:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8044fac:	f3c2 4382 	ubfx	r3, r2, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8044fb0:	f3c2 32c2 	ubfx	r2, r2, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8044fb4:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8044fb6:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8044fb8:	690b      	ldr	r3, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8044fba:	7e0a      	ldrb	r2, [r1, #24]
 8044fbc:	f002 0207 	and.w	r2, r2, #7
 8044fc0:	3202      	adds	r2, #2
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8044fc2:	3301      	adds	r3, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8044fc4:	4093      	lsls	r3, r2
 8044fc6:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8044fc8:	7a0a      	ldrb	r2, [r1, #8]
 8044fca:	f002 040f 	and.w	r4, r2, #15
 8044fce:	2201      	movs	r2, #1
 8044fd0:	40a2      	lsls	r2, r4
 8044fd2:	6582      	str	r2, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8044fd4:	0a52      	lsrs	r2, r2, #9
 8044fd6:	4353      	muls	r3, r2
 8044fd8:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8044fda:	f44f 7300 	mov.w	r3, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8044fde:	6603      	str	r3, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8044fe0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8044fe2:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8044fe6:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8044fe8:	f3c3 12c6 	ubfx	r2, r3, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8044fec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8044ff0:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8044ff2:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8044ff4:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8044ff6:	0fda      	lsrs	r2, r3, #31
 8044ff8:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8044ffa:	f3c3 7241 	ubfx	r2, r3, #29, #2
 8044ffe:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8045000:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8045004:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8045006:	f3c3 5283 	ubfx	r2, r3, #22, #4
 804500a:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 804500c:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8045010:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 8045014:	2000      	movs	r0, #0
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8045016:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3 = 0;
 804501a:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 804501e:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8045022:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8045026:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 804502a:	f3c3 3280 	ubfx	r2, r3, #14, #1
 804502e:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8045032:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8045036:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 804503a:	f3c3 3200 	ubfx	r2, r3, #12, #1
 804503e:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8045042:	f3c3 2281 	ubfx	r2, r3, #10, #2
 8045046:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 804504a:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 804504e:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8045052:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8045056:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 804505a:	2301      	movs	r3, #1
 804505c:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 8045060:	bd10      	pop	{r4, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8045062:	2a01      	cmp	r2, #1
 8045064:	d10f      	bne.n	8045086 <HAL_SD_GetCardCSD+0x14e>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8045066:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 804506a:	041b      	lsls	r3, r3, #16
 804506c:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8045070:	4313      	orrs	r3, r2
 8045072:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8045074:	690b      	ldr	r3, [r1, #16]
 8045076:	3301      	adds	r3, #1
 8045078:	029b      	lsls	r3, r3, #10
 804507a:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 804507c:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 804507e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8045082:	6583      	str	r3, [r0, #88]	; 0x58
 8045084:	e7ab      	b.n	8044fde <HAL_SD_GetCardCSD+0xa6>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8045086:	6803      	ldr	r3, [r0, #0]
 8045088:	4a05      	ldr	r2, [pc, #20]	; (80450a0 <HAL_SD_GetCardCSD+0x168>)
 804508a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 804508c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 804508e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8045092:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8045094:	2301      	movs	r3, #1
 8045096:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 804509a:	4618      	mov	r0, r3
 804509c:	e7e0      	b.n	8045060 <HAL_SD_GetCardCSD+0x128>
 804509e:	bf00      	nop
 80450a0:	004005ff 	.word	0x004005ff

080450a4 <HAL_SD_InitCard>:
{
 80450a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80450a8:	2300      	movs	r3, #0
{
 80450aa:	b099      	sub	sp, #100	; 0x64
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80450ac:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80450b0:	e9cd 3307 	strd	r3, r3, [sp, #28]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80450b4:	930b      	str	r3, [sp, #44]	; 0x2c
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80450b6:	2376      	movs	r3, #118	; 0x76
 80450b8:	930c      	str	r3, [sp, #48]	; 0x30
  status = SDIO_Init(hsd->Instance, Init);
 80450ba:	ab0a      	add	r3, sp, #40	; 0x28
{
 80450bc:	4604      	mov	r4, r0
  status = SDIO_Init(hsd->Instance, Init);
 80450be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80450c2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80450c6:	ab07      	add	r3, sp, #28
 80450c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80450ca:	6820      	ldr	r0, [r4, #0]
 80450cc:	f001 fb8a 	bl	80467e4 <SDIO_Init>
  if(status != HAL_OK)
 80450d0:	4605      	mov	r5, r0
 80450d2:	2800      	cmp	r0, #0
 80450d4:	f040 80d4 	bne.w	8045280 <HAL_SD_InitCard+0x1dc>
  __HAL_SD_DISABLE(hsd);
 80450d8:	4f6a      	ldr	r7, [pc, #424]	; (8045284 <HAL_SD_InitCard+0x1e0>)
  __HAL_SD_ENABLE(hsd);
 80450da:	2601      	movs	r6, #1
  __HAL_SD_DISABLE(hsd);
 80450dc:	6038      	str	r0, [r7, #0]
  (void)SDIO_PowerState_ON(hsd->Instance);
 80450de:	6820      	ldr	r0, [r4, #0]
 80450e0:	f001 fba4 	bl	804682c <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 80450e4:	603e      	str	r6, [r7, #0]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80450e6:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 80450e8:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80450ea:	f001 fc7f 	bl	80469ec <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 80450ee:	4605      	mov	r5, r0
 80450f0:	b940      	cbnz	r0, 8045104 <HAL_SD_InitCard+0x60>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80450f2:	6820      	ldr	r0, [r4, #0]
 80450f4:	f001 fca2 	bl	8046a3c <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 80450f8:	b158      	cbz	r0, 8045112 <HAL_SD_InitCard+0x6e>
    hsd->SdCard.CardVersion = CARD_V1_X;
 80450fa:	64a5      	str	r5, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80450fc:	6820      	ldr	r0, [r4, #0]
 80450fe:	f001 fc75 	bl	80469ec <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8045102:	b138      	cbz	r0, 8045114 <HAL_SD_InitCard+0x70>
    hsd->State = HAL_SD_STATE_READY;
 8045104:	2501      	movs	r5, #1
 8045106:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 804510a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 804510c:	4318      	orrs	r0, r3
    hsd->ErrorCode |= errorstate;
 804510e:	63a0      	str	r0, [r4, #56]	; 0x38
 8045110:	e084      	b.n	804521c <HAL_SD_InitCard+0x178>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8045112:	64a6      	str	r6, [r4, #72]	; 0x48
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8045114:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8045116:	2b01      	cmp	r3, #1
 8045118:	d134      	bne.n	8045184 <HAL_SD_InitCard+0xe0>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 804511a:	2100      	movs	r1, #0
 804511c:	6820      	ldr	r0, [r4, #0]
 804511e:	f001 fccd 	bl	8046abc <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8045122:	b378      	cbz	r0, 8045184 <HAL_SD_InitCard+0xe0>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8045124:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8045128:	e7ec      	b.n	8045104 <HAL_SD_InitCard+0x60>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 804512a:	4631      	mov	r1, r6
 804512c:	6820      	ldr	r0, [r4, #0]
 804512e:	f001 fcc5 	bl	8046abc <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8045132:	2800      	cmp	r0, #0
 8045134:	d1e6      	bne.n	8045104 <HAL_SD_InitCard+0x60>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8045136:	4649      	mov	r1, r9
 8045138:	6820      	ldr	r0, [r4, #0]
 804513a:	f001 fcd7 	bl	8046aec <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 804513e:	2800      	cmp	r0, #0
 8045140:	d1f0      	bne.n	8045124 <HAL_SD_InitCard+0x80>
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8045142:	4631      	mov	r1, r6
 8045144:	6820      	ldr	r0, [r4, #0]
 8045146:	f001 fb90 	bl	804686a <SDIO_GetResponse>
    count++;
 804514a:	9b06      	ldr	r3, [sp, #24]
 804514c:	3301      	adds	r3, #1
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 804514e:	4605      	mov	r5, r0
    count++;
 8045150:	9306      	str	r3, [sp, #24]
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8045152:	0fc6      	lsrs	r6, r0, #31
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8045154:	9b06      	ldr	r3, [sp, #24]
 8045156:	42bb      	cmp	r3, r7
 8045158:	d801      	bhi.n	804515e <HAL_SD_InitCard+0xba>
 804515a:	2e00      	cmp	r6, #0
 804515c:	d0e5      	beq.n	804512a <HAL_SD_InitCard+0x86>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 804515e:	9b06      	ldr	r3, [sp, #24]
 8045160:	4543      	cmp	r3, r8
 8045162:	d816      	bhi.n	8045192 <HAL_SD_InitCard+0xee>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8045164:	f015 4580 	ands.w	r5, r5, #1073741824	; 0x40000000
 8045168:	f04f 0301 	mov.w	r3, #1
 804516c:	bf18      	it	ne
 804516e:	461d      	movne	r5, r3
 8045170:	6465      	str	r5, [r4, #68]	; 0x44
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8045172:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1U;
 8045174:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8045178:	f001 fb60 	bl	804683c <SDIO_GetPowerState>
 804517c:	b960      	cbnz	r0, 8045198 <HAL_SD_InitCard+0xf4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 804517e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8045182:	e056      	b.n	8045232 <HAL_SD_InitCard+0x18e>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8045184:	f64f 77fe 	movw	r7, #65534	; 0xfffe
{
 8045188:	2600      	movs	r6, #0
 804518a:	46b8      	mov	r8, r7
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 804518c:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8045288 <HAL_SD_InitCard+0x1e4>
 8045190:	e7e0      	b.n	8045154 <HAL_SD_InitCard+0xb0>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8045192:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8045196:	e7b5      	b.n	8045104 <HAL_SD_InitCard+0x60>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8045198:	6c63      	ldr	r3, [r4, #68]	; 0x44
 804519a:	2b03      	cmp	r3, #3
 804519c:	d019      	beq.n	80451d2 <HAL_SD_InitCard+0x12e>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 804519e:	6820      	ldr	r0, [r4, #0]
 80451a0:	f001 fced 	bl	8046b7e <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 80451a4:	2800      	cmp	r0, #0
 80451a6:	d144      	bne.n	8045232 <HAL_SD_InitCard+0x18e>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80451a8:	4601      	mov	r1, r0
 80451aa:	6820      	ldr	r0, [r4, #0]
 80451ac:	f001 fb5d 	bl	804686a <SDIO_GetResponse>
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80451b0:	2104      	movs	r1, #4
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80451b2:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80451b4:	6820      	ldr	r0, [r4, #0]
 80451b6:	f001 fb58 	bl	804686a <SDIO_GetResponse>
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80451ba:	2108      	movs	r1, #8
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80451bc:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80451be:	6820      	ldr	r0, [r4, #0]
 80451c0:	f001 fb53 	bl	804686a <SDIO_GetResponse>
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80451c4:	210c      	movs	r1, #12
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80451c6:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80451c8:	6820      	ldr	r0, [r4, #0]
 80451ca:	f001 fb4e 	bl	804686a <SDIO_GetResponse>
 80451ce:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED)
 80451d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80451d4:	2b03      	cmp	r3, #3
 80451d6:	d125      	bne.n	8045224 <HAL_SD_InitCard+0x180>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80451d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80451da:	2b03      	cmp	r3, #3
 80451dc:	d12f      	bne.n	804523e <HAL_SD_InitCard+0x19a>
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80451de:	2104      	movs	r1, #4
 80451e0:	6820      	ldr	r0, [r4, #0]
 80451e2:	f001 fb42 	bl	804686a <SDIO_GetResponse>
 80451e6:	0d00      	lsrs	r0, r0, #20
 80451e8:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80451ea:	a90d      	add	r1, sp, #52	; 0x34
 80451ec:	4620      	mov	r0, r4
 80451ee:	f7ff fea3 	bl	8044f38 <HAL_SD_GetCardCSD>
 80451f2:	4605      	mov	r5, r0
 80451f4:	2800      	cmp	r0, #0
 80451f6:	d140      	bne.n	804527a <HAL_SD_InitCard+0x1d6>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80451f8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80451fa:	4603      	mov	r3, r0
 80451fc:	0412      	lsls	r2, r2, #16
 80451fe:	6820      	ldr	r0, [r4, #0]
 8045200:	f001 fbdc 	bl	80469bc <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8045204:	b9a8      	cbnz	r0, 8045232 <HAL_SD_InitCard+0x18e>
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8045206:	f104 0310 	add.w	r3, r4, #16
 804520a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 804520e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8045212:	1d23      	adds	r3, r4, #4
 8045214:	cb0e      	ldmia	r3, {r1, r2, r3}
 8045216:	6820      	ldr	r0, [r4, #0]
 8045218:	f001 fae4 	bl	80467e4 <SDIO_Init>
}
 804521c:	4628      	mov	r0, r5
 804521e:	b019      	add	sp, #100	; 0x64
 8045220:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8045224:	f10d 0116 	add.w	r1, sp, #22
 8045228:	6820      	ldr	r0, [r4, #0]
 804522a:	f001 fcd3 	bl	8046bd4 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 804522e:	2800      	cmp	r0, #0
 8045230:	d0d2      	beq.n	80451d8 <HAL_SD_InitCard+0x134>
    hsd->State = HAL_SD_STATE_READY;
 8045232:	2501      	movs	r5, #1
 8045234:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8045238:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 804523a:	4308      	orrs	r0, r1
 804523c:	e767      	b.n	804510e <HAL_SD_InitCard+0x6a>
    hsd->SdCard.RelCardAdd = sd_rca;
 804523e:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8045242:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8045244:	6820      	ldr	r0, [r4, #0]
 8045246:	0409      	lsls	r1, r1, #16
 8045248:	f001 fcae 	bl	8046ba8 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 804524c:	2800      	cmp	r0, #0
 804524e:	d1f0      	bne.n	8045232 <HAL_SD_InitCard+0x18e>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8045250:	4601      	mov	r1, r0
 8045252:	6820      	ldr	r0, [r4, #0]
 8045254:	f001 fb09 	bl	804686a <SDIO_GetResponse>
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8045258:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 804525a:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 804525c:	6820      	ldr	r0, [r4, #0]
 804525e:	f001 fb04 	bl	804686a <SDIO_GetResponse>
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8045262:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8045264:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8045266:	6820      	ldr	r0, [r4, #0]
 8045268:	f001 faff 	bl	804686a <SDIO_GetResponse>
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 804526c:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 804526e:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8045270:	6820      	ldr	r0, [r4, #0]
 8045272:	f001 fafa 	bl	804686a <SDIO_GetResponse>
 8045276:	6720      	str	r0, [r4, #112]	; 0x70
 8045278:	e7b1      	b.n	80451de <HAL_SD_InitCard+0x13a>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 804527a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 804527e:	e7d8      	b.n	8045232 <HAL_SD_InitCard+0x18e>
    return HAL_ERROR;
 8045280:	2501      	movs	r5, #1
 8045282:	e7cb      	b.n	804521c <HAL_SD_InitCard+0x178>
 8045284:	422580a0 	.word	0x422580a0
 8045288:	c1100000 	.word	0xc1100000

0804528c <HAL_SD_Init>:
{
 804528c:	b510      	push	{r4, lr}
  if(hsd == NULL)
 804528e:	4604      	mov	r4, r0
 8045290:	b908      	cbnz	r0, 8045296 <HAL_SD_Init+0xa>
    return HAL_ERROR;
 8045292:	2001      	movs	r0, #1
}
 8045294:	bd10      	pop	{r4, pc}
  if(hsd->State == HAL_SD_STATE_RESET)
 8045296:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 804529a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 804529e:	b913      	cbnz	r3, 80452a6 <HAL_SD_Init+0x1a>
    hsd->Lock = HAL_UNLOCKED;
 80452a0:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 80452a2:	f009 fe95 	bl	804efd0 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 80452a6:	2303      	movs	r3, #3
 80452a8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80452ac:	4620      	mov	r0, r4
 80452ae:	f7ff fef9 	bl	80450a4 <HAL_SD_InitCard>
 80452b2:	2800      	cmp	r0, #0
 80452b4:	d1ed      	bne.n	8045292 <HAL_SD_Init+0x6>
  hsd->State = HAL_SD_STATE_READY;
 80452b6:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80452b8:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 80452ba:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 80452bc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 80452c0:	e7e8      	b.n	8045294 <HAL_SD_Init+0x8>

080452c2 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80452c2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80452c4:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80452c6:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80452c8:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80452ca:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80452cc:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80452ce:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80452d0:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80452d2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80452d4:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80452d6:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80452d8:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80452da:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80452dc:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80452de:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80452e0:	61cb      	str	r3, [r1, #28]
}
 80452e2:	2000      	movs	r0, #0
 80452e4:	4770      	bx	lr
	...

080452e8 <HAL_SD_ConfigWideBusOperation>:
{
 80452e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 80452ea:	2303      	movs	r3, #3
 80452ec:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 80452f0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80452f2:	2b03      	cmp	r3, #3
{
 80452f4:	b08b      	sub	sp, #44	; 0x2c
 80452f6:	4604      	mov	r4, r0
 80452f8:	460e      	mov	r6, r1
  if(hsd->SdCard.CardType != CARD_SECURED)
 80452fa:	d002      	beq.n	8045302 <HAL_SD_ConfigWideBusOperation+0x1a>
    if(WideMode == SDIO_BUS_WIDE_8B)
 80452fc:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8045300:	d103      	bne.n	804530a <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8045302:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8045304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8045308:	e053      	b.n	80453b2 <HAL_SD_ConfigWideBusOperation+0xca>
    else if(WideMode == SDIO_BUS_WIDE_4B)
 804530a:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 804530e:	6800      	ldr	r0, [r0, #0]
 8045310:	d12a      	bne.n	8045368 <HAL_SD_ConfigWideBusOperation+0x80>
  uint32_t scr[2U] = {0U, 0U};
 8045312:	2100      	movs	r1, #0
 8045314:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8045318:	f001 faa7 	bl	804686a <SDIO_GetResponse>
 804531c:	0180      	lsls	r0, r0, #6
 804531e:	d41e      	bmi.n	804535e <HAL_SD_ConfigWideBusOperation+0x76>
  errorstate = SD_FindSCR(hsd, scr);
 8045320:	a904      	add	r1, sp, #16
 8045322:	4620      	mov	r0, r4
 8045324:	f7ff fc53 	bl	8044bce <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8045328:	b960      	cbnz	r0, 8045344 <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 804532a:	9b05      	ldr	r3, [sp, #20]
 804532c:	0359      	lsls	r1, r3, #13
 804532e:	d518      	bpl.n	8045362 <HAL_SD_ConfigWideBusOperation+0x7a>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8045330:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8045332:	6820      	ldr	r0, [r4, #0]
 8045334:	0409      	lsls	r1, r1, #16
 8045336:	f001 fbc1 	bl	8046abc <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 804533a:	b918      	cbnz	r0, 8045344 <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 804533c:	2102      	movs	r1, #2
 804533e:	6820      	ldr	r0, [r4, #0]
 8045340:	f001 fbed 	bl	8046b1e <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8045344:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8045346:	4318      	orrs	r0, r3
      hsd->ErrorCode |= errorstate;
 8045348:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 804534a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 804534c:	6827      	ldr	r7, [r4, #0]
 804534e:	b395      	cbz	r5, 80453b6 <HAL_SD_ConfigWideBusOperation+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8045350:	4b26      	ldr	r3, [pc, #152]	; (80453ec <HAL_SD_ConfigWideBusOperation+0x104>)
 8045352:	63bb      	str	r3, [r7, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8045354:	2001      	movs	r0, #1
 8045356:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 804535a:	b00b      	add	sp, #44	; 0x2c
 804535c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 804535e:	4630      	mov	r0, r6
 8045360:	e7f0      	b.n	8045344 <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8045362:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8045366:	e7ed      	b.n	8045344 <HAL_SD_ConfigWideBusOperation+0x5c>
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8045368:	bb01      	cbnz	r1, 80453ac <HAL_SD_ConfigWideBusOperation+0xc4>
  uint32_t scr[2U] = {0U, 0U};
 804536a:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 804536e:	f001 fa7c 	bl	804686a <SDIO_GetResponse>
 8045372:	0182      	lsls	r2, r0, #6
 8045374:	d414      	bmi.n	80453a0 <HAL_SD_ConfigWideBusOperation+0xb8>
  errorstate = SD_FindSCR(hsd, scr);
 8045376:	a904      	add	r1, sp, #16
 8045378:	4620      	mov	r0, r4
 804537a:	f7ff fc28 	bl	8044bce <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 804537e:	b960      	cbnz	r0, 804539a <HAL_SD_ConfigWideBusOperation+0xb2>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8045380:	9b05      	ldr	r3, [sp, #20]
 8045382:	03db      	lsls	r3, r3, #15
 8045384:	d50f      	bpl.n	80453a6 <HAL_SD_ConfigWideBusOperation+0xbe>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8045386:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8045388:	6820      	ldr	r0, [r4, #0]
 804538a:	0409      	lsls	r1, r1, #16
 804538c:	f001 fb96 	bl	8046abc <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8045390:	b918      	cbnz	r0, 804539a <HAL_SD_ConfigWideBusOperation+0xb2>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8045392:	4601      	mov	r1, r0
 8045394:	6820      	ldr	r0, [r4, #0]
 8045396:	f001 fbc2 	bl	8046b1e <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 804539a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 804539c:	4308      	orrs	r0, r1
 804539e:	e7d3      	b.n	8045348 <HAL_SD_ConfigWideBusOperation+0x60>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80453a0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80453a4:	e7f9      	b.n	804539a <HAL_SD_ConfigWideBusOperation+0xb2>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80453a6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80453aa:	e7f6      	b.n	804539a <HAL_SD_ConfigWideBusOperation+0xb2>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80453ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80453ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80453b2:	63a3      	str	r3, [r4, #56]	; 0x38
 80453b4:	e7c9      	b.n	804534a <HAL_SD_ConfigWideBusOperation+0x62>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80453b6:	6863      	ldr	r3, [r4, #4]
 80453b8:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80453ba:	68a3      	ldr	r3, [r4, #8]
 80453bc:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80453be:	68e3      	ldr	r3, [r4, #12]
    Init.BusWide             = WideMode;
 80453c0:	e9cd 3606 	strd	r3, r6, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80453c4:	6963      	ldr	r3, [r4, #20]
 80453c6:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80453c8:	69a3      	ldr	r3, [r4, #24]
 80453ca:	9309      	str	r3, [sp, #36]	; 0x24
    (void)SDIO_Init(hsd->Instance, Init);
 80453cc:	ab0a      	add	r3, sp, #40	; 0x28
 80453ce:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80453d2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80453d6:	ab04      	add	r3, sp, #16
 80453d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80453da:	4638      	mov	r0, r7
 80453dc:	f001 fa02 	bl	80467e4 <SDIO_Init>
  hsd->State = HAL_SD_STATE_READY;
 80453e0:	2301      	movs	r3, #1
 80453e2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 80453e6:	4628      	mov	r0, r5
 80453e8:	e7b7      	b.n	804535a <HAL_SD_ConfigWideBusOperation+0x72>
 80453ea:	bf00      	nop
 80453ec:	004005ff 	.word	0x004005ff

080453f0 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80453f0:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 80453f2:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80453f4:	0409      	lsls	r1, r1, #16
{
 80453f6:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80453f8:	6800      	ldr	r0, [r0, #0]
 80453fa:	f001 fc3b 	bl	8046c74 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 80453fe:	4601      	mov	r1, r0
 8045400:	b928      	cbnz	r0, 804540e <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8045402:	6820      	ldr	r0, [r4, #0]
 8045404:	f001 fa31 	bl	804686a <SDIO_GetResponse>
}
 8045408:	f3c0 2043 	ubfx	r0, r0, #9, #4
 804540c:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 804540e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8045410:	4319      	orrs	r1, r3
 8045412:	63a1      	str	r1, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 8045414:	2000      	movs	r0, #0
 8045416:	e7f7      	b.n	8045408 <HAL_SD_GetCardState+0x18>

08045418 <SD_DMAError>:
{
 8045418:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 804541a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 804541c:	f7fe faa6 	bl	804396c <HAL_DMA_GetError>
 8045420:	2802      	cmp	r0, #2
 8045422:	d026      	beq.n	8045472 <SD_DMAError+0x5a>
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8045424:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8045426:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8045428:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 804542a:	2a01      	cmp	r2, #1
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 804542c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 804542e:	d001      	beq.n	8045434 <SD_DMAError+0x1c>
 8045430:	2b01      	cmp	r3, #1
 8045432:	d11b      	bne.n	804546c <SD_DMAError+0x54>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8045434:	6823      	ldr	r3, [r4, #0]
 8045436:	4a0f      	ldr	r2, [pc, #60]	; (8045474 <SD_DMAError+0x5c>)
 8045438:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 804543a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 804543c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8045440:	63da      	str	r2, [r3, #60]	; 0x3c
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8045442:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8045444:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8045448:	63a3      	str	r3, [r4, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 804544a:	4620      	mov	r0, r4
 804544c:	f7ff ffd0 	bl	80453f0 <HAL_SD_GetCardState>
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8045450:	3805      	subs	r0, #5
 8045452:	2801      	cmp	r0, #1
 8045454:	d805      	bhi.n	8045462 <SD_DMAError+0x4a>
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8045456:	6820      	ldr	r0, [r4, #0]
 8045458:	f001 fa96 	bl	8046988 <SDMMC_CmdStopTransfer>
 804545c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 804545e:	4318      	orrs	r0, r3
 8045460:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8045462:	2301      	movs	r3, #1
 8045464:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8045468:	2300      	movs	r3, #0
 804546a:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_SD_ErrorCallback(hsd);
 804546c:	4620      	mov	r0, r4
 804546e:	f7ff fd41 	bl	8044ef4 <HAL_SD_ErrorCallback>
}
 8045472:	bd10      	pop	{r4, pc}
 8045474:	004005ff 	.word	0x004005ff

08045478 <SD_DMATxAbort>:
{
 8045478:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 804547a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 804547c:	6823      	ldr	r3, [r4, #0]
 804547e:	f240 523a 	movw	r2, #1338	; 0x53a
 8045482:	639a      	str	r2, [r3, #56]	; 0x38
  CardState = HAL_SD_GetCardState(hsd);
 8045484:	4620      	mov	r0, r4
 8045486:	f7ff ffb3 	bl	80453f0 <HAL_SD_GetCardState>
  hsd->State = HAL_SD_STATE_READY;
 804548a:	2301      	movs	r3, #1
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 804548c:	3805      	subs	r0, #5
  hsd->State = HAL_SD_STATE_READY;
 804548e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8045492:	2801      	cmp	r0, #1
  hsd->Context = SD_CONTEXT_NONE;
 8045494:	f04f 0300 	mov.w	r3, #0
 8045498:	6323      	str	r3, [r4, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 804549a:	d805      	bhi.n	80454a8 <SD_DMATxAbort+0x30>
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 804549c:	6820      	ldr	r0, [r4, #0]
 804549e:	f001 fa73 	bl	8046988 <SDMMC_CmdStopTransfer>
 80454a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80454a4:	4318      	orrs	r0, r3
 80454a6:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80454a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    HAL_SD_AbortCallback(hsd);
 80454aa:	4620      	mov	r0, r4
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80454ac:	b913      	cbnz	r3, 80454b4 <SD_DMATxAbort+0x3c>
    HAL_SD_AbortCallback(hsd);
 80454ae:	f7fd fcc0 	bl	8042e32 <HAL_SD_AbortCallback>
}
 80454b2:	bd10      	pop	{r4, pc}
    HAL_SD_ErrorCallback(hsd);
 80454b4:	f7ff fd1e 	bl	8044ef4 <HAL_SD_ErrorCallback>
}
 80454b8:	e7fb      	b.n	80454b2 <SD_DMATxAbort+0x3a>
	...

080454bc <HAL_SD_IRQHandler>:
{
 80454bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t context = hsd->Context;
 80454c0:	6b05      	ldr	r5, [r0, #48]	; 0x30
{
 80454c2:	4604      	mov	r4, r0
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80454c4:	6800      	ldr	r0, [r0, #0]
 80454c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80454c8:	041a      	lsls	r2, r3, #16
 80454ca:	d51f      	bpl.n	804550c <HAL_SD_IRQHandler+0x50>
 80454cc:	072b      	lsls	r3, r5, #28
 80454ce:	d51d      	bpl.n	804550c <HAL_SD_IRQHandler+0x50>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
  dataremaining = hsd->RxXferSize;
 80454d0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c

  if (dataremaining > 0U)
 80454d2:	b1c7      	cbz	r7, 8045506 <HAL_SD_IRQHandler+0x4a>
  tmp = hsd->pRxBuffPtr;
 80454d4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80454d6:	1d35      	adds	r5, r6, #4
 80454d8:	f106 0824 	add.w	r8, r6, #36	; 0x24
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80454dc:	6820      	ldr	r0, [r4, #0]
 80454de:	f001 f99d 	bl	804681c <SDIO_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80454e2:	0a03      	lsrs	r3, r0, #8
      *tmp = (uint8_t)(data & 0xFFU);
 80454e4:	f805 0c04 	strb.w	r0, [r5, #-4]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80454e8:	f805 3c03 	strb.w	r3, [r5, #-3]
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80454ec:	0c03      	lsrs	r3, r0, #16
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80454ee:	0e00      	lsrs	r0, r0, #24
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80454f0:	f805 3c02 	strb.w	r3, [r5, #-2]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80454f4:	f805 0c01 	strb.w	r0, [r5, #-1]
 80454f8:	3504      	adds	r5, #4
    for(count = 0U; count < 8U; count++)
 80454fa:	4545      	cmp	r5, r8
 80454fc:	d1ee      	bne.n	80454dc <HAL_SD_IRQHandler+0x20>
      tmp++;
      dataremaining--;
    }

    hsd->pRxBuffPtr = tmp;
 80454fe:	3620      	adds	r6, #32
    hsd->RxXferSize = dataremaining;
 8045500:	3f20      	subs	r7, #32
    hsd->pRxBuffPtr = tmp;
 8045502:	62a6      	str	r6, [r4, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8045504:	62e7      	str	r7, [r4, #44]	; 0x2c
}
 8045506:	b002      	add	sp, #8
 8045508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 804550c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 804550e:	05df      	lsls	r7, r3, #23
 8045510:	d545      	bpl.n	804559e <HAL_SD_IRQHandler+0xe2>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8045512:	f44f 7380 	mov.w	r3, #256	; 0x100
 8045516:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8045518:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 804551a:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 804551e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8045522:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8045524:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 8045526:	072e      	lsls	r6, r5, #28
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8045528:	f023 0301 	bic.w	r3, r3, #1
 804552c:	62c3      	str	r3, [r0, #44]	; 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 804552e:	d51b      	bpl.n	8045568 <HAL_SD_IRQHandler+0xac>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8045530:	f015 0f22 	tst.w	r5, #34	; 0x22
 8045534:	d008      	beq.n	8045548 <HAL_SD_IRQHandler+0x8c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8045536:	f001 fa27 	bl	8046988 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 804553a:	b128      	cbz	r0, 8045548 <HAL_SD_IRQHandler+0x8c>
          hsd->ErrorCode |= errorstate;
 804553c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 804553e:	4318      	orrs	r0, r3
 8045540:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8045542:	4620      	mov	r0, r4
 8045544:	f7ff fcd6 	bl	8044ef4 <HAL_SD_ErrorCallback>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8045548:	6823      	ldr	r3, [r4, #0]
 804554a:	f240 523a 	movw	r2, #1338	; 0x53a
 804554e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8045550:	2301      	movs	r3, #1
 8045552:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8045556:	07a9      	lsls	r1, r5, #30
      hsd->Context = SD_CONTEXT_NONE;
 8045558:	f04f 0300 	mov.w	r3, #0
 804555c:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_SD_RxCpltCallback(hsd);
 804555e:	4620      	mov	r0, r4
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8045560:	d01a      	beq.n	8045598 <HAL_SD_IRQHandler+0xdc>
        HAL_SD_RxCpltCallback(hsd);
 8045562:	f7fd fc6e 	bl	8042e42 <HAL_SD_RxCpltCallback>
 8045566:	e7ce      	b.n	8045506 <HAL_SD_IRQHandler+0x4a>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8045568:	062a      	lsls	r2, r5, #24
 804556a:	d5cc      	bpl.n	8045506 <HAL_SD_IRQHandler+0x4a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 804556c:	06ab      	lsls	r3, r5, #26
 804556e:	d508      	bpl.n	8045582 <HAL_SD_IRQHandler+0xc6>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8045570:	f001 fa0a 	bl	8046988 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8045574:	b128      	cbz	r0, 8045582 <HAL_SD_IRQHandler+0xc6>
          hsd->ErrorCode |= errorstate;
 8045576:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8045578:	4318      	orrs	r0, r3
 804557a:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 804557c:	4620      	mov	r0, r4
 804557e:	f7ff fcb9 	bl	8044ef4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8045582:	07af      	lsls	r7, r5, #30
 8045584:	d1bf      	bne.n	8045506 <HAL_SD_IRQHandler+0x4a>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8045586:	6822      	ldr	r2, [r4, #0]
 8045588:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 804558a:	f023 0308 	bic.w	r3, r3, #8
 804558e:	62d3      	str	r3, [r2, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8045590:	2301      	movs	r3, #1
 8045592:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8045596:	4620      	mov	r0, r4
 8045598:	f7fd fc4f 	bl	8042e3a <HAL_SD_TxCpltCallback>
 804559c:	e7b3      	b.n	8045506 <HAL_SD_IRQHandler+0x4a>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 804559e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80455a0:	045e      	lsls	r6, r3, #17
 80455a2:	d526      	bpl.n	80455f2 <HAL_SD_IRQHandler+0x136>
 80455a4:	0729      	lsls	r1, r5, #28
 80455a6:	d524      	bpl.n	80455f2 <HAL_SD_IRQHandler+0x136>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
  dataremaining = hsd->TxXferSize;
 80455a8:	6a67      	ldr	r7, [r4, #36]	; 0x24

  if (dataremaining > 0U)
 80455aa:	2f00      	cmp	r7, #0
 80455ac:	d0ab      	beq.n	8045506 <HAL_SD_IRQHandler+0x4a>
  tmp = hsd->pTxBuffPtr;
 80455ae:	6a26      	ldr	r6, [r4, #32]
 80455b0:	1d35      	adds	r5, r6, #4
 80455b2:	f106 0824 	add.w	r8, r6, #36	; 0x24
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
    {
      data = (uint32_t)(*tmp);
 80455b6:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 80455ba:	9301      	str	r3, [sp, #4]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 8U);
 80455bc:	f815 2c03 	ldrb.w	r2, [r5, #-3]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 24U);
      tmp++;
      dataremaining--;
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80455c0:	6820      	ldr	r0, [r4, #0]
      data |= ((uint32_t)(*tmp) << 8U);
 80455c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80455c6:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 80455c8:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 80455cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80455d0:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 80455d2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80455d6:	a901      	add	r1, sp, #4
      data |= ((uint32_t)(*tmp) << 24U);
 80455d8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80455dc:	3504      	adds	r5, #4
 80455de:	9301      	str	r3, [sp, #4]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80455e0:	f001 f91f 	bl	8046822 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80455e4:	4545      	cmp	r5, r8
 80455e6:	d1e6      	bne.n	80455b6 <HAL_SD_IRQHandler+0xfa>
    }

    hsd->pTxBuffPtr = tmp;
 80455e8:	3620      	adds	r6, #32
    hsd->TxXferSize = dataremaining;
 80455ea:	3f20      	subs	r7, #32
    hsd->pTxBuffPtr = tmp;
 80455ec:	6226      	str	r6, [r4, #32]
    hsd->TxXferSize = dataremaining;
 80455ee:	6267      	str	r7, [r4, #36]	; 0x24
 80455f0:	e789      	b.n	8045506 <HAL_SD_IRQHandler+0x4a>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80455f2:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80455f4:	f240 233a 	movw	r3, #570	; 0x23a
 80455f8:	421a      	tst	r2, r3
 80455fa:	d084      	beq.n	8045506 <HAL_SD_IRQHandler+0x4a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80455fc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80455fe:	079a      	lsls	r2, r3, #30
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8045600:	bf42      	ittt	mi
 8045602:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8045604:	f043 0302 	orrmi.w	r3, r3, #2
 8045608:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 804560a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 804560c:	071b      	lsls	r3, r3, #28
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 804560e:	bf42      	ittt	mi
 8045610:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8045612:	f043 0308 	orrmi.w	r3, r3, #8
 8045616:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8045618:	6b43      	ldr	r3, [r0, #52]	; 0x34
 804561a:	069f      	lsls	r7, r3, #26
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 804561c:	bf42      	ittt	mi
 804561e:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8045620:	f043 0320 	orrmi.w	r3, r3, #32
 8045624:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8045626:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8045628:	06de      	lsls	r6, r3, #27
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 804562a:	bf42      	ittt	mi
 804562c:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 804562e:	f043 0310 	orrmi.w	r3, r3, #16
 8045632:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8045634:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8045636:	0599      	lsls	r1, r3, #22
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8045638:	bf42      	ittt	mi
 804563a:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 804563c:	f043 0308 	orrmi.w	r3, r3, #8
 8045640:	63a3      	strmi	r3, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8045642:	f240 733a 	movw	r3, #1850	; 0x73a
 8045646:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8045648:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 804564a:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 804564e:	f023 0302 	bic.w	r3, r3, #2
 8045652:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8045654:	f001 f998 	bl	8046988 <SDMMC_CmdStopTransfer>
 8045658:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 804565a:	072a      	lsls	r2, r5, #28
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 804565c:	ea40 0003 	orr.w	r0, r0, r3
 8045660:	63a0      	str	r0, [r4, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8045662:	d508      	bpl.n	8045676 <HAL_SD_IRQHandler+0x1ba>
      hsd->State = HAL_SD_STATE_READY;
 8045664:	2301      	movs	r3, #1
 8045666:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 804566a:	2300      	movs	r3, #0
 804566c:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 804566e:	4620      	mov	r0, r4
 8045670:	f7ff fc40 	bl	8044ef4 <HAL_SD_ErrorCallback>
 8045674:	e747      	b.n	8045506 <HAL_SD_IRQHandler+0x4a>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8045676:	062b      	lsls	r3, r5, #24
 8045678:	f57f af45 	bpl.w	8045506 <HAL_SD_IRQHandler+0x4a>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 804567c:	f015 0f30 	tst.w	r5, #48	; 0x30
 8045680:	d00b      	beq.n	804569a <HAL_SD_IRQHandler+0x1de>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8045682:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8045684:	4b10      	ldr	r3, [pc, #64]	; (80456c8 <HAL_SD_IRQHandler+0x20c>)
 8045686:	6503      	str	r3, [r0, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8045688:	f7fe f8a0 	bl	80437cc <HAL_DMA_Abort_IT>
 804568c:	2800      	cmp	r0, #0
 804568e:	f43f af3a 	beq.w	8045506 <HAL_SD_IRQHandler+0x4a>
          SD_DMATxAbort(hsd->hdmatx);
 8045692:	6be0      	ldr	r0, [r4, #60]	; 0x3c
          SD_DMARxAbort(hsd->hdmarx);
 8045694:	f7ff fef0 	bl	8045478 <SD_DMATxAbort>
 8045698:	e735      	b.n	8045506 <HAL_SD_IRQHandler+0x4a>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 804569a:	f015 0503 	ands.w	r5, r5, #3
 804569e:	d009      	beq.n	80456b4 <HAL_SD_IRQHandler+0x1f8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80456a0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80456a2:	4b0a      	ldr	r3, [pc, #40]	; (80456cc <HAL_SD_IRQHandler+0x210>)
 80456a4:	6503      	str	r3, [r0, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80456a6:	f7fe f891 	bl	80437cc <HAL_DMA_Abort_IT>
 80456aa:	2800      	cmp	r0, #0
 80456ac:	f43f af2b 	beq.w	8045506 <HAL_SD_IRQHandler+0x4a>
          SD_DMARxAbort(hsd->hdmarx);
 80456b0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80456b2:	e7ef      	b.n	8045694 <HAL_SD_IRQHandler+0x1d8>
        hsd->State = HAL_SD_STATE_READY;
 80456b4:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80456b6:	63a5      	str	r5, [r4, #56]	; 0x38
        HAL_SD_AbortCallback(hsd);
 80456b8:	4620      	mov	r0, r4
        hsd->State = HAL_SD_STATE_READY;
 80456ba:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80456be:	6325      	str	r5, [r4, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80456c0:	f7fd fbb7 	bl	8042e32 <HAL_SD_AbortCallback>
}
 80456c4:	e71f      	b.n	8045506 <HAL_SD_IRQHandler+0x4a>
 80456c6:	bf00      	nop
 80456c8:	08045479 	.word	0x08045479
 80456cc:	080456d1 	.word	0x080456d1

080456d0 <SD_DMARxAbort>:
 80456d0:	f7ff bed2 	b.w	8045478 <SD_DMATxAbort>

080456d4 <SPI_WaitFlagStateUntilTimeout.constprop.7>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80456d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80456d6:	4604      	mov	r4, r0
 80456d8:	460e      	mov	r6, r1
 80456da:	4615      	mov	r5, r2
 80456dc:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80456de:	6821      	ldr	r1, [r4, #0]
 80456e0:	688a      	ldr	r2, [r1, #8]
 80456e2:	ea36 0302 	bics.w	r3, r6, r2
 80456e6:	d001      	beq.n	80456ec <SPI_WaitFlagStateUntilTimeout.constprop.7+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80456e8:	2000      	movs	r0, #0
 80456ea:	e02d      	b.n	8045748 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x74>
    if (Timeout != HAL_MAX_DELAY)
 80456ec:	1c6b      	adds	r3, r5, #1
 80456ee:	d0f7      	beq.n	80456e0 <SPI_WaitFlagStateUntilTimeout.constprop.7+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80456f0:	f7fd fce4 	bl	80430bc <HAL_GetTick>
 80456f4:	1bc0      	subs	r0, r0, r7
 80456f6:	4285      	cmp	r5, r0
 80456f8:	d8f1      	bhi.n	80456de <SPI_WaitFlagStateUntilTimeout.constprop.7+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80456fa:	6823      	ldr	r3, [r4, #0]
 80456fc:	685a      	ldr	r2, [r3, #4]
 80456fe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8045702:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8045704:	6862      	ldr	r2, [r4, #4]
 8045706:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 804570a:	d10a      	bne.n	8045722 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x4e>
 804570c:	68a2      	ldr	r2, [r4, #8]
 804570e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8045712:	d002      	beq.n	804571a <SPI_WaitFlagStateUntilTimeout.constprop.7+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8045714:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8045718:	d103      	bne.n	8045722 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x4e>
          __HAL_SPI_DISABLE(hspi);
 804571a:	681a      	ldr	r2, [r3, #0]
 804571c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8045720:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8045722:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8045724:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8045728:	d107      	bne.n	804573a <SPI_WaitFlagStateUntilTimeout.constprop.7+0x66>
          SPI_RESET_CRC(hspi);
 804572a:	681a      	ldr	r2, [r3, #0]
 804572c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8045730:	601a      	str	r2, [r3, #0]
 8045732:	681a      	ldr	r2, [r3, #0]
 8045734:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8045738:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 804573a:	2301      	movs	r3, #1
 804573c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8045740:	2300      	movs	r3, #0
 8045742:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8045746:	2003      	movs	r0, #3
}
 8045748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0804574c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 804574c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 804574e:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8045750:	4a12      	ldr	r2, [pc, #72]	; (804579c <SPI_EndRxTxTransaction+0x50>)
 8045752:	4e13      	ldr	r6, [pc, #76]	; (80457a0 <SPI_EndRxTxTransaction+0x54>)
 8045754:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8045756:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8045758:	fbb5 f6f6 	udiv	r6, r5, r6
 804575c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8045760:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8045762:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8045766:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8045768:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 804576a:	d10b      	bne.n	8045784 <SPI_EndRxTxTransaction+0x38>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 804576c:	460a      	mov	r2, r1
 804576e:	2180      	movs	r1, #128	; 0x80
 8045770:	f7ff ffb0 	bl	80456d4 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 8045774:	b178      	cbz	r0, 8045796 <SPI_EndRxTxTransaction+0x4a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8045776:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8045778:	f043 0320 	orr.w	r3, r3, #32
 804577c:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 804577e:	2003      	movs	r0, #3
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 8045780:	b002      	add	sp, #8
 8045782:	bd70      	pop	{r4, r5, r6, pc}
      if (count == 0U)
 8045784:	9b01      	ldr	r3, [sp, #4]
 8045786:	b133      	cbz	r3, 8045796 <SPI_EndRxTxTransaction+0x4a>
      count--;
 8045788:	9b01      	ldr	r3, [sp, #4]
 804578a:	3b01      	subs	r3, #1
 804578c:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 804578e:	6823      	ldr	r3, [r4, #0]
 8045790:	689b      	ldr	r3, [r3, #8]
 8045792:	061b      	lsls	r3, r3, #24
 8045794:	d4f6      	bmi.n	8045784 <SPI_EndRxTxTransaction+0x38>
  return HAL_OK;
 8045796:	2000      	movs	r0, #0
 8045798:	e7f2      	b.n	8045780 <SPI_EndRxTxTransaction+0x34>
 804579a:	bf00      	nop
 804579c:	200010cc 	.word	0x200010cc
 80457a0:	016e3600 	.word	0x016e3600

080457a4 <HAL_SPI_Init>:
{
 80457a4:	b510      	push	{r4, lr}
  if (hspi == NULL)
 80457a6:	4604      	mov	r4, r0
 80457a8:	2800      	cmp	r0, #0
 80457aa:	d036      	beq.n	804581a <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80457ac:	2300      	movs	r3, #0
 80457ae:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80457b0:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80457b4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80457b8:	b91b      	cbnz	r3, 80457c2 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 80457ba:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80457be:	f009 fd39 	bl	804f234 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 80457c2:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80457c4:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 80457c6:	2302      	movs	r3, #2
 80457c8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80457cc:	680b      	ldr	r3, [r1, #0]
 80457ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80457d2:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80457d4:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 80457d8:	4303      	orrs	r3, r0
 80457da:	68e0      	ldr	r0, [r4, #12]
 80457dc:	4303      	orrs	r3, r0
 80457de:	6920      	ldr	r0, [r4, #16]
 80457e0:	4303      	orrs	r3, r0
 80457e2:	6960      	ldr	r0, [r4, #20]
 80457e4:	4303      	orrs	r3, r0
 80457e6:	69e0      	ldr	r0, [r4, #28]
 80457e8:	4303      	orrs	r3, r0
 80457ea:	6a20      	ldr	r0, [r4, #32]
 80457ec:	4303      	orrs	r3, r0
 80457ee:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80457f0:	4303      	orrs	r3, r0
 80457f2:	f402 7000 	and.w	r0, r2, #512	; 0x200
 80457f6:	4303      	orrs	r3, r0
 80457f8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80457fa:	0c12      	lsrs	r2, r2, #16
 80457fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80457fe:	f002 0204 	and.w	r2, r2, #4
 8045802:	431a      	orrs	r2, r3
 8045804:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8045806:	69cb      	ldr	r3, [r1, #28]
 8045808:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 804580c:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 804580e:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8045810:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8045812:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8045814:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8045818:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 804581a:	2001      	movs	r0, #1
 804581c:	e7fc      	b.n	8045818 <HAL_SPI_Init+0x74>

0804581e <HAL_SPI_TransmitReceive>:
{
 804581e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8045822:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8045824:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8045828:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 804582a:	2b01      	cmp	r3, #1
{
 804582c:	4604      	mov	r4, r0
 804582e:	460d      	mov	r5, r1
 8045830:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8045832:	f000 80e2 	beq.w	80459fa <HAL_SPI_TransmitReceive+0x1dc>
 8045836:	2301      	movs	r3, #1
 8045838:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 804583c:	f7fd fc3e 	bl	80430bc <HAL_GetTick>
  tmp_state           = hspi->State;
 8045840:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8045844:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8045846:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8045848:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 804584a:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 804584c:	d00a      	beq.n	8045864 <HAL_SPI_TransmitReceive+0x46>
 804584e:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8045852:	f040 80d0 	bne.w	80459f6 <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8045856:	68a0      	ldr	r0, [r4, #8]
 8045858:	2800      	cmp	r0, #0
 804585a:	f040 80cc 	bne.w	80459f6 <HAL_SPI_TransmitReceive+0x1d8>
 804585e:	2b04      	cmp	r3, #4
 8045860:	f040 80c9 	bne.w	80459f6 <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8045864:	2d00      	cmp	r5, #0
 8045866:	f000 80c4 	beq.w	80459f2 <HAL_SPI_TransmitReceive+0x1d4>
 804586a:	f1b9 0f00 	cmp.w	r9, #0
 804586e:	f000 80c0 	beq.w	80459f2 <HAL_SPI_TransmitReceive+0x1d4>
 8045872:	2e00      	cmp	r6, #0
 8045874:	f000 80bd 	beq.w	80459f2 <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8045878:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 804587c:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8045880:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8045882:	bf1c      	itt	ne
 8045884:	2305      	movne	r3, #5
 8045886:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 804588a:	2300      	movs	r3, #0
 804588c:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 804588e:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8045892:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8045894:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8045896:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8045898:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 804589a:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 804589c:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 804589e:	bf58      	it	pl
 80458a0:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80458a2:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 80458a4:	bf58      	it	pl
 80458a6:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 80458aa:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 80458ac:	bf58      	it	pl
 80458ae:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80458b0:	68e2      	ldr	r2, [r4, #12]
 80458b2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80458b6:	d158      	bne.n	804596a <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80458b8:	b109      	cbz	r1, 80458be <HAL_SPI_TransmitReceive+0xa0>
 80458ba:	2e01      	cmp	r6, #1
 80458bc:	d107      	bne.n	80458ce <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80458be:	f835 2b02 	ldrh.w	r2, [r5], #2
 80458c2:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80458c4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80458c6:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80458c8:	3b01      	subs	r3, #1
 80458ca:	b29b      	uxth	r3, r3
 80458cc:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80458ce:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80458d0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80458d2:	b29b      	uxth	r3, r3
 80458d4:	b9ab      	cbnz	r3, 8045902 <HAL_SPI_TransmitReceive+0xe4>
 80458d6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80458d8:	b29b      	uxth	r3, r3
 80458da:	b993      	cbnz	r3, 8045902 <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80458dc:	4642      	mov	r2, r8
 80458de:	4639      	mov	r1, r7
 80458e0:	4620      	mov	r0, r4
 80458e2:	f7ff ff33 	bl	804574c <SPI_EndRxTxTransaction>
 80458e6:	2800      	cmp	r0, #0
 80458e8:	f040 8081 	bne.w	80459ee <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80458ec:	68a3      	ldr	r3, [r4, #8]
 80458ee:	2b00      	cmp	r3, #0
 80458f0:	d132      	bne.n	8045958 <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80458f2:	6823      	ldr	r3, [r4, #0]
 80458f4:	9001      	str	r0, [sp, #4]
 80458f6:	68da      	ldr	r2, [r3, #12]
 80458f8:	9201      	str	r2, [sp, #4]
 80458fa:	689b      	ldr	r3, [r3, #8]
 80458fc:	9301      	str	r3, [sp, #4]
 80458fe:	9b01      	ldr	r3, [sp, #4]
 8045900:	e02a      	b.n	8045958 <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8045902:	6822      	ldr	r2, [r4, #0]
 8045904:	6893      	ldr	r3, [r2, #8]
 8045906:	0799      	lsls	r1, r3, #30
 8045908:	d50d      	bpl.n	8045926 <HAL_SPI_TransmitReceive+0x108>
 804590a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 804590c:	b29b      	uxth	r3, r3
 804590e:	b153      	cbz	r3, 8045926 <HAL_SPI_TransmitReceive+0x108>
 8045910:	b14d      	cbz	r5, 8045926 <HAL_SPI_TransmitReceive+0x108>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8045912:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8045914:	f833 1b02 	ldrh.w	r1, [r3], #2
 8045918:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 804591a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 804591c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 804591e:	3b01      	subs	r3, #1
 8045920:	b29b      	uxth	r3, r3
 8045922:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8045924:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8045926:	6893      	ldr	r3, [r2, #8]
 8045928:	07db      	lsls	r3, r3, #31
 804592a:	d50c      	bpl.n	8045946 <HAL_SPI_TransmitReceive+0x128>
 804592c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 804592e:	b29b      	uxth	r3, r3
 8045930:	b14b      	cbz	r3, 8045946 <HAL_SPI_TransmitReceive+0x128>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8045932:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8045934:	68d2      	ldr	r2, [r2, #12]
 8045936:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 804593a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 804593c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 804593e:	3b01      	subs	r3, #1
 8045940:	b29b      	uxth	r3, r3
 8045942:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8045944:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8045946:	f7fd fbb9 	bl	80430bc <HAL_GetTick>
 804594a:	eba0 0008 	sub.w	r0, r0, r8
 804594e:	4287      	cmp	r7, r0
 8045950:	d8be      	bhi.n	80458d0 <HAL_SPI_TransmitReceive+0xb2>
 8045952:	1c7e      	adds	r6, r7, #1
 8045954:	d0bc      	beq.n	80458d0 <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 8045956:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8045958:	2301      	movs	r3, #1
 804595a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 804595e:	2300      	movs	r3, #0
 8045960:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8045964:	b003      	add	sp, #12
 8045966:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 804596a:	b109      	cbz	r1, 8045970 <HAL_SPI_TransmitReceive+0x152>
 804596c:	2e01      	cmp	r6, #1
 804596e:	d108      	bne.n	8045982 <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8045970:	782a      	ldrb	r2, [r5, #0]
 8045972:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8045974:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8045976:	3301      	adds	r3, #1
 8045978:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 804597a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 804597c:	3b01      	subs	r3, #1
 804597e:	b29b      	uxth	r3, r3
 8045980:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8045982:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8045984:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8045986:	b29b      	uxth	r3, r3
 8045988:	b91b      	cbnz	r3, 8045992 <HAL_SPI_TransmitReceive+0x174>
 804598a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 804598c:	b29b      	uxth	r3, r3
 804598e:	2b00      	cmp	r3, #0
 8045990:	d0a4      	beq.n	80458dc <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8045992:	6822      	ldr	r2, [r4, #0]
 8045994:	6893      	ldr	r3, [r2, #8]
 8045996:	0798      	lsls	r0, r3, #30
 8045998:	d50e      	bpl.n	80459b8 <HAL_SPI_TransmitReceive+0x19a>
 804599a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 804599c:	b29b      	uxth	r3, r3
 804599e:	b15b      	cbz	r3, 80459b8 <HAL_SPI_TransmitReceive+0x19a>
 80459a0:	b155      	cbz	r5, 80459b8 <HAL_SPI_TransmitReceive+0x19a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80459a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80459a4:	781b      	ldrb	r3, [r3, #0]
 80459a6:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 80459a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80459aa:	3301      	adds	r3, #1
 80459ac:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80459ae:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80459b0:	3b01      	subs	r3, #1
 80459b2:	b29b      	uxth	r3, r3
 80459b4:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80459b6:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80459b8:	6822      	ldr	r2, [r4, #0]
 80459ba:	6893      	ldr	r3, [r2, #8]
 80459bc:	07d9      	lsls	r1, r3, #31
 80459be:	d50d      	bpl.n	80459dc <HAL_SPI_TransmitReceive+0x1be>
 80459c0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80459c2:	b29b      	uxth	r3, r3
 80459c4:	b153      	cbz	r3, 80459dc <HAL_SPI_TransmitReceive+0x1be>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80459c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80459c8:	68d2      	ldr	r2, [r2, #12]
 80459ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80459cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80459ce:	3301      	adds	r3, #1
 80459d0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80459d2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80459d4:	3b01      	subs	r3, #1
 80459d6:	b29b      	uxth	r3, r3
 80459d8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80459da:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80459dc:	f7fd fb6e 	bl	80430bc <HAL_GetTick>
 80459e0:	eba0 0008 	sub.w	r0, r0, r8
 80459e4:	4287      	cmp	r7, r0
 80459e6:	d8cd      	bhi.n	8045984 <HAL_SPI_TransmitReceive+0x166>
 80459e8:	1c7b      	adds	r3, r7, #1
 80459ea:	d0cb      	beq.n	8045984 <HAL_SPI_TransmitReceive+0x166>
 80459ec:	e7b3      	b.n	8045956 <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80459ee:	2320      	movs	r3, #32
 80459f0:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80459f2:	2001      	movs	r0, #1
 80459f4:	e7b0      	b.n	8045958 <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 80459f6:	2002      	movs	r0, #2
 80459f8:	e7ae      	b.n	8045958 <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 80459fa:	2002      	movs	r0, #2
 80459fc:	e7b2      	b.n	8045964 <HAL_SPI_TransmitReceive+0x146>

080459fe <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80459fe:	6803      	ldr	r3, [r0, #0]
 8045a00:	68da      	ldr	r2, [r3, #12]
 8045a02:	f042 0201 	orr.w	r2, r2, #1
 8045a06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8045a08:	689a      	ldr	r2, [r3, #8]
 8045a0a:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8045a0e:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8045a10:	bf1e      	ittt	ne
 8045a12:	681a      	ldrne	r2, [r3, #0]
 8045a14:	f042 0201 	orrne.w	r2, r2, #1
 8045a18:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8045a1a:	2000      	movs	r0, #0
 8045a1c:	4770      	bx	lr

08045a1e <HAL_TIM_Base_Stop_IT>:
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8045a1e:	6803      	ldr	r3, [r0, #0]
 8045a20:	68da      	ldr	r2, [r3, #12]
 8045a22:	f022 0201 	bic.w	r2, r2, #1
 8045a26:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8045a28:	6a19      	ldr	r1, [r3, #32]
 8045a2a:	f241 1211 	movw	r2, #4369	; 0x1111
 8045a2e:	4211      	tst	r1, r2
 8045a30:	d108      	bne.n	8045a44 <HAL_TIM_Base_Stop_IT+0x26>
 8045a32:	6a19      	ldr	r1, [r3, #32]
 8045a34:	f240 4244 	movw	r2, #1092	; 0x444
 8045a38:	4211      	tst	r1, r2
 8045a3a:	bf02      	ittt	eq
 8045a3c:	681a      	ldreq	r2, [r3, #0]
 8045a3e:	f022 0201 	biceq.w	r2, r2, #1
 8045a42:	601a      	streq	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8045a44:	2000      	movs	r0, #0
 8045a46:	4770      	bx	lr

08045a48 <HAL_TIM_PeriodElapsedCallback>:
 8045a48:	4770      	bx	lr

08045a4a <HAL_TIM_OC_DelayElapsedCallback>:
 8045a4a:	4770      	bx	lr

08045a4c <HAL_TIM_IC_CaptureCallback>:
 8045a4c:	4770      	bx	lr

08045a4e <HAL_TIM_PWM_PulseFinishedCallback>:
 8045a4e:	4770      	bx	lr

08045a50 <HAL_TIM_TriggerCallback>:
 8045a50:	4770      	bx	lr

08045a52 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8045a52:	6803      	ldr	r3, [r0, #0]
 8045a54:	691a      	ldr	r2, [r3, #16]
 8045a56:	0791      	lsls	r1, r2, #30
{
 8045a58:	b510      	push	{r4, lr}
 8045a5a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8045a5c:	d50e      	bpl.n	8045a7c <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8045a5e:	68da      	ldr	r2, [r3, #12]
 8045a60:	0792      	lsls	r2, r2, #30
 8045a62:	d50b      	bpl.n	8045a7c <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8045a64:	f06f 0202 	mvn.w	r2, #2
 8045a68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8045a6a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8045a6c:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8045a6e:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8045a70:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8045a72:	d077      	beq.n	8045b64 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8045a74:	f7ff ffea 	bl	8045a4c <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8045a78:	2300      	movs	r3, #0
 8045a7a:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8045a7c:	6823      	ldr	r3, [r4, #0]
 8045a7e:	691a      	ldr	r2, [r3, #16]
 8045a80:	0750      	lsls	r0, r2, #29
 8045a82:	d510      	bpl.n	8045aa6 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8045a84:	68da      	ldr	r2, [r3, #12]
 8045a86:	0751      	lsls	r1, r2, #29
 8045a88:	d50d      	bpl.n	8045aa6 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8045a8a:	f06f 0204 	mvn.w	r2, #4
 8045a8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8045a90:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8045a92:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8045a94:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8045a98:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8045a9a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8045a9c:	d068      	beq.n	8045b70 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8045a9e:	f7ff ffd5 	bl	8045a4c <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8045aa2:	2300      	movs	r3, #0
 8045aa4:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8045aa6:	6823      	ldr	r3, [r4, #0]
 8045aa8:	691a      	ldr	r2, [r3, #16]
 8045aaa:	0712      	lsls	r2, r2, #28
 8045aac:	d50f      	bpl.n	8045ace <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8045aae:	68da      	ldr	r2, [r3, #12]
 8045ab0:	0710      	lsls	r0, r2, #28
 8045ab2:	d50c      	bpl.n	8045ace <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8045ab4:	f06f 0208 	mvn.w	r2, #8
 8045ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8045aba:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8045abc:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8045abe:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8045ac0:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8045ac2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8045ac4:	d05a      	beq.n	8045b7c <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8045ac6:	f7ff ffc1 	bl	8045a4c <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8045aca:	2300      	movs	r3, #0
 8045acc:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8045ace:	6823      	ldr	r3, [r4, #0]
 8045ad0:	691a      	ldr	r2, [r3, #16]
 8045ad2:	06d2      	lsls	r2, r2, #27
 8045ad4:	d510      	bpl.n	8045af8 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8045ad6:	68da      	ldr	r2, [r3, #12]
 8045ad8:	06d0      	lsls	r0, r2, #27
 8045ada:	d50d      	bpl.n	8045af8 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8045adc:	f06f 0210 	mvn.w	r2, #16
 8045ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8045ae2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8045ae4:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8045ae6:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8045aea:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8045aec:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8045aee:	d04b      	beq.n	8045b88 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8045af0:	f7ff ffac 	bl	8045a4c <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8045af4:	2300      	movs	r3, #0
 8045af6:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8045af8:	6823      	ldr	r3, [r4, #0]
 8045afa:	691a      	ldr	r2, [r3, #16]
 8045afc:	07d1      	lsls	r1, r2, #31
 8045afe:	d508      	bpl.n	8045b12 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8045b00:	68da      	ldr	r2, [r3, #12]
 8045b02:	07d2      	lsls	r2, r2, #31
 8045b04:	d505      	bpl.n	8045b12 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8045b06:	f06f 0201 	mvn.w	r2, #1
 8045b0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8045b0c:	4620      	mov	r0, r4
 8045b0e:	f7ff ff9b 	bl	8045a48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8045b12:	6823      	ldr	r3, [r4, #0]
 8045b14:	691a      	ldr	r2, [r3, #16]
 8045b16:	0610      	lsls	r0, r2, #24
 8045b18:	d508      	bpl.n	8045b2c <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8045b1a:	68da      	ldr	r2, [r3, #12]
 8045b1c:	0611      	lsls	r1, r2, #24
 8045b1e:	d505      	bpl.n	8045b2c <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8045b20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8045b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8045b26:	4620      	mov	r0, r4
 8045b28:	f000 f997 	bl	8045e5a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8045b2c:	6823      	ldr	r3, [r4, #0]
 8045b2e:	691a      	ldr	r2, [r3, #16]
 8045b30:	0652      	lsls	r2, r2, #25
 8045b32:	d508      	bpl.n	8045b46 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8045b34:	68da      	ldr	r2, [r3, #12]
 8045b36:	0650      	lsls	r0, r2, #25
 8045b38:	d505      	bpl.n	8045b46 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8045b3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8045b3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8045b40:	4620      	mov	r0, r4
 8045b42:	f7ff ff85 	bl	8045a50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8045b46:	6823      	ldr	r3, [r4, #0]
 8045b48:	691a      	ldr	r2, [r3, #16]
 8045b4a:	0691      	lsls	r1, r2, #26
 8045b4c:	d522      	bpl.n	8045b94 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8045b4e:	68da      	ldr	r2, [r3, #12]
 8045b50:	0692      	lsls	r2, r2, #26
 8045b52:	d51f      	bpl.n	8045b94 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8045b54:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8045b58:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8045b5a:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8045b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8045b60:	f000 b97a 	b.w	8045e58 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8045b64:	f7ff ff71 	bl	8045a4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8045b68:	4620      	mov	r0, r4
 8045b6a:	f7ff ff70 	bl	8045a4e <HAL_TIM_PWM_PulseFinishedCallback>
 8045b6e:	e783      	b.n	8045a78 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8045b70:	f7ff ff6b 	bl	8045a4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8045b74:	4620      	mov	r0, r4
 8045b76:	f7ff ff6a 	bl	8045a4e <HAL_TIM_PWM_PulseFinishedCallback>
 8045b7a:	e792      	b.n	8045aa2 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8045b7c:	f7ff ff65 	bl	8045a4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8045b80:	4620      	mov	r0, r4
 8045b82:	f7ff ff64 	bl	8045a4e <HAL_TIM_PWM_PulseFinishedCallback>
 8045b86:	e7a0      	b.n	8045aca <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8045b88:	f7ff ff5f 	bl	8045a4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8045b8c:	4620      	mov	r0, r4
 8045b8e:	f7ff ff5e 	bl	8045a4e <HAL_TIM_PWM_PulseFinishedCallback>
 8045b92:	e7af      	b.n	8045af4 <HAL_TIM_IRQHandler+0xa2>
}
 8045b94:	bd10      	pop	{r4, pc}
	...

08045b98 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8045b98:	4a30      	ldr	r2, [pc, #192]	; (8045c5c <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8045b9a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8045b9c:	4290      	cmp	r0, r2
 8045b9e:	d012      	beq.n	8045bc6 <TIM_Base_SetConfig+0x2e>
 8045ba0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8045ba4:	d00f      	beq.n	8045bc6 <TIM_Base_SetConfig+0x2e>
 8045ba6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8045baa:	4290      	cmp	r0, r2
 8045bac:	d00b      	beq.n	8045bc6 <TIM_Base_SetConfig+0x2e>
 8045bae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8045bb2:	4290      	cmp	r0, r2
 8045bb4:	d007      	beq.n	8045bc6 <TIM_Base_SetConfig+0x2e>
 8045bb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8045bba:	4290      	cmp	r0, r2
 8045bbc:	d003      	beq.n	8045bc6 <TIM_Base_SetConfig+0x2e>
 8045bbe:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8045bc2:	4290      	cmp	r0, r2
 8045bc4:	d119      	bne.n	8045bfa <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8045bc6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8045bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8045bcc:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8045bce:	4a23      	ldr	r2, [pc, #140]	; (8045c5c <TIM_Base_SetConfig+0xc4>)
 8045bd0:	4290      	cmp	r0, r2
 8045bd2:	d029      	beq.n	8045c28 <TIM_Base_SetConfig+0x90>
 8045bd4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8045bd8:	d026      	beq.n	8045c28 <TIM_Base_SetConfig+0x90>
 8045bda:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8045bde:	4290      	cmp	r0, r2
 8045be0:	d022      	beq.n	8045c28 <TIM_Base_SetConfig+0x90>
 8045be2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8045be6:	4290      	cmp	r0, r2
 8045be8:	d01e      	beq.n	8045c28 <TIM_Base_SetConfig+0x90>
 8045bea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8045bee:	4290      	cmp	r0, r2
 8045bf0:	d01a      	beq.n	8045c28 <TIM_Base_SetConfig+0x90>
 8045bf2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8045bf6:	4290      	cmp	r0, r2
 8045bf8:	d016      	beq.n	8045c28 <TIM_Base_SetConfig+0x90>
 8045bfa:	4a19      	ldr	r2, [pc, #100]	; (8045c60 <TIM_Base_SetConfig+0xc8>)
 8045bfc:	4290      	cmp	r0, r2
 8045bfe:	d013      	beq.n	8045c28 <TIM_Base_SetConfig+0x90>
 8045c00:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8045c04:	4290      	cmp	r0, r2
 8045c06:	d00f      	beq.n	8045c28 <TIM_Base_SetConfig+0x90>
 8045c08:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8045c0c:	4290      	cmp	r0, r2
 8045c0e:	d00b      	beq.n	8045c28 <TIM_Base_SetConfig+0x90>
 8045c10:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8045c14:	4290      	cmp	r0, r2
 8045c16:	d007      	beq.n	8045c28 <TIM_Base_SetConfig+0x90>
 8045c18:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8045c1c:	4290      	cmp	r0, r2
 8045c1e:	d003      	beq.n	8045c28 <TIM_Base_SetConfig+0x90>
 8045c20:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8045c24:	4290      	cmp	r0, r2
 8045c26:	d103      	bne.n	8045c30 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8045c28:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8045c2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8045c2e:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8045c30:	694a      	ldr	r2, [r1, #20]
 8045c32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8045c36:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8045c38:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8045c3a:	688b      	ldr	r3, [r1, #8]
 8045c3c:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8045c3e:	680b      	ldr	r3, [r1, #0]
 8045c40:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8045c42:	4b06      	ldr	r3, [pc, #24]	; (8045c5c <TIM_Base_SetConfig+0xc4>)
 8045c44:	4298      	cmp	r0, r3
 8045c46:	d003      	beq.n	8045c50 <TIM_Base_SetConfig+0xb8>
 8045c48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8045c4c:	4298      	cmp	r0, r3
 8045c4e:	d101      	bne.n	8045c54 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8045c50:	690b      	ldr	r3, [r1, #16]
 8045c52:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8045c54:	2301      	movs	r3, #1
 8045c56:	6143      	str	r3, [r0, #20]
}
 8045c58:	4770      	bx	lr
 8045c5a:	bf00      	nop
 8045c5c:	40010000 	.word	0x40010000
 8045c60:	40014000 	.word	0x40014000

08045c64 <HAL_TIM_Base_Init>:
{
 8045c64:	b510      	push	{r4, lr}
  if (htim == NULL)
 8045c66:	4604      	mov	r4, r0
 8045c68:	b1a0      	cbz	r0, 8045c94 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8045c6a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8045c6e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8045c72:	b91b      	cbnz	r3, 8045c7c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8045c74:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8045c78:	f008 fefc 	bl	804ea74 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8045c7c:	2302      	movs	r3, #2
 8045c7e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8045c82:	6820      	ldr	r0, [r4, #0]
 8045c84:	1d21      	adds	r1, r4, #4
 8045c86:	f7ff ff87 	bl	8045b98 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8045c8a:	2301      	movs	r3, #1
 8045c8c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8045c90:	2000      	movs	r0, #0
}
 8045c92:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8045c94:	2001      	movs	r0, #1
 8045c96:	e7fc      	b.n	8045c92 <HAL_TIM_Base_Init+0x2e>

08045c98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8045c98:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8045c9a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8045c9c:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8045c9e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8045ca2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8045ca6:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8045ca8:	6083      	str	r3, [r0, #8]
}
 8045caa:	bd10      	pop	{r4, pc}

08045cac <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8045cac:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8045cb0:	2b01      	cmp	r3, #1
{
 8045cb2:	b570      	push	{r4, r5, r6, lr}
 8045cb4:	4604      	mov	r4, r0
 8045cb6:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8045cba:	d019      	beq.n	8045cf0 <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 8045cbc:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8045cc0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8045cc2:	2301      	movs	r3, #1
 8045cc4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8045cc8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8045cca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8045cce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8045cd2:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8045cd4:	680b      	ldr	r3, [r1, #0]
 8045cd6:	2b40      	cmp	r3, #64	; 0x40
 8045cd8:	d065      	beq.n	8045da6 <HAL_TIM_ConfigClockSource+0xfa>
 8045cda:	d815      	bhi.n	8045d08 <HAL_TIM_ConfigClockSource+0x5c>
 8045cdc:	2b10      	cmp	r3, #16
 8045cde:	d00c      	beq.n	8045cfa <HAL_TIM_ConfigClockSource+0x4e>
 8045ce0:	d807      	bhi.n	8045cf2 <HAL_TIM_ConfigClockSource+0x46>
 8045ce2:	b153      	cbz	r3, 8045cfa <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8045ce4:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8045ce6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8045ce8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8045cec:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8045cf0:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8045cf2:	2b20      	cmp	r3, #32
 8045cf4:	d001      	beq.n	8045cfa <HAL_TIM_ConfigClockSource+0x4e>
 8045cf6:	2b30      	cmp	r3, #48	; 0x30
 8045cf8:	d1f4      	bne.n	8045ce4 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8045cfa:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8045cfc:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8045d00:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8045d04:	4313      	orrs	r3, r2
 8045d06:	e01a      	b.n	8045d3e <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8045d08:	2b60      	cmp	r3, #96	; 0x60
 8045d0a:	d034      	beq.n	8045d76 <HAL_TIM_ConfigClockSource+0xca>
 8045d0c:	d819      	bhi.n	8045d42 <HAL_TIM_ConfigClockSource+0x96>
 8045d0e:	2b50      	cmp	r3, #80	; 0x50
 8045d10:	d1e8      	bne.n	8045ce4 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8045d12:	684a      	ldr	r2, [r1, #4]
 8045d14:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8045d16:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8045d18:	6a05      	ldr	r5, [r0, #32]
 8045d1a:	f025 0501 	bic.w	r5, r5, #1
 8045d1e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8045d20:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8045d22:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8045d26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8045d2a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8045d2e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8045d30:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8045d32:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8045d34:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8045d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8045d3a:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8045d3e:	6083      	str	r3, [r0, #8]
 8045d40:	e7d0      	b.n	8045ce4 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8045d42:	2b70      	cmp	r3, #112	; 0x70
 8045d44:	d00c      	beq.n	8045d60 <HAL_TIM_ConfigClockSource+0xb4>
 8045d46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8045d4a:	d1cb      	bne.n	8045ce4 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8045d4c:	68cb      	ldr	r3, [r1, #12]
 8045d4e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8045d52:	f7ff ffa1 	bl	8045c98 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8045d56:	6822      	ldr	r2, [r4, #0]
 8045d58:	6893      	ldr	r3, [r2, #8]
 8045d5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8045d5e:	e008      	b.n	8045d72 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8045d60:	68cb      	ldr	r3, [r1, #12]
 8045d62:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8045d66:	f7ff ff97 	bl	8045c98 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8045d6a:	6822      	ldr	r2, [r4, #0]
 8045d6c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8045d6e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8045d72:	6093      	str	r3, [r2, #8]
      break;
 8045d74:	e7b6      	b.n	8045ce4 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8045d76:	684d      	ldr	r5, [r1, #4]
 8045d78:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8045d7a:	6a01      	ldr	r1, [r0, #32]
 8045d7c:	f021 0110 	bic.w	r1, r1, #16
 8045d80:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8045d82:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8045d84:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8045d86:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8045d8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8045d8e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8045d92:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8045d96:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8045d98:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8045d9a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8045d9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8045da0:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8045da4:	e7cb      	b.n	8045d3e <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8045da6:	684a      	ldr	r2, [r1, #4]
 8045da8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8045daa:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8045dac:	6a05      	ldr	r5, [r0, #32]
 8045dae:	f025 0501 	bic.w	r5, r5, #1
 8045db2:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8045db4:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8045db6:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8045dba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8045dbe:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8045dc2:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8045dc4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8045dc6:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8045dc8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8045dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8045dce:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8045dd2:	e7b4      	b.n	8045d3e <HAL_TIM_ConfigClockSource+0x92>

08045dd4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8045dd4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8045dd8:	2b01      	cmp	r3, #1
{
 8045dda:	b530      	push	{r4, r5, lr}
 8045ddc:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8045de0:	d035      	beq.n	8045e4e <HAL_TIMEx_MasterConfigSynchronization+0x7a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8045de2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8045de6:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8045de8:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8045dea:	685c      	ldr	r4, [r3, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8045dec:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  __HAL_LOCK(htim);
 8045df0:	2201      	movs	r2, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8045df2:	432c      	orrs	r4, r5
  __HAL_LOCK(htim);
 8045df4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8045df8:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8045dfa:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8045dfc:	4c15      	ldr	r4, [pc, #84]	; (8045e54 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 8045dfe:	42a3      	cmp	r3, r4
 8045e00:	d01a      	beq.n	8045e38 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8045e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8045e06:	d017      	beq.n	8045e38 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8045e08:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 8045e0c:	42a3      	cmp	r3, r4
 8045e0e:	d013      	beq.n	8045e38 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8045e10:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8045e14:	42a3      	cmp	r3, r4
 8045e16:	d00f      	beq.n	8045e38 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8045e18:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8045e1c:	42a3      	cmp	r3, r4
 8045e1e:	d00b      	beq.n	8045e38 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8045e20:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8045e24:	42a3      	cmp	r3, r4
 8045e26:	d007      	beq.n	8045e38 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8045e28:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 8045e2c:	42a3      	cmp	r3, r4
 8045e2e:	d003      	beq.n	8045e38 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8045e30:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8045e34:	42a3      	cmp	r3, r4
 8045e36:	d104      	bne.n	8045e42 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8045e38:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8045e3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8045e3e:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8045e40:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8045e42:	2301      	movs	r3, #1
 8045e44:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8045e48:	2300      	movs	r3, #0
 8045e4a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8045e4e:	4618      	mov	r0, r3

  return HAL_OK;
}
 8045e50:	bd30      	pop	{r4, r5, pc}
 8045e52:	bf00      	nop
 8045e54:	40010000 	.word	0x40010000

08045e58 <HAL_TIMEx_CommutCallback>:
 8045e58:	4770      	bx	lr

08045e5a <HAL_TIMEx_BreakCallback>:
 8045e5a:	4770      	bx	lr

08045e5c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8045e5c:	6803      	ldr	r3, [r0, #0]
 8045e5e:	68da      	ldr	r2, [r3, #12]
 8045e60:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8045e64:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8045e66:	695a      	ldr	r2, [r3, #20]
 8045e68:	f022 0201 	bic.w	r2, r2, #1
 8045e6c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8045e6e:	2320      	movs	r3, #32
 8045e70:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8045e74:	4770      	bx	lr
	...

08045e78 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8045e78:	6803      	ldr	r3, [r0, #0]
 8045e7a:	68c1      	ldr	r1, [r0, #12]
 8045e7c:	691a      	ldr	r2, [r3, #16]
{
 8045e7e:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8045e80:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
{
 8045e84:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8045e86:	430a      	orrs	r2, r1
 8045e88:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8045e8a:	6925      	ldr	r5, [r4, #16]
 8045e8c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 8045e8e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8045e90:	69c0      	ldr	r0, [r0, #28]
 8045e92:	432a      	orrs	r2, r5
 8045e94:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8045e96:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8045e9a:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8045e9c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8045ea0:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8045ea2:	430a      	orrs	r2, r1
 8045ea4:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8045ea6:	695a      	ldr	r2, [r3, #20]
 8045ea8:	69a1      	ldr	r1, [r4, #24]
 8045eaa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8045eae:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8045eb0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8045eb4:	615a      	str	r2, [r3, #20]
 8045eb6:	4a26      	ldr	r2, [pc, #152]	; (8045f50 <UART_SetConfig+0xd8>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8045eb8:	d129      	bne.n	8045f0e <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8045eba:	4293      	cmp	r3, r2
 8045ebc:	d003      	beq.n	8045ec6 <UART_SetConfig+0x4e>
 8045ebe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8045ec2:	4293      	cmp	r3, r2
 8045ec4:	d120      	bne.n	8045f08 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8045ec6:	f7fe fb0f 	bl	80444e8 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8045eca:	6862      	ldr	r2, [r4, #4]
 8045ecc:	2600      	movs	r6, #0
 8045ece:	1892      	adds	r2, r2, r2
 8045ed0:	f04f 0119 	mov.w	r1, #25
 8045ed4:	eb46 0306 	adc.w	r3, r6, r6
 8045ed8:	fba0 0101 	umull	r0, r1, r0, r1
 8045edc:	f7fa ff9e 	bl	8040e1c <__aeabi_uldivmod>
 8045ee0:	2164      	movs	r1, #100	; 0x64
 8045ee2:	fbb0 f5f1 	udiv	r5, r0, r1
 8045ee6:	fb01 0315 	mls	r3, r1, r5, r0
 8045eea:	00db      	lsls	r3, r3, #3
 8045eec:	3332      	adds	r3, #50	; 0x32
 8045eee:	fbb3 f3f1 	udiv	r3, r3, r1
 8045ef2:	f003 0207 	and.w	r2, r3, #7
 8045ef6:	005b      	lsls	r3, r3, #1
 8045ef8:	6821      	ldr	r1, [r4, #0]
 8045efa:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8045efe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8045f02:	4413      	add	r3, r2
 8045f04:	608b      	str	r3, [r1, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8045f06:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8045f08:	f7fe fade 	bl	80444c8 <HAL_RCC_GetPCLK1Freq>
 8045f0c:	e7dd      	b.n	8045eca <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8045f0e:	4293      	cmp	r3, r2
 8045f10:	d002      	beq.n	8045f18 <UART_SetConfig+0xa0>
 8045f12:	4a10      	ldr	r2, [pc, #64]	; (8045f54 <UART_SetConfig+0xdc>)
 8045f14:	4293      	cmp	r3, r2
 8045f16:	d117      	bne.n	8045f48 <UART_SetConfig+0xd0>
      pclk = HAL_RCC_GetPCLK2Freq();
 8045f18:	f7fe fae6 	bl	80444e8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8045f1c:	6863      	ldr	r3, [r4, #4]
 8045f1e:	2119      	movs	r1, #25
 8045f20:	009a      	lsls	r2, r3, #2
 8045f22:	fba0 0101 	umull	r0, r1, r0, r1
 8045f26:	0f9b      	lsrs	r3, r3, #30
 8045f28:	f7fa ff78 	bl	8040e1c <__aeabi_uldivmod>
 8045f2c:	2264      	movs	r2, #100	; 0x64
 8045f2e:	fbb0 f1f2 	udiv	r1, r0, r2
 8045f32:	fb02 0311 	mls	r3, r2, r1, r0
 8045f36:	6824      	ldr	r4, [r4, #0]
 8045f38:	011b      	lsls	r3, r3, #4
 8045f3a:	3332      	adds	r3, #50	; 0x32
 8045f3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8045f40:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8045f44:	60a3      	str	r3, [r4, #8]
}
 8045f46:	e7de      	b.n	8045f06 <UART_SetConfig+0x8e>
      pclk = HAL_RCC_GetPCLK1Freq();
 8045f48:	f7fe fabe 	bl	80444c8 <HAL_RCC_GetPCLK1Freq>
 8045f4c:	e7e6      	b.n	8045f1c <UART_SetConfig+0xa4>
 8045f4e:	bf00      	nop
 8045f50:	40011000 	.word	0x40011000
 8045f54:	40011400 	.word	0x40011400

08045f58 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8045f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8045f5a:	4604      	mov	r4, r0
 8045f5c:	460e      	mov	r6, r1
 8045f5e:	4617      	mov	r7, r2
 8045f60:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8045f62:	6821      	ldr	r1, [r4, #0]
 8045f64:	680b      	ldr	r3, [r1, #0]
 8045f66:	ea36 0303 	bics.w	r3, r6, r3
 8045f6a:	d101      	bne.n	8045f70 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8045f6c:	2000      	movs	r0, #0
 8045f6e:	e014      	b.n	8045f9a <UART_WaitOnFlagUntilTimeout.constprop.3+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8045f70:	1c6b      	adds	r3, r5, #1
 8045f72:	d0f7      	beq.n	8045f64 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8045f74:	b995      	cbnz	r5, 8045f9c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8045f76:	6823      	ldr	r3, [r4, #0]
 8045f78:	68da      	ldr	r2, [r3, #12]
 8045f7a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8045f7e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8045f80:	695a      	ldr	r2, [r3, #20]
 8045f82:	f022 0201 	bic.w	r2, r2, #1
 8045f86:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8045f88:	2320      	movs	r3, #32
 8045f8a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8045f8e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8045f92:	2300      	movs	r3, #0
 8045f94:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8045f98:	2003      	movs	r0, #3
}
 8045f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8045f9c:	f7fd f88e 	bl	80430bc <HAL_GetTick>
 8045fa0:	1bc0      	subs	r0, r0, r7
 8045fa2:	4285      	cmp	r5, r0
 8045fa4:	d2dd      	bcs.n	8045f62 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8045fa6:	e7e6      	b.n	8045f76 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08045fa8 <HAL_UART_Init>:
{
 8045fa8:	b510      	push	{r4, lr}
  if (huart == NULL)
 8045faa:	4604      	mov	r4, r0
 8045fac:	b340      	cbz	r0, 8046000 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8045fae:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8045fb2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8045fb6:	b91b      	cbnz	r3, 8045fc0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8045fb8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8045fbc:	f009 fdca 	bl	804fb54 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8045fc0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8045fc2:	2324      	movs	r3, #36	; 0x24
 8045fc4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8045fc8:	68d3      	ldr	r3, [r2, #12]
 8045fca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8045fce:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8045fd0:	4620      	mov	r0, r4
 8045fd2:	f7ff ff51 	bl	8045e78 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8045fd6:	6823      	ldr	r3, [r4, #0]
 8045fd8:	691a      	ldr	r2, [r3, #16]
 8045fda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8045fde:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8045fe0:	695a      	ldr	r2, [r3, #20]
 8045fe2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8045fe6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8045fe8:	68da      	ldr	r2, [r3, #12]
 8045fea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8045fee:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8045ff0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8045ff2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8045ff4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8045ff6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8045ffa:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8045ffe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8046000:	2001      	movs	r0, #1
 8046002:	e7fc      	b.n	8045ffe <HAL_UART_Init+0x56>

08046004 <HAL_UART_DeInit>:
{
 8046004:	b510      	push	{r4, lr}
  if (huart == NULL)
 8046006:	4604      	mov	r4, r0
 8046008:	b190      	cbz	r0, 8046030 <HAL_UART_DeInit+0x2c>
  __HAL_UART_DISABLE(huart);
 804600a:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 804600c:	2324      	movs	r3, #36	; 0x24
 804600e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8046012:	68d3      	ldr	r3, [r2, #12]
 8046014:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8046018:	60d3      	str	r3, [r2, #12]
  HAL_UART_MspDeInit(huart);
 804601a:	f009 fe8d 	bl	804fd38 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 804601e:	2000      	movs	r0, #0
 8046020:	63e0      	str	r0, [r4, #60]	; 0x3c
  __HAL_UNLOCK(huart);
 8046022:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  huart->gState = HAL_UART_STATE_RESET;
 8046026:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 804602a:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
}
 804602e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8046030:	2001      	movs	r0, #1
 8046032:	e7fc      	b.n	804602e <HAL_UART_DeInit+0x2a>

08046034 <HAL_UART_Transmit>:
{
 8046034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8046038:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 804603a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 804603e:	2b20      	cmp	r3, #32
{
 8046040:	4604      	mov	r4, r0
 8046042:	460d      	mov	r5, r1
 8046044:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8046046:	d14f      	bne.n	80460e8 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 8046048:	2900      	cmp	r1, #0
 804604a:	d04b      	beq.n	80460e4 <HAL_UART_Transmit+0xb0>
 804604c:	2a00      	cmp	r2, #0
 804604e:	d049      	beq.n	80460e4 <HAL_UART_Transmit+0xb0>
    __HAL_LOCK(huart);
 8046050:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8046054:	2b01      	cmp	r3, #1
 8046056:	d047      	beq.n	80460e8 <HAL_UART_Transmit+0xb4>
 8046058:	2301      	movs	r3, #1
 804605a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 804605e:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8046062:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8046064:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8046068:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 804606c:	f7fd f826 	bl	80430bc <HAL_GetTick>
    huart->TxXferSize = Size;
 8046070:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8046074:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8046076:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 804607a:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 804607e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8046080:	b29b      	uxth	r3, r3
 8046082:	b953      	cbnz	r3, 804609a <HAL_UART_Transmit+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8046084:	463b      	mov	r3, r7
 8046086:	4632      	mov	r2, r6
 8046088:	2140      	movs	r1, #64	; 0x40
 804608a:	4620      	mov	r0, r4
 804608c:	f7ff ff64 	bl	8045f58 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8046090:	b998      	cbnz	r0, 80460ba <HAL_UART_Transmit+0x86>
    huart->gState = HAL_UART_STATE_READY;
 8046092:	2320      	movs	r3, #32
 8046094:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8046098:	e010      	b.n	80460bc <HAL_UART_Transmit+0x88>
      huart->TxXferCount--;
 804609a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 804609c:	3b01      	subs	r3, #1
 804609e:	b29b      	uxth	r3, r3
 80460a0:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80460a2:	68a3      	ldr	r3, [r4, #8]
 80460a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80460a8:	4632      	mov	r2, r6
 80460aa:	463b      	mov	r3, r7
 80460ac:	f04f 0180 	mov.w	r1, #128	; 0x80
 80460b0:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80460b2:	d10e      	bne.n	80460d2 <HAL_UART_Transmit+0x9e>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80460b4:	f7ff ff50 	bl	8045f58 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80460b8:	b110      	cbz	r0, 80460c0 <HAL_UART_Transmit+0x8c>
          return HAL_TIMEOUT;
 80460ba:	2003      	movs	r0, #3
}
 80460bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80460c0:	882b      	ldrh	r3, [r5, #0]
 80460c2:	6822      	ldr	r2, [r4, #0]
 80460c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80460c8:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80460ca:	6923      	ldr	r3, [r4, #16]
 80460cc:	b943      	cbnz	r3, 80460e0 <HAL_UART_Transmit+0xac>
          pData += 2U;
 80460ce:	3502      	adds	r5, #2
 80460d0:	e7d5      	b.n	804607e <HAL_UART_Transmit+0x4a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80460d2:	f7ff ff41 	bl	8045f58 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80460d6:	2800      	cmp	r0, #0
 80460d8:	d1ef      	bne.n	80460ba <HAL_UART_Transmit+0x86>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80460da:	6823      	ldr	r3, [r4, #0]
 80460dc:	782a      	ldrb	r2, [r5, #0]
 80460de:	605a      	str	r2, [r3, #4]
 80460e0:	3501      	adds	r5, #1
 80460e2:	e7cc      	b.n	804607e <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 80460e4:	2001      	movs	r0, #1
 80460e6:	e7e9      	b.n	80460bc <HAL_UART_Transmit+0x88>
    return HAL_BUSY;
 80460e8:	2002      	movs	r0, #2
 80460ea:	e7e7      	b.n	80460bc <HAL_UART_Transmit+0x88>

080460ec <HAL_UART_Receive>:
{
 80460ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80460f0:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 80460f2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80460f6:	2b20      	cmp	r3, #32
{
 80460f8:	4604      	mov	r4, r0
 80460fa:	460d      	mov	r5, r1
 80460fc:	4690      	mov	r8, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 80460fe:	d155      	bne.n	80461ac <HAL_UART_Receive+0xc0>
    if ((pData == NULL) || (Size == 0U))
 8046100:	2900      	cmp	r1, #0
 8046102:	d051      	beq.n	80461a8 <HAL_UART_Receive+0xbc>
 8046104:	2a00      	cmp	r2, #0
 8046106:	d04f      	beq.n	80461a8 <HAL_UART_Receive+0xbc>
    __HAL_LOCK(huart);
 8046108:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 804610c:	2b01      	cmp	r3, #1
 804610e:	d04d      	beq.n	80461ac <HAL_UART_Receive+0xc0>
 8046110:	2301      	movs	r3, #1
 8046112:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8046116:	f04f 0900 	mov.w	r9, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 804611a:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 804611c:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8046120:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8046124:	f7fc ffca 	bl	80430bc <HAL_GetTick>
    huart->RxXferSize = Size;
 8046128:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    tickstart = HAL_GetTick();
 804612c:	4606      	mov	r6, r0
    huart->RxXferCount = Size;
 804612e:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    __HAL_UNLOCK(huart);
 8046132:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->RxXferCount > 0U)
 8046136:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8046138:	b280      	uxth	r0, r0
 804613a:	b918      	cbnz	r0, 8046144 <HAL_UART_Receive+0x58>
    huart->RxState = HAL_UART_STATE_READY;
 804613c:	2320      	movs	r3, #32
 804613e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    return HAL_OK;
 8046142:	e010      	b.n	8046166 <HAL_UART_Receive+0x7a>
      huart->RxXferCount--;
 8046144:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8046146:	3b01      	subs	r3, #1
 8046148:	b29b      	uxth	r3, r3
 804614a:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 804614c:	68a3      	ldr	r3, [r4, #8]
 804614e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8046152:	4632      	mov	r2, r6
 8046154:	463b      	mov	r3, r7
 8046156:	f04f 0120 	mov.w	r1, #32
 804615a:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 804615c:	d116      	bne.n	804618c <HAL_UART_Receive+0xa0>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 804615e:	f7ff fefb 	bl	8045f58 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8046162:	b110      	cbz	r0, 804616a <HAL_UART_Receive+0x7e>
          return HAL_TIMEOUT;
 8046164:	2003      	movs	r0, #3
}
 8046166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (huart->Init.Parity == UART_PARITY_NONE)
 804616a:	6922      	ldr	r2, [r4, #16]
 804616c:	6823      	ldr	r3, [r4, #0]
 804616e:	b93a      	cbnz	r2, 8046180 <HAL_UART_Receive+0x94>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8046170:	685a      	ldr	r2, [r3, #4]
 8046172:	462b      	mov	r3, r5
 8046174:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8046178:	f823 2b02 	strh.w	r2, [r3], #2
{
 804617c:	461d      	mov	r5, r3
 804617e:	e7da      	b.n	8046136 <HAL_UART_Receive+0x4a>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8046180:	685a      	ldr	r2, [r3, #4]
 8046182:	462b      	mov	r3, r5
 8046184:	b2d2      	uxtb	r2, r2
 8046186:	f823 2b01 	strh.w	r2, [r3], #1
 804618a:	e7f7      	b.n	804617c <HAL_UART_Receive+0x90>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 804618c:	f7ff fee4 	bl	8045f58 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8046190:	2800      	cmp	r0, #0
 8046192:	d1e7      	bne.n	8046164 <HAL_UART_Receive+0x78>
 8046194:	6822      	ldr	r2, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8046196:	6921      	ldr	r1, [r4, #16]
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8046198:	6852      	ldr	r2, [r2, #4]
 804619a:	1c6b      	adds	r3, r5, #1
        if (huart->Init.Parity == UART_PARITY_NONE)
 804619c:	b909      	cbnz	r1, 80461a2 <HAL_UART_Receive+0xb6>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 804619e:	702a      	strb	r2, [r5, #0]
 80461a0:	e7ec      	b.n	804617c <HAL_UART_Receive+0x90>
 80461a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80461a6:	e7fa      	b.n	804619e <HAL_UART_Receive+0xb2>
      return  HAL_ERROR;
 80461a8:	2001      	movs	r0, #1
 80461aa:	e7dc      	b.n	8046166 <HAL_UART_Receive+0x7a>
    return HAL_BUSY;
 80461ac:	2002      	movs	r0, #2
 80461ae:	e7da      	b.n	8046166 <HAL_UART_Receive+0x7a>

080461b0 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80461b0:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80461b4:	2b20      	cmp	r3, #32
 80461b6:	d120      	bne.n	80461fa <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 80461b8:	b1e9      	cbz	r1, 80461f6 <HAL_UART_Receive_IT+0x46>
 80461ba:	b1e2      	cbz	r2, 80461f6 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 80461bc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80461c0:	2b01      	cmp	r3, #1
 80461c2:	d01a      	beq.n	80461fa <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 80461c4:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 80461c6:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80461c8:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80461ca:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80461cc:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80461ce:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80461d2:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 80461d4:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80461d6:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 80461d8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80461dc:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80461e0:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80461e2:	6951      	ldr	r1, [r2, #20]
 80461e4:	f041 0101 	orr.w	r1, r1, #1
 80461e8:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80461ea:	68d1      	ldr	r1, [r2, #12]
 80461ec:	f041 0120 	orr.w	r1, r1, #32
 80461f0:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 80461f2:	4618      	mov	r0, r3
 80461f4:	4770      	bx	lr
      return HAL_ERROR;
 80461f6:	2001      	movs	r0, #1
 80461f8:	4770      	bx	lr
    return HAL_BUSY;
 80461fa:	2002      	movs	r0, #2
}
 80461fc:	4770      	bx	lr
	...

08046200 <HAL_UART_Transmit_DMA>:
{
 8046200:	b538      	push	{r3, r4, r5, lr}
 8046202:	4604      	mov	r4, r0
 8046204:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8046206:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 804620a:	2a20      	cmp	r2, #32
 804620c:	d12a      	bne.n	8046264 <HAL_UART_Transmit_DMA+0x64>
    if ((pData == NULL) || (Size == 0U))
 804620e:	b339      	cbz	r1, 8046260 <HAL_UART_Transmit_DMA+0x60>
 8046210:	b333      	cbz	r3, 8046260 <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 8046212:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8046216:	2a01      	cmp	r2, #1
 8046218:	d024      	beq.n	8046264 <HAL_UART_Transmit_DMA+0x64>
 804621a:	2201      	movs	r2, #1
 804621c:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8046220:	2500      	movs	r5, #0
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8046222:	6b20      	ldr	r0, [r4, #48]	; 0x30
    huart->TxXferCount = Size;
 8046224:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8046226:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8046228:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 804622a:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 804622e:	4a0e      	ldr	r2, [pc, #56]	; (8046268 <HAL_UART_Transmit_DMA+0x68>)
    huart->TxXferSize = Size;
 8046230:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->pTxBuffPtr = pData;
 8046232:	6221      	str	r1, [r4, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8046234:	63c2      	str	r2, [r0, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8046236:	4a0d      	ldr	r2, [pc, #52]	; (804626c <HAL_UART_Transmit_DMA+0x6c>)
 8046238:	6402      	str	r2, [r0, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 804623a:	4a0d      	ldr	r2, [pc, #52]	; (8046270 <HAL_UART_Transmit_DMA+0x70>)
    huart->hdmatx->XferAbortCallback = NULL;
 804623c:	e9c0 2513 	strd	r2, r5, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8046240:	6822      	ldr	r2, [r4, #0]
 8046242:	3204      	adds	r2, #4
 8046244:	f7fd fa88 	bl	8043758 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8046248:	6823      	ldr	r3, [r4, #0]
 804624a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 804624e:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8046250:	695a      	ldr	r2, [r3, #20]
    __HAL_UNLOCK(huart);
 8046252:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8046256:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 804625a:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 804625c:	4628      	mov	r0, r5
}
 804625e:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8046260:	2001      	movs	r0, #1
 8046262:	e7fc      	b.n	804625e <HAL_UART_Transmit_DMA+0x5e>
    return HAL_BUSY;
 8046264:	2002      	movs	r0, #2
 8046266:	e7fa      	b.n	804625e <HAL_UART_Transmit_DMA+0x5e>
 8046268:	08046275 	.word	0x08046275
 804626c:	080462a3 	.word	0x080462a3
 8046270:	08046327 	.word	0x08046327

08046274 <UART_DMATransmitCplt>:
{
 8046274:	b508      	push	{r3, lr}
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8046276:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8046278:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 804627a:	681b      	ldr	r3, [r3, #0]
 804627c:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8046280:	d10a      	bne.n	8046298 <UART_DMATransmitCplt+0x24>
    huart->TxXferCount = 0x00U;
 8046282:	84d3      	strh	r3, [r2, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8046284:	6813      	ldr	r3, [r2, #0]
 8046286:	695a      	ldr	r2, [r3, #20]
 8046288:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 804628c:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 804628e:	68da      	ldr	r2, [r3, #12]
 8046290:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8046294:	60da      	str	r2, [r3, #12]
}
 8046296:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8046298:	4610      	mov	r0, r2
 804629a:	f009 fc13 	bl	804fac4 <HAL_UART_TxCpltCallback>
}
 804629e:	e7fa      	b.n	8046296 <UART_DMATransmitCplt+0x22>

080462a0 <HAL_UART_TxHalfCpltCallback>:
 80462a0:	4770      	bx	lr

080462a2 <UART_DMATxHalfCplt>:
{
 80462a2:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80462a4:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80462a6:	f7ff fffb 	bl	80462a0 <HAL_UART_TxHalfCpltCallback>
}
 80462aa:	bd08      	pop	{r3, pc}

080462ac <HAL_UART_RxCpltCallback>:
 80462ac:	4770      	bx	lr

080462ae <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80462ae:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80462b2:	2b22      	cmp	r3, #34	; 0x22
{
 80462b4:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80462b6:	d133      	bne.n	8046320 <UART_Receive_IT+0x72>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80462b8:	6881      	ldr	r1, [r0, #8]
 80462ba:	6904      	ldr	r4, [r0, #16]
 80462bc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80462be:	6802      	ldr	r2, [r0, #0]
 80462c0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80462c4:	d123      	bne.n	804630e <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80462c6:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80462c8:	b9ec      	cbnz	r4, 8046306 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80462ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80462ce:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 80462d2:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80462d4:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 80462d6:	3c01      	subs	r4, #1
 80462d8:	b2a4      	uxth	r4, r4
 80462da:	85c4      	strh	r4, [r0, #46]	; 0x2e
 80462dc:	b98c      	cbnz	r4, 8046302 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80462de:	6803      	ldr	r3, [r0, #0]
 80462e0:	68da      	ldr	r2, [r3, #12]
 80462e2:	f022 0220 	bic.w	r2, r2, #32
 80462e6:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80462e8:	68da      	ldr	r2, [r3, #12]
 80462ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80462ee:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80462f0:	695a      	ldr	r2, [r3, #20]
 80462f2:	f022 0201 	bic.w	r2, r2, #1
 80462f6:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80462f8:	2320      	movs	r3, #32
 80462fa:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80462fe:	f7ff ffd5 	bl	80462ac <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8046302:	2000      	movs	r0, #0
 8046304:	e00d      	b.n	8046322 <UART_Receive_IT+0x74>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8046306:	b2d2      	uxtb	r2, r2
 8046308:	f823 2b01 	strh.w	r2, [r3], #1
 804630c:	e7e1      	b.n	80462d2 <UART_Receive_IT+0x24>
 804630e:	1c59      	adds	r1, r3, #1
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8046310:	6852      	ldr	r2, [r2, #4]
 8046312:	6281      	str	r1, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8046314:	b90c      	cbnz	r4, 804631a <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8046316:	701a      	strb	r2, [r3, #0]
 8046318:	e7dc      	b.n	80462d4 <UART_Receive_IT+0x26>
 804631a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 804631e:	e7fa      	b.n	8046316 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8046320:	2002      	movs	r0, #2
}
 8046322:	bd10      	pop	{r4, pc}

08046324 <HAL_UART_ErrorCallback>:
 8046324:	4770      	bx	lr

08046326 <UART_DMAError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8046326:	6b81      	ldr	r1, [r0, #56]	; 0x38
{
 8046328:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 804632a:	680b      	ldr	r3, [r1, #0]
 804632c:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 804632e:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8046332:	2821      	cmp	r0, #33	; 0x21
 8046334:	d10a      	bne.n	804634c <UART_DMAError+0x26>
 8046336:	0612      	lsls	r2, r2, #24
 8046338:	d508      	bpl.n	804634c <UART_DMAError+0x26>
    huart->TxXferCount = 0x00U;
 804633a:	2200      	movs	r2, #0
 804633c:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 804633e:	68da      	ldr	r2, [r3, #12]
 8046340:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8046344:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8046346:	2220      	movs	r2, #32
 8046348:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 804634c:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 804634e:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8046352:	2a22      	cmp	r2, #34	; 0x22
 8046354:	d106      	bne.n	8046364 <UART_DMAError+0x3e>
 8046356:	065b      	lsls	r3, r3, #25
 8046358:	d504      	bpl.n	8046364 <UART_DMAError+0x3e>
    huart->RxXferCount = 0x00U;
 804635a:	2300      	movs	r3, #0
 804635c:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 804635e:	4608      	mov	r0, r1
 8046360:	f7ff fd7c 	bl	8045e5c <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8046364:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8046366:	f043 0310 	orr.w	r3, r3, #16
 804636a:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 804636c:	4608      	mov	r0, r1
 804636e:	f7ff ffd9 	bl	8046324 <HAL_UART_ErrorCallback>
}
 8046372:	bd08      	pop	{r3, pc}

08046374 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8046374:	6803      	ldr	r3, [r0, #0]
 8046376:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8046378:	68d9      	ldr	r1, [r3, #12]
{
 804637a:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 804637c:	0716      	lsls	r6, r2, #28
{
 804637e:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8046380:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8046382:	d107      	bne.n	8046394 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8046384:	0696      	lsls	r6, r2, #26
 8046386:	d55a      	bpl.n	804643e <HAL_UART_IRQHandler+0xca>
 8046388:	068d      	lsls	r5, r1, #26
 804638a:	d558      	bpl.n	804643e <HAL_UART_IRQHandler+0xca>
}
 804638c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8046390:	f7ff bf8d 	b.w	80462ae <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8046394:	f015 0501 	ands.w	r5, r5, #1
 8046398:	d102      	bne.n	80463a0 <HAL_UART_IRQHandler+0x2c>
 804639a:	f411 7f90 	tst.w	r1, #288	; 0x120
 804639e:	d04e      	beq.n	804643e <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80463a0:	07d0      	lsls	r0, r2, #31
 80463a2:	d505      	bpl.n	80463b0 <HAL_UART_IRQHandler+0x3c>
 80463a4:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80463a6:	bf42      	ittt	mi
 80463a8:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80463aa:	f043 0301 	orrmi.w	r3, r3, #1
 80463ae:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80463b0:	0756      	lsls	r6, r2, #29
 80463b2:	d504      	bpl.n	80463be <HAL_UART_IRQHandler+0x4a>
 80463b4:	b11d      	cbz	r5, 80463be <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80463b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80463b8:	f043 0302 	orr.w	r3, r3, #2
 80463bc:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80463be:	0790      	lsls	r0, r2, #30
 80463c0:	d504      	bpl.n	80463cc <HAL_UART_IRQHandler+0x58>
 80463c2:	b11d      	cbz	r5, 80463cc <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80463c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80463c6:	f043 0304 	orr.w	r3, r3, #4
 80463ca:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80463cc:	0713      	lsls	r3, r2, #28
 80463ce:	d506      	bpl.n	80463de <HAL_UART_IRQHandler+0x6a>
 80463d0:	068e      	lsls	r6, r1, #26
 80463d2:	d400      	bmi.n	80463d6 <HAL_UART_IRQHandler+0x62>
 80463d4:	b11d      	cbz	r5, 80463de <HAL_UART_IRQHandler+0x6a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80463d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80463d8:	f043 0308 	orr.w	r3, r3, #8
 80463dc:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80463de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80463e0:	b343      	cbz	r3, 8046434 <HAL_UART_IRQHandler+0xc0>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80463e2:	0695      	lsls	r5, r2, #26
 80463e4:	d504      	bpl.n	80463f0 <HAL_UART_IRQHandler+0x7c>
 80463e6:	0688      	lsls	r0, r1, #26
 80463e8:	d502      	bpl.n	80463f0 <HAL_UART_IRQHandler+0x7c>
        UART_Receive_IT(huart);
 80463ea:	4620      	mov	r0, r4
 80463ec:	f7ff ff5f 	bl	80462ae <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80463f0:	6823      	ldr	r3, [r4, #0]
 80463f2:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80463f4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80463f6:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 80463f8:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80463fa:	d402      	bmi.n	8046402 <HAL_UART_IRQHandler+0x8e>
 80463fc:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8046400:	d019      	beq.n	8046436 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8046402:	f7ff fd2b 	bl	8045e5c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8046406:	6823      	ldr	r3, [r4, #0]
 8046408:	695a      	ldr	r2, [r3, #20]
 804640a:	0652      	lsls	r2, r2, #25
 804640c:	d50f      	bpl.n	804642e <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 804640e:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8046410:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8046412:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8046416:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8046418:	b148      	cbz	r0, 804642e <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 804641a:	4b26      	ldr	r3, [pc, #152]	; (80464b4 <HAL_UART_IRQHandler+0x140>)
 804641c:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 804641e:	f7fd f9d5 	bl	80437cc <HAL_DMA_Abort_IT>
 8046422:	b138      	cbz	r0, 8046434 <HAL_UART_IRQHandler+0xc0>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8046424:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8046426:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 804642a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 804642c:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 804642e:	4620      	mov	r0, r4
 8046430:	f7ff ff78 	bl	8046324 <HAL_UART_ErrorCallback>
}
 8046434:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8046436:	f7ff ff75 	bl	8046324 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 804643a:	63e5      	str	r5, [r4, #60]	; 0x3c
 804643c:	e7fa      	b.n	8046434 <HAL_UART_IRQHandler+0xc0>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 804643e:	0616      	lsls	r6, r2, #24
 8046440:	d528      	bpl.n	8046494 <HAL_UART_IRQHandler+0x120>
 8046442:	060d      	lsls	r5, r1, #24
 8046444:	d526      	bpl.n	8046494 <HAL_UART_IRQHandler+0x120>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8046446:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 804644a:	2a21      	cmp	r2, #33	; 0x21
 804644c:	d1f2      	bne.n	8046434 <HAL_UART_IRQHandler+0xc0>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 804644e:	68a1      	ldr	r1, [r4, #8]
 8046450:	6a22      	ldr	r2, [r4, #32]
 8046452:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8046456:	d118      	bne.n	804648a <HAL_UART_IRQHandler+0x116>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8046458:	8811      	ldrh	r1, [r2, #0]
 804645a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 804645e:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8046460:	6921      	ldr	r1, [r4, #16]
 8046462:	b981      	cbnz	r1, 8046486 <HAL_UART_IRQHandler+0x112>
        huart->pTxBuffPtr += 2U;
 8046464:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8046466:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8046468:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 804646a:	3a01      	subs	r2, #1
 804646c:	b292      	uxth	r2, r2
 804646e:	84e2      	strh	r2, [r4, #38]	; 0x26
 8046470:	2a00      	cmp	r2, #0
 8046472:	d1df      	bne.n	8046434 <HAL_UART_IRQHandler+0xc0>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8046474:	68da      	ldr	r2, [r3, #12]
 8046476:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 804647a:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 804647c:	68da      	ldr	r2, [r3, #12]
 804647e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8046482:	60da      	str	r2, [r3, #12]
 8046484:	e7d6      	b.n	8046434 <HAL_UART_IRQHandler+0xc0>
        huart->pTxBuffPtr += 1U;
 8046486:	3201      	adds	r2, #1
 8046488:	e7ed      	b.n	8046466 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 804648a:	1c51      	adds	r1, r2, #1
 804648c:	6221      	str	r1, [r4, #32]
 804648e:	7812      	ldrb	r2, [r2, #0]
 8046490:	605a      	str	r2, [r3, #4]
 8046492:	e7e9      	b.n	8046468 <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8046494:	0650      	lsls	r0, r2, #25
 8046496:	d5cd      	bpl.n	8046434 <HAL_UART_IRQHandler+0xc0>
 8046498:	064a      	lsls	r2, r1, #25
 804649a:	d5cb      	bpl.n	8046434 <HAL_UART_IRQHandler+0xc0>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 804649c:	68da      	ldr	r2, [r3, #12]
 804649e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80464a2:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80464a4:	2320      	movs	r3, #32
 80464a6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80464aa:	4620      	mov	r0, r4
 80464ac:	f009 fb0a 	bl	804fac4 <HAL_UART_TxCpltCallback>
 80464b0:	e7c0      	b.n	8046434 <HAL_UART_IRQHandler+0xc0>
 80464b2:	bf00      	nop
 80464b4:	080464b9 	.word	0x080464b9

080464b8 <UART_DMAAbortOnError>:
{
 80464b8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80464ba:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80464bc:	2300      	movs	r3, #0
 80464be:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80464c0:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80464c2:	f7ff ff2f 	bl	8046324 <HAL_UART_ErrorCallback>
}
 80464c6:	bd08      	pop	{r3, pc}

080464c8 <HAL_UART_AbortCpltCallback>:
 80464c8:	4770      	bx	lr
	...

080464cc <HAL_UART_Abort_IT>:
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80464cc:	6803      	ldr	r3, [r0, #0]
 80464ce:	68da      	ldr	r2, [r3, #12]
 80464d0:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
{
 80464d4:	b510      	push	{r4, lr}
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80464d6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80464d8:	695a      	ldr	r2, [r3, #20]
{
 80464da:	4604      	mov	r4, r0
  if (huart->hdmatx != NULL)
 80464dc:	6b00      	ldr	r0, [r0, #48]	; 0x30
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80464de:	f022 0201 	bic.w	r2, r2, #1
 80464e2:	615a      	str	r2, [r3, #20]
  if (huart->hdmatx != NULL)
 80464e4:	b128      	cbz	r0, 80464f2 <HAL_UART_Abort_IT+0x26>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80464e6:	695a      	ldr	r2, [r3, #20]
 80464e8:	f012 0280 	ands.w	r2, r2, #128	; 0x80
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 80464ec:	bf18      	it	ne
 80464ee:	4a1f      	ldrne	r2, [pc, #124]	; (804656c <HAL_UART_Abort_IT+0xa0>)
      huart->hdmatx->XferAbortCallback = NULL;
 80464f0:	6502      	str	r2, [r0, #80]	; 0x50
  if (huart->hdmarx != NULL)
 80464f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80464f4:	b129      	cbz	r1, 8046502 <HAL_UART_Abort_IT+0x36>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80464f6:	695a      	ldr	r2, [r3, #20]
 80464f8:	f012 0240 	ands.w	r2, r2, #64	; 0x40
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 80464fc:	bf18      	it	ne
 80464fe:	4a1c      	ldrne	r2, [pc, #112]	; (8046570 <HAL_UART_Abort_IT+0xa4>)
      huart->hdmarx->XferAbortCallback = NULL;
 8046500:	650a      	str	r2, [r1, #80]	; 0x50
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8046502:	695a      	ldr	r2, [r3, #20]
 8046504:	0612      	lsls	r2, r2, #24
 8046506:	d41d      	bmi.n	8046544 <HAL_UART_Abort_IT+0x78>
  uint32_t AbortCplt = 0x01U;
 8046508:	2301      	movs	r3, #1
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 804650a:	6822      	ldr	r2, [r4, #0]
 804650c:	6951      	ldr	r1, [r2, #20]
 804650e:	0649      	lsls	r1, r1, #25
 8046510:	d527      	bpl.n	8046562 <HAL_UART_Abort_IT+0x96>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8046512:	6951      	ldr	r1, [r2, #20]
    if (huart->hdmarx != NULL)
 8046514:	6b60      	ldr	r0, [r4, #52]	; 0x34
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8046516:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 804651a:	6151      	str	r1, [r2, #20]
    if (huart->hdmarx != NULL)
 804651c:	b308      	cbz	r0, 8046562 <HAL_UART_Abort_IT+0x96>
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 804651e:	f7fd f955 	bl	80437cc <HAL_DMA_Abort_IT>
 8046522:	b300      	cbz	r0, 8046566 <HAL_UART_Abort_IT+0x9a>
        huart->hdmarx->XferAbortCallback = NULL;
 8046524:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8046526:	2200      	movs	r2, #0
 8046528:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferCount = 0x00U;
 804652a:	2300      	movs	r3, #0
 804652c:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 804652e:	85e3      	strh	r3, [r4, #46]	; 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8046530:	63e3      	str	r3, [r4, #60]	; 0x3c
    huart->gState  = HAL_UART_STATE_READY;
 8046532:	2320      	movs	r3, #32
 8046534:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    HAL_UART_AbortCpltCallback(huart);
 8046538:	4620      	mov	r0, r4
    huart->RxState = HAL_UART_STATE_READY;
 804653a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    HAL_UART_AbortCpltCallback(huart);
 804653e:	f7ff ffc3 	bl	80464c8 <HAL_UART_AbortCpltCallback>
 8046542:	e010      	b.n	8046566 <HAL_UART_Abort_IT+0x9a>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8046544:	695a      	ldr	r2, [r3, #20]
 8046546:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 804654a:	615a      	str	r2, [r3, #20]
    if (huart->hdmatx != NULL)
 804654c:	2800      	cmp	r0, #0
 804654e:	d0db      	beq.n	8046508 <HAL_UART_Abort_IT+0x3c>
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8046550:	f7fd f93c 	bl	80437cc <HAL_DMA_Abort_IT>
 8046554:	b118      	cbz	r0, 804655e <HAL_UART_Abort_IT+0x92>
        huart->hdmatx->XferAbortCallback = NULL;
 8046556:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8046558:	2200      	movs	r2, #0
 804655a:	651a      	str	r2, [r3, #80]	; 0x50
 804655c:	e7d4      	b.n	8046508 <HAL_UART_Abort_IT+0x3c>
        AbortCplt = 0x00U;
 804655e:	4603      	mov	r3, r0
 8046560:	e7d3      	b.n	804650a <HAL_UART_Abort_IT+0x3e>
  if (AbortCplt == 0x01U)
 8046562:	2b00      	cmp	r3, #0
 8046564:	d1e1      	bne.n	804652a <HAL_UART_Abort_IT+0x5e>
}
 8046566:	2000      	movs	r0, #0
 8046568:	bd10      	pop	{r4, pc}
 804656a:	bf00      	nop
 804656c:	0804659d 	.word	0x0804659d
 8046570:	08046575 	.word	0x08046575

08046574 <UART_DMARxAbortCallback>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8046574:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->hdmarx->XferAbortCallback = NULL;
 8046576:	6b42      	ldr	r2, [r0, #52]	; 0x34
{
 8046578:	b508      	push	{r3, lr}
  huart->hdmarx->XferAbortCallback = NULL;
 804657a:	2300      	movs	r3, #0
 804657c:	6513      	str	r3, [r2, #80]	; 0x50
  if (huart->hdmatx != NULL)
 804657e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8046580:	b10a      	cbz	r2, 8046586 <UART_DMARxAbortCallback+0x12>
    if (huart->hdmatx->XferAbortCallback != NULL)
 8046582:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8046584:	b94a      	cbnz	r2, 804659a <UART_DMARxAbortCallback+0x26>
  huart->TxXferCount = 0x00U;
 8046586:	84c3      	strh	r3, [r0, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8046588:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 804658a:	63c3      	str	r3, [r0, #60]	; 0x3c
  huart->gState  = HAL_UART_STATE_READY;
 804658c:	2320      	movs	r3, #32
 804658e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8046592:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  HAL_UART_AbortCpltCallback(huart);
 8046596:	f7ff ff97 	bl	80464c8 <HAL_UART_AbortCpltCallback>
}
 804659a:	bd08      	pop	{r3, pc}

0804659c <UART_DMATxAbortCallback>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 804659c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->hdmatx->XferAbortCallback = NULL;
 804659e:	6b02      	ldr	r2, [r0, #48]	; 0x30
{
 80465a0:	b508      	push	{r3, lr}
  huart->hdmatx->XferAbortCallback = NULL;
 80465a2:	2300      	movs	r3, #0
 80465a4:	6513      	str	r3, [r2, #80]	; 0x50
  if (huart->hdmarx != NULL)
 80465a6:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80465a8:	b10a      	cbz	r2, 80465ae <UART_DMATxAbortCallback+0x12>
    if (huart->hdmarx->XferAbortCallback != NULL)
 80465aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80465ac:	b94a      	cbnz	r2, 80465c2 <UART_DMATxAbortCallback+0x26>
  huart->TxXferCount = 0x00U;
 80465ae:	84c3      	strh	r3, [r0, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80465b0:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80465b2:	63c3      	str	r3, [r0, #60]	; 0x3c
  huart->gState  = HAL_UART_STATE_READY;
 80465b4:	2320      	movs	r3, #32
 80465b6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80465ba:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  HAL_UART_AbortCpltCallback(huart);
 80465be:	f7ff ff83 	bl	80464c8 <HAL_UART_AbortCpltCallback>
}
 80465c2:	bd08      	pop	{r3, pc}

080465c4 <HAL_UART_AbortReceiveCpltCallback>:
 80465c4:	4770      	bx	lr
	...

080465c8 <HAL_UART_AbortReceive_IT>:
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80465c8:	6803      	ldr	r3, [r0, #0]
 80465ca:	68da      	ldr	r2, [r3, #12]
 80465cc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
{
 80465d0:	b510      	push	{r4, lr}
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80465d2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80465d4:	695a      	ldr	r2, [r3, #20]
 80465d6:	f022 0201 	bic.w	r2, r2, #1
 80465da:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80465dc:	695a      	ldr	r2, [r3, #20]
 80465de:	f012 0240 	ands.w	r2, r2, #64	; 0x40
{
 80465e2:	4604      	mov	r4, r0
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80465e4:	d017      	beq.n	8046616 <HAL_UART_AbortReceive_IT+0x4e>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80465e6:	695a      	ldr	r2, [r3, #20]
 80465e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80465ec:	615a      	str	r2, [r3, #20]
    if (huart->hdmarx != NULL)
 80465ee:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80465f0:	b153      	cbz	r3, 8046608 <HAL_UART_AbortReceive_IT+0x40>
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 80465f2:	4a0a      	ldr	r2, [pc, #40]	; (804661c <HAL_UART_AbortReceive_IT+0x54>)
 80465f4:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80465f6:	4618      	mov	r0, r3
 80465f8:	f7fd f8e8 	bl	80437cc <HAL_DMA_Abort_IT>
 80465fc:	b110      	cbz	r0, 8046604 <HAL_UART_AbortReceive_IT+0x3c>
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80465fe:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8046600:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8046602:	4798      	blx	r3
}
 8046604:	2000      	movs	r0, #0
 8046606:	bd10      	pop	{r4, pc}
      huart->RxXferCount = 0x00U;
 8046608:	85c3      	strh	r3, [r0, #46]	; 0x2e
    huart->RxState = HAL_UART_STATE_READY;
 804660a:	2320      	movs	r3, #32
 804660c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    HAL_UART_AbortReceiveCpltCallback(huart);
 8046610:	f7ff ffd8 	bl	80465c4 <HAL_UART_AbortReceiveCpltCallback>
 8046614:	e7f6      	b.n	8046604 <HAL_UART_AbortReceive_IT+0x3c>
    huart->RxXferCount = 0x00U;
 8046616:	85c2      	strh	r2, [r0, #46]	; 0x2e
 8046618:	e7f7      	b.n	804660a <HAL_UART_AbortReceive_IT+0x42>
 804661a:	bf00      	nop
 804661c:	08046621 	.word	0x08046621

08046620 <UART_DMARxOnlyAbortCallback>:
{
 8046620:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8046622:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8046624:	2300      	movs	r3, #0
 8046626:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->RxState = HAL_UART_STATE_READY;
 8046628:	2320      	movs	r3, #32
 804662a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  HAL_UART_AbortReceiveCpltCallback(huart);
 804662e:	f7ff ffc9 	bl	80465c4 <HAL_UART_AbortReceiveCpltCallback>
}
 8046632:	bd08      	pop	{r3, pc}

08046634 <SDMMC_GetCmdResp2>:
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8046634:	4b12      	ldr	r3, [pc, #72]	; (8046680 <SDMMC_GetCmdResp2+0x4c>)
 8046636:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 804663a:	681b      	ldr	r3, [r3, #0]
 804663c:	fbb3 f2f2 	udiv	r2, r3, r2
 8046640:	f241 3388 	movw	r3, #5000	; 0x1388
 8046644:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8046646:	f113 33ff 	adds.w	r3, r3, #4294967295
 804664a:	d315      	bcc.n	8046678 <SDMMC_GetCmdResp2+0x44>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 804664c:	6b42      	ldr	r2, [r0, #52]	; 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 804664e:	f012 0f45 	tst.w	r2, #69	; 0x45
 8046652:	d0f8      	beq.n	8046646 <SDMMC_GetCmdResp2+0x12>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8046654:	0512      	lsls	r2, r2, #20
 8046656:	d4f6      	bmi.n	8046646 <SDMMC_GetCmdResp2+0x12>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8046658:	6b43      	ldr	r3, [r0, #52]	; 0x34
 804665a:	075b      	lsls	r3, r3, #29
 804665c:	d503      	bpl.n	8046666 <SDMMC_GetCmdResp2+0x32>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 804665e:	2304      	movs	r3, #4
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8046660:	6383      	str	r3, [r0, #56]	; 0x38
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 8046662:	4618      	mov	r0, r3
 8046664:	4770      	bx	lr
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8046666:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8046668:	f013 0301 	ands.w	r3, r3, #1
 804666c:	d001      	beq.n	8046672 <SDMMC_GetCmdResp2+0x3e>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 804666e:	2301      	movs	r3, #1
 8046670:	e7f6      	b.n	8046660 <SDMMC_GetCmdResp2+0x2c>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8046672:	22c5      	movs	r2, #197	; 0xc5
 8046674:	6382      	str	r2, [r0, #56]	; 0x38
 8046676:	e7f4      	b.n	8046662 <SDMMC_GetCmdResp2+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8046678:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 804667c:	e7f1      	b.n	8046662 <SDMMC_GetCmdResp2+0x2e>
 804667e:	bf00      	nop
 8046680:	200010cc 	.word	0x200010cc

08046684 <SDMMC_GetCmdResp3>:
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8046684:	4b0f      	ldr	r3, [pc, #60]	; (80466c4 <SDMMC_GetCmdResp3+0x40>)
 8046686:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 804668a:	681b      	ldr	r3, [r3, #0]
 804668c:	fbb3 f2f2 	udiv	r2, r3, r2
 8046690:	f241 3388 	movw	r3, #5000	; 0x1388
 8046694:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8046696:	f113 33ff 	adds.w	r3, r3, #4294967295
 804669a:	d30f      	bcc.n	80466bc <SDMMC_GetCmdResp3+0x38>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 804669c:	6b42      	ldr	r2, [r0, #52]	; 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 804669e:	f012 0f45 	tst.w	r2, #69	; 0x45
 80466a2:	d0f8      	beq.n	8046696 <SDMMC_GetCmdResp3+0x12>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80466a4:	0512      	lsls	r2, r2, #20
 80466a6:	d4f6      	bmi.n	8046696 <SDMMC_GetCmdResp3+0x12>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80466a8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80466aa:	f013 0304 	ands.w	r3, r3, #4
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80466ae:	bf15      	itete	ne
 80466b0:	2304      	movne	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80466b2:	22c5      	moveq	r2, #197	; 0xc5
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80466b4:	6383      	strne	r3, [r0, #56]	; 0x38
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80466b6:	6382      	streq	r2, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80466b8:	4618      	mov	r0, r3
 80466ba:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80466bc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80466c0:	4770      	bx	lr
 80466c2:	bf00      	nop
 80466c4:	200010cc 	.word	0x200010cc

080466c8 <SDMMC_GetCmdResp1>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80466c8:	4b44      	ldr	r3, [pc, #272]	; (80467dc <SDMMC_GetCmdResp1+0x114>)
{
 80466ca:	b510      	push	{r4, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80466cc:	681b      	ldr	r3, [r3, #0]
 80466ce:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 80466d2:	fbb3 f3f4 	udiv	r3, r3, r4
 80466d6:	435a      	muls	r2, r3
    if (count-- == 0U)
 80466d8:	2a00      	cmp	r2, #0
 80466da:	d04a      	beq.n	8046772 <SDMMC_GetCmdResp1+0xaa>
    sta_reg = SDIOx->STA;
 80466dc:	6b43      	ldr	r3, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80466de:	f013 0f45 	tst.w	r3, #69	; 0x45
 80466e2:	d008      	beq.n	80466f6 <SDMMC_GetCmdResp1+0x2e>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80466e4:	051c      	lsls	r4, r3, #20
 80466e6:	d406      	bmi.n	80466f6 <SDMMC_GetCmdResp1+0x2e>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80466e8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80466ea:	075b      	lsls	r3, r3, #29
 80466ec:	d505      	bpl.n	80466fa <SDMMC_GetCmdResp1+0x32>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80466ee:	2304      	movs	r3, #4
 80466f0:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80466f2:	4618      	mov	r0, r3
}
 80466f4:	bd10      	pop	{r4, pc}
 80466f6:	3a01      	subs	r2, #1
 80466f8:	e7ee      	b.n	80466d8 <SDMMC_GetCmdResp1+0x10>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80466fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80466fc:	07dc      	lsls	r4, r3, #31
 80466fe:	d503      	bpl.n	8046708 <SDMMC_GetCmdResp1+0x40>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8046700:	2301      	movs	r3, #1
 8046702:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8046704:	2001      	movs	r0, #1
 8046706:	e7f5      	b.n	80466f4 <SDMMC_GetCmdResp1+0x2c>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8046708:	23c5      	movs	r3, #197	; 0xc5
 804670a:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 804670c:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 804670e:	b2db      	uxtb	r3, r3
 8046710:	4299      	cmp	r1, r3
 8046712:	d1f7      	bne.n	8046704 <SDMMC_GetCmdResp1+0x3c>
  return (*(__IO uint32_t *) tmp);
 8046714:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8046716:	4832      	ldr	r0, [pc, #200]	; (80467e0 <SDMMC_GetCmdResp1+0x118>)
 8046718:	4018      	ands	r0, r3
 804671a:	2800      	cmp	r0, #0
 804671c:	d0ea      	beq.n	80466f4 <SDMMC_GetCmdResp1+0x2c>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 804671e:	2b00      	cmp	r3, #0
 8046720:	db2a      	blt.n	8046778 <SDMMC_GetCmdResp1+0xb0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8046722:	005a      	lsls	r2, r3, #1
 8046724:	d42b      	bmi.n	804677e <SDMMC_GetCmdResp1+0xb6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8046726:	009c      	lsls	r4, r3, #2
 8046728:	d42b      	bmi.n	8046782 <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 804672a:	00d9      	lsls	r1, r3, #3
 804672c:	d42b      	bmi.n	8046786 <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 804672e:	011a      	lsls	r2, r3, #4
 8046730:	d42c      	bmi.n	804678c <SDMMC_GetCmdResp1+0xc4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8046732:	015c      	lsls	r4, r3, #5
 8046734:	d42d      	bmi.n	8046792 <SDMMC_GetCmdResp1+0xca>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8046736:	01d9      	lsls	r1, r3, #7
 8046738:	d42e      	bmi.n	8046798 <SDMMC_GetCmdResp1+0xd0>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 804673a:	021a      	lsls	r2, r3, #8
 804673c:	d42f      	bmi.n	804679e <SDMMC_GetCmdResp1+0xd6>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 804673e:	025c      	lsls	r4, r3, #9
 8046740:	d430      	bmi.n	80467a4 <SDMMC_GetCmdResp1+0xdc>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8046742:	0299      	lsls	r1, r3, #10
 8046744:	d431      	bmi.n	80467aa <SDMMC_GetCmdResp1+0xe2>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8046746:	02da      	lsls	r2, r3, #11
 8046748:	d432      	bmi.n	80467b0 <SDMMC_GetCmdResp1+0xe8>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 804674a:	035c      	lsls	r4, r3, #13
 804674c:	d433      	bmi.n	80467b6 <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 804674e:	0399      	lsls	r1, r3, #14
 8046750:	d434      	bmi.n	80467bc <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8046752:	03da      	lsls	r2, r3, #15
 8046754:	d435      	bmi.n	80467c2 <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8046756:	041c      	lsls	r4, r3, #16
 8046758:	d436      	bmi.n	80467c8 <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 804675a:	0459      	lsls	r1, r3, #17
 804675c:	d437      	bmi.n	80467ce <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 804675e:	049a      	lsls	r2, r3, #18
 8046760:	d438      	bmi.n	80467d4 <SDMMC_GetCmdResp1+0x10c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8046762:	f013 0f08 	tst.w	r3, #8
 8046766:	bf0c      	ite	eq
 8046768:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 804676c:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8046770:	e7c0      	b.n	80466f4 <SDMMC_GetCmdResp1+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8046772:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8046776:	e7bd      	b.n	80466f4 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8046778:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 804677c:	e7ba      	b.n	80466f4 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 804677e:	2040      	movs	r0, #64	; 0x40
 8046780:	e7b8      	b.n	80466f4 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8046782:	2080      	movs	r0, #128	; 0x80
 8046784:	e7b6      	b.n	80466f4 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8046786:	f44f 7080 	mov.w	r0, #256	; 0x100
 804678a:	e7b3      	b.n	80466f4 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 804678c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8046790:	e7b0      	b.n	80466f4 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8046792:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8046796:	e7ad      	b.n	80466f4 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8046798:	f44f 6000 	mov.w	r0, #2048	; 0x800
 804679c:	e7aa      	b.n	80466f4 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_COM_CRC_FAILED;
 804679e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80467a2:	e7a7      	b.n	80466f4 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80467a4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80467a8:	e7a4      	b.n	80466f4 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80467aa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80467ae:	e7a1      	b.n	80466f4 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CC_ERR;
 80467b0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80467b4:	e79e      	b.n	80466f4 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80467b6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80467ba:	e79b      	b.n	80466f4 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80467bc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80467c0:	e798      	b.n	80466f4 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80467c2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80467c6:	e795      	b.n	80466f4 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80467c8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80467cc:	e792      	b.n	80466f4 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80467ce:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80467d2:	e78f      	b.n	80466f4 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_RESET;
 80467d4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80467d8:	e78c      	b.n	80466f4 <SDMMC_GetCmdResp1+0x2c>
 80467da:	bf00      	nop
 80467dc:	200010cc 	.word	0x200010cc
 80467e0:	fdffe008 	.word	0xfdffe008

080467e4 <SDIO_Init>:
{
 80467e4:	b084      	sub	sp, #16
 80467e6:	b510      	push	{r4, lr}
 80467e8:	ac03      	add	r4, sp, #12
 80467ea:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 80467ee:	460b      	mov	r3, r1
 80467f0:	9904      	ldr	r1, [sp, #16]
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80467f2:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 80467f4:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 80467f6:	9905      	ldr	r1, [sp, #20]
 80467f8:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 80467fa:	9906      	ldr	r1, [sp, #24]
 80467fc:	430b      	orrs	r3, r1
             Init.BusWide             |\
 80467fe:	9907      	ldr	r1, [sp, #28]
 8046800:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8046802:	9908      	ldr	r1, [sp, #32]
}
 8046804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8046808:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.HardwareFlowControl |\
 804680c:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 804680e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8046812:	4313      	orrs	r3, r2
 8046814:	6043      	str	r3, [r0, #4]
}
 8046816:	b004      	add	sp, #16
 8046818:	2000      	movs	r0, #0
 804681a:	4770      	bx	lr

0804681c <SDIO_ReadFIFO>:
  return (SDIOx->FIFO);
 804681c:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8046820:	4770      	bx	lr

08046822 <SDIO_WriteFIFO>:
  SDIOx->FIFO = *pWriteData;
 8046822:	680b      	ldr	r3, [r1, #0]
 8046824:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 8046828:	2000      	movs	r0, #0
 804682a:	4770      	bx	lr

0804682c <SDIO_PowerState_ON>:
{  
 804682c:	b508      	push	{r3, lr}
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 804682e:	2303      	movs	r3, #3
 8046830:	6003      	str	r3, [r0, #0]
  HAL_Delay(2);
 8046832:	2002      	movs	r0, #2
 8046834:	f008 fd4e 	bl	804f2d4 <HAL_Delay>
}
 8046838:	2000      	movs	r0, #0
 804683a:	bd08      	pop	{r3, pc}

0804683c <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 804683c:	6800      	ldr	r0, [r0, #0]
}
 804683e:	f000 0003 	and.w	r0, r0, #3
 8046842:	4770      	bx	lr

08046844 <SDIO_SendCommand>:
  SDIOx->ARG = Command->Argument;
 8046844:	680b      	ldr	r3, [r1, #0]
{
 8046846:	b510      	push	{r4, lr}
  SDIOx->ARG = Command->Argument;
 8046848:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 804684a:	e9d1 3401 	ldrd	r3, r4, [r1, #4]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 804684e:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8046850:	4323      	orrs	r3, r4
                       Command->Response         |\
 8046852:	68cc      	ldr	r4, [r1, #12]
                       Command->WaitForInterrupt |\
 8046854:	6909      	ldr	r1, [r1, #16]
                       Command->Response         |\
 8046856:	4323      	orrs	r3, r4
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8046858:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
                       Command->WaitForInterrupt |\
 804685c:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 804685e:	f022 020f 	bic.w	r2, r2, #15
 8046862:	4313      	orrs	r3, r2
 8046864:	60c3      	str	r3, [r0, #12]
}
 8046866:	2000      	movs	r0, #0
 8046868:	bd10      	pop	{r4, pc}

0804686a <SDIO_GetResponse>:
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 804686a:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 804686c:	5840      	ldr	r0, [r0, r1]
}  
 804686e:	4770      	bx	lr

08046870 <SDIO_ConfigData>:
  SDIOx->DTIMER = Data->DataTimeOut;
 8046870:	680b      	ldr	r3, [r1, #0]
{
 8046872:	b510      	push	{r4, lr}
  SDIOx->DTIMER = Data->DataTimeOut;
 8046874:	6243      	str	r3, [r0, #36]	; 0x24
  SDIOx->DLEN = Data->DataLength;
 8046876:	684b      	ldr	r3, [r1, #4]
 8046878:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 804687a:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
 804687e:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 8046880:	690c      	ldr	r4, [r1, #16]
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8046882:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
                       Data->TransferMode  |\
 8046884:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 8046886:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 8046888:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 804688a:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 804688e:	4313      	orrs	r3, r2
 8046890:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8046892:	2000      	movs	r0, #0
 8046894:	bd10      	pop	{r4, pc}

08046896 <SDMMC_CmdBlockLength>:
{
 8046896:	b530      	push	{r4, r5, lr}
 8046898:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 804689a:	2410      	movs	r4, #16
 804689c:	2340      	movs	r3, #64	; 0x40
{
 804689e:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80468a0:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80468a2:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80468a6:	2200      	movs	r2, #0
 80468a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80468ac:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80468ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80468b2:	f7ff ffc7 	bl	8046844 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80468b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80468ba:	4621      	mov	r1, r4
 80468bc:	4628      	mov	r0, r5
 80468be:	f7ff ff03 	bl	80466c8 <SDMMC_GetCmdResp1>
}
 80468c2:	b007      	add	sp, #28
 80468c4:	bd30      	pop	{r4, r5, pc}

080468c6 <SDMMC_CmdReadSingleBlock>:
{
 80468c6:	b530      	push	{r4, r5, lr}
 80468c8:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80468ca:	2411      	movs	r4, #17
 80468cc:	2340      	movs	r3, #64	; 0x40
{
 80468ce:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80468d0:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80468d2:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80468d6:	2200      	movs	r2, #0
 80468d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80468dc:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80468de:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80468e2:	f7ff ffaf 	bl	8046844 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80468e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80468ea:	4621      	mov	r1, r4
 80468ec:	4628      	mov	r0, r5
 80468ee:	f7ff feeb 	bl	80466c8 <SDMMC_GetCmdResp1>
}
 80468f2:	b007      	add	sp, #28
 80468f4:	bd30      	pop	{r4, r5, pc}

080468f6 <SDMMC_CmdReadMultiBlock>:
{
 80468f6:	b530      	push	{r4, r5, lr}
 80468f8:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80468fa:	2412      	movs	r4, #18
 80468fc:	2340      	movs	r3, #64	; 0x40
{
 80468fe:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8046900:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8046902:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8046906:	2200      	movs	r2, #0
 8046908:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 804690c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 804690e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8046912:	f7ff ff97 	bl	8046844 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8046916:	f241 3288 	movw	r2, #5000	; 0x1388
 804691a:	4621      	mov	r1, r4
 804691c:	4628      	mov	r0, r5
 804691e:	f7ff fed3 	bl	80466c8 <SDMMC_GetCmdResp1>
}
 8046922:	b007      	add	sp, #28
 8046924:	bd30      	pop	{r4, r5, pc}

08046926 <SDMMC_CmdWriteSingleBlock>:
{
 8046926:	b530      	push	{r4, r5, lr}
 8046928:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 804692a:	2418      	movs	r4, #24
 804692c:	2340      	movs	r3, #64	; 0x40
{
 804692e:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8046930:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8046932:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8046936:	2200      	movs	r2, #0
 8046938:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 804693c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 804693e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8046942:	f7ff ff7f 	bl	8046844 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8046946:	f241 3288 	movw	r2, #5000	; 0x1388
 804694a:	4621      	mov	r1, r4
 804694c:	4628      	mov	r0, r5
 804694e:	f7ff febb 	bl	80466c8 <SDMMC_GetCmdResp1>
}
 8046952:	b007      	add	sp, #28
 8046954:	bd30      	pop	{r4, r5, pc}

08046956 <SDMMC_CmdWriteMultiBlock>:
{
 8046956:	b530      	push	{r4, r5, lr}
 8046958:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 804695a:	2419      	movs	r4, #25
 804695c:	2340      	movs	r3, #64	; 0x40
{
 804695e:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8046960:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8046962:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8046966:	2200      	movs	r2, #0
 8046968:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 804696c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 804696e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8046972:	f7ff ff67 	bl	8046844 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8046976:	f241 3288 	movw	r2, #5000	; 0x1388
 804697a:	4621      	mov	r1, r4
 804697c:	4628      	mov	r0, r5
 804697e:	f7ff fea3 	bl	80466c8 <SDMMC_GetCmdResp1>
}
 8046982:	b007      	add	sp, #28
 8046984:	bd30      	pop	{r4, r5, pc}
	...

08046988 <SDMMC_CmdStopTransfer>:
{
 8046988:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 804698a:	2300      	movs	r3, #0
{
 804698c:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 804698e:	240c      	movs	r4, #12
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8046990:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8046992:	e9cd 2303 	strd	r2, r3, [sp, #12]
{
 8046996:	4605      	mov	r5, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8046998:	e9cd 3401 	strd	r3, r4, [sp, #4]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 804699c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 804699e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80469a2:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80469a4:	f7ff ff4e 	bl	8046844 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80469a8:	4a03      	ldr	r2, [pc, #12]	; (80469b8 <SDMMC_CmdStopTransfer+0x30>)
 80469aa:	4621      	mov	r1, r4
 80469ac:	4628      	mov	r0, r5
 80469ae:	f7ff fe8b 	bl	80466c8 <SDMMC_GetCmdResp1>
}
 80469b2:	b007      	add	sp, #28
 80469b4:	bd30      	pop	{r4, r5, pc}
 80469b6:	bf00      	nop
 80469b8:	05f5e100 	.word	0x05f5e100

080469bc <SDMMC_CmdSelDesel>:
{
 80469bc:	b530      	push	{r4, r5, lr}
 80469be:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80469c0:	2407      	movs	r4, #7
 80469c2:	2340      	movs	r3, #64	; 0x40
{
 80469c4:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80469c6:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80469c8:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80469cc:	2200      	movs	r2, #0
 80469ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80469d2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80469d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80469d8:	f7ff ff34 	bl	8046844 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80469dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80469e0:	4621      	mov	r1, r4
 80469e2:	4628      	mov	r0, r5
 80469e4:	f7ff fe70 	bl	80466c8 <SDMMC_GetCmdResp1>
}
 80469e8:	b007      	add	sp, #28
 80469ea:	bd30      	pop	{r4, r5, pc}

080469ec <SDMMC_CmdGoIdleState>:
{
 80469ec:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = 0U;
 80469ee:	2300      	movs	r3, #0
{
 80469f0:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80469f2:	e9cd 3301 	strd	r3, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80469f6:	e9cd 3303 	strd	r3, r3, [sp, #12]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80469fa:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80469fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8046a00:	9305      	str	r3, [sp, #20]
{
 8046a02:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8046a04:	f7ff ff1e 	bl	8046844 <SDIO_SendCommand>
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8046a08:	4b0b      	ldr	r3, [pc, #44]	; (8046a38 <SDMMC_CmdGoIdleState+0x4c>)
 8046a0a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8046a0e:	681b      	ldr	r3, [r3, #0]
 8046a10:	fbb3 f2f2 	udiv	r2, r3, r2
 8046a14:	f241 3388 	movw	r3, #5000	; 0x1388
 8046a18:	4353      	muls	r3, r2
    if (count-- == 0U)
 8046a1a:	f113 33ff 	adds.w	r3, r3, #4294967295
 8046a1e:	d307      	bcc.n	8046a30 <SDMMC_CmdGoIdleState+0x44>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8046a20:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8046a22:	0612      	lsls	r2, r2, #24
 8046a24:	d5f9      	bpl.n	8046a1a <SDMMC_CmdGoIdleState+0x2e>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8046a26:	23c5      	movs	r3, #197	; 0xc5
 8046a28:	63a3      	str	r3, [r4, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8046a2a:	2000      	movs	r0, #0
}
 8046a2c:	b006      	add	sp, #24
 8046a2e:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 8046a30:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 8046a34:	e7fa      	b.n	8046a2c <SDMMC_CmdGoIdleState+0x40>
 8046a36:	bf00      	nop
 8046a38:	200010cc 	.word	0x200010cc

08046a3c <SDMMC_CmdOperCond>:
{
 8046a3c:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8046a3e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
{
 8046a42:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8046a44:	2308      	movs	r3, #8
 8046a46:	e9cd 1301 	strd	r1, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8046a4a:	f04f 0c40 	mov.w	ip, #64	; 0x40
 8046a4e:	2300      	movs	r3, #0
 8046a50:	e9cd c303 	strd	ip, r3, [sp, #12]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8046a54:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8046a56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8046a5a:	9305      	str	r3, [sp, #20]
{
 8046a5c:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8046a5e:	f7ff fef1 	bl	8046844 <SDIO_SendCommand>
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8046a62:	4b15      	ldr	r3, [pc, #84]	; (8046ab8 <SDMMC_CmdOperCond+0x7c>)
 8046a64:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8046a68:	681b      	ldr	r3, [r3, #0]
 8046a6a:	fbb3 f2f2 	udiv	r2, r3, r2
 8046a6e:	f241 3388 	movw	r3, #5000	; 0x1388
 8046a72:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8046a74:	f113 33ff 	adds.w	r3, r3, #4294967295
 8046a78:	d31a      	bcc.n	8046ab0 <SDMMC_CmdOperCond+0x74>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 8046a7a:	6b62      	ldr	r2, [r4, #52]	; 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8046a7c:	f012 0f45 	tst.w	r2, #69	; 0x45
 8046a80:	d0f8      	beq.n	8046a74 <SDMMC_CmdOperCond+0x38>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8046a82:	0512      	lsls	r2, r2, #20
 8046a84:	d4f6      	bmi.n	8046a74 <SDMMC_CmdOperCond+0x38>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8046a86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8046a88:	075b      	lsls	r3, r3, #29
 8046a8a:	d503      	bpl.n	8046a94 <SDMMC_CmdOperCond+0x58>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8046a8c:	2004      	movs	r0, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8046a8e:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8046a90:	b006      	add	sp, #24
 8046a92:	bd10      	pop	{r4, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8046a94:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8046a96:	f012 0201 	ands.w	r2, r2, #1
 8046a9a:	d001      	beq.n	8046aa0 <SDMMC_CmdOperCond+0x64>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8046a9c:	2001      	movs	r0, #1
 8046a9e:	e7f6      	b.n	8046a8e <SDMMC_CmdOperCond+0x52>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8046aa0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8046aa2:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8046aa6:	d0f3      	beq.n	8046a90 <SDMMC_CmdOperCond+0x54>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8046aa8:	2340      	movs	r3, #64	; 0x40
 8046aaa:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8046aac:	4610      	mov	r0, r2
 8046aae:	e7ef      	b.n	8046a90 <SDMMC_CmdOperCond+0x54>
      return SDMMC_ERROR_TIMEOUT;
 8046ab0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8046ab4:	e7ec      	b.n	8046a90 <SDMMC_CmdOperCond+0x54>
 8046ab6:	bf00      	nop
 8046ab8:	200010cc 	.word	0x200010cc

08046abc <SDMMC_CmdAppCommand>:
{
 8046abc:	b530      	push	{r4, r5, lr}
 8046abe:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8046ac0:	2437      	movs	r4, #55	; 0x37
 8046ac2:	2340      	movs	r3, #64	; 0x40
{
 8046ac4:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8046ac6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8046ac8:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8046acc:	2200      	movs	r2, #0
 8046ace:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8046ad2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8046ad4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8046ad8:	f7ff feb4 	bl	8046844 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8046adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8046ae0:	4621      	mov	r1, r4
 8046ae2:	4628      	mov	r0, r5
 8046ae4:	f7ff fdf0 	bl	80466c8 <SDMMC_GetCmdResp1>
}
 8046ae8:	b007      	add	sp, #28
 8046aea:	bd30      	pop	{r4, r5, pc}

08046aec <SDMMC_CmdAppOperCommand>:
{
 8046aec:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8046aee:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
{
 8046af2:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8046af4:	2229      	movs	r2, #41	; 0x29
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8046af6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8046afa:	2340      	movs	r3, #64	; 0x40
 8046afc:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8046b00:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8046b02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8046b06:	2100      	movs	r1, #0
 8046b08:	e9cd 1304 	strd	r1, r3, [sp, #16]
{
 8046b0c:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8046b0e:	a901      	add	r1, sp, #4
 8046b10:	f7ff fe98 	bl	8046844 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8046b14:	4620      	mov	r0, r4
 8046b16:	f7ff fdb5 	bl	8046684 <SDMMC_GetCmdResp3>
}
 8046b1a:	b006      	add	sp, #24
 8046b1c:	bd10      	pop	{r4, pc}

08046b1e <SDMMC_CmdBusWidth>:
{
 8046b1e:	b530      	push	{r4, r5, lr}
 8046b20:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8046b22:	2406      	movs	r4, #6
 8046b24:	2340      	movs	r3, #64	; 0x40
{
 8046b26:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8046b28:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8046b2a:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8046b2e:	2200      	movs	r2, #0
 8046b30:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8046b34:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8046b36:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8046b3a:	f7ff fe83 	bl	8046844 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8046b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8046b42:	4621      	mov	r1, r4
 8046b44:	4628      	mov	r0, r5
 8046b46:	f7ff fdbf 	bl	80466c8 <SDMMC_GetCmdResp1>
}
 8046b4a:	b007      	add	sp, #28
 8046b4c:	bd30      	pop	{r4, r5, pc}

08046b4e <SDMMC_CmdSendSCR>:
{
 8046b4e:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8046b50:	2300      	movs	r3, #0
{
 8046b52:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8046b54:	2433      	movs	r4, #51	; 0x33
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8046b56:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8046b58:	e9cd 2303 	strd	r2, r3, [sp, #12]
{
 8046b5c:	4605      	mov	r5, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8046b5e:	e9cd 3401 	strd	r3, r4, [sp, #4]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8046b62:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8046b64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8046b68:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8046b6a:	f7ff fe6b 	bl	8046844 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8046b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8046b72:	4621      	mov	r1, r4
 8046b74:	4628      	mov	r0, r5
 8046b76:	f7ff fda7 	bl	80466c8 <SDMMC_GetCmdResp1>
}
 8046b7a:	b007      	add	sp, #28
 8046b7c:	bd30      	pop	{r4, r5, pc}

08046b7e <SDMMC_CmdSendCID>:
{
 8046b7e:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8046b80:	2300      	movs	r3, #0
{
 8046b82:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8046b84:	2202      	movs	r2, #2
 8046b86:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8046b8a:	22c0      	movs	r2, #192	; 0xc0
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8046b8c:	e9cd 2303 	strd	r2, r3, [sp, #12]
{
 8046b90:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8046b92:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8046b96:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8046b98:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8046b9a:	f7ff fe53 	bl	8046844 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8046b9e:	4620      	mov	r0, r4
 8046ba0:	f7ff fd48 	bl	8046634 <SDMMC_GetCmdResp2>
}
 8046ba4:	b006      	add	sp, #24
 8046ba6:	bd10      	pop	{r4, pc}

08046ba8 <SDMMC_CmdSendCSD>:
{
 8046ba8:	b510      	push	{r4, lr}
 8046baa:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8046bac:	2209      	movs	r2, #9
 8046bae:	23c0      	movs	r3, #192	; 0xc0
 8046bb0:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.Argument         = Argument;
 8046bb4:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8046bb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8046bba:	2100      	movs	r1, #0
 8046bbc:	e9cd 1304 	strd	r1, r3, [sp, #16]
{
 8046bc0:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8046bc2:	a901      	add	r1, sp, #4
 8046bc4:	f7ff fe3e 	bl	8046844 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8046bc8:	4620      	mov	r0, r4
 8046bca:	f7ff fd33 	bl	8046634 <SDMMC_GetCmdResp2>
}
 8046bce:	b006      	add	sp, #24
 8046bd0:	bd10      	pop	{r4, pc}
	...

08046bd4 <SDMMC_CmdSetRelAdd>:
{
 8046bd4:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8046bd6:	2300      	movs	r3, #0
{
 8046bd8:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8046bda:	2203      	movs	r2, #3
 8046bdc:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8046be0:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8046be2:	e9cd 2303 	strd	r2, r3, [sp, #12]
{
 8046be6:	460d      	mov	r5, r1
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8046be8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8046bec:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8046bee:	9305      	str	r3, [sp, #20]
{
 8046bf0:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8046bf2:	f7ff fe27 	bl	8046844 <SDIO_SendCommand>
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8046bf6:	4b1e      	ldr	r3, [pc, #120]	; (8046c70 <SDMMC_CmdSetRelAdd+0x9c>)
 8046bf8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8046bfc:	681b      	ldr	r3, [r3, #0]
 8046bfe:	fbb3 f2f2 	udiv	r2, r3, r2
 8046c02:	f241 3388 	movw	r3, #5000	; 0x1388
 8046c06:	4353      	muls	r3, r2
    if (count-- == 0U)
 8046c08:	f113 33ff 	adds.w	r3, r3, #4294967295
 8046c0c:	d328      	bcc.n	8046c60 <SDMMC_CmdSetRelAdd+0x8c>
    sta_reg = SDIOx->STA;
 8046c0e:	6b62      	ldr	r2, [r4, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8046c10:	f012 0f45 	tst.w	r2, #69	; 0x45
 8046c14:	d0f8      	beq.n	8046c08 <SDMMC_CmdSetRelAdd+0x34>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8046c16:	0512      	lsls	r2, r2, #20
 8046c18:	d4f6      	bmi.n	8046c08 <SDMMC_CmdSetRelAdd+0x34>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8046c1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8046c1c:	0758      	lsls	r0, r3, #29
 8046c1e:	d503      	bpl.n	8046c28 <SDMMC_CmdSetRelAdd+0x54>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8046c20:	2004      	movs	r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8046c22:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8046c24:	b007      	add	sp, #28
 8046c26:	bd30      	pop	{r4, r5, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8046c28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8046c2a:	07d9      	lsls	r1, r3, #31
 8046c2c:	d501      	bpl.n	8046c32 <SDMMC_CmdSetRelAdd+0x5e>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8046c2e:	2001      	movs	r0, #1
 8046c30:	e7f7      	b.n	8046c22 <SDMMC_CmdSetRelAdd+0x4e>
  return (uint8_t)(SDIOx->RESPCMD);
 8046c32:	6923      	ldr	r3, [r4, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8046c34:	b2db      	uxtb	r3, r3
 8046c36:	2b03      	cmp	r3, #3
 8046c38:	d115      	bne.n	8046c66 <SDMMC_CmdSetRelAdd+0x92>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8046c3a:	23c5      	movs	r3, #197	; 0xc5
 8046c3c:	63a3      	str	r3, [r4, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 8046c3e:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8046c40:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 8046c44:	d102      	bne.n	8046c4c <SDMMC_CmdSetRelAdd+0x78>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8046c46:	0c1b      	lsrs	r3, r3, #16
 8046c48:	802b      	strh	r3, [r5, #0]
 8046c4a:	e7eb      	b.n	8046c24 <SDMMC_CmdSetRelAdd+0x50>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8046c4c:	045a      	lsls	r2, r3, #17
 8046c4e:	d40c      	bmi.n	8046c6a <SDMMC_CmdSetRelAdd+0x96>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8046c50:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8046c54:	bf0c      	ite	eq
 8046c56:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8046c5a:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8046c5e:	e7e1      	b.n	8046c24 <SDMMC_CmdSetRelAdd+0x50>
      return SDMMC_ERROR_TIMEOUT;
 8046c60:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8046c64:	e7de      	b.n	8046c24 <SDMMC_CmdSetRelAdd+0x50>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8046c66:	2001      	movs	r0, #1
 8046c68:	e7dc      	b.n	8046c24 <SDMMC_CmdSetRelAdd+0x50>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8046c6a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8046c6e:	e7d9      	b.n	8046c24 <SDMMC_CmdSetRelAdd+0x50>
 8046c70:	200010cc 	.word	0x200010cc

08046c74 <SDMMC_CmdSendStatus>:
{
 8046c74:	b530      	push	{r4, r5, lr}
 8046c76:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8046c78:	240d      	movs	r4, #13
 8046c7a:	2340      	movs	r3, #64	; 0x40
{
 8046c7c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 8046c7e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8046c80:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8046c84:	2200      	movs	r2, #0
 8046c86:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8046c8a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8046c8c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8046c90:	f7ff fdd8 	bl	8046844 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8046c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8046c98:	4621      	mov	r1, r4
 8046c9a:	4628      	mov	r0, r5
 8046c9c:	f7ff fd14 	bl	80466c8 <SDMMC_GetCmdResp1>
}
 8046ca0:	b007      	add	sp, #28
 8046ca2:	bd30      	pop	{r4, r5, pc}

08046ca4 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8046ca4:	4b03      	ldr	r3, [pc, #12]	; (8046cb4 <disk_status+0x10>)
 8046ca6:	181a      	adds	r2, r3, r0
 8046ca8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8046cac:	7a10      	ldrb	r0, [r2, #8]
 8046cae:	685b      	ldr	r3, [r3, #4]
 8046cb0:	685b      	ldr	r3, [r3, #4]
 8046cb2:	4718      	bx	r3
 8046cb4:	2000a3f8 	.word	0x2000a3f8

08046cb8 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8046cb8:	4b06      	ldr	r3, [pc, #24]	; (8046cd4 <disk_initialize+0x1c>)
 8046cba:	5c1a      	ldrb	r2, [r3, r0]
 8046cbc:	b942      	cbnz	r2, 8046cd0 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 8046cbe:	2201      	movs	r2, #1
 8046cc0:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8046cc2:	181a      	adds	r2, r3, r0
 8046cc4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8046cc8:	7a10      	ldrb	r0, [r2, #8]
 8046cca:	685b      	ldr	r3, [r3, #4]
 8046ccc:	681b      	ldr	r3, [r3, #0]
 8046cce:	4718      	bx	r3
  }
  return stat;
}
 8046cd0:	2000      	movs	r0, #0
 8046cd2:	4770      	bx	lr
 8046cd4:	2000a3f8 	.word	0x2000a3f8

08046cd8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8046cd8:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8046cda:	4c05      	ldr	r4, [pc, #20]	; (8046cf0 <disk_read+0x18>)
 8046cdc:	1825      	adds	r5, r4, r0
 8046cde:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8046ce2:	6860      	ldr	r0, [r4, #4]
 8046ce4:	6884      	ldr	r4, [r0, #8]
 8046ce6:	7a28      	ldrb	r0, [r5, #8]
 8046ce8:	46a4      	mov	ip, r4
  return res;
}
 8046cea:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8046cec:	4760      	bx	ip
 8046cee:	bf00      	nop
 8046cf0:	2000a3f8 	.word	0x2000a3f8

08046cf4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8046cf4:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8046cf6:	4c05      	ldr	r4, [pc, #20]	; (8046d0c <disk_write+0x18>)
 8046cf8:	1825      	adds	r5, r4, r0
 8046cfa:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8046cfe:	6860      	ldr	r0, [r4, #4]
 8046d00:	68c4      	ldr	r4, [r0, #12]
 8046d02:	7a28      	ldrb	r0, [r5, #8]
 8046d04:	46a4      	mov	ip, r4
  return res;
}
 8046d06:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8046d08:	4760      	bx	ip
 8046d0a:	bf00      	nop
 8046d0c:	2000a3f8 	.word	0x2000a3f8

08046d10 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8046d10:	4b05      	ldr	r3, [pc, #20]	; (8046d28 <disk_ioctl+0x18>)
{
 8046d12:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8046d14:	181c      	adds	r4, r3, r0
 8046d16:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8046d1a:	7a20      	ldrb	r0, [r4, #8]
 8046d1c:	685b      	ldr	r3, [r3, #4]
  return res;
}
 8046d1e:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8046d22:	691b      	ldr	r3, [r3, #16]
 8046d24:	4718      	bx	r3
 8046d26:	bf00      	nop
 8046d28:	2000a3f8 	.word	0x2000a3f8

08046d2c <ld_dword>:
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 8046d2c:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
 8046d2e:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
 8046d30:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
 8046d32:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return rv;
}
 8046d36:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8046d3a:	4770      	bx	lr

08046d3c <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8046d3c:	0a0b      	lsrs	r3, r1, #8
 8046d3e:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8046d40:	7043      	strb	r3, [r0, #1]
 8046d42:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8046d44:	0e09      	lsrs	r1, r1, #24
 8046d46:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8046d48:	70c1      	strb	r1, [r0, #3]
}
 8046d4a:	4770      	bx	lr

08046d4c <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8046d4c:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 8046d4e:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 8046d52:	4290      	cmp	r0, r2
 8046d54:	d1fb      	bne.n	8046d4e <mem_set+0x2>
}
 8046d56:	4770      	bx	lr

08046d58 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8046d58:	3801      	subs	r0, #1
 8046d5a:	2801      	cmp	r0, #1
 8046d5c:	d814      	bhi.n	8046d88 <dec_lock+0x30>
		n = Files[i].ctr;
 8046d5e:	490b      	ldr	r1, [pc, #44]	; (8046d8c <dec_lock+0x34>)
 8046d60:	0102      	lsls	r2, r0, #4
 8046d62:	1888      	adds	r0, r1, r2
 8046d64:	8983      	ldrh	r3, [r0, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8046d66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8046d6a:	d104      	bne.n	8046d76 <dec_lock+0x1e>
		if (n > 0) n--;				/* Decrement read mode open count */
		Files[i].ctr = n;
 8046d6c:	2300      	movs	r3, #0
 8046d6e:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8046d70:	2000      	movs	r0, #0
 8046d72:	5088      	str	r0, [r1, r2]
 8046d74:	4770      	bx	lr
		if (n > 0) n--;				/* Decrement read mode open count */
 8046d76:	2b00      	cmp	r3, #0
 8046d78:	d0fa      	beq.n	8046d70 <dec_lock+0x18>
 8046d7a:	3b01      	subs	r3, #1
 8046d7c:	b29b      	uxth	r3, r3
		Files[i].ctr = n;
 8046d7e:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8046d80:	2b00      	cmp	r3, #0
 8046d82:	d0f5      	beq.n	8046d70 <dec_lock+0x18>
		res = FR_OK;
 8046d84:	2000      	movs	r0, #0
 8046d86:	4770      	bx	lr
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8046d88:	2002      	movs	r0, #2
	}
	return res;
}
 8046d8a:	4770      	bx	lr
 8046d8c:	2000a3d0 	.word	0x2000a3d0

08046d90 <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8046d90:	69c3      	ldr	r3, [r0, #28]
	clst -= 2;
 8046d92:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8046d94:	3b02      	subs	r3, #2
 8046d96:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
 8046d98:	bf83      	ittte	hi
 8046d9a:	8943      	ldrhhi	r3, [r0, #10]
 8046d9c:	6b00      	ldrhi	r0, [r0, #48]	; 0x30
 8046d9e:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8046da2:	2000      	movls	r0, #0
}
 8046da4:	4770      	bx	lr

08046da6 <clmt_clust>:
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8046da6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
{
 8046da8:	b510      	push	{r4, lr}
	FATFS *fs = fp->obj.fs;
 8046daa:	6804      	ldr	r4, [r0, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8046dac:	3204      	adds	r2, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8046dae:	89a3      	ldrh	r3, [r4, #12]
 8046db0:	fbb1 f1f3 	udiv	r1, r1, r3
 8046db4:	8963      	ldrh	r3, [r4, #10]
 8046db6:	fbb1 f1f3 	udiv	r1, r1, r3
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8046dba:	6810      	ldr	r0, [r2, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8046dbc:	b130      	cbz	r0, 8046dcc <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8046dbe:	4281      	cmp	r1, r0
 8046dc0:	d302      	bcc.n	8046dc8 <clmt_clust+0x22>
		cl -= ncl; tbl++;		/* Next fragment */
 8046dc2:	1a09      	subs	r1, r1, r0
 8046dc4:	3208      	adds	r2, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8046dc6:	e7f8      	b.n	8046dba <clmt_clust+0x14>
	}
	return cl + *tbl;	/* Return the cluster number */
 8046dc8:	6850      	ldr	r0, [r2, #4]
 8046dca:	4408      	add	r0, r1
}
 8046dcc:	bd10      	pop	{r4, pc}

08046dce <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8046dce:	6802      	ldr	r2, [r0, #0]
{
 8046dd0:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 8046dd2:	b152      	cbz	r2, 8046dea <get_ldnumber+0x1c>
 8046dd4:	4611      	mov	r1, r2
 8046dd6:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8046dd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8046ddc:	2c20      	cmp	r4, #32
 8046dde:	d90c      	bls.n	8046dfa <get_ldnumber+0x2c>
 8046de0:	2c3a      	cmp	r4, #58	; 0x3a
 8046de2:	d1f8      	bne.n	8046dd6 <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 8046de4:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8046de6:	428b      	cmp	r3, r1
 8046de8:	d002      	beq.n	8046df0 <get_ldnumber+0x22>
	int vol = -1;
 8046dea:	f04f 30ff 	mov.w	r0, #4294967295
 8046dee:	e005      	b.n	8046dfc <get_ldnumber+0x2e>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8046df0:	7812      	ldrb	r2, [r2, #0]
 8046df2:	2a30      	cmp	r2, #48	; 0x30
 8046df4:	d1f9      	bne.n	8046dea <get_ldnumber+0x1c>
					vol = (int)i;
					*path = ++tt;
 8046df6:	3301      	adds	r3, #1
 8046df8:	6003      	str	r3, [r0, #0]
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8046dfa:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 8046dfc:	bd10      	pop	{r4, pc}

08046dfe <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8046dfe:	b538      	push	{r3, r4, r5, lr}
 8046e00:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8046e02:	4604      	mov	r4, r0
 8046e04:	b918      	cbnz	r0, 8046e0e <validate+0x10>
	FRESULT res = FR_INVALID_OBJECT;
 8046e06:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8046e08:	2300      	movs	r3, #0
 8046e0a:	602b      	str	r3, [r5, #0]
	return res;
}
 8046e0c:	bd38      	pop	{r3, r4, r5, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8046e0e:	6803      	ldr	r3, [r0, #0]
 8046e10:	2b00      	cmp	r3, #0
 8046e12:	d0f8      	beq.n	8046e06 <validate+0x8>
 8046e14:	781a      	ldrb	r2, [r3, #0]
 8046e16:	2a00      	cmp	r2, #0
 8046e18:	d0f5      	beq.n	8046e06 <validate+0x8>
 8046e1a:	8881      	ldrh	r1, [r0, #4]
 8046e1c:	88da      	ldrh	r2, [r3, #6]
 8046e1e:	4291      	cmp	r1, r2
 8046e20:	d1f1      	bne.n	8046e06 <validate+0x8>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8046e22:	7858      	ldrb	r0, [r3, #1]
 8046e24:	f7ff ff3e 	bl	8046ca4 <disk_status>
 8046e28:	f010 0001 	ands.w	r0, r0, #1
 8046e2c:	d1eb      	bne.n	8046e06 <validate+0x8>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8046e2e:	6823      	ldr	r3, [r4, #0]
 8046e30:	e7eb      	b.n	8046e0a <validate+0xc>

08046e32 <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8046e32:	3801      	subs	r0, #1
 8046e34:	440a      	add	r2, r1
			*d++ = *s++;
 8046e36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8046e3a:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 8046e3e:	4291      	cmp	r1, r2
 8046e40:	d1f9      	bne.n	8046e36 <mem_cpy.part.0+0x4>
}
 8046e42:	4770      	bx	lr

08046e44 <st_clust.isra.2>:
	*ptr++ = (BYTE)val; val >>= 8;
 8046e44:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8046e48:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 8046e4a:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 8046e4c:	7803      	ldrb	r3, [r0, #0]
 8046e4e:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8046e50:	bf01      	itttt	eq
 8046e52:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8046e54:	750a      	strbeq	r2, [r1, #20]
 8046e56:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 8046e58:	754a      	strbeq	r2, [r1, #21]
}
 8046e5a:	4770      	bx	lr

08046e5c <sync_window.part.4>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8046e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		wsect = fs->winsect;	/* Current sector number */
 8046e5e:	6b45      	ldr	r5, [r0, #52]	; 0x34
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8046e60:	f100 0738 	add.w	r7, r0, #56	; 0x38
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8046e64:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8046e66:	2301      	movs	r3, #1
 8046e68:	462a      	mov	r2, r5
 8046e6a:	4639      	mov	r1, r7
 8046e6c:	7840      	ldrb	r0, [r0, #1]
 8046e6e:	f7ff ff41 	bl	8046cf4 <disk_write>
 8046e72:	b9a0      	cbnz	r0, 8046e9e <sync_window.part.4+0x42>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8046e74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8046e76:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
 8046e78:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8046e7a:	1aeb      	subs	r3, r5, r3
 8046e7c:	4293      	cmp	r3, r2
 8046e7e:	d301      	bcc.n	8046e84 <sync_window.part.4+0x28>
	FRESULT res = FR_OK;
 8046e80:	2000      	movs	r0, #0
}
 8046e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8046e84:	78a6      	ldrb	r6, [r4, #2]
 8046e86:	2e01      	cmp	r6, #1
 8046e88:	d9fa      	bls.n	8046e80 <sync_window.part.4+0x24>
					wsect += fs->fsize;
 8046e8a:	6a23      	ldr	r3, [r4, #32]
					disk_write(fs->drv, fs->win, wsect, 1);
 8046e8c:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 8046e8e:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8046e90:	462a      	mov	r2, r5
 8046e92:	2301      	movs	r3, #1
 8046e94:	4639      	mov	r1, r7
 8046e96:	f7ff ff2d 	bl	8046cf4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8046e9a:	3e01      	subs	r6, #1
 8046e9c:	e7f3      	b.n	8046e86 <sync_window.part.4+0x2a>
			res = FR_DISK_ERR;
 8046e9e:	2001      	movs	r0, #1
 8046ea0:	e7ef      	b.n	8046e82 <sync_window.part.4+0x26>

08046ea2 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8046ea2:	78c3      	ldrb	r3, [r0, #3]
 8046ea4:	b10b      	cbz	r3, 8046eaa <sync_window+0x8>
 8046ea6:	f7ff bfd9 	b.w	8046e5c <sync_window.part.4>
}
 8046eaa:	4618      	mov	r0, r3
 8046eac:	4770      	bx	lr

08046eae <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 8046eae:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8046eb0:	428b      	cmp	r3, r1
{
 8046eb2:	b570      	push	{r4, r5, r6, lr}
 8046eb4:	4606      	mov	r6, r0
 8046eb6:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8046eb8:	d012      	beq.n	8046ee0 <move_window+0x32>
		res = sync_window(fs);		/* Write-back changes */
 8046eba:	f7ff fff2 	bl	8046ea2 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8046ebe:	4604      	mov	r4, r0
 8046ec0:	b960      	cbnz	r0, 8046edc <move_window+0x2e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8046ec2:	462a      	mov	r2, r5
 8046ec4:	2301      	movs	r3, #1
 8046ec6:	f106 0138 	add.w	r1, r6, #56	; 0x38
 8046eca:	7870      	ldrb	r0, [r6, #1]
 8046ecc:	f7ff ff04 	bl	8046cd8 <disk_read>
 8046ed0:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 8046ed2:	bf1c      	itt	ne
 8046ed4:	f04f 35ff 	movne.w	r5, #4294967295
 8046ed8:	2401      	movne	r4, #1
			fs->winsect = sector;
 8046eda:	6375      	str	r5, [r6, #52]	; 0x34
}
 8046edc:	4620      	mov	r0, r4
 8046ede:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 8046ee0:	2400      	movs	r4, #0
 8046ee2:	e7fb      	b.n	8046edc <move_window+0x2e>

08046ee4 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8046ee4:	2300      	movs	r3, #0
{
 8046ee6:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8046ee8:	70c3      	strb	r3, [r0, #3]
 8046eea:	f04f 33ff 	mov.w	r3, #4294967295
 8046eee:	6343      	str	r3, [r0, #52]	; 0x34
{
 8046ef0:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8046ef2:	f7ff ffdc 	bl	8046eae <move_window>
 8046ef6:	bb30      	cbnz	r0, 8046f46 <check_fs+0x62>
	rv = rv << 8 | ptr[0];
 8046ef8:	f894 2237 	ldrb.w	r2, [r4, #567]	; 0x237
 8046efc:	f894 3236 	ldrb.w	r3, [r4, #566]	; 0x236
 8046f00:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8046f04:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8046f08:	4293      	cmp	r3, r2
 8046f0a:	d11e      	bne.n	8046f4a <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8046f0c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8046f10:	2be9      	cmp	r3, #233	; 0xe9
 8046f12:	d005      	beq.n	8046f20 <check_fs+0x3c>
 8046f14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8046f16:	4a10      	ldr	r2, [pc, #64]	; (8046f58 <check_fs+0x74>)
 8046f18:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8046f1c:	4293      	cmp	r3, r2
 8046f1e:	d116      	bne.n	8046f4e <check_fs+0x6a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8046f20:	f104 006e 	add.w	r0, r4, #110	; 0x6e
 8046f24:	f7ff ff02 	bl	8046d2c <ld_dword>
 8046f28:	4b0c      	ldr	r3, [pc, #48]	; (8046f5c <check_fs+0x78>)
 8046f2a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8046f2e:	4298      	cmp	r0, r3
 8046f30:	d00f      	beq.n	8046f52 <check_fs+0x6e>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8046f32:	f104 008a 	add.w	r0, r4, #138	; 0x8a
 8046f36:	f7ff fef9 	bl	8046d2c <ld_dword>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8046f3a:	4b09      	ldr	r3, [pc, #36]	; (8046f60 <check_fs+0x7c>)
 8046f3c:	4298      	cmp	r0, r3
 8046f3e:	bf14      	ite	ne
 8046f40:	2002      	movne	r0, #2
 8046f42:	2000      	moveq	r0, #0
}
 8046f44:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8046f46:	2004      	movs	r0, #4
 8046f48:	e7fc      	b.n	8046f44 <check_fs+0x60>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8046f4a:	2003      	movs	r0, #3
 8046f4c:	e7fa      	b.n	8046f44 <check_fs+0x60>
	return 2;
 8046f4e:	2002      	movs	r0, #2
 8046f50:	e7f8      	b.n	8046f44 <check_fs+0x60>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8046f52:	2000      	movs	r0, #0
 8046f54:	e7f6      	b.n	8046f44 <check_fs+0x60>
 8046f56:	bf00      	nop
 8046f58:	009000eb 	.word	0x009000eb
 8046f5c:	00544146 	.word	0x00544146
 8046f60:	33544146 	.word	0x33544146

08046f64 <find_volume>:
{
 8046f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*rfs = 0;
 8046f68:	2300      	movs	r3, #0
{
 8046f6a:	b085      	sub	sp, #20
	*rfs = 0;
 8046f6c:	600b      	str	r3, [r1, #0]
{
 8046f6e:	4688      	mov	r8, r1
 8046f70:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 8046f72:	f7ff ff2c 	bl	8046dce <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8046f76:	1e07      	subs	r7, r0, #0
 8046f78:	f2c0 815e 	blt.w	8047238 <find_volume+0x2d4>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8046f7c:	4eb2      	ldr	r6, [pc, #712]	; (8047248 <find_volume+0x2e4>)
 8046f7e:	eb06 0387 	add.w	r3, r6, r7, lsl #2
 8046f82:	6a1c      	ldr	r4, [r3, #32]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8046f84:	2c00      	cmp	r4, #0
 8046f86:	f000 8159 	beq.w	804723c <find_volume+0x2d8>
	*rfs = fs;							/* Return pointer to the file system object */
 8046f8a:	f8c8 4000 	str.w	r4, [r8]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8046f8e:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8046f90:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8046f94:	b173      	cbz	r3, 8046fb4 <find_volume+0x50>
		stat = disk_status(fs->drv);
 8046f96:	7860      	ldrb	r0, [r4, #1]
 8046f98:	f7ff fe84 	bl	8046ca4 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8046f9c:	07c1      	lsls	r1, r0, #31
 8046f9e:	d409      	bmi.n	8046fb4 <find_volume+0x50>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8046fa0:	2d00      	cmp	r5, #0
 8046fa2:	f000 814d 	beq.w	8047240 <find_volume+0x2dc>
 8046fa6:	f010 0004 	ands.w	r0, r0, #4
 8046faa:	d000      	beq.n	8046fae <find_volume+0x4a>
				return FR_WRITE_PROTECTED;
 8046fac:	200a      	movs	r0, #10
}
 8046fae:	b005      	add	sp, #20
 8046fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8046fb4:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8046fb6:	b2f8      	uxtb	r0, r7
	fs->fs_type = 0;					/* Clear the file system object */
 8046fb8:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8046fba:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8046fbc:	f7ff fe7c 	bl	8046cb8 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8046fc0:	07c2      	lsls	r2, r0, #31
 8046fc2:	f100 813f 	bmi.w	8047244 <find_volume+0x2e0>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8046fc6:	b10d      	cbz	r5, 8046fcc <find_volume+0x68>
 8046fc8:	0743      	lsls	r3, r0, #29
 8046fca:	d4ef      	bmi.n	8046fac <find_volume+0x48>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8046fcc:	f104 020c 	add.w	r2, r4, #12
 8046fd0:	2102      	movs	r1, #2
 8046fd2:	7860      	ldrb	r0, [r4, #1]
 8046fd4:	f7ff fe9c 	bl	8046d10 <disk_ioctl>
 8046fd8:	b108      	cbz	r0, 8046fde <find_volume+0x7a>
 8046fda:	2001      	movs	r0, #1
 8046fdc:	e7e7      	b.n	8046fae <find_volume+0x4a>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8046fde:	89a5      	ldrh	r5, [r4, #12]
 8046fe0:	f5a5 7300 	sub.w	r3, r5, #512	; 0x200
 8046fe4:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8046fe8:	d8f7      	bhi.n	8046fda <find_volume+0x76>
 8046fea:	1e69      	subs	r1, r5, #1
 8046fec:	400d      	ands	r5, r1
 8046fee:	d1f4      	bne.n	8046fda <find_volume+0x76>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8046ff0:	4629      	mov	r1, r5
 8046ff2:	4620      	mov	r0, r4
 8046ff4:	f7ff ff76 	bl	8046ee4 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8046ff8:	2802      	cmp	r0, #2
 8046ffa:	f040 8101 	bne.w	8047200 <find_volume+0x29c>
 8046ffe:	f504 77ff 	add.w	r7, r4, #510	; 0x1fe
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8047002:	f817 0c04 	ldrb.w	r0, [r7, #-4]
 8047006:	b110      	cbz	r0, 804700e <find_volume+0xaa>
 8047008:	4638      	mov	r0, r7
 804700a:	f7ff fe8f 	bl	8046d2c <ld_dword>
 804700e:	f84d 0025 	str.w	r0, [sp, r5, lsl #2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8047012:	3501      	adds	r5, #1
 8047014:	2d04      	cmp	r5, #4
 8047016:	f107 0710 	add.w	r7, r7, #16
 804701a:	d1f2      	bne.n	8047002 <find_volume+0x9e>
 804701c:	2500      	movs	r5, #0
			bsect = br[i];
 804701e:	f85d 7025 	ldr.w	r7, [sp, r5, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8047022:	2f00      	cmp	r7, #0
 8047024:	f000 80e4 	beq.w	80471f0 <find_volume+0x28c>
 8047028:	4639      	mov	r1, r7
 804702a:	4620      	mov	r0, r4
 804702c:	f7ff ff5a 	bl	8046ee4 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8047030:	2801      	cmp	r0, #1
 8047032:	f200 80de 	bhi.w	80471f2 <find_volume+0x28e>
	rv = rv << 8 | ptr[0];
 8047036:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 804703a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 804703e:	89a1      	ldrh	r1, [r4, #12]
 8047040:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8047044:	4299      	cmp	r1, r3
 8047046:	f040 80e0 	bne.w	804720a <find_volume+0x2a6>
	rv = rv << 8 | ptr[0];
 804704a:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
 804704e:	f894 904e 	ldrb.w	r9, [r4, #78]	; 0x4e
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8047052:	ea59 2903 	orrs.w	r9, r9, r3, lsl #8
 8047056:	d104      	bne.n	8047062 <find_volume+0xfe>
 8047058:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 804705c:	f7ff fe66 	bl	8046d2c <ld_dword>
 8047060:	4681      	mov	r9, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8047062:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
		fs->fsize = fasize;
 8047066:	f8c4 9020 	str.w	r9, [r4, #32]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 804706a:	1e6b      	subs	r3, r5, #1
 804706c:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 804706e:	70a5      	strb	r5, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8047070:	f200 80cb 	bhi.w	804720a <find_volume+0x2a6>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8047074:	f894 8045 	ldrb.w	r8, [r4, #69]	; 0x45
 8047078:	fa1f f388 	uxth.w	r3, r8
 804707c:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 804707e:	2b00      	cmp	r3, #0
 8047080:	f000 80c3 	beq.w	804720a <find_volume+0x2a6>
 8047084:	f108 33ff 	add.w	r3, r8, #4294967295
 8047088:	ea13 0f08 	tst.w	r3, r8
 804708c:	f040 80bd 	bne.w	804720a <find_volume+0x2a6>
	rv = rv << 8 | ptr[0];
 8047090:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8047094:	f894 a049 	ldrb.w	sl, [r4, #73]	; 0x49
 8047098:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 804709c:	094b      	lsrs	r3, r1, #5
 804709e:	fbba fbf3 	udiv	fp, sl, r3
 80470a2:	fb03 a31b 	mls	r3, r3, fp, sl
 80470a6:	b29b      	uxth	r3, r3
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80470a8:	f8a4 a008 	strh.w	sl, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80470ac:	2b00      	cmp	r3, #0
 80470ae:	f040 80ac 	bne.w	804720a <find_volume+0x2a6>
	rv = rv << 8 | ptr[0];
 80470b2:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 80470b6:	f894 004b 	ldrb.w	r0, [r4, #75]	; 0x4b
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80470ba:	ea50 2003 	orrs.w	r0, r0, r3, lsl #8
 80470be:	d103      	bne.n	80470c8 <find_volume+0x164>
 80470c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80470c4:	f7ff fe32 	bl	8046d2c <ld_dword>
	rv = rv << 8 | ptr[0];
 80470c8:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 80470cc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80470d0:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 80470d4:	f000 8099 	beq.w	804720a <find_volume+0x2a6>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80470d8:	fb09 fc05 	mul.w	ip, r9, r5
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80470dc:	eb0b 0203 	add.w	r2, fp, r3
 80470e0:	4462      	add	r2, ip
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80470e2:	4290      	cmp	r0, r2
 80470e4:	f0c0 8091 	bcc.w	804720a <find_volume+0x2a6>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80470e8:	1a80      	subs	r0, r0, r2
 80470ea:	fbb0 f0f8 	udiv	r0, r0, r8
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80470ee:	2800      	cmp	r0, #0
 80470f0:	f000 808b 	beq.w	804720a <find_volume+0x2a6>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80470f4:	f64f 78f5 	movw	r8, #65525	; 0xfff5
 80470f8:	4540      	cmp	r0, r8
 80470fa:	bf8c      	ite	hi
 80470fc:	f04f 0803 	movhi.w	r8, #3
 8047100:	f04f 0802 	movls.w	r8, #2
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8047104:	f640 75f5 	movw	r5, #4085	; 0xff5
 8047108:	42a8      	cmp	r0, r5
 804710a:	bf98      	it	ls
 804710c:	f04f 0801 	movls.w	r8, #1
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8047110:	443b      	add	r3, r7
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8047112:	1c85      	adds	r5, r0, #2
		fs->database = bsect + sysect;					/* Data start sector */
 8047114:	443a      	add	r2, r7
		if (fmt == FS_FAT32) {
 8047116:	f1b8 0f03 	cmp.w	r8, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 804711a:	61e5      	str	r5, [r4, #28]
		fs->volbase = bsect;							/* Volume start sector */
 804711c:	6267      	str	r7, [r4, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 804711e:	62a3      	str	r3, [r4, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8047120:	6322      	str	r2, [r4, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8047122:	d176      	bne.n	8047212 <find_volume+0x2ae>
	rv = rv << 8 | ptr[0];
 8047124:	f894 2063 	ldrb.w	r2, [r4, #99]	; 0x63
 8047128:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 804712c:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8047130:	d16b      	bne.n	804720a <find_volume+0x2a6>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8047132:	f1ba 0f00 	cmp.w	sl, #0
 8047136:	d168      	bne.n	804720a <find_volume+0x2a6>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8047138:	f104 0064 	add.w	r0, r4, #100	; 0x64
 804713c:	f7ff fdf6 	bl	8046d2c <ld_dword>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8047140:	00ad      	lsls	r5, r5, #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8047142:	62e0      	str	r0, [r4, #44]	; 0x2c
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8047144:	1e4b      	subs	r3, r1, #1
 8047146:	441d      	add	r5, r3
 8047148:	fbb5 f1f1 	udiv	r1, r5, r1
 804714c:	4549      	cmp	r1, r9
 804714e:	d85c      	bhi.n	804720a <find_volume+0x2a6>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8047150:	f04f 33ff 	mov.w	r3, #4294967295
 8047154:	e9c4 3304 	strd	r3, r3, [r4, #16]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8047158:	f1b8 0f03 	cmp.w	r8, #3
		fs->fsi_flag = 0x80;
 804715c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8047160:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8047162:	d12f      	bne.n	80471c4 <find_volume+0x260>
	rv = rv << 8 | ptr[0];
 8047164:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 8047168:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 804716c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8047170:	2b01      	cmp	r3, #1
 8047172:	d127      	bne.n	80471c4 <find_volume+0x260>
			&& move_window(fs, bsect + 1) == FR_OK)
 8047174:	1c79      	adds	r1, r7, #1
 8047176:	4620      	mov	r0, r4
 8047178:	f7ff fe99 	bl	8046eae <move_window>
 804717c:	bb10      	cbnz	r0, 80471c4 <find_volume+0x260>
	rv = rv << 8 | ptr[0];
 804717e:	f894 2237 	ldrb.w	r2, [r4, #567]	; 0x237
 8047182:	f894 3236 	ldrb.w	r3, [r4, #566]	; 0x236
			fs->fsi_flag = 0;
 8047186:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 8047188:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 804718c:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8047190:	4293      	cmp	r3, r2
 8047192:	d117      	bne.n	80471c4 <find_volume+0x260>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8047194:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8047198:	f7ff fdc8 	bl	8046d2c <ld_dword>
 804719c:	4b2b      	ldr	r3, [pc, #172]	; (804724c <find_volume+0x2e8>)
 804719e:	4298      	cmp	r0, r3
 80471a0:	d110      	bne.n	80471c4 <find_volume+0x260>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80471a2:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 80471a6:	f7ff fdc1 	bl	8046d2c <ld_dword>
 80471aa:	4b29      	ldr	r3, [pc, #164]	; (8047250 <find_volume+0x2ec>)
 80471ac:	4298      	cmp	r0, r3
 80471ae:	d109      	bne.n	80471c4 <find_volume+0x260>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80471b0:	f504 7008 	add.w	r0, r4, #544	; 0x220
 80471b4:	f7ff fdba 	bl	8046d2c <ld_dword>
 80471b8:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80471ba:	f504 7009 	add.w	r0, r4, #548	; 0x224
 80471be:	f7ff fdb5 	bl	8046d2c <ld_dword>
 80471c2:	6120      	str	r0, [r4, #16]
	fs->id = ++Fsid;		/* File system mount ID */
 80471c4:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
		if (Files[i].fs == fs) Files[i].fs = 0;
 80471c6:	6832      	ldr	r2, [r6, #0]
	fs->fs_type = fmt;		/* FAT sub-type */
 80471c8:	f884 8000 	strb.w	r8, [r4]
	fs->id = ++Fsid;		/* File system mount ID */
 80471cc:	3301      	adds	r3, #1
 80471ce:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 80471d0:	4294      	cmp	r4, r2
	fs->id = ++Fsid;		/* File system mount ID */
 80471d2:	84b3      	strh	r3, [r6, #36]	; 0x24
 80471d4:	80e3      	strh	r3, [r4, #6]
	fs->cdir = 0;			/* Initialize current directory */
 80471d6:	f04f 0300 	mov.w	r3, #0
		if (Files[i].fs == fs) Files[i].fs = 0;
 80471da:	bf08      	it	eq
 80471dc:	6033      	streq	r3, [r6, #0]
	fs->cdir = 0;			/* Initialize current directory */
 80471de:	61a3      	str	r3, [r4, #24]
		if (Files[i].fs == fs) Files[i].fs = 0;
 80471e0:	6933      	ldr	r3, [r6, #16]
 80471e2:	429c      	cmp	r4, r3
 80471e4:	f04f 0000 	mov.w	r0, #0
 80471e8:	f47f aee1 	bne.w	8046fae <find_volume+0x4a>
 80471ec:	6130      	str	r0, [r6, #16]
 80471ee:	e6de      	b.n	8046fae <find_volume+0x4a>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80471f0:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80471f2:	3501      	adds	r5, #1
 80471f4:	2d04      	cmp	r5, #4
 80471f6:	f47f af12 	bne.w	804701e <find_volume+0xba>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80471fa:	2804      	cmp	r0, #4
 80471fc:	d105      	bne.n	804720a <find_volume+0x2a6>
 80471fe:	e6ec      	b.n	8046fda <find_volume+0x76>
 8047200:	2804      	cmp	r0, #4
 8047202:	f43f aeea 	beq.w	8046fda <find_volume+0x76>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8047206:	2801      	cmp	r0, #1
 8047208:	d901      	bls.n	804720e <find_volume+0x2aa>
 804720a:	200d      	movs	r0, #13
 804720c:	e6cf      	b.n	8046fae <find_volume+0x4a>
	bsect = 0;
 804720e:	462f      	mov	r7, r5
 8047210:	e711      	b.n	8047036 <find_volume+0xd2>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8047212:	f1ba 0f00 	cmp.w	sl, #0
 8047216:	d0f8      	beq.n	804720a <find_volume+0x2a6>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8047218:	f1b8 0f02 	cmp.w	r8, #2
 804721c:	ea4f 0045 	mov.w	r0, r5, lsl #1
 8047220:	bf18      	it	ne
 8047222:	1940      	addne	r0, r0, r5
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8047224:	4463      	add	r3, ip
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8047226:	bf18      	it	ne
 8047228:	f005 0501 	andne.w	r5, r5, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 804722c:	62e3      	str	r3, [r4, #44]	; 0x2c
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 804722e:	bf0c      	ite	eq
 8047230:	4605      	moveq	r5, r0
 8047232:	eb05 0550 	addne.w	r5, r5, r0, lsr #1
 8047236:	e785      	b.n	8047144 <find_volume+0x1e0>
	if (vol < 0) return FR_INVALID_DRIVE;
 8047238:	200b      	movs	r0, #11
 804723a:	e6b8      	b.n	8046fae <find_volume+0x4a>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 804723c:	200c      	movs	r0, #12
 804723e:	e6b6      	b.n	8046fae <find_volume+0x4a>
			return FR_OK;				/* The file system object is valid */
 8047240:	4628      	mov	r0, r5
 8047242:	e6b4      	b.n	8046fae <find_volume+0x4a>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8047244:	2003      	movs	r0, #3
 8047246:	e6b2      	b.n	8046fae <find_volume+0x4a>
 8047248:	2000a3d0 	.word	0x2000a3d0
 804724c:	41615252 	.word	0x41615252
 8047250:	61417272 	.word	0x61417272

08047254 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8047254:	2901      	cmp	r1, #1
{
 8047256:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804725a:	4604      	mov	r4, r0
 804725c:	460d      	mov	r5, r1
 804725e:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8047260:	f240 808a 	bls.w	8047378 <put_fat+0x124>
 8047264:	69c3      	ldr	r3, [r0, #28]
 8047266:	428b      	cmp	r3, r1
 8047268:	f240 8086 	bls.w	8047378 <put_fat+0x124>
		switch (fs->fs_type) {
 804726c:	7803      	ldrb	r3, [r0, #0]
 804726e:	2b02      	cmp	r3, #2
 8047270:	d049      	beq.n	8047306 <put_fat+0xb2>
 8047272:	2b03      	cmp	r3, #3
 8047274:	d060      	beq.n	8047338 <put_fat+0xe4>
 8047276:	2b01      	cmp	r3, #1
 8047278:	d17e      	bne.n	8047378 <put_fat+0x124>
			bc = (UINT)clst; bc += bc / 2;
 804727a:	eb01 0a51 	add.w	sl, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 804727e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8047280:	8983      	ldrh	r3, [r0, #12]
 8047282:	fbba f3f3 	udiv	r3, sl, r3
 8047286:	4419      	add	r1, r3
 8047288:	f7ff fe11 	bl	8046eae <move_window>
 804728c:	4606      	mov	r6, r0
			if (res != FR_OK) break;
 804728e:	bb78      	cbnz	r0, 80472f0 <put_fat+0x9c>
			p = fs->win + bc++ % SS(fs);
 8047290:	89a3      	ldrh	r3, [r4, #12]
 8047292:	fbba f2f3 	udiv	r2, sl, r3
 8047296:	f104 0838 	add.w	r8, r4, #56	; 0x38
 804729a:	fb03 a212 	mls	r2, r3, r2, sl
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 804729e:	f015 0501 	ands.w	r5, r5, #1
 80472a2:	bf1f      	itttt	ne
 80472a4:	f818 3002 	ldrbne.w	r3, [r8, r2]
 80472a8:	f003 010f 	andne.w	r1, r3, #15
 80472ac:	013b      	lslne	r3, r7, #4
 80472ae:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 80472b2:	bf14      	ite	ne
 80472b4:	430b      	orrne	r3, r1
 80472b6:	b2fb      	uxtbeq	r3, r7
 80472b8:	f808 3002 	strb.w	r3, [r8, r2]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80472bc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
			fs->wflag = 1;
 80472be:	2301      	movs	r3, #1
 80472c0:	70e3      	strb	r3, [r4, #3]
			p = fs->win + bc++ % SS(fs);
 80472c2:	f10a 0901 	add.w	r9, sl, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80472c6:	89a3      	ldrh	r3, [r4, #12]
 80472c8:	fbb9 f3f3 	udiv	r3, r9, r3
 80472cc:	4620      	mov	r0, r4
 80472ce:	4419      	add	r1, r3
 80472d0:	f7ff fded 	bl	8046eae <move_window>
			if (res != FR_OK) break;
 80472d4:	4606      	mov	r6, r0
 80472d6:	b958      	cbnz	r0, 80472f0 <put_fat+0x9c>
			p = fs->win + bc % SS(fs);
 80472d8:	89a3      	ldrh	r3, [r4, #12]
 80472da:	fbb9 f2f3 	udiv	r2, r9, r3
 80472de:	fb03 9212 	mls	r2, r3, r2, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80472e2:	b145      	cbz	r5, 80472f6 <put_fat+0xa2>
 80472e4:	f3c7 1707 	ubfx	r7, r7, #4, #8
 80472e8:	f808 7002 	strb.w	r7, [r8, r2]
			fs->wflag = 1;
 80472ec:	2301      	movs	r3, #1
 80472ee:	70e3      	strb	r3, [r4, #3]
}
 80472f0:	4630      	mov	r0, r6
 80472f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80472f6:	f818 3002 	ldrb.w	r3, [r8, r2]
 80472fa:	f3c7 2703 	ubfx	r7, r7, #8, #4
 80472fe:	f023 030f 	bic.w	r3, r3, #15
 8047302:	431f      	orrs	r7, r3
 8047304:	e7f0      	b.n	80472e8 <put_fat+0x94>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8047306:	8983      	ldrh	r3, [r0, #12]
 8047308:	085b      	lsrs	r3, r3, #1
 804730a:	fbb1 f3f3 	udiv	r3, r1, r3
 804730e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8047310:	4419      	add	r1, r3
 8047312:	f7ff fdcc 	bl	8046eae <move_window>
			if (res != FR_OK) break;
 8047316:	4606      	mov	r6, r0
 8047318:	2800      	cmp	r0, #0
 804731a:	d1e9      	bne.n	80472f0 <put_fat+0x9c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 804731c:	89a1      	ldrh	r1, [r4, #12]
 804731e:	006d      	lsls	r5, r5, #1
 8047320:	f104 0238 	add.w	r2, r4, #56	; 0x38
 8047324:	fbb5 f3f1 	udiv	r3, r5, r1
 8047328:	fb01 5513 	mls	r5, r1, r3, r5
 804732c:	1953      	adds	r3, r2, r5
	*ptr++ = (BYTE)val; val >>= 8;
 804732e:	5557      	strb	r7, [r2, r5]
 8047330:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 8047334:	705f      	strb	r7, [r3, #1]
 8047336:	e7d9      	b.n	80472ec <put_fat+0x98>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8047338:	8983      	ldrh	r3, [r0, #12]
 804733a:	089b      	lsrs	r3, r3, #2
 804733c:	fbb1 f3f3 	udiv	r3, r1, r3
 8047340:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8047342:	4419      	add	r1, r3
 8047344:	f7ff fdb3 	bl	8046eae <move_window>
			if (res != FR_OK) break;
 8047348:	4606      	mov	r6, r0
 804734a:	2800      	cmp	r0, #0
 804734c:	d1d0      	bne.n	80472f0 <put_fat+0x9c>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 804734e:	89a1      	ldrh	r1, [r4, #12]
 8047350:	00ad      	lsls	r5, r5, #2
 8047352:	f104 0338 	add.w	r3, r4, #56	; 0x38
 8047356:	fbb5 f2f1 	udiv	r2, r5, r1
 804735a:	fb01 5512 	mls	r5, r1, r2, r5
 804735e:	441d      	add	r5, r3
 8047360:	4628      	mov	r0, r5
 8047362:	f7ff fce3 	bl	8046d2c <ld_dword>
 8047366:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 804736a:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 804736e:	4339      	orrs	r1, r7
 8047370:	4628      	mov	r0, r5
 8047372:	f7ff fce3 	bl	8046d3c <st_dword>
 8047376:	e7b9      	b.n	80472ec <put_fat+0x98>
	FRESULT res = FR_INT_ERR;
 8047378:	2602      	movs	r6, #2
 804737a:	e7b9      	b.n	80472f0 <put_fat+0x9c>

0804737c <get_fat.isra.8>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 804737c:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 804737e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8047380:	4604      	mov	r4, r0
 8047382:	460e      	mov	r6, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8047384:	d968      	bls.n	8047458 <get_fat.isra.8+0xdc>
 8047386:	69c3      	ldr	r3, [r0, #28]
 8047388:	4299      	cmp	r1, r3
 804738a:	d265      	bcs.n	8047458 <get_fat.isra.8+0xdc>
		switch (fs->fs_type) {
 804738c:	7803      	ldrb	r3, [r0, #0]
 804738e:	2b02      	cmp	r3, #2
 8047390:	d032      	beq.n	80473f8 <get_fat.isra.8+0x7c>
 8047392:	2b03      	cmp	r3, #3
 8047394:	d048      	beq.n	8047428 <get_fat.isra.8+0xac>
 8047396:	2b01      	cmp	r3, #1
 8047398:	d15e      	bne.n	8047458 <get_fat.isra.8+0xdc>
			bc = (UINT)clst; bc += bc / 2;
 804739a:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 804739e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80473a0:	8983      	ldrh	r3, [r0, #12]
 80473a2:	fbb5 f3f3 	udiv	r3, r5, r3
 80473a6:	4419      	add	r1, r3
 80473a8:	f7ff fd81 	bl	8046eae <move_window>
 80473ac:	b110      	cbz	r0, 80473b4 <get_fat.isra.8+0x38>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80473ae:	f04f 30ff 	mov.w	r0, #4294967295
}
 80473b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 80473b4:	89a1      	ldrh	r1, [r4, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80473b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			wc = fs->win[bc++ % SS(fs)];
 80473b8:	fbb5 f2f1 	udiv	r2, r5, r1
 80473bc:	fb01 5212 	mls	r2, r1, r2, r5
 80473c0:	4422      	add	r2, r4
 80473c2:	1c6f      	adds	r7, r5, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80473c4:	4620      	mov	r0, r4
 80473c6:	fbb7 f1f1 	udiv	r1, r7, r1
 80473ca:	4419      	add	r1, r3
			wc = fs->win[bc++ % SS(fs)];
 80473cc:	f892 5038 	ldrb.w	r5, [r2, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80473d0:	f7ff fd6d 	bl	8046eae <move_window>
 80473d4:	2800      	cmp	r0, #0
 80473d6:	d1ea      	bne.n	80473ae <get_fat.isra.8+0x32>
			wc |= fs->win[bc % SS(fs)] << 8;
 80473d8:	89a2      	ldrh	r2, [r4, #12]
 80473da:	fbb7 f3f2 	udiv	r3, r7, r2
 80473de:	fb02 7313 	mls	r3, r2, r3, r7
 80473e2:	441c      	add	r4, r3
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80473e4:	07f3      	lsls	r3, r6, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 80473e6:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
 80473ea:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80473ee:	bf4c      	ite	mi
 80473f0:	0900      	lsrmi	r0, r0, #4
 80473f2:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 80473f6:	e7dc      	b.n	80473b2 <get_fat.isra.8+0x36>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80473f8:	8983      	ldrh	r3, [r0, #12]
 80473fa:	085b      	lsrs	r3, r3, #1
 80473fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8047400:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8047402:	4419      	add	r1, r3
 8047404:	f7ff fd53 	bl	8046eae <move_window>
 8047408:	2800      	cmp	r0, #0
 804740a:	d1d0      	bne.n	80473ae <get_fat.isra.8+0x32>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 804740c:	89a1      	ldrh	r1, [r4, #12]
 804740e:	0076      	lsls	r6, r6, #1
 8047410:	f104 0238 	add.w	r2, r4, #56	; 0x38
 8047414:	fbb6 f3f1 	udiv	r3, r6, r1
 8047418:	fb01 6613 	mls	r6, r1, r3, r6
 804741c:	1993      	adds	r3, r2, r6
	rv = rv << 8 | ptr[0];
 804741e:	5d90      	ldrb	r0, [r2, r6]
 8047420:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8047422:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8047426:	e7c4      	b.n	80473b2 <get_fat.isra.8+0x36>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8047428:	8983      	ldrh	r3, [r0, #12]
 804742a:	089b      	lsrs	r3, r3, #2
 804742c:	fbb1 f3f3 	udiv	r3, r1, r3
 8047430:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8047432:	4419      	add	r1, r3
 8047434:	f7ff fd3b 	bl	8046eae <move_window>
 8047438:	2800      	cmp	r0, #0
 804743a:	d1b8      	bne.n	80473ae <get_fat.isra.8+0x32>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 804743c:	89a2      	ldrh	r2, [r4, #12]
 804743e:	00b6      	lsls	r6, r6, #2
 8047440:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8047444:	fbb6 f3f2 	udiv	r3, r6, r2
 8047448:	fb02 6613 	mls	r6, r2, r3, r6
 804744c:	4430      	add	r0, r6
 804744e:	f7ff fc6d 	bl	8046d2c <ld_dword>
 8047452:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 8047456:	e7ac      	b.n	80473b2 <get_fat.isra.8+0x36>
			val = 1;	/* Internal error */
 8047458:	2001      	movs	r0, #1
 804745a:	e7aa      	b.n	80473b2 <get_fat.isra.8+0x36>

0804745c <create_chain>:
{
 804745c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8047460:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 8047462:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8047464:	460f      	mov	r7, r1
 8047466:	b971      	cbnz	r1, 8047486 <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8047468:	692e      	ldr	r6, [r5, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 804746a:	b1f6      	cbz	r6, 80474aa <create_chain+0x4e>
 804746c:	69eb      	ldr	r3, [r5, #28]
 804746e:	42b3      	cmp	r3, r6
 8047470:	bf98      	it	ls
 8047472:	2601      	movls	r6, #1
 8047474:	4634      	mov	r4, r6
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8047476:	69eb      	ldr	r3, [r5, #28]
			ncl++;							/* Next cluster */
 8047478:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 804747a:	42a3      	cmp	r3, r4
 804747c:	d818      	bhi.n	80474b0 <create_chain+0x54>
				if (ncl > scl) return 0;	/* No free cluster */
 804747e:	2e01      	cmp	r6, #1
 8047480:	d815      	bhi.n	80474ae <create_chain+0x52>
 8047482:	2400      	movs	r4, #0
 8047484:	e009      	b.n	804749a <create_chain+0x3e>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8047486:	4628      	mov	r0, r5
 8047488:	f7ff ff78 	bl	804737c <get_fat.isra.8>
		if (cs < 2) return 1;				/* Invalid FAT value */
 804748c:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 804748e:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8047490:	d937      	bls.n	8047502 <create_chain+0xa6>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8047492:	1c43      	adds	r3, r0, #1
 8047494:	d104      	bne.n	80474a0 <create_chain+0x44>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8047496:	f04f 34ff 	mov.w	r4, #4294967295
}
 804749a:	4620      	mov	r0, r4
 804749c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80474a0:	69eb      	ldr	r3, [r5, #28]
 80474a2:	4283      	cmp	r3, r0
 80474a4:	d8f9      	bhi.n	804749a <create_chain+0x3e>
 80474a6:	463e      	mov	r6, r7
 80474a8:	e7e4      	b.n	8047474 <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80474aa:	2601      	movs	r6, #1
 80474ac:	e7e2      	b.n	8047474 <create_chain+0x18>
				ncl = 2;
 80474ae:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80474b0:	4621      	mov	r1, r4
 80474b2:	f8d8 0000 	ldr.w	r0, [r8]
 80474b6:	f7ff ff61 	bl	804737c <get_fat.isra.8>
			if (cs == 0) break;				/* Found a free cluster */
 80474ba:	b130      	cbz	r0, 80474ca <create_chain+0x6e>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80474bc:	2801      	cmp	r0, #1
 80474be:	d020      	beq.n	8047502 <create_chain+0xa6>
 80474c0:	3001      	adds	r0, #1
 80474c2:	d0e8      	beq.n	8047496 <create_chain+0x3a>
			if (ncl == scl) return 0;		/* No free cluster */
 80474c4:	42b4      	cmp	r4, r6
 80474c6:	d1d6      	bne.n	8047476 <create_chain+0x1a>
 80474c8:	e7db      	b.n	8047482 <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80474ca:	f04f 32ff 	mov.w	r2, #4294967295
 80474ce:	4621      	mov	r1, r4
 80474d0:	4628      	mov	r0, r5
 80474d2:	f7ff febf 	bl	8047254 <put_fat>
		if (res == FR_OK && clst != 0) {
 80474d6:	b990      	cbnz	r0, 80474fe <create_chain+0xa2>
 80474d8:	b957      	cbnz	r7, 80474f0 <create_chain+0x94>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80474da:	69ea      	ldr	r2, [r5, #28]
 80474dc:	696b      	ldr	r3, [r5, #20]
		fs->last_clst = ncl;
 80474de:	612c      	str	r4, [r5, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80474e0:	3a02      	subs	r2, #2
 80474e2:	4293      	cmp	r3, r2
 80474e4:	d90f      	bls.n	8047506 <create_chain+0xaa>
		fs->fsi_flag |= 1;
 80474e6:	792b      	ldrb	r3, [r5, #4]
 80474e8:	f043 0301 	orr.w	r3, r3, #1
 80474ec:	712b      	strb	r3, [r5, #4]
 80474ee:	e7d4      	b.n	804749a <create_chain+0x3e>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80474f0:	4622      	mov	r2, r4
 80474f2:	4639      	mov	r1, r7
 80474f4:	4628      	mov	r0, r5
 80474f6:	f7ff fead 	bl	8047254 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80474fa:	2800      	cmp	r0, #0
 80474fc:	d0ed      	beq.n	80474da <create_chain+0x7e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80474fe:	2801      	cmp	r0, #1
 8047500:	d0c9      	beq.n	8047496 <create_chain+0x3a>
 8047502:	2401      	movs	r4, #1
 8047504:	e7c9      	b.n	804749a <create_chain+0x3e>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8047506:	3b01      	subs	r3, #1
 8047508:	616b      	str	r3, [r5, #20]
 804750a:	e7ec      	b.n	80474e6 <create_chain+0x8a>

0804750c <sync_fs>:
{
 804750c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804750e:	4604      	mov	r4, r0
	res = sync_window(fs);
 8047510:	f7ff fcc7 	bl	8046ea2 <sync_window>
 8047514:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8047516:	2800      	cmp	r0, #0
 8047518:	d141      	bne.n	804759e <sync_fs+0x92>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 804751a:	7823      	ldrb	r3, [r4, #0]
 804751c:	2b03      	cmp	r3, #3
 804751e:	d136      	bne.n	804758e <sync_fs+0x82>
 8047520:	7927      	ldrb	r7, [r4, #4]
 8047522:	2f01      	cmp	r7, #1
 8047524:	d133      	bne.n	804758e <sync_fs+0x82>
			mem_set(fs->win, 0, SS(fs));
 8047526:	f104 0638 	add.w	r6, r4, #56	; 0x38
 804752a:	4601      	mov	r1, r0
 804752c:	89a2      	ldrh	r2, [r4, #12]
 804752e:	4630      	mov	r0, r6
 8047530:	f7ff fc0c 	bl	8046d4c <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 8047534:	2355      	movs	r3, #85	; 0x55
 8047536:	f884 3236 	strb.w	r3, [r4, #566]	; 0x236
	*ptr++ = (BYTE)val;
 804753a:	23aa      	movs	r3, #170	; 0xaa
 804753c:	f884 3237 	strb.w	r3, [r4, #567]	; 0x237
	*ptr++ = (BYTE)val; val >>= 8;
 8047540:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
 8047542:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8047544:	2172      	movs	r1, #114	; 0x72
 8047546:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	*ptr++ = (BYTE)val; val >>= 8;
 804754a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	*ptr++ = (BYTE)val; val >>= 8;
 804754e:	2361      	movs	r3, #97	; 0x61
 8047550:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	*ptr++ = (BYTE)val;
 8047554:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
	*ptr++ = (BYTE)val; val >>= 8;
 8047558:	f884 221e 	strb.w	r2, [r4, #542]	; 0x21e
	*ptr++ = (BYTE)val;
 804755c:	f884 321f 	strb.w	r3, [r4, #543]	; 0x21f
	*ptr++ = (BYTE)val; val >>= 8;
 8047560:	f884 121c 	strb.w	r1, [r4, #540]	; 0x21c
	*ptr++ = (BYTE)val; val >>= 8;
 8047564:	f884 121d 	strb.w	r1, [r4, #541]	; 0x21d
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8047568:	f504 7008 	add.w	r0, r4, #544	; 0x220
 804756c:	6961      	ldr	r1, [r4, #20]
 804756e:	f7ff fbe5 	bl	8046d3c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8047572:	6921      	ldr	r1, [r4, #16]
 8047574:	f504 7009 	add.w	r0, r4, #548	; 0x224
 8047578:	f7ff fbe0 	bl	8046d3c <st_dword>
			fs->winsect = fs->volbase + 1;
 804757c:	6a62      	ldr	r2, [r4, #36]	; 0x24
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 804757e:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 8047580:	3201      	adds	r2, #1
 8047582:	6362      	str	r2, [r4, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8047584:	463b      	mov	r3, r7
 8047586:	4631      	mov	r1, r6
 8047588:	f7ff fbb4 	bl	8046cf4 <disk_write>
			fs->fsi_flag = 0;
 804758c:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 804758e:	2200      	movs	r2, #0
 8047590:	4611      	mov	r1, r2
 8047592:	7860      	ldrb	r0, [r4, #1]
 8047594:	f7ff fbbc 	bl	8046d10 <disk_ioctl>
 8047598:	3000      	adds	r0, #0
 804759a:	bf18      	it	ne
 804759c:	2001      	movne	r0, #1
}
 804759e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080475a0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80475a0:	b530      	push	{r4, r5, lr}
 80475a2:	b085      	sub	sp, #20
 80475a4:	e9cd 1000 	strd	r1, r0, [sp]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80475a8:	a804      	add	r0, sp, #16
{
 80475aa:	4615      	mov	r5, r2
	const TCHAR *rp = path;
 80475ac:	f840 1d04 	str.w	r1, [r0, #-4]!


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80475b0:	f7ff fc0d 	bl	8046dce <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80475b4:	2800      	cmp	r0, #0
 80475b6:	db1f      	blt.n	80475f8 <f_mount+0x58>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80475b8:	4b11      	ldr	r3, [pc, #68]	; (8047600 <f_mount+0x60>)
 80475ba:	0081      	lsls	r1, r0, #2
 80475bc:	185a      	adds	r2, r3, r1
 80475be:	6a10      	ldr	r0, [r2, #32]

	if (cfs) {
 80475c0:	b150      	cbz	r0, 80475d8 <f_mount+0x38>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80475c2:	681a      	ldr	r2, [r3, #0]
 80475c4:	4290      	cmp	r0, r2
 80475c6:	bf04      	itt	eq
 80475c8:	2200      	moveq	r2, #0
 80475ca:	601a      	streq	r2, [r3, #0]
 80475cc:	691a      	ldr	r2, [r3, #16]
 80475ce:	2400      	movs	r4, #0
 80475d0:	4290      	cmp	r0, r2
 80475d2:	bf08      	it	eq
 80475d4:	611c      	streq	r4, [r3, #16]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80475d6:	7004      	strb	r4, [r0, #0]
	}

	if (fs) {
 80475d8:	9801      	ldr	r0, [sp, #4]
 80475da:	b108      	cbz	r0, 80475e0 <f_mount+0x40>
		fs->fs_type = 0;				/* Clear new fs object */
 80475dc:	2200      	movs	r2, #0
 80475de:	7002      	strb	r2, [r0, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80475e0:	440b      	add	r3, r1
 80475e2:	6218      	str	r0, [r3, #32]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80475e4:	b130      	cbz	r0, 80475f4 <f_mount+0x54>
 80475e6:	2d01      	cmp	r5, #1
 80475e8:	d108      	bne.n	80475fc <f_mount+0x5c>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80475ea:	2200      	movs	r2, #0
 80475ec:	a901      	add	r1, sp, #4
 80475ee:	4668      	mov	r0, sp
 80475f0:	f7ff fcb8 	bl	8046f64 <find_volume>
	LEAVE_FF(fs, res);
}
 80475f4:	b005      	add	sp, #20
 80475f6:	bd30      	pop	{r4, r5, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 80475f8:	200b      	movs	r0, #11
 80475fa:	e7fb      	b.n	80475f4 <f_mount+0x54>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80475fc:	2000      	movs	r0, #0
 80475fe:	e7f9      	b.n	80475f4 <f_mount+0x54>
 8047600:	2000a3d0 	.word	0x2000a3d0

08047604 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8047604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8047608:	469b      	mov	fp, r3
 804760a:	b085      	sub	sp, #20
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 804760c:	2300      	movs	r3, #0
{
 804760e:	4689      	mov	r9, r1
	*br = 0;	/* Clear read byte counter */
 8047610:	f8cb 3000 	str.w	r3, [fp]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8047614:	a903      	add	r1, sp, #12
{
 8047616:	4604      	mov	r4, r0
 8047618:	4617      	mov	r7, r2
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 804761a:	f7ff fbf0 	bl	8046dfe <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 804761e:	4605      	mov	r5, r0
 8047620:	bb18      	cbnz	r0, 804766a <f_read+0x66>
 8047622:	7d65      	ldrb	r5, [r4, #21]
 8047624:	bb0d      	cbnz	r5, 804766a <f_read+0x66>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8047626:	7d23      	ldrb	r3, [r4, #20]
 8047628:	07da      	lsls	r2, r3, #31
 804762a:	f140 80a8 	bpl.w	804777e <f_read+0x17a>
	remain = fp->obj.objsize - fp->fptr;
 804762e:	68e3      	ldr	r3, [r4, #12]
 8047630:	69a6      	ldr	r6, [r4, #24]
 8047632:	1b9e      	subs	r6, r3, r6
 8047634:	42be      	cmp	r6, r7
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8047636:	f104 0330 	add.w	r3, r4, #48	; 0x30
 804763a:	bf28      	it	cs
 804763c:	463e      	movcs	r6, r7
 804763e:	9300      	str	r3, [sp, #0]
	for ( ;  btr;								/* Repeat until all data read */
 8047640:	b19e      	cbz	r6, 804766a <f_read+0x66>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8047642:	9803      	ldr	r0, [sp, #12]
 8047644:	69a1      	ldr	r1, [r4, #24]
 8047646:	8983      	ldrh	r3, [r0, #12]
 8047648:	fbb1 f2f3 	udiv	r2, r1, r3
 804764c:	fb03 1312 	mls	r3, r3, r2, r1
 8047650:	2b00      	cmp	r3, #0
 8047652:	d17d      	bne.n	8047750 <f_read+0x14c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8047654:	8943      	ldrh	r3, [r0, #10]
 8047656:	3b01      	subs	r3, #1
			if (csect == 0) {					/* On the cluster boundary? */
 8047658:	4013      	ands	r3, r2
 804765a:	9301      	str	r3, [sp, #4]
 804765c:	d119      	bne.n	8047692 <f_read+0x8e>
				if (fp->fptr == 0) {			/* On the top of the file? */
 804765e:	b941      	cbnz	r1, 8047672 <f_read+0x6e>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8047660:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8047662:	2801      	cmp	r0, #1
 8047664:	d810      	bhi.n	8047688 <f_read+0x84>
 8047666:	2502      	movs	r5, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8047668:	7565      	strb	r5, [r4, #21]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 804766a:	4628      	mov	r0, r5
 804766c:	b005      	add	sp, #20
 804766e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl) {
 8047672:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8047674:	b11b      	cbz	r3, 804767e <f_read+0x7a>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8047676:	4620      	mov	r0, r4
 8047678:	f7ff fb95 	bl	8046da6 <clmt_clust>
 804767c:	e7f1      	b.n	8047662 <f_read+0x5e>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 804767e:	69e1      	ldr	r1, [r4, #28]
 8047680:	6820      	ldr	r0, [r4, #0]
 8047682:	f7ff fe7b 	bl	804737c <get_fat.isra.8>
 8047686:	e7ec      	b.n	8047662 <f_read+0x5e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8047688:	1c43      	adds	r3, r0, #1
 804768a:	d101      	bne.n	8047690 <f_read+0x8c>
 804768c:	2501      	movs	r5, #1
 804768e:	e7eb      	b.n	8047668 <f_read+0x64>
				fp->clust = clst;				/* Update current cluster */
 8047690:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8047692:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8047696:	69e1      	ldr	r1, [r4, #28]
 8047698:	4650      	mov	r0, sl
 804769a:	f7ff fb79 	bl	8046d90 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 804769e:	2800      	cmp	r0, #0
 80476a0:	d0e1      	beq.n	8047666 <f_read+0x62>
			sect += csect;
 80476a2:	9b01      	ldr	r3, [sp, #4]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80476a4:	f8ba 800c 	ldrh.w	r8, [sl, #12]
 80476a8:	fbb6 f8f8 	udiv	r8, r6, r8
			sect += csect;
 80476ac:	181f      	adds	r7, r3, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
 80476ae:	f1b8 0f00 	cmp.w	r8, #0
 80476b2:	d030      	beq.n	8047716 <f_read+0x112>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80476b4:	9a01      	ldr	r2, [sp, #4]
 80476b6:	f8ba 300a 	ldrh.w	r3, [sl, #10]
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80476ba:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80476be:	4442      	add	r2, r8
 80476c0:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 80476c2:	bf84      	itt	hi
 80476c4:	9a01      	ldrhi	r2, [sp, #4]
 80476c6:	eba3 0802 	subhi.w	r8, r3, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80476ca:	4643      	mov	r3, r8
 80476cc:	463a      	mov	r2, r7
 80476ce:	4649      	mov	r1, r9
 80476d0:	f7ff fb02 	bl	8046cd8 <disk_read>
 80476d4:	2800      	cmp	r0, #0
 80476d6:	d1d9      	bne.n	804768c <f_read+0x88>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80476d8:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80476dc:	2b00      	cmp	r3, #0
 80476de:	da0b      	bge.n	80476f8 <f_read+0xf4>
 80476e0:	6a20      	ldr	r0, [r4, #32]
 80476e2:	1bc0      	subs	r0, r0, r7
 80476e4:	4540      	cmp	r0, r8
 80476e6:	d207      	bcs.n	80476f8 <f_read+0xf4>
 80476e8:	9b03      	ldr	r3, [sp, #12]
 80476ea:	899a      	ldrh	r2, [r3, #12]
	if (cnt) {
 80476ec:	b122      	cbz	r2, 80476f8 <f_read+0xf4>
 80476ee:	9900      	ldr	r1, [sp, #0]
 80476f0:	fb02 9000 	mla	r0, r2, r0, r9
 80476f4:	f7ff fb9d 	bl	8046e32 <mem_cpy.part.0>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80476f8:	9b03      	ldr	r3, [sp, #12]
 80476fa:	899f      	ldrh	r7, [r3, #12]
 80476fc:	fb08 f707 	mul.w	r7, r8, r7
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8047700:	69a3      	ldr	r3, [r4, #24]
 8047702:	443b      	add	r3, r7
 8047704:	61a3      	str	r3, [r4, #24]
 8047706:	f8db 3000 	ldr.w	r3, [fp]
 804770a:	443b      	add	r3, r7
 804770c:	44b9      	add	r9, r7
 804770e:	f8cb 3000 	str.w	r3, [fp]
 8047712:	1bf6      	subs	r6, r6, r7
 8047714:	e794      	b.n	8047640 <f_read+0x3c>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8047716:	6a22      	ldr	r2, [r4, #32]
 8047718:	42ba      	cmp	r2, r7
 804771a:	d018      	beq.n	804774e <f_read+0x14a>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 804771c:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8047720:	2b00      	cmp	r3, #0
 8047722:	da0b      	bge.n	804773c <f_read+0x138>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8047724:	2301      	movs	r3, #1
 8047726:	9900      	ldr	r1, [sp, #0]
 8047728:	f89a 0001 	ldrb.w	r0, [sl, #1]
 804772c:	f7ff fae2 	bl	8046cf4 <disk_write>
 8047730:	2800      	cmp	r0, #0
 8047732:	d1ab      	bne.n	804768c <f_read+0x88>
					fp->flag &= (BYTE)~FA_DIRTY;
 8047734:	7d23      	ldrb	r3, [r4, #20]
 8047736:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 804773a:	7523      	strb	r3, [r4, #20]
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 804773c:	9803      	ldr	r0, [sp, #12]
 804773e:	9900      	ldr	r1, [sp, #0]
 8047740:	7840      	ldrb	r0, [r0, #1]
 8047742:	2301      	movs	r3, #1
 8047744:	463a      	mov	r2, r7
 8047746:	f7ff fac7 	bl	8046cd8 <disk_read>
 804774a:	2800      	cmp	r0, #0
 804774c:	d19e      	bne.n	804768c <f_read+0x88>
			fp->sect = sect;
 804774e:	6227      	str	r7, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8047750:	9b03      	ldr	r3, [sp, #12]
 8047752:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 8047756:	69a3      	ldr	r3, [r4, #24]
 8047758:	fbb3 f1f8 	udiv	r1, r3, r8
 804775c:	fb08 3111 	mls	r1, r8, r1, r3
 8047760:	eba8 0801 	sub.w	r8, r8, r1
 8047764:	45b0      	cmp	r8, r6
 8047766:	4647      	mov	r7, r8
 8047768:	bf28      	it	cs
 804776a:	4637      	movcs	r7, r6
	if (cnt) {
 804776c:	2f00      	cmp	r7, #0
 804776e:	d0c7      	beq.n	8047700 <f_read+0xfc>
 8047770:	9b00      	ldr	r3, [sp, #0]
 8047772:	463a      	mov	r2, r7
 8047774:	4419      	add	r1, r3
 8047776:	4648      	mov	r0, r9
 8047778:	f7ff fb5b 	bl	8046e32 <mem_cpy.part.0>
 804777c:	e7c0      	b.n	8047700 <f_read+0xfc>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 804777e:	2507      	movs	r5, #7
 8047780:	e773      	b.n	804766a <f_read+0x66>

08047782 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8047782:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8047786:	469b      	mov	fp, r3
 8047788:	b085      	sub	sp, #20
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 804778a:	2300      	movs	r3, #0
{
 804778c:	4689      	mov	r9, r1
	*bw = 0;	/* Clear write byte counter */
 804778e:	f8cb 3000 	str.w	r3, [fp]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8047792:	a903      	add	r1, sp, #12
{
 8047794:	4604      	mov	r4, r0
 8047796:	4690      	mov	r8, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8047798:	f7ff fb31 	bl	8046dfe <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 804779c:	4605      	mov	r5, r0
 804779e:	b9c8      	cbnz	r0, 80477d4 <f_write+0x52>
 80477a0:	7d65      	ldrb	r5, [r4, #21]
 80477a2:	b9bd      	cbnz	r5, 80477d4 <f_write+0x52>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80477a4:	7d23      	ldrb	r3, [r4, #20]
 80477a6:	079a      	lsls	r2, r3, #30
 80477a8:	f140 80c0 	bpl.w	804792c <f_write+0x1aa>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80477ac:	69a3      	ldr	r3, [r4, #24]
 80477ae:	eb13 0f08 	cmn.w	r3, r8
 80477b2:	d301      	bcc.n	80477b8 <f_write+0x36>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80477b4:	ea6f 0803 	mvn.w	r8, r3
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80477b8:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80477bc:	9300      	str	r3, [sp, #0]
 80477be:	e071      	b.n	80478a4 <f_write+0x122>
					if (fp->cltbl) {
 80477c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80477c2:	b15b      	cbz	r3, 80477dc <f_write+0x5a>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80477c4:	4620      	mov	r0, r4
 80477c6:	f7ff faee 	bl	8046da6 <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80477ca:	b948      	cbnz	r0, 80477e0 <f_write+0x5e>
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80477cc:	7d23      	ldrb	r3, [r4, #20]
 80477ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80477d2:	7523      	strb	r3, [r4, #20]

	LEAVE_FF(fs, FR_OK);
}
 80477d4:	4628      	mov	r0, r5
 80477d6:	b005      	add	sp, #20
 80477d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80477dc:	69e1      	ldr	r1, [r4, #28]
 80477de:	e078      	b.n	80478d2 <f_write+0x150>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80477e0:	2801      	cmp	r0, #1
 80477e2:	d102      	bne.n	80477ea <f_write+0x68>
 80477e4:	2502      	movs	r5, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80477e6:	7565      	strb	r5, [r4, #21]
 80477e8:	e7f4      	b.n	80477d4 <f_write+0x52>
 80477ea:	1c43      	adds	r3, r0, #1
 80477ec:	d101      	bne.n	80477f2 <f_write+0x70>
 80477ee:	2501      	movs	r5, #1
 80477f0:	e7f9      	b.n	80477e6 <f_write+0x64>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80477f2:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 80477f4:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80477f6:	b903      	cbnz	r3, 80477fa <f_write+0x78>
 80477f8:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80477fa:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80477fe:	2b00      	cmp	r3, #0
 8047800:	da0c      	bge.n	804781c <f_write+0x9a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8047802:	9803      	ldr	r0, [sp, #12]
 8047804:	6a22      	ldr	r2, [r4, #32]
 8047806:	9900      	ldr	r1, [sp, #0]
 8047808:	7840      	ldrb	r0, [r0, #1]
 804780a:	2301      	movs	r3, #1
 804780c:	f7ff fa72 	bl	8046cf4 <disk_write>
 8047810:	2800      	cmp	r0, #0
 8047812:	d1ec      	bne.n	80477ee <f_write+0x6c>
				fp->flag &= (BYTE)~FA_DIRTY;
 8047814:	7d23      	ldrb	r3, [r4, #20]
 8047816:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 804781a:	7523      	strb	r3, [r4, #20]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 804781c:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8047820:	69e1      	ldr	r1, [r4, #28]
 8047822:	4650      	mov	r0, sl
 8047824:	f7ff fab4 	bl	8046d90 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8047828:	2800      	cmp	r0, #0
 804782a:	d0db      	beq.n	80477e4 <f_write+0x62>
			sect += csect;
 804782c:	9b01      	ldr	r3, [sp, #4]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 804782e:	f8ba 700c 	ldrh.w	r7, [sl, #12]
 8047832:	fbb8 f7f7 	udiv	r7, r8, r7
			sect += csect;
 8047836:	181e      	adds	r6, r3, r0
			if (cc) {						/* Write maximum contiguous sectors directly */
 8047838:	2f00      	cmp	r7, #0
 804783a:	d04e      	beq.n	80478da <f_write+0x158>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 804783c:	9a01      	ldr	r2, [sp, #4]
 804783e:	f8ba 300a 	ldrh.w	r3, [sl, #10]
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8047842:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8047846:	443a      	add	r2, r7
 8047848:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 804784a:	bf84      	itt	hi
 804784c:	9a01      	ldrhi	r2, [sp, #4]
 804784e:	1a9f      	subhi	r7, r3, r2
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8047850:	463b      	mov	r3, r7
 8047852:	4632      	mov	r2, r6
 8047854:	4649      	mov	r1, r9
 8047856:	f7ff fa4d 	bl	8046cf4 <disk_write>
 804785a:	2800      	cmp	r0, #0
 804785c:	d1c7      	bne.n	80477ee <f_write+0x6c>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 804785e:	6a21      	ldr	r1, [r4, #32]
 8047860:	1b89      	subs	r1, r1, r6
 8047862:	42b9      	cmp	r1, r7
 8047864:	d20b      	bcs.n	804787e <f_write+0xfc>
 8047866:	9b03      	ldr	r3, [sp, #12]
 8047868:	899a      	ldrh	r2, [r3, #12]
	if (cnt) {
 804786a:	b122      	cbz	r2, 8047876 <f_write+0xf4>
 804786c:	fb02 9101 	mla	r1, r2, r1, r9
 8047870:	9800      	ldr	r0, [sp, #0]
 8047872:	f7ff fade 	bl	8046e32 <mem_cpy.part.0>
					fp->flag &= (BYTE)~FA_DIRTY;
 8047876:	7d23      	ldrb	r3, [r4, #20]
 8047878:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 804787c:	7523      	strb	r3, [r4, #20]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 804787e:	9b03      	ldr	r3, [sp, #12]
 8047880:	899b      	ldrh	r3, [r3, #12]
 8047882:	435f      	muls	r7, r3
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8047884:	69a3      	ldr	r3, [r4, #24]
 8047886:	68e2      	ldr	r2, [r4, #12]
 8047888:	443b      	add	r3, r7
 804788a:	61a3      	str	r3, [r4, #24]
 804788c:	429a      	cmp	r2, r3
 804788e:	bf2c      	ite	cs
 8047890:	60e2      	strcs	r2, [r4, #12]
 8047892:	60e3      	strcc	r3, [r4, #12]
 8047894:	f8db 3000 	ldr.w	r3, [fp]
 8047898:	443b      	add	r3, r7
 804789a:	44b9      	add	r9, r7
 804789c:	f8cb 3000 	str.w	r3, [fp]
 80478a0:	eba8 0807 	sub.w	r8, r8, r7
	for ( ;  btw;							/* Repeat until all data written */
 80478a4:	f1b8 0f00 	cmp.w	r8, #0
 80478a8:	d090      	beq.n	80477cc <f_write+0x4a>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80478aa:	9803      	ldr	r0, [sp, #12]
 80478ac:	69a1      	ldr	r1, [r4, #24]
 80478ae:	8983      	ldrh	r3, [r0, #12]
 80478b0:	fbb1 f2f3 	udiv	r2, r1, r3
 80478b4:	fb03 1312 	mls	r3, r3, r2, r1
 80478b8:	bb0b      	cbnz	r3, 80478fe <f_write+0x17c>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80478ba:	8943      	ldrh	r3, [r0, #10]
 80478bc:	3b01      	subs	r3, #1
			if (csect == 0) {				/* On the cluster boundary? */
 80478be:	4013      	ands	r3, r2
 80478c0:	9301      	str	r3, [sp, #4]
 80478c2:	d19a      	bne.n	80477fa <f_write+0x78>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80478c4:	2900      	cmp	r1, #0
 80478c6:	f47f af7b 	bne.w	80477c0 <f_write+0x3e>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80478ca:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 80478cc:	2800      	cmp	r0, #0
 80478ce:	d187      	bne.n	80477e0 <f_write+0x5e>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80478d0:	4601      	mov	r1, r0
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80478d2:	4620      	mov	r0, r4
 80478d4:	f7ff fdc2 	bl	804745c <create_chain>
 80478d8:	e777      	b.n	80477ca <f_write+0x48>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80478da:	6a23      	ldr	r3, [r4, #32]
 80478dc:	42b3      	cmp	r3, r6
 80478de:	d00d      	beq.n	80478fc <f_write+0x17a>
 80478e0:	68e2      	ldr	r2, [r4, #12]
 80478e2:	69a3      	ldr	r3, [r4, #24]
 80478e4:	429a      	cmp	r2, r3
 80478e6:	d909      	bls.n	80478fc <f_write+0x17a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80478e8:	2301      	movs	r3, #1
 80478ea:	4632      	mov	r2, r6
 80478ec:	9900      	ldr	r1, [sp, #0]
 80478ee:	f89a 0001 	ldrb.w	r0, [sl, #1]
 80478f2:	f7ff f9f1 	bl	8046cd8 <disk_read>
				fp->fptr < fp->obj.objsize &&
 80478f6:	2800      	cmp	r0, #0
 80478f8:	f47f af79 	bne.w	80477ee <f_write+0x6c>
			fp->sect = sect;
 80478fc:	6226      	str	r6, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80478fe:	9b03      	ldr	r3, [sp, #12]
 8047900:	899f      	ldrh	r7, [r3, #12]
 8047902:	69a3      	ldr	r3, [r4, #24]
 8047904:	fbb3 f0f7 	udiv	r0, r3, r7
 8047908:	fb07 3010 	mls	r0, r7, r0, r3
 804790c:	1a3f      	subs	r7, r7, r0
 804790e:	4547      	cmp	r7, r8
 8047910:	bf28      	it	cs
 8047912:	4647      	movcs	r7, r8
	if (cnt) {
 8047914:	b12f      	cbz	r7, 8047922 <f_write+0x1a0>
 8047916:	9b00      	ldr	r3, [sp, #0]
 8047918:	463a      	mov	r2, r7
 804791a:	4649      	mov	r1, r9
 804791c:	4418      	add	r0, r3
 804791e:	f7ff fa88 	bl	8046e32 <mem_cpy.part.0>
		fp->flag |= FA_DIRTY;
 8047922:	7d23      	ldrb	r3, [r4, #20]
 8047924:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8047928:	7523      	strb	r3, [r4, #20]
 804792a:	e7ab      	b.n	8047884 <f_write+0x102>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 804792c:	2507      	movs	r5, #7
 804792e:	e751      	b.n	80477d4 <f_write+0x52>

08047930 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8047930:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8047932:	a901      	add	r1, sp, #4
{
 8047934:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8047936:	f7ff fa62 	bl	8046dfe <validate>
	if (res == FR_OK) {
 804793a:	4605      	mov	r5, r0
 804793c:	2800      	cmp	r0, #0
 804793e:	d13a      	bne.n	80479b6 <f_sync+0x86>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8047940:	7d23      	ldrb	r3, [r4, #20]
 8047942:	065a      	lsls	r2, r3, #25
 8047944:	d537      	bpl.n	80479b6 <f_sync+0x86>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8047946:	061b      	lsls	r3, r3, #24
 8047948:	d50c      	bpl.n	8047964 <f_sync+0x34>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 804794a:	9801      	ldr	r0, [sp, #4]
 804794c:	6a22      	ldr	r2, [r4, #32]
 804794e:	7840      	ldrb	r0, [r0, #1]
 8047950:	2301      	movs	r3, #1
 8047952:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8047956:	f7ff f9cd 	bl	8046cf4 <disk_write>
 804795a:	bb78      	cbnz	r0, 80479bc <f_sync+0x8c>
				fp->flag &= (BYTE)~FA_DIRTY;
 804795c:	7d23      	ldrb	r3, [r4, #20]
 804795e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8047962:	7523      	strb	r3, [r4, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8047964:	f7fb faa4 	bl	8042eb0 <get_fattime>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8047968:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 804796a:	4607      	mov	r7, r0
				res = move_window(fs, fp->dir_sect);
 804796c:	9801      	ldr	r0, [sp, #4]
 804796e:	f7ff fa9e 	bl	8046eae <move_window>
				if (res == FR_OK) {
 8047972:	4605      	mov	r5, r0
 8047974:	b9f8      	cbnz	r0, 80479b6 <f_sync+0x86>
					dir = fp->dir_ptr;
 8047976:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8047978:	7af3      	ldrb	r3, [r6, #11]
 804797a:	f043 0320 	orr.w	r3, r3, #32
 804797e:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8047980:	68a2      	ldr	r2, [r4, #8]
 8047982:	6820      	ldr	r0, [r4, #0]
 8047984:	4631      	mov	r1, r6
 8047986:	f7ff fa5d 	bl	8046e44 <st_clust.isra.2>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 804798a:	68e1      	ldr	r1, [r4, #12]
 804798c:	f106 001c 	add.w	r0, r6, #28
 8047990:	f7ff f9d4 	bl	8046d3c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8047994:	4639      	mov	r1, r7
 8047996:	f106 0016 	add.w	r0, r6, #22
 804799a:	f7ff f9cf 	bl	8046d3c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
 804799e:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 80479a0:	74b5      	strb	r5, [r6, #18]
					fs->wflag = 1;
 80479a2:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 80479a4:	74f5      	strb	r5, [r6, #19]
					fs->wflag = 1;
 80479a6:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80479a8:	f7ff fdb0 	bl	804750c <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 80479ac:	7d23      	ldrb	r3, [r4, #20]
 80479ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
					res = sync_fs(fs);					/* Restore it to the directory */
 80479b2:	4605      	mov	r5, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 80479b4:	7523      	strb	r3, [r4, #20]
			}
		}
	}

	LEAVE_FF(fs, res);
}
 80479b6:	4628      	mov	r0, r5
 80479b8:	b003      	add	sp, #12
 80479ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80479bc:	2501      	movs	r5, #1
 80479be:	e7fa      	b.n	80479b6 <f_sync+0x86>

080479c0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80479c0:	b513      	push	{r0, r1, r4, lr}
 80479c2:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80479c4:	f7ff ffb4 	bl	8047930 <f_sync>
	if (res == FR_OK)
 80479c8:	b948      	cbnz	r0, 80479de <f_close+0x1e>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80479ca:	a901      	add	r1, sp, #4
 80479cc:	4620      	mov	r0, r4
 80479ce:	f7ff fa16 	bl	8046dfe <validate>
		if (res == FR_OK) {
 80479d2:	b920      	cbnz	r0, 80479de <f_close+0x1e>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80479d4:	6920      	ldr	r0, [r4, #16]
 80479d6:	f7ff f9bf 	bl	8046d58 <dec_lock>
			if (res == FR_OK)
 80479da:	b900      	cbnz	r0, 80479de <f_close+0x1e>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80479dc:	6020      	str	r0, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 80479de:	b002      	add	sp, #8
 80479e0:	bd10      	pop	{r4, pc}

080479e2 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80479e2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80479e6:	4606      	mov	r6, r0
 80479e8:	4690      	mov	r8, r2
	int n = 0;
	TCHAR c, *p = buff;
 80479ea:	4605      	mov	r5, r0
	int n = 0;
 80479ec:	2400      	movs	r4, #0
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80479ee:	1e4f      	subs	r7, r1, #1
 80479f0:	42bc      	cmp	r4, r7
 80479f2:	da12      	bge.n	8047a1a <f_gets+0x38>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80479f4:	ab01      	add	r3, sp, #4
 80479f6:	2201      	movs	r2, #1
 80479f8:	4669      	mov	r1, sp
 80479fa:	4640      	mov	r0, r8
 80479fc:	f7ff fe02 	bl	8047604 <f_read>
		if (rc != 1) break;
 8047a00:	9b01      	ldr	r3, [sp, #4]
 8047a02:	2b01      	cmp	r3, #1
 8047a04:	d109      	bne.n	8047a1a <f_gets+0x38>
		c = s[0];
 8047a06:	f89d 3000 	ldrb.w	r3, [sp]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8047a0a:	2b0d      	cmp	r3, #13
 8047a0c:	d0f0      	beq.n	80479f0 <f_gets+0xe>
		*p++ = c;
		n++;
		if (c == '\n') break;		/* Break on EOL */
 8047a0e:	2b0a      	cmp	r3, #10
		*p++ = c;
 8047a10:	f805 3b01 	strb.w	r3, [r5], #1
		n++;
 8047a14:	f104 0401 	add.w	r4, r4, #1
		if (c == '\n') break;		/* Break on EOL */
 8047a18:	d1ea      	bne.n	80479f0 <f_gets+0xe>
	}
	*p = 0;
 8047a1a:	2300      	movs	r3, #0
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8047a1c:	429c      	cmp	r4, r3
}
 8047a1e:	bf14      	ite	ne
 8047a20:	4630      	movne	r0, r6
 8047a22:	4618      	moveq	r0, r3
	*p = 0;
 8047a24:	702b      	strb	r3, [r5, #0]
}
 8047a26:	b002      	add	sp, #8
 8047a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08047a2c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8047a2c:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8047a2e:	4b0f      	ldr	r3, [pc, #60]	; (8047a6c <FATFS_LinkDriverEx+0x40>)
 8047a30:	7a5d      	ldrb	r5, [r3, #9]
 8047a32:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 8047a36:	b9b5      	cbnz	r5, 8047a66 <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8047a38:	7a5d      	ldrb	r5, [r3, #9]
 8047a3a:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8047a3c:	7a5d      	ldrb	r5, [r3, #9]
 8047a3e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8047a42:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8047a44:	7a58      	ldrb	r0, [r3, #9]
 8047a46:	4418      	add	r0, r3
 8047a48:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8047a4a:	7a5a      	ldrb	r2, [r3, #9]
 8047a4c:	b2d2      	uxtb	r2, r2
 8047a4e:	1c50      	adds	r0, r2, #1
 8047a50:	b2c0      	uxtb	r0, r0
 8047a52:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8047a54:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8047a56:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8047a58:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8047a5a:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8047a5c:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8047a5e:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8047a60:	70cc      	strb	r4, [r1, #3]
 8047a62:	4620      	mov	r0, r4
    ret = 0;
  }

  return ret;
}
 8047a64:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8047a66:	2001      	movs	r0, #1
 8047a68:	e7fc      	b.n	8047a64 <FATFS_LinkDriverEx+0x38>
 8047a6a:	bf00      	nop
 8047a6c:	2000a3f8 	.word	0x2000a3f8

08047a70 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8047a70:	2200      	movs	r2, #0
 8047a72:	f7ff bfdb 	b.w	8047a2c <FATFS_LinkDriverEx>

08047a76 <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 8047a76:	780a      	ldrb	r2, [r1, #0]
 8047a78:	7803      	ldrb	r3, [r0, #0]
 8047a7a:	4053      	eors	r3, r2
 8047a7c:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 8047a7e:	784a      	ldrb	r2, [r1, #1]
 8047a80:	7843      	ldrb	r3, [r0, #1]
 8047a82:	4053      	eors	r3, r2
 8047a84:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 8047a86:	788a      	ldrb	r2, [r1, #2]
 8047a88:	7883      	ldrb	r3, [r0, #2]
 8047a8a:	4053      	eors	r3, r2
 8047a8c:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 8047a8e:	78ca      	ldrb	r2, [r1, #3]
 8047a90:	78c3      	ldrb	r3, [r0, #3]
 8047a92:	4053      	eors	r3, r2
 8047a94:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 8047a96:	790a      	ldrb	r2, [r1, #4]
 8047a98:	7903      	ldrb	r3, [r0, #4]
 8047a9a:	4053      	eors	r3, r2
 8047a9c:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 8047a9e:	794a      	ldrb	r2, [r1, #5]
 8047aa0:	7943      	ldrb	r3, [r0, #5]
 8047aa2:	4053      	eors	r3, r2
 8047aa4:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 8047aa6:	798a      	ldrb	r2, [r1, #6]
 8047aa8:	7983      	ldrb	r3, [r0, #6]
 8047aaa:	4053      	eors	r3, r2
 8047aac:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 8047aae:	79ca      	ldrb	r2, [r1, #7]
 8047ab0:	79c3      	ldrb	r3, [r0, #7]
 8047ab2:	4053      	eors	r3, r2
 8047ab4:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 8047ab6:	7a0a      	ldrb	r2, [r1, #8]
 8047ab8:	7a03      	ldrb	r3, [r0, #8]
 8047aba:	4053      	eors	r3, r2
 8047abc:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 8047abe:	7a4a      	ldrb	r2, [r1, #9]
 8047ac0:	7a43      	ldrb	r3, [r0, #9]
 8047ac2:	4053      	eors	r3, r2
 8047ac4:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 8047ac6:	7a8a      	ldrb	r2, [r1, #10]
 8047ac8:	7a83      	ldrb	r3, [r0, #10]
 8047aca:	4053      	eors	r3, r2
 8047acc:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8047ace:	7aca      	ldrb	r2, [r1, #11]
 8047ad0:	7ac3      	ldrb	r3, [r0, #11]
 8047ad2:	4053      	eors	r3, r2
 8047ad4:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8047ad6:	7b0a      	ldrb	r2, [r1, #12]
 8047ad8:	7b03      	ldrb	r3, [r0, #12]
 8047ada:	4053      	eors	r3, r2
 8047adc:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 8047ade:	7b4a      	ldrb	r2, [r1, #13]
 8047ae0:	7b43      	ldrb	r3, [r0, #13]
 8047ae2:	4053      	eors	r3, r2
 8047ae4:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 8047ae6:	7b8a      	ldrb	r2, [r1, #14]
 8047ae8:	7b83      	ldrb	r3, [r0, #14]
 8047aea:	4053      	eors	r3, r2
 8047aec:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8047aee:	7bca      	ldrb	r2, [r1, #15]
 8047af0:	7bc3      	ldrb	r3, [r0, #15]
 8047af2:	4053      	eors	r3, r2
 8047af4:	73c3      	strb	r3, [r0, #15]
#endif
}
 8047af6:	4770      	bx	lr

08047af8 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 8047af8:	b510      	push	{r4, lr}
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 8047afa:	780b      	ldrb	r3, [r1, #0]
 8047afc:	7814      	ldrb	r4, [r2, #0]
 8047afe:	4063      	eors	r3, r4
 8047b00:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8047b02:	7854      	ldrb	r4, [r2, #1]
 8047b04:	784b      	ldrb	r3, [r1, #1]
 8047b06:	4063      	eors	r3, r4
 8047b08:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 8047b0a:	7894      	ldrb	r4, [r2, #2]
 8047b0c:	788b      	ldrb	r3, [r1, #2]
 8047b0e:	4063      	eors	r3, r4
 8047b10:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8047b12:	78d4      	ldrb	r4, [r2, #3]
 8047b14:	78cb      	ldrb	r3, [r1, #3]
 8047b16:	4063      	eors	r3, r4
 8047b18:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 8047b1a:	7914      	ldrb	r4, [r2, #4]
 8047b1c:	790b      	ldrb	r3, [r1, #4]
 8047b1e:	4063      	eors	r3, r4
 8047b20:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 8047b22:	7954      	ldrb	r4, [r2, #5]
 8047b24:	794b      	ldrb	r3, [r1, #5]
 8047b26:	4063      	eors	r3, r4
 8047b28:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 8047b2a:	7994      	ldrb	r4, [r2, #6]
 8047b2c:	798b      	ldrb	r3, [r1, #6]
 8047b2e:	4063      	eors	r3, r4
 8047b30:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8047b32:	79d4      	ldrb	r4, [r2, #7]
 8047b34:	79cb      	ldrb	r3, [r1, #7]
 8047b36:	4063      	eors	r3, r4
 8047b38:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 8047b3a:	7a14      	ldrb	r4, [r2, #8]
 8047b3c:	7a0b      	ldrb	r3, [r1, #8]
 8047b3e:	4063      	eors	r3, r4
 8047b40:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8047b42:	7a54      	ldrb	r4, [r2, #9]
 8047b44:	7a4b      	ldrb	r3, [r1, #9]
 8047b46:	4063      	eors	r3, r4
 8047b48:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 8047b4a:	7a8b      	ldrb	r3, [r1, #10]
 8047b4c:	7a94      	ldrb	r4, [r2, #10]
 8047b4e:	4063      	eors	r3, r4
 8047b50:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 8047b52:	7ad4      	ldrb	r4, [r2, #11]
 8047b54:	7acb      	ldrb	r3, [r1, #11]
 8047b56:	4063      	eors	r3, r4
 8047b58:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 8047b5a:	7b14      	ldrb	r4, [r2, #12]
 8047b5c:	7b0b      	ldrb	r3, [r1, #12]
 8047b5e:	4063      	eors	r3, r4
 8047b60:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 8047b62:	7b54      	ldrb	r4, [r2, #13]
 8047b64:	7b4b      	ldrb	r3, [r1, #13]
 8047b66:	4063      	eors	r3, r4
 8047b68:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 8047b6a:	7b94      	ldrb	r4, [r2, #14]
 8047b6c:	7b8b      	ldrb	r3, [r1, #14]
 8047b6e:	4063      	eors	r3, r4
 8047b70:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 8047b72:	7bcb      	ldrb	r3, [r1, #15]
 8047b74:	7bd2      	ldrb	r2, [r2, #15]
 8047b76:	4053      	eors	r3, r2
 8047b78:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 8047b7a:	bd10      	pop	{r4, pc}

08047b7c <aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type aes_set_key( const uint8_t key[], length_type keylen, aes_context ctx[1] )
{
 8047b7c:	f1a1 0310 	sub.w	r3, r1, #16
 8047b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8047b84:	b2dc      	uxtb	r4, r3
 8047b86:	2c10      	cmp	r4, #16
 8047b88:	d806      	bhi.n	8047b98 <aes_set_key+0x1c>
 8047b8a:	2301      	movs	r3, #1
 8047b8c:	40a3      	lsls	r3, r4
 8047b8e:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8047b92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8047b96:	b92b      	cbnz	r3, 8047ba4 <aes_set_key+0x28>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 8047b98:	2300      	movs	r3, #0
 8047b9a:	f882 30f0 	strb.w	r3, [r2, #240]	; 0xf0
        return ( uint8_t )-1;
 8047b9e:	20ff      	movs	r0, #255	; 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 8047ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8047ba4:	1e53      	subs	r3, r2, #1
 8047ba6:	1844      	adds	r4, r0, r1
    while( nn-- )
 8047ba8:	42a0      	cmp	r0, r4
 8047baa:	d150      	bne.n	8047c4e <aes_set_key+0xd2>
    hi = (keylen + 28) << 2;
 8047bac:	f101 0e1c 	add.w	lr, r1, #28
 8047bb0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8047bb4:	fa5f fe8e 	uxtb.w	lr, lr
    ctx->rnd = (hi >> 4) - 1;
 8047bb8:	ea4f 131e 	mov.w	r3, lr, lsr #4
 8047bbc:	3b01      	subs	r3, #1
            t0 = s_box(t0);
 8047bbe:	4c2c      	ldr	r4, [pc, #176]	; (8047c70 <aes_set_key+0xf4>)
    ctx->rnd = (hi >> 4) - 1;
 8047bc0:	f882 30f0 	strb.w	r3, [r2, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8047bc4:	f04f 0901 	mov.w	r9, #1
    ctx->rnd = (hi >> 4) - 1;
 8047bc8:	460b      	mov	r3, r1
        t0 = ctx->ksch[cc - 4];
 8047bca:	18d5      	adds	r5, r2, r3
        if( cc % keylen == 0 )
 8047bcc:	fbb3 f0f1 	udiv	r0, r3, r1
 8047bd0:	fb01 3010 	mls	r0, r1, r0, r3
 8047bd4:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
        t0 = ctx->ksch[cc - 4];
 8047bd8:	f815 ac04 	ldrb.w	sl, [r5, #-4]
        t1 = ctx->ksch[cc - 3];
 8047bdc:	f815 cc03 	ldrb.w	ip, [r5, #-3]
        t2 = ctx->ksch[cc - 2];
 8047be0:	f815 7c02 	ldrb.w	r7, [r5, #-2]
        t3 = ctx->ksch[cc - 1];
 8047be4:	f815 6c01 	ldrb.w	r6, [r5, #-1]
        if( cc % keylen == 0 )
 8047be8:	d136      	bne.n	8047c58 <aes_set_key+0xdc>
            rc = f2(rc);
 8047bea:	ea4f 10d9 	mov.w	r0, r9, lsr #7
            t0 = s_box(t1) ^ rc;
 8047bee:	f814 800c 	ldrb.w	r8, [r4, ip]
            t1 = s_box(t2);
 8047bf2:	f814 c007 	ldrb.w	ip, [r4, r7]
            t2 = s_box(t3);
 8047bf6:	5da7      	ldrb	r7, [r4, r6]
            t3 = s_box(tt);
 8047bf8:	f814 600a 	ldrb.w	r6, [r4, sl]
            rc = f2(rc);
 8047bfc:	ea4f 0a40 	mov.w	sl, r0, lsl #1
 8047c00:	4450      	add	r0, sl
 8047c02:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
            t0 = s_box(t1) ^ rc;
 8047c06:	ea89 0808 	eor.w	r8, r9, r8
            rc = f2(rc);
 8047c0a:	ea80 0049 	eor.w	r0, r0, r9, lsl #1
 8047c0e:	fa5f f980 	uxtb.w	r9, r0
            t0 = s_box(t1) ^ rc;
 8047c12:	46c2      	mov	sl, r8
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8047c14:	1a58      	subs	r0, r3, r1
 8047c16:	b2c0      	uxtb	r0, r0
 8047c18:	f812 8000 	ldrb.w	r8, [r2, r0]
 8047c1c:	ea8a 0a08 	eor.w	sl, sl, r8
 8047c20:	f802 a003 	strb.w	sl, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8047c24:	4410      	add	r0, r2
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8047c26:	3304      	adds	r3, #4
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8047c28:	f890 8001 	ldrb.w	r8, [r0, #1]
 8047c2c:	ea8c 0c08 	eor.w	ip, ip, r8
 8047c30:	f885 c001 	strb.w	ip, [r5, #1]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8047c34:	f890 c002 	ldrb.w	ip, [r0, #2]
 8047c38:	ea87 070c 	eor.w	r7, r7, ip
 8047c3c:	70af      	strb	r7, [r5, #2]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8047c3e:	78c0      	ldrb	r0, [r0, #3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8047c40:	b2db      	uxtb	r3, r3
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8047c42:	4046      	eors	r6, r0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8047c44:	459e      	cmp	lr, r3
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8047c46:	70ee      	strb	r6, [r5, #3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8047c48:	d8bf      	bhi.n	8047bca <aes_set_key+0x4e>
    return 0;
 8047c4a:	2000      	movs	r0, #0
 8047c4c:	e7a8      	b.n	8047ba0 <aes_set_key+0x24>
        *d++ = *s++;
 8047c4e:	f810 5b01 	ldrb.w	r5, [r0], #1
 8047c52:	f803 5f01 	strb.w	r5, [r3, #1]!
 8047c56:	e7a7      	b.n	8047ba8 <aes_set_key+0x2c>
        else if( keylen > 24 && cc % keylen == 16 )
 8047c58:	2918      	cmp	r1, #24
 8047c5a:	d9db      	bls.n	8047c14 <aes_set_key+0x98>
 8047c5c:	2810      	cmp	r0, #16
            t0 = s_box(t0);
 8047c5e:	bf01      	itttt	eq
 8047c60:	f814 a00a 	ldrbeq.w	sl, [r4, sl]
            t1 = s_box(t1);
 8047c64:	f814 c00c 	ldrbeq.w	ip, [r4, ip]
            t2 = s_box(t2);
 8047c68:	5de7      	ldrbeq	r7, [r4, r7]
            t3 = s_box(t3);
 8047c6a:	5da6      	ldrbeq	r6, [r4, r6]
 8047c6c:	e7d2      	b.n	8047c14 <aes_set_key+0x98>
 8047c6e:	bf00      	nop
 8047c70:	080519d0 	.word	0x080519d0

08047c74 <aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const aes_context ctx[1] )
{
 8047c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8047c78:	b09f      	sub	sp, #124	; 0x7c
    if( ctx->rnd )
 8047c7a:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
{
 8047c7e:	9118      	str	r1, [sp, #96]	; 0x60
 8047c80:	920a      	str	r2, [sp, #40]	; 0x28
    if( ctx->rnd )
 8047c82:	2b00      	cmp	r3, #0
 8047c84:	f000 8168 	beq.w	8047f58 <aes_encrypt+0x2e4>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 8047c88:	ad1a      	add	r5, sp, #104	; 0x68
 8047c8a:	4601      	mov	r1, r0
 8047c8c:	4cb3      	ldr	r4, [pc, #716]	; (8047f5c <aes_encrypt+0x2e8>)
 8047c8e:	4628      	mov	r0, r5
 8047c90:	f7ff ff32 	bl	8047af8 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 8047c94:	f04f 0b01 	mov.w	fp, #1
    xor_block(d, k);
 8047c98:	9519      	str	r5, [sp, #100]	; 0x64
 8047c9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8047c9c:	f89d c068 	ldrb.w	ip, [sp, #104]	; 0x68
 8047ca0:	f89d 706d 	ldrb.w	r7, [sp, #109]	; 0x6d
 8047ca4:	f89d 8072 	ldrb.w	r8, [sp, #114]	; 0x72
 8047ca8:	f89d e077 	ldrb.w	lr, [sp, #119]	; 0x77
 8047cac:	f814 5008 	ldrb.w	r5, [r4, r8]
 8047cb0:	f814 100e 	ldrb.w	r1, [r4, lr]
 8047cb4:	f814 200c 	ldrb.w	r2, [r4, ip]
 8047cb8:	f814 a007 	ldrb.w	sl, [r4, r7]
 8047cbc:	eb03 130b 	add.w	r3, r3, fp, lsl #4
 8047cc0:	930b      	str	r3, [sp, #44]	; 0x2c
 8047cc2:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8047cc6:	930c      	str	r3, [sp, #48]	; 0x30
 8047cc8:	f89d 3071 	ldrb.w	r3, [sp, #113]	; 0x71
 8047ccc:	930d      	str	r3, [sp, #52]	; 0x34
 8047cce:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8047cd0:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8047cd4:	5da6      	ldrb	r6, [r4, r6]
 8047cd6:	930e      	str	r3, [sp, #56]	; 0x38
 8047cd8:	5ce3      	ldrb	r3, [r4, r3]
 8047cda:	9300      	str	r3, [sp, #0]
 8047cdc:	9601      	str	r6, [sp, #4]
 8047cde:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8047ce2:	f89d 6070 	ldrb.w	r6, [sp, #112]	; 0x70
 8047ce6:	9610      	str	r6, [sp, #64]	; 0x40
 8047ce8:	f89d 6075 	ldrb.w	r6, [sp, #117]	; 0x75
 8047cec:	930f      	str	r3, [sp, #60]	; 0x3c
 8047cee:	5ce0      	ldrb	r0, [r4, r3]
 8047cf0:	9611      	str	r6, [sp, #68]	; 0x44
 8047cf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8047cf4:	f89d 606a 	ldrb.w	r6, [sp, #106]	; 0x6a
 8047cf8:	5ce3      	ldrb	r3, [r4, r3]
 8047cfa:	9612      	str	r6, [sp, #72]	; 0x48
 8047cfc:	5da6      	ldrb	r6, [r4, r6]
 8047cfe:	9602      	str	r6, [sp, #8]
 8047d00:	f89d 606f 	ldrb.w	r6, [sp, #111]	; 0x6f
 8047d04:	9613      	str	r6, [sp, #76]	; 0x4c
 8047d06:	5da6      	ldrb	r6, [r4, r6]
 8047d08:	9603      	str	r6, [sp, #12]
 8047d0a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8047d0c:	5da6      	ldrb	r6, [r4, r6]
 8047d0e:	9604      	str	r6, [sp, #16]
 8047d10:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8047d12:	5da6      	ldrb	r6, [r4, r6]
 8047d14:	9605      	str	r6, [sp, #20]
 8047d16:	f89d 6074 	ldrb.w	r6, [sp, #116]	; 0x74
 8047d1a:	9614      	str	r6, [sp, #80]	; 0x50
 8047d1c:	f89d 6069 	ldrb.w	r6, [sp, #105]	; 0x69
 8047d20:	9615      	str	r6, [sp, #84]	; 0x54
 8047d22:	f89d 606e 	ldrb.w	r6, [sp, #110]	; 0x6e
 8047d26:	9616      	str	r6, [sp, #88]	; 0x58
 8047d28:	5da6      	ldrb	r6, [r4, r6]
 8047d2a:	9606      	str	r6, [sp, #24]
 8047d2c:	f89d 6073 	ldrb.w	r6, [sp, #115]	; 0x73
 8047d30:	9617      	str	r6, [sp, #92]	; 0x5c
 8047d32:	5da6      	ldrb	r6, [r4, r6]
 8047d34:	9607      	str	r6, [sp, #28]
 8047d36:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8047d38:	5da6      	ldrb	r6, [r4, r6]
 8047d3a:	9608      	str	r6, [sp, #32]
 8047d3c:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8047d3e:	5da6      	ldrb	r6, [r4, r6]
 8047d40:	9609      	str	r6, [sp, #36]	; 0x24
        for( r = 1 ; r < ctx->rnd ; ++r )
 8047d42:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8047d44:	f896 90f0 	ldrb.w	r9, [r6, #240]	; 0xf0
 8047d48:	45d9      	cmp	r9, fp
 8047d4a:	d832      	bhi.n	8047db2 <aes_encrypt+0x13e>
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8047d4c:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8047d50:	9b04      	ldr	r3, [sp, #16]
 8047d52:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8047d56:	9b08      	ldr	r3, [sp, #32]
 8047d58:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8047d5c:	9b01      	ldr	r3, [sp, #4]
 8047d5e:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8047d62:	9b05      	ldr	r3, [sp, #20]
 8047d64:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
 8047d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8047d6a:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 8047d6e:	9b02      	ldr	r3, [sp, #8]
 8047d70:	f88d 3072 	strb.w	r3, [sp, #114]	; 0x72
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8047d74:	9b00      	ldr	r3, [sp, #0]
 8047d76:	f88d 306e 	strb.w	r3, [sp, #110]	; 0x6e
 8047d7a:	9b06      	ldr	r3, [sp, #24]
 8047d7c:	f88d 3076 	strb.w	r3, [sp, #118]	; 0x76
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8047d80:	9b07      	ldr	r3, [sp, #28]
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8047d82:	f88d 2068 	strb.w	r2, [sp, #104]	; 0x68
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8047d86:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8047d8a:	f88d 006f 	strb.w	r0, [sp, #111]	; 0x6f
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8047d8e:	9b03      	ldr	r3, [sp, #12]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8047d90:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8047d94:	9818      	ldr	r0, [sp, #96]	; 0x60
 8047d96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8047d98:	f88d a069 	strb.w	sl, [sp, #105]	; 0x69
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8047d9c:	a91a      	add	r1, sp, #104	; 0x68
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 8047d9e:	f88d 506a 	strb.w	r5, [sp, #106]	; 0x6a
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8047da2:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8047da6:	f7ff fea7 	bl	8047af8 <copy_and_key>
 8047daa:	2000      	movs	r0, #0
    }
    else
        return ( uint8_t )-1;
    return 0;
}
 8047dac:	b01f      	add	sp, #124	; 0x7c
 8047dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8047db2:	44a4      	add	ip, r4
 8047db4:	4427      	add	r7, r4
 8047db6:	f89c 6100 	ldrb.w	r6, [ip, #256]	; 0x100
 8047dba:	ea85 0901 	eor.w	r9, r5, r1
 8047dbe:	ea86 0909 	eor.w	r9, r6, r9
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8047dc2:	44a0      	add	r8, r4
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8047dc4:	f897 6200 	ldrb.w	r6, [r7, #512]	; 0x200
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8047dc8:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
 8047dcc:	4051      	eors	r1, r2
 8047dce:	4079      	eors	r1, r7
 8047dd0:	f898 7200 	ldrb.w	r7, [r8, #512]	; 0x200
 8047dd4:	4079      	eors	r1, r7
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8047dd6:	44a6      	add	lr, r4
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8047dd8:	f88d 1069 	strb.w	r1, [sp, #105]	; 0x69
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8047ddc:	f898 1100 	ldrb.w	r1, [r8, #256]	; 0x100
 8047de0:	ea82 020a 	eor.w	r2, r2, sl
 8047de4:	404a      	eors	r2, r1
 8047de6:	f89e 1200 	ldrb.w	r1, [lr, #512]	; 0x200
 8047dea:	404a      	eors	r2, r1
 8047dec:	f88d 206a 	strb.w	r2, [sp, #106]	; 0x6a
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8047df0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8047df2:	4422      	add	r2, r4
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8047df4:	ea89 0906 	eor.w	r9, r9, r6
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8047df8:	4616      	mov	r6, r2
 8047dfa:	9a00      	ldr	r2, [sp, #0]
 8047dfc:	f896 1100 	ldrb.w	r1, [r6, #256]	; 0x100
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8047e00:	f88d 9068 	strb.w	r9, [sp, #104]	; 0x68
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8047e04:	ea85 050a 	eor.w	r5, r5, sl
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8047e08:	4042      	eors	r2, r0
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8047e0a:	f89c a200 	ldrb.w	sl, [ip, #512]	; 0x200
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8047e0e:	404a      	eors	r2, r1
 8047e10:	990d      	ldr	r1, [sp, #52]	; 0x34
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8047e12:	ea8a 0505 	eor.w	r5, sl, r5
 8047e16:	f89e a100 	ldrb.w	sl, [lr, #256]	; 0x100
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8047e1a:	4421      	add	r1, r4
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8047e1c:	ea85 050a 	eor.w	r5, r5, sl
 8047e20:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8047e24:	f891 5200 	ldrb.w	r5, [r1, #512]	; 0x200
 8047e28:	406a      	eors	r2, r5
 8047e2a:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8047e2e:	f891 2100 	ldrb.w	r2, [r1, #256]	; 0x100
 8047e32:	4058      	eors	r0, r3
 8047e34:	4050      	eors	r0, r2
 8047e36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8047e38:	4422      	add	r2, r4
 8047e3a:	f892 1200 	ldrb.w	r1, [r2, #512]	; 0x200
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8047e3e:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8047e42:	4048      	eors	r0, r1
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8047e44:	9901      	ldr	r1, [sp, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8047e46:	f88d 006d 	strb.w	r0, [sp, #109]	; 0x6d
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8047e4a:	404b      	eors	r3, r1
 8047e4c:	4053      	eors	r3, r2
 8047e4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8047e50:	4422      	add	r2, r4
 8047e52:	f892 1200 	ldrb.w	r1, [r2, #512]	; 0x200
 8047e56:	404b      	eors	r3, r1
 8047e58:	f88d 306e 	strb.w	r3, [sp, #110]	; 0x6e
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8047e5c:	e9dd 3100 	ldrd	r3, r1, [sp]
 8047e60:	404b      	eors	r3, r1
 8047e62:	f896 1200 	ldrb.w	r1, [r6, #512]	; 0x200
 8047e66:	404b      	eors	r3, r1
 8047e68:	f892 1100 	ldrb.w	r1, [r2, #256]	; 0x100
 8047e6c:	404b      	eors	r3, r1
 8047e6e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8047e72:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8047e74:	4423      	add	r3, r4
 8047e76:	461a      	mov	r2, r3
 8047e78:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
 8047e7c:	404b      	eors	r3, r1
 8047e7e:	f892 1100 	ldrb.w	r1, [r2, #256]	; 0x100
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8047e82:	f892 2200 	ldrb.w	r2, [r2, #512]	; 0x200
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8047e86:	404b      	eors	r3, r1
 8047e88:	9911      	ldr	r1, [sp, #68]	; 0x44
 8047e8a:	4421      	add	r1, r4
 8047e8c:	f891 0200 	ldrb.w	r0, [r1, #512]	; 0x200
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8047e90:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8047e94:	4043      	eors	r3, r0
 8047e96:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8047e9a:	e9dd 3003 	ldrd	r3, r0, [sp, #12]
 8047e9e:	4043      	eors	r3, r0
 8047ea0:	404b      	eors	r3, r1
 8047ea2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8047ea4:	4421      	add	r1, r4
 8047ea6:	f891 0200 	ldrb.w	r0, [r1, #512]	; 0x200
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8047eaa:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8047eae:	4043      	eors	r3, r0
 8047eb0:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8047eb4:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
 8047eb8:	4043      	eors	r3, r0
 8047eba:	404b      	eors	r3, r1
 8047ebc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8047ebe:	4421      	add	r1, r4
 8047ec0:	f891 0200 	ldrb.w	r0, [r1, #512]	; 0x200
 8047ec4:	4043      	eors	r3, r0
 8047ec6:	f88d 3072 	strb.w	r3, [sp, #114]	; 0x72
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8047eca:	9805      	ldr	r0, [sp, #20]
 8047ecc:	9b02      	ldr	r3, [sp, #8]
 8047ece:	4043      	eors	r3, r0
 8047ed0:	4053      	eors	r3, r2
 8047ed2:	f891 2100 	ldrb.w	r2, [r1, #256]	; 0x100
 8047ed6:	4053      	eors	r3, r2
 8047ed8:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8047edc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8047ede:	4423      	add	r3, r4
 8047ee0:	461a      	mov	r2, r3
 8047ee2:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
 8047ee6:	404b      	eors	r3, r1
 8047ee8:	f892 1100 	ldrb.w	r1, [r2, #256]	; 0x100
 8047eec:	404b      	eors	r3, r1
 8047eee:	9915      	ldr	r1, [sp, #84]	; 0x54
 8047ef0:	4421      	add	r1, r4
 8047ef2:	f891 0200 	ldrb.w	r0, [r1, #512]	; 0x200
 8047ef6:	4043      	eors	r3, r0
 8047ef8:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8047efc:	e9dd 3007 	ldrd	r3, r0, [sp, #28]
 8047f00:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8047f04:	f892 2200 	ldrb.w	r2, [r2, #512]	; 0x200
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8047f08:	4043      	eors	r3, r0
 8047f0a:	404b      	eors	r3, r1
 8047f0c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8047f0e:	4421      	add	r1, r4
 8047f10:	f891 0200 	ldrb.w	r0, [r1, #512]	; 0x200
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8047f14:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8047f18:	4043      	eors	r3, r0
 8047f1a:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8047f1e:	e9dd 3008 	ldrd	r3, r0, [sp, #32]
 8047f22:	4043      	eors	r3, r0
 8047f24:	404b      	eors	r3, r1
 8047f26:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8047f28:	4421      	add	r1, r4
 8047f2a:	f891 0200 	ldrb.w	r0, [r1, #512]	; 0x200
 8047f2e:	4043      	eors	r3, r0
 8047f30:	f88d 3076 	strb.w	r3, [sp, #118]	; 0x76
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8047f34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8047f36:	9b06      	ldr	r3, [sp, #24]
 8047f38:	4043      	eors	r3, r0
 8047f3a:	4053      	eors	r3, r2
 8047f3c:	f891 2100 	ldrb.w	r2, [r1, #256]	; 0x100
    xor_block(d, k);
 8047f40:	9819      	ldr	r0, [sp, #100]	; 0x64
 8047f42:	990b      	ldr	r1, [sp, #44]	; 0x2c
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8047f44:	4053      	eors	r3, r2
 8047f46:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
    xor_block(d, k);
 8047f4a:	f7ff fd94 	bl	8047a76 <xor_block>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8047f4e:	f10b 0301 	add.w	r3, fp, #1
 8047f52:	fa5f fb83 	uxtb.w	fp, r3
 8047f56:	e6a0      	b.n	8047c9a <aes_encrypt+0x26>
        return ( uint8_t )-1;
 8047f58:	20ff      	movs	r0, #255	; 0xff
 8047f5a:	e727      	b.n	8047dac <aes_encrypt+0x138>
 8047f5c:	080519d0 	.word	0x080519d0

08047f60 <AES_CMAC_Init>:
        }                          \
    } while (0) \


void AES_CMAC_Init(AES_CMAC_CTX *ctx)
{
 8047f60:	b510      	push	{r4, lr}
            memset1(ctx->X, 0, sizeof ctx->X);
 8047f62:	2210      	movs	r2, #16
{
 8047f64:	4604      	mov	r4, r0
            memset1(ctx->X, 0, sizeof ctx->X);
 8047f66:	2100      	movs	r1, #0
 8047f68:	30f1      	adds	r0, #241	; 0xf1
 8047f6a:	f005 ff74 	bl	804de56 <memset1>
            ctx->M_n = 0;
 8047f6e:	2100      	movs	r1, #0
 8047f70:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
        memset1(ctx->rijndael.ksch, '\0', 240);
 8047f74:	4620      	mov	r0, r4
 8047f76:	22f0      	movs	r2, #240	; 0xf0
}
 8047f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        memset1(ctx->rijndael.ksch, '\0', 240);
 8047f7c:	f005 bf6b 	b.w	804de56 <memset1>

08047f80 <AES_CMAC_SetKey>:
    
void AES_CMAC_SetKey(AES_CMAC_CTX *ctx, const uint8_t key[AES_CMAC_KEY_LENGTH])
{
 8047f80:	460b      	mov	r3, r1
           //rijndael_set_key_enc_only(&ctx->rijndael, key, 128);
       aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael);
 8047f82:	4602      	mov	r2, r0
 8047f84:	2110      	movs	r1, #16
 8047f86:	4618      	mov	r0, r3
 8047f88:	f7ff bdf8 	b.w	8047b7c <aes_set_key>

08047f8c <AES_CMAC_Update>:
}
    
void AES_CMAC_Update(AES_CMAC_CTX *ctx, const uint8_t *data, uint32_t len)
{
 8047f8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8047f90:	4604      	mov	r4, r0
            uint32_t mlen;
        uint8_t in[16];
    
            if (ctx->M_n > 0) {
 8047f92:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
{
 8047f96:	b085      	sub	sp, #20
 8047f98:	460e      	mov	r6, r1
 8047f9a:	4615      	mov	r5, r2
 8047f9c:	f204 1801 	addw	r8, r4, #257	; 0x101
            if (ctx->M_n > 0) {
 8047fa0:	b310      	cbz	r0, 8047fe8 <AES_CMAC_Update+0x5c>
                  mlen = MIN(16 - ctx->M_n, len);
 8047fa2:	f1c0 0910 	rsb	r9, r0, #16
 8047fa6:	4591      	cmp	r9, r2
 8047fa8:	464f      	mov	r7, r9
 8047faa:	bf28      	it	cs
 8047fac:	4617      	movcs	r7, r2
                    memcpy1(ctx->M_last + ctx->M_n, data, mlen);
 8047fae:	b2ba      	uxth	r2, r7
 8047fb0:	4440      	add	r0, r8
 8047fb2:	f005 ff3c 	bl	804de2e <memcpy1>
                    ctx->M_n += mlen;
 8047fb6:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8047fba:	443b      	add	r3, r7
                    if (ctx->M_n < 16 || len == mlen)
 8047fbc:	2b0f      	cmp	r3, #15
                    ctx->M_n += mlen;
 8047fbe:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
                    if (ctx->M_n < 16 || len == mlen)
 8047fc2:	d91c      	bls.n	8047ffe <AES_CMAC_Update+0x72>
 8047fc4:	45a9      	cmp	r9, r5
 8047fc6:	d21a      	bcs.n	8047ffe <AES_CMAC_Update+0x72>
 8047fc8:	f104 03f1 	add.w	r3, r4, #241	; 0xf1
 8047fcc:	4619      	mov	r1, r3
                            return;
                   XOR(ctx->M_last, ctx->X);
 8047fce:	781a      	ldrb	r2, [r3, #0]
 8047fd0:	7c18      	ldrb	r0, [r3, #16]
 8047fd2:	4042      	eors	r2, r0
 8047fd4:	f803 2b01 	strb.w	r2, [r3], #1
 8047fd8:	4543      	cmp	r3, r8
 8047fda:	d1f8      	bne.n	8047fce <AES_CMAC_Update+0x42>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);
            aes_encrypt( ctx->X, ctx->X, &ctx->rijndael);
 8047fdc:	4622      	mov	r2, r4
 8047fde:	4608      	mov	r0, r1
 8047fe0:	f7ff fe48 	bl	8047c74 <aes_encrypt>
                    data += mlen;
 8047fe4:	443e      	add	r6, r7
                    len -= mlen;
 8047fe6:	1bed      	subs	r5, r5, r7
            while (len > 16) {      /* not last block */

                    XOR(data, ctx->X);
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);

                    memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 8047fe8:	f104 07f1 	add.w	r7, r4, #241	; 0xf1
            while (len > 16) {      /* not last block */
 8047fec:	2d10      	cmp	r5, #16
 8047fee:	d809      	bhi.n	8048004 <AES_CMAC_Update+0x78>

                    data += 16;
                    len -= 16;
            }
            /* potential last block, save it */
            memcpy1(ctx->M_last, data, len);
 8047ff0:	b2aa      	uxth	r2, r5
 8047ff2:	4631      	mov	r1, r6
 8047ff4:	4640      	mov	r0, r8
 8047ff6:	f005 ff1a 	bl	804de2e <memcpy1>
            ctx->M_n = len;
 8047ffa:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
}
 8047ffe:	b005      	add	sp, #20
 8048000:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8048004:	f104 02f0 	add.w	r2, r4, #240	; 0xf0
 8048008:	1e73      	subs	r3, r6, #1
 804800a:	f106 000f 	add.w	r0, r6, #15
                    XOR(data, ctx->X);
 804800e:	f813 cf01 	ldrb.w	ip, [r3, #1]!
 8048012:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8048016:	4283      	cmp	r3, r0
 8048018:	ea81 010c 	eor.w	r1, r1, ip
 804801c:	7011      	strb	r1, [r2, #0]
 804801e:	d1f6      	bne.n	804800e <AES_CMAC_Update+0x82>
                    memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 8048020:	2210      	movs	r2, #16
 8048022:	4639      	mov	r1, r7
 8048024:	4668      	mov	r0, sp
 8048026:	f005 ff02 	bl	804de2e <memcpy1>
            aes_encrypt( in, in, &ctx->rijndael);
 804802a:	4622      	mov	r2, r4
 804802c:	4669      	mov	r1, sp
 804802e:	4668      	mov	r0, sp
 8048030:	f7ff fe20 	bl	8047c74 <aes_encrypt>
                    memcpy1(&ctx->X[0], in, 16);
 8048034:	2210      	movs	r2, #16
 8048036:	4669      	mov	r1, sp
 8048038:	4638      	mov	r0, r7
 804803a:	f005 fef8 	bl	804de2e <memcpy1>
                    data += 16;
 804803e:	3610      	adds	r6, #16
                    len -= 16;
 8048040:	3d10      	subs	r5, #16
 8048042:	e7d3      	b.n	8047fec <AES_CMAC_Update+0x60>

08048044 <AES_CMAC_Final>:
   
void AES_CMAC_Final(uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX *ctx)
{
 8048044:	b570      	push	{r4, r5, r6, lr}
 8048046:	b088      	sub	sp, #32
 8048048:	460c      	mov	r4, r1
            uint8_t K[16];
        uint8_t in[16];
            /* generate subkey K1 */
            memset1(K, '\0', 16);
 804804a:	2210      	movs	r2, #16
 804804c:	2100      	movs	r1, #0
{
 804804e:	4605      	mov	r5, r0
            memset1(K, '\0', 16);
 8048050:	4668      	mov	r0, sp
 8048052:	f005 ff00 	bl	804de56 <memset1>

            //rijndael_encrypt(&ctx->rijndael, K, K);

            aes_encrypt( K, K, &ctx->rijndael);
 8048056:	4622      	mov	r2, r4
 8048058:	4669      	mov	r1, sp
 804805a:	4668      	mov	r0, sp
 804805c:	f7ff fe0a 	bl	8047c74 <aes_encrypt>

            if (K[0] & 0x80) {
 8048060:	f99d 3000 	ldrsb.w	r3, [sp]
 8048064:	2b00      	cmp	r3, #0
 8048066:	466a      	mov	r2, sp
 8048068:	f10d 010f 	add.w	r1, sp, #15
 804806c:	da3e      	bge.n	80480ec <AES_CMAC_Final+0xa8>
                    LSHIFT(K, K);
 804806e:	7813      	ldrb	r3, [r2, #0]
 8048070:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8048074:	005b      	lsls	r3, r3, #1
 8048076:	b25b      	sxtb	r3, r3
 8048078:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
 804807c:	4291      	cmp	r1, r2
 804807e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8048082:	d1f4      	bne.n	804806e <AES_CMAC_Final+0x2a>
 8048084:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8048088:	005b      	lsls	r3, r3, #1
                   K[15] ^= 0x87;
 804808a:	f083 0387 	eor.w	r3, r3, #135	; 0x87
            } else
                    LSHIFT(K, K);
 804808e:	f88d 300f 	strb.w	r3, [sp, #15]


            if (ctx->M_n == 16) {
 8048092:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8048096:	2b10      	cmp	r3, #16
 8048098:	d137      	bne.n	804810a <AES_CMAC_Final+0xc6>
 804809a:	f204 1201 	addw	r2, r4, #257	; 0x101
                    /* last block was a complete block */
                    XOR(K, ctx->M_last);
 804809e:	2300      	movs	r3, #0
 80480a0:	7811      	ldrb	r1, [r2, #0]
 80480a2:	f81d 0003 	ldrb.w	r0, [sp, r3]
 80480a6:	3301      	adds	r3, #1
 80480a8:	4041      	eors	r1, r0
 80480aa:	2b10      	cmp	r3, #16
 80480ac:	f802 1b01 	strb.w	r1, [r2], #1
 80480b0:	d1f6      	bne.n	80480a0 <AES_CMAC_Final+0x5c>
 80480b2:	f104 03f1 	add.w	r3, r4, #241	; 0xf1
 80480b6:	f204 1001 	addw	r0, r4, #257	; 0x101
 80480ba:	4619      	mov	r1, r3
   
                  XOR(K, ctx->M_last);


           }
           XOR(ctx->M_last, ctx->X);
 80480bc:	781a      	ldrb	r2, [r3, #0]
 80480be:	7c1e      	ldrb	r6, [r3, #16]
 80480c0:	4072      	eors	r2, r6
 80480c2:	f803 2b01 	strb.w	r2, [r3], #1
 80480c6:	4298      	cmp	r0, r3
 80480c8:	d1f8      	bne.n	80480bc <AES_CMAC_Final+0x78>

           //rijndael_encrypt(&ctx->rijndael, ctx->X, digest);

       memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 80480ca:	2210      	movs	r2, #16
 80480cc:	eb0d 0002 	add.w	r0, sp, r2
 80480d0:	f005 fead 	bl	804de2e <memcpy1>
       aes_encrypt(in, digest, &ctx->rijndael);
 80480d4:	4622      	mov	r2, r4
 80480d6:	4629      	mov	r1, r5
 80480d8:	a804      	add	r0, sp, #16
 80480da:	f7ff fdcb 	bl	8047c74 <aes_encrypt>
           memset1(K, 0, sizeof K);
 80480de:	2210      	movs	r2, #16
 80480e0:	2100      	movs	r1, #0
 80480e2:	4668      	mov	r0, sp
 80480e4:	f005 feb7 	bl	804de56 <memset1>

}
 80480e8:	b008      	add	sp, #32
 80480ea:	bd70      	pop	{r4, r5, r6, pc}
                    LSHIFT(K, K);
 80480ec:	7813      	ldrb	r3, [r2, #0]
 80480ee:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80480f2:	005b      	lsls	r3, r3, #1
 80480f4:	b25b      	sxtb	r3, r3
 80480f6:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
 80480fa:	428a      	cmp	r2, r1
 80480fc:	f802 3c01 	strb.w	r3, [r2, #-1]
 8048100:	d1f4      	bne.n	80480ec <AES_CMAC_Final+0xa8>
 8048102:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8048106:	005b      	lsls	r3, r3, #1
 8048108:	e7c1      	b.n	804808e <AES_CMAC_Final+0x4a>
                  if (K[0] & 0x80) {
 804810a:	f99d 2000 	ldrsb.w	r2, [sp]
 804810e:	2a00      	cmp	r2, #0
 8048110:	4668      	mov	r0, sp
 8048112:	da28      	bge.n	8048166 <AES_CMAC_Final+0x122>
                          LSHIFT(K, K);
 8048114:	7802      	ldrb	r2, [r0, #0]
 8048116:	f810 6f01 	ldrb.w	r6, [r0, #1]!
 804811a:	0052      	lsls	r2, r2, #1
 804811c:	b252      	sxtb	r2, r2
 804811e:	ea42 12d6 	orr.w	r2, r2, r6, lsr #7
 8048122:	4281      	cmp	r1, r0
 8048124:	f800 2c01 	strb.w	r2, [r0, #-1]
 8048128:	d1f4      	bne.n	8048114 <AES_CMAC_Final+0xd0>
 804812a:	f89d 200f 	ldrb.w	r2, [sp, #15]
 804812e:	0052      	lsls	r2, r2, #1
                          K[15] ^= 0x87;
 8048130:	f082 0287 	eor.w	r2, r2, #135	; 0x87
                           LSHIFT(K, K);
 8048134:	f88d 200f 	strb.w	r2, [sp, #15]
                   ctx->M_last[ctx->M_n] = 0x80;
 8048138:	18e2      	adds	r2, r4, r3
 804813a:	2180      	movs	r1, #128	; 0x80
 804813c:	f882 1101 	strb.w	r1, [r2, #257]	; 0x101
 8048140:	2200      	movs	r2, #0
                   while (++ctx->M_n < 16)
 8048142:	3301      	adds	r3, #1
 8048144:	2b0f      	cmp	r3, #15
 8048146:	d91d      	bls.n	8048184 <AES_CMAC_Final+0x140>
 8048148:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 804814c:	f204 1201 	addw	r2, r4, #257	; 0x101
                  XOR(K, ctx->M_last);
 8048150:	2300      	movs	r3, #0
 8048152:	7811      	ldrb	r1, [r2, #0]
 8048154:	f81d 0003 	ldrb.w	r0, [sp, r3]
 8048158:	3301      	adds	r3, #1
 804815a:	4041      	eors	r1, r0
 804815c:	2b10      	cmp	r3, #16
 804815e:	f802 1b01 	strb.w	r1, [r2], #1
 8048162:	d1f6      	bne.n	8048152 <AES_CMAC_Final+0x10e>
 8048164:	e7a5      	b.n	80480b2 <AES_CMAC_Final+0x6e>
                           LSHIFT(K, K);
 8048166:	7802      	ldrb	r2, [r0, #0]
 8048168:	f810 6f01 	ldrb.w	r6, [r0, #1]!
 804816c:	0052      	lsls	r2, r2, #1
 804816e:	b252      	sxtb	r2, r2
 8048170:	ea42 12d6 	orr.w	r2, r2, r6, lsr #7
 8048174:	4281      	cmp	r1, r0
 8048176:	f800 2c01 	strb.w	r2, [r0, #-1]
 804817a:	d1f4      	bne.n	8048166 <AES_CMAC_Final+0x122>
 804817c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8048180:	0052      	lsls	r2, r2, #1
 8048182:	e7d7      	b.n	8048134 <AES_CMAC_Final+0xf0>
                         ctx->M_last[ctx->M_n] = 0;
 8048184:	18e1      	adds	r1, r4, r3
 8048186:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 804818a:	e7da      	b.n	8048142 <AES_CMAC_Final+0xfe>

0804818c <DummyCB>:
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
    return;
}
 804818c:	4770      	bx	lr
	...

08048190 <GetKeyByID>:
{
 8048190:	b530      	push	{r4, r5, lr}
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 8048192:	4a0a      	ldr	r2, [pc, #40]	; (80481bc <GetKeyByID+0x2c>)
{
 8048194:	2300      	movs	r3, #0
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 8048196:	eb03 1403 	add.w	r4, r3, r3, lsl #4
 804819a:	1915      	adds	r5, r2, r4
 804819c:	f895 522c 	ldrb.w	r5, [r5, #556]	; 0x22c
 80481a0:	4285      	cmp	r5, r0
 80481a2:	d105      	bne.n	80481b0 <GetKeyByID+0x20>
            *keyItem = &( SeNvmCtx.KeyList[i] );
 80481a4:	f504 740b 	add.w	r4, r4, #556	; 0x22c
 80481a8:	4422      	add	r2, r4
 80481aa:	600a      	str	r2, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 80481ac:	2000      	movs	r0, #0
}
 80481ae:	bd30      	pop	{r4, r5, pc}
 80481b0:	3301      	adds	r3, #1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80481b2:	2b18      	cmp	r3, #24
 80481b4:	d1ef      	bne.n	8048196 <GetKeyByID+0x6>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80481b6:	2003      	movs	r0, #3
 80481b8:	e7f9      	b.n	80481ae <GetKeyByID+0x1e>
 80481ba:	bf00      	nop
 80481bc:	2000a404 	.word	0x2000a404

080481c0 <ComputeCmac.part.0>:
 * \param[IN]  size           - Data buffer size
 * \param[IN]  keyID          - Key identifier to determine the AES key to be used
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
 80481c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80481c2:	461c      	mov	r4, r3
 80481c4:	b087      	sub	sp, #28
 80481c6:	4605      	mov	r5, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    uint8_t Cmac[16];

    AES_CMAC_Init( SeNvmCtx.AesCmacCtx );
 80481c8:	4812      	ldr	r0, [pc, #72]	; (8048214 <ComputeCmac.part.0+0x54>)
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
 80481ca:	460e      	mov	r6, r1
 80481cc:	4617      	mov	r7, r2
    AES_CMAC_Init( SeNvmCtx.AesCmacCtx );
 80481ce:	f7ff fec7 	bl	8047f60 <AES_CMAC_Init>

    Key_t* keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 80481d2:	4620      	mov	r0, r4
 80481d4:	a901      	add	r1, sp, #4
 80481d6:	f7ff ffdb 	bl	8048190 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 80481da:	4604      	mov	r4, r0
 80481dc:	b9b0      	cbnz	r0, 804820c <ComputeCmac.part.0+0x4c>
    {
        AES_CMAC_SetKey( SeNvmCtx.AesCmacCtx, keyItem->KeyValue );
 80481de:	9901      	ldr	r1, [sp, #4]
 80481e0:	480c      	ldr	r0, [pc, #48]	; (8048214 <ComputeCmac.part.0+0x54>)
 80481e2:	3101      	adds	r1, #1
 80481e4:	f7ff fecc 	bl	8047f80 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 80481e8:	b125      	cbz	r5, 80481f4 <ComputeCmac.part.0+0x34>
        {
            AES_CMAC_Update( SeNvmCtx.AesCmacCtx, micBxBuffer, 16 );
 80481ea:	2210      	movs	r2, #16
 80481ec:	4629      	mov	r1, r5
 80481ee:	4809      	ldr	r0, [pc, #36]	; (8048214 <ComputeCmac.part.0+0x54>)
 80481f0:	f7ff fecc 	bl	8047f8c <AES_CMAC_Update>
        }

        AES_CMAC_Update( SeNvmCtx.AesCmacCtx, buffer, size );
 80481f4:	463a      	mov	r2, r7
 80481f6:	4631      	mov	r1, r6
 80481f8:	4806      	ldr	r0, [pc, #24]	; (8048214 <ComputeCmac.part.0+0x54>)
 80481fa:	f7ff fec7 	bl	8047f8c <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, SeNvmCtx.AesCmacCtx );
 80481fe:	4905      	ldr	r1, [pc, #20]	; (8048214 <ComputeCmac.part.0+0x54>)
 8048200:	a802      	add	r0, sp, #8
 8048202:	f7ff ff1f 	bl	8048044 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 | ( uint32_t ) Cmac[0] );
 8048206:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8048208:	9a02      	ldr	r2, [sp, #8]
 804820a:	601a      	str	r2, [r3, #0]
    }

    return retval;
}
 804820c:	4620      	mov	r0, r4
 804820e:	b007      	add	sp, #28
 8048210:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8048212:	bf00      	nop
 8048214:	2000a518 	.word	0x2000a518

08048218 <SecureElementInit>:
/*
 * API functions
 */

SecureElementStatus_t SecureElementInit( SecureElementNvmEvent seNvmCtxChanged )
{
 8048218:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint8_t itr = 0;
    uint8_t zeroKey[16] = { 0 };

    // Initialize with defaults
    SeNvmCtx.KeyList[itr++].KeyID = APP_KEY;
 804821a:	4c34      	ldr	r4, [pc, #208]	; (80482ec <SecureElementInit+0xd4>)
{
 804821c:	4606      	mov	r6, r0
    uint8_t zeroKey[16] = { 0 };
 804821e:	2210      	movs	r2, #16
 8048220:	2100      	movs	r1, #0
 8048222:	4668      	mov	r0, sp
 8048224:	f007 ff92 	bl	805014c <memset>
    SeNvmCtx.KeyList[itr++].KeyID = GEN_APP_KEY;
 8048228:	2301      	movs	r3, #1
 804822a:	f884 323d 	strb.w	r3, [r4, #573]	; 0x23d
    SeNvmCtx.KeyList[itr++].KeyID = NWK_KEY;
 804822e:	2302      	movs	r3, #2
 8048230:	f884 324e 	strb.w	r3, [r4, #590]	; 0x24e
    SeNvmCtx.KeyList[itr++].KeyID = J_S_INT_KEY;
 8048234:	2303      	movs	r3, #3
 8048236:	f884 325f 	strb.w	r3, [r4, #607]	; 0x25f
    SeNvmCtx.KeyList[itr++].KeyID = J_S_ENC_KEY;
 804823a:	2304      	movs	r3, #4
 804823c:	f884 3270 	strb.w	r3, [r4, #624]	; 0x270
    SeNvmCtx.KeyList[itr++].KeyID = F_NWK_S_INT_KEY;
 8048240:	2305      	movs	r3, #5
 8048242:	f884 3281 	strb.w	r3, [r4, #641]	; 0x281
    SeNvmCtx.KeyList[itr++].KeyID = S_NWK_S_INT_KEY;
 8048246:	2306      	movs	r3, #6
 8048248:	f884 3292 	strb.w	r3, [r4, #658]	; 0x292
    SeNvmCtx.KeyList[itr++].KeyID = NWK_S_ENC_KEY;
 804824c:	2307      	movs	r3, #7
 804824e:	f884 32a3 	strb.w	r3, [r4, #675]	; 0x2a3
    SeNvmCtx.KeyList[itr++].KeyID = APP_S_KEY;
 8048252:	2308      	movs	r3, #8
 8048254:	f884 32b4 	strb.w	r3, [r4, #692]	; 0x2b4
    SeNvmCtx.KeyList[itr++].KeyID = MC_ROOT_KEY;
 8048258:	2309      	movs	r3, #9
 804825a:	f884 32c5 	strb.w	r3, [r4, #709]	; 0x2c5
    SeNvmCtx.KeyList[itr++].KeyID = MC_KE_KEY;
 804825e:	237f      	movs	r3, #127	; 0x7f
 8048260:	f884 32d6 	strb.w	r3, [r4, #726]	; 0x2d6
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_0;
 8048264:	2380      	movs	r3, #128	; 0x80
 8048266:	f884 32e7 	strb.w	r3, [r4, #743]	; 0x2e7
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_0;
 804826a:	2381      	movs	r3, #129	; 0x81
 804826c:	f884 32f8 	strb.w	r3, [r4, #760]	; 0x2f8
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_0;
 8048270:	2382      	movs	r3, #130	; 0x82
 8048272:	f884 3309 	strb.w	r3, [r4, #777]	; 0x309
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_1;
 8048276:	2383      	movs	r3, #131	; 0x83
 8048278:	f884 331a 	strb.w	r3, [r4, #794]	; 0x31a
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_1;
 804827c:	2384      	movs	r3, #132	; 0x84
 804827e:	f884 332b 	strb.w	r3, [r4, #811]	; 0x32b
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_1;
 8048282:	2385      	movs	r3, #133	; 0x85
 8048284:	f884 333c 	strb.w	r3, [r4, #828]	; 0x33c
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_2;
 8048288:	2386      	movs	r3, #134	; 0x86
 804828a:	f884 334d 	strb.w	r3, [r4, #845]	; 0x34d
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_2;
 804828e:	2387      	movs	r3, #135	; 0x87
 8048290:	f884 335e 	strb.w	r3, [r4, #862]	; 0x35e
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_2;
 8048294:	2388      	movs	r3, #136	; 0x88
 8048296:	f884 336f 	strb.w	r3, [r4, #879]	; 0x36f
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_3;
 804829a:	2389      	movs	r3, #137	; 0x89
 804829c:	f884 3380 	strb.w	r3, [r4, #896]	; 0x380
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_3;
 80482a0:	238a      	movs	r3, #138	; 0x8a
 80482a2:	f884 3391 	strb.w	r3, [r4, #913]	; 0x391
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_3;
 80482a6:	238b      	movs	r3, #139	; 0x8b
    SeNvmCtx.KeyList[itr++].KeyID = APP_KEY;
 80482a8:	2500      	movs	r5, #0
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_3;
 80482aa:	f884 33a2 	strb.w	r3, [r4, #930]	; 0x3a2
    SeNvmCtx.KeyList[itr].KeyID = SLOT_RAND_ZERO_KEY;

    // Set standard keys
    memcpy1( SeNvmCtx.KeyList[itr].KeyValue, zeroKey, KEY_SIZE );
 80482ae:	2210      	movs	r2, #16
    SeNvmCtx.KeyList[itr].KeyID = SLOT_RAND_ZERO_KEY;
 80482b0:	238c      	movs	r3, #140	; 0x8c
    memcpy1( SeNvmCtx.KeyList[itr].KeyValue, zeroKey, KEY_SIZE );
 80482b2:	4669      	mov	r1, sp
 80482b4:	f504 706d 	add.w	r0, r4, #948	; 0x3b4
    SeNvmCtx.KeyList[itr].KeyID = SLOT_RAND_ZERO_KEY;
 80482b8:	f884 33b3 	strb.w	r3, [r4, #947]	; 0x3b3
    SeNvmCtx.KeyList[itr++].KeyID = APP_KEY;
 80482bc:	f884 522c 	strb.w	r5, [r4, #556]	; 0x22c
    memcpy1( SeNvmCtx.KeyList[itr].KeyValue, zeroKey, KEY_SIZE );
 80482c0:	f005 fdb5 	bl	804de2e <memcpy1>

    memset1( SeNvmCtx.DevEui, 0, SE_EUI_SIZE );
 80482c4:	2210      	movs	r2, #16
 80482c6:	4629      	mov	r1, r5
 80482c8:	4620      	mov	r0, r4
 80482ca:	f005 fdc4 	bl	804de56 <memset1>
    memset1( SeNvmCtx.JoinEui, 0, SE_EUI_SIZE );
 80482ce:	2210      	movs	r2, #16
 80482d0:	4629      	mov	r1, r5
 80482d2:	18a0      	adds	r0, r4, r2
 80482d4:	f005 fdbf 	bl	804de56 <memset1>

    // Assign callback
    if( seNvmCtxChanged != 0 )
 80482d8:	b126      	cbz	r6, 80482e4 <SecureElementInit+0xcc>
    {
        SeNvmCtxChanged = seNvmCtxChanged;
 80482da:	f8c4 63c4 	str.w	r6, [r4, #964]	; 0x3c4
    {
        SeNvmCtxChanged = DummyCB;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 80482de:	2000      	movs	r0, #0
 80482e0:	b004      	add	sp, #16
 80482e2:	bd70      	pop	{r4, r5, r6, pc}
        SeNvmCtxChanged = DummyCB;
 80482e4:	4b02      	ldr	r3, [pc, #8]	; (80482f0 <SecureElementInit+0xd8>)
 80482e6:	f8c4 33c4 	str.w	r3, [r4, #964]	; 0x3c4
 80482ea:	e7f8      	b.n	80482de <SecureElementInit+0xc6>
 80482ec:	2000a404 	.word	0x2000a404
 80482f0:	0804818d 	.word	0x0804818d

080482f4 <SecureElementRestoreNvmCtx>:

SecureElementStatus_t SecureElementRestoreNvmCtx( void* seNvmCtx )
{
 80482f4:	b508      	push	{r3, lr}
    // Restore nvm context
    if( seNvmCtx != 0 )
 80482f6:	4601      	mov	r1, r0
 80482f8:	b130      	cbz	r0, 8048308 <SecureElementRestoreNvmCtx+0x14>
    {
        memcpy1( ( uint8_t* ) &SeNvmCtx, ( uint8_t* ) seNvmCtx, sizeof( SeNvmCtx ) );
 80482fa:	4804      	ldr	r0, [pc, #16]	; (804830c <SecureElementRestoreNvmCtx+0x18>)
 80482fc:	f44f 7271 	mov.w	r2, #964	; 0x3c4
 8048300:	f005 fd95 	bl	804de2e <memcpy1>
        return SECURE_ELEMENT_SUCCESS;
 8048304:	2000      	movs	r0, #0
    }
    else
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
}
 8048306:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8048308:	2002      	movs	r0, #2
 804830a:	e7fc      	b.n	8048306 <SecureElementRestoreNvmCtx+0x12>
 804830c:	2000a404 	.word	0x2000a404

08048310 <SecureElementGetNvmCtx>:

void* SecureElementGetNvmCtx( size_t* seNvmCtxSize )
{
    *seNvmCtxSize = sizeof( SeNvmCtx );
 8048310:	f44f 7371 	mov.w	r3, #964	; 0x3c4
 8048314:	6003      	str	r3, [r0, #0]
    return &SeNvmCtx;
}
 8048316:	4801      	ldr	r0, [pc, #4]	; (804831c <SecureElementGetNvmCtx+0xc>)
 8048318:	4770      	bx	lr
 804831a:	bf00      	nop
 804831c:	2000a404 	.word	0x2000a404

08048320 <SecureElementComputeAesCmac>:

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
{
 8048320:	b430      	push	{r4, r5}
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 8048322:	2b7e      	cmp	r3, #126	; 0x7e
{
 8048324:	9c02      	ldr	r4, [sp, #8]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 8048326:	d804      	bhi.n	8048332 <SecureElementComputeAesCmac+0x12>
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 8048328:	b131      	cbz	r1, 8048338 <SecureElementComputeAesCmac+0x18>
 804832a:	b12c      	cbz	r4, 8048338 <SecureElementComputeAesCmac+0x18>
        //Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
}
 804832c:	bc30      	pop	{r4, r5}
 804832e:	f7ff bf47 	b.w	80481c0 <ComputeCmac.part.0>
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8048332:	2003      	movs	r0, #3
}
 8048334:	bc30      	pop	{r4, r5}
 8048336:	4770      	bx	lr
        return SECURE_ELEMENT_ERROR_NPE;
 8048338:	2002      	movs	r0, #2
 804833a:	e7fb      	b.n	8048334 <SecureElementComputeAesCmac+0x14>

0804833c <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac, KeyIdentifier_t keyID )
{
 804833c:	b530      	push	{r4, r5, lr}
 804833e:	460d      	mov	r5, r1
 8048340:	b085      	sub	sp, #20
 8048342:	4614      	mov	r4, r2
    if( buffer == NULL )
 8048344:	4601      	mov	r1, r0
 8048346:	b170      	cbz	r0, 8048366 <SecureElementVerifyAesCmac+0x2a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
    uint32_t compCmac = 0;
 8048348:	aa04      	add	r2, sp, #16
 804834a:	2000      	movs	r0, #0
 804834c:	f842 0d04 	str.w	r0, [r2, #-4]!
 8048350:	9200      	str	r2, [sp, #0]
 8048352:	462a      	mov	r2, r5
 8048354:	f7ff ff34 	bl	80481c0 <ComputeCmac.part.0>
    retval = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
    if( retval != SECURE_ELEMENT_SUCCESS )
 8048358:	b918      	cbnz	r0, 8048362 <SecureElementVerifyAesCmac+0x26>
        return SECURE_ELEMENT_ERROR_NPE;
 804835a:	9803      	ldr	r0, [sp, #12]
 804835c:	1b00      	subs	r0, r0, r4
 804835e:	bf18      	it	ne
 8048360:	2001      	movne	r0, #1
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
    }

    return retval;
}
 8048362:	b005      	add	sp, #20
 8048364:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8048366:	2002      	movs	r0, #2
 8048368:	e7fb      	b.n	8048362 <SecureElementVerifyAesCmac+0x26>
	...

0804836c <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint8_t* encBuffer )
{
 804836c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8048370:	460e      	mov	r6, r1
 8048372:	4614      	mov	r4, r2
 8048374:	4698      	mov	r8, r3
    if( buffer == NULL || encBuffer == NULL )
 8048376:	4607      	mov	r7, r0
 8048378:	b330      	cbz	r0, 80483c8 <SecureElementAesEncrypt+0x5c>
 804837a:	b32b      	cbz	r3, 80483c8 <SecureElementAesEncrypt+0x5c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 804837c:	f011 010f 	ands.w	r1, r1, #15
 8048380:	d124      	bne.n	80483cc <SecureElementAesEncrypt+0x60>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

    memset1( SeNvmCtx.AesContext.ksch, '\0', 240 );
 8048382:	22f0      	movs	r2, #240	; 0xf0
 8048384:	4812      	ldr	r0, [pc, #72]	; (80483d0 <SecureElementAesEncrypt+0x64>)
 8048386:	f005 fd66 	bl	804de56 <memset1>

    Key_t* pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 804838a:	a901      	add	r1, sp, #4
 804838c:	4620      	mov	r0, r4
 804838e:	f7ff feff 	bl	8048190 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 8048392:	4605      	mov	r5, r0
 8048394:	b958      	cbnz	r0, 80483ae <SecureElementAesEncrypt+0x42>
    {
        aes_set_key( pItem->KeyValue, 16, &SeNvmCtx.AesContext );
 8048396:	9801      	ldr	r0, [sp, #4]
 8048398:	4a0d      	ldr	r2, [pc, #52]	; (80483d0 <SecureElementAesEncrypt+0x64>)

        uint8_t block = 0;

        while( size != 0 )
        {
            aes_encrypt( &buffer[block], &encBuffer[block], &SeNvmCtx.AesContext );
 804839a:	f8df 9034 	ldr.w	r9, [pc, #52]	; 80483d0 <SecureElementAesEncrypt+0x64>
        aes_set_key( pItem->KeyValue, 16, &SeNvmCtx.AesContext );
 804839e:	2110      	movs	r1, #16
 80483a0:	3001      	adds	r0, #1
 80483a2:	f7ff fbeb 	bl	8047b7c <aes_set_key>
 80483a6:	4634      	mov	r4, r6
 80483a8:	1b30      	subs	r0, r6, r4
 80483aa:	b2c0      	uxtb	r0, r0
        while( size != 0 )
 80483ac:	b91c      	cbnz	r4, 80483b6 <SecureElementAesEncrypt+0x4a>
            block = block + 16;
            size = size - 16;
        }
    }
    return retval;
}
 80483ae:	4628      	mov	r0, r5
 80483b0:	b003      	add	sp, #12
 80483b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            aes_encrypt( &buffer[block], &encBuffer[block], &SeNvmCtx.AesContext );
 80483b6:	eb08 0100 	add.w	r1, r8, r0
 80483ba:	464a      	mov	r2, r9
 80483bc:	4438      	add	r0, r7
            size = size - 16;
 80483be:	3c10      	subs	r4, #16
            aes_encrypt( &buffer[block], &encBuffer[block], &SeNvmCtx.AesContext );
 80483c0:	f7ff fc58 	bl	8047c74 <aes_encrypt>
            size = size - 16;
 80483c4:	b2a4      	uxth	r4, r4
 80483c6:	e7ef      	b.n	80483a8 <SecureElementAesEncrypt+0x3c>
        return SECURE_ELEMENT_ERROR_NPE;
 80483c8:	2502      	movs	r5, #2
 80483ca:	e7f0      	b.n	80483ae <SecureElementAesEncrypt+0x42>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 80483cc:	2505      	movs	r5, #5
 80483ce:	e7ee      	b.n	80483ae <SecureElementAesEncrypt+0x42>
 80483d0:	2000a424 	.word	0x2000a424

080483d4 <SecureElementSetKey.part.2>:
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
 80483d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80483d6:	460e      	mov	r6, r1
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 80483d8:	491f      	ldr	r1, [pc, #124]	; (8048458 <SecureElementSetKey.part.2+0x84>)
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
 80483da:	2300      	movs	r3, #0
 80483dc:	460d      	mov	r5, r1
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 80483de:	011c      	lsls	r4, r3, #4
 80483e0:	18e2      	adds	r2, r4, r3
 80483e2:	440a      	add	r2, r1
 80483e4:	f892 222c 	ldrb.w	r2, [r2, #556]	; 0x22c
 80483e8:	4282      	cmp	r2, r0
 80483ea:	d12f      	bne.n	804844c <SecureElementSetKey.part.2+0x78>
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
 80483ec:	f080 0080 	eor.w	r0, r0, #128	; 0x80
 80483f0:	2809      	cmp	r0, #9
 80483f2:	bf9e      	ittt	ls
 80483f4:	f240 2149 	movwls	r1, #585	; 0x249
 80483f8:	40c1      	lsrls	r1, r0
 80483fa:	43c9      	mvnls	r1, r1
 80483fc:	441c      	add	r4, r3
 80483fe:	f204 242d 	addw	r4, r4, #557	; 0x22d
 8048402:	bf94      	ite	ls
 8048404:	f001 0101 	andls.w	r1, r1, #1
 8048408:	2101      	movhi	r1, #1
 804840a:	442c      	add	r4, r5
                uint8_t decryptedKey[16] = { 0 };
 804840c:	2210      	movs	r2, #16
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
 804840e:	b9a1      	cbnz	r1, 804843a <SecureElementSetKey.part.2+0x66>
                uint8_t decryptedKey[16] = { 0 };
 8048410:	4668      	mov	r0, sp
 8048412:	f007 fe9b 	bl	805014c <memset>
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 8048416:	466b      	mov	r3, sp
 8048418:	227f      	movs	r2, #127	; 0x7f
 804841a:	2110      	movs	r1, #16
 804841c:	4630      	mov	r0, r6
 804841e:	f7ff ffa5 	bl	804836c <SecureElementAesEncrypt>
                memcpy1( SeNvmCtx.KeyList[i].KeyValue, decryptedKey, KEY_SIZE );
 8048422:	2210      	movs	r2, #16
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 8048424:	4606      	mov	r6, r0
                memcpy1( SeNvmCtx.KeyList[i].KeyValue, decryptedKey, KEY_SIZE );
 8048426:	4669      	mov	r1, sp
 8048428:	4620      	mov	r0, r4
 804842a:	f005 fd00 	bl	804de2e <memcpy1>
                SeNvmCtxChanged( );
 804842e:	f8d5 33c4 	ldr.w	r3, [r5, #964]	; 0x3c4
 8048432:	4798      	blx	r3
}
 8048434:	4630      	mov	r0, r6
 8048436:	b004      	add	sp, #16
 8048438:	bd70      	pop	{r4, r5, r6, pc}
                memcpy1( SeNvmCtx.KeyList[i].KeyValue, key, KEY_SIZE );
 804843a:	4631      	mov	r1, r6
 804843c:	4620      	mov	r0, r4
 804843e:	f005 fcf6 	bl	804de2e <memcpy1>
                SeNvmCtxChanged( );
 8048442:	f8d5 33c4 	ldr.w	r3, [r5, #964]	; 0x3c4
 8048446:	4798      	blx	r3
                return SECURE_ELEMENT_SUCCESS;
 8048448:	2600      	movs	r6, #0
 804844a:	e7f3      	b.n	8048434 <SecureElementSetKey.part.2+0x60>
 804844c:	3301      	adds	r3, #1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 804844e:	2b18      	cmp	r3, #24
 8048450:	d1c5      	bne.n	80483de <SecureElementSetKey.part.2+0xa>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8048452:	2603      	movs	r6, #3
 8048454:	e7ee      	b.n	8048434 <SecureElementSetKey.part.2+0x60>
 8048456:	bf00      	nop
 8048458:	2000a404 	.word	0x2000a404

0804845c <SecureElementSetKey>:
    if( key == NULL )
 804845c:	b109      	cbz	r1, 8048462 <SecureElementSetKey+0x6>
 804845e:	f7ff bfb9 	b.w	80483d4 <SecureElementSetKey.part.2>
}
 8048462:	2002      	movs	r0, #2
 8048464:	4770      	bx	lr

08048466 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( Version_t version, uint8_t* input, KeyIdentifier_t rootKeyID, KeyIdentifier_t targetKeyID )
{
 8048466:	b5f0      	push	{r4, r5, r6, r7, lr}
 8048468:	4607      	mov	r7, r0
 804846a:	b085      	sub	sp, #20
 804846c:	4614      	mov	r4, r2
 804846e:	461d      	mov	r5, r3
    if( input == NULL )
 8048470:	460e      	mov	r6, r1
 8048472:	b1d9      	cbz	r1, 80484ac <SecureElementDeriveAndStoreKey+0x46>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
    uint8_t key[16] = { 0 };
 8048474:	2210      	movs	r2, #16
 8048476:	2100      	movs	r1, #0
 8048478:	4668      	mov	r0, sp
 804847a:	f007 fe67 	bl	805014c <memset>

    // In case of MC_KE_KEY, prevent other keys than NwkKey or AppKey for LoRaWAN 1.1 or later
    if( targetKeyID == MC_KE_KEY )
 804847e:	2d7f      	cmp	r5, #127	; 0x7f
 8048480:	d107      	bne.n	8048492 <SecureElementDeriveAndStoreKey+0x2c>
    {
        if( ( ( rootKeyID == APP_KEY ) && ( version.Fields.Minor == 0 ) ) || ( rootKeyID == NWK_KEY ) )
 8048482:	b924      	cbnz	r4, 804848e <SecureElementDeriveAndStoreKey+0x28>
 8048484:	f417 0f7f 	tst.w	r7, #16711680	; 0xff0000
 8048488:	d103      	bne.n	8048492 <SecureElementDeriveAndStoreKey+0x2c>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 804848a:	2003      	movs	r0, #3
 804848c:	e00c      	b.n	80484a8 <SecureElementDeriveAndStoreKey+0x42>
        if( ( ( rootKeyID == APP_KEY ) && ( version.Fields.Minor == 0 ) ) || ( rootKeyID == NWK_KEY ) )
 804848e:	2c02      	cmp	r4, #2
 8048490:	d0fb      	beq.n	804848a <SecureElementDeriveAndStoreKey+0x24>
        }
    }

    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 8048492:	466b      	mov	r3, sp
 8048494:	4622      	mov	r2, r4
 8048496:	2110      	movs	r1, #16
 8048498:	4630      	mov	r0, r6
 804849a:	f7ff ff67 	bl	804836c <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 804849e:	b918      	cbnz	r0, 80484a8 <SecureElementDeriveAndStoreKey+0x42>
 80484a0:	4669      	mov	r1, sp
 80484a2:	4628      	mov	r0, r5
 80484a4:	f7ff ff96 	bl	80483d4 <SecureElementSetKey.part.2>
    {
        return retval;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 80484a8:	b005      	add	sp, #20
 80484aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80484ac:	2002      	movs	r0, #2
 80484ae:	e7fb      	b.n	80484a8 <SecureElementDeriveAndStoreKey+0x42>

080484b0 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 80484b0:	b510      	push	{r4, lr}
    if( randomNum == NULL )
 80484b2:	4604      	mov	r4, r0
 80484b4:	b128      	cbz	r0, 80484c2 <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    *randomNum = Radio.Random( );
 80484b6:	4b04      	ldr	r3, [pc, #16]	; (80484c8 <SecureElementRandomNumber+0x18>)
 80484b8:	69db      	ldr	r3, [r3, #28]
 80484ba:	4798      	blx	r3
 80484bc:	6020      	str	r0, [r4, #0]
    return SECURE_ELEMENT_SUCCESS;
 80484be:	2000      	movs	r0, #0
}
 80484c0:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80484c2:	2002      	movs	r0, #2
 80484c4:	e7fc      	b.n	80484c0 <SecureElementRandomNumber+0x10>
 80484c6:	bf00      	nop
 80484c8:	08051928 	.word	0x08051928

080484cc <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 80484cc:	b510      	push	{r4, lr}
    if( devEui == NULL )
 80484ce:	4601      	mov	r1, r0
 80484d0:	b148      	cbz	r0, 80484e6 <SecureElementSetDevEui+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvmCtx.DevEui, devEui, SE_EUI_SIZE );
 80484d2:	4c06      	ldr	r4, [pc, #24]	; (80484ec <SecureElementSetDevEui+0x20>)
 80484d4:	2210      	movs	r2, #16
 80484d6:	4620      	mov	r0, r4
 80484d8:	f005 fca9 	bl	804de2e <memcpy1>
    SeNvmCtxChanged( );
 80484dc:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 80484e0:	4798      	blx	r3
    return SECURE_ELEMENT_SUCCESS;
 80484e2:	2000      	movs	r0, #0
}
 80484e4:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80484e6:	2002      	movs	r0, #2
 80484e8:	e7fc      	b.n	80484e4 <SecureElementSetDevEui+0x18>
 80484ea:	bf00      	nop
 80484ec:	2000a404 	.word	0x2000a404

080484f0 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
    return SeNvmCtx.DevEui;
}
 80484f0:	4800      	ldr	r0, [pc, #0]	; (80484f4 <SecureElementGetDevEui+0x4>)
 80484f2:	4770      	bx	lr
 80484f4:	2000a404 	.word	0x2000a404

080484f8 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 80484f8:	b510      	push	{r4, lr}
    if( joinEui == NULL )
 80484fa:	4601      	mov	r1, r0
 80484fc:	b148      	cbz	r0, 8048512 <SecureElementSetJoinEui+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvmCtx.JoinEui, joinEui, SE_EUI_SIZE );
 80484fe:	4c06      	ldr	r4, [pc, #24]	; (8048518 <SecureElementSetJoinEui+0x20>)
 8048500:	2210      	movs	r2, #16
 8048502:	18a0      	adds	r0, r4, r2
 8048504:	f005 fc93 	bl	804de2e <memcpy1>
    SeNvmCtxChanged( );
 8048508:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 804850c:	4798      	blx	r3
    return SECURE_ELEMENT_SUCCESS;
 804850e:	2000      	movs	r0, #0
}
 8048510:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8048512:	2002      	movs	r0, #2
 8048514:	e7fc      	b.n	8048510 <SecureElementSetJoinEui+0x18>
 8048516:	bf00      	nop
 8048518:	2000a404 	.word	0x2000a404

0804851c <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvmCtx.JoinEui;
}
 804851c:	4800      	ldr	r0, [pc, #0]	; (8048520 <SecureElementGetJoinEui+0x4>)
 804851e:	4770      	bx	lr
 8048520:	2000a414 	.word	0x2000a414

08048524 <OnRadioRxError>:
#endif
}

static void OnRadioRxError( void )
{
    LoRaMacRadioEvents.Events.RxError = 1;
 8048524:	4b05      	ldr	r3, [pc, #20]	; (804853c <OnRadioRxError+0x18>)
 8048526:	781a      	ldrb	r2, [r3, #0]
 8048528:	f042 0202 	orr.w	r2, r2, #2
 804852c:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 804852e:	f8d3 334c 	ldr.w	r3, [r3, #844]	; 0x34c
 8048532:	b113      	cbz	r3, 804853a <OnRadioRxError+0x16>
 8048534:	68db      	ldr	r3, [r3, #12]
 8048536:	b103      	cbz	r3, 804853a <OnRadioRxError+0x16>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8048538:	4718      	bx	r3
    }
}
 804853a:	4770      	bx	lr
 804853c:	2000a7cc 	.word	0x2000a7cc

08048540 <UpdateRxSlotIdleState>:
#endif
}

static void UpdateRxSlotIdleState( void )
{
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8048540:	4b05      	ldr	r3, [pc, #20]	; (8048558 <UpdateRxSlotIdleState+0x18>)
 8048542:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 8048546:	f892 20f0 	ldrb.w	r2, [r2, #240]	; 0xf0
 804854a:	2a02      	cmp	r2, #2
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 804854c:	bf18      	it	ne
 804854e:	2206      	movne	r2, #6
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 8048550:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
}
 8048554:	4770      	bx	lr
 8048556:	bf00      	nop
 8048558:	2000a7cc 	.word	0x2000a7cc

0804855c <StopRetransmission>:
    return false;
}

static bool StopRetransmission( void )
{
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 804855c:	4b10      	ldr	r3, [pc, #64]	; (80485a0 <StopRetransmission+0x44>)
 804855e:	f893 2485 	ldrb.w	r2, [r3, #1157]	; 0x485
 8048562:	0792      	lsls	r2, r2, #30
 8048564:	d503      	bpl.n	804856e <StopRetransmission+0x12>
 8048566:	f893 2431 	ldrb.w	r2, [r3, #1073]	; 0x431
 804856a:	2a01      	cmp	r2, #1
 804856c:	d909      	bls.n	8048582 <StopRetransmission+0x26>
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
          ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( MacCtx.NvmCtx->AdrCtrlOn == true )
 804856e:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 8048572:	f892 10f2 	ldrb.w	r1, [r2, #242]	; 0xf2
 8048576:	b121      	cbz	r1, 8048582 <StopRetransmission+0x26>
        {
            MacCtx.NvmCtx->AdrAckCounter++;
 8048578:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
 804857c:	3101      	adds	r1, #1
 804857e:	f8c2 10f4 	str.w	r1, [r2, #244]	; 0xf4
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8048582:	2200      	movs	r2, #0
 8048584:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    MacCtx.NodeAckRequested = false;
 8048588:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.AckTimeoutRetry = false;
 804858c:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8048590:	f8d3 2344 	ldr.w	r2, [r3, #836]	; 0x344
 8048594:	f022 0202 	bic.w	r2, r2, #2
 8048598:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344

    return true;
}
 804859c:	2001      	movs	r0, #1
 804859e:	4770      	bx	lr
 80485a0:	2000a7cc 	.word	0x2000a7cc

080485a4 <CallNvmCtxCallback>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}

static void CallNvmCtxCallback( LoRaMacNvmCtxModule_t module )
{
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 80485a4:	4b03      	ldr	r3, [pc, #12]	; (80485b4 <CallNvmCtxCallback+0x10>)
 80485a6:	f8d3 334c 	ldr.w	r3, [r3, #844]	; 0x34c
 80485aa:	b113      	cbz	r3, 80485b2 <CallNvmCtxCallback+0xe>
 80485ac:	689b      	ldr	r3, [r3, #8]
 80485ae:	b103      	cbz	r3, 80485b2 <CallNvmCtxCallback+0xe>
    {
        MacCtx.MacCallbacks->NvmContextChange( module );
 80485b0:	4718      	bx	r3
    }
}
 80485b2:	4770      	bx	lr
 80485b4:	2000a7cc 	.word	0x2000a7cc

080485b8 <EventMacNvmCtxChanged>:

static void EventMacNvmCtxChanged( void )
{
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_MAC );
 80485b8:	2000      	movs	r0, #0
 80485ba:	f7ff bff3 	b.w	80485a4 <CallNvmCtxCallback>

080485be <EventRegionNvmCtxChanged>:
}

static void EventRegionNvmCtxChanged( void )
{
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_REGION );
 80485be:	2001      	movs	r0, #1
 80485c0:	f7ff bff0 	b.w	80485a4 <CallNvmCtxCallback>

080485c4 <EventCryptoNvmCtxChanged>:
}

static void EventCryptoNvmCtxChanged( void )
{
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CRYPTO );
 80485c4:	2002      	movs	r0, #2
 80485c6:	f7ff bfed 	b.w	80485a4 <CallNvmCtxCallback>

080485ca <EventSecureElementNvmCtxChanged>:
}

static void EventSecureElementNvmCtxChanged( void )
{
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_SECURE_ELEMENT );
 80485ca:	2003      	movs	r0, #3
 80485cc:	f7ff bfea 	b.w	80485a4 <CallNvmCtxCallback>

080485d0 <EventCommandsNvmCtxChanged>:
}

static void EventCommandsNvmCtxChanged( void )
{
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_COMMANDS );
 80485d0:	2004      	movs	r0, #4
 80485d2:	f7ff bfe7 	b.w	80485a4 <CallNvmCtxCallback>

080485d6 <EventClassBNvmCtxChanged>:
}

static void EventClassBNvmCtxChanged( void )
{
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CLASS_B );
 80485d6:	2005      	movs	r0, #5
 80485d8:	f7ff bfe4 	b.w	80485a4 <CallNvmCtxCallback>

080485dc <EventConfirmQueueNvmCtxChanged>:
}

static void EventConfirmQueueNvmCtxChanged( void )
{
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CONFIRM_QUEUE );
 80485dc:	2006      	movs	r0, #6
 80485de:	f7ff bfe1 	b.w	80485a4 <CallNvmCtxCallback>
	...

080485e4 <GetMaxAppPayloadWithoutFOptsLength>:
{
 80485e4:	b507      	push	{r0, r1, r2, lr}
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80485e6:	4b0d      	ldr	r3, [pc, #52]	; (804861c <GetMaxAppPayloadWithoutFOptsLength+0x38>)
    getPhy.Datarate = datarate;
 80485e8:	f88d 0001 	strb.w	r0, [sp, #1]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80485ec:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 80485f0:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 80485f4:	f88d 2002 	strb.w	r2, [sp, #2]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 80485f8:	220d      	movs	r2, #13
 80485fa:	f88d 2000 	strb.w	r2, [sp]
    if( MacCtx.NvmCtx->RepeaterSupport == true )
 80485fe:	f893 213f 	ldrb.w	r2, [r3, #319]	; 0x13f
 8048602:	b112      	cbz	r2, 804860a <GetMaxAppPayloadWithoutFOptsLength+0x26>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8048604:	220e      	movs	r2, #14
 8048606:	f88d 2000 	strb.w	r2, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804860a:	4669      	mov	r1, sp
 804860c:	7818      	ldrb	r0, [r3, #0]
 804860e:	f003 fd26 	bl	804c05e <RegionGetPhyParam>
}
 8048612:	b2c0      	uxtb	r0, r0
 8048614:	b003      	add	sp, #12
 8048616:	f85d fb04 	ldr.w	pc, [sp], #4
 804861a:	bf00      	nop
 804861c:	2000a7cc 	.word	0x2000a7cc

08048620 <OnAckTimeoutTimerEvent>:
{
 8048620:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.AckTimeoutTimer );
 8048622:	4c10      	ldr	r4, [pc, #64]	; (8048664 <OnAckTimeoutTimerEvent+0x44>)
 8048624:	f504 707f 	add.w	r0, r4, #1020	; 0x3fc
 8048628:	f005 fb12 	bl	804dc50 <TimerStop>
    if( MacCtx.NodeAckRequested == true )
 804862c:	f894 2418 	ldrb.w	r2, [r4, #1048]	; 0x418
 8048630:	4623      	mov	r3, r4
 8048632:	b112      	cbz	r2, 804863a <OnAckTimeoutTimerEvent+0x1a>
        MacCtx.AckTimeoutRetry = true;
 8048634:	2201      	movs	r2, #1
 8048636:	f884 2417 	strb.w	r2, [r4, #1047]	; 0x417
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 804863a:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 804863e:	f892 20f0 	ldrb.w	r2, [r2, #240]	; 0xf0
 8048642:	2a02      	cmp	r2, #2
        MacCtx.MacFlags.Bits.MacDone = 1;
 8048644:	bf02      	ittt	eq
 8048646:	f893 2485 	ldrbeq.w	r2, [r3, #1157]	; 0x485
 804864a:	f042 0220 	orreq.w	r2, r2, #32
 804864e:	f883 2485 	strbeq.w	r2, [r3, #1157]	; 0x485
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8048652:	f8d3 334c 	ldr.w	r3, [r3, #844]	; 0x34c
 8048656:	b123      	cbz	r3, 8048662 <OnAckTimeoutTimerEvent+0x42>
 8048658:	68db      	ldr	r3, [r3, #12]
 804865a:	b113      	cbz	r3, 8048662 <OnAckTimeoutTimerEvent+0x42>
}
 804865c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MacCtx.MacCallbacks->MacProcessNotify( );
 8048660:	4718      	bx	r3
}
 8048662:	bd10      	pop	{r4, pc}
 8048664:	2000a7cc 	.word	0x2000a7cc

08048668 <PrepareRxDoneAbort>:
{
 8048668:	b510      	push	{r4, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 804866a:	4c0d      	ldr	r4, [pc, #52]	; (80486a0 <PrepareRxDoneAbort+0x38>)
	PRINTF("AbortRX\r\n");
 804866c:	480d      	ldr	r0, [pc, #52]	; (80486a4 <PrepareRxDoneAbort+0x3c>)
 804866e:	f005 fb79 	bl	804dd64 <TraceSend>
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8048672:	f8d4 2344 	ldr.w	r2, [r4, #836]	; 0x344
 8048676:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 804867a:	f8c4 2344 	str.w	r2, [r4, #836]	; 0x344
    if( MacCtx.NodeAckRequested == true )
 804867e:	f894 2418 	ldrb.w	r2, [r4, #1048]	; 0x418
 8048682:	b112      	cbz	r2, 804868a <PrepareRxDoneAbort+0x22>
        OnAckTimeoutTimerEvent( NULL );
 8048684:	2000      	movs	r0, #0
 8048686:	f7ff ffcb 	bl	8048620 <OnAckTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 804868a:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
    MacCtx.MacFlags.Bits.MacDone = 1;
 804868e:	f043 0322 	orr.w	r3, r3, #34	; 0x22
 8048692:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
}
 8048696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    UpdateRxSlotIdleState( );
 804869a:	f7ff bf51 	b.w	8048540 <UpdateRxSlotIdleState>
 804869e:	bf00      	nop
 80486a0:	2000a7cc 	.word	0x2000a7cc
 80486a4:	08051ee9 	.word	0x08051ee9

080486a8 <HandleRadioRxErrorTimeout>:
{
 80486a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 80486ac:	4c2a      	ldr	r4, [pc, #168]	; (8048758 <HandleRadioRxErrorTimeout+0xb0>)
 80486ae:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 80486b2:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80486b6:	2b02      	cmp	r3, #2
{
 80486b8:	4607      	mov	r7, r0
 80486ba:	460e      	mov	r6, r1
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 80486bc:	d002      	beq.n	80486c4 <HandleRadioRxErrorTimeout+0x1c>
        Radio.Sleep( );
 80486be:	4b27      	ldr	r3, [pc, #156]	; (804875c <HandleRadioRxErrorTimeout+0xb4>)
 80486c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80486c2:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80486c4:	f002 fd3e 	bl	804b144 <LoRaMacClassBIsBeaconExpected>
 80486c8:	4605      	mov	r5, r0
 80486ca:	b128      	cbz	r0, 80486d8 <HandleRadioRxErrorTimeout+0x30>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 80486cc:	2002      	movs	r0, #2
 80486ce:	f002 fd2f 	bl	804b130 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 80486d2:	2000      	movs	r0, #0
 80486d4:	f002 fd31 	bl	804b13a <LoRaMacClassBBeaconTimerEvent>
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 80486d8:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 80486dc:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80486e0:	2b01      	cmp	r3, #1
 80486e2:	d117      	bne.n	8048714 <HandleRadioRxErrorTimeout+0x6c>
        if( LoRaMacClassBIsPingExpected( ) == true )
 80486e4:	f002 fd30 	bl	804b148 <LoRaMacClassBIsPingExpected>
 80486e8:	4680      	mov	r8, r0
 80486ea:	b130      	cbz	r0, 80486fa <HandleRadioRxErrorTimeout+0x52>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80486ec:	2000      	movs	r0, #0
 80486ee:	f002 fd20 	bl	804b132 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 80486f2:	2000      	movs	r0, #0
 80486f4:	f002 fd22 	bl	804b13c <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 80486f8:	4645      	mov	r5, r8
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 80486fa:	f002 fd27 	bl	804b14c <LoRaMacClassBIsMulticastExpected>
 80486fe:	b148      	cbz	r0, 8048714 <HandleRadioRxErrorTimeout+0x6c>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8048700:	2000      	movs	r0, #0
 8048702:	f002 fd17 	bl	804b134 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8048706:	2000      	movs	r0, #0
 8048708:	f002 fd19 	bl	804b13e <LoRaMacClassBMulticastSlotTimerEvent>
}
 804870c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    UpdateRxSlotIdleState( );
 8048710:	f7ff bf16 	b.w	8048540 <UpdateRxSlotIdleState>
    if( classBRx == false )
 8048714:	2d00      	cmp	r5, #0
 8048716:	d1f9      	bne.n	804870c <HandleRadioRxErrorTimeout+0x64>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8048718:	f894 2484 	ldrb.w	r2, [r4, #1156]	; 0x484
 804871c:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 8048720:	b932      	cbnz	r2, 8048730 <HandleRadioRxErrorTimeout+0x88>
            if( MacCtx.NodeAckRequested == true )
 8048722:	b10b      	cbz	r3, 8048728 <HandleRadioRxErrorTimeout+0x80>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8048724:	f884 7441 	strb.w	r7, [r4, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8048728:	4638      	mov	r0, r7
 804872a:	f002 fecf 	bl	804b4cc <LoRaMacConfirmQueueSetStatusCmn>
 804872e:	e7ed      	b.n	804870c <HandleRadioRxErrorTimeout+0x64>
            if( MacCtx.NodeAckRequested == true )
 8048730:	b10b      	cbz	r3, 8048736 <HandleRadioRxErrorTimeout+0x8e>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8048732:	f884 6441 	strb.w	r6, [r4, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8048736:	4630      	mov	r0, r6
 8048738:	f002 fec8 	bl	804b4cc <LoRaMacConfirmQueueSetStatusCmn>
            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 804873c:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8048740:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8048744:	2b02      	cmp	r3, #2
                MacCtx.MacFlags.Bits.MacDone = 1;
 8048746:	bf1e      	ittt	ne
 8048748:	f894 3485 	ldrbne.w	r3, [r4, #1157]	; 0x485
 804874c:	f043 0320 	orrne.w	r3, r3, #32
 8048750:	f884 3485 	strbne.w	r3, [r4, #1157]	; 0x485
 8048754:	e7da      	b.n	804870c <HandleRadioRxErrorTimeout+0x64>
 8048756:	bf00      	nop
 8048758:	2000a7cc 	.word	0x2000a7cc
 804875c:	08051928 	.word	0x08051928

08048760 <ResetMacParameters>:
{
 8048760:	b573      	push	{r0, r1, r4, r5, r6, lr}
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 8048762:	4c30      	ldr	r4, [pc, #192]	; (8048824 <ResetMacParameters+0xc4>)
 8048764:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8048768:	2500      	movs	r5, #0
    MacCtx.AckTimeoutRetries = 1;
 804876a:	2601      	movs	r6, #1
    MacCtx.ChannelsNbTransCounter = 0;
 804876c:	f44f 7280 	mov.w	r2, #256	; 0x100
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 8048770:	f883 51d4 	strb.w	r5, [r3, #468]	; 0x1d4
    MacCtx.NvmCtx->AdrAckCounter = 0;
 8048774:	f8c3 50f4 	str.w	r5, [r3, #244]	; 0xf4
    MacCtx.ChannelsNbTransCounter = 0;
 8048778:	f8a4 2414 	strh.w	r2, [r4, #1044]	; 0x414
    MacCtx.AckTimeoutRetries = 1;
 804877c:	f884 6416 	strb.w	r6, [r4, #1046]	; 0x416
    MacCtx.AckTimeoutRetry = false;
 8048780:	f884 5417 	strb.w	r5, [r4, #1047]	; 0x417
    MacCtx.NvmCtx->MacParams.ChannelsTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 8048784:	791a      	ldrb	r2, [r3, #4]
 8048786:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 804878a:	795a      	ldrb	r2, [r3, #5]
 804878c:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
    MacCtx.NvmCtx->MacParams.Rx1DrOffset = MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset;
 8048790:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
    MacCtx.NvmCtx->MaxDCycle = 0;
 8048794:	f883 513c 	strb.w	r5, [r3, #316]	; 0x13c
    MacCtx.NvmCtx->MacParams.Rx1DrOffset = MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset;
 8048798:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
    MacCtx.NvmCtx->MacParams.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 804879c:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80487a0:	c903      	ldmia	r1, {r0, r1}
 80487a2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
    MacCtx.NvmCtx->AggregatedDCycle = 1;
 80487a6:	f8a3 61c2 	strh.w	r6, [r3, #450]	; 0x1c2
    MacCtx.NvmCtx->MacParams.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 80487aa:	e882 0003 	stmia.w	r2, {r0, r1}
    MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 80487ae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80487b2:	c903      	ldmia	r1, {r0, r1}
 80487b4:	f503 7292 	add.w	r2, r3, #292	; 0x124
 80487b8:	e882 0003 	stmia.w	r2, {r0, r1}
    MacCtx.NvmCtx->MacParams.UplinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime;
 80487bc:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80487c0:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime;
 80487c4:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80487c8:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
    params.NvmCtx = NULL;
 80487cc:	a902      	add	r1, sp, #8
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
 80487ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80487d0:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    MacCtx.NvmCtx->MacParams.AntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 80487d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80487d6:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    MacCtx.NodeAckRequested = false;
 80487da:	f884 5418 	strb.w	r5, [r4, #1048]	; 0x418
    MacCtx.NvmCtx->SrvAckRequested = false;
 80487de:	f883 51c0 	strb.w	r5, [r3, #448]	; 0x1c0
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 80487e2:	7818      	ldrb	r0, [r3, #0]
    params.NvmCtx = NULL;
 80487e4:	f841 5d08 	str.w	r5, [r1, #-8]!
    params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 80487e8:	f88d 6004 	strb.w	r6, [sp, #4]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 80487ec:	f003 fc47 	bl	804c07e <RegionInitDefaults>
    MacCtx.NvmCtx->LastTxChannel = MacCtx.Channel;
 80487f0:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    MacCtx.Channel = 0;
 80487f4:	f884 5419 	strb.w	r5, [r4, #1049]	; 0x419
    MacCtx.NvmCtx->LastTxChannel = MacCtx.Channel;
 80487f8:	f883 513e 	strb.w	r5, [r3, #318]	; 0x13e
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80487fc:	f884 53d0 	strb.w	r5, [r4, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 8048800:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8048804:	f8c4 23d4 	str.w	r2, [r4, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8048808:	f893 212d 	ldrb.w	r2, [r3, #301]	; 0x12d
 804880c:	f884 23e0 	strb.w	r2, [r4, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8048810:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8048814:	f884 33e1 	strb.w	r3, [r4, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8048818:	f884 53e2 	strb.w	r5, [r4, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 804881c:	f884 63e3 	strb.w	r6, [r4, #995]	; 0x3e3
}
 8048820:	b002      	add	sp, #8
 8048822:	bd70      	pop	{r4, r5, r6, pc}
 8048824:	2000a7cc 	.word	0x2000a7cc

08048828 <OpenContinuousRxCWindow>:
{
 8048828:	b510      	push	{r4, lr}
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 804882a:	4c0d      	ldr	r4, [pc, #52]	; (8048860 <OpenContinuousRxCWindow+0x38>)
 804882c:	2302      	movs	r3, #2
 804882e:	f884 33f7 	strb.w	r3, [r4, #1015]	; 0x3f7
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8048832:	2301      	movs	r3, #1
 8048834:	f884 33f6 	strb.w	r3, [r4, #1014]	; 0x3f6
    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8048838:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 804883c:	f204 4224 	addw	r2, r4, #1060	; 0x424
 8048840:	f504 7179 	add.w	r1, r4, #996	; 0x3e4
 8048844:	7818      	ldrb	r0, [r3, #0]
 8048846:	f003 fc4c 	bl	804c0e2 <RegionRxConfig>
 804884a:	b138      	cbz	r0, 804885c <OpenContinuousRxCWindow+0x34>
        Radio.Rx( 0 ); // Continuous mode
 804884c:	4b05      	ldr	r3, [pc, #20]	; (8048864 <OpenContinuousRxCWindow+0x3c>)
 804884e:	2000      	movs	r0, #0
 8048850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8048852:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8048854:	f894 33f7 	ldrb.w	r3, [r4, #1015]	; 0x3f7
 8048858:	f884 3484 	strb.w	r3, [r4, #1156]	; 0x484
}
 804885c:	bd10      	pop	{r4, pc}
 804885e:	bf00      	nop
 8048860:	2000a7cc 	.word	0x2000a7cc
 8048864:	08051928 	.word	0x08051928

08048868 <OnRadioRxTimeout>:
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8048868:	4b0d      	ldr	r3, [pc, #52]	; (80488a0 <OnRadioRxTimeout+0x38>)
{
 804886a:	b507      	push	{r0, r1, r2, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 804886c:	781a      	ldrb	r2, [r3, #0]
 804886e:	f042 0201 	orr.w	r2, r2, #1
 8048872:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8048874:	f8d3 334c 	ldr.w	r3, [r3, #844]	; 0x34c
 8048878:	b113      	cbz	r3, 8048880 <OnRadioRxTimeout+0x18>
 804887a:	68db      	ldr	r3, [r3, #12]
 804887c:	b103      	cbz	r3, 8048880 <OnRadioRxTimeout+0x18>
        MacCtx.MacCallbacks->MacProcessNotify( );
 804887e:	4798      	blx	r3
    PRINTNOW(); PRINTF("PHY rxTimeOut\n\r" );
 8048880:	4668      	mov	r0, sp
 8048882:	f005 f934 	bl	804daee <SysTimeGetMcuTime>
 8048886:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 804888a:	9900      	ldr	r1, [sp, #0]
 804888c:	4805      	ldr	r0, [pc, #20]	; (80488a4 <OnRadioRxTimeout+0x3c>)
 804888e:	f005 fa69 	bl	804dd64 <TraceSend>
 8048892:	4805      	ldr	r0, [pc, #20]	; (80488a8 <OnRadioRxTimeout+0x40>)
}
 8048894:	b003      	add	sp, #12
 8048896:	f85d eb04 	ldr.w	lr, [sp], #4
    PRINTNOW(); PRINTF("PHY rxTimeOut\n\r" );
 804889a:	f005 ba63 	b.w	804dd64 <TraceSend>
 804889e:	bf00      	nop
 80488a0:	2000a7cc 	.word	0x2000a7cc
 80488a4:	08051ef3 	.word	0x08051ef3
 80488a8:	08051efe 	.word	0x08051efe

080488ac <OnRadioTxTimeout>:
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 80488ac:	4b0d      	ldr	r3, [pc, #52]	; (80488e4 <OnRadioTxTimeout+0x38>)
{
 80488ae:	b507      	push	{r0, r1, r2, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 80488b0:	781a      	ldrb	r2, [r3, #0]
 80488b2:	f042 0204 	orr.w	r2, r2, #4
 80488b6:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80488b8:	f8d3 334c 	ldr.w	r3, [r3, #844]	; 0x34c
 80488bc:	b113      	cbz	r3, 80488c4 <OnRadioTxTimeout+0x18>
 80488be:	68db      	ldr	r3, [r3, #12]
 80488c0:	b103      	cbz	r3, 80488c4 <OnRadioTxTimeout+0x18>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80488c2:	4798      	blx	r3
    PRINTNOW(); PRINTF("PHY txTimeOut\n\r" );
 80488c4:	4668      	mov	r0, sp
 80488c6:	f005 f912 	bl	804daee <SysTimeGetMcuTime>
 80488ca:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80488ce:	9900      	ldr	r1, [sp, #0]
 80488d0:	4805      	ldr	r0, [pc, #20]	; (80488e8 <OnRadioTxTimeout+0x3c>)
 80488d2:	f005 fa47 	bl	804dd64 <TraceSend>
 80488d6:	4805      	ldr	r0, [pc, #20]	; (80488ec <OnRadioTxTimeout+0x40>)
}
 80488d8:	b003      	add	sp, #12
 80488da:	f85d eb04 	ldr.w	lr, [sp], #4
    PRINTNOW(); PRINTF("PHY txTimeOut\n\r" );
 80488de:	f005 ba41 	b.w	804dd64 <TraceSend>
 80488e2:	bf00      	nop
 80488e4:	2000a7cc 	.word	0x2000a7cc
 80488e8:	08051ef3 	.word	0x08051ef3
 80488ec:	08051f0e 	.word	0x08051f0e

080488f0 <OnRadioRxDone>:
{
 80488f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80488f4:	4616      	mov	r6, r2
 80488f6:	461d      	mov	r5, r3
 80488f8:	4680      	mov	r8, r0
 80488fa:	460f      	mov	r7, r1
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 80488fc:	f005 f9e1 	bl	804dcc2 <TimerGetCurrentTime>
    LoRaMacRadioEvents.Events.RxDone = 1;
 8048900:	4b0f      	ldr	r3, [pc, #60]	; (8048940 <OnRadioRxDone+0x50>)
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8048902:	4c10      	ldr	r4, [pc, #64]	; (8048944 <OnRadioRxDone+0x54>)
    LoRaMacRadioEvents.Events.RxDone = 1;
 8048904:	781a      	ldrb	r2, [r3, #0]
    RxDoneParams.Size = size;
 8048906:	8127      	strh	r7, [r4, #8]
    LoRaMacRadioEvents.Events.RxDone = 1;
 8048908:	f042 0208 	orr.w	r2, r2, #8
 804890c:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 804890e:	f8d3 334c 	ldr.w	r3, [r3, #844]	; 0x34c
    RxDoneParams.Rssi = rssi;
 8048912:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Payload = payload;
 8048914:	e9c4 0800 	strd	r0, r8, [r4]
    RxDoneParams.Snr = snr;
 8048918:	7325      	strb	r5, [r4, #12]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 804891a:	b113      	cbz	r3, 8048922 <OnRadioRxDone+0x32>
 804891c:	68db      	ldr	r3, [r3, #12]
 804891e:	b103      	cbz	r3, 8048922 <OnRadioRxDone+0x32>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8048920:	4798      	blx	r3
    PRINTNOW(); PRINTF("PHY rxDone\n\r" );
 8048922:	4668      	mov	r0, sp
 8048924:	f005 f8e3 	bl	804daee <SysTimeGetMcuTime>
 8048928:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 804892c:	9900      	ldr	r1, [sp, #0]
 804892e:	4806      	ldr	r0, [pc, #24]	; (8048948 <OnRadioRxDone+0x58>)
 8048930:	f005 fa18 	bl	804dd64 <TraceSend>
 8048934:	4805      	ldr	r0, [pc, #20]	; (804894c <OnRadioRxDone+0x5c>)
}
 8048936:	b002      	add	sp, #8
 8048938:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    PRINTNOW(); PRINTF("PHY rxDone\n\r" );
 804893c:	f005 ba12 	b.w	804dd64 <TraceSend>
 8048940:	2000a7cc 	.word	0x2000a7cc
 8048944:	2000de00 	.word	0x2000de00
 8048948:	08051ef3 	.word	0x08051ef3
 804894c:	08051f1e 	.word	0x08051f1e

08048950 <OnRadioTxDone>:
{
 8048950:	b530      	push	{r4, r5, lr}
 8048952:	b085      	sub	sp, #20
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8048954:	f005 f9b5 	bl	804dcc2 <TimerGetCurrentTime>
 8048958:	4b12      	ldr	r3, [pc, #72]	; (80489a4 <OnRadioTxDone+0x54>)
    MacCtx.LastTxSysTime = SysTimeGet( );
 804895a:	4c13      	ldr	r4, [pc, #76]	; (80489a8 <OnRadioTxDone+0x58>)
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 804895c:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 804895e:	466d      	mov	r5, sp
 8048960:	4628      	mov	r0, r5
 8048962:	f005 f8a0 	bl	804daa6 <SysTimeGet>
 8048966:	e895 0003 	ldmia.w	r5, {r0, r1}
 804896a:	f504 734f 	add.w	r3, r4, #828	; 0x33c
 804896e:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 8048972:	7823      	ldrb	r3, [r4, #0]
 8048974:	f043 0310 	orr.w	r3, r3, #16
 8048978:	7023      	strb	r3, [r4, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 804897a:	f8d4 334c 	ldr.w	r3, [r4, #844]	; 0x34c
 804897e:	b113      	cbz	r3, 8048986 <OnRadioTxDone+0x36>
 8048980:	68db      	ldr	r3, [r3, #12]
 8048982:	b103      	cbz	r3, 8048986 <OnRadioTxDone+0x36>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8048984:	4798      	blx	r3
    PRINTNOW(); PRINTF("PHY txDone\n\r" );
 8048986:	a802      	add	r0, sp, #8
 8048988:	f005 f8b1 	bl	804daee <SysTimeGetMcuTime>
 804898c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8048990:	9902      	ldr	r1, [sp, #8]
 8048992:	4806      	ldr	r0, [pc, #24]	; (80489ac <OnRadioTxDone+0x5c>)
 8048994:	f005 f9e6 	bl	804dd64 <TraceSend>
 8048998:	4805      	ldr	r0, [pc, #20]	; (80489b0 <OnRadioTxDone+0x60>)
}
 804899a:	b005      	add	sp, #20
 804899c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    PRINTNOW(); PRINTF("PHY txDone\n\r" );
 80489a0:	f005 b9e0 	b.w	804dd64 <TraceSend>
 80489a4:	2000ddfc 	.word	0x2000ddfc
 80489a8:	2000a7cc 	.word	0x2000a7cc
 80489ac:	08051ef3 	.word	0x08051ef3
 80489b0:	08051f2b 	.word	0x08051f2b

080489b4 <SwitchClass>:
{
 80489b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch( MacCtx.NvmCtx->DeviceClass )
 80489b6:	4e3d      	ldr	r6, [pc, #244]	; (8048aac <SwitchClass+0xf8>)
 80489b8:	f8d6 4488 	ldr.w	r4, [r6, #1160]	; 0x488
 80489bc:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
 80489c0:	2b01      	cmp	r3, #1
{
 80489c2:	4607      	mov	r7, r0
 80489c4:	4635      	mov	r5, r6
    switch( MacCtx.NvmCtx->DeviceClass )
 80489c6:	d010      	beq.n	80489ea <SwitchClass+0x36>
 80489c8:	d303      	bcc.n	80489d2 <SwitchClass+0x1e>
 80489ca:	2b02      	cmp	r3, #2
 80489cc:	d064      	beq.n	8048a98 <SwitchClass+0xe4>
 80489ce:	2003      	movs	r0, #3
 80489d0:	e05c      	b.n	8048a8c <SwitchClass+0xd8>
            if( deviceClass == CLASS_A )
 80489d2:	b940      	cbnz	r0, 80489e6 <SwitchClass+0x32>
                MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 80489d4:	f504 7392 	add.w	r3, r4, #292	; 0x124
 80489d8:	f504 748e 	add.w	r4, r4, #284	; 0x11c
 80489dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80489e0:	e883 0003 	stmia.w	r3, {r0, r1}
 80489e4:	e7f3      	b.n	80489ce <SwitchClass+0x1a>
            if( deviceClass == CLASS_B )
 80489e6:	2801      	cmp	r0, #1
 80489e8:	d108      	bne.n	80489fc <SwitchClass+0x48>
            status = LoRaMacClassBSwitchClass( deviceClass );
 80489ea:	f002 fbb6 	bl	804b15a <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 80489ee:	2800      	cmp	r0, #0
 80489f0:	d14c      	bne.n	8048a8c <SwitchClass+0xd8>
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 80489f2:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
 80489f6:	f883 70f0 	strb.w	r7, [r3, #240]	; 0xf0
 80489fa:	e047      	b.n	8048a8c <SwitchClass+0xd8>
            if( deviceClass == CLASS_C )
 80489fc:	2802      	cmp	r0, #2
 80489fe:	d1e6      	bne.n	80489ce <SwitchClass+0x1a>
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8048a00:	f505 7c74 	add.w	ip, r5, #976	; 0x3d0
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 8048a04:	f884 00f0 	strb.w	r0, [r4, #240]	; 0xf0
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8048a08:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8048a0c:	f506 7679 	add.w	r6, r6, #996	; 0x3e4
 8048a10:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8048a12:	f8dc 3000 	ldr.w	r3, [ip]
 8048a16:	f846 3910 	str.w	r3, [r6], #-16
                    if( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true )
 8048a1a:	2128      	movs	r1, #40	; 0x28
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8048a1c:	f885 73f7 	strb.w	r7, [r5, #1015]	; 0x3f7
 8048a20:	2300      	movs	r3, #0
                    if( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true )
 8048a22:	fb01 4203 	mla	r2, r1, r3, r4
 8048a26:	f892 0051 	ldrb.w	r0, [r2, #81]	; 0x51
 8048a2a:	b388      	cbz	r0, 8048a90 <SwitchClass+0xdc>
                        MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8048a2c:	6e53      	ldr	r3, [r2, #100]	; 0x64
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8048a2e:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
                        MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8048a32:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8048a36:	f884 2128 	strb.w	r2, [r4, #296]	; 0x128
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8048a3a:	f895 2419 	ldrb.w	r2, [r5, #1049]	; 0x419
 8048a3e:	f885 23e4 	strb.w	r2, [r5, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 8048a42:	f8c5 33e8 	str.w	r3, [r5, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8048a46:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 8048a4a:	f885 33f4 	strb.w	r3, [r5, #1012]	; 0x3f4
                        MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8048a4e:	f894 313f 	ldrb.w	r3, [r4, #319]	; 0x13f
 8048a52:	f885 33f5 	strb.w	r3, [r5, #1013]	; 0x3f5
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8048a56:	2303      	movs	r3, #3
 8048a58:	f885 33f7 	strb.w	r3, [r5, #1015]	; 0x3f7
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8048a5c:	2301      	movs	r3, #1
 8048a5e:	f885 33f6 	strb.w	r3, [r5, #1014]	; 0x3f6
                Radio.Sleep( );
 8048a62:	4b13      	ldr	r3, [pc, #76]	; (8048ab0 <SwitchClass+0xfc>)
                MacCtx.NodeAckRequested = false;
 8048a64:	2400      	movs	r4, #0
                Radio.Sleep( );
 8048a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                MacCtx.NodeAckRequested = false;
 8048a68:	f885 4418 	strb.w	r4, [r5, #1048]	; 0x418
                Radio.Sleep( );
 8048a6c:	4798      	blx	r3
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8048a6e:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 8048a72:	7818      	ldrb	r0, [r3, #0]
 8048a74:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
 8048a78:	f993 1128 	ldrsb.w	r1, [r3, #296]	; 0x128
 8048a7c:	9600      	str	r6, [sp, #0]
 8048a7e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8048a82:	f003 fb1f 	bl	804c0c4 <RegionComputeRxWindowParameters>
                OpenContinuousRxCWindow( );
 8048a86:	f7ff fecf 	bl	8048828 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 8048a8a:	4620      	mov	r0, r4
}
 8048a8c:	b003      	add	sp, #12
 8048a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8048a90:	3301      	adds	r3, #1
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8048a92:	2b04      	cmp	r3, #4
 8048a94:	d1c5      	bne.n	8048a22 <SwitchClass+0x6e>
 8048a96:	e7e4      	b.n	8048a62 <SwitchClass+0xae>
            if( deviceClass == CLASS_A )
 8048a98:	2800      	cmp	r0, #0
 8048a9a:	d198      	bne.n	80489ce <SwitchClass+0x1a>
                Radio.Sleep( );
 8048a9c:	4b04      	ldr	r3, [pc, #16]	; (8048ab0 <SwitchClass+0xfc>)
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 8048a9e:	f884 00f0 	strb.w	r0, [r4, #240]	; 0xf0
                Radio.Sleep( );
 8048aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8048aa4:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 8048aa6:	4638      	mov	r0, r7
 8048aa8:	e7f0      	b.n	8048a8c <SwitchClass+0xd8>
 8048aaa:	bf00      	nop
 8048aac:	2000a7cc 	.word	0x2000a7cc
 8048ab0:	08051928 	.word	0x08051928

08048ab4 <RxWindowSetup.constprop.6>:
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
 8048ab4:	b570      	push	{r4, r5, r6, lr}
    Radio.Standby( );
 8048ab6:	4e0d      	ldr	r6, [pc, #52]	; (8048aec <RxWindowSetup.constprop.6+0x38>)
    if( RegionRxConfig( MacCtx.NvmCtx->Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8048ab8:	4c0d      	ldr	r4, [pc, #52]	; (8048af0 <RxWindowSetup.constprop.6+0x3c>)
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
 8048aba:	460d      	mov	r5, r1
    TimerStop( rxTimer );
 8048abc:	f005 f8c8 	bl	804dc50 <TimerStop>
    Radio.Standby( );
 8048ac0:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8048ac2:	4798      	blx	r3
    if( RegionRxConfig( MacCtx.NvmCtx->Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8048ac4:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8048ac8:	f204 4224 	addw	r2, r4, #1060	; 0x424
 8048acc:	4629      	mov	r1, r5
 8048ace:	7818      	ldrb	r0, [r3, #0]
 8048ad0:	f003 fb07 	bl	804c0e2 <RegionRxConfig>
 8048ad4:	b140      	cbz	r0, 8048ae8 <RxWindowSetup.constprop.6+0x34>
        Radio.Rx( MacCtx.NvmCtx->MacParams.MaxRxWindow );
 8048ad6:	f8d4 2488 	ldr.w	r2, [r4, #1160]	; 0x488
 8048ada:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8048adc:	f8d2 0104 	ldr.w	r0, [r2, #260]	; 0x104
 8048ae0:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8048ae2:	7ceb      	ldrb	r3, [r5, #19]
 8048ae4:	f884 3484 	strb.w	r3, [r4, #1156]	; 0x484
}
 8048ae8:	bd70      	pop	{r4, r5, r6, pc}
 8048aea:	bf00      	nop
 8048aec:	08051928 	.word	0x08051928
 8048af0:	2000a7cc 	.word	0x2000a7cc

08048af4 <OnRxWindow1TimerEvent>:
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8048af4:	480e      	ldr	r0, [pc, #56]	; (8048b30 <OnRxWindow1TimerEvent+0x3c>)
 8048af6:	f890 3419 	ldrb.w	r3, [r0, #1049]	; 0x419
 8048afa:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
    MacCtx.RxWindow1Config.DrOffset = MacCtx.NvmCtx->MacParams.Rx1DrOffset;
 8048afe:	f8d0 3488 	ldr.w	r3, [r0, #1160]	; 0x488
 8048b02:	f893 2119 	ldrb.w	r2, [r3, #281]	; 0x119
 8048b06:	f880 23bf 	strb.w	r2, [r0, #959]	; 0x3bf
    MacCtx.RxWindow1Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8048b0a:	f893 212d 	ldrb.w	r2, [r3, #301]	; 0x12d
 8048b0e:	f880 23cc 	strb.w	r2, [r0, #972]	; 0x3cc
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8048b12:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8048b16:	f880 33cd 	strb.w	r3, [r0, #973]	; 0x3cd
    MacCtx.RxWindow1Config.RxContinuous = false;
 8048b1a:	2300      	movs	r3, #0
 8048b1c:	f880 33ce 	strb.w	r3, [r0, #974]	; 0x3ce
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8048b20:	f880 33cf 	strb.w	r3, [r0, #975]	; 0x3cf
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8048b24:	f500 716f 	add.w	r1, r0, #956	; 0x3bc
 8048b28:	f500 7061 	add.w	r0, r0, #900	; 0x384
 8048b2c:	f7ff bfc2 	b.w	8048ab4 <RxWindowSetup.constprop.6>
 8048b30:	2000a7cc 	.word	0x2000a7cc

08048b34 <OnRxWindow2TimerEvent>:
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8048b34:	4811      	ldr	r0, [pc, #68]	; (8048b7c <OnRxWindow2TimerEvent+0x48>)
 8048b36:	f890 3484 	ldrb.w	r3, [r0, #1156]	; 0x484
 8048b3a:	b1eb      	cbz	r3, 8048b78 <OnRxWindow2TimerEvent+0x44>
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8048b3c:	f890 3419 	ldrb.w	r3, [r0, #1049]	; 0x419
 8048b40:	f880 33d0 	strb.w	r3, [r0, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 8048b44:	f8d0 3488 	ldr.w	r3, [r0, #1160]	; 0x488
 8048b48:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8048b4c:	f8c0 23d4 	str.w	r2, [r0, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8048b50:	f893 212d 	ldrb.w	r2, [r3, #301]	; 0x12d
 8048b54:	f880 23e0 	strb.w	r2, [r0, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8048b58:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8048b5c:	f880 33e1 	strb.w	r3, [r0, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8048b60:	2300      	movs	r3, #0
 8048b62:	f880 33e2 	strb.w	r3, [r0, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8048b66:	2301      	movs	r3, #1
 8048b68:	f880 33e3 	strb.w	r3, [r0, #995]	; 0x3e3
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8048b6c:	f500 7174 	add.w	r1, r0, #976	; 0x3d0
 8048b70:	f500 7067 	add.w	r0, r0, #924	; 0x39c
 8048b74:	f7ff bf9e 	b.w	8048ab4 <RxWindowSetup.constprop.6>
}
 8048b78:	4770      	bx	lr
 8048b7a:	bf00      	nop
 8048b7c:	2000a7cc 	.word	0x2000a7cc

08048b80 <ProcessMacCommands.isra.1.constprop.7>:
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8048b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8048b84:	b091      	sub	sp, #68	; 0x44
    uint8_t status = 0;
 8048b86:	2700      	movs	r7, #0
                if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8048b88:	4ec4      	ldr	r6, [pc, #784]	; (8048e9c <ProcessMacCommands.isra.1.constprop.7+0x31c>)
    uint8_t status = 0;
 8048b8a:	f88d 7015 	strb.w	r7, [sp, #21]
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8048b8e:	4605      	mov	r5, r0
 8048b90:	468a      	mov	sl, r1
 8048b92:	4693      	mov	fp, r2
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8048b94:	f8ad 7018 	strh.w	r7, [sp, #24]
 8048b98:	46b8      	mov	r8, r7
    while( macIndex < commandsSize )
 8048b9a:	45d0      	cmp	r8, sl
 8048b9c:	d302      	bcc.n	8048ba4 <ProcessMacCommands.isra.1.constprop.7+0x24>
}
 8048b9e:	b011      	add	sp, #68	; 0x44
 8048ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch( payload[macIndex++] )
 8048ba4:	f815 3008 	ldrb.w	r3, [r5, r8]
 8048ba8:	f108 0401 	add.w	r4, r8, #1
 8048bac:	3b02      	subs	r3, #2
 8048bae:	b2e4      	uxtb	r4, r4
 8048bb0:	2b11      	cmp	r3, #17
 8048bb2:	d8f4      	bhi.n	8048b9e <ProcessMacCommands.isra.1.constprop.7+0x1e>
 8048bb4:	a201      	add	r2, pc, #4	; (adr r2, 8048bbc <ProcessMacCommands.isra.1.constprop.7+0x3c>)
 8048bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8048bba:	bf00      	nop
 8048bbc:	08048c05 	.word	0x08048c05
 8048bc0:	08048c35 	.word	0x08048c35
 8048bc4:	08048cfb 	.word	0x08048cfb
 8048bc8:	08048d27 	.word	0x08048d27
 8048bcc:	08048dc5 	.word	0x08048dc5
 8048bd0:	08048ded 	.word	0x08048ded
 8048bd4:	08048e59 	.word	0x08048e59
 8048bd8:	08048ea1 	.word	0x08048ea1
 8048bdc:	08048f39 	.word	0x08048f39
 8048be0:	08048b9f 	.word	0x08048b9f
 8048be4:	08048b9f 	.word	0x08048b9f
 8048be8:	08048f91 	.word	0x08048f91
 8048bec:	08048b9f 	.word	0x08048b9f
 8048bf0:	08048b9f 	.word	0x08048b9f
 8048bf4:	08049033 	.word	0x08049033
 8048bf8:	08049045 	.word	0x08049045
 8048bfc:	08049089 	.word	0x08049089
 8048c00:	080490b3 	.word	0x080490b3
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8048c04:	2003      	movs	r0, #3
 8048c06:	f002 fc79 	bl	804b4fc <LoRaMacConfirmQueueIsCmdActive>
 8048c0a:	b188      	cbz	r0, 8048c30 <ProcessMacCommands.isra.1.constprop.7+0xb0>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8048c0c:	2103      	movs	r1, #3
 8048c0e:	2000      	movs	r0, #0
 8048c10:	f002 fc28 	bl	804b464 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8048c14:	5d2b      	ldrb	r3, [r5, r4]
 8048c16:	f886 345c 	strb.w	r3, [r6, #1116]	; 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8048c1a:	f108 0403 	add.w	r4, r8, #3
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8048c1e:	f108 0802 	add.w	r8, r8, #2
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8048c22:	fa5f f888 	uxtb.w	r8, r8
 8048c26:	b2e4      	uxtb	r4, r4
 8048c28:	f815 3008 	ldrb.w	r3, [r5, r8]
 8048c2c:	f886 345d 	strb.w	r3, [r6, #1117]	; 0x45d
                uint8_t eirpDwellTime = payload[macIndex++];
 8048c30:	46a0      	mov	r8, r4
 8048c32:	e7b2      	b.n	8048b9a <ProcessMacCommands.isra.1.constprop.7+0x1a>
                int8_t linkAdrDatarate = DR_0;
 8048c34:	2300      	movs	r3, #0
 8048c36:	f88d 3016 	strb.w	r3, [sp, #22]
                int8_t linkAdrTxPower = TX_POWER_0;
 8048c3a:	f88d 3017 	strb.w	r3, [sp, #23]
                uint8_t linkAdrNbRep = 0;
 8048c3e:	f88d 301c 	strb.w	r3, [sp, #28]
                uint8_t linkAdrNbBytesParsed = 0;
 8048c42:	f88d 3020 	strb.w	r3, [sp, #32]
                if( adrBlockFound == false )
 8048c46:	2f00      	cmp	r7, #0
 8048c48:	d14e      	bne.n	8048ce8 <ProcessMacCommands.isra.1.constprop.7+0x168>
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8048c4a:	1e63      	subs	r3, r4, #1
 8048c4c:	442b      	add	r3, r5
 8048c4e:	930d      	str	r3, [sp, #52]	; 0x34
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8048c50:	f10a 0301 	add.w	r3, sl, #1
 8048c54:	1b1c      	subs	r4, r3, r4
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 8048c56:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8048c5a:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 8048c5e:	f893 20f2 	ldrb.w	r2, [r3, #242]	; 0xf2
 8048c62:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
                    linkAdrReq.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8048c66:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 8048c6a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
                    linkAdrReq.CurrentDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8048c6e:	f893 20f9 	ldrb.w	r2, [r3, #249]	; 0xf9
 8048c72:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
                    linkAdrReq.CurrentTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8048c76:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
 8048c7a:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
                    linkAdrReq.CurrentNbRep = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 8048c7e:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 8048c82:	f88d 203d 	strb.w	r2, [sp, #61]	; 0x3d
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 8048c86:	f8d3 21d0 	ldr.w	r2, [r3, #464]	; 0x1d0
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 8048c8a:	7818      	ldrb	r0, [r3, #0]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 8048c8c:	920c      	str	r2, [sp, #48]	; 0x30
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 8048c8e:	ab08      	add	r3, sp, #32
 8048c90:	9301      	str	r3, [sp, #4]
 8048c92:	ab07      	add	r3, sp, #28
 8048c94:	9300      	str	r3, [sp, #0]
 8048c96:	f10d 0216 	add.w	r2, sp, #22
 8048c9a:	f10d 0317 	add.w	r3, sp, #23
 8048c9e:	a90c      	add	r1, sp, #48	; 0x30
 8048ca0:	f003 fa37 	bl	804c112 <RegionLinkAdrReq>
 8048ca4:	f88d 0015 	strb.w	r0, [sp, #21]
                    if( ( status & 0x07 ) == 0x07 )
 8048ca8:	f000 0007 	and.w	r0, r0, #7
 8048cac:	2807      	cmp	r0, #7
 8048cae:	d10d      	bne.n	8048ccc <ProcessMacCommands.isra.1.constprop.7+0x14c>
                        MacCtx.NvmCtx->MacParams.ChannelsDatarate = linkAdrDatarate;
 8048cb0:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
 8048cb4:	f89d 2016 	ldrb.w	r2, [sp, #22]
 8048cb8:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
                        MacCtx.NvmCtx->MacParams.ChannelsTxPower = linkAdrTxPower;
 8048cbc:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8048cc0:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
                        MacCtx.NvmCtx->MacParams.ChannelsNbTrans = linkAdrNbRep;
 8048cc4:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8048cc8:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8048ccc:	2700      	movs	r7, #0
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8048cce:	f04f 0905 	mov.w	r9, #5
 8048cd2:	b2fb      	uxtb	r3, r7
 8048cd4:	f89d 4020 	ldrb.w	r4, [sp, #32]
 8048cd8:	fbb4 f2f9 	udiv	r2, r4, r9
 8048cdc:	4293      	cmp	r3, r2
 8048cde:	f107 0701 	add.w	r7, r7, #1
 8048ce2:	d303      	bcc.n	8048cec <ProcessMacCommands.isra.1.constprop.7+0x16c>
                    macIndex += linkAdrNbBytesParsed - 1;
 8048ce4:	4444      	add	r4, r8
 8048ce6:	b2e4      	uxtb	r4, r4
 8048ce8:	2701      	movs	r7, #1
 8048cea:	e7a1      	b.n	8048c30 <ProcessMacCommands.isra.1.constprop.7+0xb0>
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8048cec:	2201      	movs	r2, #1
 8048cee:	f10d 0115 	add.w	r1, sp, #21
 8048cf2:	2003      	movs	r0, #3
 8048cf4:	f002 fa6e 	bl	804b1d4 <LoRaMacCommandsAddCmd>
 8048cf8:	e7eb      	b.n	8048cd2 <ProcessMacCommands.isra.1.constprop.7+0x152>
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 8048cfa:	5d2b      	ldrb	r3, [r5, r4]
 8048cfc:	f8d6 1488 	ldr.w	r1, [r6, #1160]	; 0x488
 8048d00:	f003 030f 	and.w	r3, r3, #15
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 8048d04:	2201      	movs	r2, #1
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 8048d06:	f881 313c 	strb.w	r3, [r1, #316]	; 0x13c
 8048d0a:	f108 0802 	add.w	r8, r8, #2
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 8048d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8048d12:	f8a1 31c2 	strh.w	r3, [r1, #450]	; 0x1c2
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 8048d16:	fa5f f888 	uxtb.w	r8, r8
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8048d1a:	2200      	movs	r2, #0
 8048d1c:	a906      	add	r1, sp, #24
 8048d1e:	2004      	movs	r0, #4
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8048d20:	f002 fa58 	bl	804b1d4 <LoRaMacCommandsAddCmd>
 8048d24:	e0b7      	b.n	8048e96 <ProcessMacCommands.isra.1.constprop.7+0x316>
                status = 0x07;
 8048d26:	2307      	movs	r3, #7
 8048d28:	f88d 3015 	strb.w	r3, [sp, #21]
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8048d2c:	5d2b      	ldrb	r3, [r5, r4]
 8048d2e:	f3c3 1202 	ubfx	r2, r3, #4, #3
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8048d32:	f003 030f 	and.w	r3, r3, #15
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8048d36:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8048d3a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8048d3e:	f108 0204 	add.w	r2, r8, #4
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8048d42:	f108 0303 	add.w	r3, r8, #3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8048d46:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8048d48:	b2d2      	uxtb	r2, r2
 8048d4a:	f108 0405 	add.w	r4, r8, #5
                macIndex++;
 8048d4e:	f108 0802 	add.w	r8, r8, #2
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8048d52:	5ce9      	ldrb	r1, [r5, r3]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8048d54:	5cab      	ldrb	r3, [r5, r2]
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8048d56:	fa5f f888 	uxtb.w	r8, r8
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8048d5a:	041b      	lsls	r3, r3, #16
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8048d5c:	f815 2008 	ldrb.w	r2, [r5, r8]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8048d60:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8048d64:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency *= 100;
 8048d66:	2264      	movs	r2, #100	; 0x64
 8048d68:	4353      	muls	r3, r2
 8048d6a:	930d      	str	r3, [sp, #52]	; 0x34
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 8048d6c:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
 8048d70:	a90c      	add	r1, sp, #48	; 0x30
 8048d72:	7818      	ldrb	r0, [r3, #0]
 8048d74:	f003 f9dd 	bl	804c132 <RegionRxParamSetupReq>
                if( ( status & 0x07 ) == 0x07 )
 8048d78:	f000 0307 	and.w	r3, r0, #7
 8048d7c:	2b07      	cmp	r3, #7
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8048d7e:	b2e4      	uxtb	r4, r4
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 8048d80:	f88d 0015 	strb.w	r0, [sp, #21]
                if( ( status & 0x07 ) == 0x07 )
 8048d84:	d110      	bne.n	8048da8 <ProcessMacCommands.isra.1.constprop.7+0x228>
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8048d86:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
 8048d8a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8048d8e:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
                    MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8048d92:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8048d96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8048d98:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
                    MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8048d9c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
                    MacCtx.NvmCtx->MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8048da0:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 8048da4:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                macCmdPayload[0] = status;
 8048da8:	a910      	add	r1, sp, #64	; 0x40
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8048daa:	2201      	movs	r2, #1
                macCmdPayload[0] = status;
 8048dac:	f801 0d28 	strb.w	r0, [r1, #-40]!
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8048db0:	2005      	movs	r0, #5
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8048db2:	f002 fa0f 	bl	804b1d4 <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8048db6:	f896 3485 	ldrb.w	r3, [r6, #1157]	; 0x485
 8048dba:	f043 0310 	orr.w	r3, r3, #16
 8048dbe:	f886 3485 	strb.w	r3, [r6, #1157]	; 0x485
 8048dc2:	e735      	b.n	8048c30 <ProcessMacCommands.isra.1.constprop.7+0xb0>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8048dc4:	f8d6 334c 	ldr.w	r3, [r6, #844]	; 0x34c
 8048dc8:	b173      	cbz	r3, 8048de8 <ProcessMacCommands.isra.1.constprop.7+0x268>
 8048dca:	681b      	ldr	r3, [r3, #0]
 8048dcc:	b163      	cbz	r3, 8048de8 <ProcessMacCommands.isra.1.constprop.7+0x268>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8048dce:	4798      	blx	r3
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8048dd0:	f00b 033f 	and.w	r3, fp, #63	; 0x3f
                macCmdPayload[0] = batteryLevel;
 8048dd4:	f88d 0018 	strb.w	r0, [sp, #24]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8048dd8:	f88d 3019 	strb.w	r3, [sp, #25]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8048ddc:	2202      	movs	r2, #2
 8048dde:	a906      	add	r1, sp, #24
 8048de0:	2006      	movs	r0, #6
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8048de2:	f002 f9f7 	bl	804b1d4 <LoRaMacCommandsAddCmd>
 8048de6:	e723      	b.n	8048c30 <ProcessMacCommands.isra.1.constprop.7+0xb0>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8048de8:	20ff      	movs	r0, #255	; 0xff
 8048dea:	e7f1      	b.n	8048dd0 <ProcessMacCommands.isra.1.constprop.7+0x250>
                status = 0x03;
 8048dec:	2303      	movs	r3, #3
 8048dee:	f88d 3015 	strb.w	r3, [sp, #21]
                newChannelReq.ChannelId = payload[macIndex++];
 8048df2:	5d2b      	ldrb	r3, [r5, r4]
 8048df4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                newChannelReq.NewChannel = &chParam;
 8048df8:	ab0c      	add	r3, sp, #48	; 0x30
 8048dfa:	9308      	str	r3, [sp, #32]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8048dfc:	f108 0204 	add.w	r2, r8, #4
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8048e00:	f108 0303 	add.w	r3, r8, #3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8048e04:	b2db      	uxtb	r3, r3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8048e06:	b2d2      	uxtb	r2, r2
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8048e08:	5ce9      	ldrb	r1, [r5, r3]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8048e0a:	5cab      	ldrb	r3, [r5, r2]
                newChannelReq.ChannelId = payload[macIndex++];
 8048e0c:	f108 0202 	add.w	r2, r8, #2
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8048e10:	b2d2      	uxtb	r2, r2
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8048e12:	041b      	lsls	r3, r3, #16
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8048e14:	5caa      	ldrb	r2, [r5, r2]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8048e16:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8048e1a:	4313      	orrs	r3, r2
                chParam.DrRange.Value = payload[macIndex++];
 8048e1c:	f108 0406 	add.w	r4, r8, #6
                chParam.Frequency *= 100;
 8048e20:	2264      	movs	r2, #100	; 0x64
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8048e22:	f108 0805 	add.w	r8, r8, #5
                chParam.Frequency *= 100;
 8048e26:	4353      	muls	r3, r2
                chParam.DrRange.Value = payload[macIndex++];
 8048e28:	fa5f f888 	uxtb.w	r8, r8
                chParam.Frequency *= 100;
 8048e2c:	930c      	str	r3, [sp, #48]	; 0x30
                chParam.Rx1Frequency = 0;
 8048e2e:	2300      	movs	r3, #0
 8048e30:	930d      	str	r3, [sp, #52]	; 0x34
                chParam.DrRange.Value = payload[macIndex++];
 8048e32:	f815 3008 	ldrb.w	r3, [r5, r8]
 8048e36:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 8048e3a:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
 8048e3e:	a908      	add	r1, sp, #32
 8048e40:	7818      	ldrb	r0, [r3, #0]
 8048e42:	f003 f97d 	bl	804c140 <RegionNewChannelReq>
                macCmdPayload[0] = status;
 8048e46:	a910      	add	r1, sp, #64	; 0x40
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 8048e48:	f88d 0015 	strb.w	r0, [sp, #21]
                macCmdPayload[0] = status;
 8048e4c:	f801 0d28 	strb.w	r0, [r1, #-40]!
                chParam.DrRange.Value = payload[macIndex++];
 8048e50:	b2e4      	uxtb	r4, r4
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8048e52:	2201      	movs	r2, #1
 8048e54:	2007      	movs	r0, #7
 8048e56:	e7c4      	b.n	8048de2 <ProcessMacCommands.isra.1.constprop.7+0x262>
                uint8_t delay = payload[macIndex++] & 0x0F;
 8048e58:	5d2b      	ldrb	r3, [r5, r4]
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 8048e5a:	f8d6 1488 	ldr.w	r1, [r6, #1160]	; 0x488
                    delay++;
 8048e5e:	f013 020f 	ands.w	r2, r3, #15
 8048e62:	bf08      	it	eq
 8048e64:	2201      	moveq	r2, #1
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 8048e66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8048e6a:	4353      	muls	r3, r2
 8048e6c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 8048e70:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8048e74:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8048e78:	2200      	movs	r2, #0
 8048e7a:	a906      	add	r1, sp, #24
 8048e7c:	2008      	movs	r0, #8
 8048e7e:	f002 f9a9 	bl	804b1d4 <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8048e82:	f896 3485 	ldrb.w	r3, [r6, #1157]	; 0x485
                uint8_t delay = payload[macIndex++] & 0x0F;
 8048e86:	f108 0802 	add.w	r8, r8, #2
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8048e8a:	f043 0310 	orr.w	r3, r3, #16
                uint8_t delay = payload[macIndex++] & 0x0F;
 8048e8e:	fa5f f888 	uxtb.w	r8, r8
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8048e92:	f886 3485 	strb.w	r3, [r6, #1157]	; 0x485
                uint8_t delay = payload[macIndex++] & 0x0F;
 8048e96:	4644      	mov	r4, r8
 8048e98:	e6ca      	b.n	8048c30 <ProcessMacCommands.isra.1.constprop.7+0xb0>
 8048e9a:	bf00      	nop
 8048e9c:	2000a7cc 	.word	0x2000a7cc
                uint8_t eirpDwellTime = payload[macIndex++];
 8048ea0:	5d2b      	ldrb	r3, [r5, r4]
                txParamSetupReq.UplinkDwellTime = 0;
 8048ea2:	2200      	movs	r2, #0
 8048ea4:	f88d 201c 	strb.w	r2, [sp, #28]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8048ea8:	f013 0220 	ands.w	r2, r3, #32
                    txParamSetupReq.DownlinkDwellTime = 1;
 8048eac:	bf18      	it	ne
 8048eae:	2201      	movne	r2, #1
 8048eb0:	f88d 201d 	strb.w	r2, [sp, #29]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8048eb4:	06da      	lsls	r2, r3, #27
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8048eb6:	f003 030f 	and.w	r3, r3, #15
                    txParamSetupReq.UplinkDwellTime = 1;
 8048eba:	bf48      	it	mi
 8048ebc:	2201      	movmi	r2, #1
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8048ebe:	f88d 301e 	strb.w	r3, [sp, #30]
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 8048ec2:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
                    txParamSetupReq.UplinkDwellTime = 1;
 8048ec6:	bf48      	it	mi
 8048ec8:	f88d 201c 	strbmi.w	r2, [sp, #28]
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 8048ecc:	a907      	add	r1, sp, #28
 8048ece:	7818      	ldrb	r0, [r3, #0]
 8048ed0:	f003 f93d 	bl	804c14e <RegionTxParamSetupReq>
                uint8_t eirpDwellTime = payload[macIndex++];
 8048ed4:	f108 0802 	add.w	r8, r8, #2
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 8048ed8:	3001      	adds	r0, #1
                uint8_t eirpDwellTime = payload[macIndex++];
 8048eda:	fa5f f888 	uxtb.w	r8, r8
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 8048ede:	d0da      	beq.n	8048e96 <ProcessMacCommands.isra.1.constprop.7+0x316>
                    MacCtx.NvmCtx->MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8048ee0:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
 8048ee4:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8048ee8:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
                    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8048eec:	f89d 101d 	ldrb.w	r1, [sp, #29]
 8048ef0:	f883 112d 	strb.w	r1, [r3, #301]	; 0x12d
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8048ef4:	f89d 101e 	ldrb.w	r1, [sp, #30]
 8048ef8:	487e      	ldr	r0, [pc, #504]	; (80490f4 <ProcessMacCommands.isra.1.constprop.7+0x574>)
 8048efa:	5c41      	ldrb	r1, [r0, r1]
 8048efc:	ee07 1a90 	vmov	s15, r1
 8048f00:	eef8 7a67 	vcvt.f32.u32	s15, s15
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8048f04:	2102      	movs	r1, #2
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8048f06:	edc3 7a4c 	vstr	s15, [r3, #304]	; 0x130
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8048f0a:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8048f0e:	f88d 1020 	strb.w	r1, [sp, #32]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8048f12:	7818      	ldrb	r0, [r3, #0]
 8048f14:	a908      	add	r1, sp, #32
 8048f16:	f003 f8a2 	bl	804c05e <RegionGetPhyParam>
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 8048f1a:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8048f1e:	900c      	str	r0, [sp, #48]	; 0x30
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 8048f20:	f993 20f9 	ldrsb.w	r2, [r3, #249]	; 0xf9
 8048f24:	b240      	sxtb	r0, r0
 8048f26:	4290      	cmp	r0, r2
 8048f28:	bfb8      	it	lt
 8048f2a:	4610      	movlt	r0, r2
 8048f2c:	f883 00f9 	strb.w	r0, [r3, #249]	; 0xf9
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8048f30:	2200      	movs	r2, #0
 8048f32:	a906      	add	r1, sp, #24
 8048f34:	2009      	movs	r0, #9
 8048f36:	e6f3      	b.n	8048d20 <ProcessMacCommands.isra.1.constprop.7+0x1a0>
                status = 0x03;
 8048f38:	2303      	movs	r3, #3
 8048f3a:	f88d 3015 	strb.w	r3, [sp, #21]
                dlChannelReq.ChannelId = payload[macIndex++];
 8048f3e:	5d2b      	ldrb	r3, [r5, r4]
 8048f40:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8048f44:	f108 0204 	add.w	r2, r8, #4
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8048f48:	f108 0303 	add.w	r3, r8, #3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8048f4c:	b2db      	uxtb	r3, r3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8048f4e:	b2d2      	uxtb	r2, r2
 8048f50:	f108 0405 	add.w	r4, r8, #5
                dlChannelReq.ChannelId = payload[macIndex++];
 8048f54:	f108 0802 	add.w	r8, r8, #2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8048f58:	5ce9      	ldrb	r1, [r5, r3]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8048f5a:	5cab      	ldrb	r3, [r5, r2]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8048f5c:	fa5f f888 	uxtb.w	r8, r8
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8048f60:	041b      	lsls	r3, r3, #16
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8048f62:	f815 2008 	ldrb.w	r2, [r5, r8]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8048f66:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8048f6a:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency *= 100;
 8048f6c:	2264      	movs	r2, #100	; 0x64
 8048f6e:	4353      	muls	r3, r2
 8048f70:	930d      	str	r3, [sp, #52]	; 0x34
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 8048f72:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
 8048f76:	a90c      	add	r1, sp, #48	; 0x30
 8048f78:	7818      	ldrb	r0, [r3, #0]
 8048f7a:	f003 f8ef 	bl	804c15c <RegionDlChannelReq>
                macCmdPayload[0] = status;
 8048f7e:	a910      	add	r1, sp, #64	; 0x40
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 8048f80:	f88d 0015 	strb.w	r0, [sp, #21]
                macCmdPayload[0] = status;
 8048f84:	f801 0d28 	strb.w	r0, [r1, #-40]!
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8048f88:	b2e4      	uxtb	r4, r4
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8048f8a:	2201      	movs	r2, #1
 8048f8c:	200a      	movs	r0, #10
 8048f8e:	e710      	b.n	8048db2 <ProcessMacCommands.isra.1.constprop.7+0x232>
                SysTime_t sysTime = { 0 };
 8048f90:	2300      	movs	r3, #0
 8048f92:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8048f96:	f108 0203 	add.w	r2, r8, #3
                gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8048f9a:	f108 0302 	add.w	r3, r8, #2
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8048f9e:	b2db      	uxtb	r3, r3
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8048fa0:	b2d2      	uxtb	r2, r2
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8048fa2:	5ce9      	ldrb	r1, [r5, r3]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8048fa4:	5cab      	ldrb	r3, [r5, r2]
                gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8048fa6:	5d2a      	ldrb	r2, [r5, r4]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8048fa8:	041b      	lsls	r3, r3, #16
 8048faa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8048fae:	4313      	orrs	r3, r2
 8048fb0:	f108 0204 	add.w	r2, r8, #4
                gpsEpochTime.SubSeconds = payload[macIndex++];
 8048fb4:	f108 0406 	add.w	r4, r8, #6
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8048fb8:	b2d2      	uxtb	r2, r2
 8048fba:	f108 0805 	add.w	r8, r8, #5
                gpsEpochTime.SubSeconds = payload[macIndex++];
 8048fbe:	fa5f f888 	uxtb.w	r8, r8
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8048fc2:	5caa      	ldrb	r2, [r5, r2]
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8048fc4:	f815 1008 	ldrb.w	r1, [r5, r8]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8048fc8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8048fcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8048fd0:	434a      	muls	r2, r1
                sysTimeCurrent = SysTimeGet( );
 8048fd2:	f10d 0930 	add.w	r9, sp, #48	; 0x30
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8048fd6:	1212      	asrs	r2, r2, #8
                sysTimeCurrent = SysTimeGet( );
 8048fd8:	4648      	mov	r0, r9
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8048fda:	9303      	str	r3, [sp, #12]
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8048fdc:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
                sysTimeCurrent = SysTimeGet( );
 8048fe0:	f004 fd61 	bl	804daa6 <SysTimeGet>
                sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8048fe4:	9b03      	ldr	r3, [sp, #12]
 8048fe6:	f103 5396 	add.w	r3, r3, #314572800	; 0x12c00000
 8048fea:	f503 13a9 	add.w	r3, r3, #1384448	; 0x152000
 8048fee:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
                sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8048ff2:	9308      	str	r3, [sp, #32]
 8048ff4:	f8d6 3340 	ldr.w	r3, [r6, #832]	; 0x340
 8048ff8:	9300      	str	r3, [sp, #0]
 8048ffa:	f10d 0820 	add.w	r8, sp, #32
 8048ffe:	f8d6 333c 	ldr.w	r3, [r6, #828]	; 0x33c
 8049002:	e898 0006 	ldmia.w	r8, {r1, r2}
 8049006:	a80a      	add	r0, sp, #40	; 0x28
 8049008:	f004 fd10 	bl	804da2c <SysTimeSub>
 804900c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 804900e:	9300      	str	r3, [sp, #0]
 8049010:	e899 0006 	ldmia.w	r9, {r1, r2}
 8049014:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8049016:	4640      	mov	r0, r8
 8049018:	f004 fcec 	bl	804d9f4 <SysTimeAdd>
                SysTimeSet( sysTime );
 804901c:	e898 0003 	ldmia.w	r8, {r0, r1}
 8049020:	f004 fd20 	bl	804da64 <SysTimeSet>
                LoRaMacClassBDeviceTimeAns( );
 8049024:	f002 f8a3 	bl	804b16e <LoRaMacClassBDeviceTimeAns>
                MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8049028:	2301      	movs	r3, #1
                gpsEpochTime.SubSeconds = payload[macIndex++];
 804902a:	b2e4      	uxtb	r4, r4
                MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 804902c:	f886 343c 	strb.w	r3, [r6, #1084]	; 0x43c
 8049030:	e5fe      	b.n	8048c30 <ProcessMacCommands.isra.1.constprop.7+0xb0>
                if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8049032:	f896 3484 	ldrb.w	r3, [r6, #1156]	; 0x484
 8049036:	3b04      	subs	r3, #4
 8049038:	2b01      	cmp	r3, #1
 804903a:	f67f adf9 	bls.w	8048c30 <ProcessMacCommands.isra.1.constprop.7+0xb0>
                    LoRaMacClassBPingSlotInfoAns( );
 804903e:	f002 f892 	bl	804b166 <LoRaMacClassBPingSlotInfoAns>
 8049042:	e5f5      	b.n	8048c30 <ProcessMacCommands.isra.1.constprop.7+0xb0>
                frequency = ( uint32_t )payload[macIndex++];
 8049044:	f108 0202 	add.w	r2, r8, #2
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8049048:	b2d2      	uxtb	r2, r2
                frequency = ( uint32_t )payload[macIndex++];
 804904a:	5d29      	ldrb	r1, [r5, r4]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 804904c:	5ca8      	ldrb	r0, [r5, r2]
 804904e:	f108 0203 	add.w	r2, r8, #3
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8049052:	b2d2      	uxtb	r2, r2
                datarate = payload[macIndex++] & 0x0F;
 8049054:	f108 0405 	add.w	r4, r8, #5
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8049058:	5cab      	ldrb	r3, [r5, r2]
 804905a:	f108 0804 	add.w	r8, r8, #4
                datarate = payload[macIndex++] & 0x0F;
 804905e:	fa5f f888 	uxtb.w	r8, r8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8049062:	041b      	lsls	r3, r3, #16
 8049064:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                datarate = payload[macIndex++] & 0x0F;
 8049068:	f815 0008 	ldrb.w	r0, [r5, r8]
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 804906c:	430b      	orrs	r3, r1
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 804906e:	2164      	movs	r1, #100	; 0x64
 8049070:	4359      	muls	r1, r3
 8049072:	f000 000f 	and.w	r0, r0, #15
 8049076:	f002 f877 	bl	804b168 <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 804907a:	a910      	add	r1, sp, #64	; 0x40
                datarate = payload[macIndex++] & 0x0F;
 804907c:	b2e4      	uxtb	r4, r4
                macCmdPayload[0] = status;
 804907e:	f801 0d28 	strb.w	r0, [r1, #-40]!
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8049082:	2201      	movs	r2, #1
 8049084:	2011      	movs	r0, #17
 8049086:	e6ac      	b.n	8048de2 <ProcessMacCommands.isra.1.constprop.7+0x262>
                beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8049088:	f108 0302 	add.w	r3, r8, #2
                beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 804908c:	b2db      	uxtb	r3, r3
                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 804908e:	4a1a      	ldr	r2, [pc, #104]	; (80490f8 <ProcessMacCommands.isra.1.constprop.7+0x578>)
                beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8049090:	5ce8      	ldrb	r0, [r5, r3]
 8049092:	5d2b      	ldrb	r3, [r5, r4]
                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8049094:	6812      	ldr	r2, [r2, #0]
                beaconTimingChannel = payload[macIndex++];
 8049096:	f108 0404 	add.w	r4, r8, #4
                beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 804909a:	f108 0803 	add.w	r8, r8, #3
                beaconTimingChannel = payload[macIndex++];
 804909e:	fa5f f888 	uxtb.w	r8, r8
                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 80490a2:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80490a6:	f815 1008 	ldrb.w	r1, [r5, r8]
                beaconTimingChannel = payload[macIndex++];
 80490aa:	b2e4      	uxtb	r4, r4
                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 80490ac:	f002 f85e 	bl	804b16c <LoRaMacClassBBeaconTimingAns>
 80490b0:	e5be      	b.n	8048c30 <ProcessMacCommands.isra.1.constprop.7+0xb0>
                    frequency = ( uint32_t )payload[macIndex++];
 80490b2:	5d28      	ldrb	r0, [r5, r4]
 80490b4:	f108 0302 	add.w	r3, r8, #2
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80490b8:	f108 0404 	add.w	r4, r8, #4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 80490bc:	f108 0803 	add.w	r8, r8, #3
 80490c0:	b2db      	uxtb	r3, r3
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80490c2:	fa5f f888 	uxtb.w	r8, r8
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 80490c6:	5cea      	ldrb	r2, [r5, r3]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80490c8:	f815 3008 	ldrb.w	r3, [r5, r8]
 80490cc:	041b      	lsls	r3, r3, #16
 80490ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80490d2:	4303      	orrs	r3, r0
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 80490d4:	2064      	movs	r0, #100	; 0x64
 80490d6:	4358      	muls	r0, r3
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80490d8:	b2e4      	uxtb	r4, r4
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 80490da:	f002 f849 	bl	804b170 <LoRaMacClassBBeaconFreqReq>
 80490de:	b130      	cbz	r0, 80490ee <ProcessMacCommands.isra.1.constprop.7+0x56e>
                        macCmdPayload[0] = 1;
 80490e0:	2301      	movs	r3, #1
 80490e2:	f88d 3018 	strb.w	r3, [sp, #24]
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80490e6:	2201      	movs	r2, #1
 80490e8:	a906      	add	r1, sp, #24
 80490ea:	2013      	movs	r0, #19
 80490ec:	e679      	b.n	8048de2 <ProcessMacCommands.isra.1.constprop.7+0x262>
                        macCmdPayload[0] = 0;
 80490ee:	f88d 0018 	strb.w	r0, [sp, #24]
 80490f2:	e7f8      	b.n	80490e6 <ProcessMacCommands.isra.1.constprop.7+0x566>
 80490f4:	08051cd0 	.word	0x08051cd0
 80490f8:	2000de00 	.word	0x2000de00

080490fc <LoRaMacIsBusy>:
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80490fc:	4b06      	ldr	r3, [pc, #24]	; (8049118 <LoRaMacIsBusy+0x1c>)
 80490fe:	f8d3 2344 	ldr.w	r2, [r3, #836]	; 0x344
 8049102:	b932      	cbnz	r2, 8049112 <LoRaMacIsBusy+0x16>
 8049104:	f893 0486 	ldrb.w	r0, [r3, #1158]	; 0x486
 8049108:	f110 30ff 	adds.w	r0, r0, #4294967295
 804910c:	bf18      	it	ne
 804910e:	2001      	movne	r0, #1
 8049110:	4770      	bx	lr
    return true;
 8049112:	2001      	movs	r0, #1
}
 8049114:	4770      	bx	lr
 8049116:	bf00      	nop
 8049118:	2000a7cc 	.word	0x2000a7cc

0804911c <PrepareFrame>:
{
 804911c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8049120:	f8bd b030 	ldrh.w	fp, [sp, #48]	; 0x30
    MacCtx.PktBufferLen = 0;
 8049124:	4e58      	ldr	r6, [pc, #352]	; (8049288 <PrepareFrame+0x16c>)
 8049126:	2500      	movs	r5, #0
        fBufferSize = 0;
 8049128:	42ab      	cmp	r3, r5
 804912a:	bf08      	it	eq
 804912c:	46ab      	moveq	fp, r5
 804912e:	469a      	mov	sl, r3
{
 8049130:	4680      	mov	r8, r0
    PRINTF("PREPARE FRAME\r\n");
 8049132:	4856      	ldr	r0, [pc, #344]	; (804928c <PrepareFrame+0x170>)
    MacCtx.PktBufferLen = 0;
 8049134:	80b5      	strh	r5, [r6, #4]
{
 8049136:	460f      	mov	r7, r1
 8049138:	4691      	mov	r9, r2
    MacCtx.NodeAckRequested = false;
 804913a:	f886 5418 	strb.w	r5, [r6, #1048]	; 0x418
    size_t macCmdsSize = 0;
 804913e:	e9cd 5500 	strd	r5, r5, [sp]
    PRINTF("PREPARE FRAME\r\n");
 8049142:	f004 fe0f 	bl	804dd64 <TraceSend>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8049146:	465a      	mov	r2, fp
 8049148:	4651      	mov	r1, sl
 804914a:	f506 709e 	add.w	r0, r6, #316	; 0x13c
 804914e:	f004 fe6e 	bl	804de2e <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8049152:	fa5f f28b 	uxtb.w	r2, fp
 8049156:	f886 223b 	strb.w	r2, [r6, #571]	; 0x23b
    MacCtx.PktBuffer[0] = macHdr->Value;
 804915a:	f898 3000 	ldrb.w	r3, [r8]
 804915e:	71b3      	strb	r3, [r6, #6]
    switch( macHdr->Bits.MType )
 8049160:	f898 1000 	ldrb.w	r1, [r8]
 8049164:	0949      	lsrs	r1, r1, #5
 8049166:	2904      	cmp	r1, #4
 8049168:	4634      	mov	r4, r6
 804916a:	d037      	beq.n	80491dc <PrepareFrame+0xc0>
 804916c:	2907      	cmp	r1, #7
 804916e:	d079      	beq.n	8049264 <PrepareFrame+0x148>
 8049170:	2902      	cmp	r1, #2
 8049172:	f040 8085 	bne.w	8049280 <PrepareFrame+0x164>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8049176:	2304      	movs	r3, #4
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8049178:	4d45      	ldr	r5, [pc, #276]	; (8049290 <PrepareFrame+0x174>)
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 804917a:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 804917e:	23ff      	movs	r3, #255	; 0xff
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8049180:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8049184:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8049188:	f898 3000 	ldrb.w	r3, [r8]
 804918c:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 8049190:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8049194:	f884 912c 	strb.w	r9, [r4, #300]	; 0x12c
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 8049198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804919a:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 804919e:	783b      	ldrb	r3, [r7, #0]
 80491a0:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80491a4:	4668      	mov	r0, sp
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 80491a6:	f505 739b 	add.w	r3, r5, #310	; 0x136
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 80491aa:	f884 2134 	strb.w	r2, [r4, #308]	; 0x134
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 80491ae:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80491b2:	f002 fb8f 	bl	804b8d4 <LoRaMacCryptoGetFCntUp>
 80491b6:	2800      	cmp	r0, #0
 80491b8:	d164      	bne.n	8049284 <PrepareFrame+0x168>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 80491ba:	9b00      	ldr	r3, [sp, #0]
            MacCtx.McpsConfirm.NbRetries = 0;
 80491bc:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
            MacCtx.McpsConfirm.AckReceived = false;
 80491c0:	f884 0444 	strb.w	r0, [r4, #1092]	; 0x444
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80491c4:	a801      	add	r0, sp, #4
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 80491c6:	f8a4 311a 	strh.w	r3, [r4, #282]	; 0x11a
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 80491ca:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80491ce:	f002 f8af 	bl	804b330 <LoRaMacCommandsGetSizeSerializedCmds>
 80491d2:	b138      	cbz	r0, 80491e4 <PrepareFrame+0xc8>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80491d4:	2013      	movs	r0, #19
}
 80491d6:	b003      	add	sp, #12
 80491d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MacCtx.NodeAckRequested = true;
 80491dc:	2301      	movs	r3, #1
 80491de:	f886 3418 	strb.w	r3, [r6, #1048]	; 0x418
 80491e2:	e7c8      	b.n	8049176 <PrepareFrame+0x5a>
            if( macCmdsSize > 0 )
 80491e4:	9b01      	ldr	r3, [sp, #4]
 80491e6:	b90b      	cbnz	r3, 80491ec <PrepareFrame+0xd0>
    return LORAMAC_STATUS_OK;
 80491e8:	2000      	movs	r0, #0
 80491ea:	e7f4      	b.n	80491d6 <PrepareFrame+0xba>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( MacCtx.NvmCtx->MacParams.ChannelsDatarate );
 80491ec:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 80491f0:	f993 00f9 	ldrsb.w	r0, [r3, #249]	; 0xf9
 80491f4:	f7ff f9f6 	bl	80485e4 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80491f8:	f894 323b 	ldrb.w	r3, [r4, #571]	; 0x23b
 80491fc:	b1eb      	cbz	r3, 804923a <PrepareFrame+0x11e>
 80491fe:	9b01      	ldr	r3, [sp, #4]
 8049200:	2b0f      	cmp	r3, #15
 8049202:	d80f      	bhi.n	8049224 <PrepareFrame+0x108>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8049204:	f505 728b 	add.w	r2, r5, #278	; 0x116
 8049208:	a901      	add	r1, sp, #4
 804920a:	200f      	movs	r0, #15
 804920c:	f002 f89c 	bl	804b348 <LoRaMacCommandsSerializeCmds>
 8049210:	2800      	cmp	r0, #0
 8049212:	d1df      	bne.n	80491d4 <PrepareFrame+0xb8>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8049214:	783b      	ldrb	r3, [r7, #0]
 8049216:	9a01      	ldr	r2, [sp, #4]
 8049218:	f362 0303 	bfi	r3, r2, #0, #4
 804921c:	703b      	strb	r3, [r7, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 804921e:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
 8049222:	e7d8      	b.n	80491d6 <PrepareFrame+0xba>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8049224:	f8d4 2488 	ldr.w	r2, [r4, #1160]	; 0x488
 8049228:	a901      	add	r1, sp, #4
 804922a:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 804922e:	f002 f88b 	bl	804b348 <LoRaMacCommandsSerializeCmds>
 8049232:	2800      	cmp	r0, #0
 8049234:	d1ce      	bne.n	80491d4 <PrepareFrame+0xb8>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8049236:	200a      	movs	r0, #10
 8049238:	e7cd      	b.n	80491d6 <PrepareFrame+0xba>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 804923a:	f8d4 2488 	ldr.w	r2, [r4, #1160]	; 0x488
 804923e:	a901      	add	r1, sp, #4
 8049240:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 8049244:	f002 f880 	bl	804b348 <LoRaMacCommandsSerializeCmds>
 8049248:	2800      	cmp	r0, #0
 804924a:	d1c3      	bne.n	80491d4 <PrepareFrame+0xb8>
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 804924c:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8049250:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 8049254:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8049258:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 804925c:	9b01      	ldr	r3, [sp, #4]
 804925e:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 8049262:	e7b8      	b.n	80491d6 <PrepareFrame+0xba>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8049264:	f1ba 0f00 	cmp.w	sl, #0
 8049268:	d0be      	beq.n	80491e8 <PrepareFrame+0xcc>
 804926a:	2a00      	cmp	r2, #0
 804926c:	d0bc      	beq.n	80491e8 <PrepareFrame+0xcc>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 804926e:	4651      	mov	r1, sl
 8049270:	1df0      	adds	r0, r6, #7
 8049272:	f004 fddc 	bl	804de2e <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8049276:	f896 323b 	ldrb.w	r3, [r6, #571]	; 0x23b
 804927a:	3301      	adds	r3, #1
 804927c:	80b3      	strh	r3, [r6, #4]
 804927e:	e7b3      	b.n	80491e8 <PrepareFrame+0xcc>
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8049280:	2002      	movs	r0, #2
 8049282:	e7a8      	b.n	80491d6 <PrepareFrame+0xba>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8049284:	2012      	movs	r0, #18
 8049286:	e7a6      	b.n	80491d6 <PrepareFrame+0xba>
 8049288:	2000a7cc 	.word	0x2000a7cc
 804928c:	08051f38 	.word	0x08051f38
 8049290:	2000a7d2 	.word	0x2000a7d2

08049294 <SendFrameOnChannel>:
{
 8049294:	b530      	push	{r4, r5, lr}
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8049296:	4c38      	ldr	r4, [pc, #224]	; (8049378 <SendFrameOnChannel+0xe4>)
{
 8049298:	b087      	sub	sp, #28
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 804929a:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    txConfig.Channel = channel;
 804929e:	f88d 0008 	strb.w	r0, [sp, #8]
    int8_t txPower = 0;
 80492a2:	2200      	movs	r2, #0
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80492a4:	f893 10f9 	ldrb.w	r1, [r3, #249]	; 0xf9
    int8_t txPower = 0;
 80492a8:	f88d 2007 	strb.w	r2, [sp, #7]
    txConfig.TxPower = TX_POWER_0/*MacCtx.NvmCtx->MacParams.ChannelsTxPower*/;
 80492ac:	f88d 200a 	strb.w	r2, [sp, #10]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 80492b0:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 80492b4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80492b8:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 80492ba:	88a3      	ldrh	r3, [r4, #4]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80492bc:	f88d 1009 	strb.w	r1, [sp, #9]
{
 80492c0:	4605      	mov	r5, r0
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 80492c2:	9203      	str	r2, [sp, #12]
    txConfig.PktLen = MacCtx.PktBufferLen;
 80492c4:	f8ad 3014 	strh.w	r3, [sp, #20]
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80492c8:	f001 ff3c 	bl	804b144 <LoRaMacClassBIsBeaconExpected>
 80492cc:	2800      	cmp	r0, #0
 80492ce:	d151      	bne.n	8049374 <SendFrameOnChannel+0xe0>
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 80492d0:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 80492d4:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80492d8:	2b01      	cmp	r3, #1
 80492da:	d10b      	bne.n	80492f4 <SendFrameOnChannel+0x60>
        if( LoRaMacClassBIsPingExpected( ) == true )
 80492dc:	f001 ff34 	bl	804b148 <LoRaMacClassBIsPingExpected>
 80492e0:	b110      	cbz	r0, 80492e8 <SendFrameOnChannel+0x54>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 80492e2:	200f      	movs	r0, #15
}
 80492e4:	b007      	add	sp, #28
 80492e6:	bd30      	pop	{r4, r5, pc}
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80492e8:	f001 ff30 	bl	804b14c <LoRaMacClassBIsMulticastExpected>
 80492ec:	2800      	cmp	r0, #0
 80492ee:	d1f8      	bne.n	80492e2 <SendFrameOnChannel+0x4e>
            LoRaMacClassBStopRxSlots( );
 80492f0:	f001 ff42 	bl	804b178 <LoRaMacClassBStopRxSlots>
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 80492f4:	f8d4 0488 	ldr.w	r0, [r4, #1160]	; 0x488
 80492f8:	4b20      	ldr	r3, [pc, #128]	; (804937c <SendFrameOnChannel+0xe8>)
 80492fa:	7800      	ldrb	r0, [r0, #0]
 80492fc:	f10d 0207 	add.w	r2, sp, #7
 8049300:	a902      	add	r1, sp, #8
 8049302:	f002 fef7 	bl	804c0f4 <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8049306:	2301      	movs	r3, #1
 8049308:	f884 3441 	strb.w	r3, [r4, #1089]	; 0x441
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 804930c:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8049310:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 8049314:	f884 3442 	strb.w	r3, [r4, #1090]	; 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 8049318:	f89d 3007 	ldrb.w	r3, [sp, #7]
 804931c:	f884 3443 	strb.w	r3, [r4, #1091]	; 0x443
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8049320:	f8d4 341c 	ldr.w	r3, [r4, #1052]	; 0x41c
    MacCtx.McpsConfirm.Channel = channel;
 8049324:	f8c4 5450 	str.w	r5, [r4, #1104]	; 0x450
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8049328:	f8c4 3448 	str.w	r3, [r4, #1096]	; 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 804932c:	f8c4 3458 	str.w	r3, [r4, #1112]	; 0x458
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8049330:	f001 ff0e 	bl	804b150 <LoRaMacClassBIsBeaconModeActive>
 8049334:	b9b0      	cbnz	r0, 8049364 <SendFrameOnChannel+0xd0>
    LoRaMacClassBHaltBeaconing( );
 8049336:	f001 ff0e 	bl	804b156 <LoRaMacClassBHaltBeaconing>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 804933a:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 804933e:	f043 0302 	orr.w	r3, r3, #2
 8049342:	f8c4 3344 	str.w	r3, [r4, #836]	; 0x344
    if( MacCtx.NodeAckRequested == false )
 8049346:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 804934a:	b923      	cbnz	r3, 8049356 <SendFrameOnChannel+0xc2>
        MacCtx.ChannelsNbTransCounter++;
 804934c:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 8049350:	3301      	adds	r3, #1
 8049352:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8049356:	4b0a      	ldr	r3, [pc, #40]	; (8049380 <SendFrameOnChannel+0xec>)
 8049358:	480a      	ldr	r0, [pc, #40]	; (8049384 <SendFrameOnChannel+0xf0>)
 804935a:	7921      	ldrb	r1, [r4, #4]
 804935c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804935e:	4798      	blx	r3
    return LORAMAC_STATUS_OK;
 8049360:	2000      	movs	r0, #0
 8049362:	e7bf      	b.n	80492e4 <SendFrameOnChannel+0x50>
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8049364:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
 8049368:	f001 ff04 	bl	804b174 <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 804936c:	2800      	cmp	r0, #0
 804936e:	d0e2      	beq.n	8049336 <SendFrameOnChannel+0xa2>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8049370:	2010      	movs	r0, #16
 8049372:	e7b7      	b.n	80492e4 <SendFrameOnChannel+0x50>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8049374:	200e      	movs	r0, #14
 8049376:	e7b5      	b.n	80492e4 <SendFrameOnChannel+0x50>
 8049378:	2000a7cc 	.word	0x2000a7cc
 804937c:	2000abe8 	.word	0x2000abe8
 8049380:	08051928 	.word	0x08051928
 8049384:	2000a7d2 	.word	0x2000a7d2

08049388 <ScheduleTx>:
{
 8049388:	b570      	push	{r4, r5, r6, lr}
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
 804938a:	4c80      	ldr	r4, [pc, #512]	; (804958c <ScheduleTx+0x204>)
    TimerTime_t dutyCycleTimeOff = 0;
 804938c:	2300      	movs	r3, #0
{
 804938e:	b088      	sub	sp, #32
 8049390:	4605      	mov	r5, r0
    PRINTF("ScheduleTx\r\n");
 8049392:	487f      	ldr	r0, [pc, #508]	; (8049590 <ScheduleTx+0x208>)
    size_t macCmdsSize = 0;
 8049394:	e9cd 3302 	strd	r3, r3, [sp, #8]
    PRINTF("ScheduleTx\r\n");
 8049398:	f004 fce4 	bl	804dd64 <TraceSend>
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
 804939c:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 80493a0:	f893 21d4 	ldrb.w	r2, [r3, #468]	; 0x1d4
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
 80493a4:	f893 113e 	ldrb.w	r1, [r3, #318]	; 0x13e
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 80493a8:	2a00      	cmp	r2, #0
 80493aa:	d15c      	bne.n	8049466 <ScheduleTx+0xde>
        calcBackOff.Joined = true;
 80493ac:	f88d 2014 	strb.w	r2, [sp, #20]
    calcBackOff.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 80493b0:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
    calcBackOff.Channel = channel;
 80493b4:	f88d 1017 	strb.w	r1, [sp, #23]
    calcBackOff.ElapsedTime = TimerGetElapsedTime( MacCtx.NvmCtx->InitializationTime );
 80493b8:	f8d3 01cc 	ldr.w	r0, [r3, #460]	; 0x1cc
    calcBackOff.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 80493bc:	f88d 2016 	strb.w	r2, [sp, #22]
    calcBackOff.ElapsedTime = TimerGetElapsedTime( MacCtx.NvmCtx->InitializationTime );
 80493c0:	f004 fc86 	bl	804dcd0 <TimerGetElapsedTime>
    calcBackOff.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80493c4:	f8d4 341c 	ldr.w	r3, [r4, #1052]	; 0x41c
 80493c8:	9307      	str	r3, [sp, #28]
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 80493ca:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
    calcBackOff.ElapsedTime = TimerGetElapsedTime( MacCtx.NvmCtx->InitializationTime );
 80493ce:	9006      	str	r0, [sp, #24]
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 80493d0:	075b      	lsls	r3, r3, #29
    calcBackOff.LastTxIsJoinRequest = false;
 80493d2:	f04f 0000 	mov.w	r0, #0
 80493d6:	f88d 0015 	strb.w	r0, [sp, #21]
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 80493da:	d505      	bpl.n	80493e8 <ScheduleTx+0x60>
 80493dc:	f002 f88e 	bl	804b4fc <LoRaMacConfirmQueueIsCmdActive>
 80493e0:	b110      	cbz	r0, 80493e8 <ScheduleTx+0x60>
        calcBackOff.LastTxIsJoinRequest = true;
 80493e2:	2301      	movs	r3, #1
 80493e4:	f88d 3015 	strb.w	r3, [sp, #21]
    RegionCalcBackOff( MacCtx.NvmCtx->Region, &calcBackOff );
 80493e8:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 80493ec:	a905      	add	r1, sp, #20
 80493ee:	7818      	ldrb	r0, [r3, #0]
 80493f0:	f002 fec4 	bl	804c17c <RegionCalcBackOff>
    MacCtx.NvmCtx->AggregatedTimeOff = ( MacCtx.TxTimeOnAir * MacCtx.NvmCtx->AggregatedDCycle - MacCtx.TxTimeOnAir );
 80493f4:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 80493f8:	f8b3 21c2 	ldrh.w	r2, [r3, #450]	; 0x1c2
 80493fc:	1e51      	subs	r1, r2, #1
 80493fe:	f8d4 241c 	ldr.w	r2, [r4, #1052]	; 0x41c
 8049402:	434a      	muls	r2, r1
 8049404:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 8049408:	9205      	str	r2, [sp, #20]
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 804940a:	f893 20f9 	ldrb.w	r2, [r3, #249]	; 0xf9
 804940e:	f88d 201c 	strb.w	r2, [sp, #28]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 8049412:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
 8049416:	f88d 201e 	strb.w	r2, [sp, #30]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 804941a:	f893 21d4 	ldrb.w	r2, [r3, #468]	; 0x1d4
 804941e:	bb22      	cbnz	r2, 804946a <ScheduleTx+0xe2>
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &dutyCycleTimeOff, &MacCtx.NvmCtx->AggregatedTimeOff );
 8049420:	7818      	ldrb	r0, [r3, #0]
        nextChan.Joined = true;
 8049422:	f88d 201d 	strb.w	r2, [sp, #29]
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &dutyCycleTimeOff, &MacCtx.NvmCtx->AggregatedTimeOff );
 8049426:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 804942a:	f853 2c04 	ldr.w	r2, [r3, #-4]
 804942e:	9206      	str	r2, [sp, #24]
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &dutyCycleTimeOff, &MacCtx.NvmCtx->AggregatedTimeOff );
 8049430:	9300      	str	r3, [sp, #0]
 8049432:	4a58      	ldr	r2, [pc, #352]	; (8049594 <ScheduleTx+0x20c>)
 8049434:	ab02      	add	r3, sp, #8
 8049436:	a905      	add	r1, sp, #20
 8049438:	f002 fea6 	bl	804c188 <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 804943c:	b1b8      	cbz	r0, 804946e <ScheduleTx+0xe6>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 804943e:	280b      	cmp	r0, #11
 8049440:	d10f      	bne.n	8049462 <ScheduleTx+0xda>
 8049442:	b175      	cbz	r5, 8049462 <ScheduleTx+0xda>
            if( dutyCycleTimeOff != 0 )
 8049444:	9902      	ldr	r1, [sp, #8]
 8049446:	b159      	cbz	r1, 8049460 <ScheduleTx+0xd8>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8049448:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
                TimerSetValue( &MacCtx.TxDelayedTimer, dutyCycleTimeOff );
 804944c:	4852      	ldr	r0, [pc, #328]	; (8049598 <ScheduleTx+0x210>)
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 804944e:	f043 0320 	orr.w	r3, r3, #32
 8049452:	f8c4 3344 	str.w	r3, [r4, #836]	; 0x344
                TimerSetValue( &MacCtx.TxDelayedTimer, dutyCycleTimeOff );
 8049456:	f004 fc23 	bl	804dca0 <TimerSetValue>
                TimerStart( &MacCtx.TxDelayedTimer );
 804945a:	484f      	ldr	r0, [pc, #316]	; (8049598 <ScheduleTx+0x210>)
 804945c:	f004 fb86 	bl	804db6c <TimerStart>
            return LORAMAC_STATUS_OK;
 8049460:	2000      	movs	r0, #0
}
 8049462:	b008      	add	sp, #32
 8049464:	bd70      	pop	{r4, r5, r6, pc}
        calcBackOff.Joined = true;
 8049466:	2201      	movs	r2, #1
 8049468:	e7a0      	b.n	80493ac <ScheduleTx+0x24>
        nextChan.Joined = true;
 804946a:	2201      	movs	r2, #1
 804946c:	e7d8      	b.n	8049420 <ScheduleTx+0x98>
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 804946e:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
 8049472:	4d4a      	ldr	r5, [pc, #296]	; (804959c <ScheduleTx+0x214>)
 8049474:	780e      	ldrb	r6, [r1, #0]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region, MacCtx.NvmCtx->MacParams.DownlinkDwellTime, MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 8049476:	f991 3119 	ldrsb.w	r3, [r1, #281]	; 0x119
 804947a:	f991 20f9 	ldrsb.w	r2, [r1, #249]	; 0xf9
 804947e:	f891 112d 	ldrb.w	r1, [r1, #301]	; 0x12d
 8049482:	4630      	mov	r0, r6
 8049484:	f002 fe96 	bl	804c1b4 <RegionApplyDrOffset>
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 8049488:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 804948c:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
 8049490:	9500      	str	r5, [sp, #0]
 8049492:	b241      	sxtb	r1, r0
 8049494:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8049498:	4630      	mov	r0, r6
 804949a:	f002 fe13 	bl	804c0c4 <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 804949e:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 80494a2:	3514      	adds	r5, #20
 80494a4:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
 80494a8:	f993 1120 	ldrsb.w	r1, [r3, #288]	; 0x120
 80494ac:	7818      	ldrb	r0, [r3, #0]
 80494ae:	9500      	str	r5, [sp, #0]
 80494b0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80494b4:	f002 fe06 	bl	804c0c4 <RegionComputeRxWindowParameters>
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 80494b8:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 80494bc:	f893 21d4 	ldrb.w	r2, [r3, #468]	; 0x1d4
 80494c0:	b9e2      	cbnz	r2, 80494fc <ScheduleTx+0x174>
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80494c2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80494c6:	f8d4 13c8 	ldr.w	r1, [r4, #968]	; 0x3c8
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80494ca:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80494ce:	440a      	add	r2, r1
 80494d0:	f8c4 23b4 	str.w	r2, [r4, #948]	; 0x3b4
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80494d4:	f8d4 23dc 	ldr.w	r2, [r4, #988]	; 0x3dc
    LoRaMacStatus_t retval = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 80494d8:	f894 6419 	ldrb.w	r6, [r4, #1049]	; 0x419
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80494dc:	4413      	add	r3, r2
 80494de:	f8c4 33b8 	str.w	r3, [r4, #952]	; 0x3b8
    LoRaMacStatus_t retval = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 80494e2:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 80494e6:	f993 50f9 	ldrsb.w	r5, [r3, #249]	; 0xf9
    uint32_t fCntUp = 0;
 80494ea:	2300      	movs	r3, #0
 80494ec:	9304      	str	r3, [sp, #16]
    switch( MacCtx.TxMsg.Type )
 80494ee:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
 80494f2:	b313      	cbz	r3, 804953a <ScheduleTx+0x1b2>
 80494f4:	2b04      	cmp	r3, #4
 80494f6:	d02b      	beq.n	8049550 <ScheduleTx+0x1c8>
            return LORAMAC_STATUS_PARAMETER_INVALID;
 80494f8:	2003      	movs	r0, #3
 80494fa:	e7b2      	b.n	8049462 <ScheduleTx+0xda>
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80494fc:	a803      	add	r0, sp, #12
 80494fe:	f001 ff17 	bl	804b330 <LoRaMacCommandsGetSizeSerializedCmds>
 8049502:	2800      	cmp	r0, #0
 8049504:	d13d      	bne.n	8049582 <ScheduleTx+0x1fa>
        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 8049506:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 804950a:	f894 523b 	ldrb.w	r5, [r4, #571]	; 0x23b
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 804950e:	f993 00f9 	ldrsb.w	r0, [r3, #249]	; 0xf9
        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 8049512:	f89d 600c 	ldrb.w	r6, [sp, #12]
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8049516:	f7ff f865 	bl	80485e4 <GetMaxAppPayloadWithoutFOptsLength>
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 804951a:	4435      	add	r5, r6
 804951c:	b280      	uxth	r0, r0
 804951e:	42a8      	cmp	r0, r5
 8049520:	d331      	bcc.n	8049586 <ScheduleTx+0x1fe>
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8049522:	f8d4 2488 	ldr.w	r2, [r4, #1160]	; 0x488
 8049526:	f8d4 13c8 	ldr.w	r1, [r4, #968]	; 0x3c8
 804952a:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 804952e:	440b      	add	r3, r1
 8049530:	f8c4 33b4 	str.w	r3, [r4, #948]	; 0x3b4
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8049534:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
 8049538:	e7cc      	b.n	80494d4 <ScheduleTx+0x14c>
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 804953a:	4819      	ldr	r0, [pc, #100]	; (80495a0 <ScheduleTx+0x218>)
 804953c:	f002 fa22 	bl	804b984 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8049540:	b9d8      	cbnz	r0, 804957a <ScheduleTx+0x1f2>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8049542:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
 8049546:	80a3      	strh	r3, [r4, #4]
    return SendFrameOnChannel( 0/*MacCtx.Channel  JP*/);
 8049548:	2000      	movs	r0, #0
 804954a:	f7ff fea3 	bl	8049294 <SendFrameOnChannel>
 804954e:	e788      	b.n	8049462 <ScheduleTx+0xda>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8049550:	a804      	add	r0, sp, #16
 8049552:	f002 f9bf 	bl	804b8d4 <LoRaMacCryptoGetFCntUp>
 8049556:	b990      	cbnz	r0, 804957e <ScheduleTx+0x1f6>
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8049558:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 804955c:	b91b      	cbnz	r3, 8049566 <ScheduleTx+0x1de>
 804955e:	f894 3416 	ldrb.w	r3, [r4, #1046]	; 0x416
 8049562:	2b01      	cmp	r3, #1
 8049564:	d902      	bls.n	804956c <ScheduleTx+0x1e4>
                fCntUp -= 1;
 8049566:	9b04      	ldr	r3, [sp, #16]
 8049568:	3b01      	subs	r3, #1
 804956a:	9304      	str	r3, [sp, #16]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 804956c:	4b0c      	ldr	r3, [pc, #48]	; (80495a0 <ScheduleTx+0x218>)
 804956e:	9804      	ldr	r0, [sp, #16]
 8049570:	4632      	mov	r2, r6
 8049572:	b2e9      	uxtb	r1, r5
 8049574:	f002 fa36 	bl	804b9e4 <LoRaMacCryptoSecureMessage>
 8049578:	e7e2      	b.n	8049540 <ScheduleTx+0x1b8>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 804957a:	2011      	movs	r0, #17
 804957c:	e771      	b.n	8049462 <ScheduleTx+0xda>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 804957e:	2012      	movs	r0, #18
 8049580:	e76f      	b.n	8049462 <ScheduleTx+0xda>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8049582:	2013      	movs	r0, #19
 8049584:	e76d      	b.n	8049462 <ScheduleTx+0xda>
            return LORAMAC_STATUS_LENGTH_ERROR;
 8049586:	2008      	movs	r0, #8
 8049588:	e76b      	b.n	8049462 <ScheduleTx+0xda>
 804958a:	bf00      	nop
 804958c:	2000a7cc 	.word	0x2000a7cc
 8049590:	08051f48 	.word	0x08051f48
 8049594:	2000abe5 	.word	0x2000abe5
 8049598:	2000ab38 	.word	0x2000ab38
 804959c:	2000ab88 	.word	0x2000ab88
 80495a0:	2000a8d8 	.word	0x2000a8d8

080495a4 <OnTxDelayedTimerEvent>:
{
 80495a4:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 80495a6:	4c12      	ldr	r4, [pc, #72]	; (80495f0 <OnTxDelayedTimerEvent+0x4c>)
 80495a8:	f504 705b 	add.w	r0, r4, #876	; 0x36c
 80495ac:	f004 fb50 	bl	804dc50 <TimerStop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80495b0:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
    switch( ScheduleTx( true ) )
 80495b4:	2001      	movs	r0, #1
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80495b6:	f023 0320 	bic.w	r3, r3, #32
 80495ba:	f8c4 3344 	str.w	r3, [r4, #836]	; 0x344
    switch( ScheduleTx( true ) )
 80495be:	f7ff fee3 	bl	8049388 <ScheduleTx>
 80495c2:	b1a0      	cbz	r0, 80495ee <OnTxDelayedTimerEvent+0x4a>
 80495c4:	280b      	cmp	r0, #11
 80495c6:	d012      	beq.n	80495ee <OnTxDelayedTimerEvent+0x4a>
            MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80495c8:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 80495cc:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 80495d0:	f884 3442 	strb.w	r3, [r4, #1090]	; 0x442
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 80495d4:	2009      	movs	r0, #9
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 80495d6:	f894 3416 	ldrb.w	r3, [r4, #1046]	; 0x416
 80495da:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 80495de:	f884 0441 	strb.w	r0, [r4, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 80495e2:	f001 ff73 	bl	804b4cc <LoRaMacConfirmQueueSetStatusCmn>
}
 80495e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            StopRetransmission( );
 80495ea:	f7fe bfb7 	b.w	804855c <StopRetransmission>
}
 80495ee:	bd10      	pop	{r4, pc}
 80495f0:	2000a7cc 	.word	0x2000a7cc

080495f4 <Send>:
{
 80495f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80495f8:	4d47      	ldr	r5, [pc, #284]	; (8049718 <Send+0x124>)
{
 80495fa:	4699      	mov	r9, r3
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80495fc:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
{
 8049600:	b08b      	sub	sp, #44	; 0x2c
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8049602:	f993 60f9 	ldrsb.w	r6, [r3, #249]	; 0xf9
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8049606:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 804960a:	9304      	str	r3, [sp, #16]
{
 804960c:	4604      	mov	r4, r0
    PRINTF("Send\r\n");
 804960e:	4843      	ldr	r0, [pc, #268]	; (804971c <Send+0x128>)
{
 8049610:	460f      	mov	r7, r1
 8049612:	4690      	mov	r8, r2
    PRINTF("Send\r\n");
 8049614:	f004 fba6 	bl	804dd64 <TraceSend>
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8049618:	f8d5 1488 	ldr.w	r1, [r5, #1160]	; 0x488
 804961c:	f891 31d4 	ldrb.w	r3, [r1, #468]	; 0x1d4
 8049620:	b93b      	cbnz	r3, 8049632 <Send+0x3e>
    	PRINTF("NO NETWORK\r\n");
 8049622:	483f      	ldr	r0, [pc, #252]	; (8049720 <Send+0x12c>)
 8049624:	f004 fb9e 	bl	804dd64 <TraceSend>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8049628:	2407      	movs	r4, #7
}
 804962a:	4620      	mov	r0, r4
 804962c:	b00b      	add	sp, #44	; 0x2c
 804962e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( MacCtx.NvmCtx->MaxDCycle == 0 )
 8049632:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
 8049636:	b90b      	cbnz	r3, 804963c <Send+0x48>
        MacCtx.NvmCtx->AggregatedTimeOff = 0;
 8049638:	f8c1 31c8 	str.w	r3, [r1, #456]	; 0x1c8
    fCtrl.Bits.Adr           = MacCtx.NvmCtx->AdrCtrlOn;
 804963c:	f891 20f2 	ldrb.w	r2, [r1, #242]	; 0xf2
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8049640:	f891 00f0 	ldrb.w	r0, [r1, #240]	; 0xf0
    fCtrl.Bits.Adr           = MacCtx.NvmCtx->AdrCtrlOn;
 8049644:	f04f 0300 	mov.w	r3, #0
 8049648:	f362 13c7 	bfi	r3, r2, #7, #1
 804964c:	f88d 300c 	strb.w	r3, [sp, #12]
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8049650:	2801      	cmp	r0, #1
 8049652:	b2db      	uxtb	r3, r3
        fCtrl.Bits.FPending      = 1;
 8049654:	bf08      	it	eq
 8049656:	f043 0310 	orreq.w	r3, r3, #16
        fCtrl.Bits.FPending      = 0;
 804965a:	f88d 300c 	strb.w	r3, [sp, #12]
    if( MacCtx.NvmCtx->SrvAckRequested == true )
 804965e:	f891 31c0 	ldrb.w	r3, [r1, #448]	; 0x1c0
 8049662:	b12b      	cbz	r3, 8049670 <Send+0x7c>
        fCtrl.Bits.Ack = 1;
 8049664:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8049668:	f043 0320 	orr.w	r3, r3, #32
 804966c:	f88d 300c 	strb.w	r3, [sp, #12]
    adrNext.Version = MacCtx.NvmCtx->Version;
 8049670:	f8d1 31d0 	ldr.w	r3, [r1, #464]	; 0x1d0
 8049674:	9305      	str	r3, [sp, #20]
    adrNext.UpdateChanMask = true;
 8049676:	2301      	movs	r3, #1
 8049678:	f88d 3018 	strb.w	r3, [sp, #24]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 804967c:	f8d1 30f4 	ldr.w	r3, [r1, #244]	; 0xf4
 8049680:	9307      	str	r3, [sp, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8049682:	f8b5 33f8 	ldrh.w	r3, [r5, #1016]	; 0x3f8
 8049686:	f8ad 3020 	strh.w	r3, [sp, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 804968a:	f8b5 33fa 	ldrh.w	r3, [r5, #1018]	; 0x3fa
 804968e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8049692:	f891 30f9 	ldrb.w	r3, [r1, #249]	; 0xf9
 8049696:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    adrNext.TxPower = TX_POWER_0 /*MacCtx.NvmCtx->MacParams.ChannelsTxPower*/;
 804969a:	2300      	movs	r3, #0
 804969c:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 80496a0:	f88d 2019 	strb.w	r2, [sp, #25]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80496a4:	f891 312c 	ldrb.w	r3, [r1, #300]	; 0x12c
 80496a8:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    adrNext.Region = MacCtx.NvmCtx->Region;
 80496ac:	460a      	mov	r2, r1
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 80496ae:	a805      	add	r0, sp, #20
    adrNext.Region = MacCtx.NvmCtx->Region;
 80496b0:	f812 3bf8 	ldrb.w	r3, [r2], #248
 80496b4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 80496b8:	31f9      	adds	r1, #249	; 0xf9
 80496ba:	ab04      	add	r3, sp, #16
 80496bc:	f001 fcca 	bl	804b054 <LoRaMacAdrCalcNext>
 80496c0:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80496c4:	a90a      	add	r1, sp, #40	; 0x28
 80496c6:	f360 1386 	bfi	r3, r0, #6, #1
 80496ca:	f801 3d1c 	strb.w	r3, [r1, #-28]!
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 80496ce:	4620      	mov	r0, r4
 80496d0:	f8cd 9000 	str.w	r9, [sp]
 80496d4:	4643      	mov	r3, r8
 80496d6:	463a      	mov	r2, r7
 80496d8:	f7ff fd20 	bl	804911c <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 80496dc:	4604      	mov	r4, r0
 80496de:	b108      	cbz	r0, 80496e4 <Send+0xf0>
 80496e0:	280a      	cmp	r0, #10
 80496e2:	d104      	bne.n	80496ee <Send+0xfa>
        status = ScheduleTx( false );
 80496e4:	2000      	movs	r0, #0
 80496e6:	f7ff fe4f 	bl	8049388 <ScheduleTx>
    if( status != LORAMAC_STATUS_OK )
 80496ea:	4604      	mov	r4, r0
 80496ec:	b138      	cbz	r0, 80496fe <Send+0x10a>
        MacCtx.NvmCtx->MacParams.ChannelsDatarate = datarate;
 80496ee:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
        MacCtx.NvmCtx->MacParams.ChannelsTxPower = txPower;
 80496f2:	2200      	movs	r2, #0
        MacCtx.NvmCtx->MacParams.ChannelsDatarate = datarate;
 80496f4:	f883 60f9 	strb.w	r6, [r3, #249]	; 0xf9
        MacCtx.NvmCtx->MacParams.ChannelsTxPower = txPower;
 80496f8:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
 80496fc:	e795      	b.n	804962a <Send+0x36>
        MacCtx.NvmCtx->SrvAckRequested = false;
 80496fe:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
        MacCtx.NvmCtx->AdrAckCounter = adrAckCounter;
 8049702:	9a04      	ldr	r2, [sp, #16]
        MacCtx.NvmCtx->SrvAckRequested = false;
 8049704:	f883 01c0 	strb.w	r0, [r3, #448]	; 0x1c0
        MacCtx.NvmCtx->AdrAckCounter = adrAckCounter;
 8049708:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 804970c:	f001 fde4 	bl	804b2d8 <LoRaMacCommandsRemoveNoneStickyCmds>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8049710:	2800      	cmp	r0, #0
 8049712:	bf18      	it	ne
 8049714:	2413      	movne	r4, #19
 8049716:	e788      	b.n	804962a <Send+0x36>
 8049718:	2000a7cc 	.word	0x2000a7cc
 804971c:	08051f55 	.word	0x08051f55
 8049720:	08051f5c 	.word	0x08051f5c

08049724 <SendReJoinReq>:
{
 8049724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch( joinReqType )
 8049726:	28ff      	cmp	r0, #255	; 0xff
    macHdr.Value = 0;
 8049728:	f04f 0400 	mov.w	r4, #0
{
 804972c:	4607      	mov	r7, r0
    macHdr.Value = 0;
 804972e:	4626      	mov	r6, r4
    switch( joinReqType )
 8049730:	d123      	bne.n	804977a <SendReJoinReq+0x56>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8049732:	4d13      	ldr	r5, [pc, #76]	; (8049780 <SendReJoinReq+0x5c>)
            SwitchClass( CLASS_A );
 8049734:	4620      	mov	r0, r4
 8049736:	f7ff f93d 	bl	80489b4 <SwitchClass>
            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 804973a:	f364 1647 	bfi	r6, r4, #5, #3
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 804973e:	1dab      	adds	r3, r5, #6
 8049740:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8049744:	f885 4108 	strb.w	r4, [r5, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8049748:	f885 7110 	strb.w	r7, [r5, #272]	; 0x110
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 804974c:	f885 6111 	strb.w	r6, [r5, #273]	; 0x111
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8049750:	f7fe fee4 	bl	804851c <SecureElementGetJoinEui>
 8049754:	2208      	movs	r2, #8
 8049756:	4601      	mov	r1, r0
 8049758:	f505 7089 	add.w	r0, r5, #274	; 0x112
 804975c:	f004 fb67 	bl	804de2e <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8049760:	f7fe fec6 	bl	80484f0 <SecureElementGetDevEui>
 8049764:	2208      	movs	r2, #8
 8049766:	4601      	mov	r1, r0
 8049768:	f505 708d 	add.w	r0, r5, #282	; 0x11a
 804976c:	f004 fb5f 	bl	804de2e <memcpy1>
            allowDelayedTx = false;
 8049770:	4620      	mov	r0, r4
}
 8049772:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    status = ScheduleTx( allowDelayedTx );
 8049776:	f7ff be07 	b.w	8049388 <ScheduleTx>
    bool allowDelayedTx = true;
 804977a:	2001      	movs	r0, #1
 804977c:	e7f9      	b.n	8049772 <SendReJoinReq+0x4e>
 804977e:	bf00      	nop
 8049780:	2000a7cc 	.word	0x2000a7cc

08049784 <SetTxContinuousWave>:
{
 8049784:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    continuousWave.Channel = MacCtx.Channel;
 8049786:	4c12      	ldr	r4, [pc, #72]	; (80497d0 <SetTxContinuousWave+0x4c>)
    continuousWave.Timeout = timeout;
 8049788:	f8ad 000c 	strh.w	r0, [sp, #12]
    continuousWave.Channel = MacCtx.Channel;
 804978c:	f894 3419 	ldrb.w	r3, [r4, #1049]	; 0x419
 8049790:	f88d 3000 	strb.w	r3, [sp]
    continuousWave.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8049794:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8049798:	f893 20f9 	ldrb.w	r2, [r3, #249]	; 0xf9
 804979c:	f88d 2001 	strb.w	r2, [sp, #1]
    continuousWave.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 80497a0:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
 80497a4:	f88d 2002 	strb.w	r2, [sp, #2]
    continuousWave.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 80497a8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 80497ac:	9201      	str	r2, [sp, #4]
    RegionSetContinuousWave( MacCtx.NvmCtx->Region, &continuousWave );
 80497ae:	7818      	ldrb	r0, [r3, #0]
    continuousWave.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 80497b0:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80497b4:	9202      	str	r2, [sp, #8]
    RegionSetContinuousWave( MacCtx.NvmCtx->Region, &continuousWave );
 80497b6:	4669      	mov	r1, sp
 80497b8:	f002 fcf6 	bl	804c1a8 <RegionSetContinuousWave>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80497bc:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
}
 80497c0:	2000      	movs	r0, #0
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80497c2:	f043 0302 	orr.w	r3, r3, #2
 80497c6:	f8c4 3344 	str.w	r3, [r4, #836]	; 0x344
}
 80497ca:	b004      	add	sp, #16
 80497cc:	bd10      	pop	{r4, pc}
 80497ce:	bf00      	nop
 80497d0:	2000a7cc 	.word	0x2000a7cc

080497d4 <SetTxContinuousWave1>:
    Radio.SetTxContinuousWave( frequency, power, timeout );
 80497d4:	4b08      	ldr	r3, [pc, #32]	; (80497f8 <SetTxContinuousWave1+0x24>)
{
 80497d6:	b510      	push	{r4, lr}
 80497d8:	460c      	mov	r4, r1
    Radio.SetTxContinuousWave( frequency, power, timeout );
 80497da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80497dc:	b251      	sxtb	r1, r2
 80497de:	4602      	mov	r2, r0
 80497e0:	4620      	mov	r0, r4
 80497e2:	4798      	blx	r3
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80497e4:	4a05      	ldr	r2, [pc, #20]	; (80497fc <SetTxContinuousWave1+0x28>)
 80497e6:	f8d2 3344 	ldr.w	r3, [r2, #836]	; 0x344
 80497ea:	f043 0302 	orr.w	r3, r3, #2
 80497ee:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
 80497f2:	2000      	movs	r0, #0
 80497f4:	bd10      	pop	{r4, pc}
 80497f6:	bf00      	nop
 80497f8:	08051928 	.word	0x08051928
 80497fc:	2000a7cc 	.word	0x2000a7cc

08049800 <GetCtxs>:
{
 8049800:	b537      	push	{r0, r1, r2, r4, r5, lr}
    Contexts.MacNvmCtx = &NvmMacCtx;
 8049802:	4d18      	ldr	r5, [pc, #96]	; (8049864 <GetCtxs+0x64>)
 8049804:	4c18      	ldr	r4, [pc, #96]	; (8049868 <GetCtxs+0x68>)
 8049806:	f205 438c 	addw	r3, r5, #1164	; 0x48c
 804980a:	6023      	str	r3, [r4, #0]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 804980c:	f104 0014 	add.w	r0, r4, #20
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
 8049810:	f44f 73ee 	mov.w	r3, #476	; 0x1dc
 8049814:	6063      	str	r3, [r4, #4]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 8049816:	f002 f857 	bl	804b8c8 <LoRaMacCryptoGetNvmCtx>
    GetNvmCtxParams_t params ={ 0 };
 804981a:	a902      	add	r1, sp, #8
 804981c:	2300      	movs	r3, #0
 804981e:	f841 3d04 	str.w	r3, [r1, #-4]!
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 8049822:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 8049826:	6120      	str	r0, [r4, #16]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 8049828:	7818      	ldrb	r0, [r3, #0]
 804982a:	f002 fc2e 	bl	804c08a <RegionGetNvmCtx>
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 804982e:	9b01      	ldr	r3, [sp, #4]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 8049830:	60a0      	str	r0, [r4, #8]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 8049832:	f104 001c 	add.w	r0, r4, #28
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 8049836:	60e3      	str	r3, [r4, #12]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 8049838:	f7fe fd6a 	bl	8048310 <SecureElementGetNvmCtx>
 804983c:	61a0      	str	r0, [r4, #24]
    Contexts.CommandsNvmCtx = LoRaMacCommandsGetNvmCtx( &Contexts.CommandsNvmCtxSize );
 804983e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8049842:	f001 fcc1 	bl	804b1c8 <LoRaMacCommandsGetNvmCtx>
 8049846:	6220      	str	r0, [r4, #32]
    Contexts.ClassBNvmCtx = LoRaMacClassBGetNvmCtx( &Contexts.ClassBNvmCtxSize );
 8049848:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 804984c:	f001 fc6c 	bl	804b128 <LoRaMacClassBGetNvmCtx>
 8049850:	62a0      	str	r0, [r4, #40]	; 0x28
    Contexts.ConfirmQueueNvmCtx = LoRaMacConfirmQueueGetNvmCtx( &Contexts.ConfirmQueueNvmCtxSize );
 8049852:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8049856:	f001 fdcf 	bl	804b3f8 <LoRaMacConfirmQueueGetNvmCtx>
 804985a:	6320      	str	r0, [r4, #48]	; 0x30
}
 804985c:	4620      	mov	r0, r4
 804985e:	b003      	add	sp, #12
 8049860:	bd30      	pop	{r4, r5, pc}
 8049862:	bf00      	nop
 8049864:	2000a7cc 	.word	0x2000a7cc
 8049868:	2000de10 	.word	0x2000de10

0804986c <RestoreCtxs>:
{
 804986c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( contexts == NULL )
 804986e:	4604      	mov	r4, r0
 8049870:	2800      	cmp	r0, #0
 8049872:	d033      	beq.n	80498dc <RestoreCtxs+0x70>
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8049874:	4d1d      	ldr	r5, [pc, #116]	; (80498ec <RestoreCtxs+0x80>)
 8049876:	f8d5 3344 	ldr.w	r3, [r5, #836]	; 0x344
 804987a:	2b01      	cmp	r3, #1
 804987c:	d130      	bne.n	80498e0 <RestoreCtxs+0x74>
    if( contexts->MacNvmCtx != NULL )
 804987e:	6801      	ldr	r1, [r0, #0]
 8049880:	b121      	cbz	r1, 804988c <RestoreCtxs+0x20>
        memcpy1( ( uint8_t* ) &NvmMacCtx, ( uint8_t* ) contexts->MacNvmCtx, contexts->MacNvmCtxSize );
 8049882:	8882      	ldrh	r2, [r0, #4]
 8049884:	f205 408c 	addw	r0, r5, #1164	; 0x48c
 8049888:	f004 fad1 	bl	804de2e <memcpy1>
    params.Type = INIT_TYPE_RESTORE_CTX;
 804988c:	2302      	movs	r3, #2
    params.NvmCtx = contexts->RegionNvmCtx;
 804988e:	a902      	add	r1, sp, #8
    params.Type = INIT_TYPE_RESTORE_CTX;
 8049890:	f88d 3004 	strb.w	r3, [sp, #4]
    params.NvmCtx = contexts->RegionNvmCtx;
 8049894:	68a3      	ldr	r3, [r4, #8]
 8049896:	f841 3d08 	str.w	r3, [r1, #-8]!
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 804989a:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804989e:	7818      	ldrb	r0, [r3, #0]
 80498a0:	f002 fbed 	bl	804c07e <RegionInitDefaults>
    if( SecureElementRestoreNvmCtx( contexts->SecureElementNvmCtx ) != SECURE_ELEMENT_SUCCESS )
 80498a4:	69a0      	ldr	r0, [r4, #24]
 80498a6:	f7fe fd25 	bl	80482f4 <SecureElementRestoreNvmCtx>
 80498aa:	b110      	cbz	r0, 80498b2 <RestoreCtxs+0x46>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80498ac:	2011      	movs	r0, #17
}
 80498ae:	b003      	add	sp, #12
 80498b0:	bd30      	pop	{r4, r5, pc}
    if( LoRaMacCryptoRestoreNvmCtx( contexts->CryptoNvmCtx ) != LORAMAC_CRYPTO_SUCCESS )
 80498b2:	6920      	ldr	r0, [r4, #16]
 80498b4:	f001 fffa 	bl	804b8ac <LoRaMacCryptoRestoreNvmCtx>
 80498b8:	2800      	cmp	r0, #0
 80498ba:	d1f7      	bne.n	80498ac <RestoreCtxs+0x40>
    if( LoRaMacCommandsRestoreNvmCtx( contexts->CommandsNvmCtx ) != LORAMAC_COMMANDS_SUCCESS )
 80498bc:	6a20      	ldr	r0, [r4, #32]
 80498be:	f001 fc75 	bl	804b1ac <LoRaMacCommandsRestoreNvmCtx>
 80498c2:	b978      	cbnz	r0, 80498e4 <RestoreCtxs+0x78>
    if( LoRaMacClassBRestoreNvmCtx( contexts->ClassBNvmCtx ) != true )
 80498c4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80498c6:	f001 fc2d 	bl	804b124 <LoRaMacClassBRestoreNvmCtx>
 80498ca:	b168      	cbz	r0, 80498e8 <RestoreCtxs+0x7c>
    if( LoRaMacConfirmQueueRestoreNvmCtx( contexts->ConfirmQueueNvmCtx ) != true )
 80498cc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80498ce:	f001 fd87 	bl	804b3e0 <LoRaMacConfirmQueueRestoreNvmCtx>
    return LORAMAC_STATUS_OK;
 80498d2:	2800      	cmp	r0, #0
 80498d4:	bf0c      	ite	eq
 80498d6:	2015      	moveq	r0, #21
 80498d8:	2000      	movne	r0, #0
 80498da:	e7e8      	b.n	80498ae <RestoreCtxs+0x42>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80498dc:	2003      	movs	r0, #3
 80498de:	e7e6      	b.n	80498ae <RestoreCtxs+0x42>
        return LORAMAC_STATUS_BUSY;
 80498e0:	2001      	movs	r0, #1
 80498e2:	e7e4      	b.n	80498ae <RestoreCtxs+0x42>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80498e4:	2013      	movs	r0, #19
 80498e6:	e7e2      	b.n	80498ae <RestoreCtxs+0x42>
        return LORAMAC_STATUS_CLASS_B_ERROR;
 80498e8:	2014      	movs	r0, #20
 80498ea:	e7e0      	b.n	80498ae <RestoreCtxs+0x42>
 80498ec:	2000a7cc 	.word	0x2000a7cc

080498f0 <DetermineFrameType>:
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 80498f0:	4602      	mov	r2, r0
 80498f2:	b1d0      	cbz	r0, 804992a <DetermineFrameType+0x3a>
 80498f4:	b1c9      	cbz	r1, 804992a <DetermineFrameType+0x3a>
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 80498f6:	7b03      	ldrb	r3, [r0, #12]
 80498f8:	f013 000f 	ands.w	r0, r3, #15
 80498fc:	d005      	beq.n	804990a <DetermineFrameType+0x1a>
 80498fe:	f892 3020 	ldrb.w	r3, [r2, #32]
 8049902:	b113      	cbz	r3, 804990a <DetermineFrameType+0x1a>
        *fType = FRAME_TYPE_A;
 8049904:	2000      	movs	r0, #0
 8049906:	7008      	strb	r0, [r1, #0]
 8049908:	4770      	bx	lr
    else if( macMsg->FRMPayloadSize == 0 )
 804990a:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 804990e:	b91b      	cbnz	r3, 8049918 <DetermineFrameType+0x28>
        *fType = FRAME_TYPE_B;
 8049910:	2201      	movs	r2, #1
 8049912:	700a      	strb	r2, [r1, #0]
    return LORAMAC_STATUS_OK;
 8049914:	4618      	mov	r0, r3
 8049916:	4770      	bx	lr
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8049918:	b948      	cbnz	r0, 804992e <DetermineFrameType+0x3e>
 804991a:	f892 3020 	ldrb.w	r3, [r2, #32]
 804991e:	b913      	cbnz	r3, 8049926 <DetermineFrameType+0x36>
        *fType = FRAME_TYPE_C;
 8049920:	2302      	movs	r3, #2
        *fType = FRAME_TYPE_D;
 8049922:	700b      	strb	r3, [r1, #0]
 8049924:	4770      	bx	lr
 8049926:	2303      	movs	r3, #3
 8049928:	e7fb      	b.n	8049922 <DetermineFrameType+0x32>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 804992a:	2003      	movs	r0, #3
 804992c:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 804992e:	2017      	movs	r0, #23
}
 8049930:	4770      	bx	lr
	...

08049934 <LoRaMacProcess>:
{
 8049934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8049938:	b0a1      	sub	sp, #132	; 0x84
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 804993a:	f3ef 8310 	mrs	r3, PRIMASK
    events = LoRaMacRadioEvents;
 804993e:	4cbd      	ldr	r4, [pc, #756]	; (8049c34 <LoRaMacProcess+0x300>)
    LoRaMacRadioEvents.Value = 0;
 8049940:	2200      	movs	r2, #0
    events = LoRaMacRadioEvents;
 8049942:	6825      	ldr	r5, [r4, #0]
    LoRaMacRadioEvents.Value = 0;
 8049944:	6022      	str	r2, [r4, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8049946:	f383 8810 	msr	PRIMASK, r3
    if( events.Value != 0 )
 804994a:	2d00      	cmp	r5, #0
 804994c:	f000 80c3 	beq.w	8049ad6 <LoRaMacProcess+0x1a2>
 8049950:	b2ed      	uxtb	r5, r5
        if( events.Events.TxDone == 1 )
 8049952:	06e9      	lsls	r1, r5, #27
 8049954:	d552      	bpl.n	80499fc <LoRaMacProcess+0xc8>
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8049956:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 804995a:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 804995e:	2b02      	cmp	r3, #2
 8049960:	d002      	beq.n	8049968 <LoRaMacProcess+0x34>
        Radio.Sleep( );
 8049962:	4bb5      	ldr	r3, [pc, #724]	; (8049c38 <LoRaMacProcess+0x304>)
 8049964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8049966:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 8049968:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 804996c:	48b3      	ldr	r0, [pc, #716]	; (8049c3c <LoRaMacProcess+0x308>)
 804996e:	f004 f997 	bl	804dca0 <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8049972:	48b2      	ldr	r0, [pc, #712]	; (8049c3c <LoRaMacProcess+0x308>)
 8049974:	f004 f8fa 	bl	804db6c <TimerStart>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 8049978:	f8d4 13b8 	ldr.w	r1, [r4, #952]	; 0x3b8
 804997c:	48b0      	ldr	r0, [pc, #704]	; (8049c40 <LoRaMacProcess+0x30c>)
 804997e:	f004 f98f 	bl	804dca0 <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8049982:	48af      	ldr	r0, [pc, #700]	; (8049c40 <LoRaMacProcess+0x30c>)
 8049984:	f004 f8f2 	bl	804db6c <TimerStart>
    if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 8049988:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 804998c:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
 8049990:	2a02      	cmp	r2, #2
 8049992:	d002      	beq.n	804999a <LoRaMacProcess+0x66>
 8049994:	f894 2418 	ldrb.w	r2, [r4, #1048]	; 0x418
 8049998:	b182      	cbz	r2, 80499bc <LoRaMacProcess+0x88>
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 804999a:	a920      	add	r1, sp, #128	; 0x80
 804999c:	2216      	movs	r2, #22
 804999e:	f801 2d60 	strb.w	r2, [r1, #-96]!
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80499a2:	7818      	ldrb	r0, [r3, #0]
 80499a4:	f002 fb5b 	bl	804c05e <RegionGetPhyParam>
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 80499a8:	f8d4 13b8 	ldr.w	r1, [r4, #952]	; 0x3b8
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80499ac:	900a      	str	r0, [sp, #40]	; 0x28
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 80499ae:	4401      	add	r1, r0
 80499b0:	48a4      	ldr	r0, [pc, #656]	; (8049c44 <LoRaMacProcess+0x310>)
 80499b2:	f004 f975 	bl	804dca0 <TimerSetValue>
        TimerStart( &MacCtx.AckTimeoutTimer );
 80499b6:	48a3      	ldr	r0, [pc, #652]	; (8049c44 <LoRaMacProcess+0x310>)
 80499b8:	f004 f8d8 	bl	804db6c <TimerStart>
    MacCtx.NvmCtx->LastTxChannel = MacCtx.Channel;
 80499bc:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 80499c0:	f894 2419 	ldrb.w	r2, [r4, #1049]	; 0x419
 80499c4:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
    txDone.Channel = MacCtx.Channel;
 80499c8:	f88d 2050 	strb.w	r2, [sp, #80]	; 0x50
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 80499cc:	f893 21d4 	ldrb.w	r2, [r3, #468]	; 0x1d4
 80499d0:	2a00      	cmp	r2, #0
 80499d2:	f040 812c 	bne.w	8049c2e <LoRaMacProcess+0x2fa>
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 80499d6:	4e9c      	ldr	r6, [pc, #624]	; (8049c48 <LoRaMacProcess+0x314>)
        txDone.Joined  = true;
 80499d8:	f88d 2051 	strb.w	r2, [sp, #81]	; 0x51
    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 80499dc:	7818      	ldrb	r0, [r3, #0]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 80499de:	6832      	ldr	r2, [r6, #0]
 80499e0:	9215      	str	r2, [sp, #84]	; 0x54
    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 80499e2:	a914      	add	r1, sp, #80	; 0x50
 80499e4:	f002 fb45 	bl	804c072 <RegionSetBandTxDone>
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 80499e8:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 80499ec:	6832      	ldr	r2, [r6, #0]
 80499ee:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
    if( MacCtx.NodeAckRequested == false )
 80499f2:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 80499f6:	b90b      	cbnz	r3, 80499fc <LoRaMacProcess+0xc8>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80499f8:	f884 3441 	strb.w	r3, [r4, #1089]	; 0x441
        if( events.Events.RxDone == 1 )
 80499fc:	072a      	lsls	r2, r5, #28
 80499fe:	d540      	bpl.n	8049a82 <LoRaMacProcess+0x14e>
    uint8_t *payload = RxDoneParams.Payload;
 8049a00:	4b92      	ldr	r3, [pc, #584]	; (8049c4c <LoRaMacProcess+0x318>)
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 8049a02:	f8d4 2488 	ldr.w	r2, [r4, #1160]	; 0x488
    uint8_t *payload = RxDoneParams.Payload;
 8049a06:	f8d3 9004 	ldr.w	r9, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 8049a0a:	f8b3 8008 	ldrh.w	r8, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 8049a0e:	f9b3 a00a 	ldrsh.w	sl, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 8049a12:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 8049a16:	6cd6      	ldr	r6, [r2, #76]	; 0x4c
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 8049a18:	f894 2484 	ldrb.w	r2, [r4, #1156]	; 0x484
 8049a1c:	f884 2431 	strb.w	r2, [r4, #1073]	; 0x431
    uint32_t downLinkCounter = 0;
 8049a20:	2300      	movs	r3, #0
 8049a22:	9307      	str	r3, [sp, #28]
    MacCtx.McpsConfirm.AckReceived = false;
 8049a24:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
    MacCtx.McpsIndication.Multicast = 0;
 8049a28:	f8a4 3422 	strh.w	r3, [r4, #1058]	; 0x422
    MacCtx.McpsIndication.FramePending = 0;
 8049a2c:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 8049a30:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 8049a34:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.RxData = false;
 8049a38:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 8049a3c:	f884 3432 	strb.w	r3, [r4, #1074]	; 0x432
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8049a40:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8049a44:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 8049a48:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8049a4c:	f884 343c 	strb.w	r3, [r4, #1084]	; 0x43c
    Radio.Sleep( );
 8049a50:	4b79      	ldr	r3, [pc, #484]	; (8049c38 <LoRaMacProcess+0x304>)
    MacCtx.McpsIndication.Rssi = rssi;
 8049a52:	f8a4 a42e 	strh.w	sl, [r4, #1070]	; 0x42e
    Radio.Sleep( );
 8049a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    MacCtx.McpsIndication.Snr = snr;
 8049a58:	f884 7430 	strb.w	r7, [r4, #1072]	; 0x430
    Radio.Sleep( );
 8049a5c:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 8049a5e:	4878      	ldr	r0, [pc, #480]	; (8049c40 <LoRaMacProcess+0x30c>)
 8049a60:	f004 f8f6 	bl	804dc50 <TimerStop>
    PRINTF("RxDone\r\n");
 8049a64:	487a      	ldr	r0, [pc, #488]	; (8049c50 <LoRaMacProcess+0x31c>)
 8049a66:	f004 f97d 	bl	804dd64 <TraceSend>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8049a6a:	4641      	mov	r1, r8
 8049a6c:	4648      	mov	r0, r9
 8049a6e:	f001 fb67 	bl	804b140 <LoRaMacClassBRxBeacon>
 8049a72:	4683      	mov	fp, r0
 8049a74:	2800      	cmp	r0, #0
 8049a76:	f000 80f7 	beq.w	8049c68 <LoRaMacProcess+0x334>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8049a7a:	f8a4 a47a 	strh.w	sl, [r4, #1146]	; 0x47a
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8049a7e:	f884 747c 	strb.w	r7, [r4, #1148]	; 0x47c
        if( events.Events.TxTimeout == 1 )
 8049a82:	076f      	lsls	r7, r5, #29
 8049a84:	d51b      	bpl.n	8049abe <LoRaMacProcess+0x18a>
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8049a86:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8049a8a:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8049a8e:	2b02      	cmp	r3, #2
 8049a90:	d002      	beq.n	8049a98 <LoRaMacProcess+0x164>
        Radio.Sleep( );
 8049a92:	4b69      	ldr	r3, [pc, #420]	; (8049c38 <LoRaMacProcess+0x304>)
 8049a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8049a96:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 8049a98:	f7fe fd52 	bl	8048540 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8049a9c:	2002      	movs	r0, #2
 8049a9e:	f884 0441 	strb.w	r0, [r4, #1089]	; 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8049aa2:	f001 fd13 	bl	804b4cc <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8049aa6:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 8049aaa:	b113      	cbz	r3, 8049ab2 <LoRaMacProcess+0x17e>
        MacCtx.AckTimeoutRetry = true;
 8049aac:	2301      	movs	r3, #1
 8049aae:	f884 3417 	strb.w	r3, [r4, #1047]	; 0x417
    MacCtx.MacFlags.Bits.MacDone = 1;
 8049ab2:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 8049ab6:	f043 0320 	orr.w	r3, r3, #32
 8049aba:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
        if( events.Events.RxError == 1 )
 8049abe:	07ae      	lsls	r6, r5, #30
 8049ac0:	d503      	bpl.n	8049aca <LoRaMacProcess+0x196>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8049ac2:	2106      	movs	r1, #6
 8049ac4:	2005      	movs	r0, #5
 8049ac6:	f7fe fdef 	bl	80486a8 <HandleRadioRxErrorTimeout>
        if( events.Events.RxTimeout == 1 )
 8049aca:	07ed      	lsls	r5, r5, #31
 8049acc:	d503      	bpl.n	8049ad6 <LoRaMacProcess+0x1a2>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8049ace:	2104      	movs	r1, #4
 8049ad0:	2003      	movs	r0, #3
 8049ad2:	f7fe fde9 	bl	80486a8 <HandleRadioRxErrorTimeout>
    LoRaMacClassBProcess( );
 8049ad6:	f001 fb50 	bl	804b17a <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8049ada:	f894 2485 	ldrb.w	r2, [r4, #1157]	; 0x485
 8049ade:	0690      	lsls	r0, r2, #26
 8049ae0:	d56a      	bpl.n	8049bb8 <LoRaMacProcess+0x284>
    MacCtx.AllowRequests = requestState;
 8049ae2:	2300      	movs	r3, #0
 8049ae4:	f884 3486 	strb.w	r3, [r4, #1158]	; 0x486
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8049ae8:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 8049aec:	0619      	lsls	r1, r3, #24
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8049aee:	bf44      	itt	mi
 8049af0:	f023 0382 	bicmi.w	r3, r3, #130	; 0x82
 8049af4:	f8c4 3344 	strmi.w	r3, [r4, #836]	; 0x344
}

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8049af8:	f012 0f05 	tst.w	r2, #5
 8049afc:	f000 82e0 	beq.w	804a0c0 <LoRaMacProcess+0x78c>
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8049b00:	200b      	movs	r0, #11
 8049b02:	f001 fcfb 	bl	804b4fc <LoRaMacConfirmQueueIsCmdActive>
 8049b06:	2800      	cmp	r0, #0
 8049b08:	f000 82da 	beq.w	804a0c0 <LoRaMacProcess+0x78c>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8049b0c:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8049b10:	07df      	lsls	r7, r3, #31
 8049b12:	f100 82d5 	bmi.w	804a0c0 <LoRaMacProcess+0x78c>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8049b16:	075e      	lsls	r6, r3, #29
 8049b18:	f140 82d2 	bpl.w	804a0c0 <LoRaMacProcess+0x78c>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8049b1c:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 8049b20:	f023 0302 	bic.w	r3, r3, #2
 8049b24:	f8c4 3344 	str.w	r3, [r4, #836]	; 0x344
    if( MacCtx.MacState == LORAMAC_IDLE )
 8049b28:	f8d4 2344 	ldr.w	r2, [r4, #836]	; 0x344
 8049b2c:	bb82      	cbnz	r2, 8049b90 <LoRaMacProcess+0x25c>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8049b2e:	f894 5485 	ldrb.w	r5, [r4, #1157]	; 0x485
 8049b32:	f015 0101 	ands.w	r1, r5, #1
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8049b36:	bf1e      	ittt	ne
 8049b38:	462b      	movne	r3, r5
 8049b3a:	f362 0300 	bfine	r3, r2, #0, #1
 8049b3e:	f884 3485 	strbne.w	r3, [r4, #1157]	; 0x485
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8049b42:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 8049b46:	075e      	lsls	r6, r3, #29
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8049b48:	bf44      	itt	mi
 8049b4a:	f36f 0382 	bfcmi	r3, #2, #1
 8049b4e:	f884 3485 	strbmi.w	r3, [r4, #1157]	; 0x485
    MacCtx.AllowRequests = requestState;
 8049b52:	2301      	movs	r3, #1
 8049b54:	f884 3486 	strb.w	r3, [r4, #1158]	; 0x486
        if( reqEvents.Bits.McpsReq == 1 )
 8049b58:	b121      	cbz	r1, 8049b64 <LoRaMacProcess+0x230>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8049b5a:	f8d4 3348 	ldr.w	r3, [r4, #840]	; 0x348
 8049b5e:	483d      	ldr	r0, [pc, #244]	; (8049c54 <LoRaMacProcess+0x320>)
 8049b60:	681b      	ldr	r3, [r3, #0]
 8049b62:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 8049b64:	076d      	lsls	r5, r5, #29
 8049b66:	d50b      	bpl.n	8049b80 <LoRaMacProcess+0x24c>
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8049b68:	483b      	ldr	r0, [pc, #236]	; (8049c58 <LoRaMacProcess+0x324>)
 8049b6a:	f001 fcdf 	bl	804b52c <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8049b6e:	f001 fd09 	bl	804b584 <LoRaMacConfirmQueueGetCnt>
 8049b72:	b128      	cbz	r0, 8049b80 <LoRaMacProcess+0x24c>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 8049b74:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 8049b78:	f043 0304 	orr.w	r3, r3, #4
 8049b7c:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
        LoRaMacClassBResumeBeaconing( );
 8049b80:	f001 faea 	bl	804b158 <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 8049b84:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 8049b88:	f36f 1345 	bfc	r3, #5, #1
 8049b8c:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
    if( MacCtx.MacState == LORAMAC_IDLE )
 8049b90:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 8049b94:	b96b      	cbnz	r3, 8049bb2 <LoRaMacProcess+0x27e>
        bool isStickyMacCommandPending = false;
 8049b96:	a820      	add	r0, sp, #128	; 0x80
 8049b98:	f800 3d30 	strb.w	r3, [r0, #-48]!
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 8049b9c:	f001 fbf6 	bl	804b38c <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 8049ba0:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8049ba4:	b12b      	cbz	r3, 8049bb2 <LoRaMacProcess+0x27e>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8049ba6:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 8049baa:	f043 0310 	orr.w	r3, r3, #16
 8049bae:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
    MacCtx.AllowRequests = requestState;
 8049bb2:	2301      	movs	r3, #1
 8049bb4:	f884 3486 	strb.w	r3, [r4, #1158]	; 0x486
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8049bb8:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 8049bbc:	0718      	lsls	r0, r3, #28
 8049bbe:	d508      	bpl.n	8049bd2 <LoRaMacProcess+0x29e>
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8049bc0:	f36f 03c3 	bfc	r3, #3, #1
 8049bc4:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 8049bc8:	f8d4 3348 	ldr.w	r3, [r4, #840]	; 0x348
 8049bcc:	4823      	ldr	r0, [pc, #140]	; (8049c5c <LoRaMacProcess+0x328>)
 8049bce:	68db      	ldr	r3, [r3, #12]
 8049bd0:	4798      	blx	r3
    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 8049bd2:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 8049bd6:	06d9      	lsls	r1, r3, #27
 8049bd8:	d510      	bpl.n	8049bfc <LoRaMacProcess+0x2c8>
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 8049bda:	2306      	movs	r3, #6
 8049bdc:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 8049be0:	f8d4 3348 	ldr.w	r3, [r4, #840]	; 0x348
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8049be4:	2500      	movs	r5, #0
        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 8049be6:	68db      	ldr	r3, [r3, #12]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8049be8:	f88d 5051 	strb.w	r5, [sp, #81]	; 0x51
        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 8049bec:	a814      	add	r0, sp, #80	; 0x50
 8049bee:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 8049bf0:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 8049bf4:	f365 1304 	bfi	r3, r5, #4, #1
 8049bf8:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8049bfc:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 8049c00:	079a      	lsls	r2, r3, #30
 8049c02:	d508      	bpl.n	8049c16 <LoRaMacProcess+0x2e2>
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8049c04:	f36f 0341 	bfc	r3, #1, #1
 8049c08:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 8049c0c:	f8d4 3348 	ldr.w	r3, [r4, #840]	; 0x348
 8049c10:	4813      	ldr	r0, [pc, #76]	; (8049c60 <LoRaMacProcess+0x32c>)
 8049c12:	685b      	ldr	r3, [r3, #4]
 8049c14:	4798      	blx	r3
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8049c16:	f894 3484 	ldrb.w	r3, [r4, #1156]	; 0x484
 8049c1a:	2b02      	cmp	r3, #2
 8049c1c:	d104      	bne.n	8049c28 <LoRaMacProcess+0x2f4>
    	PRINTF("Recebe em Classe C\r\n");
 8049c1e:	4811      	ldr	r0, [pc, #68]	; (8049c64 <LoRaMacProcess+0x330>)
 8049c20:	f004 f8a0 	bl	804dd64 <TraceSend>
        OpenContinuousRxCWindow( );
 8049c24:	f7fe fe00 	bl	8048828 <OpenContinuousRxCWindow>
}
 8049c28:	b021      	add	sp, #132	; 0x84
 8049c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        txDone.Joined  = true;
 8049c2e:	2201      	movs	r2, #1
 8049c30:	e6d1      	b.n	80499d6 <LoRaMacProcess+0xa2>
 8049c32:	bf00      	nop
 8049c34:	2000a7cc 	.word	0x2000a7cc
 8049c38:	08051928 	.word	0x08051928
 8049c3c:	2000ab50 	.word	0x2000ab50
 8049c40:	2000ab68 	.word	0x2000ab68
 8049c44:	2000abc8 	.word	0x2000abc8
 8049c48:	2000ddfc 	.word	0x2000ddfc
 8049c4c:	2000de00 	.word	0x2000de00
 8049c50:	08051f69 	.word	0x08051f69
 8049c54:	2000ac0c 	.word	0x2000ac0c
 8049c58:	2000ac20 	.word	0x2000ac20
 8049c5c:	2000ac34 	.word	0x2000ac34
 8049c60:	2000abec 	.word	0x2000abec
 8049c64:	08051f83 	.word	0x08051f83
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8049c68:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8049c6c:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8049c70:	2b01      	cmp	r3, #1
 8049c72:	d10c      	bne.n	8049c8e <LoRaMacProcess+0x35a>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8049c74:	f001 fa68 	bl	804b148 <LoRaMacClassBIsPingExpected>
 8049c78:	4682      	mov	sl, r0
 8049c7a:	b1c8      	cbz	r0, 8049cb0 <LoRaMacProcess+0x37c>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8049c7c:	4658      	mov	r0, fp
 8049c7e:	f001 fa58 	bl	804b132 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8049c82:	4658      	mov	r0, fp
 8049c84:	f001 fa5a 	bl	804b13c <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8049c88:	2304      	movs	r3, #4
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8049c8a:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
    macHdr.Value = payload[pktHeaderLen++];
 8049c8e:	f899 a000 	ldrb.w	sl, [r9]
    switch( macHdr.Bits.MType )
 8049c92:	ea4f 135a 	mov.w	r3, sl, lsr #5
 8049c96:	3b01      	subs	r3, #1
 8049c98:	2b06      	cmp	r3, #6
 8049c9a:	f200 81fe 	bhi.w	804a09a <LoRaMacProcess+0x766>
 8049c9e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8049ca2:	0013      	.short	0x0013
 8049ca4:	009401fc 	.word	0x009401fc
 8049ca8:	009101fc 	.word	0x009101fc
 8049cac:	01e701fc 	.word	0x01e701fc
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8049cb0:	f001 fa4c 	bl	804b14c <LoRaMacClassBIsMulticastExpected>
 8049cb4:	2800      	cmp	r0, #0
 8049cb6:	d0ea      	beq.n	8049c8e <LoRaMacProcess+0x35a>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8049cb8:	4650      	mov	r0, sl
 8049cba:	f001 fa3b 	bl	804b134 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8049cbe:	4650      	mov	r0, sl
 8049cc0:	f001 fa3d 	bl	804b13e <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8049cc4:	2305      	movs	r3, #5
 8049cc6:	e7e0      	b.n	8049c8a <LoRaMacProcess+0x356>
            macMsgJoinAccept.BufSize = size;
 8049cc8:	fa5f f888 	uxtb.w	r8, r8
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 8049ccc:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
            macMsgJoinAccept.BufSize = size;
 8049cd0:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 8049cd4:	f893 61d4 	ldrb.w	r6, [r3, #468]	; 0x1d4
            macMsgJoinAccept.Buffer = payload;
 8049cd8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 8049cdc:	b11e      	cbz	r6, 8049ce6 <LoRaMacProcess+0x3b2>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8049cde:	2301      	movs	r3, #1
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8049ce0:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
 8049ce4:	e10e      	b.n	8049f04 <LoRaMacProcess+0x5d0>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 8049ce6:	f7fe fc19 	bl	804851c <SecureElementGetJoinEui>
 8049cea:	aa0a      	add	r2, sp, #40	; 0x28
 8049cec:	4601      	mov	r1, r0
 8049cee:	20ff      	movs	r0, #255	; 0xff
 8049cf0:	f001 ffa8 	bl	804bc44 <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 8049cf4:	2800      	cmp	r0, #0
 8049cf6:	d15d      	bne.n	8049db4 <LoRaMacProcess+0x480>
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8049cf8:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8049cfc:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8049d00:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8049d04:	0412      	lsls	r2, r2, #16
 8049d06:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8049d0a:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8049d0e:	430a      	orrs	r2, r1
 8049d10:	649a      	str	r2, [r3, #72]	; 0x48
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
 8049d12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8049d14:	64da      	str	r2, [r3, #76]	; 0x4c
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8049d16:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8049d1a:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8049d1e:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8049d22:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8049d26:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8049d2a:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
                MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8049d2e:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8049d32:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
                if( MacCtx.NvmCtx->MacParams.ReceiveDelay1 == 0 )
 8049d36:	b3da      	cbz	r2, 8049db0 <LoRaMacProcess+0x47c>
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 8049d38:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
 8049d3c:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 8049d40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8049d44:	434a      	muls	r2, r1
 8049d46:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                MacCtx.NvmCtx->Version.Fields.Minor = 0;
 8049d4a:	2600      	movs	r6, #0
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 8049d4c:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
                applyCFList.Size = size - 17;
 8049d50:	f1a8 0811 	sub.w	r8, r8, #17
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 8049d54:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                MacCtx.NvmCtx->Version.Fields.Minor = 0;
 8049d58:	f883 61d2 	strb.w	r6, [r3, #466]	; 0x1d2
                applyCFList.Size = size - 17;
 8049d5c:	f88d 8024 	strb.w	r8, [sp, #36]	; 0x24
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8049d60:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 8049d64:	7818      	ldrb	r0, [r3, #0]
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8049d66:	9208      	str	r2, [sp, #32]
                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 8049d68:	a908      	add	r1, sp, #32
 8049d6a:	f002 f99e 	bl	804c0aa <RegionApplyCFList>
                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;
 8049d6e:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8049d72:	2202      	movs	r2, #2
 8049d74:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8049d78:	4630      	mov	r0, r6
 8049d7a:	f001 fbbf 	bl	804b4fc <LoRaMacConfirmQueueIsCmdActive>
 8049d7e:	b118      	cbz	r0, 8049d88 <LoRaMacProcess+0x454>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 8049d80:	4631      	mov	r1, r6
 8049d82:	4630      	mov	r0, r6
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8049d84:	f001 fb6e 	bl	804b464 <LoRaMacConfirmQueueSetStatus>
    if( MacCtx.NodeAckRequested == true )
 8049d88:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 8049d8c:	2b00      	cmp	r3, #0
 8049d8e:	f000 818a 	beq.w	804a0a6 <LoRaMacProcess+0x772>
        if( MacCtx.McpsConfirm.AckReceived == true )
 8049d92:	f894 3444 	ldrb.w	r3, [r4, #1092]	; 0x444
 8049d96:	b113      	cbz	r3, 8049d9e <LoRaMacProcess+0x46a>
            OnAckTimeoutTimerEvent( NULL );
 8049d98:	2000      	movs	r0, #0
 8049d9a:	f7fe fc41 	bl	8048620 <OnAckTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.MacDone = 1;
 8049d9e:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 8049da2:	f043 0320 	orr.w	r3, r3, #32
 8049da6:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
    UpdateRxSlotIdleState( );
 8049daa:	f7fe fbc9 	bl	8048540 <UpdateRxSlotIdleState>
 8049dae:	e668      	b.n	8049a82 <LoRaMacProcess+0x14e>
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 8049db0:	2201      	movs	r2, #1
 8049db2:	e7c1      	b.n	8049d38 <LoRaMacProcess+0x404>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8049db4:	4630      	mov	r0, r6
 8049db6:	f001 fba1 	bl	804b4fc <LoRaMacConfirmQueueIsCmdActive>
 8049dba:	2800      	cmp	r0, #0
 8049dbc:	d0e4      	beq.n	8049d88 <LoRaMacProcess+0x454>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8049dbe:	4631      	mov	r1, r6
 8049dc0:	2007      	movs	r0, #7
 8049dc2:	e7df      	b.n	8049d84 <LoRaMacProcess+0x450>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8049dc4:	2301      	movs	r3, #1
 8049dc6:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8049dca:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8049dce:	f893 212d 	ldrb.w	r2, [r3, #301]	; 0x12d
 8049dd2:	f88d 2016 	strb.w	r2, [sp, #22]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8049dd6:	f894 2424 	ldrb.w	r2, [r4, #1060]	; 0x424
 8049dda:	f88d 2015 	strb.w	r2, [sp, #21]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8049dde:	220d      	movs	r2, #13
 8049de0:	f88d 2014 	strb.w	r2, [sp, #20]
            if( MacCtx.NvmCtx->RepeaterSupport == true )
 8049de4:	f893 213f 	ldrb.w	r2, [r3, #319]	; 0x13f
 8049de8:	b112      	cbz	r2, 8049df0 <LoRaMacProcess+0x4bc>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8049dea:	220e      	movs	r2, #14
 8049dec:	f88d 2014 	strb.w	r2, [sp, #20]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8049df0:	7818      	ldrb	r0, [r3, #0]
 8049df2:	a905      	add	r1, sp, #20
 8049df4:	f002 f933 	bl	804c05e <RegionGetPhyParam>
            if( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORA_MAC_FRMPAYLOAD_OVERHEAD ) ) > ( int16_t )phyParam.Value )
 8049df8:	f1a8 030d 	sub.w	r3, r8, #13
 8049dfc:	b21b      	sxth	r3, r3
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8049dfe:	9006      	str	r0, [sp, #24]
            if( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORA_MAC_FRMPAYLOAD_OVERHEAD ) ) > ( int16_t )phyParam.Value )
 8049e00:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8049e04:	b200      	sxth	r0, r0
 8049e06:	4283      	cmp	r3, r0
 8049e08:	f73f af69 	bgt.w	8049cde <LoRaMacProcess+0x3aa>
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8049e0c:	4baa      	ldr	r3, [pc, #680]	; (804a0b8 <LoRaMacProcess+0x784>)
 8049e0e:	931d      	str	r3, [sp, #116]	; 0x74
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8049e10:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8049e14:	23ff      	movs	r3, #255	; 0xff
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8049e16:	4658      	mov	r0, fp
            macMsgData.Buffer = payload;
 8049e18:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
            macMsgData.BufSize = size;
 8049e1c:	f88d 8054 	strb.w	r8, [sp, #84]	; 0x54
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8049e20:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8049e24:	f002 f81c 	bl	804be60 <LoRaMacParserData>
 8049e28:	2800      	cmp	r0, #0
 8049e2a:	f47f af58 	bne.w	8049cde <LoRaMacProcess+0x3aa>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8049e2e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8049e30:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8049e34:	a908      	add	r1, sp, #32
 8049e36:	4658      	mov	r0, fp
 8049e38:	f7ff fd5a 	bl	80498f0 <DetermineFrameType>
 8049e3c:	2800      	cmp	r0, #0
 8049e3e:	f47f af4e 	bne.w	8049cde <LoRaMacProcess+0x3aa>
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8049e42:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8049e46:	9916      	ldr	r1, [sp, #88]	; 0x58
            downLinkCounter = 0;
 8049e48:	9007      	str	r0, [sp, #28]
 8049e4a:	461a      	mov	r2, r3
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8049e4c:	4681      	mov	r9, r0
 8049e4e:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8049e50:	9003      	str	r0, [sp, #12]
 8049e52:	4288      	cmp	r0, r1
 8049e54:	d114      	bne.n	8049e80 <LoRaMacProcess+0x54c>
 8049e56:	f892 0051 	ldrb.w	r0, [r2, #81]	; 0x51
 8049e5a:	b188      	cbz	r0, 8049e80 <LoRaMacProcess+0x54c>
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.GroupID;
 8049e5c:	2028      	movs	r0, #40	; 0x28
 8049e5e:	fb00 3009 	mla	r0, r0, r9, r3
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 8049e62:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.GroupID;
 8049e64:	f890 9052 	ldrb.w	r9, [r0, #82]	; 0x52
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 8049e68:	6812      	ldr	r2, [r2, #0]
 8049e6a:	9207      	str	r2, [sp, #28]
                    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 8049e6c:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
 8049e70:	2a02      	cmp	r2, #2
 8049e72:	d102      	bne.n	8049e7a <LoRaMacProcess+0x546>
                        MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8049e74:	2203      	movs	r2, #3
 8049e76:	f884 2431 	strb.w	r2, [r4, #1073]	; 0x431
                    multicast = 1;
 8049e7a:	f04f 0801 	mov.w	r8, #1
 8049e7e:	e009      	b.n	8049e94 <LoRaMacProcess+0x560>
 8049e80:	f109 0901 	add.w	r9, r9, #1
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8049e84:	f1b9 0f04 	cmp.w	r9, #4
 8049e88:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8049e8c:	d1df      	bne.n	8049e4e <LoRaMacProcess+0x51a>
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 8049e8e:	9603      	str	r6, [sp, #12]
            multicast = 0;
 8049e90:	f04f 0800 	mov.w	r8, #0
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 8049e94:	2215      	movs	r2, #21
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8049e96:	a905      	add	r1, sp, #20
 8049e98:	7818      	ldrb	r0, [r3, #0]
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 8049e9a:	f88d 2014 	strb.w	r2, [sp, #20]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8049e9e:	f002 f8de 	bl	804c05e <RegionGetPhyParam>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 8049ea2:	f8d4 2488 	ldr.w	r2, [r4, #1160]	; 0x488
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8049ea6:	9006      	str	r0, [sp, #24]
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 8049ea8:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8049eac:	f892 21d2 	ldrb.w	r2, [r2, #466]	; 0x1d2
 8049eb0:	b281      	uxth	r1, r0
    switch( addrID )
 8049eb2:	f1b9 0f04 	cmp.w	r9, #4
 8049eb6:	d840      	bhi.n	8049f3a <LoRaMacProcess+0x606>
 8049eb8:	e8df f009 	tbb	[pc, r9]
 8049ebc:	312f3303 	.word	0x312f3303
 8049ec0:	27          	.byte	0x27
 8049ec1:	00          	.byte	0x00
            *fCntID = MC_FCNT_DOWN_0;
 8049ec2:	2604      	movs	r6, #4
    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 8049ec4:	ab07      	add	r3, sp, #28
 8049ec6:	f8bd 205e 	ldrh.w	r2, [sp, #94]	; 0x5e
 8049eca:	4630      	mov	r0, r6
 8049ecc:	f001 fd0e 	bl	804b8ec <LoRaMacCryptoGetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8049ed0:	b3a8      	cbz	r0, 8049f3e <LoRaMacProcess+0x60a>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 8049ed2:	2807      	cmp	r0, #7
 8049ed4:	d12b      	bne.n	8049f2e <LoRaMacProcess+0x5fa>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8049ed6:	2308      	movs	r3, #8
 8049ed8:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
                    if( ( MacCtx.NvmCtx->Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( MacCtx.NvmCtx->LastRxMic == macMsgData.MIC ) )
 8049edc:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8049ee0:	f893 21d2 	ldrb.w	r2, [r3, #466]	; 0x1d2
 8049ee4:	b95a      	cbnz	r2, 8049efe <LoRaMacProcess+0x5ca>
 8049ee6:	f00a 02e0 	and.w	r2, sl, #224	; 0xe0
 8049eea:	2aa0      	cmp	r2, #160	; 0xa0
 8049eec:	d107      	bne.n	8049efe <LoRaMacProcess+0x5ca>
 8049eee:	f8d3 11d8 	ldr.w	r1, [r3, #472]	; 0x1d8
 8049ef2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8049ef4:	4291      	cmp	r1, r2
 8049ef6:	d102      	bne.n	8049efe <LoRaMacProcess+0x5ca>
                        MacCtx.NvmCtx->SrvAckRequested = true;
 8049ef8:	2201      	movs	r2, #1
 8049efa:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8049efe:	9b07      	ldr	r3, [sp, #28]
 8049f00:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
                PrepareRxDoneAbort( );
 8049f04:	f7fe fbb0 	bl	8048668 <PrepareRxDoneAbort>
 8049f08:	e5bb      	b.n	8049a82 <LoRaMacProcess+0x14e>
            if( lrWanVersion.Fields.Minor == 1 )
 8049f0a:	2a01      	cmp	r2, #1
 8049f0c:	d10b      	bne.n	8049f26 <LoRaMacProcess+0x5f2>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8049f0e:	b163      	cbz	r3, 8049f2a <LoRaMacProcess+0x5f6>
                    *fCntID = A_FCNT_DOWN;
 8049f10:	2b03      	cmp	r3, #3
 8049f12:	bf14      	ite	ne
 8049f14:	2601      	movne	r6, #1
 8049f16:	2602      	moveq	r6, #2
 8049f18:	e7d4      	b.n	8049ec4 <LoRaMacProcess+0x590>
            *fCntID = MC_FCNT_DOWN_2;
 8049f1a:	2606      	movs	r6, #6
 8049f1c:	e7d2      	b.n	8049ec4 <LoRaMacProcess+0x590>
            *fCntID = MC_FCNT_DOWN_3;
 8049f1e:	2607      	movs	r6, #7
 8049f20:	e7d0      	b.n	8049ec4 <LoRaMacProcess+0x590>
            *fCntID = MC_FCNT_DOWN_1;
 8049f22:	2605      	movs	r6, #5
 8049f24:	e7ce      	b.n	8049ec4 <LoRaMacProcess+0x590>
                *fCntID = FCNT_DOWN;
 8049f26:	2603      	movs	r6, #3
 8049f28:	e7cc      	b.n	8049ec4 <LoRaMacProcess+0x590>
                    *fCntID = A_FCNT_DOWN;
 8049f2a:	2602      	movs	r6, #2
 8049f2c:	e7ca      	b.n	8049ec4 <LoRaMacProcess+0x590>
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 8049f2e:	2808      	cmp	r0, #8
 8049f30:	d103      	bne.n	8049f3a <LoRaMacProcess+0x606>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 8049f32:	230a      	movs	r3, #10
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8049f34:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
 8049f38:	e7e1      	b.n	8049efe <LoRaMacProcess+0x5ca>
 8049f3a:	2301      	movs	r3, #1
 8049f3c:	e7fa      	b.n	8049f34 <LoRaMacProcess+0x600>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8049f3e:	f8cd b000 	str.w	fp, [sp]
 8049f42:	9b07      	ldr	r3, [sp, #28]
 8049f44:	9903      	ldr	r1, [sp, #12]
 8049f46:	4632      	mov	r2, r6
 8049f48:	4648      	mov	r0, r9
 8049f4a:	f001 fdb3 	bl	804bab4 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8049f4e:	b120      	cbz	r0, 8049f5a <LoRaMacProcess+0x626>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 8049f50:	2802      	cmp	r0, #2
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 8049f52:	bf0c      	ite	eq
 8049f54:	230b      	moveq	r3, #11
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8049f56:	230c      	movne	r3, #12
 8049f58:	e6c2      	b.n	8049ce0 <LoRaMacProcess+0x3ac>
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8049f5a:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 8049f5e:	f894 1431 	ldrb.w	r1, [r4, #1073]	; 0x431
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8049f62:	f884 0421 	strb.w	r0, [r4, #1057]	; 0x421
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8049f66:	f3c3 1200 	ubfx	r2, r3, #4, #1
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 8049f6a:	2901      	cmp	r1, #1
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8049f6c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8049f70:	f884 3432 	strb.w	r3, [r4, #1074]	; 0x432
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8049f74:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
                MacCtx.NvmCtx->AdrAckCounter = 0;
 8049f78:	bf98      	it	ls
 8049f7a:	f8d4 3488 	ldrls.w	r3, [r4, #1160]	; 0x488
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8049f7e:	f884 2425 	strb.w	r2, [r4, #1061]	; 0x425
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8049f82:	9a07      	ldr	r2, [sp, #28]
            MacCtx.McpsIndication.Multicast = multicast;
 8049f84:	f884 8422 	strb.w	r8, [r4, #1058]	; 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 8049f88:	f8c4 0428 	str.w	r0, [r4, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 8049f8c:	f884 042c 	strb.w	r0, [r4, #1068]	; 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8049f90:	f8c4 2434 	str.w	r2, [r4, #1076]	; 0x434
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8049f94:	f884 0441 	strb.w	r0, [r4, #1089]	; 0x441
                MacCtx.NvmCtx->AdrAckCounter = 0;
 8049f98:	bf98      	it	ls
 8049f9a:	f8c3 00f4 	strls.w	r0, [r3, #244]	; 0xf4
            if( multicast == 1 )
 8049f9e:	f1b8 0f00 	cmp.w	r8, #0
 8049fa2:	d01b      	beq.n	8049fdc <LoRaMacProcess+0x6a8>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8049fa4:	2302      	movs	r3, #2
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8049fa6:	2901      	cmp	r1, #1
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8049fa8:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8049fac:	f894 2440 	ldrb.w	r2, [r4, #1088]	; 0x440
 8049fb0:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8049fb4:	d805      	bhi.n	8049fc2 <LoRaMacProcess+0x68e>
        if( request == MCPS_CONFIRMED )
 8049fb6:	2a01      	cmp	r2, #1
 8049fb8:	d101      	bne.n	8049fbe <LoRaMacProcess+0x68a>
            if( fCtrl.Bits.Ack == 1 )
 8049fba:	069b      	lsls	r3, r3, #26
 8049fbc:	d501      	bpl.n	8049fc2 <LoRaMacProcess+0x68e>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8049fbe:	f001 f99d 	bl	804b2fc <LoRaMacCommandsRemoveStickyAnsCmds>
            PRINTF("FRame type: %d\r\n", fType);
 8049fc2:	f89d 1020 	ldrb.w	r1, [sp, #32]
 8049fc6:	483d      	ldr	r0, [pc, #244]	; (804a0bc <LoRaMacProcess+0x788>)
 8049fc8:	f003 fecc 	bl	804dd64 <TraceSend>
            switch( fType )
 8049fcc:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8049fd0:	2b03      	cmp	r3, #3
 8049fd2:	d847      	bhi.n	804a064 <LoRaMacProcess+0x730>
 8049fd4:	e8df f003 	tbb	[pc, r3]
 8049fd8:	1f412e17 	.word	0x1f412e17
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8049fdc:	f00a 03e0 	and.w	r3, sl, #224	; 0xe0
 8049fe0:	2ba0      	cmp	r3, #160	; 0xa0
 8049fe2:	f8d4 2488 	ldr.w	r2, [r4, #1160]	; 0x488
 8049fe6:	d10a      	bne.n	8049ffe <LoRaMacProcess+0x6ca>
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 8049fe8:	f892 01d2 	ldrb.w	r0, [r2, #466]	; 0x1d2
                    MacCtx.NvmCtx->SrvAckRequested = true;
 8049fec:	2301      	movs	r3, #1
 8049fee:	f882 31c0 	strb.w	r3, [r2, #448]	; 0x1c0
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 8049ff2:	2800      	cmp	r0, #0
 8049ff4:	d1d7      	bne.n	8049fa6 <LoRaMacProcess+0x672>
                        MacCtx.NvmCtx->LastRxMic = macMsgData.MIC;
 8049ff6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8049ff8:	f8c2 01d8 	str.w	r0, [r2, #472]	; 0x1d8
 8049ffc:	e7d3      	b.n	8049fa6 <LoRaMacProcess+0x672>
                    MacCtx.NvmCtx->SrvAckRequested = false;
 8049ffe:	2300      	movs	r3, #0
 804a000:	f882 31c0 	strb.w	r3, [r2, #448]	; 0x1c0
 804a004:	e7cf      	b.n	8049fa6 <LoRaMacProcess+0x672>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 804a006:	f89d 105c 	ldrb.w	r1, [sp, #92]	; 0x5c
 804a00a:	463a      	mov	r2, r7
 804a00c:	f001 010f 	and.w	r1, r1, #15
 804a010:	a818      	add	r0, sp, #96	; 0x60
 804a012:	f7fe fdb5 	bl	8048b80 <ProcessMacCommands.isra.1.constprop.7>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 804a016:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 804a01a:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 804a01e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 804a020:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 804a024:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 804a028:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 804a02c:	2301      	movs	r3, #1
 804a02e:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
 804a032:	e00b      	b.n	804a04c <LoRaMacProcess+0x718>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 804a034:	f89d 105c 	ldrb.w	r1, [sp, #92]	; 0x5c
 804a038:	463a      	mov	r2, r7
 804a03a:	f001 010f 	and.w	r1, r1, #15
 804a03e:	a818      	add	r0, sp, #96	; 0x60
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 804a040:	f7fe fd9e 	bl	8048b80 <ProcessMacCommands.isra.1.constprop.7>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 804a044:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 804a048:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
            MacCtx.MacFlags.Bits.McpsInd = 1;
 804a04c:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 804a050:	f043 0302 	orr.w	r3, r3, #2
 804a054:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
 804a058:	e696      	b.n	8049d88 <LoRaMacProcess+0x454>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 804a05a:	463a      	mov	r2, r7
 804a05c:	f89d 1078 	ldrb.w	r1, [sp, #120]	; 0x78
 804a060:	981d      	ldr	r0, [sp, #116]	; 0x74
 804a062:	e7ed      	b.n	804a040 <LoRaMacProcess+0x70c>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 804a064:	2301      	movs	r3, #1
 804a066:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
                    PrepareRxDoneAbort( );
 804a06a:	f7fe fafd 	bl	8048668 <PrepareRxDoneAbort>
 804a06e:	e7ed      	b.n	804a04c <LoRaMacProcess+0x718>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 804a070:	4e11      	ldr	r6, [pc, #68]	; (804a0b8 <LoRaMacProcess+0x784>)
 804a072:	f108 38ff 	add.w	r8, r8, #4294967295
 804a076:	fa1f f288 	uxth.w	r2, r8
 804a07a:	f109 0101 	add.w	r1, r9, #1
 804a07e:	4630      	mov	r0, r6
 804a080:	f003 fed5 	bl	804de2e <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 804a084:	2303      	movs	r3, #3
 804a086:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 804a08a:	2300      	movs	r3, #0
 804a08c:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 804a090:	f8c4 6428 	str.w	r6, [r4, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 804a094:	f884 842c 	strb.w	r8, [r4, #1068]	; 0x42c
 804a098:	e7d8      	b.n	804a04c <LoRaMacProcess+0x718>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 804a09a:	2301      	movs	r3, #1
 804a09c:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
            PrepareRxDoneAbort( );
 804a0a0:	f7fe fae2 	bl	8048668 <PrepareRxDoneAbort>
 804a0a4:	e670      	b.n	8049d88 <LoRaMacProcess+0x454>
        if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 804a0a6:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 804a0aa:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 804a0ae:	2b02      	cmp	r3, #2
 804a0b0:	f47f ae75 	bne.w	8049d9e <LoRaMacProcess+0x46a>
 804a0b4:	e670      	b.n	8049d98 <LoRaMacProcess+0x464>
 804a0b6:	bf00      	nop
 804a0b8:	2000aa08 	.word	0x2000aa08
 804a0bc:	08051f72 	.word	0x08051f72
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 804a0c0:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 804a0c4:	075d      	lsls	r5, r3, #29
 804a0c6:	d50f      	bpl.n	804a0e8 <LoRaMacProcess+0x7b4>
        if( ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 804a0c8:	2000      	movs	r0, #0
 804a0ca:	f001 fa17 	bl	804b4fc <LoRaMacConfirmQueueIsCmdActive>
 804a0ce:	b390      	cbz	r0, 804a136 <LoRaMacProcess+0x802>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 804a0d0:	2000      	movs	r0, #0
 804a0d2:	f001 f9e1 	bl	804b498 <LoRaMacConfirmQueueGetStatus>
 804a0d6:	b908      	cbnz	r0, 804a0dc <LoRaMacProcess+0x7a8>
                MacCtx.ChannelsNbTransCounter = 0;
 804a0d8:	f884 0414 	strb.w	r0, [r4, #1044]	; 0x414
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 804a0dc:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 804a0e0:	f023 0302 	bic.w	r3, r3, #2
 804a0e4:	f8c4 3344 	str.w	r3, [r4, #836]	; 0x344
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 804a0e8:	f894 1485 	ldrb.w	r1, [r4, #1157]	; 0x485
 804a0ec:	07c8      	lsls	r0, r1, #31
 804a0ee:	f57f ad1b 	bpl.w	8049b28 <LoRaMacProcess+0x1f4>
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 804a0f2:	f894 3440 	ldrb.w	r3, [r4, #1088]	; 0x440
 804a0f6:	b10b      	cbz	r3, 804a0fc <LoRaMacProcess+0x7c8>
 804a0f8:	2b03      	cmp	r3, #3
 804a0fa:	d127      	bne.n	804a14c <LoRaMacProcess+0x818>
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 804a0fc:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    if( MacCtx.ChannelsNbTransCounter >=
 804a100:	f894 0414 	ldrb.w	r0, [r4, #1044]	; 0x414
 804a104:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 804a108:	4290      	cmp	r0, r2
 804a10a:	d208      	bcs.n	804a11e <LoRaMacProcess+0x7ea>
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 804a10c:	078a      	lsls	r2, r1, #30
 804a10e:	d552      	bpl.n	804a1b6 <LoRaMacProcess+0x882>
        if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 804a110:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 804a114:	b11b      	cbz	r3, 804a11e <LoRaMacProcess+0x7ea>
            if( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 )
 804a116:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
 804a11a:	2b00      	cmp	r3, #0
 804a11c:	d14b      	bne.n	804a1b6 <LoRaMacProcess+0x882>
            TimerStop( &MacCtx.TxDelayedTimer );
 804a11e:	4839      	ldr	r0, [pc, #228]	; (804a204 <LoRaMacProcess+0x8d0>)
 804a120:	f003 fd96 	bl	804dc50 <TimerStop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 804a124:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 804a128:	f023 0320 	bic.w	r3, r3, #32
 804a12c:	f8c4 3344 	str.w	r3, [r4, #836]	; 0x344
            StopRetransmission( );
 804a130:	f7fe fa14 	bl	804855c <StopRetransmission>
 804a134:	e4f8      	b.n	8049b28 <LoRaMacProcess+0x1f4>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 804a136:	2004      	movs	r0, #4
 804a138:	f001 f9e0 	bl	804b4fc <LoRaMacConfirmQueueIsCmdActive>
 804a13c:	2800      	cmp	r0, #0
 804a13e:	d1cd      	bne.n	804a0dc <LoRaMacProcess+0x7a8>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 804a140:	2005      	movs	r0, #5
 804a142:	f001 f9db 	bl	804b4fc <LoRaMacConfirmQueueIsCmdActive>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 804a146:	2800      	cmp	r0, #0
 804a148:	d1c8      	bne.n	804a0dc <LoRaMacProcess+0x7a8>
 804a14a:	e7cd      	b.n	804a0e8 <LoRaMacProcess+0x7b4>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 804a14c:	2b01      	cmp	r3, #1
 804a14e:	d132      	bne.n	804a1b6 <LoRaMacProcess+0x882>
            if( MacCtx.AckTimeoutRetry == true )
 804a150:	f894 2417 	ldrb.w	r2, [r4, #1047]	; 0x417
 804a154:	2a00      	cmp	r2, #0
 804a156:	f43f ace7 	beq.w	8049b28 <LoRaMacProcess+0x1f4>
    if( MacCtx.AckTimeoutRetriesCounter >=
 804a15a:	f894 3416 	ldrb.w	r3, [r4, #1046]	; 0x416
        MacCtx.AckTimeoutRetries )
 804a15e:	f894 5415 	ldrb.w	r5, [r4, #1045]	; 0x415
    if( MacCtx.AckTimeoutRetriesCounter >=
 804a162:	42ab      	cmp	r3, r5
 804a164:	d204      	bcs.n	804a170 <LoRaMacProcess+0x83c>
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 804a166:	f011 0202 	ands.w	r2, r1, #2
        if( MacCtx.McpsConfirm.AckReceived == true )
 804a16a:	bf18      	it	ne
 804a16c:	f894 2444 	ldrbne.w	r2, [r4, #1092]	; 0x444
                if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 804a170:	f8d4 0488 	ldr.w	r0, [r4, #1160]	; 0x488
 804a174:	f890 11d2 	ldrb.w	r1, [r0, #466]	; 0x1d2
 804a178:	2900      	cmp	r1, #0
 804a17a:	d13f      	bne.n	804a1fc <LoRaMacProcess+0x8c8>
                    if( stopRetransmission == false )
 804a17c:	bb3a      	cbnz	r2, 804a1ce <LoRaMacProcess+0x89a>
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 804a17e:	42ab      	cmp	r3, r5
 804a180:	d219      	bcs.n	804a1b6 <LoRaMacProcess+0x882>
        MacCtx.AckTimeoutRetriesCounter++;
 804a182:	3301      	adds	r3, #1
 804a184:	b2db      	uxtb	r3, r3
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 804a186:	07df      	lsls	r7, r3, #31
        MacCtx.AckTimeoutRetriesCounter++;
 804a188:	f884 3416 	strb.w	r3, [r4, #1046]	; 0x416
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 804a18c:	d513      	bpl.n	804a1b6 <LoRaMacProcess+0x882>
            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 804a18e:	2322      	movs	r3, #34	; 0x22
 804a190:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 804a194:	f890 312c 	ldrb.w	r3, [r0, #300]	; 0x12c
 804a198:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
            getPhy.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 804a19c:	f890 30f9 	ldrb.w	r3, [r0, #249]	; 0xf9
 804a1a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a1a4:	a90a      	add	r1, sp, #40	; 0x28
 804a1a6:	7800      	ldrb	r0, [r0, #0]
 804a1a8:	f001 ff59 	bl	804c05e <RegionGetPhyParam>
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 804a1ac:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a1b0:	9014      	str	r0, [sp, #80]	; 0x50
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 804a1b2:	f883 00f9 	strb.w	r0, [r3, #249]	; 0xf9
            MacCtx.MacFlags.Bits.MacDone = 0;
 804a1b6:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
            MacCtx.AckTimeoutRetry = false;
 804a1ba:	2000      	movs	r0, #0
            MacCtx.MacFlags.Bits.MacDone = 0;
 804a1bc:	f36f 1345 	bfc	r3, #5, #1
 804a1c0:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
            MacCtx.AckTimeoutRetry = false;
 804a1c4:	f884 0417 	strb.w	r0, [r4, #1047]	; 0x417
            OnTxDelayedTimerEvent( NULL );
 804a1c8:	f7ff f9ec 	bl	80495a4 <OnTxDelayedTimerEvent>
 804a1cc:	e4ac      	b.n	8049b28 <LoRaMacProcess+0x1f4>
    if( MacCtx.McpsConfirm.AckReceived == false )
 804a1ce:	f894 5444 	ldrb.w	r5, [r4, #1092]	; 0x444
 804a1d2:	b975      	cbnz	r5, 804a1f2 <LoRaMacProcess+0x8be>
        params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 804a1d4:	2301      	movs	r3, #1
 804a1d6:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
        params.NvmCtx = Contexts.RegionNvmCtx;
 804a1da:	4b0b      	ldr	r3, [pc, #44]	; (804a208 <LoRaMacProcess+0x8d4>)
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 804a1dc:	7800      	ldrb	r0, [r0, #0]
        params.NvmCtx = Contexts.RegionNvmCtx;
 804a1de:	689b      	ldr	r3, [r3, #8]
 804a1e0:	a920      	add	r1, sp, #128	; 0x80
 804a1e2:	f841 3d30 	str.w	r3, [r1, #-48]!
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 804a1e6:	f001 ff4a 	bl	804c07e <RegionInitDefaults>
        MacCtx.NodeAckRequested = false;
 804a1ea:	f884 5418 	strb.w	r5, [r4, #1048]	; 0x418
        MacCtx.McpsConfirm.AckReceived = false;
 804a1ee:	f884 5444 	strb.w	r5, [r4, #1092]	; 0x444
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 804a1f2:	f894 3416 	ldrb.w	r3, [r4, #1046]	; 0x416
 804a1f6:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
 804a1fa:	e790      	b.n	804a11e <LoRaMacProcess+0x7ea>
        if( stopRetransmission == true )
 804a1fc:	2a00      	cmp	r2, #0
 804a1fe:	d0da      	beq.n	804a1b6 <LoRaMacProcess+0x882>
 804a200:	e78d      	b.n	804a11e <LoRaMacProcess+0x7ea>
 804a202:	bf00      	nop
 804a204:	2000ab38 	.word	0x2000ab38
 804a208:	2000de10 	.word	0x2000de10

0804a20c <LoRaMacInitialization>:
    return 0;
}


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 804a20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804a210:	4688      	mov	r8, r1
 804a212:	b08f      	sub	sp, #60	; 0x3c
 804a214:	4692      	mov	sl, r2
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( ( primitives == NULL ) ||
 804a216:	4607      	mov	r7, r0
 804a218:	2800      	cmp	r0, #0
 804a21a:	f000 81da 	beq.w	804a5d2 <LoRaMacInitialization+0x3c6>
 804a21e:	2900      	cmp	r1, #0
 804a220:	f000 81d7 	beq.w	804a5d2 <LoRaMacInitialization+0x3c6>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 804a224:	6803      	ldr	r3, [r0, #0]
 804a226:	2b00      	cmp	r3, #0
 804a228:	f000 81d3 	beq.w	804a5d2 <LoRaMacInitialization+0x3c6>
 804a22c:	6843      	ldr	r3, [r0, #4]
 804a22e:	2b00      	cmp	r3, #0
 804a230:	f000 81cf 	beq.w	804a5d2 <LoRaMacInitialization+0x3c6>
        ( primitives->MacMcpsIndication == NULL ) ||
 804a234:	6883      	ldr	r3, [r0, #8]
 804a236:	2b00      	cmp	r3, #0
 804a238:	f000 81cb 	beq.w	804a5d2 <LoRaMacInitialization+0x3c6>
        ( primitives->MacMlmeConfirm == NULL ) ||
 804a23c:	68c3      	ldr	r3, [r0, #12]
 804a23e:	2b00      	cmp	r3, #0
 804a240:	f000 81c7 	beq.w	804a5d2 <LoRaMacInitialization+0x3c6>
        ( primitives->MacMlmeIndication == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 804a244:	4610      	mov	r0, r2
 804a246:	f001 ff06 	bl	804c056 <RegionIsActive>
 804a24a:	2800      	cmp	r0, #0
 804a24c:	f000 81c3 	beq.w	804a5d6 <LoRaMacInitialization+0x3ca>

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
 804a250:	4cb0      	ldr	r4, [pc, #704]	; (804a514 <LoRaMacInitialization+0x308>)
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );
 804a252:	49b1      	ldr	r1, [pc, #708]	; (804a518 <LoRaMacInitialization+0x30c>)
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
 804a254:	f204 458c 	addw	r5, r4, #1164	; 0x48c
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );
 804a258:	4638      	mov	r0, r7
 804a25a:	f001 f8a9 	bl	804b3b0 <LoRaMacConfirmQueueInit>
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
 804a25e:	4628      	mov	r0, r5
 804a260:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 804a264:	2100      	movs	r1, #0
 804a266:	f003 fdf6 	bl	804de56 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 804a26a:	f44f 6291 	mov.w	r2, #1160	; 0x488
 804a26e:	2100      	movs	r1, #0
 804a270:	1d20      	adds	r0, r4, #4
 804a272:	f003 fdf0 	bl	804de56 <memset1>
    MacCtx.NvmCtx = &NvmMacCtx;
 804a276:	f8c4 5488 	str.w	r5, [r4, #1160]	; 0x488
    Version_t lrWanVersion;
    lrWanVersion.Fields.Major    = 1;
    lrWanVersion.Fields.Minor    = 0;
    lrWanVersion.Fields.Revision = 3;
    lrWanVersion.Fields.Rfu      = 0;
    MacCtx.NvmCtx->Version = lrWanVersion;
 804a27a:	4ba8      	ldr	r3, [pc, #672]	; (804a51c <LoRaMacInitialization+0x310>)
 804a27c:	f8c4 365c 	str.w	r3, [r4, #1628]	; 0x65c

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 804a280:	ad0e      	add	r5, sp, #56	; 0x38
 804a282:	230f      	movs	r3, #15
 804a284:	f805 3d38 	strb.w	r3, [r5, #-56]!
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 804a288:	2600      	movs	r6, #0
    MacCtx.AckTimeoutRetriesCounter = 1;
 804a28a:	f04f 0901 	mov.w	r9, #1
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a28e:	4629      	mov	r1, r5
 804a290:	4650      	mov	r0, sl
    MacCtx.NvmCtx->Region = region;
 804a292:	f884 a48c 	strb.w	sl, [r4, #1164]	; 0x48c
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 804a296:	f884 657c 	strb.w	r6, [r4, #1404]	; 0x57c
    MacCtx.NvmCtx->RepeaterSupport = false;
 804a29a:	f884 65cb 	strb.w	r6, [r4, #1483]	; 0x5cb
    MacCtx.AckTimeoutRetriesCounter = 1;
 804a29e:	f884 9416 	strb.w	r9, [r4, #1046]	; 0x416
    MacCtx.AckTimeoutRetries = 1;
 804a2a2:	f884 9415 	strb.w	r9, [r4, #1045]	; 0x415
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a2a6:	f001 feda 	bl	804c05e <RegionGetPhyParam>
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 804a2aa:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a2ae:	9001      	str	r0, [sp, #4]
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 804a2b0:	1b80      	subs	r0, r0, r6
 804a2b2:	bf18      	it	ne
 804a2b4:	2001      	movne	r0, #1

    getPhy.Attribute = PHY_DEF_TX_POWER;
 804a2b6:	220a      	movs	r2, #10
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 804a2b8:	f883 013d 	strb.w	r0, [r3, #317]	; 0x13d
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a2bc:	4629      	mov	r1, r5
 804a2be:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_TX_POWER;
 804a2c0:	f88d 2000 	strb.w	r2, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a2c4:	f001 fecb 	bl	804c05e <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 804a2c8:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a2cc:	9001      	str	r0, [sp, #4]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 804a2ce:	7118      	strb	r0, [r3, #4]

    getPhy.Attribute = PHY_DEF_TX_DR;
 804a2d0:	f04f 0a06 	mov.w	sl, #6
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a2d4:	4629      	mov	r1, r5
 804a2d6:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_TX_DR;
 804a2d8:	f88d a000 	strb.w	sl, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a2dc:	f001 febf 	bl	804c05e <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 804a2e0:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a2e4:	9001      	str	r0, [sp, #4]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 804a2e6:	7158      	strb	r0, [r3, #5]

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 804a2e8:	2210      	movs	r2, #16
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a2ea:	4629      	mov	r1, r5
 804a2ec:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 804a2ee:	f88d 2000 	strb.w	r2, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a2f2:	f001 feb4 	bl	804c05e <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 804a2f6:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a2fa:	9001      	str	r0, [sp, #4]
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 804a2fc:	6118      	str	r0, [r3, #16]

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 804a2fe:	2211      	movs	r2, #17
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a300:	4629      	mov	r1, r5
 804a302:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 804a304:	f88d 2000 	strb.w	r2, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a308:	f001 fea9 	bl	804c05e <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 804a30c:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a310:	9001      	str	r0, [sp, #4]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 804a312:	6158      	str	r0, [r3, #20]

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 804a314:	2212      	movs	r2, #18
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a316:	4629      	mov	r1, r5
 804a318:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 804a31a:	f88d 2000 	strb.w	r2, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a31e:	f001 fe9e 	bl	804c05e <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 804a322:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a326:	9001      	str	r0, [sp, #4]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 804a328:	2213      	movs	r2, #19
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 804a32a:	6198      	str	r0, [r3, #24]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a32c:	4629      	mov	r1, r5
 804a32e:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 804a330:	f88d 2000 	strb.w	r2, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a334:	f001 fe93 	bl	804c05e <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 804a338:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a33c:	9001      	str	r0, [sp, #4]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 804a33e:	61d8      	str	r0, [r3, #28]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 804a340:	f04f 0b14 	mov.w	fp, #20
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a344:	4629      	mov	r1, r5
 804a346:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 804a348:	f88d b000 	strb.w	fp, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a34c:	f001 fe87 	bl	804c05e <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 804a350:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a354:	9001      	str	r0, [sp, #4]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 804a356:	6218      	str	r0, [r3, #32]

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 804a358:	2217      	movs	r2, #23
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a35a:	4629      	mov	r1, r5
 804a35c:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 804a35e:	f88d 2000 	strb.w	r2, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a362:	f001 fe7c 	bl	804c05e <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 804a366:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a36a:	9001      	str	r0, [sp, #4]
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 804a36c:	f883 0025 	strb.w	r0, [r3, #37]	; 0x25

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 804a370:	2218      	movs	r2, #24
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a372:	4629      	mov	r1, r5
 804a374:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 804a376:	f88d 2000 	strb.w	r2, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a37a:	f001 fe70 	bl	804c05e <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 804a37e:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a382:	9001      	str	r0, [sp, #4]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 804a384:	6298      	str	r0, [r3, #40]	; 0x28
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 804a386:	6318      	str	r0, [r3, #48]	; 0x30

    getPhy.Attribute = PHY_DEF_RX2_DR;
 804a388:	2219      	movs	r2, #25
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a38a:	4629      	mov	r1, r5
 804a38c:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_RX2_DR;
 804a38e:	f88d 2000 	strb.w	r2, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a392:	f001 fe64 	bl	804c05e <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 804a396:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a39a:	9001      	str	r0, [sp, #4]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 804a39c:	b2c0      	uxtb	r0, r0
 804a39e:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 804a3a2:	f883 0034 	strb.w	r0, [r3, #52]	; 0x34

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 804a3a6:	221e      	movs	r2, #30
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a3a8:	4629      	mov	r1, r5
 804a3aa:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 804a3ac:	f88d 2000 	strb.w	r2, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a3b0:	f001 fe55 	bl	804c05e <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 804a3b4:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a3b8:	9001      	str	r0, [sp, #4]
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 804a3ba:	f883 0038 	strb.w	r0, [r3, #56]	; 0x38

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 804a3be:	221f      	movs	r2, #31
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a3c0:	4629      	mov	r1, r5
 804a3c2:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 804a3c4:	f88d 2000 	strb.w	r2, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a3c8:	f001 fe49 	bl	804c05e <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 804a3cc:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a3d0:	9001      	str	r0, [sp, #4]
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 804a3d2:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 804a3d6:	2220      	movs	r2, #32
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a3d8:	4629      	mov	r1, r5
 804a3da:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 804a3dc:	f88d 2000 	strb.w	r2, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a3e0:	f001 fe3d 	bl	804c05e <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 804a3e4:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a3e8:	9001      	str	r0, [sp, #4]
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 804a3ea:	9a01      	ldr	r2, [sp, #4]
 804a3ec:	63da      	str	r2, [r3, #60]	; 0x3c

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a3ee:	4629      	mov	r1, r5
    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 804a3f0:	2221      	movs	r2, #33	; 0x21
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a3f2:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 804a3f4:	f88d 2000 	strb.w	r2, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a3f8:	f001 fe31 	bl	804c05e <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 804a3fc:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a400:	9001      	str	r0, [sp, #4]
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 804a402:	9a01      	ldr	r2, [sp, #4]
 804a404:	641a      	str	r2, [r3, #64]	; 0x40

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a406:	4629      	mov	r1, r5
    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 804a408:	220b      	movs	r2, #11
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a40a:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 804a40c:	f88d 2000 	strb.w	r2, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a410:	f001 fe25 	bl	804c05e <RegionGetPhyParam>
    MacCtx.AdrAckLimit = phyParam.Value;

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 804a414:	230c      	movs	r3, #12
 804a416:	f88d 3000 	strb.w	r3, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a41a:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a41e:	9001      	str	r0, [sp, #4]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a420:	4629      	mov	r1, r5
    MacCtx.AdrAckLimit = phyParam.Value;
 804a422:	f8a4 03f8 	strh.w	r0, [r4, #1016]	; 0x3f8
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a426:	7818      	ldrb	r0, [r3, #0]
 804a428:	f001 fe19 	bl	804c05e <RegionGetPhyParam>
    MacCtx.AdrAckDelay = phyParam.Value;

    // Init parameters which are not set in function ResetMacParameters
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 804a42c:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    MacCtx.AdrAckDelay = phyParam.Value;
 804a430:	f8a4 03fa 	strh.w	r0, [r4, #1018]	; 0x3fa
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 20;
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;

    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
 804a434:	691a      	ldr	r2, [r3, #16]
 804a436:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1;
 804a43a:	695a      	ldr	r2, [r3, #20]
 804a43c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2;
 804a440:	699a      	ldr	r2, [r3, #24]
 804a442:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
 804a446:	69da      	ldr	r2, [r3, #28]
 804a448:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
 804a44c:	6a1a      	ldr	r2, [r3, #32]
 804a44e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 804a452:	f883 9024 	strb.w	r9, [r3, #36]	; 0x24
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 20;
 804a456:	f8c3 b008 	str.w	fp, [r3, #8]
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
 804a45a:	f883 a00c 	strb.w	sl, [r3, #12]
    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 804a45e:	f8c3 b0fc 	str.w	fp, [r3, #252]	; 0xfc
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
 804a462:	f883 a100 	strb.w	sl, [r3, #256]	; 0x100
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;
 804a466:	f883 9118 	strb.w	r9, [r3, #280]	; 0x118
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a46a:	9001      	str	r0, [sp, #4]

    ResetMacParameters( );
 804a46c:	f7fe f978 	bl	8048760 <ResetMacParameters>

    MacCtx.NvmCtx->PublicNetwork = true;
 804a470:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    // Reset duty cycle times
    MacCtx.NvmCtx->LastTxDoneTime = 0;
    MacCtx.NvmCtx->AggregatedTimeOff = 0;

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 804a474:	492a      	ldr	r1, [pc, #168]	; (804a520 <LoRaMacInitialization+0x314>)
    MacCtx.NvmCtx->PublicNetwork = true;
 804a476:	f883 90f1 	strb.w	r9, [r3, #241]	; 0xf1
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 804a47a:	f504 705b 	add.w	r0, r4, #876	; 0x36c
    MacCtx.MacFlags.Value = 0;
 804a47e:	f884 6485 	strb.w	r6, [r4, #1157]	; 0x485
    MacCtx.MacPrimitives = primitives;
 804a482:	f8c4 7348 	str.w	r7, [r4, #840]	; 0x348
    MacCtx.MacCallbacks = callbacks;
 804a486:	f8c4 834c 	str.w	r8, [r4, #844]	; 0x34c
    MacCtx.MacState = LORAMAC_STOPPED;
 804a48a:	f8c4 9344 	str.w	r9, [r4, #836]	; 0x344
    MacCtx.NvmCtx->LastTxDoneTime = 0;
 804a48e:	f8c3 61c4 	str.w	r6, [r3, #452]	; 0x1c4
    MacCtx.NvmCtx->AggregatedTimeOff = 0;
 804a492:	f8c3 61c8 	str.w	r6, [r3, #456]	; 0x1c8
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 804a496:	f003 fb5f 	bl	804db58 <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 804a49a:	4922      	ldr	r1, [pc, #136]	; (804a524 <LoRaMacInitialization+0x318>)
 804a49c:	f504 7061 	add.w	r0, r4, #900	; 0x384
 804a4a0:	f003 fb5a 	bl	804db58 <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 804a4a4:	4920      	ldr	r1, [pc, #128]	; (804a528 <LoRaMacInitialization+0x31c>)
 804a4a6:	f504 7067 	add.w	r0, r4, #924	; 0x39c
 804a4aa:	f003 fb55 	bl	804db58 <TimerInit>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 804a4ae:	491f      	ldr	r1, [pc, #124]	; (804a52c <LoRaMacInitialization+0x320>)
 804a4b0:	f504 707f 	add.w	r0, r4, #1020	; 0x3fc
 804a4b4:	f003 fb50 	bl	804db58 <TimerInit>

    // Store the current initialization time
    MacCtx.NvmCtx->InitializationTime = TimerGetCurrentTime( );
 804a4b8:	f8d4 5488 	ldr.w	r5, [r4, #1160]	; 0x488
 804a4bc:	f003 fc01 	bl	804dcc2 <TimerGetCurrentTime>

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 804a4c0:	4b1b      	ldr	r3, [pc, #108]	; (804a530 <LoRaMacInitialization+0x324>)
    MacCtx.NvmCtx->InitializationTime = TimerGetCurrentTime( );
 804a4c2:	f8c5 01cc 	str.w	r0, [r5, #460]	; 0x1cc
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 804a4c6:	f8c4 3350 	str.w	r3, [r4, #848]	; 0x350
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 804a4ca:	4b1a      	ldr	r3, [pc, #104]	; (804a534 <LoRaMacInitialization+0x328>)
 804a4cc:	f8c4 3358 	str.w	r3, [r4, #856]	; 0x358
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 804a4d0:	4b19      	ldr	r3, [pc, #100]	; (804a538 <LoRaMacInitialization+0x32c>)
 804a4d2:	f8c4 3360 	str.w	r3, [r4, #864]	; 0x360
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
    Radio.Init( &MacCtx.RadioEvents );
 804a4d6:	4d19      	ldr	r5, [pc, #100]	; (804a53c <LoRaMacInitialization+0x330>)
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 804a4d8:	4b19      	ldr	r3, [pc, #100]	; (804a540 <LoRaMacInitialization+0x334>)
 804a4da:	f8c4 3354 	str.w	r3, [r4, #852]	; 0x354
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 804a4de:	4b19      	ldr	r3, [pc, #100]	; (804a544 <LoRaMacInitialization+0x338>)
 804a4e0:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
    Radio.Init( &MacCtx.RadioEvents );
 804a4e4:	f504 7054 	add.w	r0, r4, #848	; 0x350
 804a4e8:	68ab      	ldr	r3, [r5, #8]
 804a4ea:	4798      	blx	r3

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_INIT;
    params.NvmCtx = NULL;
 804a4ec:	a90e      	add	r1, sp, #56	; 0x38
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 804a4ee:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    params.NvmCtx = NULL;
 804a4f2:	f841 6d28 	str.w	r6, [r1, #-40]!
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 804a4f6:	7818      	ldrb	r0, [r3, #0]
    params.Type = INIT_TYPE_INIT;
 804a4f8:	f88d 6014 	strb.w	r6, [sp, #20]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 804a4fc:	f001 fdbf 	bl	804c07e <RegionInitDefaults>

    // Initialize the Secure Element driver
    if( SecureElementInit( EventSecureElementNvmCtxChanged ) != SECURE_ELEMENT_SUCCESS )
 804a500:	4811      	ldr	r0, [pc, #68]	; (804a548 <LoRaMacInitialization+0x33c>)
 804a502:	f7fd fe89 	bl	8048218 <SecureElementInit>
 804a506:	462e      	mov	r6, r5
 804a508:	b300      	cbz	r0, 804a54c <LoRaMacInitialization+0x340>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 804a50a:	2011      	movs	r0, #17
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );

    return LORAMAC_STATUS_OK;
}
 804a50c:	b00f      	add	sp, #60	; 0x3c
 804a50e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804a512:	bf00      	nop
 804a514:	2000a7cc 	.word	0x2000a7cc
 804a518:	080485dd 	.word	0x080485dd
 804a51c:	01000300 	.word	0x01000300
 804a520:	080495a5 	.word	0x080495a5
 804a524:	08048af5 	.word	0x08048af5
 804a528:	08048b35 	.word	0x08048b35
 804a52c:	08048621 	.word	0x08048621
 804a530:	08048951 	.word	0x08048951
 804a534:	080488f1 	.word	0x080488f1
 804a538:	08048525 	.word	0x08048525
 804a53c:	08051928 	.word	0x08051928
 804a540:	080488ad 	.word	0x080488ad
 804a544:	08048869 	.word	0x08048869
 804a548:	080485cb 	.word	0x080485cb
    if( LoRaMacCryptoInit( EventCryptoNvmCtxChanged ) != LORAMAC_CRYPTO_SUCCESS )
 804a54c:	4824      	ldr	r0, [pc, #144]	; (804a5e0 <LoRaMacInitialization+0x3d4>)
 804a54e:	f001 f979 	bl	804b844 <LoRaMacCryptoInit>
 804a552:	2800      	cmp	r0, #0
 804a554:	d1d9      	bne.n	804a50a <LoRaMacInitialization+0x2fe>
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 804a556:	4823      	ldr	r0, [pc, #140]	; (804a5e4 <LoRaMacInitialization+0x3d8>)
 804a558:	f000 fe18 	bl	804b18c <LoRaMacCommandsInit>
 804a55c:	2800      	cmp	r0, #0
 804a55e:	d13c      	bne.n	804a5da <LoRaMacInitialization+0x3ce>
    if( LoRaMacCryptoSetMulticastReference( MacCtx.NvmCtx->MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 804a560:	f8d4 0488 	ldr.w	r0, [r4, #1160]	; 0x488
 804a564:	3050      	adds	r0, #80	; 0x50
 804a566:	f001 f9f7 	bl	804b958 <LoRaMacCryptoSetMulticastReference>
 804a56a:	4605      	mov	r5, r0
 804a56c:	2800      	cmp	r0, #0
 804a56e:	d1cc      	bne.n	804a50a <LoRaMacInitialization+0x2fe>
    srand1( Radio.Random( ) );
 804a570:	69f3      	ldr	r3, [r6, #28]
 804a572:	4798      	blx	r3
 804a574:	f003 fc48 	bl	804de08 <srand1>
    Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 804a578:	f8d4 2488 	ldr.w	r2, [r4, #1160]	; 0x488
 804a57c:	6e33      	ldr	r3, [r6, #96]	; 0x60
 804a57e:	f892 00f1 	ldrb.w	r0, [r2, #241]	; 0xf1
 804a582:	4798      	blx	r3
    Radio.Sleep( );
 804a584:	6b73      	ldr	r3, [r6, #52]	; 0x34
 804a586:	4798      	blx	r3
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 804a588:	f8d8 3004 	ldr.w	r3, [r8, #4]
 804a58c:	9302      	str	r3, [sp, #8]
        classBCallbacks.MacProcessNotify = callbacks->MacProcessNotify;
 804a58e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 804a592:	9303      	str	r3, [sp, #12]
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 804a594:	4b14      	ldr	r3, [pc, #80]	; (804a5e8 <LoRaMacInitialization+0x3dc>)
 804a596:	9306      	str	r3, [sp, #24]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 804a598:	f1a3 0248 	sub.w	r2, r3, #72	; 0x48
 804a59c:	9207      	str	r2, [sp, #28]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 804a59e:	f1a3 0214 	sub.w	r2, r3, #20
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 804a5a2:	331d      	adds	r3, #29
 804a5a4:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.LoRaMacDevAddr = &MacCtx.NvmCtx->DevAddr;
 804a5a6:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 804a5aa:	9208      	str	r2, [sp, #32]
    classBParams.LoRaMacDevAddr = &MacCtx.NvmCtx->DevAddr;
 804a5ac:	f103 024c 	add.w	r2, r3, #76	; 0x4c
    classBParams.LoRaMacRegion = &MacCtx.NvmCtx->Region;
 804a5b0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    classBParams.LoRaMacParams = &MacCtx.NvmCtx->MacParams;
 804a5b4:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 804a5b8:	920c      	str	r2, [sp, #48]	; 0x30
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
 804a5ba:	3350      	adds	r3, #80	; 0x50
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 804a5bc:	a806      	add	r0, sp, #24
 804a5be:	4a0b      	ldr	r2, [pc, #44]	; (804a5ec <LoRaMacInitialization+0x3e0>)
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
 804a5c0:	930d      	str	r3, [sp, #52]	; 0x34
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 804a5c2:	a902      	add	r1, sp, #8
 804a5c4:	f000 fdad 	bl	804b122 <LoRaMacClassBInit>
    MacCtx.AllowRequests = requestState;
 804a5c8:	2301      	movs	r3, #1
 804a5ca:	f884 3486 	strb.w	r3, [r4, #1158]	; 0x486
    return LORAMAC_STATUS_OK;
 804a5ce:	4628      	mov	r0, r5
 804a5d0:	e79c      	b.n	804a50c <LoRaMacInitialization+0x300>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 804a5d2:	2003      	movs	r0, #3
 804a5d4:	e79a      	b.n	804a50c <LoRaMacInitialization+0x300>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 804a5d6:	2009      	movs	r0, #9
 804a5d8:	e798      	b.n	804a50c <LoRaMacInitialization+0x300>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 804a5da:	2013      	movs	r0, #19
 804a5dc:	e796      	b.n	804a50c <LoRaMacInitialization+0x300>
 804a5de:	bf00      	nop
 804a5e0:	080485c5 	.word	0x080485c5
 804a5e4:	080485d1 	.word	0x080485d1
 804a5e8:	2000ac34 	.word	0x2000ac34
 804a5ec:	080485d7 	.word	0x080485d7

0804a5f0 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 804a5f0:	4b02      	ldr	r3, [pc, #8]	; (804a5fc <LoRaMacStart+0xc>)
 804a5f2:	2000      	movs	r0, #0
 804a5f4:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
    return LORAMAC_STATUS_OK;
}
 804a5f8:	4770      	bx	lr
 804a5fa:	bf00      	nop
 804a5fc:	2000a7cc 	.word	0x2000a7cc

0804a600 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 804a600:	b570      	push	{r4, r5, r6, lr}
 804a602:	4605      	mov	r5, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 804a604:	482c      	ldr	r0, [pc, #176]	; (804a6b8 <LoRaMacQueryTxPossible+0xb8>)
 804a606:	f8d0 3488 	ldr.w	r3, [r0, #1160]	; 0x488
{
 804a60a:	b088      	sub	sp, #32
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 804a60c:	795a      	ldrb	r2, [r3, #5]
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 804a60e:	f8d3 60f4 	ldr.w	r6, [r3, #244]	; 0xf4
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 804a612:	f88d 2002 	strb.w	r2, [sp, #2]
    int8_t txPower = TX_POWER_0/*MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower*/;
 804a616:	2200      	movs	r2, #0
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 804a618:	9601      	str	r6, [sp, #4]
    int8_t txPower = TX_POWER_0/*MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower*/;
 804a61a:	f88d 2003 	strb.w	r2, [sp, #3]
    size_t macCmdsSize = 0;
 804a61e:	9202      	str	r2, [sp, #8]

    if( txInfo == NULL )
 804a620:	460c      	mov	r4, r1
 804a622:	b929      	cbnz	r1, 804a630 <LoRaMacQueryTxPossible+0x30>
    {
    	PRINTF("Invalid");
 804a624:	4825      	ldr	r0, [pc, #148]	; (804a6bc <LoRaMacQueryTxPossible+0xbc>)
 804a626:	f003 fb9d 	bl	804dd64 <TraceSend>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 804a62a:	2003      	movs	r0, #3
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 804a62c:	b008      	add	sp, #32
 804a62e:	bd70      	pop	{r4, r5, r6, pc}
    adrNext.Version = MacCtx.NvmCtx->Version;
 804a630:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
 804a634:	9103      	str	r1, [sp, #12]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 804a636:	f893 10f2 	ldrb.w	r1, [r3, #242]	; 0xf2
 804a63a:	f88d 1011 	strb.w	r1, [sp, #17]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 804a63e:	f8b0 13f8 	ldrh.w	r1, [r0, #1016]	; 0x3f8
 804a642:	f8ad 1018 	strh.w	r1, [sp, #24]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 804a646:	f8b0 13fa 	ldrh.w	r1, [r0, #1018]	; 0x3fa
    adrNext.TxPower = TX_POWER_0/*MacCtx.NvmCtx->MacParams.ChannelsTxPower*/;
 804a64a:	f88d 201d 	strb.w	r2, [sp, #29]
    adrNext.UpdateChanMask = false;
 804a64e:	f88d 2010 	strb.w	r2, [sp, #16]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 804a652:	f8ad 101a 	strh.w	r1, [sp, #26]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 804a656:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 804a65a:	f893 10f9 	ldrb.w	r1, [r3, #249]	; 0xf9
 804a65e:	f88d 101c 	strb.w	r1, [sp, #28]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 804a662:	f88d 201e 	strb.w	r2, [sp, #30]
    adrNext.Region = MacCtx.NvmCtx->Region;
 804a666:	781b      	ldrb	r3, [r3, #0]
 804a668:	f88d 301f 	strb.w	r3, [sp, #31]
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 804a66c:	f10d 0203 	add.w	r2, sp, #3
 804a670:	ab01      	add	r3, sp, #4
 804a672:	f10d 0102 	add.w	r1, sp, #2
 804a676:	a803      	add	r0, sp, #12
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 804a678:	9605      	str	r6, [sp, #20]
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 804a67a:	f000 fceb 	bl	804b054 <LoRaMacAdrCalcNext>
    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 804a67e:	f99d 0002 	ldrsb.w	r0, [sp, #2]
 804a682:	f7fd ffaf 	bl	80485e4 <GetMaxAppPayloadWithoutFOptsLength>
 804a686:	7060      	strb	r0, [r4, #1]
    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 804a688:	a802      	add	r0, sp, #8
 804a68a:	f000 fe51 	bl	804b330 <LoRaMacCommandsGetSizeSerializedCmds>
 804a68e:	b988      	cbnz	r0, 804a6b4 <LoRaMacQueryTxPossible+0xb4>
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 804a690:	9b02      	ldr	r3, [sp, #8]
 804a692:	2b0f      	cmp	r3, #15
 804a694:	d80a      	bhi.n	804a6ac <LoRaMacQueryTxPossible+0xac>
 804a696:	7860      	ldrb	r0, [r4, #1]
 804a698:	4283      	cmp	r3, r0
 804a69a:	d807      	bhi.n	804a6ac <LoRaMacQueryTxPossible+0xac>
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 804a69c:	1ac2      	subs	r2, r0, r3
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 804a69e:	442b      	add	r3, r5
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 804a6a0:	7022      	strb	r2, [r4, #0]
           return LORAMAC_STATUS_LENGTH_ERROR;
 804a6a2:	4298      	cmp	r0, r3
 804a6a4:	bf34      	ite	cc
 804a6a6:	2008      	movcc	r0, #8
 804a6a8:	2000      	movcs	r0, #0
 804a6aa:	e7bf      	b.n	804a62c <LoRaMacQueryTxPossible+0x2c>
        txInfo->MaxPossibleApplicationDataSize = 0;
 804a6ac:	2300      	movs	r3, #0
 804a6ae:	7023      	strb	r3, [r4, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 804a6b0:	2008      	movs	r0, #8
 804a6b2:	e7bb      	b.n	804a62c <LoRaMacQueryTxPossible+0x2c>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 804a6b4:	2013      	movs	r0, #19
 804a6b6:	e7b9      	b.n	804a62c <LoRaMacQueryTxPossible+0x2c>
 804a6b8:	2000a7cc 	.word	0x2000a7cc
 804a6bc:	08051f98 	.word	0x08051f98

0804a6c0 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 804a6c0:	b513      	push	{r0, r1, r4, lr}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 804a6c2:	4604      	mov	r4, r0
 804a6c4:	2800      	cmp	r0, #0
 804a6c6:	f000 80d3 	beq.w	804a870 <LoRaMacMibGetRequestConfirm+0x1b0>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 804a6ca:	7803      	ldrb	r3, [r0, #0]
 804a6cc:	2b34      	cmp	r3, #52	; 0x34
 804a6ce:	f200 80cc 	bhi.w	804a86a <LoRaMacMibGetRequestConfirm+0x1aa>
 804a6d2:	e8df f003 	tbb	[pc, r3]
 804a6d6:	231b      	.short	0x231b
 804a6d8:	36302d29 	.word	0x36302d29
 804a6dc:	cacaca3c 	.word	0xcacaca3c
 804a6e0:	cacacaca 	.word	0xcacacaca
 804a6e4:	cacacaca 	.word	0xcacacaca
 804a6e8:	cacacaca 	.word	0xcacacaca
 804a6ec:	cacacaca 	.word	0xcacacaca
 804a6f0:	41cacaca 	.word	0x41cacaca
 804a6f4:	63584d47 	.word	0x63584d47
 804a6f8:	76797069 	.word	0x76797069
 804a6fc:	8e88827c 	.word	0x8e88827c
 804a700:	a5a09a94 	.word	0xa5a09a94
 804a704:	b5afabab 	.word	0xb5afabab
 804a708:	c5bb      	.short	0xc5bb
 804a70a:	c2          	.byte	0xc2
 804a70b:	00          	.byte	0x00
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = MacCtx.NvmCtx->DeviceClass;
 804a70c:	4b59      	ldr	r3, [pc, #356]	; (804a874 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804a70e:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804a712:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
            break;
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = MacCtx.NvmCtx->NetworkActivation;
 804a716:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 804a718:	2000      	movs	r0, #0
            break;
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
            break;
 804a71a:	e089      	b.n	804a830 <LoRaMacMibGetRequestConfirm+0x170>
            mibGet->Param.NetworkActivation = MacCtx.NvmCtx->NetworkActivation;
 804a71c:	4b55      	ldr	r3, [pc, #340]	; (804a874 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804a71e:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804a722:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
 804a726:	e7f6      	b.n	804a716 <LoRaMacMibGetRequestConfirm+0x56>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 804a728:	f7fd fee2 	bl	80484f0 <SecureElementGetDevEui>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 804a72c:	6060      	str	r0, [r4, #4]
 804a72e:	e7f3      	b.n	804a718 <LoRaMacMibGetRequestConfirm+0x58>
 804a730:	f7fd fef4 	bl	804851c <SecureElementGetJoinEui>
 804a734:	e7fa      	b.n	804a72c <LoRaMacMibGetRequestConfirm+0x6c>
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 804a736:	4b4f      	ldr	r3, [pc, #316]	; (804a874 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804a738:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804a73c:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
 804a740:	e7e9      	b.n	804a716 <LoRaMacMibGetRequestConfirm+0x56>
            mibGet->Param.NetID = MacCtx.NvmCtx->NetID;
 804a742:	4b4c      	ldr	r3, [pc, #304]	; (804a874 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804a744:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804a748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 804a74a:	6063      	str	r3, [r4, #4]
 804a74c:	e7e4      	b.n	804a718 <LoRaMacMibGetRequestConfirm+0x58>
            mibGet->Param.DevAddr = MacCtx.NvmCtx->DevAddr;
 804a74e:	4b49      	ldr	r3, [pc, #292]	; (804a874 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804a750:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804a754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804a756:	e7f8      	b.n	804a74a <LoRaMacMibGetRequestConfirm+0x8a>
            mibGet->Param.EnablePublicNetwork = MacCtx.NvmCtx->PublicNetwork;
 804a758:	4b46      	ldr	r3, [pc, #280]	; (804a874 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804a75a:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804a75e:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
 804a762:	e7d8      	b.n	804a716 <LoRaMacMibGetRequestConfirm+0x56>
            mibGet->Param.EnableRepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 804a764:	4b43      	ldr	r3, [pc, #268]	; (804a874 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804a766:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804a76a:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 804a76e:	e7d2      	b.n	804a716 <LoRaMacMibGetRequestConfirm+0x56>
            getPhy.Attribute = PHY_CHANNELS;
 804a770:	a902      	add	r1, sp, #8
 804a772:	231d      	movs	r3, #29
            getPhy.Attribute = PHY_CHANNELS_MASK;
 804a774:	f801 3d08 	strb.w	r3, [r1, #-8]!
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a778:	4b3e      	ldr	r3, [pc, #248]	; (804a874 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804a77a:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804a77e:	7818      	ldrb	r0, [r3, #0]
 804a780:	f001 fc6d 	bl	804c05e <RegionGetPhyParam>
 804a784:	e7d2      	b.n	804a72c <LoRaMacMibGetRequestConfirm+0x6c>
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 804a786:	4b3b      	ldr	r3, [pc, #236]	; (804a874 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804a788:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804a78c:	3404      	adds	r4, #4
 804a78e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 804a792:	e893 0003 	ldmia.w	r3, {r0, r1}
 804a796:	e884 0003 	stmia.w	r4, {r0, r1}
 804a79a:	e7bd      	b.n	804a718 <LoRaMacMibGetRequestConfirm+0x58>
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 804a79c:	4b35      	ldr	r3, [pc, #212]	; (804a874 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804a79e:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804a7a2:	3404      	adds	r4, #4
 804a7a4:	3328      	adds	r3, #40	; 0x28
 804a7a6:	e7f4      	b.n	804a792 <LoRaMacMibGetRequestConfirm+0xd2>
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParams.RxCChannel;
 804a7a8:	4b32      	ldr	r3, [pc, #200]	; (804a874 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804a7aa:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804a7ae:	3404      	adds	r4, #4
 804a7b0:	f503 7392 	add.w	r3, r3, #292	; 0x124
 804a7b4:	e7ed      	b.n	804a792 <LoRaMacMibGetRequestConfirm+0xd2>
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 804a7b6:	4b2f      	ldr	r3, [pc, #188]	; (804a874 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804a7b8:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804a7bc:	3404      	adds	r4, #4
 804a7be:	3330      	adds	r3, #48	; 0x30
 804a7c0:	e7e7      	b.n	804a792 <LoRaMacMibGetRequestConfirm+0xd2>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 804a7c2:	a902      	add	r1, sp, #8
 804a7c4:	231b      	movs	r3, #27
 804a7c6:	e7d5      	b.n	804a774 <LoRaMacMibGetRequestConfirm+0xb4>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 804a7c8:	a902      	add	r1, sp, #8
 804a7ca:	231a      	movs	r3, #26
 804a7cc:	e7d2      	b.n	804a774 <LoRaMacMibGetRequestConfirm+0xb4>
            mibGet->Param.ChannelsNbTrans = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 804a7ce:	4b29      	ldr	r3, [pc, #164]	; (804a874 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804a7d0:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804a7d4:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 804a7d8:	e79d      	b.n	804a716 <LoRaMacMibGetRequestConfirm+0x56>
            mibGet->Param.MaxRxWindow = MacCtx.NvmCtx->MacParams.MaxRxWindow;
 804a7da:	4b26      	ldr	r3, [pc, #152]	; (804a874 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804a7dc:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804a7e0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 804a7e4:	e7b1      	b.n	804a74a <LoRaMacMibGetRequestConfirm+0x8a>
            mibGet->Param.ReceiveDelay1 = MacCtx.NvmCtx->MacParams.ReceiveDelay1;
 804a7e6:	4b23      	ldr	r3, [pc, #140]	; (804a874 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804a7e8:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804a7ec:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 804a7f0:	e7ab      	b.n	804a74a <LoRaMacMibGetRequestConfirm+0x8a>
            mibGet->Param.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay2;
 804a7f2:	4b20      	ldr	r3, [pc, #128]	; (804a874 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804a7f4:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804a7f8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 804a7fc:	e7a5      	b.n	804a74a <LoRaMacMibGetRequestConfirm+0x8a>
            mibGet->Param.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1;
 804a7fe:	4b1d      	ldr	r3, [pc, #116]	; (804a874 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804a800:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804a804:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 804a808:	e79f      	b.n	804a74a <LoRaMacMibGetRequestConfirm+0x8a>
            mibGet->Param.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2;
 804a80a:	4b1a      	ldr	r3, [pc, #104]	; (804a874 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804a80c:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804a810:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 804a814:	e799      	b.n	804a74a <LoRaMacMibGetRequestConfirm+0x8a>
            mibGet->Param.ChannelsDefaultDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 804a816:	4b17      	ldr	r3, [pc, #92]	; (804a874 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804a818:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804a81c:	795b      	ldrb	r3, [r3, #5]
 804a81e:	e77a      	b.n	804a716 <LoRaMacMibGetRequestConfirm+0x56>
            mibGet->Param.ChannelsDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 804a820:	4b14      	ldr	r3, [pc, #80]	; (804a874 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804a822:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804a826:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 804a82a:	e774      	b.n	804a716 <LoRaMacMibGetRequestConfirm+0x56>
            mibGet->Param.ChannelsTxPower = TX_POWER_0/*MacCtx.NvmCtx->MacParams.ChannelsTxPower*/;
 804a82c:	2000      	movs	r0, #0
 804a82e:	7120      	strb	r0, [r4, #4]
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 804a830:	b002      	add	sp, #8
 804a832:	bd10      	pop	{r4, pc}
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 804a834:	4b0f      	ldr	r3, [pc, #60]	; (804a874 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804a836:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804a83a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 804a83e:	e784      	b.n	804a74a <LoRaMacMibGetRequestConfirm+0x8a>
            mibGet->Param.MinRxSymbols = MacCtx.NvmCtx->MacParams.MinRxSymbols;
 804a840:	4b0c      	ldr	r3, [pc, #48]	; (804a874 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804a842:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804a846:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 804a84a:	e764      	b.n	804a716 <LoRaMacMibGetRequestConfirm+0x56>
            mibGet->Param.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 804a84c:	4b09      	ldr	r3, [pc, #36]	; (804a874 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804a84e:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804a852:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 804a856:	6063      	str	r3, [r4, #4]
 804a858:	e75e      	b.n	804a718 <LoRaMacMibGetRequestConfirm+0x58>
            mibGet->Param.Contexts = GetCtxs( );
 804a85a:	f7fe ffd1 	bl	8049800 <GetCtxs>
 804a85e:	e765      	b.n	804a72c <LoRaMacMibGetRequestConfirm+0x6c>
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 804a860:	4b04      	ldr	r3, [pc, #16]	; (804a874 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804a862:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804a866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804a868:	e7f5      	b.n	804a856 <LoRaMacMibGetRequestConfirm+0x196>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 804a86a:	f000 fc78 	bl	804b15e <LoRaMacClassBMibGetRequestConfirm>
            break;
 804a86e:	e7df      	b.n	804a830 <LoRaMacMibGetRequestConfirm+0x170>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 804a870:	2003      	movs	r0, #3
 804a872:	e7dd      	b.n	804a830 <LoRaMacMibGetRequestConfirm+0x170>
 804a874:	2000a7cc 	.word	0x2000a7cc

0804a878 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 804a878:	b530      	push	{r4, r5, lr}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 804a87a:	4604      	mov	r4, r0
{
 804a87c:	b087      	sub	sp, #28
    if( mibSet == NULL )
 804a87e:	b930      	cbnz	r0, 804a88e <LoRaMacMibSetRequestConfirm+0x16>
    {
    	PRINTF("LORAMAC_STATUS_PARAMETER_INVALID\r\n");
 804a880:	4897      	ldr	r0, [pc, #604]	; (804aae0 <LoRaMacMibSetRequestConfirm+0x268>)
 804a882:	f003 fa6f 	bl	804dd64 <TraceSend>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 804a886:	2403      	movs	r4, #3
        }
    }
    EventRegionNvmCtxChanged( );
    EventMacNvmCtxChanged( );
    return status;
}
 804a888:	4620      	mov	r0, r4
 804a88a:	b007      	add	sp, #28
 804a88c:	bd30      	pop	{r4, r5, pc}
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 804a88e:	4d95      	ldr	r5, [pc, #596]	; (804aae4 <LoRaMacMibSetRequestConfirm+0x26c>)
 804a890:	f8d5 3344 	ldr.w	r3, [r5, #836]	; 0x344
 804a894:	079b      	lsls	r3, r3, #30
 804a896:	d504      	bpl.n	804a8a2 <LoRaMacMibSetRequestConfirm+0x2a>
    	PRINTF("LORAMAC_STATUS_BUSY");
 804a898:	4893      	ldr	r0, [pc, #588]	; (804aae8 <LoRaMacMibSetRequestConfirm+0x270>)
 804a89a:	f003 fa63 	bl	804dd64 <TraceSend>
        return LORAMAC_STATUS_BUSY;
 804a89e:	2401      	movs	r4, #1
 804a8a0:	e7f2      	b.n	804a888 <LoRaMacMibSetRequestConfirm+0x10>
    switch( mibSet->Type )
 804a8a2:	7803      	ldrb	r3, [r0, #0]
 804a8a4:	2b35      	cmp	r3, #53	; 0x35
 804a8a6:	f200 8233 	bhi.w	804ad10 <LoRaMacMibSetRequestConfirm+0x498>
 804a8aa:	e8df f013 	tbh	[pc, r3, lsl #1]
 804a8ae:	0036      	.short	0x0036
 804a8b0:	0044003b 	.word	0x0044003b
 804a8b4:	0053004f 	.word	0x0053004f
 804a8b8:	005e0059 	.word	0x005e0059
 804a8bc:	006d0063 	.word	0x006d0063
 804a8c0:	00770072 	.word	0x00770072
 804a8c4:	0081007c 	.word	0x0081007c
 804a8c8:	008b0086 	.word	0x008b0086
 804a8cc:	00950090 	.word	0x00950090
 804a8d0:	009f009a 	.word	0x009f009a
 804a8d4:	00a900a4 	.word	0x00a900a4
 804a8d8:	00b300ae 	.word	0x00b300ae
 804a8dc:	00bd00b8 	.word	0x00bd00b8
 804a8e0:	00c700c2 	.word	0x00c700c2
 804a8e4:	00d300cd 	.word	0x00d300cd
 804a8e8:	00e200d9 	.word	0x00e200d9
 804a8ec:	00e80231 	.word	0x00e80231
 804a8f0:	01210103 	.word	0x01210103
 804a8f4:	017c0158 	.word	0x017c0158
 804a8f8:	0180016d 	.word	0x0180016d
 804a8fc:	0190018a 	.word	0x0190018a
 804a900:	019c0196 	.word	0x019c0196
 804a904:	01a801a2 	.word	0x01a801a2
 804a908:	01eb01bb 	.word	0x01eb01bb
 804a90c:	020401d3 	.word	0x020401d3
 804a910:	0212020b 	.word	0x0212020b
 804a914:	021d0218 	.word	0x021d0218
 804a918:	0224      	.short	0x0224
            status = SwitchClass( mibSet->Param.Class );
 804a91a:	7900      	ldrb	r0, [r0, #4]
 804a91c:	f7fe f84a 	bl	80489b4 <SwitchClass>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 804a920:	4604      	mov	r4, r0
            break;
 804a922:	e00e      	b.n	804a942 <LoRaMacMibSetRequestConfirm+0xca>
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 804a924:	7903      	ldrb	r3, [r0, #4]
 804a926:	2b02      	cmp	r3, #2
 804a928:	d00a      	beq.n	804a940 <LoRaMacMibSetRequestConfirm+0xc8>
                MacCtx.NvmCtx->NetworkActivation = mibSet->Param.NetworkActivation;
 804a92a:	f8d5 2488 	ldr.w	r2, [r5, #1160]	; 0x488
 804a92e:	f882 31d4 	strb.w	r3, [r2, #468]	; 0x1d4
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 804a932:	2400      	movs	r4, #0
 804a934:	e005      	b.n	804a942 <LoRaMacMibSetRequestConfirm+0xca>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 804a936:	6840      	ldr	r0, [r0, #4]
 804a938:	f7fd fdc8 	bl	80484cc <SecureElementSetDevEui>
 804a93c:	2800      	cmp	r0, #0
 804a93e:	d0f8      	beq.n	804a932 <LoRaMacMibSetRequestConfirm+0xba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 804a940:	2403      	movs	r4, #3
    EventRegionNvmCtxChanged( );
 804a942:	f7fd fe3c 	bl	80485be <EventRegionNvmCtxChanged>
    EventMacNvmCtxChanged( );
 804a946:	f7fd fe37 	bl	80485b8 <EventMacNvmCtxChanged>
    return status;
 804a94a:	e79d      	b.n	804a888 <LoRaMacMibSetRequestConfirm+0x10>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 804a94c:	6840      	ldr	r0, [r0, #4]
 804a94e:	f7fd fdd3 	bl	80484f8 <SecureElementSetJoinEui>
 804a952:	e7f3      	b.n	804a93c <LoRaMacMibSetRequestConfirm+0xc4>
            MacCtx.NvmCtx->AdrCtrlOn = mibSet->Param.AdrEnable;
 804a954:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804a958:	7902      	ldrb	r2, [r0, #4]
 804a95a:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
 804a95e:	e7e8      	b.n	804a932 <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->NetID = mibSet->Param.NetID;
 804a960:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804a964:	6842      	ldr	r2, [r0, #4]
 804a966:	649a      	str	r2, [r3, #72]	; 0x48
 804a968:	e7e3      	b.n	804a932 <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->DevAddr = mibSet->Param.DevAddr;
 804a96a:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804a96e:	6842      	ldr	r2, [r0, #4]
 804a970:	64da      	str	r2, [r3, #76]	; 0x4c
 804a972:	e7de      	b.n	804a932 <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.GenAppKey != NULL )
 804a974:	6841      	ldr	r1, [r0, #4]
 804a976:	2900      	cmp	r1, #0
 804a978:	d0e2      	beq.n	804a940 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( GEN_APP_KEY, mibSet->Param.GenAppKey ) )
 804a97a:	2001      	movs	r0, #1
 804a97c:	f001 f94e 	bl	804bc1c <LoRaMacCryptoSetKey>
 804a980:	2800      	cmp	r0, #0
 804a982:	d0d6      	beq.n	804a932 <LoRaMacMibSetRequestConfirm+0xba>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 804a984:	2411      	movs	r4, #17
 804a986:	e77f      	b.n	804a888 <LoRaMacMibSetRequestConfirm+0x10>
            if( mibSet->Param.AppKey != NULL )
 804a988:	6841      	ldr	r1, [r0, #4]
 804a98a:	2900      	cmp	r1, #0
 804a98c:	d0d8      	beq.n	804a940 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 804a98e:	2000      	movs	r0, #0
 804a990:	e7f4      	b.n	804a97c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.NwkKey != NULL )
 804a992:	6841      	ldr	r1, [r0, #4]
 804a994:	2900      	cmp	r1, #0
 804a996:	d0d3      	beq.n	804a940 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 804a998:	2002      	movs	r0, #2
 804a99a:	e7ef      	b.n	804a97c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.JSIntKey != NULL )
 804a99c:	6841      	ldr	r1, [r0, #4]
 804a99e:	2900      	cmp	r1, #0
 804a9a0:	d0ce      	beq.n	804a940 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_INT_KEY, mibSet->Param.JSIntKey ) )
 804a9a2:	2003      	movs	r0, #3
 804a9a4:	e7ea      	b.n	804a97c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.JSEncKey != NULL )
 804a9a6:	6841      	ldr	r1, [r0, #4]
 804a9a8:	2900      	cmp	r1, #0
 804a9aa:	d0c9      	beq.n	804a940 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_ENC_KEY, mibSet->Param.JSEncKey ) )
 804a9ac:	2004      	movs	r0, #4
 804a9ae:	e7e5      	b.n	804a97c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.FNwkSIntKey != NULL )
 804a9b0:	6841      	ldr	r1, [r0, #4]
 804a9b2:	2900      	cmp	r1, #0
 804a9b4:	d0c4      	beq.n	804a940 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( F_NWK_S_INT_KEY, mibSet->Param.FNwkSIntKey ) )
 804a9b6:	2005      	movs	r0, #5
 804a9b8:	e7e0      	b.n	804a97c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.SNwkSIntKey != NULL )
 804a9ba:	6841      	ldr	r1, [r0, #4]
 804a9bc:	2900      	cmp	r1, #0
 804a9be:	d0bf      	beq.n	804a940 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( S_NWK_S_INT_KEY, mibSet->Param.SNwkSIntKey ) )
 804a9c0:	2006      	movs	r0, #6
 804a9c2:	e7db      	b.n	804a97c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.NwkSEncKey != NULL )
 804a9c4:	6841      	ldr	r1, [r0, #4]
 804a9c6:	2900      	cmp	r1, #0
 804a9c8:	d0ba      	beq.n	804a940 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_ENC_KEY, mibSet->Param.NwkSEncKey ) )
 804a9ca:	2007      	movs	r0, #7
 804a9cc:	e7d6      	b.n	804a97c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.AppSKey != NULL )
 804a9ce:	6841      	ldr	r1, [r0, #4]
 804a9d0:	2900      	cmp	r1, #0
 804a9d2:	d0b5      	beq.n	804a940 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 804a9d4:	2008      	movs	r0, #8
 804a9d6:	e7d1      	b.n	804a97c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McKEKey != NULL )
 804a9d8:	6841      	ldr	r1, [r0, #4]
 804a9da:	2900      	cmp	r1, #0
 804a9dc:	d0b0      	beq.n	804a940 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 804a9de:	207f      	movs	r0, #127	; 0x7f
 804a9e0:	e7cc      	b.n	804a97c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McKey0 != NULL )
 804a9e2:	6841      	ldr	r1, [r0, #4]
 804a9e4:	2900      	cmp	r1, #0
 804a9e6:	d0ab      	beq.n	804a940 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 804a9e8:	2080      	movs	r0, #128	; 0x80
 804a9ea:	e7c7      	b.n	804a97c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McAppSKey0 != NULL )
 804a9ec:	6841      	ldr	r1, [r0, #4]
 804a9ee:	2900      	cmp	r1, #0
 804a9f0:	d0a6      	beq.n	804a940 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 804a9f2:	2081      	movs	r0, #129	; 0x81
 804a9f4:	e7c2      	b.n	804a97c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McNwkSKey0 != NULL )
 804a9f6:	6841      	ldr	r1, [r0, #4]
 804a9f8:	2900      	cmp	r1, #0
 804a9fa:	d0a1      	beq.n	804a940 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 804a9fc:	2082      	movs	r0, #130	; 0x82
 804a9fe:	e7bd      	b.n	804a97c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McKey1 != NULL )
 804aa00:	6841      	ldr	r1, [r0, #4]
 804aa02:	2900      	cmp	r1, #0
 804aa04:	d09c      	beq.n	804a940 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_1, mibSet->Param.McKey1 ) )
 804aa06:	2083      	movs	r0, #131	; 0x83
 804aa08:	e7b8      	b.n	804a97c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McAppSKey1 != NULL )
 804aa0a:	6841      	ldr	r1, [r0, #4]
 804aa0c:	2900      	cmp	r1, #0
 804aa0e:	d097      	beq.n	804a940 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_1, mibSet->Param.McAppSKey1 ) )
 804aa10:	2084      	movs	r0, #132	; 0x84
 804aa12:	e7b3      	b.n	804a97c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McNwkSKey1 != NULL )
 804aa14:	6841      	ldr	r1, [r0, #4]
 804aa16:	2900      	cmp	r1, #0
 804aa18:	d092      	beq.n	804a940 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_1, mibSet->Param.McNwkSKey1 ) )
 804aa1a:	2085      	movs	r0, #133	; 0x85
 804aa1c:	e7ae      	b.n	804a97c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McKey2 != NULL )
 804aa1e:	6841      	ldr	r1, [r0, #4]
 804aa20:	2900      	cmp	r1, #0
 804aa22:	d08d      	beq.n	804a940 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_2, mibSet->Param.McKey2 ) )
 804aa24:	2086      	movs	r0, #134	; 0x86
 804aa26:	e7a9      	b.n	804a97c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McAppSKey2 != NULL )
 804aa28:	6841      	ldr	r1, [r0, #4]
 804aa2a:	2900      	cmp	r1, #0
 804aa2c:	d088      	beq.n	804a940 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_2, mibSet->Param.McAppSKey2 ) )
 804aa2e:	2087      	movs	r0, #135	; 0x87
 804aa30:	e7a4      	b.n	804a97c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McNwkSKey2 != NULL )
 804aa32:	6841      	ldr	r1, [r0, #4]
 804aa34:	2900      	cmp	r1, #0
 804aa36:	d083      	beq.n	804a940 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_2, mibSet->Param.McNwkSKey2 ) )
 804aa38:	2088      	movs	r0, #136	; 0x88
 804aa3a:	e79f      	b.n	804a97c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McKey3 != NULL )
 804aa3c:	6841      	ldr	r1, [r0, #4]
 804aa3e:	2900      	cmp	r1, #0
 804aa40:	f43f af7e 	beq.w	804a940 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_3, mibSet->Param.McKey3 ) )
 804aa44:	2089      	movs	r0, #137	; 0x89
 804aa46:	e799      	b.n	804a97c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McAppSKey3 != NULL )
 804aa48:	6841      	ldr	r1, [r0, #4]
 804aa4a:	2900      	cmp	r1, #0
 804aa4c:	f43f af78 	beq.w	804a940 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_3, mibSet->Param.McAppSKey3 ) )
 804aa50:	208a      	movs	r0, #138	; 0x8a
 804aa52:	e793      	b.n	804a97c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McNwkSKey3 != NULL )
 804aa54:	6841      	ldr	r1, [r0, #4]
 804aa56:	2900      	cmp	r1, #0
 804aa58:	f43f af72 	beq.w	804a940 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_3, mibSet->Param.McNwkSKey3 ) )
 804aa5c:	208b      	movs	r0, #139	; 0x8b
 804aa5e:	e78d      	b.n	804a97c <LoRaMacMibSetRequestConfirm+0x104>
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
 804aa60:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804aa64:	7900      	ldrb	r0, [r0, #4]
 804aa66:	f883 00f1 	strb.w	r0, [r3, #241]	; 0xf1
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 804aa6a:	4b20      	ldr	r3, [pc, #128]	; (804aaec <LoRaMacMibSetRequestConfirm+0x274>)
 804aa6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804aa6e:	4798      	blx	r3
 804aa70:	e75f      	b.n	804a932 <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 804aa72:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804aa76:	7902      	ldrb	r2, [r0, #4]
 804aa78:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
 804aa7c:	e759      	b.n	804a932 <LoRaMacMibSetRequestConfirm+0xba>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 804aa7e:	7a03      	ldrb	r3, [r0, #8]
 804aa80:	f88d 300c 	strb.w	r3, [sp, #12]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 804aa84:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804aa88:	f893 212d 	ldrb.w	r2, [r3, #301]	; 0x12d
 804aa8c:	f88d 200d 	strb.w	r2, [sp, #13]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 804aa90:	a903      	add	r1, sp, #12
 804aa92:	2207      	movs	r2, #7
 804aa94:	7818      	ldrb	r0, [r3, #0]
 804aa96:	f001 faff 	bl	804c098 <RegionVerify>
 804aa9a:	2800      	cmp	r0, #0
 804aa9c:	f43f af50 	beq.w	804a940 <LoRaMacMibSetRequestConfirm+0xc8>
                MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 804aaa0:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804aaa4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 804aaa8:	3404      	adds	r4, #4
 804aaaa:	e894 0003 	ldmia.w	r4, {r0, r1}
 804aaae:	e883 0003 	stmia.w	r3, {r0, r1}
 804aab2:	e73e      	b.n	804a932 <LoRaMacMibSetRequestConfirm+0xba>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 804aab4:	7a03      	ldrb	r3, [r0, #8]
 804aab6:	f88d 300c 	strb.w	r3, [sp, #12]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 804aaba:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804aabe:	f893 212d 	ldrb.w	r2, [r3, #301]	; 0x12d
 804aac2:	f88d 200d 	strb.w	r2, [sp, #13]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 804aac6:	a903      	add	r1, sp, #12
 804aac8:	2207      	movs	r2, #7
 804aaca:	7818      	ldrb	r0, [r3, #0]
 804aacc:	f001 fae4 	bl	804c098 <RegionVerify>
 804aad0:	2800      	cmp	r0, #0
 804aad2:	f43f af35 	beq.w	804a940 <LoRaMacMibSetRequestConfirm+0xc8>
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 804aad6:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804aada:	3328      	adds	r3, #40	; 0x28
 804aadc:	e7e4      	b.n	804aaa8 <LoRaMacMibSetRequestConfirm+0x230>
 804aade:	bf00      	nop
 804aae0:	08051fa0 	.word	0x08051fa0
 804aae4:	2000a7cc 	.word	0x2000a7cc
 804aae8:	08051fc3 	.word	0x08051fc3
 804aaec:	08051928 	.word	0x08051928
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 804aaf0:	7a03      	ldrb	r3, [r0, #8]
 804aaf2:	f88d 300c 	strb.w	r3, [sp, #12]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 804aaf6:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804aafa:	f893 212d 	ldrb.w	r2, [r3, #301]	; 0x12d
 804aafe:	f88d 200d 	strb.w	r2, [sp, #13]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 804ab02:	a903      	add	r1, sp, #12
 804ab04:	2207      	movs	r2, #7
 804ab06:	7818      	ldrb	r0, [r3, #0]
 804ab08:	f001 fac6 	bl	804c098 <RegionVerify>
 804ab0c:	2800      	cmp	r0, #0
 804ab0e:	f43f af17 	beq.w	804a940 <LoRaMacMibSetRequestConfirm+0xc8>
                MacCtx.NvmCtx->MacParams.RxCChannel = mibSet->Param.RxCChannel;
 804ab12:	3404      	adds	r4, #4
 804ab14:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804ab18:	e894 0003 	ldmia.w	r4, {r0, r1}
 804ab1c:	f503 7292 	add.w	r2, r3, #292	; 0x124
 804ab20:	e882 0003 	stmia.w	r2, {r0, r1}
                if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) && ( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE ) )
 804ab24:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
 804ab28:	2a02      	cmp	r2, #2
 804ab2a:	f47f af02 	bne.w	804a932 <LoRaMacMibSetRequestConfirm+0xba>
 804ab2e:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
 804ab32:	2b00      	cmp	r3, #0
 804ab34:	f43f aefd 	beq.w	804a932 <LoRaMacMibSetRequestConfirm+0xba>
                    Radio.Sleep( );
 804ab38:	4b77      	ldr	r3, [pc, #476]	; (804ad18 <LoRaMacMibSetRequestConfirm+0x4a0>)
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 804ab3a:	4c78      	ldr	r4, [pc, #480]	; (804ad1c <LoRaMacMibSetRequestConfirm+0x4a4>)
                    Radio.Sleep( );
 804ab3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 804ab3e:	4798      	blx	r3
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 804ab40:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804ab44:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
 804ab48:	f993 1128 	ldrsb.w	r1, [r3, #296]	; 0x128
 804ab4c:	7818      	ldrb	r0, [r3, #0]
 804ab4e:	9400      	str	r4, [sp, #0]
 804ab50:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 804ab54:	f001 fab6 	bl	804c0c4 <RegionComputeRxWindowParameters>
                    OpenContinuousRxCWindow( );
 804ab58:	f7fd fe66 	bl	8048828 <OpenContinuousRxCWindow>
 804ab5c:	e6e9      	b.n	804a932 <LoRaMacMibSetRequestConfirm+0xba>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 804ab5e:	7a03      	ldrb	r3, [r0, #8]
 804ab60:	f88d 300c 	strb.w	r3, [sp, #12]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 804ab64:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804ab68:	f893 212d 	ldrb.w	r2, [r3, #301]	; 0x12d
 804ab6c:	f88d 200d 	strb.w	r2, [sp, #13]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 804ab70:	a903      	add	r1, sp, #12
 804ab72:	2207      	movs	r2, #7
 804ab74:	7818      	ldrb	r0, [r3, #0]
 804ab76:	f001 fa8f 	bl	804c098 <RegionVerify>
 804ab7a:	2800      	cmp	r0, #0
 804ab7c:	f43f aee0 	beq.w	804a940 <LoRaMacMibSetRequestConfirm+0xc8>
                MacCtx.NvmCtx->MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 804ab80:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804ab84:	3330      	adds	r3, #48	; 0x30
 804ab86:	e78f      	b.n	804aaa8 <LoRaMacMibSetRequestConfirm+0x230>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 804ab88:	6843      	ldr	r3, [r0, #4]
 804ab8a:	9304      	str	r3, [sp, #16]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 804ab8c:	2301      	movs	r3, #1
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 804ab8e:	f88d 3014 	strb.w	r3, [sp, #20]
            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 804ab92:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804ab96:	a904      	add	r1, sp, #16
 804ab98:	7818      	ldrb	r0, [r3, #0]
 804ab9a:	f001 fa8c 	bl	804c0b6 <RegionChanMaskSet>
 804ab9e:	2800      	cmp	r0, #0
 804aba0:	f47f aec7 	bne.w	804a932 <LoRaMacMibSetRequestConfirm+0xba>
 804aba4:	e6cc      	b.n	804a940 <LoRaMacMibSetRequestConfirm+0xc8>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 804aba6:	6843      	ldr	r3, [r0, #4]
 804aba8:	9304      	str	r3, [sp, #16]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 804abaa:	2300      	movs	r3, #0
 804abac:	e7ef      	b.n	804ab8e <LoRaMacMibSetRequestConfirm+0x316>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 804abae:	7903      	ldrb	r3, [r0, #4]
 804abb0:	1e5a      	subs	r2, r3, #1
 804abb2:	2a0e      	cmp	r2, #14
 804abb4:	f63f aec4 	bhi.w	804a940 <LoRaMacMibSetRequestConfirm+0xc8>
                MacCtx.NvmCtx->MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 804abb8:	f8d5 2488 	ldr.w	r2, [r5, #1160]	; 0x488
 804abbc:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
 804abc0:	e6b7      	b.n	804a932 <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 804abc2:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804abc6:	6842      	ldr	r2, [r0, #4]
 804abc8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 804abcc:	e6b1      	b.n	804a932 <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 804abce:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804abd2:	6842      	ldr	r2, [r0, #4]
 804abd4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 804abd8:	e6ab      	b.n	804a932 <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 804abda:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804abde:	6842      	ldr	r2, [r0, #4]
 804abe0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 804abe4:	e6a5      	b.n	804a932 <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 804abe6:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804abea:	6842      	ldr	r2, [r0, #4]
 804abec:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 804abf0:	e69f      	b.n	804a932 <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 804abf2:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804abf6:	6842      	ldr	r2, [r0, #4]
 804abf8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 804abfc:	e699      	b.n	804a932 <LoRaMacMibSetRequestConfirm+0xba>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 804abfe:	a906      	add	r1, sp, #24
 804ac00:	7903      	ldrb	r3, [r0, #4]
 804ac02:	f801 3d0c 	strb.w	r3, [r1, #-12]!
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 804ac06:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804ac0a:	2206      	movs	r2, #6
 804ac0c:	7818      	ldrb	r0, [r3, #0]
 804ac0e:	f001 fa43 	bl	804c098 <RegionVerify>
 804ac12:	2800      	cmp	r0, #0
 804ac14:	f43f ae94 	beq.w	804a940 <LoRaMacMibSetRequestConfirm+0xc8>
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = verify.DatarateParams.Datarate;
 804ac18:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804ac1c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 804ac20:	715a      	strb	r2, [r3, #5]
 804ac22:	e686      	b.n	804a932 <LoRaMacMibSetRequestConfirm+0xba>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 804ac24:	7903      	ldrb	r3, [r0, #4]
 804ac26:	f88d 300c 	strb.w	r3, [sp, #12]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 804ac2a:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804ac2e:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 804ac32:	f88d 200e 	strb.w	r2, [sp, #14]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 804ac36:	a903      	add	r1, sp, #12
 804ac38:	2205      	movs	r2, #5
 804ac3a:	7818      	ldrb	r0, [r3, #0]
 804ac3c:	f001 fa2c 	bl	804c098 <RegionVerify>
 804ac40:	2800      	cmp	r0, #0
 804ac42:	f43f ae7d 	beq.w	804a940 <LoRaMacMibSetRequestConfirm+0xc8>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 804ac46:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804ac4a:	f89d 200c 	ldrb.w	r2, [sp, #12]
 804ac4e:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
 804ac52:	e66e      	b.n	804a932 <LoRaMacMibSetRequestConfirm+0xba>
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 804ac54:	a906      	add	r1, sp, #24
 804ac56:	7903      	ldrb	r3, [r0, #4]
 804ac58:	f801 3d0c 	strb.w	r3, [r1, #-12]!
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 804ac5c:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804ac60:	220a      	movs	r2, #10
 804ac62:	7818      	ldrb	r0, [r3, #0]
 804ac64:	f001 fa18 	bl	804c098 <RegionVerify>
 804ac68:	b930      	cbnz	r0, 804ac78 <LoRaMacMibSetRequestConfirm+0x400>
            	PPRINTF("erro");
 804ac6a:	4c2d      	ldr	r4, [pc, #180]	; (804ad20 <LoRaMacMibSetRequestConfirm+0x4a8>)
 804ac6c:	4620      	mov	r0, r4
 804ac6e:	f003 f879 	bl	804dd64 <TraceSend>
 804ac72:	2800      	cmp	r0, #0
 804ac74:	d1fa      	bne.n	804ac6c <LoRaMacMibSetRequestConfirm+0x3f4>
 804ac76:	e663      	b.n	804a940 <LoRaMacMibSetRequestConfirm+0xc8>
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = verify.TxPower;
 804ac78:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804ac7c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 804ac80:	711a      	strb	r2, [r3, #4]
 804ac82:	e656      	b.n	804a932 <LoRaMacMibSetRequestConfirm+0xba>
            verify.TxPower = TX_POWER_0/*mibSet->Param.ChannelsTxPower*/;
 804ac84:	a906      	add	r1, sp, #24
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 804ac86:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
            verify.TxPower = TX_POWER_0/*mibSet->Param.ChannelsTxPower*/;
 804ac8a:	2400      	movs	r4, #0
 804ac8c:	f801 4d0c 	strb.w	r4, [r1, #-12]!
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 804ac90:	2209      	movs	r2, #9
 804ac92:	7818      	ldrb	r0, [r3, #0]
 804ac94:	f001 fa00 	bl	804c098 <RegionVerify>
 804ac98:	b930      	cbnz	r0, 804aca8 <LoRaMacMibSetRequestConfirm+0x430>
            	PPRINTF("erro");
 804ac9a:	4c21      	ldr	r4, [pc, #132]	; (804ad20 <LoRaMacMibSetRequestConfirm+0x4a8>)
 804ac9c:	4620      	mov	r0, r4
 804ac9e:	f003 f861 	bl	804dd64 <TraceSend>
 804aca2:	2800      	cmp	r0, #0
 804aca4:	d1fa      	bne.n	804ac9c <LoRaMacMibSetRequestConfirm+0x424>
 804aca6:	e64b      	b.n	804a940 <LoRaMacMibSetRequestConfirm+0xc8>
                MacCtx.NvmCtx->MacParams.ChannelsTxPower = verify.TxPower;
 804aca8:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804acac:	f89d 200c 	ldrb.w	r2, [sp, #12]
 804acb0:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
 804acb4:	e645      	b.n	804a942 <LoRaMacMibSetRequestConfirm+0xca>
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 804acb6:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804acba:	6842      	ldr	r2, [r0, #4]
 804acbc:	609a      	str	r2, [r3, #8]
 804acbe:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
 804acc2:	e636      	b.n	804a932 <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 804acc4:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804acc8:	7902      	ldrb	r2, [r0, #4]
 804acca:	731a      	strb	r2, [r3, #12]
 804accc:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 804acd0:	e62f      	b.n	804a932 <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->MacParams.AntennaGain = mibSet->Param.AntennaGain;
 804acd2:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804acd6:	6842      	ldr	r2, [r0, #4]
 804acd8:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 804acdc:	e629      	b.n	804a932 <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 804acde:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804ace2:	6842      	ldr	r2, [r0, #4]
 804ace4:	641a      	str	r2, [r3, #64]	; 0x40
 804ace6:	e624      	b.n	804a932 <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.Contexts != 0 )
 804ace8:	6840      	ldr	r0, [r0, #4]
 804acea:	2800      	cmp	r0, #0
 804acec:	f43f ae28 	beq.w	804a940 <LoRaMacMibSetRequestConfirm+0xc8>
                status = RestoreCtxs( mibSet->Param.Contexts );
 804acf0:	f7fe fdbc 	bl	804986c <RestoreCtxs>
 804acf4:	e614      	b.n	804a920 <LoRaMacMibSetRequestConfirm+0xa8>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 804acf6:	7983      	ldrb	r3, [r0, #6]
 804acf8:	2b01      	cmp	r3, #1
 804acfa:	f63f ae21 	bhi.w	804a940 <LoRaMacMibSetRequestConfirm+0xc8>
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
 804acfe:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804ad02:	6842      	ldr	r2, [r0, #4]
 804ad04:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 804ad08:	6840      	ldr	r0, [r0, #4]
 804ad0a:	f000 fdc7 	bl	804b89c <LoRaMacCryptoSetLrWanVersion>
 804ad0e:	e637      	b.n	804a980 <LoRaMacMibSetRequestConfirm+0x108>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 804ad10:	f000 fa27 	bl	804b162 <LoRaMacMibClassBSetRequestConfirm>
 804ad14:	e604      	b.n	804a920 <LoRaMacMibSetRequestConfirm+0xa8>
 804ad16:	bf00      	nop
 804ad18:	08051928 	.word	0x08051928
 804ad1c:	2000abb0 	.word	0x2000abb0
 804ad20:	08051fd7 	.word	0x08051fd7

0804ad24 <LoRaMacMlmeRequest>:
    EventRegionNvmCtxChanged( );
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 804ad24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 804ad26:	2300      	movs	r3, #0
 804ad28:	f8ad 3000 	strh.w	r3, [sp]

    if( mlmeRequest == NULL )
 804ad2c:	4606      	mov	r6, r0
 804ad2e:	b930      	cbnz	r0, 804ad3e <LoRaMacMlmeRequest+0x1a>
    {
    	PRINTF("INVALID\n\r");
 804ad30:	4862      	ldr	r0, [pc, #392]	; (804aebc <LoRaMacMlmeRequest+0x198>)
 804ad32:	f003 f817 	bl	804dd64 <TraceSend>
    	return LORAMAC_STATUS_PARAMETER_INVALID;
 804ad36:	2403      	movs	r4, #3
    	PRINTF("LORA_MAC_OK\n\r");
        LoRaMacConfirmQueueAdd( &queueElement );
        EventMacNvmCtxChanged( );
    }
    return status;
}
 804ad38:	4620      	mov	r0, r4
 804ad3a:	b003      	add	sp, #12
 804ad3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacIsBusy( ) == true )
 804ad3e:	f7fe f9dd 	bl	80490fc <LoRaMacIsBusy>
 804ad42:	b120      	cbz	r0, 804ad4e <LoRaMacMlmeRequest+0x2a>
    	PRINTF("BUSY1\n\r");
 804ad44:	485e      	ldr	r0, [pc, #376]	; (804aec0 <LoRaMacMlmeRequest+0x19c>)
    	PRINTF("BUSY2\n\r");
 804ad46:	f003 f80d 	bl	804dd64 <TraceSend>
                return LORAMAC_STATUS_BUSY;
 804ad4a:	2401      	movs	r4, #1
 804ad4c:	e7f4      	b.n	804ad38 <LoRaMacMlmeRequest+0x14>
    if( LoRaMacConfirmQueueIsFull( ) == true )
 804ad4e:	f000 fc1f 	bl	804b590 <LoRaMacConfirmQueueIsFull>
 804ad52:	b108      	cbz	r0, 804ad58 <LoRaMacMlmeRequest+0x34>
    	PRINTF("BUSY2\n\r");
 804ad54:	485b      	ldr	r0, [pc, #364]	; (804aec4 <LoRaMacMlmeRequest+0x1a0>)
 804ad56:	e7f6      	b.n	804ad46 <LoRaMacMlmeRequest+0x22>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 804ad58:	f000 fc14 	bl	804b584 <LoRaMacConfirmQueueGetCnt>
 804ad5c:	4604      	mov	r4, r0
 804ad5e:	b938      	cbnz	r0, 804ad70 <LoRaMacMlmeRequest+0x4c>
    	PRINTF("gETcnT\n\r");
 804ad60:	4859      	ldr	r0, [pc, #356]	; (804aec8 <LoRaMacMlmeRequest+0x1a4>)
 804ad62:	f002 ffff 	bl	804dd64 <TraceSend>
    	memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 804ad66:	2214      	movs	r2, #20
 804ad68:	4621      	mov	r1, r4
 804ad6a:	4858      	ldr	r0, [pc, #352]	; (804aecc <LoRaMacMlmeRequest+0x1a8>)
 804ad6c:	f003 f873 	bl	804de56 <memset1>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 804ad70:	4d57      	ldr	r5, [pc, #348]	; (804aed0 <LoRaMacMlmeRequest+0x1ac>)
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 804ad72:	f895 2485 	ldrb.w	r2, [r5, #1157]	; 0x485
 804ad76:	f042 0204 	orr.w	r2, r2, #4
 804ad7a:	f885 2485 	strb.w	r2, [r5, #1157]	; 0x485
    queueElement.Request = mlmeRequest->Type;
 804ad7e:	7832      	ldrb	r2, [r6, #0]
 804ad80:	f88d 2004 	strb.w	r2, [sp, #4]
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 804ad84:	2301      	movs	r3, #1
    queueElement.RestrictCommonReadyToHandle = false;
 804ad86:	2100      	movs	r1, #0
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 804ad88:	f885 3455 	strb.w	r3, [r5, #1109]	; 0x455
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 804ad8c:	f88d 3005 	strb.w	r3, [sp, #5]
    queueElement.RestrictCommonReadyToHandle = false;
 804ad90:	f88d 1007 	strb.w	r1, [sp, #7]
    switch( mlmeRequest->Type )
 804ad94:	2a0d      	cmp	r2, #13
 804ad96:	f200 808d 	bhi.w	804aeb4 <LoRaMacMlmeRequest+0x190>
 804ad9a:	e8df f002 	tbb	[pc, r2]
 804ad9e:	8b07      	.short	0x8b07
 804ada0:	5b483d8b 	.word	0x5b483d8b
 804ada4:	648b8b8b 	.word	0x648b8b8b
 804ada8:	7b6b7f8b 	.word	0x7b6b7f8b
        	PRINTF("JOIN\n\r");
 804adac:	4849      	ldr	r0, [pc, #292]	; (804aed4 <LoRaMacMlmeRequest+0x1b0>)
 804adae:	f002 ffd9 	bl	804dd64 <TraceSend>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 804adb2:	f8d5 2344 	ldr.w	r2, [r5, #836]	; 0x344
 804adb6:	f012 0420 	ands.w	r4, r2, #32
 804adba:	d1c6      	bne.n	804ad4a <LoRaMacMlmeRequest+0x26>
            ResetMacParameters( );
 804adbc:	f7fd fcd0 	bl	8048760 <ResetMacParameters>
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 804adc0:	f8d5 7488 	ldr.w	r7, [r5, #1160]	; 0x488
 804adc4:	f996 1004 	ldrsb.w	r1, [r6, #4]
 804adc8:	7838      	ldrb	r0, [r7, #0]
 804adca:	4622      	mov	r2, r4
 804adcc:	f001 f9cd 	bl	804c16a <RegionAlternateDr>
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 804add0:	2307      	movs	r3, #7
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 804add2:	f887 00f9 	strb.w	r0, [r7, #249]	; 0xf9
            status = SendReJoinReq( JOIN_REQ );
 804add6:	20ff      	movs	r0, #255	; 0xff
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 804add8:	f88d 3005 	strb.w	r3, [sp, #5]
            status = SendReJoinReq( JOIN_REQ );
 804addc:	f7fe fca2 	bl	8049724 <SendReJoinReq>
            if( status != LORAMAC_STATUS_OK )
 804ade0:	4604      	mov	r4, r0
 804ade2:	b368      	cbz	r0, 804ae40 <LoRaMacMlmeRequest+0x11c>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 804ade4:	f8d5 7488 	ldr.w	r7, [r5, #1160]	; 0x488
 804ade8:	f996 1004 	ldrsb.w	r1, [r6, #4]
 804adec:	7838      	ldrb	r0, [r7, #0]
 804adee:	2201      	movs	r2, #1
 804adf0:	f001 f9bb 	bl	804c16a <RegionAlternateDr>
 804adf4:	f887 00f9 	strb.w	r0, [r7, #249]	; 0xf9
    	PRINTF("LORA_MAC_NOT_OK\n\r");
 804adf8:	4837      	ldr	r0, [pc, #220]	; (804aed8 <LoRaMacMlmeRequest+0x1b4>)
 804adfa:	f002 ffb3 	bl	804dd64 <TraceSend>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 804adfe:	f000 fbc1 	bl	804b584 <LoRaMacConfirmQueueGetCnt>
 804ae02:	2800      	cmp	r0, #0
 804ae04:	d198      	bne.n	804ad38 <LoRaMacMlmeRequest+0x14>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 804ae06:	f895 3485 	ldrb.w	r3, [r5, #1157]	; 0x485
            MacCtx.NodeAckRequested = false;
 804ae0a:	f885 0418 	strb.w	r0, [r5, #1048]	; 0x418
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 804ae0e:	f360 0382 	bfi	r3, r0, #2, #1
 804ae12:	f885 3485 	strb.w	r3, [r5, #1157]	; 0x485
 804ae16:	e78f      	b.n	804ad38 <LoRaMacMlmeRequest+0x14>
        	PRINTF("LINK CHECK");
 804ae18:	4830      	ldr	r0, [pc, #192]	; (804aedc <LoRaMacMlmeRequest+0x1b8>)
 804ae1a:	f002 ffa3 	bl	804dd64 <TraceSend>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 804ae1e:	2200      	movs	r2, #0
 804ae20:	4669      	mov	r1, sp
 804ae22:	2002      	movs	r0, #2
 804ae24:	f000 f9d6 	bl	804b1d4 <LoRaMacCommandsAddCmd>
 804ae28:	b150      	cbz	r0, 804ae40 <LoRaMacMlmeRequest+0x11c>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 804ae2a:	2413      	movs	r4, #19
 804ae2c:	e7e4      	b.n	804adf8 <LoRaMacMlmeRequest+0xd4>
        	PRINTF("TXCW\n\r");
 804ae2e:	482c      	ldr	r0, [pc, #176]	; (804aee0 <LoRaMacMlmeRequest+0x1bc>)
 804ae30:	f002 ff98 	bl	804dd64 <TraceSend>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 804ae34:	88b0      	ldrh	r0, [r6, #4]
 804ae36:	f7fe fca5 	bl	8049784 <SetTxContinuousWave>
            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 804ae3a:	4604      	mov	r4, r0
    if( status != LORAMAC_STATUS_OK )
 804ae3c:	2800      	cmp	r0, #0
 804ae3e:	d1db      	bne.n	804adf8 <LoRaMacMlmeRequest+0xd4>
    	PRINTF("LORA_MAC_OK\n\r");
 804ae40:	4828      	ldr	r0, [pc, #160]	; (804aee4 <LoRaMacMlmeRequest+0x1c0>)
 804ae42:	f002 ff8f 	bl	804dd64 <TraceSend>
        LoRaMacConfirmQueueAdd( &queueElement );
 804ae46:	a801      	add	r0, sp, #4
 804ae48:	f000 fadc 	bl	804b404 <LoRaMacConfirmQueueAdd>
        EventMacNvmCtxChanged( );
 804ae4c:	2400      	movs	r4, #0
 804ae4e:	f7fd fbb3 	bl	80485b8 <EventMacNvmCtxChanged>
 804ae52:	e771      	b.n	804ad38 <LoRaMacMlmeRequest+0x14>
        	PRINTF("TXCW_1\n\r");
 804ae54:	4824      	ldr	r0, [pc, #144]	; (804aee8 <LoRaMacMlmeRequest+0x1c4>)
 804ae56:	f002 ff85 	bl	804dd64 <TraceSend>
            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 804ae5a:	7b32      	ldrb	r2, [r6, #12]
 804ae5c:	68b1      	ldr	r1, [r6, #8]
 804ae5e:	88b0      	ldrh	r0, [r6, #4]
 804ae60:	f7fe fcb8 	bl	80497d4 <SetTxContinuousWave1>
 804ae64:	e7e9      	b.n	804ae3a <LoRaMacMlmeRequest+0x116>
        	PRINTF("Device Time\n\r");
 804ae66:	4821      	ldr	r0, [pc, #132]	; (804aeec <LoRaMacMlmeRequest+0x1c8>)
 804ae68:	f002 ff7c 	bl	804dd64 <TraceSend>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 804ae6c:	2200      	movs	r2, #0
 804ae6e:	4669      	mov	r1, sp
 804ae70:	200d      	movs	r0, #13
 804ae72:	e7d7      	b.n	804ae24 <LoRaMacMlmeRequest+0x100>
            if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 804ae74:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804ae78:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 804ae7c:	b9d3      	cbnz	r3, 804aeb4 <LoRaMacMlmeRequest+0x190>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 804ae7e:	7934      	ldrb	r4, [r6, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 804ae80:	f004 0007 	and.w	r0, r4, #7
 804ae84:	f000 f966 	bl	804b154 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 804ae88:	a902      	add	r1, sp, #8
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 804ae8a:	2201      	movs	r2, #1
                macCmdPayload[0] = value;
 804ae8c:	f801 4d08 	strb.w	r4, [r1, #-8]!
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 804ae90:	2010      	movs	r0, #16
 804ae92:	e7c7      	b.n	804ae24 <LoRaMacMlmeRequest+0x100>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 804ae94:	2200      	movs	r2, #0
 804ae96:	4669      	mov	r1, sp
 804ae98:	2012      	movs	r0, #18
 804ae9a:	e7c3      	b.n	804ae24 <LoRaMacMlmeRequest+0x100>
            queueElement.RestrictCommonReadyToHandle = true;
 804ae9c:	f88d 3007 	strb.w	r3, [sp, #7]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 804aea0:	f000 f949 	bl	804b136 <LoRaMacClassBIsAcquisitionInProgress>
 804aea4:	4604      	mov	r4, r0
 804aea6:	b938      	cbnz	r0, 804aeb8 <LoRaMacMlmeRequest+0x194>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 804aea8:	f000 f942 	bl	804b130 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 804aeac:	4620      	mov	r0, r4
 804aeae:	f000 f944 	bl	804b13a <LoRaMacClassBBeaconTimerEvent>
 804aeb2:	e7c5      	b.n	804ae40 <LoRaMacMlmeRequest+0x11c>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 804aeb4:	2402      	movs	r4, #2
 804aeb6:	e79f      	b.n	804adf8 <LoRaMacMlmeRequest+0xd4>
                status = LORAMAC_STATUS_BUSY;
 804aeb8:	2401      	movs	r4, #1
 804aeba:	e79d      	b.n	804adf8 <LoRaMacMlmeRequest+0xd4>
 804aebc:	08051fdc 	.word	0x08051fdc
 804aec0:	08051fe6 	.word	0x08051fe6
 804aec4:	08051fee 	.word	0x08051fee
 804aec8:	08051ff6 	.word	0x08051ff6
 804aecc:	2000ac20 	.word	0x2000ac20
 804aed0:	2000a7cc 	.word	0x2000a7cc
 804aed4:	08051fff 	.word	0x08051fff
 804aed8:	0805202f 	.word	0x0805202f
 804aedc:	08052006 	.word	0x08052006
 804aee0:	08052011 	.word	0x08052011
 804aee4:	08052041 	.word	0x08052041
 804aee8:	08052018 	.word	0x08052018
 804aeec:	08052021 	.word	0x08052021

0804aef0 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest )
{
 804aef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    void* fBuffer;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 804aef4:	4605      	mov	r5, r0
{
 804aef6:	b085      	sub	sp, #20
    if( mcpsRequest == NULL )
 804aef8:	2800      	cmp	r0, #0
 804aefa:	f000 809e 	beq.w	804b03a <LoRaMacMcpsRequest+0x14a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( LoRaMacIsBusy( ) == true )
 804aefe:	f7fe f8fd 	bl	80490fc <LoRaMacIsBusy>
 804af02:	4607      	mov	r7, r0
 804af04:	2800      	cmp	r0, #0
 804af06:	f040 809e 	bne.w	804b046 <LoRaMacMcpsRequest+0x156>
    {
        return LORAMAC_STATUS_BUSY;
    }

    macHdr.Value = 0;
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 804af0a:	4c50      	ldr	r4, [pc, #320]	; (804b04c <LoRaMacMcpsRequest+0x15c>)
    macHdr.Value = 0;
 804af0c:	f88d 0000 	strb.w	r0, [sp]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 804af10:	2214      	movs	r2, #20
 804af12:	4601      	mov	r1, r0
 804af14:	f504 6088 	add.w	r0, r4, #1088	; 0x440
 804af18:	f002 ff9d 	bl	804de56 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 804af1c:	2301      	movs	r3, #1

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 804af1e:	f884 3416 	strb.w	r3, [r4, #1046]	; 0x416

    switch( mcpsRequest->Type )
 804af22:	782a      	ldrb	r2, [r5, #0]
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 804af24:	f884 3441 	strb.w	r3, [r4, #1089]	; 0x441
    switch( mcpsRequest->Type )
 804af28:	429a      	cmp	r2, r3
 804af2a:	d05a      	beq.n	804afe2 <LoRaMacMcpsRequest+0xf2>
 804af2c:	d304      	bcc.n	804af38 <LoRaMacMcpsRequest+0x48>
 804af2e:	2a03      	cmp	r2, #3
 804af30:	d06e      	beq.n	804b010 <LoRaMacMcpsRequest+0x120>
    int8_t datarate = DR_0;
 804af32:	46bb      	mov	fp, r7
    uint8_t fPort = 0;
 804af34:	46b8      	mov	r8, r7
 804af36:	e011      	b.n	804af5c <LoRaMacMcpsRequest+0x6c>
        case MCPS_UNCONFIRMED:
        {
            readyToSend = true;
            MacCtx.AckTimeoutRetries = 1;

            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 804af38:	f89d 2000 	ldrb.w	r2, [sp]
            MacCtx.AckTimeoutRetries = 1;
 804af3c:	f884 3415 	strb.w	r3, [r4, #1045]	; 0x415
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 804af40:	2102      	movs	r1, #2
 804af42:	f361 1247 	bfi	r2, r1, #5, #3
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 804af46:	f895 8004 	ldrb.w	r8, [r5, #4]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 804af4a:	f8d5 9008 	ldr.w	r9, [r5, #8]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 804af4e:	f8b5 a00c 	ldrh.w	sl, [r5, #12]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 804af52:	f995 b00e 	ldrsb.w	fp, [r5, #14]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 804af56:	f88d 2000 	strb.w	r2, [sp]
            readyToSend = true;
 804af5a:	461f      	mov	r7, r3
            break;
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 804af5c:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 804af60:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 804af64:	f88d 2006 	strb.w	r2, [sp, #6]
    getPhy.Attribute = PHY_MIN_TX_DR;
 804af68:	2602      	movs	r6, #2
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804af6a:	a901      	add	r1, sp, #4
 804af6c:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_MIN_TX_DR;
 804af6e:	f88d 6004 	strb.w	r6, [sp, #4]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804af72:	f001 f874 	bl	804c05e <RegionGetPhyParam>
 804af76:	9002      	str	r0, [sp, #8]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );

    if( readyToSend == true )
 804af78:	b36f      	cbz	r7, 804afd6 <LoRaMacMcpsRequest+0xe6>
    {
        if( MacCtx.NvmCtx->AdrCtrlOn == false )
 804af7a:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 804af7e:	f893 20f2 	ldrb.w	r2, [r3, #242]	; 0xf2
 804af82:	b9b2      	cbnz	r2, 804afb2 <LoRaMacMcpsRequest+0xc2>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 804af84:	b240      	sxtb	r0, r0
 804af86:	4558      	cmp	r0, fp
 804af88:	bfb8      	it	lt
 804af8a:	4658      	movlt	r0, fp
        {
            verify.DatarateParams.Datarate = datarate;
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 804af8c:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
            verify.DatarateParams.Datarate = datarate;
 804af90:	f88d 000c 	strb.w	r0, [sp, #12]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 804af94:	f88d 200e 	strb.w	r2, [sp, #14]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 804af98:	a903      	add	r1, sp, #12
 804af9a:	2205      	movs	r2, #5
 804af9c:	7818      	ldrb	r0, [r3, #0]
 804af9e:	f001 f87b 	bl	804c098 <RegionVerify>
 804afa2:	2800      	cmp	r0, #0
 804afa4:	d046      	beq.n	804b034 <LoRaMacMcpsRequest+0x144>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 804afa6:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 804afaa:	f89d 200c 	ldrb.w	r2, [sp, #12]
 804afae:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
            	PRINTF("Invalid data rate\r\n");
                return LORAMAC_STATUS_PARAMETER_INVALID;
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize );
 804afb2:	4653      	mov	r3, sl
 804afb4:	464a      	mov	r2, r9
 804afb6:	4641      	mov	r1, r8
 804afb8:	4668      	mov	r0, sp
 804afba:	f7fe fb1b 	bl	80495f4 <Send>
        if( status == LORAMAC_STATUS_OK )
 804afbe:	4606      	mov	r6, r0
 804afc0:	2800      	cmp	r0, #0
 804afc2:	d13c      	bne.n	804b03e <LoRaMacMcpsRequest+0x14e>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 804afc4:	782b      	ldrb	r3, [r5, #0]
 804afc6:	f884 3440 	strb.w	r3, [r4, #1088]	; 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 804afca:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 804afce:	f043 0301 	orr.w	r3, r3, #1
 804afd2:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
        {
            MacCtx.NodeAckRequested = false;
        }
    }

    EventMacNvmCtxChanged( );
 804afd6:	f7fd faef 	bl	80485b8 <EventMacNvmCtxChanged>
    return status;
}
 804afda:	4630      	mov	r0, r6
 804afdc:	b005      	add	sp, #20
 804afde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 804afe2:	7beb      	ldrb	r3, [r5, #15]
 804afe4:	2b08      	cmp	r3, #8
 804afe6:	bf28      	it	cs
 804afe8:	2308      	movcs	r3, #8
 804afea:	f884 3415 	strb.w	r3, [r4, #1045]	; 0x415
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 804afee:	f89d 3000 	ldrb.w	r3, [sp]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 804aff2:	f895 8004 	ldrb.w	r8, [r5, #4]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 804aff6:	f8d5 9008 	ldr.w	r9, [r5, #8]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 804affa:	f8b5 a00c 	ldrh.w	sl, [r5, #12]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 804affe:	f995 b00e 	ldrsb.w	fp, [r5, #14]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 804b002:	2104      	movs	r1, #4
 804b004:	f361 1347 	bfi	r3, r1, #5, #3
 804b008:	f88d 3000 	strb.w	r3, [sp]
            readyToSend = true;
 804b00c:	4617      	mov	r7, r2
            break;
 804b00e:	e7a5      	b.n	804af5c <LoRaMacMcpsRequest+0x6c>
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 804b010:	f89d 2000 	ldrb.w	r2, [sp]
            MacCtx.AckTimeoutRetries = 1;
 804b014:	f884 3415 	strb.w	r3, [r4, #1045]	; 0x415
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 804b018:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 804b01c:	f88d 2000 	strb.w	r2, [sp]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 804b020:	f8d5 9004 	ldr.w	r9, [r5, #4]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 804b024:	f8b5 a008 	ldrh.w	sl, [r5, #8]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 804b028:	f995 b00a 	ldrsb.w	fp, [r5, #10]
            readyToSend = true;
 804b02c:	461f      	mov	r7, r3
    uint8_t fPort = 0;
 804b02e:	f04f 0800 	mov.w	r8, #0
            break;
 804b032:	e793      	b.n	804af5c <LoRaMacMcpsRequest+0x6c>
            	PRINTF("Invalid data rate\r\n");
 804b034:	4806      	ldr	r0, [pc, #24]	; (804b050 <LoRaMacMcpsRequest+0x160>)
 804b036:	f002 fe95 	bl	804dd64 <TraceSend>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 804b03a:	2603      	movs	r6, #3
 804b03c:	e7cd      	b.n	804afda <LoRaMacMcpsRequest+0xea>
            MacCtx.NodeAckRequested = false;
 804b03e:	2300      	movs	r3, #0
 804b040:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
 804b044:	e7c7      	b.n	804afd6 <LoRaMacMcpsRequest+0xe6>
        return LORAMAC_STATUS_BUSY;
 804b046:	2601      	movs	r6, #1
 804b048:	e7c7      	b.n	804afda <LoRaMacMcpsRequest+0xea>
 804b04a:	bf00      	nop
 804b04c:	2000a7cc 	.word	0x2000a7cc
 804b050:	0805204f 	.word	0x0805204f

0804b054 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 804b054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( adrNext->Version.Fields.Minor == 0 )
 804b058:	7887      	ldrb	r7, [r0, #2]
{
 804b05a:	b087      	sub	sp, #28
 804b05c:	4604      	mov	r4, r0
 804b05e:	468a      	mov	sl, r1
 804b060:	4691      	mov	r9, r2
    if( adrNext->Version.Fields.Minor == 0 )
 804b062:	2f00      	cmp	r7, #0
 804b064:	d15b      	bne.n	804b11e <LoRaMacAdrCalcNext+0xca>
    if( adrNext->AdrEnabled == true )
 804b066:	7945      	ldrb	r5, [r0, #5]
    *adrAckCounter = adrNext->AdrAckCounter;
 804b068:	6882      	ldr	r2, [r0, #8]
    int8_t datarate = adrNext->Datarate;
 804b06a:	f990 8010 	ldrsb.w	r8, [r0, #16]
    *adrAckCounter = adrNext->AdrAckCounter;
 804b06e:	601a      	str	r2, [r3, #0]
    if( adrNext->AdrEnabled == true )
 804b070:	2d00      	cmp	r5, #0
 804b072:	d052      	beq.n	804b11a <LoRaMacAdrCalcNext+0xc6>
        getPhy.Attribute = PHY_MIN_TX_DR;
 804b074:	2202      	movs	r2, #2
 804b076:	f88d 2008 	strb.w	r2, [sp, #8]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 804b07a:	a902      	add	r1, sp, #8
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 804b07c:	7c82      	ldrb	r2, [r0, #18]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 804b07e:	7cc0      	ldrb	r0, [r0, #19]
 804b080:	9301      	str	r3, [sp, #4]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 804b082:	f88d 200a 	strb.w	r2, [sp, #10]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 804b086:	f000 ffea 	bl	804c05e <RegionGetPhyParam>
        minTxDatarate = phyParam.Value;
 804b08a:	fa4f fb80 	sxtb.w	fp, r0
        datarate = MAX( datarate, minTxDatarate );
 804b08e:	45d8      	cmp	r8, fp
 804b090:	4646      	mov	r6, r8
 804b092:	bfb8      	it	lt
 804b094:	465e      	movlt	r6, fp
        if( datarate == minTxDatarate )
 804b096:	45d8      	cmp	r8, fp
 804b098:	dc0b      	bgt.n	804b0b2 <LoRaMacAdrCalcNext+0x5e>
            *adrAckCounter = 0;
 804b09a:	9b01      	ldr	r3, [sp, #4]
 804b09c:	601f      	str	r7, [r3, #0]
                        adrAckReq = false;
 804b09e:	463d      	mov	r5, r7
    *txPowOut = txPower;
 804b0a0:	2300      	movs	r3, #0
    *drOut = datarate;
 804b0a2:	f88a 6000 	strb.w	r6, [sl]
    *txPowOut = txPower;
 804b0a6:	f889 3000 	strb.w	r3, [r9]
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
    }
    return false;
}
 804b0aa:	4628      	mov	r0, r5
 804b0ac:	b007      	add	sp, #28
 804b0ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 804b0b2:	68a2      	ldr	r2, [r4, #8]
 804b0b4:	89a1      	ldrh	r1, [r4, #12]
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 804b0b6:	89e3      	ldrh	r3, [r4, #14]
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 804b0b8:	428a      	cmp	r2, r1
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 804b0ba:	440b      	add	r3, r1
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 804b0bc:	bf34      	ite	cc
 804b0be:	2500      	movcc	r5, #0
 804b0c0:	2501      	movcs	r5, #1
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 804b0c2:	429a      	cmp	r2, r3
 804b0c4:	d3ec      	bcc.n	804b0a0 <LoRaMacAdrCalcNext+0x4c>
                getPhy.Attribute = PHY_MAX_TX_POWER;
 804b0c6:	2308      	movs	r3, #8
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 804b0c8:	eb0d 0103 	add.w	r1, sp, r3
 804b0cc:	7ce0      	ldrb	r0, [r4, #19]
                getPhy.Attribute = PHY_MAX_TX_POWER;
 804b0ce:	f88d 3008 	strb.w	r3, [sp, #8]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 804b0d2:	f000 ffc4 	bl	804c05e <RegionGetPhyParam>
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 804b0d6:	89e3      	ldrh	r3, [r4, #14]
 804b0d8:	68a2      	ldr	r2, [r4, #8]
 804b0da:	fbb2 f8f3 	udiv	r8, r2, r3
 804b0de:	fb03 2818 	mls	r8, r3, r8, r2
 804b0e2:	f1b8 0f01 	cmp.w	r8, #1
 804b0e6:	d1db      	bne.n	804b0a0 <LoRaMacAdrCalcNext+0x4c>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 804b0e8:	2322      	movs	r3, #34	; 0x22
 804b0ea:	f88d 3008 	strb.w	r3, [sp, #8]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 804b0ee:	a902      	add	r1, sp, #8
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 804b0f0:	7ca3      	ldrb	r3, [r4, #18]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 804b0f2:	7ce0      	ldrb	r0, [r4, #19]
                    getPhy.Datarate = datarate;
 804b0f4:	f88d 6009 	strb.w	r6, [sp, #9]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 804b0f8:	f88d 300a 	strb.w	r3, [sp, #10]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 804b0fc:	f000 ffaf 	bl	804c05e <RegionGetPhyParam>
                    datarate = phyParam.Value;
 804b100:	b246      	sxtb	r6, r0
                    if( datarate == minTxDatarate )
 804b102:	45b3      	cmp	fp, r6
 804b104:	d1cc      	bne.n	804b0a0 <LoRaMacAdrCalcNext+0x4c>
                        if( adrNext->UpdateChanMask == true )
 804b106:	7925      	ldrb	r5, [r4, #4]
 804b108:	2d00      	cmp	r5, #0
 804b10a:	d0c9      	beq.n	804b0a0 <LoRaMacAdrCalcNext+0x4c>
                            RegionInitDefaults( adrNext->Region, &params );
 804b10c:	a904      	add	r1, sp, #16
 804b10e:	7ce0      	ldrb	r0, [r4, #19]
                            params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 804b110:	f88d 8014 	strb.w	r8, [sp, #20]
                            RegionInitDefaults( adrNext->Region, &params );
 804b114:	f000 ffb3 	bl	804c07e <RegionInitDefaults>
 804b118:	e7c1      	b.n	804b09e <LoRaMacAdrCalcNext+0x4a>
    int8_t datarate = adrNext->Datarate;
 804b11a:	4646      	mov	r6, r8
 804b11c:	e7c0      	b.n	804b0a0 <LoRaMacAdrCalcNext+0x4c>
    return false;
 804b11e:	2500      	movs	r5, #0
 804b120:	e7c3      	b.n	804b0aa <LoRaMacAdrCalcNext+0x56>

0804b122 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif // LORAMAC_CLASSB_ENABLED
}
 804b122:	4770      	bx	lr

0804b124 <LoRaMacClassBRestoreNvmCtx>:
        return false;
    }
#else
    return true;
#endif // LORAMAC_CLASSB_ENABLED
}
 804b124:	2001      	movs	r0, #1
 804b126:	4770      	bx	lr

0804b128 <LoRaMacClassBGetNvmCtx>:
{
#ifdef LORAMAC_CLASSB_ENABLED
    *classBNvmCtxSize = sizeof( NvmCtx );
    return &NvmCtx;
#else
    *classBNvmCtxSize = 0;
 804b128:	2300      	movs	r3, #0
 804b12a:	6003      	str	r3, [r0, #0]
    return NULL;
#endif // LORAMAC_CLASSB_ENABLED
}
 804b12c:	4618      	mov	r0, r3
 804b12e:	4770      	bx	lr

0804b130 <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 804b130:	4770      	bx	lr

0804b132 <LoRaMacClassBSetPingSlotState>:
 804b132:	4770      	bx	lr

0804b134 <LoRaMacClassBSetMulticastSlotState>:
 804b134:	4770      	bx	lr

0804b136 <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 804b136:	2000      	movs	r0, #0
 804b138:	4770      	bx	lr

0804b13a <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 804b13a:	4770      	bx	lr

0804b13c <LoRaMacClassBPingSlotTimerEvent>:
 804b13c:	4770      	bx	lr

0804b13e <LoRaMacClassBMulticastSlotTimerEvent>:
 804b13e:	4770      	bx	lr

0804b140 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 804b140:	2000      	movs	r0, #0
 804b142:	4770      	bx	lr

0804b144 <LoRaMacClassBIsBeaconExpected>:
 804b144:	2000      	movs	r0, #0
 804b146:	4770      	bx	lr

0804b148 <LoRaMacClassBIsPingExpected>:
 804b148:	2000      	movs	r0, #0
 804b14a:	4770      	bx	lr

0804b14c <LoRaMacClassBIsMulticastExpected>:
 804b14c:	2000      	movs	r0, #0
 804b14e:	4770      	bx	lr

0804b150 <LoRaMacClassBIsBeaconModeActive>:
 804b150:	2000      	movs	r0, #0
 804b152:	4770      	bx	lr

0804b154 <LoRaMacClassBSetPingSlotInfo>:
 804b154:	4770      	bx	lr

0804b156 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 804b156:	4770      	bx	lr

0804b158 <LoRaMacClassBResumeBeaconing>:
 804b158:	4770      	bx	lr

0804b15a <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
 804b15a:	2002      	movs	r0, #2
 804b15c:	4770      	bx	lr

0804b15e <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
 804b15e:	2002      	movs	r0, #2
 804b160:	4770      	bx	lr

0804b162 <LoRaMacMibClassBSetRequestConfirm>:
 804b162:	2002      	movs	r0, #2
 804b164:	4770      	bx	lr

0804b166 <LoRaMacClassBPingSlotInfoAns>:
 804b166:	4770      	bx	lr

0804b168 <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
 804b168:	2000      	movs	r0, #0
 804b16a:	4770      	bx	lr

0804b16c <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 804b16c:	4770      	bx	lr

0804b16e <LoRaMacClassBDeviceTimeAns>:
 804b16e:	4770      	bx	lr

0804b170 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 804b170:	2000      	movs	r0, #0
 804b172:	4770      	bx	lr

0804b174 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
 804b174:	2000      	movs	r0, #0
 804b176:	4770      	bx	lr

0804b178 <LoRaMacClassBStopRxSlots>:
 804b178:	4770      	bx	lr

0804b17a <LoRaMacClassBProcess>:
 804b17a:	4770      	bx	lr

0804b17c <NvmCtxCallback>:
/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxCallback( void )
{
    if( CommandsNvmCtxChanged != NULL )
 804b17c:	4b02      	ldr	r3, [pc, #8]	; (804b188 <NvmCtxCallback+0xc>)
 804b17e:	681b      	ldr	r3, [r3, #0]
 804b180:	b103      	cbz	r3, 804b184 <NvmCtxCallback+0x8>
    {
        CommandsNvmCtxChanged( );
 804b182:	4718      	bx	r3
    }
}
 804b184:	4770      	bx	lr
 804b186:	bf00      	nop
 804b188:	2000ae34 	.word	0x2000ae34

0804b18c <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( LoRaMacCommandsNvmEvent commandsNvmCtxChanged )
{
 804b18c:	b538      	push	{r3, r4, r5, lr}
    // Initialize with default
    memset1( ( uint8_t* )&NvmCtx, 0, sizeof( NvmCtx ) );
 804b18e:	4c06      	ldr	r4, [pc, #24]	; (804b1a8 <LoRaMacCommandsInit+0x1c>)
{
 804b190:	4605      	mov	r5, r0
    memset1( ( uint8_t* )&NvmCtx, 0, sizeof( NvmCtx ) );
 804b192:	22fc      	movs	r2, #252	; 0xfc
 804b194:	1d20      	adds	r0, r4, #4
 804b196:	2100      	movs	r1, #0
 804b198:	f002 fe5d 	bl	804de56 <memset1>
    list->First = 0;
 804b19c:	2000      	movs	r0, #0
    list->Last = 0;
 804b19e:	e9c4 0001 	strd	r0, r0, [r4, #4]

    LinkedListInit( &NvmCtx.MacCommandList );

    // Assign callback
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 804b1a2:	6025      	str	r5, [r4, #0]

    return LORAMAC_COMMANDS_SUCCESS;
}
 804b1a4:	bd38      	pop	{r3, r4, r5, pc}
 804b1a6:	bf00      	nop
 804b1a8:	2000ae34 	.word	0x2000ae34

0804b1ac <LoRaMacCommandsRestoreNvmCtx>:

LoRaMacCommandStatus_t LoRaMacCommandsRestoreNvmCtx( void* commandsNvmCtx )
{
 804b1ac:	b508      	push	{r3, lr}
    // Restore module context
    if( commandsNvmCtx != NULL )
 804b1ae:	4601      	mov	r1, r0
 804b1b0:	b128      	cbz	r0, 804b1be <LoRaMacCommandsRestoreNvmCtx+0x12>
    {
        memcpy1( ( uint8_t* )&NvmCtx, ( uint8_t* )commandsNvmCtx, sizeof( NvmCtx ) );
 804b1b2:	4804      	ldr	r0, [pc, #16]	; (804b1c4 <LoRaMacCommandsRestoreNvmCtx+0x18>)
 804b1b4:	22fc      	movs	r2, #252	; 0xfc
 804b1b6:	f002 fe3a 	bl	804de2e <memcpy1>
        return LORAMAC_COMMANDS_SUCCESS;
 804b1ba:	2000      	movs	r0, #0
    }
    else
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
}
 804b1bc:	bd08      	pop	{r3, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 804b1be:	2001      	movs	r0, #1
 804b1c0:	e7fc      	b.n	804b1bc <LoRaMacCommandsRestoreNvmCtx+0x10>
 804b1c2:	bf00      	nop
 804b1c4:	2000ae38 	.word	0x2000ae38

0804b1c8 <LoRaMacCommandsGetNvmCtx>:

void* LoRaMacCommandsGetNvmCtx( size_t* commandsNvmCtxSize )
{
    *commandsNvmCtxSize = sizeof( NvmCtx );
 804b1c8:	23fc      	movs	r3, #252	; 0xfc
 804b1ca:	6003      	str	r3, [r0, #0]
    return &NvmCtx;
}
 804b1cc:	4800      	ldr	r0, [pc, #0]	; (804b1d0 <LoRaMacCommandsGetNvmCtx+0x8>)
 804b1ce:	4770      	bx	lr
 804b1d0:	2000ae38 	.word	0x2000ae38

0804b1d4 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 804b1d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 804b1d8:	4680      	mov	r8, r0
 804b1da:	4617      	mov	r7, r2
    if( payload == 0 )
 804b1dc:	2900      	cmp	r1, #0
 804b1de:	d03f      	beq.n	804b260 <LoRaMacCommandsAddCmd+0x8c>
 804b1e0:	4824      	ldr	r0, [pc, #144]	; (804b274 <LoRaMacCommandsAddCmd+0xa0>)
 804b1e2:	2300      	movs	r3, #0
 804b1e4:	461a      	mov	r2, r3
 804b1e6:	1e46      	subs	r6, r0, #1
 804b1e8:	f100 0c0f 	add.w	ip, r0, #15
 804b1ec:	18c5      	adds	r5, r0, r3
 804b1ee:	18f4      	adds	r4, r6, r3
 804b1f0:	eb0c 0e03 	add.w	lr, ip, r3
        if( mem[size] != 0x00 )
 804b1f4:	f814 9f01 	ldrb.w	r9, [r4, #1]!
 804b1f8:	f1b9 0f00 	cmp.w	r9, #0
 804b1fc:	d132      	bne.n	804b264 <LoRaMacCommandsAddCmd+0x90>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 804b1fe:	4574      	cmp	r4, lr
 804b200:	d1f8      	bne.n	804b1f4 <LoRaMacCommandsAddCmd+0x20>
    if( list->First == 0 )
 804b202:	4c1d      	ldr	r4, [pc, #116]	; (804b278 <LoRaMacCommandsAddCmd+0xa4>)
 804b204:	6860      	ldr	r0, [r4, #4]
 804b206:	b900      	cbnz	r0, 804b20a <LoRaMacCommandsAddCmd+0x36>
        list->First = element;
 804b208:	6065      	str	r5, [r4, #4]
    if( list->Last )
 804b20a:	68a0      	ldr	r0, [r4, #8]
 804b20c:	b100      	cbz	r0, 804b210 <LoRaMacCommandsAddCmd+0x3c>
        list->Last->Next = element;
 804b20e:	6005      	str	r5, [r0, #0]
    element->Next = 0;
 804b210:	eb04 1002 	add.w	r0, r4, r2, lsl #4
    list->Last = element;
 804b214:	60a5      	str	r5, [r4, #8]
    element->Next = 0;
 804b216:	2600      	movs	r6, #0
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
    newCmd->PayloadSize = payloadSize;
 804b218:	1c55      	adds	r5, r2, #1
    element->Next = 0;
 804b21a:	60c6      	str	r6, [r0, #12]
    newCmd->CID = cid;
 804b21c:	f880 8010 	strb.w	r8, [r0, #16]
    newCmd->PayloadSize = payloadSize;
 804b220:	eb04 1205 	add.w	r2, r4, r5, lsl #4
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 804b224:	4815      	ldr	r0, [pc, #84]	; (804b27c <LoRaMacCommandsAddCmd+0xa8>)
    newCmd->PayloadSize = payloadSize;
 804b226:	6057      	str	r7, [r2, #4]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 804b228:	4418      	add	r0, r3
 804b22a:	b2ba      	uxth	r2, r7
 804b22c:	f002 fdff 	bl	804de2e <memcpy1>
 804b230:	f1b8 0f0a 	cmp.w	r8, #10
 804b234:	d806      	bhi.n	804b244 <LoRaMacCommandsAddCmd+0x70>
 804b236:	2301      	movs	r3, #1
 804b238:	fa03 f808 	lsl.w	r8, r3, r8
 804b23c:	f418 6fa4 	tst.w	r8, #1312	; 0x520
 804b240:	bf18      	it	ne
 804b242:	461e      	movne	r6, r3
    newCmd->IsSticky = IsSticky( cid );
 804b244:	eb04 1205 	add.w	r2, r4, r5, lsl #4
 804b248:	7216      	strb	r6, [r2, #8]

    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 804b24a:	f8d4 20fc 	ldr.w	r2, [r4, #252]	; 0xfc
 804b24e:	3201      	adds	r2, #1
 804b250:	443a      	add	r2, r7
 804b252:	f8c4 20fc 	str.w	r2, [r4, #252]	; 0xfc

    NvmCtxCallback( );
 804b256:	f7ff ff91 	bl	804b17c <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 804b25a:	2000      	movs	r0, #0
}
 804b25c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 804b260:	2001      	movs	r0, #1
 804b262:	e7fb      	b.n	804b25c <LoRaMacCommandsAddCmd+0x88>
 804b264:	3201      	adds	r2, #1
        if( itr == NUM_OF_MAC_COMMANDS )
 804b266:	2a0f      	cmp	r2, #15
 804b268:	f103 0310 	add.w	r3, r3, #16
 804b26c:	d1be      	bne.n	804b1ec <LoRaMacCommandsAddCmd+0x18>
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 804b26e:	2002      	movs	r0, #2
 804b270:	e7f4      	b.n	804b25c <LoRaMacCommandsAddCmd+0x88>
 804b272:	bf00      	nop
 804b274:	2000ae40 	.word	0x2000ae40
 804b278:	2000ae34 	.word	0x2000ae34
 804b27c:	2000ae45 	.word	0x2000ae45

0804b280 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 804b280:	b510      	push	{r4, lr}
    if( macCmd == NULL )
 804b282:	b320      	cbz	r0, 804b2ce <LoRaMacCommandsRemoveCmd+0x4e>
    curElement = list->First;
 804b284:	4a13      	ldr	r2, [pc, #76]	; (804b2d4 <LoRaMacCommandsRemoveCmd+0x54>)
 804b286:	6853      	ldr	r3, [r2, #4]
    if( element != curElement )
 804b288:	4298      	cmp	r0, r3
 804b28a:	d104      	bne.n	804b296 <LoRaMacCommandsRemoveCmd+0x16>
        list->First = element->Next;
 804b28c:	6803      	ldr	r3, [r0, #0]
 804b28e:	6053      	str	r3, [r2, #4]
        curElement = NULL;
 804b290:	2300      	movs	r3, #0
 804b292:	e004      	b.n	804b29e <LoRaMacCommandsRemoveCmd+0x1e>
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 804b294:	460b      	mov	r3, r1
 804b296:	b113      	cbz	r3, 804b29e <LoRaMacCommandsRemoveCmd+0x1e>
 804b298:	6819      	ldr	r1, [r3, #0]
 804b29a:	4288      	cmp	r0, r1
 804b29c:	d1fa      	bne.n	804b294 <LoRaMacCommandsRemoveCmd+0x14>
    if( list->Last == element )
 804b29e:	6891      	ldr	r1, [r2, #8]
 804b2a0:	4288      	cmp	r0, r1
        list->Last = PrevElement;
 804b2a2:	bf08      	it	eq
 804b2a4:	6093      	streq	r3, [r2, #8]
    if( PrevElement != NULL )
 804b2a6:	b10b      	cbz	r3, 804b2ac <LoRaMacCommandsRemoveCmd+0x2c>
        PrevElement->Next = element->Next;
 804b2a8:	6801      	ldr	r1, [r0, #0]
 804b2aa:	6019      	str	r1, [r3, #0]
    if( LinkedListRemove( &NvmCtx.MacCommandList, macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 804b2ac:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 804b2b0:	6881      	ldr	r1, [r0, #8]
 804b2b2:	3b01      	subs	r3, #1
 804b2b4:	1a5b      	subs	r3, r3, r1
    element->Next = NULL;
 804b2b6:	2400      	movs	r4, #0
 804b2b8:	6004      	str	r4, [r0, #0]
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 804b2ba:	4621      	mov	r1, r4
    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 804b2bc:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 804b2c0:	2210      	movs	r2, #16
 804b2c2:	f002 fdc8 	bl	804de56 <memset1>
    if( FreeMacCommandSlot( macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    NvmCtxCallback( );
 804b2c6:	f7ff ff59 	bl	804b17c <NvmCtxCallback>
 804b2ca:	4620      	mov	r0, r4

    return LORAMAC_COMMANDS_SUCCESS;
}
 804b2cc:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 804b2ce:	2001      	movs	r0, #1
 804b2d0:	e7fc      	b.n	804b2cc <LoRaMacCommandsRemoveCmd+0x4c>
 804b2d2:	bf00      	nop
 804b2d4:	2000ae34 	.word	0x2000ae34

0804b2d8 <LoRaMacCommandsRemoveNoneStickyCmds>:

    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 804b2d8:	b538      	push	{r3, r4, r5, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 804b2da:	4b07      	ldr	r3, [pc, #28]	; (804b2f8 <LoRaMacCommandsRemoveNoneStickyCmds+0x20>)
 804b2dc:	685c      	ldr	r4, [r3, #4]

    // Loop through all elements
    while( curElement != NULL )
 804b2de:	b91c      	cbnz	r4, 804b2e8 <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
        {
            curElement = curElement->Next;
        }
    }

    NvmCtxCallback( );
 804b2e0:	f7ff ff4c 	bl	804b17c <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 804b2e4:	4620      	mov	r0, r4
 804b2e6:	bd38      	pop	{r3, r4, r5, pc}
        if( curElement->IsSticky == false )
 804b2e8:	7b23      	ldrb	r3, [r4, #12]
 804b2ea:	6825      	ldr	r5, [r4, #0]
 804b2ec:	b913      	cbnz	r3, 804b2f4 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
            LoRaMacCommandsRemoveCmd( curElement );
 804b2ee:	4620      	mov	r0, r4
 804b2f0:	f7ff ffc6 	bl	804b280 <LoRaMacCommandsRemoveCmd>
{
 804b2f4:	462c      	mov	r4, r5
 804b2f6:	e7f2      	b.n	804b2de <LoRaMacCommandsRemoveNoneStickyCmds+0x6>
 804b2f8:	2000ae34 	.word	0x2000ae34

0804b2fc <LoRaMacCommandsRemoveStickyAnsCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 804b2fc:	4b0b      	ldr	r3, [pc, #44]	; (804b32c <LoRaMacCommandsRemoveStickyAnsCmds+0x30>)
{
 804b2fe:	b570      	push	{r4, r5, r6, lr}
    curElement = NvmCtx.MacCommandList.First;
 804b300:	685c      	ldr	r4, [r3, #4]
 804b302:	2501      	movs	r5, #1

    // Loop through all elements
    while( curElement != NULL )
 804b304:	b91c      	cbnz	r4, 804b30e <LoRaMacCommandsRemoveStickyAnsCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
        }
        curElement = nexElement;
    }

    NvmCtxCallback( );
 804b306:	f7ff ff39 	bl	804b17c <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 804b30a:	4620      	mov	r0, r4
 804b30c:	bd70      	pop	{r4, r5, r6, pc}
        if( IsSticky( curElement->CID ) == true )
 804b30e:	7923      	ldrb	r3, [r4, #4]
        nexElement = curElement->Next;
 804b310:	6826      	ldr	r6, [r4, #0]
 804b312:	2b0a      	cmp	r3, #10
 804b314:	d807      	bhi.n	804b326 <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
 804b316:	fa05 f303 	lsl.w	r3, r5, r3
 804b31a:	f413 6fa4 	tst.w	r3, #1312	; 0x520
 804b31e:	d002      	beq.n	804b326 <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
            LoRaMacCommandsRemoveCmd( curElement );
 804b320:	4620      	mov	r0, r4
 804b322:	f7ff ffad 	bl	804b280 <LoRaMacCommandsRemoveCmd>
{
 804b326:	4634      	mov	r4, r6
 804b328:	e7ec      	b.n	804b304 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
 804b32a:	bf00      	nop
 804b32c:	2000ae34 	.word	0x2000ae34

0804b330 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 804b330:	b128      	cbz	r0, 804b33e <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = NvmCtx.SerializedCmdsSize;
 804b332:	4b04      	ldr	r3, [pc, #16]	; (804b344 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 804b334:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 804b338:	6003      	str	r3, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 804b33a:	2000      	movs	r0, #0
 804b33c:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 804b33e:	2001      	movs	r0, #1
}
 804b340:	4770      	bx	lr
 804b342:	bf00      	nop
 804b344:	2000ae34 	.word	0x2000ae34

0804b348 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 804b348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804b34a:	4607      	mov	r7, r0
    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 804b34c:	4616      	mov	r6, r2
 804b34e:	b1ca      	cbz	r2, 804b384 <LoRaMacCommandsSerializeCmds+0x3c>
 804b350:	b1c1      	cbz	r1, 804b384 <LoRaMacCommandsSerializeCmds+0x3c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 804b352:	4b0d      	ldr	r3, [pc, #52]	; (804b388 <LoRaMacCommandsSerializeCmds+0x40>)
 804b354:	685c      	ldr	r4, [r3, #4]
    uint8_t itr = 0;
 804b356:	2300      	movs	r3, #0

    // Loop through all elements
    while( curElement != NULL )
 804b358:	b90c      	cbnz	r4, 804b35e <LoRaMacCommandsSerializeCmds+0x16>
            break;
        }
        curElement = curElement->Next;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 804b35a:	2000      	movs	r0, #0
 804b35c:	e013      	b.n	804b386 <LoRaMacCommandsSerializeCmds+0x3e>
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 804b35e:	68a2      	ldr	r2, [r4, #8]
 804b360:	1af9      	subs	r1, r7, r3
 804b362:	3201      	adds	r2, #1
 804b364:	4291      	cmp	r1, r2
 804b366:	d3f8      	bcc.n	804b35a <LoRaMacCommandsSerializeCmds+0x12>
            buffer[itr++] = curElement->CID;
 804b368:	7922      	ldrb	r2, [r4, #4]
 804b36a:	54f2      	strb	r2, [r6, r3]
 804b36c:	1c5d      	adds	r5, r3, #1
 804b36e:	b2ed      	uxtb	r5, r5
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 804b370:	8922      	ldrh	r2, [r4, #8]
 804b372:	1d61      	adds	r1, r4, #5
 804b374:	1970      	adds	r0, r6, r5
 804b376:	f002 fd5a 	bl	804de2e <memcpy1>
            itr = itr + curElement->PayloadSize;
 804b37a:	68a3      	ldr	r3, [r4, #8]
        curElement = curElement->Next;
 804b37c:	6824      	ldr	r4, [r4, #0]
            itr = itr + curElement->PayloadSize;
 804b37e:	441d      	add	r5, r3
 804b380:	b2eb      	uxtb	r3, r5
 804b382:	e7e9      	b.n	804b358 <LoRaMacCommandsSerializeCmds+0x10>
        return LORAMAC_COMMANDS_ERROR_NPE;
 804b384:	2001      	movs	r0, #1
}
 804b386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804b388:	2000ae34 	.word	0x2000ae34

0804b38c <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
    if( cmdsPending == NULL )
 804b38c:	b160      	cbz	r0, 804b3a8 <LoRaMacCommandsStickyCmdsPending+0x1c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 804b38e:	4b07      	ldr	r3, [pc, #28]	; (804b3ac <LoRaMacCommandsStickyCmdsPending+0x20>)

    *cmdsPending = false;
 804b390:	2200      	movs	r2, #0
    curElement = NvmCtx.MacCommandList.First;
 804b392:	685b      	ldr	r3, [r3, #4]
    *cmdsPending = false;
 804b394:	7002      	strb	r2, [r0, #0]

    // Loop through all elements
    while( curElement != NULL )
 804b396:	b11b      	cbz	r3, 804b3a0 <LoRaMacCommandsStickyCmdsPending+0x14>
    {
        if( curElement->IsSticky == true )
 804b398:	7b1a      	ldrb	r2, [r3, #12]
 804b39a:	b11a      	cbz	r2, 804b3a4 <LoRaMacCommandsStickyCmdsPending+0x18>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 804b39c:	2301      	movs	r3, #1
 804b39e:	7003      	strb	r3, [r0, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 804b3a0:	2000      	movs	r0, #0
 804b3a2:	4770      	bx	lr
        }
        curElement = curElement->Next;
 804b3a4:	681b      	ldr	r3, [r3, #0]
 804b3a6:	e7f6      	b.n	804b396 <LoRaMacCommandsStickyCmdsPending+0xa>
        return LORAMAC_COMMANDS_ERROR_NPE;
 804b3a8:	2001      	movs	r0, #1
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 804b3aa:	4770      	bx	lr
 804b3ac:	2000ae34 	.word	0x2000ae34

0804b3b0 <LoRaMacConfirmQueueInit>:
    }
    return NULL;
}

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives, LoRaMacConfirmQueueNvmEvent confirmQueueNvmCtxChanged )
{
 804b3b0:	b538      	push	{r3, r4, r5, lr}
    ConfirmQueueCtx.Primitives = primitives;
 804b3b2:	4c0a      	ldr	r4, [pc, #40]	; (804b3dc <LoRaMacConfirmQueueInit+0x2c>)
 804b3b4:	4623      	mov	r3, r4

    // Assign nvm context
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;

    // Init counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 804b3b6:	2200      	movs	r2, #0
    ConfirmQueueCtx.Primitives = primitives;
 804b3b8:	f843 0b14 	str.w	r0, [r3], #20
{
 804b3bc:	460d      	mov	r5, r1
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 804b3be:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;

    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 804b3c2:	4618      	mov	r0, r3
 804b3c4:	2214      	movs	r2, #20
 804b3c6:	21ff      	movs	r1, #255	; 0xff
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 804b3c8:	6123      	str	r3, [r4, #16]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 804b3ca:	e9c4 3301 	strd	r3, r3, [r4, #4]
    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 804b3ce:	f002 fd42 	bl	804de56 <memset1>

    // Common status
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 804b3d2:	6923      	ldr	r3, [r4, #16]

    // Assign callback
    ConfirmQueueCtx.LoRaMacConfirmQueueNvmEvent = confirmQueueNvmCtxChanged;
 804b3d4:	60e5      	str	r5, [r4, #12]
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 804b3d6:	2201      	movs	r2, #1
 804b3d8:	755a      	strb	r2, [r3, #21]
}
 804b3da:	bd38      	pop	{r3, r4, r5, pc}
 804b3dc:	2000af34 	.word	0x2000af34

0804b3e0 <LoRaMacConfirmQueueRestoreNvmCtx>:

bool LoRaMacConfirmQueueRestoreNvmCtx( void* confirmQueueNvmCtx )
{
 804b3e0:	b508      	push	{r3, lr}
    // Restore module context
    if( confirmQueueNvmCtx != NULL )
 804b3e2:	b128      	cbz	r0, 804b3f0 <LoRaMacConfirmQueueRestoreNvmCtx+0x10>
    {
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
 804b3e4:	4601      	mov	r1, r0
 804b3e6:	2216      	movs	r2, #22
 804b3e8:	4802      	ldr	r0, [pc, #8]	; (804b3f4 <LoRaMacConfirmQueueRestoreNvmCtx+0x14>)
 804b3ea:	f002 fd20 	bl	804de2e <memcpy1>
        return true;
 804b3ee:	2001      	movs	r0, #1
    }
    else
    {
        return false;
    }
}
 804b3f0:	bd08      	pop	{r3, pc}
 804b3f2:	bf00      	nop
 804b3f4:	2000af48 	.word	0x2000af48

0804b3f8 <LoRaMacConfirmQueueGetNvmCtx>:

void* LoRaMacConfirmQueueGetNvmCtx( size_t* confirmQueueNvmCtxSize )
{
    *confirmQueueNvmCtxSize = sizeof( ConfirmQueueNvmCtx );
 804b3f8:	2316      	movs	r3, #22
 804b3fa:	6003      	str	r3, [r0, #0]
    return &ConfirmQueueNvmCtx;
}
 804b3fc:	4800      	ldr	r0, [pc, #0]	; (804b400 <LoRaMacConfirmQueueGetNvmCtx+0x8>)
 804b3fe:	4770      	bx	lr
 804b400:	2000af48 	.word	0x2000af48

0804b404 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 804b404:	b510      	push	{r4, lr}
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 804b406:	490d      	ldr	r1, [pc, #52]	; (804b43c <LoRaMacConfirmQueueAdd+0x38>)
 804b408:	690b      	ldr	r3, [r1, #16]
 804b40a:	7d1a      	ldrb	r2, [r3, #20]
 804b40c:	2a04      	cmp	r2, #4
 804b40e:	d813      	bhi.n	804b438 <LoRaMacConfirmQueueAdd+0x34>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 804b410:	688a      	ldr	r2, [r1, #8]
 804b412:	7804      	ldrb	r4, [r0, #0]
 804b414:	7014      	strb	r4, [r2, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 804b416:	7844      	ldrb	r4, [r0, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 804b418:	78c0      	ldrb	r0, [r0, #3]
 804b41a:	70d0      	strb	r0, [r2, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 804b41c:	2000      	movs	r0, #0
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 804b41e:	7054      	strb	r4, [r2, #1]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 804b420:	7090      	strb	r0, [r2, #2]
    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 804b422:	7d18      	ldrb	r0, [r3, #20]
 804b424:	3001      	adds	r0, #1
 804b426:	7518      	strb	r0, [r3, #20]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 804b428:	f103 0010 	add.w	r0, r3, #16
 804b42c:	4282      	cmp	r2, r0
        bufferPointer++;
 804b42e:	bf18      	it	ne
 804b430:	1d13      	addne	r3, r2, #4
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 804b432:	608b      	str	r3, [r1, #8]

    return true;
 804b434:	2001      	movs	r0, #1
}
 804b436:	bd10      	pop	{r4, pc}
        return false;
 804b438:	2000      	movs	r0, #0
 804b43a:	e7fc      	b.n	804b436 <LoRaMacConfirmQueueAdd+0x32>
 804b43c:	2000af34 	.word	0x2000af34

0804b440 <LoRaMacConfirmQueueRemoveFirst>:
    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt == 0 )
 804b440:	4a07      	ldr	r2, [pc, #28]	; (804b460 <LoRaMacConfirmQueueRemoveFirst+0x20>)
 804b442:	6913      	ldr	r3, [r2, #16]
 804b444:	7d18      	ldrb	r0, [r3, #20]
 804b446:	b148      	cbz	r0, 804b45c <LoRaMacConfirmQueueRemoveFirst+0x1c>
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 804b448:	6851      	ldr	r1, [r2, #4]
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
 804b44a:	3801      	subs	r0, #1
 804b44c:	7518      	strb	r0, [r3, #20]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 804b44e:	f103 0010 	add.w	r0, r3, #16
 804b452:	4281      	cmp	r1, r0
        bufferPointer++;
 804b454:	bf18      	it	ne
 804b456:	1d0b      	addne	r3, r1, #4
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 804b458:	6053      	str	r3, [r2, #4]

    return true;
 804b45a:	2001      	movs	r0, #1
}
 804b45c:	4770      	bx	lr
 804b45e:	bf00      	nop
 804b460:	2000af34 	.word	0x2000af34

0804b464 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 804b464:	b570      	push	{r4, r5, r6, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 804b466:	4c0b      	ldr	r4, [pc, #44]	; (804b494 <LoRaMacConfirmQueueSetStatus+0x30>)
 804b468:	6922      	ldr	r2, [r4, #16]
 804b46a:	7d13      	ldrb	r3, [r2, #20]
 804b46c:	b12b      	cbz	r3, 804b47a <LoRaMacConfirmQueueSetStatus+0x16>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 804b46e:	e9d4 3401 	ldrd	r3, r4, [r4, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 804b472:	f102 0510 	add.w	r5, r2, #16
    while( element != bufferEnd )
 804b476:	429c      	cmp	r4, r3
 804b478:	d100      	bne.n	804b47c <LoRaMacConfirmQueueSetStatus+0x18>
        {
            element->Status = status;
            element->ReadyToHandle = true;
        }
    }
}
 804b47a:	bd70      	pop	{r4, r5, r6, pc}
        if( element->Request == request )
 804b47c:	781e      	ldrb	r6, [r3, #0]
 804b47e:	428e      	cmp	r6, r1
 804b480:	d004      	beq.n	804b48c <LoRaMacConfirmQueueSetStatus+0x28>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 804b482:	42ab      	cmp	r3, r5
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 804b484:	bf0c      	ite	eq
 804b486:	4613      	moveq	r3, r2
        bufferPointer++;
 804b488:	3304      	addne	r3, #4
 804b48a:	e7f4      	b.n	804b476 <LoRaMacConfirmQueueSetStatus+0x12>
            element->ReadyToHandle = true;
 804b48c:	2201      	movs	r2, #1
            element->Status = status;
 804b48e:	7058      	strb	r0, [r3, #1]
            element->ReadyToHandle = true;
 804b490:	709a      	strb	r2, [r3, #2]
 804b492:	e7f2      	b.n	804b47a <LoRaMacConfirmQueueSetStatus+0x16>
 804b494:	2000af34 	.word	0x2000af34

0804b498 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 804b498:	b530      	push	{r4, r5, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 804b49a:	490b      	ldr	r1, [pc, #44]	; (804b4c8 <LoRaMacConfirmQueueGetStatus+0x30>)
 804b49c:	690a      	ldr	r2, [r1, #16]
 804b49e:	7d13      	ldrb	r3, [r2, #20]
 804b4a0:	b12b      	cbz	r3, 804b4ae <LoRaMacConfirmQueueGetStatus+0x16>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 804b4a2:	e9d1 3101 	ldrd	r3, r1, [r1, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 804b4a6:	f102 0410 	add.w	r4, r2, #16
    while( element != bufferEnd )
 804b4aa:	4299      	cmp	r1, r3
 804b4ac:	d101      	bne.n	804b4b2 <LoRaMacConfirmQueueGetStatus+0x1a>
        if( element != NULL )
        {
            return element->Status;
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 804b4ae:	2001      	movs	r0, #1
}
 804b4b0:	bd30      	pop	{r4, r5, pc}
        if( element->Request == request )
 804b4b2:	781d      	ldrb	r5, [r3, #0]
 804b4b4:	4285      	cmp	r5, r0
 804b4b6:	d004      	beq.n	804b4c2 <LoRaMacConfirmQueueGetStatus+0x2a>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 804b4b8:	42a3      	cmp	r3, r4
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 804b4ba:	bf0c      	ite	eq
 804b4bc:	4613      	moveq	r3, r2
        bufferPointer++;
 804b4be:	3304      	addne	r3, #4
 804b4c0:	e7f3      	b.n	804b4aa <LoRaMacConfirmQueueGetStatus+0x12>
            return element->Status;
 804b4c2:	7858      	ldrb	r0, [r3, #1]
 804b4c4:	e7f4      	b.n	804b4b0 <LoRaMacConfirmQueueGetStatus+0x18>
 804b4c6:	bf00      	nop
 804b4c8:	2000af34 	.word	0x2000af34

0804b4cc <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 804b4cc:	b570      	push	{r4, r5, r6, lr}
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 804b4ce:	490a      	ldr	r1, [pc, #40]	; (804b4f8 <LoRaMacConfirmQueueSetStatusCmn+0x2c>)

    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 804b4d0:	690a      	ldr	r2, [r1, #16]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 804b4d2:	684b      	ldr	r3, [r1, #4]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 804b4d4:	7d14      	ldrb	r4, [r2, #20]
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 804b4d6:	7550      	strb	r0, [r2, #21]
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 804b4d8:	b16c      	cbz	r4, 804b4f6 <LoRaMacConfirmQueueSetStatusCmn+0x2a>
            if( element->RestrictCommonReadyToHandle == false )
            {
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
 804b4da:	6889      	ldr	r1, [r1, #8]
                element->ReadyToHandle = true;
 804b4dc:	2501      	movs	r5, #1
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 804b4de:	f102 0410 	add.w	r4, r2, #16
            if( element->RestrictCommonReadyToHandle == false )
 804b4e2:	78de      	ldrb	r6, [r3, #3]
            element->Status = status;
 804b4e4:	7058      	strb	r0, [r3, #1]
            if( element->RestrictCommonReadyToHandle == false )
 804b4e6:	b906      	cbnz	r6, 804b4ea <LoRaMacConfirmQueueSetStatusCmn+0x1e>
                element->ReadyToHandle = true;
 804b4e8:	709d      	strb	r5, [r3, #2]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 804b4ea:	42a3      	cmp	r3, r4
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 804b4ec:	bf0c      	ite	eq
 804b4ee:	4613      	moveq	r3, r2
        bufferPointer++;
 804b4f0:	3304      	addne	r3, #4
        }while( element != ConfirmQueueCtx.BufferEnd );
 804b4f2:	4299      	cmp	r1, r3
 804b4f4:	d1f5      	bne.n	804b4e2 <LoRaMacConfirmQueueSetStatusCmn+0x16>
    }
}
 804b4f6:	bd70      	pop	{r4, r5, r6, pc}
 804b4f8:	2000af34 	.word	0x2000af34

0804b4fc <LoRaMacConfirmQueueIsCmdActive>:
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 804b4fc:	4a0a      	ldr	r2, [pc, #40]	; (804b528 <LoRaMacConfirmQueueIsCmdActive+0x2c>)
 804b4fe:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 804b502:	6912      	ldr	r2, [r2, #16]
{
 804b504:	b530      	push	{r4, r5, lr}
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 804b506:	f102 0410 	add.w	r4, r2, #16
    while( element != bufferEnd )
 804b50a:	4299      	cmp	r1, r3
 804b50c:	d101      	bne.n	804b512 <LoRaMacConfirmQueueIsCmdActive+0x16>
    {
        return true;
    }
    return false;
 804b50e:	2000      	movs	r0, #0
}
 804b510:	bd30      	pop	{r4, r5, pc}
        if( element->Request == request )
 804b512:	781d      	ldrb	r5, [r3, #0]
 804b514:	4285      	cmp	r5, r0
 804b516:	d004      	beq.n	804b522 <LoRaMacConfirmQueueIsCmdActive+0x26>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 804b518:	42a3      	cmp	r3, r4
        bufferPointer++;
 804b51a:	bf14      	ite	ne
 804b51c:	3304      	addne	r3, #4
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 804b51e:	4613      	moveq	r3, r2
 804b520:	e7f3      	b.n	804b50a <LoRaMacConfirmQueueIsCmdActive+0xe>
        return true;
 804b522:	2001      	movs	r0, #1
 804b524:	e7f4      	b.n	804b510 <LoRaMacConfirmQueueIsCmdActive+0x14>
 804b526:	bf00      	nop
 804b528:	2000af34 	.word	0x2000af34

0804b52c <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 804b52c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 804b530:	4c13      	ldr	r4, [pc, #76]	; (804b580 <LoRaMacConfirmQueueHandleCb+0x54>)
 804b532:	6923      	ldr	r3, [r4, #16]
 804b534:	f893 8014 	ldrb.w	r8, [r3, #20]
{
 804b538:	4606      	mov	r6, r0
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 804b53a:	2500      	movs	r5, #0
 804b53c:	b2eb      	uxtb	r3, r5
 804b53e:	4598      	cmp	r8, r3
 804b540:	d802      	bhi.n	804b548 <LoRaMacConfirmQueueHandleCb+0x1c>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
        }
    }
}
 804b542:	b002      	add	sp, #8
 804b544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 804b548:	6863      	ldr	r3, [r4, #4]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 804b54a:	789f      	ldrb	r7, [r3, #2]
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 804b54c:	7819      	ldrb	r1, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 804b54e:	785a      	ldrb	r2, [r3, #1]
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 804b550:	7031      	strb	r1, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 804b552:	7072      	strb	r2, [r6, #1]
        if( readyToHandle == true )
 804b554:	b15f      	cbz	r7, 804b56e <LoRaMacConfirmQueueHandleCb+0x42>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 804b556:	6823      	ldr	r3, [r4, #0]
 804b558:	4630      	mov	r0, r6
 804b55a:	689b      	ldr	r3, [r3, #8]
 804b55c:	4798      	blx	r3
        LoRaMacConfirmQueueRemoveFirst( );
 804b55e:	f7ff ff6f 	bl	804b440 <LoRaMacConfirmQueueRemoveFirst>
        if( readyToHandle == false )
 804b562:	b917      	cbnz	r7, 804b56a <LoRaMacConfirmQueueHandleCb+0x3e>
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 804b564:	a801      	add	r0, sp, #4
 804b566:	f7ff ff4d 	bl	804b404 <LoRaMacConfirmQueueAdd>
 804b56a:	3501      	adds	r5, #1
 804b56c:	e7e6      	b.n	804b53c <LoRaMacConfirmQueueHandleCb+0x10>
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 804b56e:	78db      	ldrb	r3, [r3, #3]
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 804b570:	f88d 1004 	strb.w	r1, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 804b574:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 804b578:	f88d 3007 	strb.w	r3, [sp, #7]
 804b57c:	e7ef      	b.n	804b55e <LoRaMacConfirmQueueHandleCb+0x32>
 804b57e:	bf00      	nop
 804b580:	2000af34 	.word	0x2000af34

0804b584 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 804b584:	4b01      	ldr	r3, [pc, #4]	; (804b58c <LoRaMacConfirmQueueGetCnt+0x8>)
 804b586:	691b      	ldr	r3, [r3, #16]
}
 804b588:	7d18      	ldrb	r0, [r3, #20]
 804b58a:	4770      	bx	lr
 804b58c:	2000af34 	.word	0x2000af34

0804b590 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 804b590:	4b03      	ldr	r3, [pc, #12]	; (804b5a0 <LoRaMacConfirmQueueIsFull+0x10>)
 804b592:	691b      	ldr	r3, [r3, #16]
 804b594:	7d18      	ldrb	r0, [r3, #20]
    }
    else
    {
        return false;
    }
}
 804b596:	2804      	cmp	r0, #4
 804b598:	bf94      	ite	ls
 804b59a:	2000      	movls	r0, #0
 804b59c:	2001      	movhi	r0, #1
 804b59e:	4770      	bx	lr
 804b5a0:	2000af34 	.word	0x2000af34

0804b5a4 <GetLastFcntDown>:
{
    if( lastDown == NULL )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 804b5a4:	3801      	subs	r0, #1
 804b5a6:	2806      	cmp	r0, #6
 804b5a8:	d82b      	bhi.n	804b602 <GetLastFcntDown+0x5e>
 804b5aa:	e8df f000 	tbb	[pc, r0]
 804b5ae:	0d04      	.short	0x0d04
 804b5b0:	221e1913 	.word	0x221e1913
 804b5b4:	26          	.byte	0x26
 804b5b5:	00          	.byte	0x00
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.NFCntDown;
 804b5b6:	4b14      	ldr	r3, [pc, #80]	; (804b608 <GetLastFcntDown+0x64>)
 804b5b8:	685a      	ldr	r2, [r3, #4]
 804b5ba:	4613      	mov	r3, r2
 804b5bc:	f853 0f10 	ldr.w	r0, [r3, #16]!
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.NFCntDown;
            break;
        case A_FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.AFCntDown;
 804b5c0:	6008      	str	r0, [r1, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.AFCntDown;
 804b5c2:	6313      	str	r3, [r2, #48]	; 0x30
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown3;
            break;
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 804b5c4:	2000      	movs	r0, #0
            break;
 804b5c6:	4770      	bx	lr
            *lastDown = CryptoCtx.NvmCtx->FCntList.AFCntDown;
 804b5c8:	4b0f      	ldr	r3, [pc, #60]	; (804b608 <GetLastFcntDown+0x64>)
 804b5ca:	685a      	ldr	r2, [r3, #4]
 804b5cc:	4613      	mov	r3, r2
 804b5ce:	f853 0f14 	ldr.w	r0, [r3, #20]!
 804b5d2:	e7f5      	b.n	804b5c0 <GetLastFcntDown+0x1c>
            *lastDown = CryptoCtx.NvmCtx->FCntList.FCntDown;
 804b5d4:	4b0c      	ldr	r3, [pc, #48]	; (804b608 <GetLastFcntDown+0x64>)
 804b5d6:	685a      	ldr	r2, [r3, #4]
 804b5d8:	4613      	mov	r3, r2
 804b5da:	f853 0f18 	ldr.w	r0, [r3, #24]!
 804b5de:	e7ef      	b.n	804b5c0 <GetLastFcntDown+0x1c>
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 804b5e0:	4b09      	ldr	r3, [pc, #36]	; (804b608 <GetLastFcntDown+0x64>)
 804b5e2:	685b      	ldr	r3, [r3, #4]
 804b5e4:	69db      	ldr	r3, [r3, #28]
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown3;
 804b5e6:	600b      	str	r3, [r1, #0]
 804b5e8:	e7ec      	b.n	804b5c4 <GetLastFcntDown+0x20>
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown1;
 804b5ea:	4b07      	ldr	r3, [pc, #28]	; (804b608 <GetLastFcntDown+0x64>)
 804b5ec:	685b      	ldr	r3, [r3, #4]
 804b5ee:	6a1b      	ldr	r3, [r3, #32]
 804b5f0:	e7f9      	b.n	804b5e6 <GetLastFcntDown+0x42>
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown2;
 804b5f2:	4b05      	ldr	r3, [pc, #20]	; (804b608 <GetLastFcntDown+0x64>)
 804b5f4:	685b      	ldr	r3, [r3, #4]
 804b5f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804b5f8:	e7f5      	b.n	804b5e6 <GetLastFcntDown+0x42>
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown3;
 804b5fa:	4b03      	ldr	r3, [pc, #12]	; (804b608 <GetLastFcntDown+0x64>)
 804b5fc:	685b      	ldr	r3, [r3, #4]
 804b5fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804b600:	e7f1      	b.n	804b5e6 <GetLastFcntDown+0x42>
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 804b602:	2005      	movs	r0, #5
}
 804b604:	4770      	bx	lr
 804b606:	bf00      	nop
 804b608:	2000af60 	.word	0x2000af60

0804b60c <DummyCB>:
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
    return;
}
 804b60c:	4770      	bx	lr

0804b60e <PayloadEncrypt>:
{
 804b60e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 804b612:	b089      	sub	sp, #36	; 0x24
 804b614:	460f      	mov	r7, r1
 804b616:	4690      	mov	r8, r2
 804b618:	4699      	mov	r9, r3
 804b61a:	9d11      	ldr	r5, [sp, #68]	; 0x44
    if( buffer == 0 )
 804b61c:	4606      	mov	r6, r0
 804b61e:	2800      	cmp	r0, #0
 804b620:	d058      	beq.n	804b6d4 <PayloadEncrypt+0xc6>
    uint8_t sBlock[16] = { 0 };
 804b622:	2210      	movs	r2, #16
 804b624:	2100      	movs	r1, #0
 804b626:	4668      	mov	r0, sp
 804b628:	f004 fd90 	bl	805014c <memset>
    uint8_t aBlock[16] = { 0 };
 804b62c:	2210      	movs	r2, #16
 804b62e:	2100      	movs	r1, #0
 804b630:	eb0d 0002 	add.w	r0, sp, r2
 804b634:	f004 fd8a 	bl	805014c <memset>
    aBlock[5] = dir;
 804b638:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 804b63c:	f88d 3015 	strb.w	r3, [sp, #21]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 804b640:	ea4f 2319 	mov.w	r3, r9, lsr #8
 804b644:	f88d 3017 	strb.w	r3, [sp, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 804b648:	ea4f 4319 	mov.w	r3, r9, lsr #16
 804b64c:	f88d 3018 	strb.w	r3, [sp, #24]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 804b650:	0a2b      	lsrs	r3, r5, #8
    aBlock[0] = 0x01;
 804b652:	2401      	movs	r4, #1
    aBlock[6] = address & 0xFF;
 804b654:	f88d 9016 	strb.w	r9, [sp, #22]
    aBlock[10] = frameCounter & 0xFF;
 804b658:	f88d 501a 	strb.w	r5, [sp, #26]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 804b65c:	ea4f 6919 	mov.w	r9, r9, lsr #24
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 804b660:	f88d 301b 	strb.w	r3, [sp, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 804b664:	0c2b      	lsrs	r3, r5, #16
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 804b666:	0e2d      	lsrs	r5, r5, #24
 804b668:	f88d 501d 	strb.w	r5, [sp, #29]
    aBlock[0] = 0x01;
 804b66c:	f88d 4010 	strb.w	r4, [sp, #16]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 804b670:	f88d 9019 	strb.w	r9, [sp, #25]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 804b674:	f88d 301c 	strb.w	r3, [sp, #28]
    while( size > 0 )
 804b678:	463d      	mov	r5, r7
 804b67a:	eba7 0905 	sub.w	r9, r7, r5
 804b67e:	2d00      	cmp	r5, #0
 804b680:	fa5f f989 	uxtb.w	r9, r9
 804b684:	dc03      	bgt.n	804b68e <PayloadEncrypt+0x80>
    return LORAMAC_CRYPTO_SUCCESS;
 804b686:	2000      	movs	r0, #0
}
 804b688:	b009      	add	sp, #36	; 0x24
 804b68a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 804b68e:	2110      	movs	r1, #16
        aBlock[15] = ctr & 0xFF;
 804b690:	f88d 401f 	strb.w	r4, [sp, #31]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 804b694:	466b      	mov	r3, sp
        ctr++;
 804b696:	3401      	adds	r4, #1
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 804b698:	4642      	mov	r2, r8
 804b69a:	eb0d 0001 	add.w	r0, sp, r1
        ctr++;
 804b69e:	b2a4      	uxth	r4, r4
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 804b6a0:	f7fc fe64 	bl	804836c <SecureElementAesEncrypt>
 804b6a4:	b9c0      	cbnz	r0, 804b6d8 <PayloadEncrypt+0xca>
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 804b6a6:	2d10      	cmp	r5, #16
 804b6a8:	46ac      	mov	ip, r5
 804b6aa:	bfa8      	it	ge
 804b6ac:	f04f 0c10 	movge.w	ip, #16
 804b6b0:	b2c3      	uxtb	r3, r0
 804b6b2:	4563      	cmp	r3, ip
 804b6b4:	f100 0001 	add.w	r0, r0, #1
 804b6b8:	db02      	blt.n	804b6c0 <PayloadEncrypt+0xb2>
 804b6ba:	3d10      	subs	r5, #16
 804b6bc:	b22d      	sxth	r5, r5
 804b6be:	e7dc      	b.n	804b67a <PayloadEncrypt+0x6c>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 804b6c0:	aa08      	add	r2, sp, #32
 804b6c2:	eb09 0103 	add.w	r1, r9, r3
 804b6c6:	4413      	add	r3, r2
 804b6c8:	5c72      	ldrb	r2, [r6, r1]
 804b6ca:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 804b6ce:	4053      	eors	r3, r2
 804b6d0:	5473      	strb	r3, [r6, r1]
 804b6d2:	e7ed      	b.n	804b6b0 <PayloadEncrypt+0xa2>
        return LORAMAC_CRYPTO_ERROR_NPE;
 804b6d4:	200a      	movs	r0, #10
 804b6d6:	e7d7      	b.n	804b688 <PayloadEncrypt+0x7a>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 804b6d8:	200f      	movs	r0, #15
 804b6da:	e7d5      	b.n	804b688 <PayloadEncrypt+0x7a>

0804b6dc <DeriveSessionKey10x>:
{
 804b6dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 804b6de:	4604      	mov	r4, r0
 804b6e0:	b085      	sub	sp, #20
 804b6e2:	460f      	mov	r7, r1
 804b6e4:	4616      	mov	r6, r2
    if( ( joinNonce == 0 ) || ( netID == 0 ) || ( devNonce == 0 ) )
 804b6e6:	461d      	mov	r5, r3
 804b6e8:	b34b      	cbz	r3, 804b73e <DeriveSessionKey10x+0x62>
    uint8_t compBase[16] = { 0 };
 804b6ea:	2210      	movs	r2, #16
 804b6ec:	2100      	movs	r1, #0
 804b6ee:	4668      	mov	r0, sp
 804b6f0:	f004 fd2c 	bl	805014c <memset>
    switch( keyID )
 804b6f4:	2c08      	cmp	r4, #8
            compBase[0] = 0x01;
 804b6f6:	bf14      	ite	ne
 804b6f8:	2301      	movne	r3, #1
            compBase[0] = 0x02;
 804b6fa:	2302      	moveq	r3, #2
    memcpy1( compBase + 1, joinNonce, 3 );
 804b6fc:	2203      	movs	r2, #3
 804b6fe:	4639      	mov	r1, r7
 804b700:	f10d 0001 	add.w	r0, sp, #1
            compBase[0] = 0x02;
 804b704:	f88d 3000 	strb.w	r3, [sp]
    memcpy1( compBase + 1, joinNonce, 3 );
 804b708:	f002 fb91 	bl	804de2e <memcpy1>
    memcpy1( compBase + 4, netID, 3 );
 804b70c:	2203      	movs	r2, #3
 804b70e:	4631      	mov	r1, r6
 804b710:	a801      	add	r0, sp, #4
 804b712:	f002 fb8c 	bl	804de2e <memcpy1>
    memcpy1( compBase + 7, devNonce, 2 );
 804b716:	2202      	movs	r2, #2
 804b718:	4629      	mov	r1, r5
 804b71a:	f10d 0007 	add.w	r0, sp, #7
 804b71e:	f002 fb86 	bl	804de2e <memcpy1>
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 804b722:	4b08      	ldr	r3, [pc, #32]	; (804b744 <DeriveSessionKey10x+0x68>)
 804b724:	6858      	ldr	r0, [r3, #4]
 804b726:	2202      	movs	r2, #2
 804b728:	4623      	mov	r3, r4
 804b72a:	4669      	mov	r1, sp
 804b72c:	6800      	ldr	r0, [r0, #0]
 804b72e:	f7fc fe9a 	bl	8048466 <SecureElementDeriveAndStoreKey>
    return LORAMAC_CRYPTO_SUCCESS;
 804b732:	2800      	cmp	r0, #0
 804b734:	bf14      	ite	ne
 804b736:	200f      	movne	r0, #15
 804b738:	2000      	moveq	r0, #0
}
 804b73a:	b005      	add	sp, #20
 804b73c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 804b73e:	200a      	movs	r0, #10
 804b740:	e7fb      	b.n	804b73a <DeriveSessionKey10x+0x5e>
 804b742:	bf00      	nop
 804b744:	2000af60 	.word	0x2000af60

0804b748 <LoRaMacCryptoDeriveMcKEKey.part.2>:
    }

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
 804b748:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 804b74a:	2210      	movs	r2, #16
 804b74c:	2100      	movs	r1, #0
 804b74e:	4668      	mov	r0, sp
 804b750:	f004 fcfc 	bl	805014c <memset>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 804b754:	4b07      	ldr	r3, [pc, #28]	; (804b774 <LoRaMacCryptoDeriveMcKEKey.part.2+0x2c>)
 804b756:	6858      	ldr	r0, [r3, #4]
 804b758:	2209      	movs	r2, #9
 804b75a:	237f      	movs	r3, #127	; 0x7f
 804b75c:	4669      	mov	r1, sp
 804b75e:	6800      	ldr	r0, [r0, #0]
 804b760:	f7fc fe81 	bl	8048466 <SecureElementDeriveAndStoreKey>
 804b764:	2800      	cmp	r0, #0
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 804b766:	bf14      	ite	ne
 804b768:	200f      	movne	r0, #15
 804b76a:	2000      	moveq	r0, #0
 804b76c:	b005      	add	sp, #20
 804b76e:	f85d fb04 	ldr.w	pc, [sp], #4
 804b772:	bf00      	nop
 804b774:	2000af60 	.word	0x2000af60

0804b778 <VerifyCmacB0.constprop.3>:
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 804b778:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 804b77c:	b0c5      	sub	sp, #276	; 0x114
 804b77e:	460c      	mov	r4, r1
 804b780:	4617      	mov	r7, r2
 804b782:	4699      	mov	r9, r3
 804b784:	9e4c      	ldr	r6, [sp, #304]	; 0x130
 804b786:	9d4d      	ldr	r5, [sp, #308]	; 0x134
    if( msg == 0 )
 804b788:	4680      	mov	r8, r0
 804b78a:	2800      	cmp	r0, #0
 804b78c:	d053      	beq.n	804b836 <VerifyCmacB0.constprop.3+0xbe>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 804b78e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 804b792:	d852      	bhi.n	804b83a <VerifyCmacB0.constprop.3+0xc2>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 804b794:	f44f 7288 	mov.w	r2, #272	; 0x110
 804b798:	2100      	movs	r1, #0
 804b79a:	4668      	mov	r0, sp
 804b79c:	f002 fb5b 	bl	804de56 <memset1>
    b0[0] = 0x49;
 804b7a0:	2349      	movs	r3, #73	; 0x49
 804b7a2:	f88d 3000 	strb.w	r3, [sp]
    if( ( isAck == true ) && ( dir == DOWNLINK ) )
 804b7a6:	f1b9 0f00 	cmp.w	r9, #0
 804b7aa:	d03f      	beq.n	804b82c <VerifyCmacB0.constprop.3+0xb4>
        confFCnt = ( uint16_t )( CryptoCtx.NvmCtx->FCntList.FCntUp % 65536 );
 804b7ac:	4b24      	ldr	r3, [pc, #144]	; (804b840 <VerifyCmacB0.constprop.3+0xc8>)
 804b7ae:	685b      	ldr	r3, [r3, #4]
 804b7b0:	68db      	ldr	r3, [r3, #12]
        b0[1] = confFCnt & 0xFF;
 804b7b2:	f88d 3001 	strb.w	r3, [sp, #1]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
 804b7b6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 804b7ba:	f88d 3002 	strb.w	r3, [sp, #2]
    b0[5] = dir;
 804b7be:	2201      	movs	r2, #1
 804b7c0:	f88d 2005 	strb.w	r2, [sp, #5]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 804b7c4:	0a32      	lsrs	r2, r6, #8
 804b7c6:	f88d 2007 	strb.w	r2, [sp, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 804b7ca:	0c32      	lsrs	r2, r6, #16
 804b7cc:	f88d 2008 	strb.w	r2, [sp, #8]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 804b7d0:	0a2a      	lsrs	r2, r5, #8
 804b7d2:	f88d 200b 	strb.w	r2, [sp, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 804b7d6:	0c2a      	lsrs	r2, r5, #16
    b0[3] = 0x00;
 804b7d8:	2300      	movs	r3, #0
    b0[6] = devAddr & 0xFF;
 804b7da:	f88d 6006 	strb.w	r6, [sp, #6]
    b0[10] = fCnt & 0xFF;
 804b7de:	f88d 500a 	strb.w	r5, [sp, #10]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 804b7e2:	f88d 200c 	strb.w	r2, [sp, #12]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 804b7e6:	4641      	mov	r1, r8
 804b7e8:	4622      	mov	r2, r4
 804b7ea:	a804      	add	r0, sp, #16
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 804b7ec:	0e36      	lsrs	r6, r6, #24
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 804b7ee:	0e2d      	lsrs	r5, r5, #24
    b0[3] = 0x00;
 804b7f0:	f88d 3003 	strb.w	r3, [sp, #3]
    b0[4] = 0x00;
 804b7f4:	f88d 3004 	strb.w	r3, [sp, #4]
    b0[14] = 0x00;
 804b7f8:	f88d 300e 	strb.w	r3, [sp, #14]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 804b7fc:	f88d 6009 	strb.w	r6, [sp, #9]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 804b800:	f88d 500d 	strb.w	r5, [sp, #13]
    b0[15] = msgLen & 0xFF;
 804b804:	f88d 400f 	strb.w	r4, [sp, #15]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 804b808:	f002 fb11 	bl	804de2e <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 804b80c:	f104 0110 	add.w	r1, r4, #16
 804b810:	463b      	mov	r3, r7
 804b812:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 804b814:	b289      	uxth	r1, r1
 804b816:	4668      	mov	r0, sp
 804b818:	f7fc fd90 	bl	804833c <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 804b81c:	b118      	cbz	r0, 804b826 <VerifyCmacB0.constprop.3+0xae>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 804b81e:	2801      	cmp	r0, #1
 804b820:	bf0c      	ite	eq
 804b822:	2001      	moveq	r0, #1
 804b824:	200f      	movne	r0, #15
}
 804b826:	b045      	add	sp, #276	; 0x114
 804b828:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        b0[1] = 0x00;
 804b82c:	f88d 9001 	strb.w	r9, [sp, #1]
        b0[2] = 0x00;
 804b830:	f88d 9002 	strb.w	r9, [sp, #2]
 804b834:	e7c3      	b.n	804b7be <VerifyCmacB0.constprop.3+0x46>
        return LORAMAC_CRYPTO_ERROR_NPE;
 804b836:	200a      	movs	r0, #10
 804b838:	e7f5      	b.n	804b826 <VerifyCmacB0.constprop.3+0xae>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 804b83a:	200e      	movs	r0, #14
 804b83c:	e7f3      	b.n	804b826 <VerifyCmacB0.constprop.3+0xae>
 804b83e:	bf00      	nop
 804b840:	2000af60 	.word	0x2000af60

0804b844 <LoRaMacCryptoInit>:
{
 804b844:	b538      	push	{r3, r4, r5, lr}
    CryptoCtx.NvmCtx = &NvmCryptoCtx;
 804b846:	4c11      	ldr	r4, [pc, #68]	; (804b88c <LoRaMacCryptoInit+0x48>)
 804b848:	f104 030c 	add.w	r3, r4, #12
 804b84c:	6063      	str	r3, [r4, #4]
    if( cryptoNvmCtxChanged != 0 )
 804b84e:	b1d0      	cbz	r0, 804b886 <LoRaMacCryptoInit+0x42>
        CryptoCtx.EventCryptoNvmCtxChanged = cryptoNvmCtxChanged;
 804b850:	60a0      	str	r0, [r4, #8]
    memset1( (uint8_t*) CryptoCtx.NvmCtx, 0, sizeof( LoRaMacCryptoNvmCtx_t ) );
 804b852:	480f      	ldr	r0, [pc, #60]	; (804b890 <LoRaMacCryptoInit+0x4c>)
 804b854:	2234      	movs	r2, #52	; 0x34
 804b856:	2100      	movs	r1, #0
 804b858:	f002 fafd 	bl	804de56 <memset1>
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Major = 1;
 804b85c:	6863      	ldr	r3, [r4, #4]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Rfu = 0;
 804b85e:	4a0d      	ldr	r2, [pc, #52]	; (804b894 <LoRaMacCryptoInit+0x50>)
 804b860:	601a      	str	r2, [r3, #0]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 804b862:	4619      	mov	r1, r3
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 804b864:	f04f 32ff 	mov.w	r2, #4294967295
 804b868:	2500      	movs	r5, #0
 804b86a:	e9c3 5203 	strd	r5, r2, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 804b86e:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 804b870:	f841 2f18 	str.w	r2, [r1, #24]!
    CryptoCtx.NvmCtx->FCntList.McFCntDown1 = FCNT_DOWN_INITAL_VALUE;
 804b874:	e9c3 2207 	strd	r2, r2, [r3, #28]
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 804b878:	6319      	str	r1, [r3, #48]	; 0x30
    CryptoCtx.NvmCtx->FCntList.McFCntDown3 = FCNT_DOWN_INITAL_VALUE;
 804b87a:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
    CryptoCtx.EventCryptoNvmCtxChanged( );
 804b87e:	68a3      	ldr	r3, [r4, #8]
 804b880:	4798      	blx	r3
}
 804b882:	4628      	mov	r0, r5
 804b884:	bd38      	pop	{r3, r4, r5, pc}
        CryptoCtx.EventCryptoNvmCtxChanged = DummyCB;
 804b886:	4b04      	ldr	r3, [pc, #16]	; (804b898 <LoRaMacCryptoInit+0x54>)
 804b888:	60a3      	str	r3, [r4, #8]
 804b88a:	e7e2      	b.n	804b852 <LoRaMacCryptoInit+0xe>
 804b88c:	2000af60 	.word	0x2000af60
 804b890:	2000af6c 	.word	0x2000af6c
 804b894:	01010100 	.word	0x01010100
 804b898:	0804b60d 	.word	0x0804b60d

0804b89c <LoRaMacCryptoSetLrWanVersion>:
    CryptoCtx.NvmCtx->LrWanVersion = version;
 804b89c:	4b02      	ldr	r3, [pc, #8]	; (804b8a8 <LoRaMacCryptoSetLrWanVersion+0xc>)
 804b89e:	685b      	ldr	r3, [r3, #4]
 804b8a0:	6018      	str	r0, [r3, #0]
}
 804b8a2:	2000      	movs	r0, #0
 804b8a4:	4770      	bx	lr
 804b8a6:	bf00      	nop
 804b8a8:	2000af60 	.word	0x2000af60

0804b8ac <LoRaMacCryptoRestoreNvmCtx>:
{
 804b8ac:	b508      	push	{r3, lr}
    if( cryptoNvmCtx != 0 )
 804b8ae:	4601      	mov	r1, r0
 804b8b0:	b128      	cbz	r0, 804b8be <LoRaMacCryptoRestoreNvmCtx+0x12>
        memcpy1( ( uint8_t* ) &NvmCryptoCtx, ( uint8_t* ) cryptoNvmCtx, CRYPTO_NVM_CTX_SIZE );
 804b8b2:	4804      	ldr	r0, [pc, #16]	; (804b8c4 <LoRaMacCryptoRestoreNvmCtx+0x18>)
 804b8b4:	2234      	movs	r2, #52	; 0x34
 804b8b6:	f002 faba 	bl	804de2e <memcpy1>
        return LORAMAC_CRYPTO_SUCCESS;
 804b8ba:	2000      	movs	r0, #0
}
 804b8bc:	bd08      	pop	{r3, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 804b8be:	200a      	movs	r0, #10
 804b8c0:	e7fc      	b.n	804b8bc <LoRaMacCryptoRestoreNvmCtx+0x10>
 804b8c2:	bf00      	nop
 804b8c4:	2000af6c 	.word	0x2000af6c

0804b8c8 <LoRaMacCryptoGetNvmCtx>:
    *cryptoNvmCtxSize = CRYPTO_NVM_CTX_SIZE;
 804b8c8:	2334      	movs	r3, #52	; 0x34
 804b8ca:	6003      	str	r3, [r0, #0]
}
 804b8cc:	4800      	ldr	r0, [pc, #0]	; (804b8d0 <LoRaMacCryptoGetNvmCtx+0x8>)
 804b8ce:	4770      	bx	lr
 804b8d0:	2000af6c 	.word	0x2000af6c

0804b8d4 <LoRaMacCryptoGetFCntUp>:
    if( currentUp == NULL )
 804b8d4:	b130      	cbz	r0, 804b8e4 <LoRaMacCryptoGetFCntUp+0x10>
    *currentUp = CryptoCtx.NvmCtx->FCntList.FCntUp + 1;
 804b8d6:	4b04      	ldr	r3, [pc, #16]	; (804b8e8 <LoRaMacCryptoGetFCntUp+0x14>)
 804b8d8:	685b      	ldr	r3, [r3, #4]
 804b8da:	68db      	ldr	r3, [r3, #12]
 804b8dc:	3301      	adds	r3, #1
 804b8de:	6003      	str	r3, [r0, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 804b8e0:	2000      	movs	r0, #0
 804b8e2:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 804b8e4:	200a      	movs	r0, #10
}
 804b8e6:	4770      	bx	lr
 804b8e8:	2000af60 	.word	0x2000af60

0804b8ec <LoRaMacCryptoGetFCntDown>:
{
 804b8ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 804b8ee:	4617      	mov	r7, r2
    uint32_t lastDown = 0;
 804b8f0:	2200      	movs	r2, #0
{
 804b8f2:	460e      	mov	r6, r1
    uint32_t lastDown = 0;
 804b8f4:	9201      	str	r2, [sp, #4]
    if( currentDown == NULL )
 804b8f6:	461d      	mov	r5, r3
 804b8f8:	b353      	cbz	r3, 804b950 <LoRaMacCryptoGetFCntDown+0x64>
    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 804b8fa:	a901      	add	r1, sp, #4
 804b8fc:	f7ff fe52 	bl	804b5a4 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 804b900:	b9e8      	cbnz	r0, 804b93e <LoRaMacCryptoGetFCntDown+0x52>
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 804b902:	9c01      	ldr	r4, [sp, #4]
 804b904:	1c63      	adds	r3, r4, #1
 804b906:	d110      	bne.n	804b92a <LoRaMacCryptoGetFCntDown+0x3e>
         *currentDown = frameFcnt;
 804b908:	602f      	str	r7, [r5, #0]
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 804b90a:	4b12      	ldr	r3, [pc, #72]	; (804b954 <LoRaMacCryptoGetFCntDown+0x68>)
 804b90c:	685b      	ldr	r3, [r3, #4]
 804b90e:	789b      	ldrb	r3, [r3, #2]
 804b910:	b9ab      	cbnz	r3, 804b93e <LoRaMacCryptoGetFCntDown+0x52>
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 804b912:	682b      	ldr	r3, [r5, #0]
 804b914:	b2b6      	uxth	r6, r6
 804b916:	1b1c      	subs	r4, r3, r4
 804b918:	eb63 0503 	sbc.w	r5, r3, r3
 804b91c:	2700      	movs	r7, #0
 804b91e:	42b4      	cmp	r4, r6
 804b920:	eb75 0307 	sbcs.w	r3, r5, r7
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 804b924:	bfa8      	it	ge
 804b926:	2008      	movge	r0, #8
 804b928:	e009      	b.n	804b93e <LoRaMacCryptoGetFCntDown+0x52>
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 804b92a:	b2a3      	uxth	r3, r4
 804b92c:	1afb      	subs	r3, r7, r3
        if( fCntDiff > 0 )
 804b92e:	2b00      	cmp	r3, #0
 804b930:	dd02      	ble.n	804b938 <LoRaMacCryptoGetFCntDown+0x4c>
            *currentDown = lastDown + fCntDiff;
 804b932:	4423      	add	r3, r4
 804b934:	602b      	str	r3, [r5, #0]
 804b936:	e7e8      	b.n	804b90a <LoRaMacCryptoGetFCntDown+0x1e>
        else if( fCntDiff == 0 )
 804b938:	d103      	bne.n	804b942 <LoRaMacCryptoGetFCntDown+0x56>
            *currentDown = lastDown;
 804b93a:	602c      	str	r4, [r5, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 804b93c:	2007      	movs	r0, #7
}
 804b93e:	b003      	add	sp, #12
 804b940:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 804b942:	0c21      	lsrs	r1, r4, #16
 804b944:	0409      	lsls	r1, r1, #16
 804b946:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 804b94a:	4439      	add	r1, r7
 804b94c:	6029      	str	r1, [r5, #0]
 804b94e:	e7dc      	b.n	804b90a <LoRaMacCryptoGetFCntDown+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 804b950:	200a      	movs	r0, #10
 804b952:	e7f4      	b.n	804b93e <LoRaMacCryptoGetFCntDown+0x52>
 804b954:	2000af60 	.word	0x2000af60

0804b958 <LoRaMacCryptoSetMulticastReference>:
    if( multicastList == NULL )
 804b958:	b178      	cbz	r0, 804b97a <LoRaMacCryptoSetMulticastReference+0x22>
    multicastList[0].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 804b95a:	4b09      	ldr	r3, [pc, #36]	; (804b980 <LoRaMacCryptoSetMulticastReference+0x28>)
 804b95c:	685b      	ldr	r3, [r3, #4]
 804b95e:	f103 021c 	add.w	r2, r3, #28
 804b962:	61c2      	str	r2, [r0, #28]
    multicastList[1].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown1;
 804b964:	f103 0220 	add.w	r2, r3, #32
 804b968:	6442      	str	r2, [r0, #68]	; 0x44
    multicastList[2].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown2;
 804b96a:	f103 0224 	add.w	r2, r3, #36	; 0x24
    multicastList[3].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown3;
 804b96e:	3328      	adds	r3, #40	; 0x28
    multicastList[2].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown2;
 804b970:	66c2      	str	r2, [r0, #108]	; 0x6c
    multicastList[3].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown3;
 804b972:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
    return LORAMAC_CRYPTO_SUCCESS;
 804b976:	2000      	movs	r0, #0
 804b978:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 804b97a:	200a      	movs	r0, #10
}
 804b97c:	4770      	bx	lr
 804b97e:	bf00      	nop
 804b980:	2000af60 	.word	0x2000af60

0804b984 <LoRaMacCryptoPrepareJoinRequest>:
{
 804b984:	b530      	push	{r4, r5, lr}
    if( macMsg == 0 )
 804b986:	4604      	mov	r4, r0
{
 804b988:	b085      	sub	sp, #20
    if( macMsg == 0 )
 804b98a:	b320      	cbz	r0, 804b9d6 <LoRaMacCryptoPrepareJoinRequest+0x52>
    uint32_t devNonce = 0;
 804b98c:	a804      	add	r0, sp, #16
 804b98e:	2300      	movs	r3, #0
    CryptoCtx.NvmCtx->DevNonce = devNonce;
 804b990:	4d13      	ldr	r5, [pc, #76]	; (804b9e0 <LoRaMacCryptoPrepareJoinRequest+0x5c>)
    uint32_t devNonce = 0;
 804b992:	f840 3d04 	str.w	r3, [r0, #-4]!
    SecureElementRandomNumber( &devNonce );
 804b996:	f7fc fd8b 	bl	80484b0 <SecureElementRandomNumber>
    CryptoCtx.NvmCtx->DevNonce = devNonce;
 804b99a:	686b      	ldr	r3, [r5, #4]
 804b99c:	9a03      	ldr	r2, [sp, #12]
 804b99e:	809a      	strh	r2, [r3, #4]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 804b9a0:	68ab      	ldr	r3, [r5, #8]
 804b9a2:	4798      	blx	r3
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 804b9a4:	686b      	ldr	r3, [r5, #4]
 804b9a6:	889b      	ldrh	r3, [r3, #4]
 804b9a8:	82e3      	strh	r3, [r4, #22]
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 804b9aa:	4620      	mov	r0, r4
 804b9ac:	f000 fab3 	bl	804bf16 <LoRaMacSerializerJoinRequest>
 804b9b0:	b110      	cbz	r0, 804b9b8 <LoRaMacCryptoPrepareJoinRequest+0x34>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 804b9b2:	2011      	movs	r0, #17
}
 804b9b4:	b005      	add	sp, #20
 804b9b6:	bd30      	pop	{r4, r5, pc}
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 804b9b8:	f104 0318 	add.w	r3, r4, #24
 804b9bc:	9300      	str	r3, [sp, #0]
 804b9be:	2213      	movs	r2, #19
 804b9c0:	2302      	movs	r3, #2
 804b9c2:	6821      	ldr	r1, [r4, #0]
 804b9c4:	f7fc fcac 	bl	8048320 <SecureElementComputeAesCmac>
 804b9c8:	b938      	cbnz	r0, 804b9da <LoRaMacCryptoPrepareJoinRequest+0x56>
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 804b9ca:	4620      	mov	r0, r4
 804b9cc:	f000 faa3 	bl	804bf16 <LoRaMacSerializerJoinRequest>
 804b9d0:	2800      	cmp	r0, #0
 804b9d2:	d0ef      	beq.n	804b9b4 <LoRaMacCryptoPrepareJoinRequest+0x30>
 804b9d4:	e7ed      	b.n	804b9b2 <LoRaMacCryptoPrepareJoinRequest+0x2e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 804b9d6:	200a      	movs	r0, #10
 804b9d8:	e7ec      	b.n	804b9b4 <LoRaMacCryptoPrepareJoinRequest+0x30>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 804b9da:	200f      	movs	r0, #15
 804b9dc:	e7ea      	b.n	804b9b4 <LoRaMacCryptoPrepareJoinRequest+0x30>
 804b9de:	bf00      	nop
 804b9e0:	2000af60 	.word	0x2000af60

0804b9e4 <LoRaMacCryptoSecureMessage>:
{
 804b9e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 804b9e6:	4605      	mov	r5, r0
 804b9e8:	b087      	sub	sp, #28
    if( macMsg == NULL )
 804b9ea:	461c      	mov	r4, r3
 804b9ec:	b32b      	cbz	r3, 804ba3a <LoRaMacCryptoSecureMessage+0x56>
    if( fCntUp < CryptoCtx.NvmCtx->FCntList.FCntUp )
 804b9ee:	4e30      	ldr	r6, [pc, #192]	; (804bab0 <LoRaMacCryptoSecureMessage+0xcc>)
 804b9f0:	6873      	ldr	r3, [r6, #4]
 804b9f2:	68db      	ldr	r3, [r3, #12]
 804b9f4:	4283      	cmp	r3, r0
 804b9f6:	d859      	bhi.n	804baac <LoRaMacCryptoSecureMessage+0xc8>
    if( macMsg->FPort == 0 )
 804b9f8:	f894 2020 	ldrb.w	r2, [r4, #32]
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
 804b9fc:	2a00      	cmp	r2, #0
 804b9fe:	bf14      	ite	ne
 804ba00:	2208      	movne	r2, #8
 804ba02:	2207      	moveq	r2, #7
    if( fCntUp > CryptoCtx.NvmCtx->FCntList.FCntUp )
 804ba04:	4283      	cmp	r3, r0
 804ba06:	d309      	bcc.n	804ba1c <LoRaMacCryptoSecureMessage+0x38>
    CryptoCtx.NvmCtx->FCntList.FCntUp = fCntUp;
 804ba08:	6873      	ldr	r3, [r6, #4]
 804ba0a:	60dd      	str	r5, [r3, #12]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 804ba0c:	68b3      	ldr	r3, [r6, #8]
 804ba0e:	4798      	blx	r3
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 804ba10:	4620      	mov	r0, r4
 804ba12:	f000 fab4 	bl	804bf7e <LoRaMacSerializerData>
 804ba16:	b170      	cbz	r0, 804ba36 <LoRaMacCryptoSecureMessage+0x52>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 804ba18:	2011      	movs	r0, #17
 804ba1a:	e00a      	b.n	804ba32 <LoRaMacCryptoSecureMessage+0x4e>
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 804ba1c:	2300      	movs	r3, #0
 804ba1e:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 804ba22:	9001      	str	r0, [sp, #4]
 804ba24:	9300      	str	r3, [sp, #0]
 804ba26:	68a3      	ldr	r3, [r4, #8]
 804ba28:	6a60      	ldr	r0, [r4, #36]	; 0x24
 804ba2a:	f7ff fdf0 	bl	804b60e <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 804ba2e:	2800      	cmp	r0, #0
 804ba30:	d0ea      	beq.n	804ba08 <LoRaMacCryptoSecureMessage+0x24>
}
 804ba32:	b007      	add	sp, #28
 804ba34:	bdf0      	pop	{r4, r5, r6, r7, pc}
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 804ba36:	6821      	ldr	r1, [r4, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 804ba38:	b909      	cbnz	r1, 804ba3e <LoRaMacCryptoSecureMessage+0x5a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 804ba3a:	200a      	movs	r0, #10
 804ba3c:	e7f9      	b.n	804ba32 <LoRaMacCryptoSecureMessage+0x4e>
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 804ba3e:	7926      	ldrb	r6, [r4, #4]
 804ba40:	3e04      	subs	r6, #4
 804ba42:	b2b2      	uxth	r2, r6
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 804ba44:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 804ba48:	d82e      	bhi.n	804baa8 <LoRaMacCryptoSecureMessage+0xc4>
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 804ba4a:	68a3      	ldr	r3, [r4, #8]
    b0[6] = devAddr & 0xFF;
 804ba4c:	f88d 300e 	strb.w	r3, [sp, #14]
    b0[0] = 0x49;
 804ba50:	2749      	movs	r7, #73	; 0x49
 804ba52:	9702      	str	r7, [sp, #8]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 804ba54:	0a1f      	lsrs	r7, r3, #8
 804ba56:	f88d 700f 	strb.w	r7, [sp, #15]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 804ba5a:	0c1f      	lsrs	r7, r3, #16
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 804ba5c:	0e1b      	lsrs	r3, r3, #24
 804ba5e:	f88d 3011 	strb.w	r3, [sp, #17]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 804ba62:	0a2b      	lsrs	r3, r5, #8
 804ba64:	f88d 3013 	strb.w	r3, [sp, #19]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 804ba68:	0c2b      	lsrs	r3, r5, #16
 804ba6a:	f88d 3014 	strb.w	r3, [sp, #20]
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 804ba6e:	f104 032c 	add.w	r3, r4, #44	; 0x2c
    b0[3] = 0x00;
 804ba72:	f8ad 000c 	strh.w	r0, [sp, #12]
    b0[10] = fCnt & 0xFF;
 804ba76:	f88d 5012 	strb.w	r5, [sp, #18]
    b0[14] = 0x00;
 804ba7a:	f88d 0016 	strb.w	r0, [sp, #22]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 804ba7e:	0e2d      	lsrs	r5, r5, #24
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 804ba80:	9300      	str	r3, [sp, #0]
 804ba82:	a802      	add	r0, sp, #8
 804ba84:	2307      	movs	r3, #7
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 804ba86:	f88d 7010 	strb.w	r7, [sp, #16]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 804ba8a:	f88d 5015 	strb.w	r5, [sp, #21]
    b0[15] = msgLen & 0xFF;
 804ba8e:	f88d 6017 	strb.w	r6, [sp, #23]
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 804ba92:	f7fc fc45 	bl	8048320 <SecureElementComputeAesCmac>
 804ba96:	b928      	cbnz	r0, 804baa4 <LoRaMacCryptoSecureMessage+0xc0>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 804ba98:	4620      	mov	r0, r4
 804ba9a:	f000 fa70 	bl	804bf7e <LoRaMacSerializerData>
 804ba9e:	2800      	cmp	r0, #0
 804baa0:	d0c7      	beq.n	804ba32 <LoRaMacCryptoSecureMessage+0x4e>
 804baa2:	e7b9      	b.n	804ba18 <LoRaMacCryptoSecureMessage+0x34>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 804baa4:	200f      	movs	r0, #15
 804baa6:	e7c4      	b.n	804ba32 <LoRaMacCryptoSecureMessage+0x4e>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 804baa8:	200e      	movs	r0, #14
 804baaa:	e7c2      	b.n	804ba32 <LoRaMacCryptoSecureMessage+0x4e>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 804baac:	2006      	movs	r0, #6
 804baae:	e7c0      	b.n	804ba32 <LoRaMacCryptoSecureMessage+0x4e>
 804bab0:	2000af60 	.word	0x2000af60

0804bab4 <LoRaMacCryptoUnsecureMessage>:
{
 804bab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804bab8:	b086      	sub	sp, #24
 804baba:	4604      	mov	r4, r0
 804babc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 804babe:	4689      	mov	r9, r1
 804bac0:	4690      	mov	r8, r2
 804bac2:	461d      	mov	r5, r3
    if( macMsg == 0 )
 804bac4:	2e00      	cmp	r6, #0
 804bac6:	d07a      	beq.n	804bbbe <LoRaMacCryptoUnsecureMessage+0x10a>
    uint32_t lastDown = 0;
 804bac8:	a906      	add	r1, sp, #24
 804baca:	2300      	movs	r3, #0
 804bacc:	f841 3d04 	str.w	r3, [r1, #-4]!
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 804bad0:	4610      	mov	r0, r2
 804bad2:	f7ff fd67 	bl	804b5a4 <GetLastFcntDown>
 804bad6:	b120      	cbz	r0, 804bae2 <LoRaMacCryptoUnsecureMessage+0x2e>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 804bad8:	2706      	movs	r7, #6
}
 804bada:	4638      	mov	r0, r7
 804badc:	b006      	add	sp, #24
 804bade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( ( currentDown > lastDown ) ||
 804bae2:	9b05      	ldr	r3, [sp, #20]
 804bae4:	429d      	cmp	r5, r3
 804bae6:	d801      	bhi.n	804baec <LoRaMacCryptoUnsecureMessage+0x38>
 804bae8:	3301      	adds	r3, #1
 804baea:	d1f5      	bne.n	804bad8 <LoRaMacCryptoUnsecureMessage+0x24>
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 804baec:	4630      	mov	r0, r6
 804baee:	f000 f9b7 	bl	804be60 <LoRaMacParserData>
 804baf2:	2800      	cmp	r0, #0
 804baf4:	d165      	bne.n	804bbc2 <LoRaMacCryptoUnsecureMessage+0x10e>
        if( KeyAddrList[i].AddrID == addrID )
 804baf6:	4b34      	ldr	r3, [pc, #208]	; (804bbc8 <LoRaMacCryptoUnsecureMessage+0x114>)
 804baf8:	461a      	mov	r2, r3
 804bafa:	f813 1020 	ldrb.w	r1, [r3, r0, lsl #2]
 804bafe:	42a1      	cmp	r1, r4
 804bb00:	ea4f 0780 	mov.w	r7, r0, lsl #2
 804bb04:	d104      	bne.n	804bb10 <LoRaMacCryptoUnsecureMessage+0x5c>
    if( address != macMsg->FHDR.DevAddr )
 804bb06:	68b3      	ldr	r3, [r6, #8]
 804bb08:	454b      	cmp	r3, r9
 804bb0a:	d006      	beq.n	804bb1a <LoRaMacCryptoUnsecureMessage+0x66>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 804bb0c:	2702      	movs	r7, #2
 804bb0e:	e7e4      	b.n	804bada <LoRaMacCryptoUnsecureMessage+0x26>
 804bb10:	3001      	adds	r0, #1
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 804bb12:	2805      	cmp	r0, #5
 804bb14:	d1f1      	bne.n	804bafa <LoRaMacCryptoUnsecureMessage+0x46>
 804bb16:	270c      	movs	r7, #12
 804bb18:	e7df      	b.n	804bada <LoRaMacCryptoUnsecureMessage+0x26>
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 804bb1a:	4c2c      	ldr	r4, [pc, #176]	; (804bbcc <LoRaMacCryptoUnsecureMessage+0x118>)
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 804bb1c:	6af0      	ldr	r0, [r6, #44]	; 0x2c
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 804bb1e:	6861      	ldr	r1, [r4, #4]
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 804bb20:	7b33      	ldrb	r3, [r6, #12]
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 804bb22:	7889      	ldrb	r1, [r1, #2]
    payloadDecryptionKeyID = curItem->AppSkey;
 804bb24:	443a      	add	r2, r7
        isAck = false;
 804bb26:	2900      	cmp	r1, #0
    payloadDecryptionKeyID = curItem->AppSkey;
 804bb28:	f892 a001 	ldrb.w	sl, [r2, #1]
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 804bb2c:	7931      	ldrb	r1, [r6, #4]
 804bb2e:	7892      	ldrb	r2, [r2, #2]
 804bb30:	f8cd 9000 	str.w	r9, [sp]
 804bb34:	e9cd 5001 	strd	r5, r0, [sp, #4]
 804bb38:	f1a1 0104 	sub.w	r1, r1, #4
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 804bb3c:	f3c3 1340 	ubfx	r3, r3, #5, #1
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 804bb40:	b289      	uxth	r1, r1
 804bb42:	bf08      	it	eq
 804bb44:	2300      	moveq	r3, #0
 804bb46:	6830      	ldr	r0, [r6, #0]
 804bb48:	f7ff fe16 	bl	804b778 <VerifyCmacB0.constprop.3>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 804bb4c:	4607      	mov	r7, r0
 804bb4e:	2800      	cmp	r0, #0
 804bb50:	d1c3      	bne.n	804bada <LoRaMacCryptoUnsecureMessage+0x26>
    if( macMsg->FPort == 0 )
 804bb52:	f896 3020 	ldrb.w	r3, [r6, #32]
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 804bb56:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 804bb5a:	9501      	str	r5, [sp, #4]
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
 804bb5c:	2b00      	cmp	r3, #0
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 804bb5e:	f04f 0301 	mov.w	r3, #1
 804bb62:	9300      	str	r3, [sp, #0]
 804bb64:	bf18      	it	ne
 804bb66:	4652      	movne	r2, sl
 804bb68:	464b      	mov	r3, r9
 804bb6a:	bf08      	it	eq
 804bb6c:	2207      	moveq	r2, #7
 804bb6e:	6a70      	ldr	r0, [r6, #36]	; 0x24
 804bb70:	f7ff fd4d 	bl	804b60e <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 804bb74:	4607      	mov	r7, r0
 804bb76:	2800      	cmp	r0, #0
 804bb78:	d1af      	bne.n	804bada <LoRaMacCryptoUnsecureMessage+0x26>
    switch( fCntID )
 804bb7a:	f108 38ff 	add.w	r8, r8, #4294967295
 804bb7e:	f1b8 0f06 	cmp.w	r8, #6
 804bb82:	d807      	bhi.n	804bb94 <LoRaMacCryptoUnsecureMessage+0xe0>
 804bb84:	e8df f008 	tbb	[pc, r8]
 804bb88:	0f0c0904 	.word	0x0f0c0904
 804bb8c:	1512      	.short	0x1512
 804bb8e:	18          	.byte	0x18
 804bb8f:	00          	.byte	0x00
            CryptoCtx.NvmCtx->FCntList.NFCntDown = currentDown;
 804bb90:	6863      	ldr	r3, [r4, #4]
 804bb92:	611d      	str	r5, [r3, #16]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 804bb94:	68a3      	ldr	r3, [r4, #8]
 804bb96:	4798      	blx	r3
 804bb98:	e79f      	b.n	804bada <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoCtx.NvmCtx->FCntList.AFCntDown = currentDown;
 804bb9a:	6863      	ldr	r3, [r4, #4]
 804bb9c:	615d      	str	r5, [r3, #20]
 804bb9e:	e7f9      	b.n	804bb94 <LoRaMacCryptoUnsecureMessage+0xe0>
            CryptoCtx.NvmCtx->FCntList.FCntDown = currentDown;
 804bba0:	6863      	ldr	r3, [r4, #4]
 804bba2:	619d      	str	r5, [r3, #24]
 804bba4:	e7f6      	b.n	804bb94 <LoRaMacCryptoUnsecureMessage+0xe0>
            CryptoCtx.NvmCtx->FCntList.McFCntDown0 = currentDown;
 804bba6:	6863      	ldr	r3, [r4, #4]
 804bba8:	61dd      	str	r5, [r3, #28]
 804bbaa:	e7f3      	b.n	804bb94 <LoRaMacCryptoUnsecureMessage+0xe0>
            CryptoCtx.NvmCtx->FCntList.McFCntDown1 = currentDown;
 804bbac:	6863      	ldr	r3, [r4, #4]
 804bbae:	621d      	str	r5, [r3, #32]
 804bbb0:	e7f0      	b.n	804bb94 <LoRaMacCryptoUnsecureMessage+0xe0>
            CryptoCtx.NvmCtx->FCntList.McFCntDown2 = currentDown;
 804bbb2:	6863      	ldr	r3, [r4, #4]
 804bbb4:	625d      	str	r5, [r3, #36]	; 0x24
 804bbb6:	e7ed      	b.n	804bb94 <LoRaMacCryptoUnsecureMessage+0xe0>
            CryptoCtx.NvmCtx->FCntList.McFCntDown3 = currentDown;
 804bbb8:	6863      	ldr	r3, [r4, #4]
 804bbba:	629d      	str	r5, [r3, #40]	; 0x28
 804bbbc:	e7ea      	b.n	804bb94 <LoRaMacCryptoUnsecureMessage+0xe0>
        return LORAMAC_CRYPTO_ERROR_NPE;
 804bbbe:	270a      	movs	r7, #10
 804bbc0:	e78b      	b.n	804bada <LoRaMacCryptoUnsecureMessage+0x26>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 804bbc2:	2710      	movs	r7, #16
 804bbc4:	e789      	b.n	804bada <LoRaMacCryptoUnsecureMessage+0x26>
 804bbc6:	bf00      	nop
 804bbc8:	200010dc 	.word	0x200010dc
 804bbcc:	2000af60 	.word	0x2000af60

0804bbd0 <LoRaMacCryptoDeriveMcRootKey>:
{
 804bbd0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 804bbd2:	4b11      	ldr	r3, [pc, #68]	; (804bc18 <LoRaMacCryptoDeriveMcRootKey+0x48>)
 804bbd4:	685e      	ldr	r6, [r3, #4]
    if( ( ( keyID == APP_KEY ) && ( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 ) ) ||
 804bbd6:	4604      	mov	r4, r0
 804bbd8:	78b5      	ldrb	r5, [r6, #2]
 804bbda:	b910      	cbnz	r0, 804bbe2 <LoRaMacCryptoDeriveMcRootKey+0x12>
 804bbdc:	b92d      	cbnz	r5, 804bbea <LoRaMacCryptoDeriveMcRootKey+0x1a>
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 804bbde:	200b      	movs	r0, #11
 804bbe0:	e017      	b.n	804bc12 <LoRaMacCryptoDeriveMcRootKey+0x42>
    if( ( ( keyID == APP_KEY ) && ( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 ) ) ||
 804bbe2:	2801      	cmp	r0, #1
 804bbe4:	d101      	bne.n	804bbea <LoRaMacCryptoDeriveMcRootKey+0x1a>
        ( ( keyID == GEN_APP_KEY ) && ( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 ) ) )
 804bbe6:	2d01      	cmp	r5, #1
 804bbe8:	d0f9      	beq.n	804bbde <LoRaMacCryptoDeriveMcRootKey+0xe>
    uint8_t compBase[16] = { 0 };
 804bbea:	2210      	movs	r2, #16
 804bbec:	2100      	movs	r1, #0
 804bbee:	4668      	mov	r0, sp
 804bbf0:	f004 faac 	bl	805014c <memset>
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 )
 804bbf4:	2d01      	cmp	r5, #1
        compBase[0] = 0x20;
 804bbf6:	bf04      	itt	eq
 804bbf8:	2320      	moveq	r3, #32
 804bbfa:	f88d 3000 	strbeq.w	r3, [sp]
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 804bbfe:	4622      	mov	r2, r4
 804bc00:	2309      	movs	r3, #9
 804bc02:	4669      	mov	r1, sp
 804bc04:	6830      	ldr	r0, [r6, #0]
 804bc06:	f7fc fc2e 	bl	8048466 <SecureElementDeriveAndStoreKey>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 804bc0a:	2800      	cmp	r0, #0
 804bc0c:	bf0c      	ite	eq
 804bc0e:	2000      	moveq	r0, #0
 804bc10:	200f      	movne	r0, #15
}
 804bc12:	b004      	add	sp, #16
 804bc14:	bd70      	pop	{r4, r5, r6, pc}
 804bc16:	bf00      	nop
 804bc18:	2000af60 	.word	0x2000af60

0804bc1c <LoRaMacCryptoSetKey>:
{
 804bc1c:	b510      	push	{r4, lr}
 804bc1e:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 804bc20:	f7fc fc1c 	bl	804845c <SecureElementSetKey>
 804bc24:	b108      	cbz	r0, 804bc2a <LoRaMacCryptoSetKey+0xe>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 804bc26:	200f      	movs	r0, #15
}
 804bc28:	bd10      	pop	{r4, pc}
    if( ( keyID == GEN_APP_KEY ) || ( keyID == APP_KEY ) )
 804bc2a:	2c01      	cmp	r4, #1
 804bc2c:	d808      	bhi.n	804bc40 <LoRaMacCryptoSetKey+0x24>
        if( LoRaMacCryptoDeriveMcRootKey( keyID ) != LORAMAC_CRYPTO_SUCCESS )
 804bc2e:	4620      	mov	r0, r4
 804bc30:	f7ff ffce 	bl	804bbd0 <LoRaMacCryptoDeriveMcRootKey>
 804bc34:	2800      	cmp	r0, #0
 804bc36:	d1f6      	bne.n	804bc26 <LoRaMacCryptoSetKey+0xa>
 804bc38:	f7ff fd86 	bl	804b748 <LoRaMacCryptoDeriveMcKEKey.part.2>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 804bc3c:	2800      	cmp	r0, #0
 804bc3e:	d1f2      	bne.n	804bc26 <LoRaMacCryptoSetKey+0xa>
    return LORAMAC_CRYPTO_SUCCESS;
 804bc40:	2000      	movs	r0, #0
 804bc42:	e7f1      	b.n	804bc28 <LoRaMacCryptoSetKey+0xc>

0804bc44 <LoRaMacCryptoHandleJoinAccept>:
{
 804bc44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 804bc48:	4681      	mov	r9, r0
 804bc4a:	b0c7      	sub	sp, #284	; 0x11c
 804bc4c:	4688      	mov	r8, r1
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 804bc4e:	4614      	mov	r4, r2
 804bc50:	2a00      	cmp	r2, #0
 804bc52:	f000 80af 	beq.w	804bdb4 <LoRaMacCryptoHandleJoinAccept+0x170>
 804bc56:	2900      	cmp	r1, #0
 804bc58:	f000 80ac 	beq.w	804bdb4 <LoRaMacCryptoHandleJoinAccept+0x170>
    uint8_t micComputationOffset = 0;
 804bc5c:	28ff      	cmp	r0, #255	; 0xff
 804bc5e:	bf0c      	ite	eq
 804bc60:	250c      	moveq	r5, #12
 804bc62:	2500      	movne	r5, #0
    memset1( procBuffer, 0, ( macMsg->BufSize + micComputationOffset ) );
 804bc64:	7912      	ldrb	r2, [r2, #4]
 804bc66:	b2ae      	uxth	r6, r5
 804bc68:	4432      	add	r2, r6
 804bc6a:	2100      	movs	r1, #0
 804bc6c:	a803      	add	r0, sp, #12
 804bc6e:	f002 f8f2 	bl	804de56 <memset1>
    if( SecureElementAesEncrypt( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ), encryptionKeyID, ( procBuffer + micComputationOffset ) ) != SECURE_ELEMENT_SUCCESS )
 804bc72:	7921      	ldrb	r1, [r4, #4]
 804bc74:	6820      	ldr	r0, [r4, #0]
 804bc76:	ab03      	add	r3, sp, #12
 804bc78:	441d      	add	r5, r3
 804bc7a:	3901      	subs	r1, #1
 804bc7c:	462b      	mov	r3, r5
 804bc7e:	2202      	movs	r2, #2
 804bc80:	b289      	uxth	r1, r1
 804bc82:	3001      	adds	r0, #1
 804bc84:	f7fc fb72 	bl	804836c <SecureElementAesEncrypt>
 804bc88:	b118      	cbz	r0, 804bc92 <LoRaMacCryptoHandleJoinAccept+0x4e>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 804bc8a:	200f      	movs	r0, #15
}
 804bc8c:	b047      	add	sp, #284	; 0x11c
 804bc8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    memcpy1( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( procBuffer + micComputationOffset ), ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ) );
 804bc92:	7922      	ldrb	r2, [r4, #4]
 804bc94:	6820      	ldr	r0, [r4, #0]
 804bc96:	3a01      	subs	r2, #1
 804bc98:	3001      	adds	r0, #1
 804bc9a:	b292      	uxth	r2, r2
 804bc9c:	4629      	mov	r1, r5
 804bc9e:	f002 f8c6 	bl	804de2e <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 804bca2:	4620      	mov	r0, r4
 804bca4:	f000 f88e 	bl	804bdc4 <LoRaMacParserJoinAccept>
 804bca8:	2800      	cmp	r0, #0
 804bcaa:	f040 8085 	bne.w	804bdb8 <LoRaMacCryptoHandleJoinAccept+0x174>
    if( macMsg->DLSettings.Bits.OptNeg == 1 )
 804bcae:	f994 2010 	ldrsb.w	r2, [r4, #16]
 804bcb2:	4d43      	ldr	r5, [pc, #268]	; (804bdc0 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 804bcb4:	2a00      	cmp	r2, #0
 804bcb6:	686b      	ldr	r3, [r5, #4]
        CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 1;
 804bcb8:	bfba      	itte	lt
 804bcba:	2201      	movlt	r2, #1
 804bcbc:	709a      	strblt	r2, [r3, #2]
        CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 0;
 804bcbe:	7098      	strbge	r0, [r3, #2]
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 804bcc0:	789b      	ldrb	r3, [r3, #2]
        micComputationKeyID = J_S_INT_KEY;
 804bcc2:	bfb4      	ite	lt
 804bcc4:	2703      	movlt	r7, #3
        micComputationKeyID = NWK_KEY;
 804bcc6:	2702      	movge	r7, #2
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 804bcc8:	2b00      	cmp	r3, #0
 804bcca:	d145      	bne.n	804bd58 <LoRaMacCryptoHandleJoinAccept+0x114>
        if( SecureElementVerifyAesCmac( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 804bccc:	7921      	ldrb	r1, [r4, #4]
 804bcce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 804bcd0:	6820      	ldr	r0, [r4, #0]
 804bcd2:	3904      	subs	r1, #4
 804bcd4:	463b      	mov	r3, r7
 804bcd6:	b289      	uxth	r1, r1
 804bcd8:	f7fc fb30 	bl	804833c <SecureElementVerifyAesCmac>
 804bcdc:	2800      	cmp	r0, #0
 804bcde:	d1d4      	bne.n	804bc8a <LoRaMacCryptoHandleJoinAccept+0x46>
        retval = LoRaMacCryptoDeriveMcRootKey( GEN_APP_KEY );
 804bce0:	2001      	movs	r0, #1
 804bce2:	f7ff ff75 	bl	804bbd0 <LoRaMacCryptoDeriveMcRootKey>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 804bce6:	2800      	cmp	r0, #0
 804bce8:	d1d0      	bne.n	804bc8c <LoRaMacCryptoHandleJoinAccept+0x48>
 804bcea:	f7ff fd2d 	bl	804b748 <LoRaMacCryptoDeriveMcKEKey.part.2>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 804bcee:	2800      	cmp	r0, #0
 804bcf0:	d1cc      	bne.n	804bc8c <LoRaMacCryptoHandleJoinAccept+0x48>
        retval = DeriveSessionKey10x( APP_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 804bcf2:	686b      	ldr	r3, [r5, #4]
 804bcf4:	1da6      	adds	r6, r4, #6
 804bcf6:	3409      	adds	r4, #9
 804bcf8:	3304      	adds	r3, #4
 804bcfa:	4622      	mov	r2, r4
 804bcfc:	4631      	mov	r1, r6
 804bcfe:	2008      	movs	r0, #8
 804bd00:	f7ff fcec 	bl	804b6dc <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 804bd04:	2800      	cmp	r0, #0
 804bd06:	d1c1      	bne.n	804bc8c <LoRaMacCryptoHandleJoinAccept+0x48>
        retval = DeriveSessionKey10x( NWK_S_ENC_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 804bd08:	686b      	ldr	r3, [r5, #4]
 804bd0a:	4622      	mov	r2, r4
 804bd0c:	3304      	adds	r3, #4
 804bd0e:	4631      	mov	r1, r6
 804bd10:	2007      	movs	r0, #7
 804bd12:	f7ff fce3 	bl	804b6dc <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 804bd16:	2800      	cmp	r0, #0
 804bd18:	d1b8      	bne.n	804bc8c <LoRaMacCryptoHandleJoinAccept+0x48>
        retval = DeriveSessionKey10x( F_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 804bd1a:	686b      	ldr	r3, [r5, #4]
 804bd1c:	4622      	mov	r2, r4
 804bd1e:	3304      	adds	r3, #4
 804bd20:	4631      	mov	r1, r6
 804bd22:	2005      	movs	r0, #5
 804bd24:	f7ff fcda 	bl	804b6dc <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 804bd28:	2800      	cmp	r0, #0
 804bd2a:	d1af      	bne.n	804bc8c <LoRaMacCryptoHandleJoinAccept+0x48>
        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 804bd2c:	686b      	ldr	r3, [r5, #4]
 804bd2e:	4622      	mov	r2, r4
 804bd30:	3304      	adds	r3, #4
 804bd32:	4631      	mov	r1, r6
 804bd34:	2006      	movs	r0, #6
 804bd36:	f7ff fcd1 	bl	804b6dc <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 804bd3a:	2800      	cmp	r0, #0
 804bd3c:	d1a6      	bne.n	804bc8c <LoRaMacCryptoHandleJoinAccept+0x48>
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 804bd3e:	686b      	ldr	r3, [r5, #4]
    CryptoCtx.RJcount0 = 0;
 804bd40:	8028      	strh	r0, [r5, #0]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 804bd42:	f04f 32ff 	mov.w	r2, #4294967295
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 804bd46:	60d8      	str	r0, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 804bd48:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 804bd4a:	e9c3 2204 	strd	r2, r2, [r3, #16]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 804bd4e:	68ab      	ldr	r3, [r5, #8]
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 804bd50:	9001      	str	r0, [sp, #4]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 804bd52:	4798      	blx	r3
    return LORAMAC_CRYPTO_SUCCESS;
 804bd54:	9801      	ldr	r0, [sp, #4]
 804bd56:	e799      	b.n	804bc8c <LoRaMacCryptoHandleJoinAccept+0x48>
        memcpyr( &procBuffer[bufItr], joinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 804bd58:	2208      	movs	r2, #8
 804bd5a:	4641      	mov	r1, r8
 804bd5c:	f10d 000d 	add.w	r0, sp, #13
        procBuffer[bufItr++] = ( uint8_t ) joinReqType;
 804bd60:	f88d 900c 	strb.w	r9, [sp, #12]
        memcpyr( &procBuffer[bufItr], joinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 804bd64:	f002 f86d 	bl	804de42 <memcpyr>
        procBuffer[bufItr++] = CryptoCtx.NvmCtx->DevNonce & 0xFF;
 804bd68:	686b      	ldr	r3, [r5, #4]
        if( SecureElementVerifyAesCmac( procBuffer,  ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 804bd6a:	7921      	ldrb	r1, [r4, #4]
        procBuffer[bufItr++] = CryptoCtx.NvmCtx->DevNonce & 0xFF;
 804bd6c:	889a      	ldrh	r2, [r3, #4]
 804bd6e:	f88d 2015 	strb.w	r2, [sp, #21]
        procBuffer[bufItr++] = ( CryptoCtx.NvmCtx->DevNonce >> 8 ) & 0xFF;
 804bd72:	889b      	ldrh	r3, [r3, #4]
        if( SecureElementVerifyAesCmac( procBuffer,  ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 804bd74:	6a62      	ldr	r2, [r4, #36]	; 0x24
        procBuffer[bufItr++] = ( CryptoCtx.NvmCtx->DevNonce >> 8 ) & 0xFF;
 804bd76:	0a1b      	lsrs	r3, r3, #8
        if( SecureElementVerifyAesCmac( procBuffer,  ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 804bd78:	3905      	subs	r1, #5
        procBuffer[bufItr++] = ( CryptoCtx.NvmCtx->DevNonce >> 8 ) & 0xFF;
 804bd7a:	f88d 3016 	strb.w	r3, [sp, #22]
        if( SecureElementVerifyAesCmac( procBuffer,  ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 804bd7e:	4431      	add	r1, r6
        procBuffer[bufItr++] = macMsg->MHDR.Value;
 804bd80:	7963      	ldrb	r3, [r4, #5]
 804bd82:	f88d 3017 	strb.w	r3, [sp, #23]
        if( SecureElementVerifyAesCmac( procBuffer,  ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 804bd86:	b289      	uxth	r1, r1
 804bd88:	463b      	mov	r3, r7
 804bd8a:	a803      	add	r0, sp, #12
 804bd8c:	f7fc fad6 	bl	804833c <SecureElementVerifyAesCmac>
 804bd90:	2800      	cmp	r0, #0
 804bd92:	f47f af7a 	bne.w	804bc8a <LoRaMacCryptoHandleJoinAccept+0x46>
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[2] << 16 );
 804bd96:	7a23      	ldrb	r3, [r4, #8]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[1] << 8 );
 804bd98:	79e1      	ldrb	r1, [r4, #7]
        currentJoinNonce = ( uint32_t ) macMsg->JoinNonce[0];
 804bd9a:	79a2      	ldrb	r2, [r4, #6]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[2] << 16 );
 804bd9c:	041b      	lsls	r3, r3, #16
 804bd9e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 804bda2:	4313      	orrs	r3, r2
        if( currentJoinNonce > CryptoCtx.NvmCtx->JoinNonce )
 804bda4:	686a      	ldr	r2, [r5, #4]
 804bda6:	6891      	ldr	r1, [r2, #8]
 804bda8:	4299      	cmp	r1, r3
 804bdaa:	d207      	bcs.n	804bdbc <LoRaMacCryptoHandleJoinAccept+0x178>
            CryptoCtx.NvmCtx->JoinNonce = currentJoinNonce;
 804bdac:	6093      	str	r3, [r2, #8]
            CryptoCtx.EventCryptoNvmCtxChanged( );
 804bdae:	68ab      	ldr	r3, [r5, #8]
 804bdb0:	4798      	blx	r3
 804bdb2:	e795      	b.n	804bce0 <LoRaMacCryptoHandleJoinAccept+0x9c>
        return LORAMAC_CRYPTO_ERROR_NPE;
 804bdb4:	200a      	movs	r0, #10
 804bdb6:	e769      	b.n	804bc8c <LoRaMacCryptoHandleJoinAccept+0x48>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 804bdb8:	2010      	movs	r0, #16
 804bdba:	e767      	b.n	804bc8c <LoRaMacCryptoHandleJoinAccept+0x48>
            return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 804bdbc:	2003      	movs	r0, #3
 804bdbe:	e765      	b.n	804bc8c <LoRaMacCryptoHandleJoinAccept+0x48>
 804bdc0:	2000af60 	.word	0x2000af60

0804bdc4 <LoRaMacParserJoinAccept>:
*/
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 804bdc4:	b510      	push	{r4, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 804bdc6:	4604      	mov	r4, r0
 804bdc8:	2800      	cmp	r0, #0
 804bdca:	d045      	beq.n	804be58 <LoRaMacParserJoinAccept+0x94>
 804bdcc:	6801      	ldr	r1, [r0, #0]
 804bdce:	2900      	cmp	r1, #0
 804bdd0:	d042      	beq.n	804be58 <LoRaMacParserJoinAccept+0x94>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 804bdd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 804bdd6:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 804bdd8:	2203      	movs	r2, #3
 804bdda:	3006      	adds	r0, #6
 804bddc:	f002 f827 	bl	804de2e <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 804bde0:	4620      	mov	r0, r4
 804bde2:	2203      	movs	r2, #3
 804bde4:	f850 1b09 	ldr.w	r1, [r0], #9
 804bde8:	3104      	adds	r1, #4
 804bdea:	f002 f820 	bl	804de2e <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 804bdee:	6821      	ldr	r1, [r4, #0]
 804bdf0:	79cb      	ldrb	r3, [r1, #7]
 804bdf2:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 804bdf4:	7a0a      	ldrb	r2, [r1, #8]
 804bdf6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 804bdfa:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 804bdfc:	7a4a      	ldrb	r2, [r1, #9]
 804bdfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 804be02:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 804be04:	7a8a      	ldrb	r2, [r1, #10]
 804be06:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 804be0a:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 804be0c:	7acb      	ldrb	r3, [r1, #11]
 804be0e:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 804be10:	7b0b      	ldrb	r3, [r1, #12]
 804be12:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_C_FLIST_FIELD_SIZE )
 804be14:	7923      	ldrb	r3, [r4, #4]
 804be16:	2b21      	cmp	r3, #33	; 0x21
 804be18:	d11a      	bne.n	804be50 <LoRaMacParserJoinAccept+0x8c>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_C_FLIST_FIELD_SIZE );
 804be1a:	2210      	movs	r2, #16
 804be1c:	310d      	adds	r1, #13
 804be1e:	f104 0012 	add.w	r0, r4, #18
 804be22:	f002 f804 	bl	804de2e <memcpy1>
        bufItr = bufItr + LORAMAC_C_FLIST_FIELD_SIZE;
 804be26:	221d      	movs	r2, #29
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 804be28:	6821      	ldr	r1, [r4, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 804be2a:	1c50      	adds	r0, r2, #1
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 804be2c:	5c8b      	ldrb	r3, [r1, r2]
 804be2e:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 804be30:	5c08      	ldrb	r0, [r1, r0]
 804be32:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 804be36:	1c90      	adds	r0, r2, #2
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 804be38:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 804be3a:	5c08      	ldrb	r0, [r1, r0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 804be3c:	3203      	adds	r2, #3
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 804be3e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 804be42:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 804be44:	5c8a      	ldrb	r2, [r1, r2]
 804be46:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 804be4a:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 804be4c:	2000      	movs	r0, #0
}
 804be4e:	bd10      	pop	{r4, pc}
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 804be50:	2b11      	cmp	r3, #17
 804be52:	dc03      	bgt.n	804be5c <LoRaMacParserJoinAccept+0x98>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 804be54:	220d      	movs	r2, #13
 804be56:	e7e7      	b.n	804be28 <LoRaMacParserJoinAccept+0x64>
        return LORAMAC_PARSER_ERROR_NPE;
 804be58:	2002      	movs	r0, #2
 804be5a:	e7f8      	b.n	804be4e <LoRaMacParserJoinAccept+0x8a>
        return LORAMAC_PARSER_FAIL;
 804be5c:	2001      	movs	r0, #1
 804be5e:	e7f6      	b.n	804be4e <LoRaMacParserJoinAccept+0x8a>

0804be60 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 804be60:	b510      	push	{r4, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 804be62:	4604      	mov	r4, r0
 804be64:	2800      	cmp	r0, #0
 804be66:	d054      	beq.n	804bf12 <LoRaMacParserData+0xb2>
 804be68:	6801      	ldr	r1, [r0, #0]
 804be6a:	2900      	cmp	r1, #0
 804be6c:	d051      	beq.n	804bf12 <LoRaMacParserData+0xb2>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 804be6e:	780b      	ldrb	r3, [r1, #0]
 804be70:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 804be72:	784b      	ldrb	r3, [r1, #1]
 804be74:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 804be76:	788a      	ldrb	r2, [r1, #2]
 804be78:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 804be7c:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 804be7e:	78ca      	ldrb	r2, [r1, #3]
 804be80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 804be84:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 804be86:	790a      	ldrb	r2, [r1, #4]
 804be88:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 804be8c:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 804be8e:	794b      	ldrb	r3, [r1, #5]
 804be90:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 804be92:	798b      	ldrb	r3, [r1, #6]
 804be94:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 804be96:	79ca      	ldrb	r2, [r1, #7]
 804be98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 804be9c:	7b02      	ldrb	r2, [r0, #12]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 804be9e:	81c3      	strh	r3, [r0, #14]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 804bea0:	f002 020f 	and.w	r2, r2, #15
 804bea4:	3108      	adds	r1, #8
 804bea6:	3010      	adds	r0, #16
 804bea8:	f001 ffc1 	bl	804de2e <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 804beac:	7b23      	ldrb	r3, [r4, #12]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 804beae:	2200      	movs	r2, #0
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 804beb0:	f003 030f 	and.w	r3, r3, #15
    macMsg->FPort = 0;
 804beb4:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 804beb8:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 804bebc:	7922      	ldrb	r2, [r4, #4]
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 804bebe:	f103 0008 	add.w	r0, r3, #8
    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 804bec2:	1a11      	subs	r1, r2, r0
 804bec4:	2904      	cmp	r1, #4
 804bec6:	dd0d      	ble.n	804bee4 <LoRaMacParserData+0x84>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 804bec8:	6821      	ldr	r1, [r4, #0]
 804beca:	3309      	adds	r3, #9

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 804becc:	3a04      	subs	r2, #4
 804bece:	1ad2      	subs	r2, r2, r3
        macMsg->FPort = macMsg->Buffer[bufItr++];
 804bed0:	5c08      	ldrb	r0, [r1, r0]
 804bed2:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 804bed6:	b2d2      	uxtb	r2, r2
 804bed8:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 804bedc:	4419      	add	r1, r3
 804bede:	6a60      	ldr	r0, [r4, #36]	; 0x24
 804bee0:	f001 ffa5 	bl	804de2e <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 804bee4:	7923      	ldrb	r3, [r4, #4]
 804bee6:	6822      	ldr	r2, [r4, #0]
 804bee8:	441a      	add	r2, r3
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );

    return LORAMAC_PARSER_SUCCESS;
 804beea:	2000      	movs	r0, #0
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 804beec:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 804bef0:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 804bef2:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 804bef6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 804befa:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 804befc:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 804bf00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 804bf04:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 804bf06:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 804bf0a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 804bf0e:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 804bf10:	bd10      	pop	{r4, pc}
        return LORAMAC_PARSER_ERROR_NPE;
 804bf12:	2002      	movs	r0, #2
 804bf14:	e7fc      	b.n	804bf10 <LoRaMacParserData+0xb0>

0804bf16 <LoRaMacSerializerJoinRequest>:
*/
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 804bf16:	b538      	push	{r3, r4, r5, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 804bf18:	4604      	mov	r4, r0
 804bf1a:	b360      	cbz	r0, 804bf76 <LoRaMacSerializerJoinRequest+0x60>
 804bf1c:	6803      	ldr	r3, [r0, #0]
 804bf1e:	b353      	cbz	r3, 804bf76 <LoRaMacSerializerJoinRequest+0x60>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 804bf20:	7902      	ldrb	r2, [r0, #4]
 804bf22:	2a16      	cmp	r2, #22
 804bf24:	d929      	bls.n	804bf7a <LoRaMacSerializerJoinRequest+0x64>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 804bf26:	7942      	ldrb	r2, [r0, #5]
 804bf28:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 804bf2a:	4605      	mov	r5, r0
 804bf2c:	2208      	movs	r2, #8
 804bf2e:	f855 0b0e 	ldr.w	r0, [r5], #14
 804bf32:	1da1      	adds	r1, r4, #6
 804bf34:	3001      	adds	r0, #1
 804bf36:	f001 ff84 	bl	804de42 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 804bf3a:	6820      	ldr	r0, [r4, #0]
 804bf3c:	2208      	movs	r2, #8
 804bf3e:	3009      	adds	r0, #9
 804bf40:	4629      	mov	r1, r5
 804bf42:	f001 ff7e 	bl	804de42 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 804bf46:	6823      	ldr	r3, [r4, #0]
 804bf48:	8ae2      	ldrh	r2, [r4, #22]
 804bf4a:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 804bf4c:	8ae3      	ldrh	r3, [r4, #22]
 804bf4e:	6822      	ldr	r2, [r4, #0]
 804bf50:	0a1b      	lsrs	r3, r3, #8
 804bf52:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 804bf54:	6823      	ldr	r3, [r4, #0]
 804bf56:	69a2      	ldr	r2, [r4, #24]
 804bf58:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 804bf5a:	69a3      	ldr	r3, [r4, #24]
 804bf5c:	6822      	ldr	r2, [r4, #0]
 804bf5e:	0a1b      	lsrs	r3, r3, #8
 804bf60:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 804bf62:	6823      	ldr	r3, [r4, #0]
 804bf64:	8b62      	ldrh	r2, [r4, #26]
 804bf66:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 804bf68:	6823      	ldr	r3, [r4, #0]
 804bf6a:	7ee2      	ldrb	r2, [r4, #27]
 804bf6c:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 804bf6e:	2317      	movs	r3, #23
 804bf70:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 804bf72:	2000      	movs	r0, #0
}
 804bf74:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 804bf76:	2001      	movs	r0, #1
 804bf78:	e7fc      	b.n	804bf74 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 804bf7a:	2002      	movs	r0, #2
 804bf7c:	e7fa      	b.n	804bf74 <LoRaMacSerializerJoinRequest+0x5e>

0804bf7e <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 804bf7e:	b538      	push	{r3, r4, r5, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 804bf80:	4604      	mov	r4, r0
 804bf82:	2800      	cmp	r0, #0
 804bf84:	d063      	beq.n	804c04e <LoRaMacSerializerData+0xd0>
 804bf86:	6801      	ldr	r1, [r0, #0]
 804bf88:	2900      	cmp	r1, #0
 804bf8a:	d060      	beq.n	804c04e <LoRaMacSerializerData+0xd0>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADD_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 804bf8c:	7b03      	ldrb	r3, [r0, #12]

    if( macMsg->FRMPayloadSize > 0 )
 804bf8e:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 804bf92:	f003 030f 	and.w	r3, r3, #15
    if( macMsg->FRMPayloadSize > 0 )
 804bf96:	2a00      	cmp	r2, #0
 804bf98:	d157      	bne.n	804c04a <LoRaMacSerializerData+0xcc>
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 804bf9a:	3308      	adds	r3, #8
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
    }

    computedBufSize += macMsg->FRMPayloadSize;
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 804bf9c:	3204      	adds	r2, #4

    if( macMsg->BufSize < computedBufSize )
 804bf9e:	7920      	ldrb	r0, [r4, #4]
 804bfa0:	4413      	add	r3, r2
 804bfa2:	4298      	cmp	r0, r3
 804bfa4:	d355      	bcc.n	804c052 <LoRaMacSerializerData+0xd4>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 804bfa6:	7963      	ldrb	r3, [r4, #5]
 804bfa8:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 804bfaa:	6823      	ldr	r3, [r4, #0]
 804bfac:	68a2      	ldr	r2, [r4, #8]
 804bfae:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 804bfb0:	68a3      	ldr	r3, [r4, #8]
 804bfb2:	6822      	ldr	r2, [r4, #0]
 804bfb4:	0a1b      	lsrs	r3, r3, #8
 804bfb6:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 804bfb8:	6823      	ldr	r3, [r4, #0]
 804bfba:	8962      	ldrh	r2, [r4, #10]
 804bfbc:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 804bfbe:	6823      	ldr	r3, [r4, #0]
 804bfc0:	7ae2      	ldrb	r2, [r4, #11]
 804bfc2:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 804bfc4:	6823      	ldr	r3, [r4, #0]
 804bfc6:	7b22      	ldrb	r2, [r4, #12]
 804bfc8:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 804bfca:	6823      	ldr	r3, [r4, #0]
 804bfcc:	89e2      	ldrh	r2, [r4, #14]
 804bfce:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 804bfd0:	89e3      	ldrh	r3, [r4, #14]
 804bfd2:	6822      	ldr	r2, [r4, #0]
 804bfd4:	0a1b      	lsrs	r3, r3, #8
 804bfd6:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 804bfd8:	7b22      	ldrb	r2, [r4, #12]
 804bfda:	6820      	ldr	r0, [r4, #0]
 804bfdc:	f002 020f 	and.w	r2, r2, #15
 804bfe0:	f104 0110 	add.w	r1, r4, #16
 804bfe4:	3008      	adds	r0, #8
 804bfe6:	f001 ff22 	bl	804de2e <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 804bfea:	7b23      	ldrb	r3, [r4, #12]

    if( macMsg->FRMPayloadSize > 0 )
 804bfec:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 804bff0:	f003 030f 	and.w	r3, r3, #15
 804bff4:	f103 0508 	add.w	r5, r3, #8
    if( macMsg->FRMPayloadSize > 0 )
 804bff8:	b12a      	cbz	r2, 804c006 <LoRaMacSerializerData+0x88>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 804bffa:	6822      	ldr	r2, [r4, #0]
 804bffc:	f894 1020 	ldrb.w	r1, [r4, #32]
 804c000:	5551      	strb	r1, [r2, r5]
 804c002:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 804c006:	6820      	ldr	r0, [r4, #0]
 804c008:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 804c00c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 804c00e:	4428      	add	r0, r5
 804c010:	f001 ff0d 	bl	804de2e <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 804c014:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 804c018:	6822      	ldr	r2, [r4, #0]
 804c01a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    bufItr = bufItr + macMsg->FRMPayloadSize;
 804c01c:	442b      	add	r3, r5
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 804c01e:	54d1      	strb	r1, [r2, r3]
 804c020:	1c5a      	adds	r2, r3, #1
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 804c022:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 804c024:	6820      	ldr	r0, [r4, #0]
 804c026:	b292      	uxth	r2, r2
 804c028:	0a09      	lsrs	r1, r1, #8
 804c02a:	5481      	strb	r1, [r0, r2]
 804c02c:	1c9a      	adds	r2, r3, #2
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 804c02e:	6821      	ldr	r1, [r4, #0]
 804c030:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 804c032:	b292      	uxth	r2, r2
 804c034:	5488      	strb	r0, [r1, r2]
 804c036:	1cda      	adds	r2, r3, #3
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 804c038:	b292      	uxth	r2, r2
 804c03a:	6821      	ldr	r1, [r4, #0]
 804c03c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 804c040:	5488      	strb	r0, [r1, r2]
 804c042:	3304      	adds	r3, #4

    macMsg->BufSize = bufItr;
 804c044:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 804c046:	2000      	movs	r0, #0
}
 804c048:	bd38      	pop	{r3, r4, r5, pc}
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 804c04a:	3309      	adds	r3, #9
 804c04c:	e7a6      	b.n	804bf9c <LoRaMacSerializerData+0x1e>
        return LORAMAC_SERIALIZER_ERROR_NPE;
 804c04e:	2001      	movs	r0, #1
 804c050:	e7fa      	b.n	804c048 <LoRaMacSerializerData+0xca>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 804c052:	2002      	movs	r0, #2
 804c054:	e7f8      	b.n	804c048 <LoRaMacSerializerData+0xca>

0804c056 <RegionIsActive>:
        default:
        {
            return false;
        }
    }
}
 804c056:	1e43      	subs	r3, r0, #1
 804c058:	4258      	negs	r0, r3
 804c05a:	4158      	adcs	r0, r3
 804c05c:	4770      	bx	lr

0804c05e <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
    PhyParam_t phyParam = { 0 };
    switch( region )
 804c05e:	2801      	cmp	r0, #1
{
 804c060:	b082      	sub	sp, #8
    switch( region )
 804c062:	d103      	bne.n	804c06c <RegionGetPhyParam+0xe>
    {
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
 804c064:	4608      	mov	r0, r1
        default:
        {
            return phyParam;
        }
    }
}
 804c066:	b002      	add	sp, #8
        AU915_GET_PHY_PARAM( );
 804c068:	f000 b8d2 	b.w	804c210 <RegionAU915GetPhyParam>
}
 804c06c:	2000      	movs	r0, #0
 804c06e:	b002      	add	sp, #8
 804c070:	4770      	bx	lr

0804c072 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
    switch( region )
 804c072:	2801      	cmp	r0, #1
 804c074:	d102      	bne.n	804c07c <RegionSetBandTxDone+0xa>
    {
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
 804c076:	4608      	mov	r0, r1
 804c078:	f000 b974 	b.w	804c364 <RegionAU915SetBandTxDone>
        default:
        {
            return;
        }
    }
}
 804c07c:	4770      	bx	lr

0804c07e <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
    switch( region )
 804c07e:	2801      	cmp	r0, #1
 804c080:	d102      	bne.n	804c088 <RegionInitDefaults+0xa>
    {
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
 804c082:	4608      	mov	r0, r1
 804c084:	f000 b97e 	b.w	804c384 <RegionAU915InitDefaults>
        default:
        {
            break;
        }
    }
}
 804c088:	4770      	bx	lr

0804c08a <RegionGetNvmCtx>:

void* RegionGetNvmCtx( LoRaMacRegion_t region, GetNvmCtxParams_t* params )
{
    switch( region )
 804c08a:	2801      	cmp	r0, #1
 804c08c:	d102      	bne.n	804c094 <RegionGetNvmCtx+0xa>
    {
        AS923_GET_NVM_CTX( );
        AU915_GET_NVM_CTX( );
 804c08e:	4608      	mov	r0, r1
 804c090:	f000 b9f4 	b.w	804c47c <RegionAU915GetNvmCtx>
        default:
        {
           return 0;
        }
    }
}
 804c094:	2000      	movs	r0, #0
 804c096:	4770      	bx	lr

0804c098 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
    switch( region )
 804c098:	2801      	cmp	r0, #1
{
 804c09a:	460b      	mov	r3, r1
    switch( region )
 804c09c:	d103      	bne.n	804c0a6 <RegionVerify+0xe>
    {
        AS923_VERIFY( );
        AU915_VERIFY( );
 804c09e:	4611      	mov	r1, r2
 804c0a0:	4618      	mov	r0, r3
 804c0a2:	f000 b9f3 	b.w	804c48c <RegionAU915Verify>
        default:
        {
            return false;
        }
    }
}
 804c0a6:	2000      	movs	r0, #0
 804c0a8:	4770      	bx	lr

0804c0aa <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
    switch( region )
 804c0aa:	2801      	cmp	r0, #1
 804c0ac:	d102      	bne.n	804c0b4 <RegionApplyCFList+0xa>
    {
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
 804c0ae:	4608      	mov	r0, r1
 804c0b0:	f000 ba18 	b.w	804c4e4 <RegionAU915ApplyCFList>
        default:
        {
            break;
        }
    }
}
 804c0b4:	4770      	bx	lr

0804c0b6 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
    switch( region )
 804c0b6:	2801      	cmp	r0, #1
 804c0b8:	d102      	bne.n	804c0c0 <RegionChanMaskSet+0xa>
    {
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
 804c0ba:	4608      	mov	r0, r1
 804c0bc:	f000 ba38 	b.w	804c530 <RegionAU915ChanMaskSet>
        default:
        {
            return false;
        }
    }
}
 804c0c0:	2000      	movs	r0, #0
 804c0c2:	4770      	bx	lr

0804c0c4 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 804c0c4:	b410      	push	{r4}
    switch( region )
 804c0c6:	2801      	cmp	r0, #1
{
 804c0c8:	460c      	mov	r4, r1
 804c0ca:	4611      	mov	r1, r2
 804c0cc:	461a      	mov	r2, r3
 804c0ce:	9b01      	ldr	r3, [sp, #4]
    switch( region )
 804c0d0:	d104      	bne.n	804c0dc <RegionComputeRxWindowParameters+0x18>
    {
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
 804c0d2:	4620      	mov	r0, r4
        default:
        {
            break;
        }
    }
}
 804c0d4:	f85d 4b04 	ldr.w	r4, [sp], #4
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
 804c0d8:	f000 ba56 	b.w	804c588 <RegionAU915ComputeRxWindowParameters>
}
 804c0dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 804c0e0:	4770      	bx	lr

0804c0e2 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
    switch( region )
 804c0e2:	2801      	cmp	r0, #1
{
 804c0e4:	460b      	mov	r3, r1
    switch( region )
 804c0e6:	d103      	bne.n	804c0f0 <RegionRxConfig+0xe>
    {
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
 804c0e8:	4611      	mov	r1, r2
 804c0ea:	4618      	mov	r0, r3
 804c0ec:	f000 ba8e 	b.w	804c60c <RegionAU915RxConfig>
        default:
        {
            return false;
        }
    }
}
 804c0f0:	2000      	movs	r0, #0
 804c0f2:	4770      	bx	lr

0804c0f4 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
    switch( region )
 804c0f4:	2801      	cmp	r0, #1
{
 804c0f6:	b410      	push	{r4}
 804c0f8:	460c      	mov	r4, r1
 804c0fa:	4611      	mov	r1, r2
    switch( region )
 804c0fc:	d105      	bne.n	804c10a <RegionTxConfig+0x16>
    {
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
 804c0fe:	4620      	mov	r0, r4
 804c100:	461a      	mov	r2, r3
        default:
        {
            return false;
        }
    }
}
 804c102:	f85d 4b04 	ldr.w	r4, [sp], #4
        AU915_TX_CONFIG( );
 804c106:	f000 badb 	b.w	804c6c0 <RegionAU915TxConfig>
}
 804c10a:	2000      	movs	r0, #0
 804c10c:	f85d 4b04 	ldr.w	r4, [sp], #4
 804c110:	4770      	bx	lr

0804c112 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 804c112:	b430      	push	{r4, r5}
    switch( region )
 804c114:	2801      	cmp	r0, #1
{
 804c116:	460c      	mov	r4, r1
 804c118:	4611      	mov	r1, r2
 804c11a:	461a      	mov	r2, r3
 804c11c:	e9dd 3502 	ldrd	r3, r5, [sp, #8]
    switch( region )
 804c120:	d104      	bne.n	804c12c <RegionLinkAdrReq+0x1a>
    {
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
 804c122:	9502      	str	r5, [sp, #8]
 804c124:	4620      	mov	r0, r4
        default:
        {
            return 0;
        }
    }
}
 804c126:	bc30      	pop	{r4, r5}
        AU915_LINK_ADR_REQ( );
 804c128:	f000 bb46 	b.w	804c7b8 <RegionAU915LinkAdrReq>
}
 804c12c:	2000      	movs	r0, #0
 804c12e:	bc30      	pop	{r4, r5}
 804c130:	4770      	bx	lr

0804c132 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
    switch( region )
 804c132:	2801      	cmp	r0, #1
 804c134:	d102      	bne.n	804c13c <RegionRxParamSetupReq+0xa>
    {
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
 804c136:	4608      	mov	r0, r1
 804c138:	f000 bc4a 	b.w	804c9d0 <RegionAU915RxParamSetupReq>
        default:
        {
            return 0;
        }
    }
}
 804c13c:	2000      	movs	r0, #0
 804c13e:	4770      	bx	lr

0804c140 <RegionNewChannelReq>:

uint8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
    switch( region )
 804c140:	2801      	cmp	r0, #1
 804c142:	d102      	bne.n	804c14a <RegionNewChannelReq+0xa>
    {
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
 804c144:	4608      	mov	r0, r1
 804c146:	f000 bc69 	b.w	804ca1c <RegionAU915NewChannelReq>
        default:
        {
            return 0;
        }
    }
}
 804c14a:	2000      	movs	r0, #0
 804c14c:	4770      	bx	lr

0804c14e <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
    switch( region )
 804c14e:	2801      	cmp	r0, #1
 804c150:	d102      	bne.n	804c158 <RegionTxParamSetupReq+0xa>
    {
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
 804c152:	4608      	mov	r0, r1
 804c154:	f000 bc64 	b.w	804ca20 <RegionAU915TxParamSetupReq>
        default:
        {
            return 0;
        }
    }
}
 804c158:	2000      	movs	r0, #0
 804c15a:	4770      	bx	lr

0804c15c <RegionDlChannelReq>:

uint8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
    switch( region )
 804c15c:	2801      	cmp	r0, #1
 804c15e:	d102      	bne.n	804c166 <RegionDlChannelReq+0xa>
    {
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
 804c160:	4608      	mov	r0, r1
 804c162:	f000 bc5f 	b.w	804ca24 <RegionAU915DlChannelReq>
        default:
        {
            return 0;
        }
    }
}
 804c166:	2000      	movs	r0, #0
 804c168:	4770      	bx	lr

0804c16a <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
    switch( region )
 804c16a:	2801      	cmp	r0, #1
{
 804c16c:	460b      	mov	r3, r1
    switch( region )
 804c16e:	d103      	bne.n	804c178 <RegionAlternateDr+0xe>
    {
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
 804c170:	4611      	mov	r1, r2
 804c172:	4618      	mov	r0, r3
 804c174:	f000 bc58 	b.w	804ca28 <RegionAU915AlternateDr>
        default:
        {
            return 0;
        }
    }
}
 804c178:	2000      	movs	r0, #0
 804c17a:	4770      	bx	lr

0804c17c <RegionCalcBackOff>:

void RegionCalcBackOff( LoRaMacRegion_t region, CalcBackOffParams_t* calcBackOff )
{
    switch( region )
 804c17c:	2801      	cmp	r0, #1
 804c17e:	d102      	bne.n	804c186 <RegionCalcBackOff+0xa>
    {
        AS923_CALC_BACKOFF( );
        AU915_CALC_BACKOFF( );
 804c180:	4608      	mov	r0, r1
 804c182:	f000 bc63 	b.w	804ca4c <RegionAU915CalcBackOff>
        default:
        {
            break;
        }
    }
}
 804c186:	4770      	bx	lr

0804c188 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 804c188:	b410      	push	{r4}
    switch( region )
 804c18a:	2801      	cmp	r0, #1
{
 804c18c:	460c      	mov	r4, r1
 804c18e:	4611      	mov	r1, r2
 804c190:	461a      	mov	r2, r3
 804c192:	9b01      	ldr	r3, [sp, #4]
    switch( region )
 804c194:	d104      	bne.n	804c1a0 <RegionNextChannel+0x18>
    {
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
 804c196:	4620      	mov	r0, r4
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
        }
    }
}
 804c198:	f85d 4b04 	ldr.w	r4, [sp], #4
        AU915_NEXT_CHANNEL( );
 804c19c:	f000 bc74 	b.w	804ca88 <RegionAU915NextChannel>
}
 804c1a0:	2009      	movs	r0, #9
 804c1a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 804c1a6:	4770      	bx	lr

0804c1a8 <RegionSetContinuousWave>:
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
    switch( region )
 804c1a8:	2801      	cmp	r0, #1
 804c1aa:	d102      	bne.n	804c1b2 <RegionSetContinuousWave+0xa>
    {
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
 804c1ac:	4608      	mov	r0, r1
 804c1ae:	f000 bd0d 	b.w	804cbcc <RegionAU915SetContinuousWave>
        default:
        {
            break;
        }
    }
}
 804c1b2:	4770      	bx	lr

0804c1b4 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
    switch( region )
 804c1b4:	2801      	cmp	r0, #1
{
 804c1b6:	b410      	push	{r4}
 804c1b8:	460c      	mov	r4, r1
 804c1ba:	4611      	mov	r1, r2
    switch( region )
 804c1bc:	d105      	bne.n	804c1ca <RegionApplyDrOffset+0x16>
    {
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
 804c1be:	4620      	mov	r0, r4
 804c1c0:	461a      	mov	r2, r3
        default:
        {
            return dr;
        }
    }
}
 804c1c2:	f85d 4b04 	ldr.w	r4, [sp], #4
        AU915_APPLY_DR_OFFSET( );
 804c1c6:	f000 bd25 	b.w	804cc14 <RegionAU915ApplyDrOffset>
}
 804c1ca:	b2d0      	uxtb	r0, r2
 804c1cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 804c1d0:	4770      	bx	lr
	...

0804c1d4 <VerifyRfFreq>:
}

static bool VerifyRfFreq( uint32_t freq )
{
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 804c1d4:	4b0a      	ldr	r3, [pc, #40]	; (804c200 <VerifyRfFreq+0x2c>)
{
 804c1d6:	b510      	push	{r4, lr}
    if( Radio.CheckRfFrequency( freq ) == false )
 804c1d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
{
 804c1da:	4604      	mov	r4, r0
    if( Radio.CheckRfFrequency( freq ) == false )
 804c1dc:	4798      	blx	r3
 804c1de:	b170      	cbz	r0, 804c1fe <VerifyRfFreq+0x2a>
    {
        return false;
    }

    // Rx frequencies
    if( ( freq < AU915_FIRST_RX1_CHANNEL ) ||
 804c1e0:	4b08      	ldr	r3, [pc, #32]	; (804c204 <VerifyRfFreq+0x30>)
 804c1e2:	4a09      	ldr	r2, [pc, #36]	; (804c208 <VerifyRfFreq+0x34>)
 804c1e4:	4423      	add	r3, r4
 804c1e6:	4293      	cmp	r3, r2
        ( freq > AU915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) AU915_FIRST_RX1_CHANNEL ) % ( uint32_t ) AU915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 804c1e8:	bf9f      	itttt	ls
 804c1ea:	4a08      	ldrls	r2, [pc, #32]	; (804c20c <VerifyRfFreq+0x38>)
 804c1ec:	fbb3 f0f2 	udivls	r0, r3, r2
 804c1f0:	fb02 3010 	mlsls	r0, r2, r0, r3
        ( freq > AU915_LAST_RX1_CHANNEL ) ||
 804c1f4:	fab0 f080 	clzls	r0, r0
 804c1f8:	bf94      	ite	ls
 804c1fa:	0940      	lsrls	r0, r0, #5
        return false;
 804c1fc:	2000      	movhi	r0, #0
    if( ( freq < 915200000 ) ||  ( freq > 927800000 ) )
    {
        return false;
    }
    return true;
}
 804c1fe:	bd10      	pop	{r4, pc}
 804c200:	08051928 	.word	0x08051928
 804c204:	c8f78f60 	.word	0xc8f78f60
 804c208:	00401640 	.word	0x00401640
 804c20c:	000927c0 	.word	0x000927c0

0804c210 <RegionAU915GetPhyParam>:
    *delayTx = delayTransmission;
    return nbEnabledChannels;
}

PhyParam_t RegionAU915GetPhyParam( GetPhyParams_t* getPhy )
{
 804c210:	b507      	push	{r0, r1, r2, lr}
    PhyParam_t phyParam = { 0 };
 804c212:	2300      	movs	r3, #0
 804c214:	9300      	str	r3, [sp, #0]

    switch( getPhy->Attribute )
 804c216:	7803      	ldrb	r3, [r0, #0]
 804c218:	3b01      	subs	r3, #1
 804c21a:	2b34      	cmp	r3, #52	; 0x34
 804c21c:	d832      	bhi.n	804c284 <RegionAU915GetPhyParam+0x74>
 804c21e:	e8df f003 	tbb	[pc, r3]
 804c222:	1f1b      	.short	0x1f1b
 804c224:	21313131 	.word	0x21313131
 804c228:	31313131 	.word	0x31313131
 804c22c:	4d43413f 	.word	0x4d43413f
 804c230:	5e5b5831 	.word	0x5e5b5831
 804c234:	6a676461 	.word	0x6a676461
 804c238:	751d7331 	.word	0x751d7331
 804c23c:	7d7b7977 	.word	0x7d7b7977
 804c240:	24827f31 	.word	0x24827f31
 804c244:	31313131 	.word	0x31313131
 804c248:	31313131 	.word	0x31313131
 804c24c:	31313131 	.word	0x31313131
 804c250:	1d843131 	.word	0x1d843131
 804c254:	1d8c      	.short	0x1d8c
 804c256:	1d          	.byte	0x1d
 804c257:	00          	.byte	0x00
    {
        case PHY_MIN_RX_DR:
        {
            if( getPhy->DownlinkDwellTime == 0)
 804c258:	78c3      	ldrb	r3, [r0, #3]
 804c25a:	b91b      	cbnz	r3, 804c264 <RegionAU915GetPhyParam+0x54>
            phyParam.Value = AU915_RX_WND_2_FREQ;
            break;
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = AU915_RX_WND_2_DR;
 804c25c:	2308      	movs	r3, #8
 804c25e:	e002      	b.n	804c266 <RegionAU915GetPhyParam+0x56>
            if( getPhy->UplinkDwellTime == 0)
 804c260:	7883      	ldrb	r3, [r0, #2]
 804c262:	b17b      	cbz	r3, 804c284 <RegionAU915GetPhyParam+0x74>
            phyParam.Value = AU915_DEFAULT_DATARATE;
 804c264:	2302      	movs	r3, #2
            phyParam.Value = AU915_BEACON_CHANNEL_DR;
            break;
        }
        case PHY_BEACON_CHANNEL_STEPWIDTH:
        {
            phyParam.Value = AU915_BEACON_CHANNEL_STEPWIDTH;
 804c266:	9300      	str	r3, [sp, #0]
            break;
 804c268:	e00c      	b.n	804c284 <RegionAU915GetPhyParam+0x74>
            if( getPhy->UplinkDwellTime == 0)
 804c26a:	7882      	ldrb	r2, [r0, #2]
 804c26c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 804c270:	b962      	cbnz	r2, 804c28c <RegionAU915GetPhyParam+0x7c>
    if( dr == minDr )
 804c272:	b12b      	cbz	r3, 804c280 <RegionAU915GetPhyParam+0x70>
    else if( dr == DR_8 )
 804c274:	2b08      	cmp	r3, #8
        nextLowerDr = dr - 1;
 804c276:	bf1a      	itte	ne
 804c278:	f103 33ff 	addne.w	r3, r3, #4294967295
 804c27c:	b2da      	uxtbne	r2, r3
        nextLowerDr = DR_6;
 804c27e:	2206      	moveq	r2, #6
                phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, AU915_TX_MIN_DATARATE );
 804c280:	b252      	sxtb	r2, r2
 804c282:	9200      	str	r2, [sp, #0]
            break;
        }
    }

    return phyParam;
}
 804c284:	9800      	ldr	r0, [sp, #0]
 804c286:	b003      	add	sp, #12
 804c288:	f85d fb04 	ldr.w	pc, [sp], #4
    if( dr == minDr )
 804c28c:	2b02      	cmp	r3, #2
 804c28e:	d005      	beq.n	804c29c <RegionAU915GetPhyParam+0x8c>
    else if( dr == DR_8 )
 804c290:	2b08      	cmp	r3, #8
        nextLowerDr = dr - 1;
 804c292:	bf1a      	itte	ne
 804c294:	f103 33ff 	addne.w	r3, r3, #4294967295
 804c298:	b2db      	uxtbne	r3, r3
        nextLowerDr = DR_6;
 804c29a:	2306      	moveq	r3, #6
                phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, AU915_DWELL_LIMIT_DATARATE );
 804c29c:	b25b      	sxtb	r3, r3
 804c29e:	e7e2      	b.n	804c266 <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_ADR_ACK_LIMIT;
 804c2a0:	2340      	movs	r3, #64	; 0x40
 804c2a2:	e7e0      	b.n	804c266 <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_ADR_ACK_DELAY;
 804c2a4:	2320      	movs	r3, #32
 804c2a6:	e7de      	b.n	804c266 <RegionAU915GetPhyParam+0x56>
            if( getPhy->UplinkDwellTime == 0 )
 804c2a8:	7881      	ldrb	r1, [r0, #2]
 804c2aa:	f990 2001 	ldrsb.w	r2, [r0, #1]
 804c2ae:	4b24      	ldr	r3, [pc, #144]	; (804c340 <RegionAU915GetPhyParam+0x130>)
 804c2b0:	b909      	cbnz	r1, 804c2b6 <RegionAU915GetPhyParam+0xa6>
                phyParam.Value = MaxPayloadOfDatarateDwell0AU915[getPhy->Datarate];
 804c2b2:	5c9b      	ldrb	r3, [r3, r2]
 804c2b4:	e7d7      	b.n	804c266 <RegionAU915GetPhyParam+0x56>
                phyParam.Value = MaxPayloadOfDatarateDwell1AU915[getPhy->Datarate];
 804c2b6:	4413      	add	r3, r2
 804c2b8:	7b9b      	ldrb	r3, [r3, #14]
 804c2ba:	e7d4      	b.n	804c266 <RegionAU915GetPhyParam+0x56>
 804c2bc:	f990 2001 	ldrsb.w	r2, [r0, #1]
 804c2c0:	4b1f      	ldr	r3, [pc, #124]	; (804c340 <RegionAU915GetPhyParam+0x130>)
            if( getPhy->UplinkDwellTime == 0)
 804c2c2:	7881      	ldrb	r1, [r0, #2]
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AU915[getPhy->Datarate];
 804c2c4:	4413      	add	r3, r2
            if( getPhy->UplinkDwellTime == 0)
 804c2c6:	b909      	cbnz	r1, 804c2cc <RegionAU915GetPhyParam+0xbc>
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AU915[getPhy->Datarate];
 804c2c8:	7f1b      	ldrb	r3, [r3, #28]
 804c2ca:	e7cc      	b.n	804c266 <RegionAU915GetPhyParam+0x56>
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell1AU915[getPhy->Datarate];
 804c2cc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 804c2d0:	e7c9      	b.n	804c266 <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_MAX_RX_WINDOW;
 804c2d2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 804c2d6:	e7c6      	b.n	804c266 <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_RECEIVE_DELAY1;
 804c2d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 804c2dc:	e7c3      	b.n	804c266 <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_RECEIVE_DELAY2;
 804c2de:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 804c2e2:	e7c0      	b.n	804c266 <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_JOIN_ACCEPT_DELAY1;
 804c2e4:	f241 3388 	movw	r3, #5000	; 0x1388
 804c2e8:	e7bd      	b.n	804c266 <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_JOIN_ACCEPT_DELAY2;
 804c2ea:	f241 7370 	movw	r3, #6000	; 0x1770
 804c2ee:	e7ba      	b.n	804c266 <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_MAX_FCNT_GAP;
 804c2f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 804c2f4:	e7b7      	b.n	804c266 <RegionAU915GetPhyParam+0x56>
            phyParam.Value = ( AU915_ACKTIMEOUT + randr( -AU915_ACK_TIMEOUT_RND, AU915_ACK_TIMEOUT_RND ) );
 804c2f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 804c2fa:	4812      	ldr	r0, [pc, #72]	; (804c344 <RegionAU915GetPhyParam+0x134>)
 804c2fc:	f001 fd8a 	bl	804de14 <randr>
 804c300:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 804c304:	9000      	str	r0, [sp, #0]
            break;
 804c306:	e7bd      	b.n	804c284 <RegionAU915GetPhyParam+0x74>
            phyParam.Value = AU915_RX_WND_2_FREQ;
 804c308:	4b0f      	ldr	r3, [pc, #60]	; (804c348 <RegionAU915GetPhyParam+0x138>)
 804c30a:	e7ac      	b.n	804c266 <RegionAU915GetPhyParam+0x56>
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 804c30c:	4b0f      	ldr	r3, [pc, #60]	; (804c34c <RegionAU915GetPhyParam+0x13c>)
 804c30e:	e7aa      	b.n	804c266 <RegionAU915GetPhyParam+0x56>
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 804c310:	4b0f      	ldr	r3, [pc, #60]	; (804c350 <RegionAU915GetPhyParam+0x140>)
 804c312:	e7a8      	b.n	804c266 <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_MAX_NB_CHANNELS;
 804c314:	2348      	movs	r3, #72	; 0x48
 804c316:	e7a6      	b.n	804c266 <RegionAU915GetPhyParam+0x56>
            phyParam.Channels = NvmCtx.Channels;
 804c318:	4b0e      	ldr	r3, [pc, #56]	; (804c354 <RegionAU915GetPhyParam+0x144>)
 804c31a:	e7a4      	b.n	804c266 <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_DEFAULT_UPLINK_DWELL_TIME;
 804c31c:	2301      	movs	r3, #1
 804c31e:	e7a2      	b.n	804c266 <RegionAU915GetPhyParam+0x56>
            phyParam.fValue = AU915_DEFAULT_MAX_EIRP;
 804c320:	4b0d      	ldr	r3, [pc, #52]	; (804c358 <RegionAU915GetPhyParam+0x148>)
            phyParam.fValue = AU915_DEFAULT_ANTENNA_GAIN;
 804c322:	9300      	str	r3, [sp, #0]
            break;
 804c324:	e7ae      	b.n	804c284 <RegionAU915GetPhyParam+0x74>
            phyParam.fValue = AU915_DEFAULT_ANTENNA_GAIN;
 804c326:	4b0d      	ldr	r3, [pc, #52]	; (804c35c <RegionAU915GetPhyParam+0x14c>)
 804c328:	e7fb      	b.n	804c322 <RegionAU915GetPhyParam+0x112>
            phyParam.BeaconFormat.BeaconSize = AU915_BEACON_SIZE;
 804c32a:	f240 3313 	movw	r3, #787	; 0x313
 804c32e:	f8ad 3000 	strh.w	r3, [sp]
            phyParam.BeaconFormat.Rfu1Size = AU915_RFU1_SIZE;
 804c332:	2301      	movs	r3, #1
 804c334:	f88d 3002 	strb.w	r3, [sp, #2]
            break;
 804c338:	e7a4      	b.n	804c284 <RegionAU915GetPhyParam+0x74>
            phyParam.Value = AU915_BEACON_CHANNEL_STEPWIDTH;
 804c33a:	4b09      	ldr	r3, [pc, #36]	; (804c360 <RegionAU915GetPhyParam+0x150>)
 804c33c:	e793      	b.n	804c266 <RegionAU915GetPhyParam+0x56>
 804c33e:	bf00      	nop
 804c340:	08051ce0 	.word	0x08051ce0
 804c344:	fffffc18 	.word	0xfffffc18
 804c348:	370870a0 	.word	0x370870a0
 804c34c:	2000b310 	.word	0x2000b310
 804c350:	2000b328 	.word	0x2000b328
 804c354:	2000afa0 	.word	0x2000afa0
 804c358:	41f00000 	.word	0x41f00000
 804c35c:	3e19999a 	.word	0x3e19999a
 804c360:	000927c0 	.word	0x000927c0

0804c364 <RegionAU915SetBandTxDone>:

void RegionAU915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 804c364:	4906      	ldr	r1, [pc, #24]	; (804c380 <RegionAU915SetBandTxDone+0x1c>)
 804c366:	7803      	ldrb	r3, [r0, #0]
 804c368:	220c      	movs	r2, #12
 804c36a:	fb02 1303 	mla	r3, r2, r3, r1
 804c36e:	6842      	ldr	r2, [r0, #4]
 804c370:	7a5b      	ldrb	r3, [r3, #9]
 804c372:	7840      	ldrb	r0, [r0, #1]
 804c374:	3336      	adds	r3, #54	; 0x36
 804c376:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 804c37a:	f000 bcf1 	b.w	804cd60 <RegionCommonSetBandTxDone>
 804c37e:	bf00      	nop
 804c380:	2000afa0 	.word	0x2000afa0

0804c384 <RegionAU915InitDefaults>:
}

void RegionAU915InitDefaults( InitDefaultsParams_t* params )
{
 804c384:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    Band_t bands[AU915_MAX_NB_BANDS] =
 804c386:	2301      	movs	r3, #1
 804c388:	f8ad 3000 	strh.w	r3, [sp]
    {
        AU915_BAND0
    };

    switch( params->Type )
 804c38c:	7903      	ldrb	r3, [r0, #4]
    Band_t bands[AU915_MAX_NB_BANDS] =
 804c38e:	2400      	movs	r4, #0
    switch( params->Type )
 804c390:	2b01      	cmp	r3, #1
    Band_t bands[AU915_MAX_NB_BANDS] =
 804c392:	f88d 4002 	strb.w	r4, [sp, #2]
 804c396:	e9cd 4401 	strd	r4, r4, [sp, #4]
 804c39a:	9403      	str	r4, [sp, #12]
    switch( params->Type )
 804c39c:	d049      	beq.n	804c432 <RegionAU915InitDefaults+0xae>
 804c39e:	d303      	bcc.n	804c3a8 <RegionAU915InitDefaults+0x24>
 804c3a0:	2b02      	cmp	r3, #2
 804c3a2:	d03d      	beq.n	804c420 <RegionAU915InitDefaults+0x9c>
        default:
        {
            break;
        }
    }
}
 804c3a4:	b004      	add	sp, #16
 804c3a6:	bd70      	pop	{r4, r5, r6, pc}
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * AU915_MAX_NB_BANDS );
 804c3a8:	2210      	movs	r2, #16
 804c3aa:	4669      	mov	r1, sp
 804c3ac:	482a      	ldr	r0, [pc, #168]	; (804c458 <RegionAU915InitDefaults+0xd4>)
            for( uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++ )
 804c3ae:	4d2b      	ldr	r5, [pc, #172]	; (804c45c <RegionAU915InitDefaults+0xd8>)
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * AU915_MAX_NB_BANDS );
 804c3b0:	f001 fd3d 	bl	804de2e <memcpy1>
 804c3b4:	4b2a      	ldr	r3, [pc, #168]	; (804c460 <RegionAU915InitDefaults+0xdc>)
 804c3b6:	4a2b      	ldr	r2, [pc, #172]	; (804c464 <RegionAU915InitDefaults+0xe0>)
 804c3b8:	4619      	mov	r1, r3
 804c3ba:	4618      	mov	r0, r3
                NvmCtx.Channels[i].DrRange.Value = ( DR_5 << 4 ) | DR_0;
 804c3bc:	2650      	movs	r6, #80	; 0x50
                NvmCtx.Channels[i].Frequency = 915200000 + i * 200000;
 804c3be:	600a      	str	r2, [r1, #0]
 804c3c0:	f502 3243 	add.w	r2, r2, #199680	; 0x30c00
 804c3c4:	f502 72a0 	add.w	r2, r2, #320	; 0x140
            for( uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++ )
 804c3c8:	42aa      	cmp	r2, r5
                NvmCtx.Channels[i].DrRange.Value = ( DR_5 << 4 ) | DR_0;
 804c3ca:	720e      	strb	r6, [r1, #8]
                NvmCtx.Channels[i].Band = 0;
 804c3cc:	724c      	strb	r4, [r1, #9]
 804c3ce:	f101 010c 	add.w	r1, r1, #12
            for( uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++ )
 804c3d2:	d1f4      	bne.n	804c3be <RegionAU915InitDefaults+0x3a>
 804c3d4:	4a24      	ldr	r2, [pc, #144]	; (804c468 <RegionAU915InitDefaults+0xe4>)
            for( uint8_t i = AU915_MAX_NB_CHANNELS - 8; i < AU915_MAX_NB_CHANNELS; i++ )
 804c3d6:	4c25      	ldr	r4, [pc, #148]	; (804c46c <RegionAU915InitDefaults+0xe8>)
                NvmCtx.Channels[i].DrRange.Value = ( DR_6 << 4 ) | DR_6;
 804c3d8:	2566      	movs	r5, #102	; 0x66
                NvmCtx.Channels[i].Band = 0;
 804c3da:	2100      	movs	r1, #0
                NvmCtx.Channels[i].Frequency = 915900000 + ( i - ( AU915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 804c3dc:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
 804c3e0:	f502 12c3 	add.w	r2, r2, #1597440	; 0x186000
 804c3e4:	f502 6220 	add.w	r2, r2, #2560	; 0xa00
            for( uint8_t i = AU915_MAX_NB_CHANNELS - 8; i < AU915_MAX_NB_CHANNELS; i++ )
 804c3e8:	42a2      	cmp	r2, r4
                NvmCtx.Channels[i].DrRange.Value = ( DR_6 << 4 ) | DR_6;
 804c3ea:	f883 5308 	strb.w	r5, [r3, #776]	; 0x308
                NvmCtx.Channels[i].Band = 0;
 804c3ee:	f883 1309 	strb.w	r1, [r3, #777]	; 0x309
 804c3f2:	f103 030c 	add.w	r3, r3, #12
            for( uint8_t i = AU915_MAX_NB_CHANNELS - 8; i < AU915_MAX_NB_CHANNELS; i++ )
 804c3f6:	d1f1      	bne.n	804c3dc <RegionAU915InitDefaults+0x58>
            NvmCtx.ChannelsDefaultMask[1] = 0x0000;
 804c3f8:	f8c0 138c 	str.w	r1, [r0, #908]	; 0x38c
            NvmCtx.ChannelsDefaultMask[3] = 0x0000;
 804c3fc:	f8c0 1390 	str.w	r1, [r0, #912]	; 0x390
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 6 );
 804c400:	491b      	ldr	r1, [pc, #108]	; (804c470 <RegionAU915InitDefaults+0xec>)
            NvmCtx.ChannelsDefaultMask[0] = 0x0001;
 804c402:	2301      	movs	r3, #1
 804c404:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 6 );
 804c408:	2206      	movs	r2, #6
 804c40a:	f1a1 0018 	sub.w	r0, r1, #24
 804c40e:	f000 fc98 	bl	804cd42 <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMaskRemaining, NvmCtx.ChannelsMask, 6 );
 804c412:	4918      	ldr	r1, [pc, #96]	; (804c474 <RegionAU915InitDefaults+0xf0>)
 804c414:	2206      	movs	r2, #6
 804c416:	f101 000c 	add.w	r0, r1, #12
 804c41a:	f000 fc92 	bl	804cd42 <RegionCommonChanMaskCopy>
            break;
 804c41e:	e7c1      	b.n	804c3a4 <RegionAU915InitDefaults+0x20>
            if( params->NvmCtx != 0 )
 804c420:	6801      	ldr	r1, [r0, #0]
 804c422:	2900      	cmp	r1, #0
 804c424:	d0be      	beq.n	804c3a4 <RegionAU915InitDefaults+0x20>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 804c426:	f44f 7265 	mov.w	r2, #916	; 0x394
 804c42a:	480d      	ldr	r0, [pc, #52]	; (804c460 <RegionAU915InitDefaults+0xdc>)
 804c42c:	f001 fcff 	bl	804de2e <memcpy1>
 804c430:	e7b8      	b.n	804c3a4 <RegionAU915InitDefaults+0x20>
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 6 );
 804c432:	490f      	ldr	r1, [pc, #60]	; (804c470 <RegionAU915InitDefaults+0xec>)
 804c434:	2206      	movs	r2, #6
 804c436:	f1a1 0018 	sub.w	r0, r1, #24
 804c43a:	f000 fc82 	bl	804cd42 <RegionCommonChanMaskCopy>
 804c43e:	4b0e      	ldr	r3, [pc, #56]	; (804c478 <RegionAU915InitDefaults+0xf4>)
 804c440:	f103 010c 	add.w	r1, r3, #12
                NvmCtx.ChannelsMaskRemaining[i] &= NvmCtx.ChannelsMask[i];
 804c444:	881a      	ldrh	r2, [r3, #0]
 804c446:	f833 0c0c 	ldrh.w	r0, [r3, #-12]
 804c44a:	4002      	ands	r2, r0
 804c44c:	f823 2b02 	strh.w	r2, [r3], #2
            for( uint8_t i = 0; i < 6; i++ )
 804c450:	428b      	cmp	r3, r1
 804c452:	d1f7      	bne.n	804c444 <RegionAU915InitDefaults+0xc0>
 804c454:	e7a6      	b.n	804c3a4 <RegionAU915InitDefaults+0x20>
 804c456:	bf00      	nop
 804c458:	2000b300 	.word	0x2000b300
 804c45c:	37502800 	.word	0x37502800
 804c460:	2000afa0 	.word	0x2000afa0
 804c464:	368cd800 	.word	0x368cd800
 804c468:	36978660 	.word	0x36978660
 804c46c:	375ad660 	.word	0x375ad660
 804c470:	2000b328 	.word	0x2000b328
 804c474:	2000b310 	.word	0x2000b310
 804c478:	2000b31c 	.word	0x2000b31c

0804c47c <RegionAU915GetNvmCtx>:

void* RegionAU915GetNvmCtx( GetNvmCtxParams_t* params )
{
    params->nvmCtxSize = sizeof( RegionAU915NvmCtx_t );
 804c47c:	f44f 7365 	mov.w	r3, #916	; 0x394
 804c480:	6003      	str	r3, [r0, #0]
    return &NvmCtx;
}
 804c482:	4801      	ldr	r0, [pc, #4]	; (804c488 <RegionAU915GetNvmCtx+0xc>)
 804c484:	4770      	bx	lr
 804c486:	bf00      	nop
 804c488:	2000afa0 	.word	0x2000afa0

0804c48c <RegionAU915Verify>:

bool RegionAU915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 804c48c:	b508      	push	{r3, lr}
 804c48e:	4603      	mov	r3, r0
    switch( phyAttribute )
 804c490:	290a      	cmp	r1, #10
 804c492:	d825      	bhi.n	804c4e0 <RegionAU915Verify+0x54>
 804c494:	e8df f001 	tbb	[pc, r1]
 804c498:	24242406 	.word	0x24242406
 804c49c:	160b0b24 	.word	0x160b0b24
 804c4a0:	1f24      	.short	0x1f24
 804c4a2:	1f          	.byte	0x1f
 804c4a3:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 804c4a4:	6800      	ldr	r0, [r0, #0]
            return AU915_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
    }
}
 804c4a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return VerifyRfFreq( verify->Frequency );
 804c4aa:	f7ff be93 	b.w	804c1d4 <VerifyRfFreq>
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 804c4ae:	7899      	ldrb	r1, [r3, #2]
 804c4b0:	f990 0000 	ldrsb.w	r0, [r0]
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_TX_MIN_DATARATE, AU915_TX_MAX_DATARATE );
 804c4b4:	220d      	movs	r2, #13
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 804c4b6:	b961      	cbnz	r1, 804c4d2 <RegionAU915Verify+0x46>
            return RegionCommonValueInRange( verify->TxPower, AU915_MAX_TX_POWER, AU915_MIN_TX_POWER );
 804c4b8:	f000 fc03 	bl	804ccc2 <RegionCommonValueInRange>
 804c4bc:	3000      	adds	r0, #0
 804c4be:	bf18      	it	ne
 804c4c0:	2001      	movne	r0, #1
}
 804c4c2:	bd08      	pop	{r3, pc}
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 804c4c4:	789b      	ldrb	r3, [r3, #2]
 804c4c6:	f990 0000 	ldrsb.w	r0, [r0]
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE );
 804c4ca:	220d      	movs	r2, #13
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 804c4cc:	b90b      	cbnz	r3, 804c4d2 <RegionAU915Verify+0x46>
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE );
 804c4ce:	2108      	movs	r1, #8
 804c4d0:	e7f2      	b.n	804c4b8 <RegionAU915Verify+0x2c>
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_DWELL_LIMIT_DATARATE, AU915_RX_MAX_DATARATE );
 804c4d2:	2102      	movs	r1, #2
 804c4d4:	e7f0      	b.n	804c4b8 <RegionAU915Verify+0x2c>
            return RegionCommonValueInRange( verify->TxPower, AU915_MAX_TX_POWER, AU915_MIN_TX_POWER );
 804c4d6:	220e      	movs	r2, #14
 804c4d8:	2100      	movs	r1, #0
 804c4da:	f990 0000 	ldrsb.w	r0, [r0]
 804c4de:	e7eb      	b.n	804c4b8 <RegionAU915Verify+0x2c>
            return AU915_DUTY_CYCLE_ENABLED;
 804c4e0:	2000      	movs	r0, #0
 804c4e2:	e7ee      	b.n	804c4c2 <RegionAU915Verify+0x36>

0804c4e4 <RegionAU915ApplyCFList>:

void RegionAU915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 804c4e4:	b530      	push	{r4, r5, lr}
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 804c4e6:	7903      	ldrb	r3, [r0, #4]
 804c4e8:	2b10      	cmp	r3, #16
 804c4ea:	d11d      	bne.n	804c528 <RegionAU915ApplyCFList+0x44>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 804c4ec:	6800      	ldr	r0, [r0, #0]
 804c4ee:	7bc3      	ldrb	r3, [r0, #15]
 804c4f0:	2b01      	cmp	r3, #1
 804c4f2:	d119      	bne.n	804c528 <RegionAU915ApplyCFList+0x44>
 804c4f4:	4b0d      	ldr	r3, [pc, #52]	; (804c52c <RegionAU915ApplyCFList+0x48>)
 804c4f6:	2100      	movs	r1, #0
    {
        NvmCtx.ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
        NvmCtx.ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
        if( chMaskItr == 4 )
        {
            NvmCtx.ChannelsMask[chMaskItr] = NvmCtx.ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 804c4f8:	f2a3 356e 	subw	r5, r3, #878	; 0x36e
        NvmCtx.ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 804c4fc:	f810 2011 	ldrb.w	r2, [r0, r1, lsl #1]
 804c500:	805a      	strh	r2, [r3, #2]
        NvmCtx.ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 804c502:	eb00 0441 	add.w	r4, r0, r1, lsl #1
        if( chMaskItr == 4 )
 804c506:	2904      	cmp	r1, #4
        NvmCtx.ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 804c508:	7864      	ldrb	r4, [r4, #1]
 804c50a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 804c50e:	f823 2f02 	strh.w	r2, [r3, #2]!
            NvmCtx.ChannelsMask[chMaskItr] = NvmCtx.ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 804c512:	bf04      	itt	eq
 804c514:	b2d2      	uxtbeq	r2, r2
 804c516:	f8a5 2378 	strheq.w	r2, [r5, #888]	; 0x378
        }
        // Set the channel mask to the remaining
        NvmCtx.ChannelsMaskRemaining[chMaskItr] &= NvmCtx.ChannelsMask[chMaskItr];
 804c51a:	899a      	ldrh	r2, [r3, #12]
 804c51c:	881c      	ldrh	r4, [r3, #0]
 804c51e:	3101      	adds	r1, #1
 804c520:	4022      	ands	r2, r4
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 804c522:	2905      	cmp	r1, #5
        NvmCtx.ChannelsMaskRemaining[chMaskItr] &= NvmCtx.ChannelsMask[chMaskItr];
 804c524:	819a      	strh	r2, [r3, #12]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 804c526:	d1e9      	bne.n	804c4fc <RegionAU915ApplyCFList+0x18>
    }
}
 804c528:	bd30      	pop	{r4, r5, pc}
 804c52a:	bf00      	nop
 804c52c:	2000b30e 	.word	0x2000b30e

0804c530 <RegionAU915ChanMaskSet>:

bool RegionAU915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 804c530:	b538      	push	{r3, r4, r5, lr}
    switch( chanMaskSet->ChannelsMaskType )
 804c532:	7904      	ldrb	r4, [r0, #4]
 804c534:	b11c      	cbz	r4, 804c53e <RegionAU915ChanMaskSet+0xe>
 804c536:	2c01      	cmp	r4, #1
 804c538:	d01c      	beq.n	804c574 <RegionAU915ChanMaskSet+0x44>
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 6 );
            break;
        }
        default:
            return false;
 804c53a:	2000      	movs	r0, #0
 804c53c:	e019      	b.n	804c572 <RegionAU915ChanMaskSet+0x42>
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, chanMaskSet->ChannelsMaskIn, 6 );
 804c53e:	4d10      	ldr	r5, [pc, #64]	; (804c580 <RegionAU915ChanMaskSet+0x50>)
 804c540:	6801      	ldr	r1, [r0, #0]
 804c542:	2206      	movs	r2, #6
 804c544:	f505 705c 	add.w	r0, r5, #880	; 0x370
 804c548:	f000 fbfb 	bl	804cd42 <RegionCommonChanMaskCopy>
            NvmCtx.ChannelsDefaultMask[4] = NvmCtx.ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 804c54c:	f895 3390 	ldrb.w	r3, [r5, #912]	; 0x390
 804c550:	f8a5 3390 	strh.w	r3, [r5, #912]	; 0x390
            NvmCtx.ChannelsDefaultMask[5] = 0x0000;
 804c554:	f8a5 4392 	strh.w	r4, [r5, #914]	; 0x392
 804c558:	f505 735f 	add.w	r3, r5, #892	; 0x37c
 804c55c:	f505 7562 	add.w	r5, r5, #904	; 0x388
                NvmCtx.ChannelsMaskRemaining[i] &= NvmCtx.ChannelsMask[i];
 804c560:	881a      	ldrh	r2, [r3, #0]
 804c562:	f833 1c0c 	ldrh.w	r1, [r3, #-12]
 804c566:	400a      	ands	r2, r1
 804c568:	f823 2b02 	strh.w	r2, [r3], #2
            for( uint8_t i = 0; i < 6; i++ )
 804c56c:	42ab      	cmp	r3, r5
 804c56e:	d1f7      	bne.n	804c560 <RegionAU915ChanMaskSet+0x30>
    }
    return true;
 804c570:	2001      	movs	r0, #1
}
 804c572:	bd38      	pop	{r3, r4, r5, pc}
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 6 );
 804c574:	6801      	ldr	r1, [r0, #0]
 804c576:	4803      	ldr	r0, [pc, #12]	; (804c584 <RegionAU915ChanMaskSet+0x54>)
 804c578:	2206      	movs	r2, #6
 804c57a:	f000 fbe2 	bl	804cd42 <RegionCommonChanMaskCopy>
 804c57e:	e7f7      	b.n	804c570 <RegionAU915ChanMaskSet+0x40>
 804c580:	2000afa0 	.word	0x2000afa0
 804c584:	2000b328 	.word	0x2000b328

0804c588 <RegionAU915ComputeRxWindowParameters>:

void RegionAU915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 804c588:	b5f0      	push	{r4, r5, r6, r7, lr}
    double tSymbol = 0.0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, AU915_RX_MAX_DATARATE );
 804c58a:	280d      	cmp	r0, #13
 804c58c:	bfa8      	it	ge
 804c58e:	200d      	movge	r0, #13
{
 804c590:	4616      	mov	r6, r2
    switch( BandwidthsAU915[drIndex] )
 804c592:	4a1a      	ldr	r2, [pc, #104]	; (804c5fc <RegionAU915ComputeRxWindowParameters+0x74>)
 804c594:	4f1a      	ldr	r7, [pc, #104]	; (804c600 <RegionAU915ComputeRxWindowParameters+0x78>)
{
 804c596:	ed2d 8b02 	vpush	{d8}
 804c59a:	461c      	mov	r4, r3
    rxConfigParams->Datarate = MIN( datarate, AU915_RX_MAX_DATARATE );
 804c59c:	7058      	strb	r0, [r3, #1]
    switch( BandwidthsAU915[drIndex] )
 804c59e:	0083      	lsls	r3, r0, #2
{
 804c5a0:	460d      	mov	r5, r1
    switch( BandwidthsAU915[drIndex] )
 804c5a2:	18d1      	adds	r1, r2, r3
{
 804c5a4:	b083      	sub	sp, #12
    switch( BandwidthsAU915[drIndex] )
 804c5a6:	6b89      	ldr	r1, [r1, #56]	; 0x38
 804c5a8:	42b9      	cmp	r1, r7
 804c5aa:	d025      	beq.n	804c5f8 <RegionAU915ComputeRxWindowParameters+0x70>
            return 0;
 804c5ac:	4f15      	ldr	r7, [pc, #84]	; (804c604 <RegionAU915ComputeRxWindowParameters+0x7c>)
 804c5ae:	42b9      	cmp	r1, r7
 804c5b0:	bf0c      	ite	eq
 804c5b2:	2102      	moveq	r1, #2
 804c5b4:	2100      	movne	r1, #0
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );

    tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesAU915[rxConfigParams->Datarate], BandwidthsAU915[rxConfigParams->Datarate] );
 804c5b6:	4413      	add	r3, r2
 804c5b8:	4402      	add	r2, r0
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 804c5ba:	70a1      	strb	r1, [r4, #2]
    tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesAU915[rxConfigParams->Datarate], BandwidthsAU915[rxConfigParams->Datarate] );
 804c5bc:	f892 0078 	ldrb.w	r0, [r2, #120]	; 0x78
 804c5c0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 804c5c2:	f000 fc63 	bl	804ce8c <RegionCommonComputeSymbolTimeLoRa>

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 804c5c6:	4b10      	ldr	r3, [pc, #64]	; (804c608 <RegionAU915ComputeRxWindowParameters+0x80>)
    tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesAU915[rxConfigParams->Datarate], BandwidthsAU915[rxConfigParams->Datarate] );
 804c5c8:	eeb0 8a40 	vmov.f32	s16, s0
 804c5cc:	eef0 8a60 	vmov.f32	s17, s1
    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 804c5d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 804c5d2:	4798      	blx	r3
 804c5d4:	eeb0 0a48 	vmov.f32	s0, s16
 804c5d8:	eef0 0a68 	vmov.f32	s1, s17
 804c5dc:	f104 030c 	add.w	r3, r4, #12
 804c5e0:	9300      	str	r3, [sp, #0]
 804c5e2:	4602      	mov	r2, r0
 804c5e4:	f104 0308 	add.w	r3, r4, #8
 804c5e8:	4631      	mov	r1, r6
 804c5ea:	4628      	mov	r0, r5
 804c5ec:	f000 fc6a 	bl	804cec4 <RegionCommonComputeRxWindowParameters>
}
 804c5f0:	b003      	add	sp, #12
 804c5f2:	ecbd 8b02 	vpop	{d8}
 804c5f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return 1;
 804c5f8:	2101      	movs	r1, #1
 804c5fa:	e7dc      	b.n	804c5b6 <RegionAU915ComputeRxWindowParameters+0x2e>
 804c5fc:	08051ce0 	.word	0x08051ce0
 804c600:	0003d090 	.word	0x0003d090
 804c604:	0007a120 	.word	0x0007a120
 804c608:	08051928 	.word	0x08051928

0804c60c <RegionAU915RxConfig>:

bool RegionAU915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 804c60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int8_t dr = rxConfig->Datarate;
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;

    if( Radio.GetStatus( ) != RF_IDLE )
 804c610:	4e26      	ldr	r6, [pc, #152]	; (804c6ac <RegionAU915RxConfig+0xa0>)
    int8_t dr = rxConfig->Datarate;
 804c612:	f990 8001 	ldrsb.w	r8, [r0, #1]
    if( Radio.GetStatus( ) != RF_IDLE )
 804c616:	68f3      	ldr	r3, [r6, #12]
    uint32_t frequency = rxConfig->Frequency;
 804c618:	6845      	ldr	r5, [r0, #4]
{
 804c61a:	b08d      	sub	sp, #52	; 0x34
 804c61c:	4604      	mov	r4, r0
 804c61e:	468b      	mov	fp, r1
    if( Radio.GetStatus( ) != RF_IDLE )
 804c620:	4798      	blx	r3
 804c622:	2800      	cmp	r0, #0
 804c624:	d140      	bne.n	804c6a8 <RegionAU915RxConfig+0x9c>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 804c626:	7ce3      	ldrb	r3, [r4, #19]
 804c628:	b933      	cbnz	r3, 804c638 <RegionAU915RxConfig+0x2c>
    {
        // Apply window 1 frequency
        frequency = AU915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * AU915_STEPWIDTH_RX1_CHANNEL;
 804c62a:	7825      	ldrb	r5, [r4, #0]
 804c62c:	4a20      	ldr	r2, [pc, #128]	; (804c6b0 <RegionAU915RxConfig+0xa4>)
 804c62e:	4b21      	ldr	r3, [pc, #132]	; (804c6b4 <RegionAU915RxConfig+0xa8>)
 804c630:	f005 0507 	and.w	r5, r5, #7
 804c634:	fb02 3505 	mla	r5, r2, r5, r3
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesAU915[dr];
 804c638:	f8df 9080 	ldr.w	r9, [pc, #128]	; 804c6bc <RegionAU915RxConfig+0xb0>

    Radio.SetChannel( frequency );
 804c63c:	6973      	ldr	r3, [r6, #20]
    phyDr = DataratesAU915[dr];
 804c63e:	eb09 0a08 	add.w	sl, r9, r8
    Radio.SetChannel( frequency );
 804c642:	4628      	mov	r0, r5
    phyDr = DataratesAU915[dr];
 804c644:	f99a 2078 	ldrsb.w	r2, [sl, #120]	; 0x78
 804c648:	920b      	str	r2, [sp, #44]	; 0x2c
    Radio.SetChannel( frequency );
 804c64a:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 804c64c:	7ca3      	ldrb	r3, [r4, #18]
 804c64e:	8927      	ldrh	r7, [r4, #8]
 804c650:	9309      	str	r3, [sp, #36]	; 0x24
 804c652:	2000      	movs	r0, #0
 804c654:	2301      	movs	r3, #1
 804c656:	9702      	str	r7, [sp, #8]
 804c658:	2708      	movs	r7, #8
 804c65a:	e9cd 0307 	strd	r0, r3, [sp, #28]
 804c65e:	e9cd 0700 	strd	r0, r7, [sp]
 804c662:	e9cd 0005 	strd	r0, r0, [sp, #20]
 804c666:	e9cd 0003 	strd	r0, r0, [sp, #12]
 804c66a:	78a1      	ldrb	r1, [r4, #2]
 804c66c:	6a37      	ldr	r7, [r6, #32]
 804c66e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 804c670:	4618      	mov	r0, r3
 804c672:	47b8      	blx	r7

    if( rxConfig->RepeaterSupport == true )
 804c674:	7c63      	ldrb	r3, [r4, #17]
 804c676:	b1a3      	cbz	r3, 804c6a2 <RegionAU915RxConfig+0x96>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterDwell0AU915[dr];
 804c678:	f89a 101c 	ldrb.w	r1, [sl, #28]
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateDwell0AU915[dr];
    }
    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
 804c67c:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 804c67e:	310d      	adds	r1, #13
 804c680:	b2c9      	uxtb	r1, r1
 804c682:	2001      	movs	r0, #1
 804c684:	4798      	blx	r3
    //TVL1( PRINTF( "RX on freq %d Hz at DR %d\n\r", frequency, dr );)
    PRINTF( "RX on freq %d Hz at DR %d band %d channel %d \n\r", frequency, dr, rxConfig->Bandwidth, rxConfig->Channel );
 804c686:	7822      	ldrb	r2, [r4, #0]
 804c688:	9200      	str	r2, [sp, #0]
 804c68a:	78a3      	ldrb	r3, [r4, #2]
 804c68c:	480a      	ldr	r0, [pc, #40]	; (804c6b8 <RegionAU915RxConfig+0xac>)
 804c68e:	4642      	mov	r2, r8
 804c690:	4629      	mov	r1, r5
 804c692:	f001 fb67 	bl	804dd64 <TraceSend>
    *datarate = (uint8_t) dr;
 804c696:	f88b 8000 	strb.w	r8, [fp]
    return true;
 804c69a:	2001      	movs	r0, #1
}
 804c69c:	b00d      	add	sp, #52	; 0x34
 804c69e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        maxPayload = MaxPayloadOfDatarateDwell0AU915[dr];
 804c6a2:	f819 1008 	ldrb.w	r1, [r9, r8]
 804c6a6:	e7e9      	b.n	804c67c <RegionAU915RxConfig+0x70>
        return false;
 804c6a8:	2000      	movs	r0, #0
 804c6aa:	e7f7      	b.n	804c69c <RegionAU915RxConfig+0x90>
 804c6ac:	08051928 	.word	0x08051928
 804c6b0:	000927c0 	.word	0x000927c0
 804c6b4:	370870a0 	.word	0x370870a0
 804c6b8:	08052063 	.word	0x08052063
 804c6bc:	08051ce0 	.word	0x08051ce0

0804c6c0 <RegionAU915TxConfig>:

bool RegionAU915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 804c6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804c6c4:	b08f      	sub	sp, #60	; 0x3c
 804c6c6:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
    int8_t phyDr = DataratesAU915[txConfig->Datarate];
 804c6ca:	4b35      	ldr	r3, [pc, #212]	; (804c7a0 <RegionAU915TxConfig+0xe0>)
 804c6cc:	f990 1001 	ldrsb.w	r1, [r0, #1]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 804c6d0:	4e34      	ldr	r6, [pc, #208]	; (804c7a4 <RegionAU915TxConfig+0xe4>)
    int8_t phyDr = DataratesAU915[txConfig->Datarate];
 804c6d2:	185a      	adds	r2, r3, r1
{
 804c6d4:	4604      	mov	r4, r0
    int8_t phyDr = DataratesAU915[txConfig->Datarate];
 804c6d6:	f992 7078 	ldrsb.w	r7, [r2, #120]	; 0x78
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 804c6da:	7802      	ldrb	r2, [r0, #0]
 804c6dc:	200c      	movs	r0, #12
 804c6de:	fb00 6202 	mla	r2, r0, r2, r6
    switch( BandwidthsAU915[drIndex] )
 804c6e2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 804c6e6:	7a52      	ldrb	r2, [r2, #9]
    switch( BandwidthsAU915[drIndex] )
 804c6e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 804c6ea:	eb06 1202 	add.w	r2, r6, r2, lsl #4
    txPowerResult =  MAX( txPower, maxBandTxPower );
 804c6ee:	f992 9362 	ldrsb.w	r9, [r2, #866]	; 0x362
 804c6f2:	f994 2002 	ldrsb.w	r2, [r4, #2]
 804c6f6:	4591      	cmp	r9, r2
 804c6f8:	bfb8      	it	lt
 804c6fa:	4691      	movlt	r9, r2
    switch( BandwidthsAU915[drIndex] )
 804c6fc:	4a2a      	ldr	r2, [pc, #168]	; (804c7a8 <RegionAU915TxConfig+0xe8>)
 804c6fe:	4293      	cmp	r3, r2
 804c700:	d04b      	beq.n	804c79a <RegionAU915TxConfig+0xda>
            return 0;
 804c702:	4a2a      	ldr	r2, [pc, #168]	; (804c7ac <RegionAU915TxConfig+0xec>)
 804c704:	4293      	cmp	r3, r2
 804c706:	bf0c      	ite	eq
 804c708:	f04f 0802 	moveq.w	r8, #2
 804c70c:	f04f 0800 	movne.w	r8, #0
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 804c710:	edd4 0a02 	vldr	s1, [r4, #8]
 804c714:	ed94 0a01 	vldr	s0, [r4, #4]
    //PRINTF( "TX power %d, txPowerLimited %d, txConfig->MaxEirp %d, txConfig->AntennaGain %d \n\r", phyTxPower, txPowerLimited, (int8_t)(txConfig->MaxEirp*100), (int8_t)(txConfig->AntennaGain*100));
    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 804c718:	f8df a098 	ldr.w	sl, [pc, #152]	; 804c7b4 <RegionAU915TxConfig+0xf4>
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 804c71c:	4648      	mov	r0, r9
 804c71e:	f000 fc33 	bl	804cf88 <RegionCommonComputeTxPower>
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 804c722:	7822      	ldrb	r2, [r4, #0]
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 804c724:	900d      	str	r0, [sp, #52]	; 0x34
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 804c726:	f04f 0b0c 	mov.w	fp, #12
 804c72a:	fb0b f202 	mul.w	r2, fp, r2
 804c72e:	f8da 3014 	ldr.w	r3, [sl, #20]
 804c732:	58b0      	ldr	r0, [r6, r2]
 804c734:	4798      	blx	r3

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 804c736:	2200      	movs	r2, #0
 804c738:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 804c73c:	2501      	movs	r5, #1
 804c73e:	e9cd 2307 	strd	r2, r3, [sp, #28]
 804c742:	2308      	movs	r3, #8
 804c744:	e9cd 2205 	strd	r2, r2, [sp, #20]
 804c748:	e9cd 2503 	strd	r2, r5, [sp, #12]
 804c74c:	e9cd 5301 	strd	r5, r3, [sp, #4]
 804c750:	9700      	str	r7, [sp, #0]
 804c752:	4643      	mov	r3, r8
 804c754:	990d      	ldr	r1, [sp, #52]	; 0x34
 804c756:	f8da 7024 	ldr.w	r7, [sl, #36]	; 0x24
 804c75a:	4628      	mov	r0, r5
 804c75c:	47b8      	blx	r7
    PRINTF( "TX on freq %d Hz at DR %d BW %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate, bandwidth );
 804c75e:	7823      	ldrb	r3, [r4, #0]
 804c760:	f994 2001 	ldrsb.w	r2, [r4, #1]
 804c764:	4812      	ldr	r0, [pc, #72]	; (804c7b0 <RegionAU915TxConfig+0xf0>)
 804c766:	fb0b fb03 	mul.w	fp, fp, r3
 804c76a:	4643      	mov	r3, r8
 804c76c:	f856 100b 	ldr.w	r1, [r6, fp]
 804c770:	f001 faf8 	bl	804dd64 <TraceSend>
    //TVL1( PRINTF( "TX on freq %d Hz at DR %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate );)

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 804c774:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
 804c778:	7b21      	ldrb	r1, [r4, #12]
 804c77a:	4628      	mov	r0, r5
 804c77c:	4798      	blx	r3

    *txTimeOnAir = Radio.TimeOnAir( MODEM_LORA, txConfig->PktLen );
 804c77e:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
 804c782:	7b21      	ldrb	r1, [r4, #12]
 804c784:	4628      	mov	r0, r5
 804c786:	4798      	blx	r3
 804c788:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 804c78a:	6018      	str	r0, [r3, #0]
    *txPower = txPowerLimited;
 804c78c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

    return true;
}
 804c78e:	4628      	mov	r0, r5
    *txPower = txPowerLimited;
 804c790:	f883 9000 	strb.w	r9, [r3]
}
 804c794:	b00f      	add	sp, #60	; 0x3c
 804c796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return 1;
 804c79a:	f04f 0801 	mov.w	r8, #1
 804c79e:	e7b7      	b.n	804c710 <RegionAU915TxConfig+0x50>
 804c7a0:	08051ce0 	.word	0x08051ce0
 804c7a4:	2000afa0 	.word	0x2000afa0
 804c7a8:	0003d090 	.word	0x0003d090
 804c7ac:	0007a120 	.word	0x0007a120
 804c7b0:	08052093 	.word	0x08052093
 804c7b4:	08051928 	.word	0x08051928

0804c7b8 <RegionAU915LinkAdrReq>:

uint8_t RegionAU915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 804c7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804c7bc:	b093      	sub	sp, #76	; 0x4c
    uint8_t status = 0x07;
    RegionCommonLinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 804c7be:	ae07      	add	r6, sp, #28
 804c7c0:	2400      	movs	r4, #0
{
 804c7c2:	4605      	mov	r5, r0
 804c7c4:	4689      	mov	r9, r1
 804c7c6:	4690      	mov	r8, r2
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, NvmCtx.ChannelsMask, 6 );
 804c7c8:	497f      	ldr	r1, [pc, #508]	; (804c9c8 <RegionAU915LinkAdrReq+0x210>)
{
 804c7ca:	9301      	str	r3, [sp, #4]
    RegionCommonChanMaskCopy( channelsMask, NvmCtx.ChannelsMask, 6 );
 804c7cc:	2206      	movs	r2, #6
 804c7ce:	4630      	mov	r0, r6
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 804c7d0:	9407      	str	r4, [sp, #28]
 804c7d2:	e9c6 4401 	strd	r4, r4, [r6, #4]
    RegionCommonChanMaskCopy( channelsMask, NvmCtx.ChannelsMask, 6 );
 804c7d6:	f000 fab4 	bl	804cd42 <RegionCommonChanMaskCopy>
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 804c7da:	46a2      	mov	sl, r4
    while( bytesProcessed < linkAdrReq->PayloadSize )
 804c7dc:	7a2b      	ldrb	r3, [r5, #8]
 804c7de:	42a3      	cmp	r3, r4
 804c7e0:	d905      	bls.n	804c7ee <RegionAU915LinkAdrReq+0x36>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 804c7e2:	6868      	ldr	r0, [r5, #4]
 804c7e4:	a905      	add	r1, sp, #20
 804c7e6:	4420      	add	r0, r4
 804c7e8:	f000 faf5 	bl	804cdd6 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 804c7ec:	b968      	cbnz	r0, 804c80a <RegionAU915LinkAdrReq+0x52>
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_6 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 804c7ee:	f99d 3015 	ldrsb.w	r3, [sp, #21]
 804c7f2:	2b05      	cmp	r3, #5
 804c7f4:	dc69      	bgt.n	804c8ca <RegionAU915LinkAdrReq+0x112>
 804c7f6:	2204      	movs	r2, #4
 804c7f8:	2100      	movs	r1, #0
 804c7fa:	4630      	mov	r0, r6
 804c7fc:	f000 fa81 	bl	804cd02 <RegionCommonCountChannels>
 804c800:	2801      	cmp	r0, #1
 804c802:	d862      	bhi.n	804c8ca <RegionAU915LinkAdrReq+0x112>
    {
        status &= 0xFE; // Channel mask KO
 804c804:	f04f 0a06 	mov.w	sl, #6
 804c808:	e061      	b.n	804c8ce <RegionAU915LinkAdrReq+0x116>
        if( linkAdrParams.ChMaskCtrl == 6 )
 804c80a:	f89d 2017 	ldrb.w	r2, [sp, #23]
 804c80e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
        bytesProcessed += nextIndex;
 804c812:	4404      	add	r4, r0
        if( linkAdrParams.ChMaskCtrl == 6 )
 804c814:	2a06      	cmp	r2, #6
        bytesProcessed += nextIndex;
 804c816:	b2e4      	uxtb	r4, r4
        if( linkAdrParams.ChMaskCtrl == 6 )
 804c818:	d107      	bne.n	804c82a <RegionAU915LinkAdrReq+0x72>
            channelsMask[0] = 0xFFFF;
 804c81a:	f04f 32ff 	mov.w	r2, #4294967295
            channelsMask[1] = 0xFFFF;
 804c81e:	e9cd 2207 	strd	r2, r2, [sp, #28]
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 804c822:	b2db      	uxtb	r3, r3
 804c824:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 804c828:	e7d8      	b.n	804c7dc <RegionAU915LinkAdrReq+0x24>
        else if( linkAdrParams.ChMaskCtrl == 7 )
 804c82a:	2a07      	cmp	r2, #7
 804c82c:	d102      	bne.n	804c834 <RegionAU915LinkAdrReq+0x7c>
            channelsMask[1] = 0x0000;
 804c82e:	e9cd aa07 	strd	sl, sl, [sp, #28]
 804c832:	e7f6      	b.n	804c822 <RegionAU915LinkAdrReq+0x6a>
        else if( linkAdrParams.ChMaskCtrl == 5 )
 804c834:	2a05      	cmp	r2, #5
 804c836:	d142      	bne.n	804c8be <RegionAU915LinkAdrReq+0x106>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 804c838:	b2db      	uxtb	r3, r3
 804c83a:	2000      	movs	r0, #0
 804c83c:	9300      	str	r3, [sp, #0]
            uint8_t cntChannelMask = 0;
 804c83e:	4602      	mov	r2, r0
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 804c840:	2301      	movs	r3, #1
 804c842:	fa03 fe00 	lsl.w	lr, r3, r0
 804c846:	ea00 0b03 	and.w	fp, r0, r3
 804c84a:	9f00      	ldr	r7, [sp, #0]
 804c84c:	ab12      	add	r3, sp, #72	; 0x48
 804c84e:	eb03 0c42 	add.w	ip, r3, r2, lsl #1
 804c852:	ea17 0f0e 	tst.w	r7, lr
 804c856:	fa0f f18e 	sxth.w	r1, lr
 804c85a:	f83c 3c2c 	ldrh.w	r3, [ip, #-44]
 804c85e:	d01b      	beq.n	804c898 <RegionAU915LinkAdrReq+0xe0>
                    if( ( i % 2 ) == 0 )
 804c860:	f1bb 0f00 	cmp.w	fp, #0
 804c864:	d10c      	bne.n	804c880 <RegionAU915LinkAdrReq+0xc8>
                        channelsMask[cntChannelMask] |= 0x00FF;
 804c866:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 804c86a:	f82c 3c2c 	strh.w	r3, [ip, #-44]
                        channelsMask[4] |= ( bitMask << i );
 804c86e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 804c872:	4319      	orrs	r1, r3
                        channelsMask[4] &= ~( bitMask << i );
 804c874:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 804c878:	3001      	adds	r0, #1
            for( uint8_t i = 0; i <= 7; i++ )
 804c87a:	2808      	cmp	r0, #8
 804c87c:	d1e0      	bne.n	804c840 <RegionAU915LinkAdrReq+0x88>
 804c87e:	e7ad      	b.n	804c7dc <RegionAU915LinkAdrReq+0x24>
                        channelsMask[cntChannelMask] |= 0xFF00;
 804c880:	f063 03ff 	orn	r3, r3, #255	; 0xff
 804c884:	f82c 3c2c 	strh.w	r3, [ip, #-44]
                        channelsMask[4] |= ( bitMask << i );
 804c888:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 804c88c:	4319      	orrs	r1, r3
                        cntChannelMask++;
 804c88e:	3201      	adds	r2, #1
                        channelsMask[4] &= ~( bitMask << i );
 804c890:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
                        cntChannelMask++;
 804c894:	b2d2      	uxtb	r2, r2
 804c896:	e7ef      	b.n	804c878 <RegionAU915LinkAdrReq+0xc0>
 804c898:	43c9      	mvns	r1, r1
                    if( ( i % 2 ) == 0 )
 804c89a:	f1bb 0f00 	cmp.w	fp, #0
 804c89e:	d107      	bne.n	804c8b0 <RegionAU915LinkAdrReq+0xf8>
                        channelsMask[cntChannelMask] &= 0xFF00;
 804c8a0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 804c8a4:	f82c 3c2c 	strh.w	r3, [ip, #-44]
                        channelsMask[4] &= ~( bitMask << i );
 804c8a8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 804c8ac:	4019      	ands	r1, r3
 804c8ae:	e7e1      	b.n	804c874 <RegionAU915LinkAdrReq+0xbc>
                        channelsMask[cntChannelMask] &= 0x00FF;
 804c8b0:	b2db      	uxtb	r3, r3
 804c8b2:	f82c 3c2c 	strh.w	r3, [ip, #-44]
                        channelsMask[4] &= ~( bitMask << i );
 804c8b6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 804c8ba:	4019      	ands	r1, r3
 804c8bc:	e7e7      	b.n	804c88e <RegionAU915LinkAdrReq+0xd6>
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 804c8be:	a912      	add	r1, sp, #72	; 0x48
 804c8c0:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 804c8c4:	f822 3c2c 	strh.w	r3, [r2, #-44]
 804c8c8:	e788      	b.n	804c7dc <RegionAU915LinkAdrReq+0x24>
    uint8_t bytesProcessed = 0;
 804c8ca:	f04f 0a07 	mov.w	sl, #7
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 804c8ce:	2302      	movs	r3, #2
 804c8d0:	f88d 300c 	strb.w	r3, [sp, #12]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
    phyParam = RegionAU915GetPhyParam( &getPhy );
 804c8d4:	a803      	add	r0, sp, #12
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 804c8d6:	7a6b      	ldrb	r3, [r5, #9]
 804c8d8:	f88d 300e 	strb.w	r3, [sp, #14]
    phyParam = RegionAU915GetPhyParam( &getPhy );
 804c8dc:	f7ff fc98 	bl	804c210 <RegionAU915GetPhyParam>

    linkAdrVerifyParams.Status = status;
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 804c8e0:	7aab      	ldrb	r3, [r5, #10]
 804c8e2:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 804c8e6:	f89d 3015 	ldrb.w	r3, [sp, #21]
 804c8ea:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 804c8ee:	f89d 3016 	ldrb.w	r3, [sp, #22]
 804c8f2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 804c8f6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 804c8fa:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 804c8fe:	7aeb      	ldrb	r3, [r5, #11]
 804c900:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 804c904:	7b2b      	ldrb	r3, [r5, #12]
 804c906:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 804c90a:	7b6b      	ldrb	r3, [r5, #13]
 804c90c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    linkAdrVerifyParams.NbChannels = AU915_MAX_NB_CHANNELS;
 804c910:	2348      	movs	r3, #72	; 0x48
 804c912:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    linkAdrVerifyParams.ChannelsMask = channelsMask;
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
    linkAdrVerifyParams.MaxDatarate = AU915_TX_MAX_DATARATE;
 804c916:	230d      	movs	r3, #13
 804c918:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
    linkAdrVerifyParams.MinTxPower = AU915_MIN_TX_POWER;
 804c91c:	230e      	movs	r3, #14
 804c91e:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    linkAdrVerifyParams.MaxTxPower = AU915_MAX_TX_POWER;
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 804c922:	682b      	ldr	r3, [r5, #0]
    linkAdrVerifyParams.Status = status;
 804c924:	f88d a02c 	strb.w	sl, [sp, #44]	; 0x2c
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 804c928:	f88d 003c 	strb.w	r0, [sp, #60]	; 0x3c
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 804c92c:	930a      	str	r3, [sp, #40]	; 0x28
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 804c92e:	f8df a09c 	ldr.w	sl, [pc, #156]	; 804c9cc <RegionAU915LinkAdrReq+0x214>
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 804c932:	960e      	str	r6, [sp, #56]	; 0x38

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 804c934:	ab05      	add	r3, sp, #20
 804c936:	f10d 0216 	add.w	r2, sp, #22
 804c93a:	f10d 0115 	add.w	r1, sp, #21
 804c93e:	a80a      	add	r0, sp, #40	; 0x28
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 804c940:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 804c944:	f000 fa61 	bl	804ce0a <RegionCommonLinkAdrReqVerifyParams>

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 804c948:	2807      	cmp	r0, #7
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 804c94a:	4605      	mov	r5, r0
    if( status == 0x07 )
 804c94c:	d129      	bne.n	804c9a2 <RegionAU915LinkAdrReq+0x1ea>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, channelsMask, 6 );
 804c94e:	2206      	movs	r2, #6
 804c950:	4631      	mov	r1, r6
 804c952:	f50a 705c 	add.w	r0, sl, #880	; 0x370
 804c956:	f000 f9f4 	bl	804cd42 <RegionCommonChanMaskCopy>

        NvmCtx.ChannelsMaskRemaining[0] &= NvmCtx.ChannelsMask[0];
 804c95a:	f8ba 337c 	ldrh.w	r3, [sl, #892]	; 0x37c
 804c95e:	f8ba 2370 	ldrh.w	r2, [sl, #880]	; 0x370
 804c962:	4013      	ands	r3, r2
 804c964:	f8aa 337c 	strh.w	r3, [sl, #892]	; 0x37c
        NvmCtx.ChannelsMaskRemaining[1] &= NvmCtx.ChannelsMask[1];
 804c968:	f8ba 2372 	ldrh.w	r2, [sl, #882]	; 0x372
 804c96c:	f8ba 337e 	ldrh.w	r3, [sl, #894]	; 0x37e
 804c970:	4013      	ands	r3, r2
 804c972:	f8aa 337e 	strh.w	r3, [sl, #894]	; 0x37e
        NvmCtx.ChannelsMaskRemaining[2] &= NvmCtx.ChannelsMask[2];
 804c976:	f8ba 2374 	ldrh.w	r2, [sl, #884]	; 0x374
 804c97a:	f8ba 3380 	ldrh.w	r3, [sl, #896]	; 0x380
 804c97e:	4013      	ands	r3, r2
 804c980:	f8aa 3380 	strh.w	r3, [sl, #896]	; 0x380
        NvmCtx.ChannelsMaskRemaining[3] &= NvmCtx.ChannelsMask[3];
 804c984:	f8ba 2376 	ldrh.w	r2, [sl, #886]	; 0x376
 804c988:	f8ba 3382 	ldrh.w	r3, [sl, #898]	; 0x382
 804c98c:	4013      	ands	r3, r2
 804c98e:	f8aa 3382 	strh.w	r3, [sl, #898]	; 0x382
        NvmCtx.ChannelsMaskRemaining[4] = NvmCtx.ChannelsMask[4];
 804c992:	f8ba 3378 	ldrh.w	r3, [sl, #888]	; 0x378
 804c996:	f8aa 3384 	strh.w	r3, [sl, #900]	; 0x384
        NvmCtx.ChannelsMaskRemaining[5] = NvmCtx.ChannelsMask[5];
 804c99a:	f8ba 337a 	ldrh.w	r3, [sl, #890]	; 0x37a
 804c99e:	f8aa 3386 	strh.w	r3, [sl, #902]	; 0x386
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 804c9a2:	f89d 3015 	ldrb.w	r3, [sp, #21]
 804c9a6:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
    *nbRepOut = linkAdrParams.NbRep;
 804c9aa:	9a01      	ldr	r2, [sp, #4]
    *txPowOut = linkAdrParams.TxPower;
 804c9ac:	f89d 3016 	ldrb.w	r3, [sp, #22]
 804c9b0:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 804c9b4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 804c9b8:	7013      	strb	r3, [r2, #0]
    *nbBytesParsed = bytesProcessed;
 804c9ba:	9b1c      	ldr	r3, [sp, #112]	; 0x70

    return status;
}
 804c9bc:	4628      	mov	r0, r5
    *nbBytesParsed = bytesProcessed;
 804c9be:	701c      	strb	r4, [r3, #0]
}
 804c9c0:	b013      	add	sp, #76	; 0x4c
 804c9c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804c9c6:	bf00      	nop
 804c9c8:	2000b310 	.word	0x2000b310
 804c9cc:	2000afa0 	.word	0x2000afa0

0804c9d0 <RegionAU915RxParamSetupReq>:

uint8_t RegionAU915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 804c9d0:	b538      	push	{r3, r4, r5, lr}
 804c9d2:	4605      	mov	r5, r0
    uint8_t status = 0x07;

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 804c9d4:	6840      	ldr	r0, [r0, #4]
 804c9d6:	f7ff fbfd 	bl	804c1d4 <VerifyRfFreq>
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE ) == false )
 804c9da:	220d      	movs	r2, #13
        status &= 0xFE; // Channel frequency KO
 804c9dc:	2800      	cmp	r0, #0
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE ) == false )
 804c9de:	f04f 0108 	mov.w	r1, #8
 804c9e2:	f995 0000 	ldrsb.w	r0, [r5]
        status &= 0xFE; // Channel frequency KO
 804c9e6:	bf14      	ite	ne
 804c9e8:	2407      	movne	r4, #7
 804c9ea:	2406      	moveq	r4, #6
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE ) == false )
 804c9ec:	f000 f969 	bl	804ccc2 <RegionCommonValueInRange>
 804c9f0:	b908      	cbnz	r0, 804c9f6 <RegionAU915RxParamSetupReq+0x26>
    {
        status &= 0xFD; // Datarate KO
 804c9f2:	f004 0405 	and.w	r4, r4, #5
    }
    if( ( rxParamSetupReq->Datarate == DR_7 ) ||
 804c9f6:	f995 3000 	ldrsb.w	r3, [r5]
 804c9fa:	2b07      	cmp	r3, #7
 804c9fc:	d001      	beq.n	804ca02 <RegionAU915RxParamSetupReq+0x32>
 804c9fe:	2b0d      	cmp	r3, #13
 804ca00:	dd01      	ble.n	804ca06 <RegionAU915RxParamSetupReq+0x36>
        ( rxParamSetupReq->Datarate > DR_13 ) )
    {
        status &= 0xFD; // Datarate KO
 804ca02:	f004 04fd 	and.w	r4, r4, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, AU915_MIN_RX1_DR_OFFSET, AU915_MAX_RX1_DR_OFFSET ) == false )
 804ca06:	2206      	movs	r2, #6
 804ca08:	2100      	movs	r1, #0
 804ca0a:	f995 0001 	ldrsb.w	r0, [r5, #1]
 804ca0e:	f000 f958 	bl	804ccc2 <RegionCommonValueInRange>
 804ca12:	b908      	cbnz	r0, 804ca18 <RegionAU915RxParamSetupReq+0x48>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 804ca14:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
    }

    return status;
}
 804ca18:	4620      	mov	r0, r4
 804ca1a:	bd38      	pop	{r3, r4, r5, pc}

0804ca1c <RegionAU915NewChannelReq>:

uint8_t RegionAU915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Datarate and frequency KO
    return 0;
}
 804ca1c:	2000      	movs	r0, #0
 804ca1e:	4770      	bx	lr

0804ca20 <RegionAU915TxParamSetupReq>:

int8_t RegionAU915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Accept the request
    return 0;
}
 804ca20:	2000      	movs	r0, #0
 804ca22:	4770      	bx	lr

0804ca24 <RegionAU915DlChannelReq>:
 804ca24:	2000      	movs	r0, #0
 804ca26:	4770      	bx	lr

0804ca28 <RegionAU915AlternateDr>:
int8_t RegionAU915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
    static int8_t trialsCount = 0;

    // Re-enable 500 kHz default channels
    NvmCtx.ChannelsMask[4] = CHANNELS_MASK_500KHZ_MASK;
 804ca28:	4a07      	ldr	r2, [pc, #28]	; (804ca48 <RegionAU915AlternateDr+0x20>)
 804ca2a:	23ff      	movs	r3, #255	; 0xff
 804ca2c:	f8a2 3378 	strh.w	r3, [r2, #888]	; 0x378

    if( ( trialsCount & 0x01 ) == 0x01 )
 804ca30:	f892 3394 	ldrb.w	r3, [r2, #916]	; 0x394
 804ca34:	f013 0f01 	tst.w	r3, #1
    }
    else
    {
        currentDr = DR_2;
    }
    trialsCount++;
 804ca38:	f103 0301 	add.w	r3, r3, #1
 804ca3c:	f882 3394 	strb.w	r3, [r2, #916]	; 0x394
    return currentDr;
}
 804ca40:	bf14      	ite	ne
 804ca42:	2006      	movne	r0, #6
 804ca44:	2002      	moveq	r0, #2
 804ca46:	4770      	bx	lr
 804ca48:	2000afa0 	.word	0x2000afa0

0804ca4c <RegionAU915CalcBackOff>:

void RegionAU915CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
 804ca4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    RegionCommonCalcBackOffParams_t calcBackOffParams;

    calcBackOffParams.Channels = NvmCtx.Channels;
 804ca4e:	4b0d      	ldr	r3, [pc, #52]	; (804ca84 <RegionAU915CalcBackOff+0x38>)
 804ca50:	9301      	str	r3, [sp, #4]
    calcBackOffParams.Bands = NvmCtx.Bands;
 804ca52:	f503 7358 	add.w	r3, r3, #864	; 0x360
 804ca56:	9302      	str	r3, [sp, #8]
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 804ca58:	7843      	ldrb	r3, [r0, #1]
 804ca5a:	f88d 300c 	strb.w	r3, [sp, #12]
    calcBackOffParams.Joined = calcBackOff->Joined;
 804ca5e:	7803      	ldrb	r3, [r0, #0]
 804ca60:	f88d 300d 	strb.w	r3, [sp, #13]
    calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 804ca64:	7883      	ldrb	r3, [r0, #2]
 804ca66:	f88d 300e 	strb.w	r3, [sp, #14]
    calcBackOffParams.Channel = calcBackOff->Channel;
 804ca6a:	78c3      	ldrb	r3, [r0, #3]
 804ca6c:	f88d 300f 	strb.w	r3, [sp, #15]
    calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 804ca70:	6843      	ldr	r3, [r0, #4]
 804ca72:	9304      	str	r3, [sp, #16]
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 804ca74:	6883      	ldr	r3, [r0, #8]
 804ca76:	9305      	str	r3, [sp, #20]

    RegionCommonCalcBackOff( &calcBackOffParams );
 804ca78:	a801      	add	r0, sp, #4
 804ca7a:	f000 fa9d 	bl	804cfb8 <RegionCommonCalcBackOff>
}
 804ca7e:	b007      	add	sp, #28
 804ca80:	f85d fb04 	ldr.w	pc, [sp], #4
 804ca84:	2000afa0 	.word	0x2000afa0

0804ca88 <RegionAU915NextChannel>:

LoRaMacStatus_t RegionAU915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 804ca88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804ca8c:	b099      	sub	sp, #100	; 0x64
 804ca8e:	4605      	mov	r5, r0
 804ca90:	9104      	str	r1, [sp, #16]
 804ca92:	4693      	mov	fp, r2
    uint8_t nbEnabledChannels = 0;
    uint8_t delayTx = 0;
    uint8_t enabledChannels[AU915_MAX_NB_CHANNELS] = { 0 };
 804ca94:	2100      	movs	r1, #0
 804ca96:	2248      	movs	r2, #72	; 0x48
 804ca98:	a806      	add	r0, sp, #24
{
 804ca9a:	461e      	mov	r6, r3
    uint8_t enabledChannels[AU915_MAX_NB_CHANNELS] = { 0 };
 804ca9c:	f003 fb56 	bl	805014c <memset>
    TimerTime_t nextTxDelay = 0;

    // Count 125kHz channels
    if( RegionCommonCountChannels( NvmCtx.ChannelsMaskRemaining, 0, 4 ) == 0 )
 804caa0:	2204      	movs	r2, #4
 804caa2:	2100      	movs	r1, #0
 804caa4:	4846      	ldr	r0, [pc, #280]	; (804cbc0 <RegionAU915NextChannel+0x138>)
 804caa6:	f8df 9120 	ldr.w	r9, [pc, #288]	; 804cbc8 <RegionAU915NextChannel+0x140>
 804caaa:	f000 f92a 	bl	804cd02 <RegionCommonCountChannels>
 804caae:	b930      	cbnz	r0, 804cabe <RegionAU915NextChannel+0x36>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( NvmCtx.ChannelsMaskRemaining, NvmCtx.ChannelsMask, 4  );
 804cab0:	f509 715c 	add.w	r1, r9, #880	; 0x370
 804cab4:	2204      	movs	r2, #4
 804cab6:	f101 000c 	add.w	r0, r1, #12
 804caba:	f000 f942 	bl	804cd42 <RegionCommonChanMaskCopy>
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_6 )
 804cabe:	f995 3008 	ldrsb.w	r3, [r5, #8]
 804cac2:	2b05      	cmp	r3, #5
 804cac4:	dd06      	ble.n	804cad4 <RegionAU915NextChannel+0x4c>
    {
        if( ( NvmCtx.ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 804cac6:	f899 3384 	ldrb.w	r3, [r9, #900]	; 0x384
 804caca:	b91b      	cbnz	r3, 804cad4 <RegionAU915NextChannel+0x4c>
        {
            NvmCtx.ChannelsMaskRemaining[4] = NvmCtx.ChannelsMask[4];
 804cacc:	f8b9 3378 	ldrh.w	r3, [r9, #888]	; 0x378
 804cad0:	f8a9 3384 	strh.w	r3, [r9, #900]	; 0x384
        }
    }

    TimerTime_t elapsed = TimerGetElapsedTime( nextChanParams->LastAggrTx );
 804cad4:	6868      	ldr	r0, [r5, #4]
 804cad6:	f001 f8fb 	bl	804dcd0 <TimerGetElapsedTime>
    if( ( nextChanParams->LastAggrTx == 0 ) || ( nextChanParams->AggrTimeOff <= elapsed ) )
 804cada:	686b      	ldr	r3, [r5, #4]
 804cadc:	b113      	cbz	r3, 804cae4 <RegionAU915NextChannel+0x5c>
 804cade:	682b      	ldr	r3, [r5, #0]
 804cae0:	4283      	cmp	r3, r0
 804cae2:	d860      	bhi.n	804cba6 <RegionAU915NextChannel+0x11e>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 804cae4:	2400      	movs	r4, #0

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, AU915_MAX_NB_BANDS );
 804cae6:	2301      	movs	r3, #1
 804cae8:	7aa9      	ldrb	r1, [r5, #10]
 804caea:	7a68      	ldrb	r0, [r5, #9]
        *aggregatedTimeOff = 0;
 804caec:	6034      	str	r4, [r6, #0]
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, AU915_MAX_NB_BANDS );
 804caee:	4a35      	ldr	r2, [pc, #212]	; (804cbc4 <RegionAU915NextChannel+0x13c>)
 804caf0:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 804cbc0 <RegionAU915NextChannel+0x138>
 804caf4:	f000 f939 	bl	804cd6a <RegionCommonUpdateBandTimeOff>

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Datarate,
 804caf8:	f995 3008 	ldrsb.w	r3, [r5, #8]
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, AU915_MAX_NB_BANDS );
 804cafc:	9001      	str	r0, [sp, #4]
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Datarate,
 804cafe:	9302      	str	r3, [sp, #8]
 804cb00:	f5aa 785f 	sub.w	r8, sl, #892	; 0x37c
    uint8_t delayTransmission = 0;
 804cb04:	4627      	mov	r7, r4
    uint8_t nbEnabledChannels = 0;
 804cb06:	4625      	mov	r5, r4
 804cb08:	b2e3      	uxtb	r3, r4
 804cb0a:	9303      	str	r3, [sp, #12]
{
 804cb0c:	2600      	movs	r6, #0
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
 804cb0e:	f8ba 3000 	ldrh.w	r3, [sl]
 804cb12:	4133      	asrs	r3, r6
 804cb14:	07db      	lsls	r3, r3, #31
 804cb16:	d51e      	bpl.n	804cb56 <RegionAU915NextChannel+0xce>
 804cb18:	230c      	movs	r3, #12
 804cb1a:	19a2      	adds	r2, r4, r6
 804cb1c:	fb03 9202 	mla	r2, r3, r2, r9
 804cb20:	4373      	muls	r3, r6
                if( channels[i + j].Frequency == 0 )
 804cb22:	9305      	str	r3, [sp, #20]
 804cb24:	f858 1003 	ldr.w	r1, [r8, r3]
 804cb28:	b1a9      	cbz	r1, 804cb56 <RegionAU915NextChannel+0xce>
                                              channels[i + j].DrRange.Fields.Max ) == false )
 804cb2a:	7a11      	ldrb	r1, [r2, #8]
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 804cb2c:	9802      	ldr	r0, [sp, #8]
                                              channels[i + j].DrRange.Fields.Max ) == false )
 804cb2e:	f341 1203 	sbfx	r2, r1, #4, #4
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 804cb32:	f341 0103 	sbfx	r1, r1, #0, #4
 804cb36:	b252      	sxtb	r2, r2
 804cb38:	b249      	sxtb	r1, r1
 804cb3a:	f000 f8c2 	bl	804ccc2 <RegionCommonValueInRange>
 804cb3e:	b150      	cbz	r0, 804cb56 <RegionAU915NextChannel+0xce>
                if( bands[channels[i + j].Band].TimeOff > 0 )
 804cb40:	9b05      	ldr	r3, [sp, #20]
 804cb42:	4a21      	ldr	r2, [pc, #132]	; (804cbc8 <RegionAU915NextChannel+0x140>)
 804cb44:	4443      	add	r3, r8
 804cb46:	7a5b      	ldrb	r3, [r3, #9]
 804cb48:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 804cb4c:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 804cb50:	b303      	cbz	r3, 804cb94 <RegionAU915NextChannel+0x10c>
                    delayTransmission++;
 804cb52:	3701      	adds	r7, #1
 804cb54:	b2ff      	uxtb	r7, r7
 804cb56:	3601      	adds	r6, #1
        for( uint8_t j = 0; j < 16; j++ )
 804cb58:	2e10      	cmp	r6, #16
 804cb5a:	d1d8      	bne.n	804cb0e <RegionAU915NextChannel+0x86>
 804cb5c:	3410      	adds	r4, #16
    for( uint8_t i = 0, k = 0; i < AU915_MAX_NB_CHANNELS; i += 16, k++ )
 804cb5e:	2c50      	cmp	r4, #80	; 0x50
 804cb60:	f10a 0a02 	add.w	sl, sl, #2
 804cb64:	f108 08c0 	add.w	r8, r8, #192	; 0xc0
 804cb68:	d1ce      	bne.n	804cb08 <RegionAU915NextChannel+0x80>
    {
        delayTx++;
        nextTxDelay = nextChanParams->AggrTimeOff - elapsed;
    }

    if( nbEnabledChannels > 0 )
 804cb6a:	b31d      	cbz	r5, 804cbb4 <RegionAU915NextChannel+0x12c>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 804cb6c:	1e69      	subs	r1, r5, #1
 804cb6e:	2000      	movs	r0, #0
 804cb70:	f001 f950 	bl	804de14 <randr>
 804cb74:	ab18      	add	r3, sp, #96	; 0x60
 804cb76:	4418      	add	r0, r3
 804cb78:	9b04      	ldr	r3, [sp, #16]
 804cb7a:	f810 1c48 	ldrb.w	r1, [r0, #-72]
 804cb7e:	7019      	strb	r1, [r3, #0]
        // Disable the channel in the mask
        RegionCommonChanDisable( NvmCtx.ChannelsMaskRemaining, *channel, AU915_MAX_NB_CHANNELS - 8 );
 804cb80:	2240      	movs	r2, #64	; 0x40
 804cb82:	480f      	ldr	r0, [pc, #60]	; (804cbc0 <RegionAU915NextChannel+0x138>)
 804cb84:	f000 f8a6 	bl	804ccd4 <RegionCommonChanDisable>

        *time = 0;
 804cb88:	2000      	movs	r0, #0
 804cb8a:	f8cb 0000 	str.w	r0, [fp]
        }
        // Datarate not supported by any channel
        *time = 0;
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 804cb8e:	b019      	add	sp, #100	; 0x64
 804cb90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                enabledChannels[nbEnabledChannels++] = i + j;
 804cb94:	aa18      	add	r2, sp, #96	; 0x60
 804cb96:	1c6b      	adds	r3, r5, #1
 804cb98:	4415      	add	r5, r2
 804cb9a:	9a03      	ldr	r2, [sp, #12]
 804cb9c:	4432      	add	r2, r6
 804cb9e:	f805 2c48 	strb.w	r2, [r5, #-72]
 804cba2:	b2dd      	uxtb	r5, r3
 804cba4:	e7d7      	b.n	804cb56 <RegionAU915NextChannel+0xce>
        nextTxDelay = nextChanParams->AggrTimeOff - elapsed;
 804cba6:	1a1b      	subs	r3, r3, r0
 804cba8:	9301      	str	r3, [sp, #4]
            *time = nextTxDelay;
 804cbaa:	9b01      	ldr	r3, [sp, #4]
 804cbac:	f8cb 3000 	str.w	r3, [fp]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 804cbb0:	200b      	movs	r0, #11
 804cbb2:	e7ec      	b.n	804cb8e <RegionAU915NextChannel+0x106>
        if( delayTx > 0 )
 804cbb4:	2f00      	cmp	r7, #0
 804cbb6:	d1f8      	bne.n	804cbaa <RegionAU915NextChannel+0x122>
        *time = 0;
 804cbb8:	f8cb 7000 	str.w	r7, [fp]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 804cbbc:	200c      	movs	r0, #12
 804cbbe:	e7e6      	b.n	804cb8e <RegionAU915NextChannel+0x106>
 804cbc0:	2000b31c 	.word	0x2000b31c
 804cbc4:	2000b300 	.word	0x2000b300
 804cbc8:	2000afa0 	.word	0x2000afa0

0804cbcc <RegionAU915SetContinuousWave>:
{
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

void RegionAU915SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 804cbcc:	b570      	push	{r4, r5, r6, lr}
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 804cbce:	7801      	ldrb	r1, [r0, #0]
    int8_t phyTxPower = 0;
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 804cbd0:	4b0e      	ldr	r3, [pc, #56]	; (804cc0c <RegionAU915SetContinuousWave+0x40>)
 804cbd2:	220c      	movs	r2, #12
 804cbd4:	434a      	muls	r2, r1
 804cbd6:	1899      	adds	r1, r3, r2
 804cbd8:	589d      	ldr	r5, [r3, r2]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 804cbda:	7a4a      	ldrb	r2, [r1, #9]
{
 804cbdc:	4604      	mov	r4, r0
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 804cbde:	eb03 1302 	add.w	r3, r3, r2, lsl #4

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 804cbe2:	edd4 0a02 	vldr	s1, [r4, #8]
    txPowerResult =  MAX( txPower, maxBandTxPower );
 804cbe6:	f993 0362 	ldrsb.w	r0, [r3, #866]	; 0x362
 804cbea:	f994 3002 	ldrsb.w	r3, [r4, #2]
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 804cbee:	ed94 0a01 	vldr	s0, [r4, #4]
 804cbf2:	4298      	cmp	r0, r3
 804cbf4:	bfb8      	it	lt
 804cbf6:	4618      	movlt	r0, r3
 804cbf8:	f000 f9c6 	bl	804cf88 <RegionCommonComputeTxPower>

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 804cbfc:	4b04      	ldr	r3, [pc, #16]	; (804cc10 <RegionAU915SetContinuousWave+0x44>)
 804cbfe:	89a2      	ldrh	r2, [r4, #12]
 804cc00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804cc02:	4601      	mov	r1, r0
 804cc04:	4628      	mov	r0, r5
}
 804cc06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 804cc0a:	4718      	bx	r3
 804cc0c:	2000afa0 	.word	0x2000afa0
 804cc10:	08051928 	.word	0x08051928

0804cc14 <RegionAU915ApplyDrOffset>:

uint8_t RegionAU915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 804cc14:	b510      	push	{r4, lr}
    int8_t datarate = DatarateOffsetsAU915[dr][drOffset];
 804cc16:	4c07      	ldr	r4, [pc, #28]	; (804cc34 <RegionAU915ApplyDrOffset+0x20>)
 804cc18:	2306      	movs	r3, #6
 804cc1a:	fb03 4101 	mla	r1, r3, r1, r4
 804cc1e:	4411      	add	r1, r2
 804cc20:	f991 3088 	ldrsb.w	r3, [r1, #136]	; 0x88

    if( datarate < 0 )
 804cc24:	2b00      	cmp	r3, #0
 804cc26:	da03      	bge.n	804cc30 <RegionAU915ApplyDrOffset+0x1c>
    {
        if( downlinkDwellTime == 0 )
 804cc28:	2800      	cmp	r0, #0
        {
            datarate = AU915_TX_MIN_DATARATE;
        }
        else
        {
            datarate = AU915_DWELL_LIMIT_DATARATE;
 804cc2a:	bf0c      	ite	eq
 804cc2c:	2300      	moveq	r3, #0
 804cc2e:	2302      	movne	r3, #2
        }
    }
    return datarate;
}
 804cc30:	b2d8      	uxtb	r0, r3
 804cc32:	bd10      	pop	{r4, pc}
 804cc34:	08051ce0 	.word	0x08051ce0

0804cc38 <RegionCommonGetJoinDc>:

uint16_t RegionCommonGetJoinDc( TimerTime_t elapsedTime )
{
    uint16_t dutyCycle = 0;

    if( elapsedTime < 3600000 )
 804cc38:	4b06      	ldr	r3, [pc, #24]	; (804cc54 <RegionCommonGetJoinDc+0x1c>)
 804cc3a:	4298      	cmp	r0, r3
 804cc3c:	d908      	bls.n	804cc50 <RegionCommonGetJoinDc+0x18>
    {
        dutyCycle = BACKOFF_DC_10_HOURS;
    }
    else
    {
        dutyCycle = BACKOFF_DC_24_HOURS;
 804cc3e:	4a06      	ldr	r2, [pc, #24]	; (804cc58 <RegionCommonGetJoinDc+0x20>)
 804cc40:	f242 7310 	movw	r3, #10000	; 0x2710
 804cc44:	4290      	cmp	r0, r2
 804cc46:	bf8c      	ite	hi
 804cc48:	4618      	movhi	r0, r3
 804cc4a:	f44f 707a 	movls.w	r0, #1000	; 0x3e8
 804cc4e:	4770      	bx	lr
        dutyCycle = BACKOFF_DC_1_HOUR;
 804cc50:	2064      	movs	r0, #100	; 0x64
    }
    return dutyCycle;
}
 804cc52:	4770      	bx	lr
 804cc54:	0036ee7f 	.word	0x0036ee7f
 804cc58:	025c3f7f 	.word	0x025c3f7f

0804cc5c <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 804cc5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 804cc60:	429a      	cmp	r2, r3
{
 804cc62:	9f07      	ldr	r7, [sp, #28]
    if( ( value >= min ) && ( value <= max ) )
 804cc64:	db03      	blt.n	804cc6e <RegionCommonChanVerifyDr+0x12>
 804cc66:	f99d 3018 	ldrsb.w	r3, [sp, #24]
 804cc6a:	429a      	cmp	r2, r3
 804cc6c:	dd23      	ble.n	804ccb6 <RegionCommonChanVerifyDr+0x5a>
        return false;
 804cc6e:	2000      	movs	r0, #0
}
 804cc70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 804cc74:	f831 8013 	ldrh.w	r8, [r1, r3, lsl #1]
 804cc78:	2400      	movs	r4, #0
 804cc7a:	fa48 f504 	asr.w	r5, r8, r4
 804cc7e:	07ed      	lsls	r5, r5, #31
 804cc80:	d50f      	bpl.n	804cca2 <RegionCommonChanVerifyDr+0x46>
 804cc82:	1935      	adds	r5, r6, r4
 804cc84:	fb0e 7505 	mla	r5, lr, r5, r7
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 804cc88:	f895 c008 	ldrb.w	ip, [r5, #8]
 804cc8c:	f34c 1503 	sbfx	r5, ip, #4, #4
    if( ( value >= min ) && ( value <= max ) )
 804cc90:	f00c 0c0f 	and.w	ip, ip, #15
 804cc94:	4562      	cmp	r2, ip
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 804cc96:	b26d      	sxtb	r5, r5
    if( ( value >= min ) && ( value <= max ) )
 804cc98:	db03      	blt.n	804cca2 <RegionCommonChanVerifyDr+0x46>
 804cc9a:	f005 050f 	and.w	r5, r5, #15
 804cc9e:	42aa      	cmp	r2, r5
 804cca0:	dd0d      	ble.n	804ccbe <RegionCommonChanVerifyDr+0x62>
 804cca2:	3401      	adds	r4, #1
        for( uint8_t j = 0; j < 16; j++ )
 804cca4:	2c10      	cmp	r4, #16
 804cca6:	d1e8      	bne.n	804cc7a <RegionCommonChanVerifyDr+0x1e>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 804cca8:	3301      	adds	r3, #1
 804ccaa:	b2db      	uxtb	r3, r3
 804ccac:	011e      	lsls	r6, r3, #4
 804ccae:	b2f6      	uxtb	r6, r6
 804ccb0:	42b0      	cmp	r0, r6
 804ccb2:	d8df      	bhi.n	804cc74 <RegionCommonChanVerifyDr+0x18>
 804ccb4:	e7db      	b.n	804cc6e <RegionCommonChanVerifyDr+0x12>
 804ccb6:	2300      	movs	r3, #0
 804ccb8:	f04f 0e0c 	mov.w	lr, #12
 804ccbc:	e7f6      	b.n	804ccac <RegionCommonChanVerifyDr+0x50>
                    return true;
 804ccbe:	2001      	movs	r0, #1
 804ccc0:	e7d6      	b.n	804cc70 <RegionCommonChanVerifyDr+0x14>

0804ccc2 <RegionCommonValueInRange>:
    if( ( value >= min ) && ( value <= max ) )
 804ccc2:	4288      	cmp	r0, r1
 804ccc4:	db04      	blt.n	804ccd0 <RegionCommonValueInRange+0xe>
    {
        return 1;
 804ccc6:	4290      	cmp	r0, r2
 804ccc8:	bfcc      	ite	gt
 804ccca:	2000      	movgt	r0, #0
 804cccc:	2001      	movle	r0, #1
 804ccce:	4770      	bx	lr
    }
    return 0;
 804ccd0:	2000      	movs	r0, #0
}
 804ccd2:	4770      	bx	lr

0804ccd4 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;
 804ccd4:	090b      	lsrs	r3, r1, #4

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 804ccd6:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
{
 804ccda:	b510      	push	{r4, lr}
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 804ccdc:	d80f      	bhi.n	804ccfe <RegionCommonChanDisable+0x2a>
 804ccde:	4291      	cmp	r1, r2
 804cce0:	d20d      	bcs.n	804ccfe <RegionCommonChanDisable+0x2a>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 804cce2:	b21a      	sxth	r2, r3
 804cce4:	f001 010f 	and.w	r1, r1, #15
 804cce8:	f830 4012 	ldrh.w	r4, [r0, r2, lsl #1]
 804ccec:	2301      	movs	r3, #1
 804ccee:	fa03 f101 	lsl.w	r1, r3, r1
 804ccf2:	ea24 0101 	bic.w	r1, r4, r1
 804ccf6:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]

    return true;
 804ccfa:	4618      	mov	r0, r3
}
 804ccfc:	bd10      	pop	{r4, pc}
        return false;
 804ccfe:	2000      	movs	r0, #0
 804cd00:	e7fc      	b.n	804ccfc <RegionCommonChanDisable+0x28>

0804cd02 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 804cd02:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 804cd04:	b140      	cbz	r0, 804cd18 <RegionCommonCountChannels+0x16>
 804cd06:	2300      	movs	r3, #0
 804cd08:	eb00 0641 	add.w	r6, r0, r1, lsl #1
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 804cd0c:	2701      	movs	r7, #1
    uint8_t nbChannels = 0;
 804cd0e:	4618      	mov	r0, r3
    {
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 804cd10:	18cc      	adds	r4, r1, r3
 804cd12:	b2e4      	uxtb	r4, r4
 804cd14:	42a2      	cmp	r2, r4
 804cd16:	d800      	bhi.n	804cd1a <RegionCommonCountChannels+0x18>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
    }

    return nbChannels;
}
 804cd18:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nbChannels += CountChannels( channelsMask[i], 16 );
 804cd1a:	2500      	movs	r5, #0
 804cd1c:	f836 c013 	ldrh.w	ip, [r6, r3, lsl #1]
    uint8_t nbActiveBits = 0;
 804cd20:	462c      	mov	r4, r5
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 804cd22:	fa07 fe05 	lsl.w	lr, r7, r5
 804cd26:	ea3e 0e0c 	bics.w	lr, lr, ip
            nbActiveBits++;
 804cd2a:	bf08      	it	eq
 804cd2c:	3401      	addeq	r4, #1
 804cd2e:	f105 0501 	add.w	r5, r5, #1
 804cd32:	bf08      	it	eq
 804cd34:	b2e4      	uxtbeq	r4, r4
    for( uint8_t j = 0; j < nbBits; j++ )
 804cd36:	2d10      	cmp	r5, #16
 804cd38:	d1f3      	bne.n	804cd22 <RegionCommonCountChannels+0x20>
        nbChannels += CountChannels( channelsMask[i], 16 );
 804cd3a:	4420      	add	r0, r4
 804cd3c:	b2c0      	uxtb	r0, r0
 804cd3e:	3301      	adds	r3, #1
 804cd40:	e7e6      	b.n	804cd10 <RegionCommonCountChannels+0xe>

0804cd42 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 804cd42:	b510      	push	{r4, lr}
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 804cd44:	b100      	cbz	r0, 804cd48 <RegionCommonChanMaskCopy+0x6>
 804cd46:	b949      	cbnz	r1, 804cd5c <RegionCommonChanMaskCopy+0x1a>
        for( uint8_t i = 0; i < len; i++ )
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
        }
    }
}
 804cd48:	bd10      	pop	{r4, pc}
            channelsMaskDest[i] = channelsMaskSrc[i];
 804cd4a:	f831 4013 	ldrh.w	r4, [r1, r3, lsl #1]
 804cd4e:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
 804cd52:	3301      	adds	r3, #1
        for( uint8_t i = 0; i < len; i++ )
 804cd54:	b2dc      	uxtb	r4, r3
 804cd56:	42a2      	cmp	r2, r4
 804cd58:	d8f7      	bhi.n	804cd4a <RegionCommonChanMaskCopy+0x8>
 804cd5a:	e7f5      	b.n	804cd48 <RegionCommonChanMaskCopy+0x6>
 804cd5c:	2300      	movs	r3, #0
 804cd5e:	e7f9      	b.n	804cd54 <RegionCommonChanMaskCopy+0x12>

0804cd60 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( bool joined, Band_t* band, TimerTime_t lastTxDone )
{
    if( joined == true )
    {
        band->LastTxDoneTime = lastTxDone;
 804cd60:	608a      	str	r2, [r1, #8]
    if( joined == true )
 804cd62:	b100      	cbz	r0, 804cd66 <RegionCommonSetBandTxDone+0x6>
 804cd64:	4770      	bx	lr
    }
    else
    {
        band->LastTxDoneTime = lastTxDone;
        band->LastJoinTxDoneTime = lastTxDone;
 804cd66:	604a      	str	r2, [r1, #4]
    }
}
 804cd68:	4770      	bx	lr

0804cd6a <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, bool dutyCycle, Band_t* bands, uint8_t nbBands )
{
 804cd6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804cd6e:	4681      	mov	r9, r0
 804cd70:	460e      	mov	r6, r1
 804cd72:	4614      	mov	r4, r2
 804cd74:	eb02 1803 	add.w	r8, r2, r3, lsl #4
    TimerTime_t nextTxDelay = TIMERTIME_T_MAX;
 804cd78:	f04f 35ff 	mov.w	r5, #4294967295
            if( dutyCycle == true )
            {
                TimerTime_t elapsed = TimerGetElapsedTime( bands[i].LastTxDoneTime );
                if( bands[i].TimeOff <= elapsed )
                {
                    bands[i].TimeOff = 0;
 804cd7c:	2700      	movs	r7, #0
    for( uint8_t i = 0; i < nbBands; i++ )
 804cd7e:	45a0      	cmp	r8, r4
 804cd80:	d105      	bne.n	804cd8e <RegionCommonUpdateBandTimeOff+0x24>
                bands[i].TimeOff = 0;
            }
        }
    }

    return ( nextTxDelay == TIMERTIME_T_MAX ) ? 0 : nextTxDelay;
 804cd82:	1c6b      	adds	r3, r5, #1
}
 804cd84:	bf14      	ite	ne
 804cd86:	4628      	movne	r0, r5
 804cd88:	2000      	moveq	r0, #0
 804cd8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if( joined == false )
 804cd8e:	f1b9 0f00 	cmp.w	r9, #0
 804cd92:	d118      	bne.n	804cdc6 <RegionCommonUpdateBandTimeOff+0x5c>
            TimerTime_t elapsedJoin = TimerGetElapsedTime( bands[i].LastJoinTxDoneTime );
 804cd94:	6860      	ldr	r0, [r4, #4]
 804cd96:	f000 ff9b 	bl	804dcd0 <TimerGetElapsedTime>
 804cd9a:	4682      	mov	sl, r0
            TimerTime_t elapsedTx = TimerGetElapsedTime( bands[i].LastTxDoneTime );
 804cd9c:	68a0      	ldr	r0, [r4, #8]
 804cd9e:	f000 ff97 	bl	804dcd0 <TimerGetElapsedTime>
            TimerTime_t txDoneTime =  MAX( elapsedJoin,
 804cda2:	2e00      	cmp	r6, #0
 804cda4:	bf08      	it	eq
 804cda6:	2000      	moveq	r0, #0
 804cda8:	4550      	cmp	r0, sl
 804cdaa:	bf38      	it	cc
 804cdac:	4650      	movcc	r0, sl
                if( bands[i].TimeOff <= elapsed )
 804cdae:	68e3      	ldr	r3, [r4, #12]
 804cdb0:	4283      	cmp	r3, r0
                    bands[i].TimeOff = 0;
 804cdb2:	bf98      	it	ls
 804cdb4:	60e7      	strls	r7, [r4, #12]
                if( bands[i].TimeOff != 0 )
 804cdb6:	68e3      	ldr	r3, [r4, #12]
 804cdb8:	b11b      	cbz	r3, 804cdc2 <RegionCommonUpdateBandTimeOff+0x58>
                    nextTxDelay = MIN( bands[i].TimeOff - elapsed, nextTxDelay );
 804cdba:	1a1b      	subs	r3, r3, r0
 804cdbc:	429d      	cmp	r5, r3
 804cdbe:	bf28      	it	cs
 804cdc0:	461d      	movcs	r5, r3
 804cdc2:	3410      	adds	r4, #16
 804cdc4:	e7db      	b.n	804cd7e <RegionCommonUpdateBandTimeOff+0x14>
            if( dutyCycle == true )
 804cdc6:	b11e      	cbz	r6, 804cdd0 <RegionCommonUpdateBandTimeOff+0x66>
                TimerTime_t elapsed = TimerGetElapsedTime( bands[i].LastTxDoneTime );
 804cdc8:	68a0      	ldr	r0, [r4, #8]
 804cdca:	f000 ff81 	bl	804dcd0 <TimerGetElapsedTime>
 804cdce:	e7ee      	b.n	804cdae <RegionCommonUpdateBandTimeOff+0x44>
                bands[i].TimeOff = 0;
 804cdd0:	60e6      	str	r6, [r4, #12]
                nextTxDelay = 0;
 804cdd2:	4635      	mov	r5, r6
 804cdd4:	e7f5      	b.n	804cdc2 <RegionCommonUpdateBandTimeOff+0x58>

0804cdd6 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 804cdd6:	7803      	ldrb	r3, [r0, #0]
 804cdd8:	2b03      	cmp	r3, #3
 804cdda:	d114      	bne.n	804ce06 <RegionCommonParseLinkAdrReq+0x30>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 804cddc:	7843      	ldrb	r3, [r0, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 804cdde:	f003 020f 	and.w	r2, r3, #15
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 804cde2:	091b      	lsrs	r3, r3, #4
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 804cde4:	708a      	strb	r2, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 804cde6:	704b      	strb	r3, [r1, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 804cde8:	7883      	ldrb	r3, [r0, #2]
 804cdea:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 804cdec:	78c2      	ldrb	r2, [r0, #3]
 804cdee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 804cdf2:	808b      	strh	r3, [r1, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 804cdf4:	7903      	ldrb	r3, [r0, #4]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 804cdf6:	f3c3 1202 	ubfx	r2, r3, #4, #3
        linkAdrParams->NbRep &= 0x0F;
 804cdfa:	f003 030f 	and.w	r3, r3, #15
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 804cdfe:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 804ce00:	700b      	strb	r3, [r1, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 804ce02:	2005      	movs	r0, #5
 804ce04:	4770      	bx	lr
    uint8_t retIndex = 0;
 804ce06:	2000      	movs	r0, #0
    }
    return retIndex;
}
 804ce08:	4770      	bx	lr

0804ce0a <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 804ce0a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804ce0e:	4699      	mov	r9, r3
    int8_t datarate = verifyParams->Datarate;
    int8_t txPower = verifyParams->TxPower;
    int8_t nbRepetitions = verifyParams->NbRep;

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 804ce10:	7943      	ldrb	r3, [r0, #5]
    uint8_t status = verifyParams->Status;
 804ce12:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 804ce14:	f990 8006 	ldrsb.w	r8, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 804ce18:	f990 7007 	ldrsb.w	r7, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 804ce1c:	7a06      	ldrb	r6, [r0, #8]
{
 804ce1e:	4604      	mov	r4, r0
 804ce20:	468b      	mov	fp, r1
 804ce22:	4692      	mov	sl, r2
    if( verifyParams->AdrEnabled == false )
 804ce24:	b34b      	cbz	r3, 804ce7a <RegionCommonLinkAdrReqVerifyParams+0x70>
    int8_t nbRepetitions = verifyParams->NbRep;
 804ce26:	b276      	sxtb	r6, r6
        nbRepetitions = verifyParams->CurrentNbRep;
        datarate =  verifyParams->CurrentDatarate;
        txPower =  verifyParams->CurrentTxPower;
    }

    if( status != 0 )
 804ce28:	b1ed      	cbz	r5, 804ce66 <RegionCommonLinkAdrReqVerifyParams+0x5c>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 804ce2a:	69a2      	ldr	r2, [r4, #24]
 804ce2c:	9201      	str	r2, [sp, #4]
 804ce2e:	f994 2015 	ldrsb.w	r2, [r4, #21]
 804ce32:	9200      	str	r2, [sp, #0]
 804ce34:	f994 3014 	ldrsb.w	r3, [r4, #20]
 804ce38:	7b20      	ldrb	r0, [r4, #12]
 804ce3a:	6921      	ldr	r1, [r4, #16]
 804ce3c:	4642      	mov	r2, r8
 804ce3e:	f7ff ff0d 	bl	804cc5c <RegionCommonChanVerifyDr>
 804ce42:	b908      	cbnz	r0, 804ce48 <RegionCommonLinkAdrReqVerifyParams+0x3e>
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
        {
            status &= 0xFD; // Datarate KO
 804ce44:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 804ce48:	f994 301d 	ldrsb.w	r3, [r4, #29]
 804ce4c:	f994 201c 	ldrsb.w	r2, [r4, #28]
    if( ( value >= min ) && ( value <= max ) )
 804ce50:	42bb      	cmp	r3, r7
 804ce52:	dc19      	bgt.n	804ce88 <RegionCommonLinkAdrReqVerifyParams+0x7e>
 804ce54:	42ba      	cmp	r2, r7
 804ce56:	da01      	bge.n	804ce5c <RegionCommonLinkAdrReqVerifyParams+0x52>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 804ce58:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 804ce5c:	2d07      	cmp	r5, #7
 804ce5e:	d102      	bne.n	804ce66 <RegionCommonLinkAdrReqVerifyParams+0x5c>
    {
        if( nbRepetitions == 0 )
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 804ce60:	2e00      	cmp	r6, #0
 804ce62:	bf08      	it	eq
 804ce64:	2601      	moveq	r6, #1
    *dr = datarate;
    *txPow = txPower;
    *nbRep = nbRepetitions;

    return status;
}
 804ce66:	4628      	mov	r0, r5
    *dr = datarate;
 804ce68:	f88b 8000 	strb.w	r8, [fp]
    *txPow = txPower;
 804ce6c:	f88a 7000 	strb.w	r7, [sl]
    *nbRep = nbRepetitions;
 804ce70:	f889 6000 	strb.w	r6, [r9]
}
 804ce74:	b003      	add	sp, #12
 804ce76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        nbRepetitions = verifyParams->CurrentNbRep;
 804ce7a:	f990 600b 	ldrsb.w	r6, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 804ce7e:	f990 8009 	ldrsb.w	r8, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 804ce82:	f990 700a 	ldrsb.w	r7, [r0, #10]
 804ce86:	e7cf      	b.n	804ce28 <RegionCommonLinkAdrReqVerifyParams+0x1e>
    if( ( value >= min ) && ( value <= max ) )
 804ce88:	461f      	mov	r7, r3
 804ce8a:	e7e7      	b.n	804ce5c <RegionCommonLinkAdrReqVerifyParams+0x52>

0804ce8c <RegionCommonComputeSymbolTimeLoRa>:

double RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
 804ce8c:	2301      	movs	r3, #1
{
 804ce8e:	b570      	push	{r4, r5, r6, lr}
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
 804ce90:	fa03 f000 	lsl.w	r0, r3, r0
{
 804ce94:	460e      	mov	r6, r1
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
 804ce96:	f7f3 fc75 	bl	8040784 <__aeabi_i2d>
 804ce9a:	4604      	mov	r4, r0
 804ce9c:	4630      	mov	r0, r6
 804ce9e:	460d      	mov	r5, r1
 804cea0:	f7f3 fc60 	bl	8040764 <__aeabi_ui2d>
 804cea4:	4602      	mov	r2, r0
 804cea6:	460b      	mov	r3, r1
 804cea8:	4620      	mov	r0, r4
 804ceaa:	4629      	mov	r1, r5
 804ceac:	f7f3 fdfe 	bl	8040aac <__aeabi_ddiv>
 804ceb0:	2200      	movs	r2, #0
 804ceb2:	4b03      	ldr	r3, [pc, #12]	; (804cec0 <RegionCommonComputeSymbolTimeLoRa+0x34>)
 804ceb4:	f7f3 fcd0 	bl	8040858 <__aeabi_dmul>
}
 804ceb8:	ec41 0b10 	vmov	d0, r0, r1
 804cebc:	bd70      	pop	{r4, r5, r6, pc}
 804cebe:	bf00      	nop
 804cec0:	408f4000 	.word	0x408f4000

0804cec4 <RegionCommonComputeRxWindowParameters>:
{
    return ( 8.0 / ( double )phyDr ); // 1 symbol equals 1 byte
}

void RegionCommonComputeRxWindowParameters( double tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
 804cec4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804cec8:	ec57 6b10 	vmov	r6, r7, d0
 804cecc:	4604      	mov	r4, r0
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 804cece:	3804      	subs	r0, #4
 804ced0:	0040      	lsls	r0, r0, #1
{
 804ced2:	4615      	mov	r5, r2
 804ced4:	469a      	mov	sl, r3
 804ced6:	468b      	mov	fp, r1
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 804ced8:	f7f3 fc54 	bl	8040784 <__aeabi_i2d>
 804cedc:	4632      	mov	r2, r6
 804cede:	463b      	mov	r3, r7
 804cee0:	f7f3 fcba 	bl	8040858 <__aeabi_dmul>
 804cee4:	4680      	mov	r8, r0
 804cee6:	ea4f 004b 	mov.w	r0, fp, lsl #1
 804ceea:	4689      	mov	r9, r1
 804ceec:	f7f3 fc3a 	bl	8040764 <__aeabi_ui2d>
 804cef0:	4602      	mov	r2, r0
 804cef2:	460b      	mov	r3, r1
 804cef4:	4640      	mov	r0, r8
 804cef6:	4649      	mov	r1, r9
 804cef8:	f7f3 faf8 	bl	80404ec <__adddf3>
 804cefc:	4632      	mov	r2, r6
 804cefe:	463b      	mov	r3, r7
 804cf00:	f7f3 fdd4 	bl	8040aac <__aeabi_ddiv>
 804cf04:	ec41 0b10 	vmov	d0, r0, r1
 804cf08:	f004 fafa 	bl	8051500 <ceil>
 804cf0c:	ec51 0b10 	vmov	r0, r1, d0
 804cf10:	f7f3 ff64 	bl	8040ddc <__aeabi_d2uiz>
 804cf14:	4284      	cmp	r4, r0
 804cf16:	bf38      	it	cc
 804cf18:	4604      	movcc	r4, r0
    *windowOffset = ( int32_t )ceil( ( 4.0 * tSymbol ) - ( ( *windowTimeout * tSymbol ) / 2.0 ) - wakeUpTime );
 804cf1a:	2200      	movs	r2, #0
 804cf1c:	4b18      	ldr	r3, [pc, #96]	; (804cf80 <RegionCommonComputeRxWindowParameters+0xbc>)
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 804cf1e:	f8ca 4000 	str.w	r4, [sl]
    *windowOffset = ( int32_t )ceil( ( 4.0 * tSymbol ) - ( ( *windowTimeout * tSymbol ) / 2.0 ) - wakeUpTime );
 804cf22:	4630      	mov	r0, r6
 804cf24:	4639      	mov	r1, r7
 804cf26:	f7f3 fc97 	bl	8040858 <__aeabi_dmul>
 804cf2a:	4680      	mov	r8, r0
 804cf2c:	4620      	mov	r0, r4
 804cf2e:	4689      	mov	r9, r1
 804cf30:	f7f3 fc18 	bl	8040764 <__aeabi_ui2d>
 804cf34:	4632      	mov	r2, r6
 804cf36:	463b      	mov	r3, r7
 804cf38:	f7f3 fc8e 	bl	8040858 <__aeabi_dmul>
 804cf3c:	2200      	movs	r2, #0
 804cf3e:	4b11      	ldr	r3, [pc, #68]	; (804cf84 <RegionCommonComputeRxWindowParameters+0xc0>)
 804cf40:	f7f3 fc8a 	bl	8040858 <__aeabi_dmul>
 804cf44:	4602      	mov	r2, r0
 804cf46:	460b      	mov	r3, r1
 804cf48:	4640      	mov	r0, r8
 804cf4a:	4649      	mov	r1, r9
 804cf4c:	f7f3 facc 	bl	80404e8 <__aeabi_dsub>
 804cf50:	4606      	mov	r6, r0
 804cf52:	4628      	mov	r0, r5
 804cf54:	460f      	mov	r7, r1
 804cf56:	f7f3 fc05 	bl	8040764 <__aeabi_ui2d>
 804cf5a:	460b      	mov	r3, r1
 804cf5c:	4602      	mov	r2, r0
 804cf5e:	4639      	mov	r1, r7
 804cf60:	4630      	mov	r0, r6
 804cf62:	f7f3 fac1 	bl	80404e8 <__aeabi_dsub>
 804cf66:	ec41 0b10 	vmov	d0, r0, r1
 804cf6a:	f004 fac9 	bl	8051500 <ceil>
 804cf6e:	ec51 0b10 	vmov	r0, r1, d0
 804cf72:	f7f3 ff0b 	bl	8040d8c <__aeabi_d2iz>
 804cf76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 804cf78:	6018      	str	r0, [r3, #0]
}
 804cf7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804cf7e:	bf00      	nop
 804cf80:	40100000 	.word	0x40100000
 804cf84:	3fe00000 	.word	0x3fe00000

0804cf88 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 804cf88:	0040      	lsls	r0, r0, #1
 804cf8a:	ee07 0a90 	vmov	s15, r0
 804cf8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
{
 804cf92:	b508      	push	{r3, lr}
    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 804cf94:	ee30 0a67 	vsub.f32	s0, s0, s15
 804cf98:	ee70 7a60 	vsub.f32	s15, s0, s1
 804cf9c:	ee17 0a90 	vmov	r0, s15
 804cfa0:	f7f3 fc02 	bl	80407a8 <__aeabi_f2d>
 804cfa4:	ec41 0b10 	vmov	d0, r0, r1
 804cfa8:	f004 fb2a 	bl	8051600 <floor>
 804cfac:	ec51 0b10 	vmov	r0, r1, d0
 804cfb0:	f7f3 feec 	bl	8040d8c <__aeabi_d2iz>

    return phyTxPower;
}
 804cfb4:	b240      	sxtb	r0, r0
 804cfb6:	bd08      	pop	{r3, pc}

0804cfb8 <RegionCommonCalcBackOff>:

void RegionCommonCalcBackOff( RegionCommonCalcBackOffParams_t* calcBackOffParams )
{
 804cfb8:	b570      	push	{r4, r5, r6, lr}
    uint8_t bandIdx = calcBackOffParams->Channels[calcBackOffParams->Channel].Band;
 804cfba:	7ac3      	ldrb	r3, [r0, #11]
 804cfbc:	6802      	ldr	r2, [r0, #0]
 804cfbe:	7a86      	ldrb	r6, [r0, #10]
 804cfc0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 804cfc4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    uint16_t dutyCycle = calcBackOffParams->Bands[bandIdx].DCycle;
 804cfc8:	6842      	ldr	r2, [r0, #4]
 804cfca:	7a5b      	ldrb	r3, [r3, #9]
 804cfcc:	011b      	lsls	r3, r3, #4
 804cfce:	18d5      	adds	r5, r2, r3
 804cfd0:	5ad1      	ldrh	r1, [r2, r3]
    uint16_t joinDutyCycle = 0;

    // Reset time-off to initial value.
    calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 804cfd2:	2300      	movs	r3, #0
 804cfd4:	60eb      	str	r3, [r5, #12]

    if( calcBackOffParams->Joined == false )
 804cfd6:	7a43      	ldrb	r3, [r0, #9]
{
 804cfd8:	4604      	mov	r4, r0
    if( calcBackOffParams->Joined == false )
 804cfda:	b973      	cbnz	r3, 804cffa <RegionCommonCalcBackOff+0x42>
    {
        // Get the join duty cycle
        joinDutyCycle = RegionCommonGetJoinDc( calcBackOffParams->ElapsedTime );
 804cfdc:	68c0      	ldr	r0, [r0, #12]
 804cfde:	f7ff fe2b 	bl	804cc38 <RegionCommonGetJoinDc>
        // Apply the most restricting duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
        // Reset the timeoff if the last frame was not a join request and when the duty cycle is not enabled
        if( ( calcBackOffParams->DutyCycleEnabled == false ) && ( calcBackOffParams->LastTxIsJoinRequest == false ) )
 804cfe2:	b90e      	cbnz	r6, 804cfe8 <RegionCommonCalcBackOff+0x30>
 804cfe4:	7a23      	ldrb	r3, [r4, #8]
 804cfe6:	b153      	cbz	r3, 804cffe <RegionCommonCalcBackOff+0x46>
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 804cfe8:	4281      	cmp	r1, r0
 804cfea:	bf38      	it	cc
 804cfec:	4601      	movcc	r1, r0
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
        }
        else
        {
            // Apply band time-off.
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 804cfee:	b289      	uxth	r1, r1
    }
    else
    {
        if( calcBackOffParams->DutyCycleEnabled == true )
        {
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 804cff0:	6923      	ldr	r3, [r4, #16]
 804cff2:	3901      	subs	r1, #1
 804cff4:	4359      	muls	r1, r3
 804cff6:	60e9      	str	r1, [r5, #12]
        else
        {
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
        }
    }
}
 804cff8:	e001      	b.n	804cffe <RegionCommonCalcBackOff+0x46>
        if( calcBackOffParams->DutyCycleEnabled == true )
 804cffa:	2e00      	cmp	r6, #0
 804cffc:	d1f8      	bne.n	804cff0 <RegionCommonCalcBackOff+0x38>
}
 804cffe:	bd70      	pop	{r4, r5, r6, pc}

0804d000 <certif_tx>:
  certifParam.DemodMargin = mlmeConfirm->DemodMargin;
  certifParam.NbGateways = mlmeConfirm->NbGateways;
}

static bool certif_tx( void )
{
 804d000:	b510      	push	{r4, lr}
  McpsReq_t mcpsReq;
  LoRaMacTxInfo_t txInfo;
  
  if( certifParam.LinkCheck == true )
 804d002:	4c2a      	ldr	r4, [pc, #168]	; (804d0ac <certif_tx+0xac>)
 804d004:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
{
 804d008:	b086      	sub	sp, #24
  if( certifParam.LinkCheck == true )
 804d00a:	b17b      	cbz	r3, 804d02c <certif_tx+0x2c>
  {
    certifParam.LinkCheck = false;
 804d00c:	2300      	movs	r3, #0
 804d00e:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
    certifParam.DataBufferSize = 3;
 804d012:	2303      	movs	r3, #3
 804d014:	70e3      	strb	r3, [r4, #3]
    certifParam.DataBuffer[0] = 5;
 804d016:	2305      	movs	r3, #5
 804d018:	7123      	strb	r3, [r4, #4]
    certifParam.DataBuffer[1] = certifParam.DemodMargin;
 804d01a:	f894 30f9 	ldrb.w	r3, [r4, #249]	; 0xf9
 804d01e:	7163      	strb	r3, [r4, #5]
    certifParam.DataBuffer[2] = certifParam.NbGateways;
 804d020:	f894 30fa 	ldrb.w	r3, [r4, #250]	; 0xfa
 804d024:	71a3      	strb	r3, [r4, #6]
  else
  {
    switch( certifParam.State )
    {
    case 4:
      certifParam.State = 1;
 804d026:	2301      	movs	r3, #1
 804d028:	7063      	strb	r3, [r4, #1]
      break;
 804d02a:	e004      	b.n	804d036 <certif_tx+0x36>
    switch( certifParam.State )
 804d02c:	7863      	ldrb	r3, [r4, #1]
 804d02e:	2b01      	cmp	r3, #1
 804d030:	d019      	beq.n	804d066 <certif_tx+0x66>
 804d032:	2b04      	cmp	r3, #4
 804d034:	d0f7      	beq.n	804d026 <certif_tx+0x26>
      certifParam.DataBuffer[1] = certifParam.DownLinkCounter;
      break;
    }
  }
    
  if( LoRaMacQueryTxPossible( certifParam.DataBufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 804d036:	a901      	add	r1, sp, #4
 804d038:	78e0      	ldrb	r0, [r4, #3]
 804d03a:	f7fd fae1 	bl	804a600 <LoRaMacQueryTxPossible>
 804d03e:	b1d0      	cbz	r0, 804d076 <certif_tx+0x76>
  {
      // Send empty frame in order to flush MAC commands
      mcpsReq.Type = MCPS_UNCONFIRMED;
 804d040:	2300      	movs	r3, #0
 804d042:	f88d 3008 	strb.w	r3, [sp, #8]
      mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 804d046:	9304      	str	r3, [sp, #16]
      mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 804d048:	f8ad 3014 	strh.w	r3, [sp, #20]
      {
          mcpsReq.Type = MCPS_UNCONFIRMED;
          mcpsReq.Req.Unconfirmed.fPort = CERTIF_PORT;
          mcpsReq.Req.Unconfirmed.fBufferSize = certifParam.DataBufferSize;
          mcpsReq.Req.Unconfirmed.fBuffer = &(certifParam.DataBuffer);
          mcpsReq.Req.Unconfirmed.Datarate = DR_0;
 804d04c:	f88d 3016 	strb.w	r3, [sp, #22]
          mcpsReq.Req.Confirmed.Datarate = DR_0;
      }
  }

  /*cerification test on-going*/
  TimerStart( &CertifTxNextPacketTimer );
 804d050:	4817      	ldr	r0, [pc, #92]	; (804d0b0 <certif_tx+0xb0>)
 804d052:	f000 fd8b 	bl	804db6c <TimerStart>
	
  if( LoRaMacMcpsRequest( &mcpsReq ) == LORAMAC_STATUS_OK )
 804d056:	a802      	add	r0, sp, #8
 804d058:	f7fd ff4a 	bl	804aef0 <LoRaMacMcpsRequest>
  {
      return false;
  }
    return true;
}
 804d05c:	3000      	adds	r0, #0
 804d05e:	bf18      	it	ne
 804d060:	2001      	movne	r0, #1
 804d062:	b006      	add	sp, #24
 804d064:	bd10      	pop	{r4, pc}
      certifParam.DataBufferSize = 2;
 804d066:	2302      	movs	r3, #2
 804d068:	70e3      	strb	r3, [r4, #3]
      certifParam.DataBuffer[0] = certifParam.DownLinkCounter >> 8;
 804d06a:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
      certifParam.DataBuffer[1] = certifParam.DownLinkCounter;
 804d06e:	7163      	strb	r3, [r4, #5]
      certifParam.DataBuffer[0] = certifParam.DownLinkCounter >> 8;
 804d070:	0a1a      	lsrs	r2, r3, #8
 804d072:	7122      	strb	r2, [r4, #4]
      break;
 804d074:	e7df      	b.n	804d036 <certif_tx+0x36>
      if( IsTxConfirmed == LORAWAN_UNCONFIRMED_MSG )
 804d076:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
 804d07a:	78e1      	ldrb	r1, [r4, #3]
 804d07c:	4a0d      	ldr	r2, [pc, #52]	; (804d0b4 <certif_tx+0xb4>)
 804d07e:	20e0      	movs	r0, #224	; 0xe0
 804d080:	b93b      	cbnz	r3, 804d092 <certif_tx+0x92>
          mcpsReq.Type = MCPS_UNCONFIRMED;
 804d082:	f88d 3008 	strb.w	r3, [sp, #8]
          mcpsReq.Req.Unconfirmed.fPort = CERTIF_PORT;
 804d086:	f88d 000c 	strb.w	r0, [sp, #12]
          mcpsReq.Req.Unconfirmed.fBufferSize = certifParam.DataBufferSize;
 804d08a:	f8ad 1014 	strh.w	r1, [sp, #20]
          mcpsReq.Req.Unconfirmed.fBuffer = &(certifParam.DataBuffer);
 804d08e:	9204      	str	r2, [sp, #16]
 804d090:	e7dc      	b.n	804d04c <certif_tx+0x4c>
          mcpsReq.Type = MCPS_CONFIRMED;
 804d092:	2301      	movs	r3, #1
 804d094:	f88d 3008 	strb.w	r3, [sp, #8]
          mcpsReq.Req.Confirmed.Datarate = DR_0;
 804d098:	f44f 6300 	mov.w	r3, #2048	; 0x800
          mcpsReq.Req.Confirmed.fPort = CERTIF_PORT;
 804d09c:	f88d 000c 	strb.w	r0, [sp, #12]
          mcpsReq.Req.Confirmed.fBufferSize = certifParam.DataBufferSize;
 804d0a0:	f8ad 1014 	strh.w	r1, [sp, #20]
          mcpsReq.Req.Confirmed.fBuffer = &(certifParam.DataBuffer);
 804d0a4:	9204      	str	r2, [sp, #16]
          mcpsReq.Req.Confirmed.Datarate = DR_0;
 804d0a6:	f8ad 3016 	strh.w	r3, [sp, #22]
 804d0aa:	e7d1      	b.n	804d050 <certif_tx+0x50>
 804d0ac:	2000b338 	.word	0x2000b338
 804d0b0:	2000b438 	.word	0x2000b438
 804d0b4:	2000b33c 	.word	0x2000b33c

0804d0b8 <OnCertifTxNextPacketTimerEvent>:
/*!
 * \brief Function executed on TxNextPacket Timeout event
 */
static void OnCertifTxNextPacketTimerEvent( void* context )
{
    certif_tx( );
 804d0b8:	f7ff bfa2 	b.w	804d000 <certif_tx>

0804d0bc <certif_running>:
}
 804d0bc:	4b01      	ldr	r3, [pc, #4]	; (804d0c4 <certif_running+0x8>)
 804d0be:	7818      	ldrb	r0, [r3, #0]
 804d0c0:	4770      	bx	lr
 804d0c2:	bf00      	nop
 804d0c4:	2000b338 	.word	0x2000b338

0804d0c8 <certif_DownLinkIncrement>:
    certifParam.DownLinkCounter++;
 804d0c8:	4a03      	ldr	r2, [pc, #12]	; (804d0d8 <certif_DownLinkIncrement+0x10>)
 804d0ca:	f8b2 30f6 	ldrh.w	r3, [r2, #246]	; 0xf6
 804d0ce:	3301      	adds	r3, #1
 804d0d0:	f8a2 30f6 	strh.w	r3, [r2, #246]	; 0xf6
}
 804d0d4:	4770      	bx	lr
 804d0d6:	bf00      	nop
 804d0d8:	2000b338 	.word	0x2000b338

0804d0dc <certif_linkCheck>:
  certifParam.LinkCheck = true;
 804d0dc:	4b05      	ldr	r3, [pc, #20]	; (804d0f4 <certif_linkCheck+0x18>)
 804d0de:	2201      	movs	r2, #1
 804d0e0:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
  certifParam.DemodMargin = mlmeConfirm->DemodMargin;
 804d0e4:	7a02      	ldrb	r2, [r0, #8]
 804d0e6:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
  certifParam.NbGateways = mlmeConfirm->NbGateways;
 804d0ea:	7a42      	ldrb	r2, [r0, #9]
 804d0ec:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
}
 804d0f0:	4770      	bx	lr
 804d0f2:	bf00      	nop
 804d0f4:	2000b338 	.word	0x2000b338

0804d0f8 <certif_rx>:
{
 804d0f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if( certifParam.Running == false )
 804d0fa:	4c63      	ldr	r4, [pc, #396]	; (804d288 <certif_rx+0x190>)
 804d0fc:	7823      	ldrb	r3, [r4, #0]
{
 804d0fe:	b08d      	sub	sp, #52	; 0x34
 804d100:	460e      	mov	r6, r1
  if( certifParam.Running == false )
 804d102:	2b00      	cmp	r3, #0
 804d104:	d142      	bne.n	804d18c <certif_rx+0x94>
      if( ( mcpsIndication->BufferSize == 4 ) &&
 804d106:	7b07      	ldrb	r7, [r0, #12]
 804d108:	2f04      	cmp	r7, #4
 804d10a:	d13a      	bne.n	804d182 <certif_rx+0x8a>
          ( mcpsIndication->Buffer[0] == 0x01 ) &&
 804d10c:	6882      	ldr	r2, [r0, #8]
      if( ( mcpsIndication->BufferSize == 4 ) &&
 804d10e:	7811      	ldrb	r1, [r2, #0]
 804d110:	2901      	cmp	r1, #1
 804d112:	d136      	bne.n	804d182 <certif_rx+0x8a>
          ( mcpsIndication->Buffer[0] == 0x01 ) &&
 804d114:	7851      	ldrb	r1, [r2, #1]
 804d116:	2901      	cmp	r1, #1
 804d118:	d133      	bne.n	804d182 <certif_rx+0x8a>
          ( mcpsIndication->Buffer[1] == 0x01 ) &&
 804d11a:	7891      	ldrb	r1, [r2, #2]
 804d11c:	2901      	cmp	r1, #1
 804d11e:	d130      	bne.n	804d182 <certif_rx+0x8a>
          ( mcpsIndication->Buffer[2] == 0x01 ) &&
 804d120:	78d6      	ldrb	r6, [r2, #3]
 804d122:	2e01      	cmp	r6, #1
 804d124:	d12d      	bne.n	804d182 <certif_rx+0x8a>
          mibReq.Type = MIB_ADR;
 804d126:	ad0c      	add	r5, sp, #48	; 0x30
          certifParam.DataBufferSize = 2;
 804d128:	2202      	movs	r2, #2
          mibReq.Type = MIB_ADR;
 804d12a:	f805 7d20 	strb.w	r7, [r5, #-32]!
          LoRaMacMibGetRequestConfirm( &mibReq );
 804d12e:	4628      	mov	r0, r5
          certifParam.DataBufferSize = 2;
 804d130:	70e2      	strb	r2, [r4, #3]
          IsTxConfirmed = LORAWAN_UNCONFIRMED_MSG;
 804d132:	f884 30fc 	strb.w	r3, [r4, #252]	; 0xfc
          certifParam.DownLinkCounter = 0;
 804d136:	f8a4 30f6 	strh.w	r3, [r4, #246]	; 0xf6
          certifParam.LinkCheck = false;
 804d13a:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
          certifParam.DemodMargin = 0;
 804d13e:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
          certifParam.NbGateways = 0;
 804d142:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
          certifParam.Running = true;
 804d146:	7026      	strb	r6, [r4, #0]
          certifParam.State = 1;
 804d148:	7066      	strb	r6, [r4, #1]
          LoRaMacMibGetRequestConfirm( &mibReq );
 804d14a:	f7fd fab9 	bl	804a6c0 <LoRaMacMibGetRequestConfirm>
          AdrEnableInit=mibReq.Param.AdrEnable;
 804d14e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 804d152:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
          LoRaMacMibSetRequestConfirm( &mibReq );
 804d156:	4628      	mov	r0, r5
          mibReq.Type = MIB_ADR;
 804d158:	f88d 7010 	strb.w	r7, [sp, #16]
          mibReq.Param.AdrEnable = true;
 804d15c:	f88d 6014 	strb.w	r6, [sp, #20]
          LoRaMacMibSetRequestConfirm( &mibReq );
 804d160:	f7fd fb8a 	bl	804a878 <LoRaMacMibSetRequestConfirm>
        TimerInit( &CertifTxNextPacketTimer, OnCertifTxNextPacketTimerEvent );
 804d164:	4949      	ldr	r1, [pc, #292]	; (804d28c <certif_rx+0x194>)
 804d166:	f504 7080 	add.w	r0, r4, #256	; 0x100
 804d16a:	f000 fcf5 	bl	804db58 <TimerInit>
        TimerSetValue( &CertifTxNextPacketTimer,  TEST_TX_DUTYCYCLE); 
 804d16e:	f241 3188 	movw	r1, #5000	; 0x1388
 804d172:	f504 7080 	add.w	r0, r4, #256	; 0x100
 804d176:	f000 fd93 	bl	804dca0 <TimerSetValue>
        certif_tx( );
 804d17a:	f7ff ff41 	bl	804d000 <certif_tx>
    if ( certifParam.Running == false )
 804d17e:	7823      	ldrb	r3, [r4, #0]
 804d180:	b913      	cbnz	r3, 804d188 <certif_rx+0x90>
      TimerStop( &CertifTxNextPacketTimer );
 804d182:	4843      	ldr	r0, [pc, #268]	; (804d290 <certif_rx+0x198>)
 804d184:	f000 fd64 	bl	804dc50 <TimerStop>
}
 804d188:	b00d      	add	sp, #52	; 0x34
 804d18a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      certifParam.State = mcpsIndication->Buffer[0];
 804d18c:	6883      	ldr	r3, [r0, #8]
 804d18e:	781a      	ldrb	r2, [r3, #0]
 804d190:	7062      	strb	r2, [r4, #1]
      switch( certifParam.State )
 804d192:	2a08      	cmp	r2, #8
 804d194:	d8f3      	bhi.n	804d17e <certif_rx+0x86>
 804d196:	e8df f002 	tbb	[pc, r2]
 804d19a:	1405      	.short	0x1405
 804d19c:	2f211c17 	.word	0x2f211c17
 804d1a0:	4b34      	.short	0x4b34
 804d1a2:	74          	.byte	0x74
 804d1a3:	00          	.byte	0x00
          certifParam.DownLinkCounter = 0;
 804d1a4:	2300      	movs	r3, #0
 804d1a6:	f8a4 30f6 	strh.w	r3, [r4, #246]	; 0xf6
          certifParam.Running = false;
 804d1aa:	7023      	strb	r3, [r4, #0]
          mibReq.Type = MIB_ADR;
 804d1ac:	2304      	movs	r3, #4
 804d1ae:	f88d 3010 	strb.w	r3, [sp, #16]
          LoRaMacMibSetRequestConfirm( &mibReq );
 804d1b2:	a804      	add	r0, sp, #16
          mibReq.Param.AdrEnable = AdrEnableInit;
 804d1b4:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
 804d1b8:	f88d 3014 	strb.w	r3, [sp, #20]
          LoRaMacMibSetRequestConfirm( &mibReq );
 804d1bc:	f7fd fb5c 	bl	804a878 <LoRaMacMibSetRequestConfirm>
 804d1c0:	e7dd      	b.n	804d17e <certif_rx+0x86>
          certifParam.DataBufferSize = 2;
 804d1c2:	2302      	movs	r3, #2
 804d1c4:	70e3      	strb	r3, [r4, #3]
          break;
 804d1c6:	e7da      	b.n	804d17e <certif_rx+0x86>
          IsTxConfirmed = LORAWAN_CONFIRMED_MSG;
 804d1c8:	2301      	movs	r3, #1
 804d1ca:	f884 30fc 	strb.w	r3, [r4, #252]	; 0xfc
          certifParam.State = 1;
 804d1ce:	7063      	strb	r3, [r4, #1]
          break;
 804d1d0:	e7d5      	b.n	804d17e <certif_rx+0x86>
          IsTxConfirmed = LORAWAN_UNCONFIRMED_MSG;
 804d1d2:	2300      	movs	r3, #0
 804d1d4:	f884 30fc 	strb.w	r3, [r4, #252]	; 0xfc
          certifParam.State = 1;
 804d1d8:	2301      	movs	r3, #1
 804d1da:	e7f8      	b.n	804d1ce <certif_rx+0xd6>
          certifParam.DataBufferSize = mcpsIndication->BufferSize;
 804d1dc:	7b05      	ldrb	r5, [r0, #12]
 804d1de:	70e5      	strb	r5, [r4, #3]
          certifParam.DataBuffer[0] = 4;
 804d1e0:	2204      	movs	r2, #4
 804d1e2:	7122      	strb	r2, [r4, #4]
          for( uint8_t i = 1; i < certifParam.DataBufferSize; i++ )
 804d1e4:	2200      	movs	r2, #0
 804d1e6:	3201      	adds	r2, #1
 804d1e8:	b2d1      	uxtb	r1, r2
 804d1ea:	428d      	cmp	r5, r1
 804d1ec:	d9c7      	bls.n	804d17e <certif_rx+0x86>
              certifParam.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 804d1ee:	5c98      	ldrb	r0, [r3, r2]
 804d1f0:	18a1      	adds	r1, r4, r2
 804d1f2:	3001      	adds	r0, #1
 804d1f4:	7108      	strb	r0, [r1, #4]
 804d1f6:	e7f6      	b.n	804d1e6 <certif_rx+0xee>
          mlmeReq.Type = MLME_LINK_CHECK;
 804d1f8:	a80c      	add	r0, sp, #48	; 0x30
 804d1fa:	2303      	movs	r3, #3
          mlmeReq.Type = MLME_DEVICE_TIME;
 804d1fc:	f800 3d20 	strb.w	r3, [r0, #-32]!
 804d200:	e013      	b.n	804d22a <certif_rx+0x132>
            mibReq.Type = MIB_ADR;
 804d202:	2304      	movs	r3, #4
            certifParam.DownLinkCounter = 0;
 804d204:	2500      	movs	r5, #0
            mibReq.Type = MIB_ADR;
 804d206:	f88d 3010 	strb.w	r3, [sp, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 804d20a:	a804      	add	r0, sp, #16
            mibReq.Param.AdrEnable = AdrEnableInit;
 804d20c:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
 804d210:	f88d 3014 	strb.w	r3, [sp, #20]
            certifParam.DownLinkCounter = 0;
 804d214:	f8a4 50f6 	strh.w	r5, [r4, #246]	; 0xf6
            certifParam.Running = false;
 804d218:	7025      	strb	r5, [r4, #0]
            LoRaMacMibSetRequestConfirm( &mibReq );
 804d21a:	f7fd fb2d 	bl	804a878 <LoRaMacMibSetRequestConfirm>
            mlmeReq.Req.Join = *JoinParameters;
 804d21e:	7833      	ldrb	r3, [r6, #0]
            mlmeReq.Type = MLME_JOIN;
 804d220:	f88d 5000 	strb.w	r5, [sp]
            mlmeReq.Req.Join = *JoinParameters;
 804d224:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMlmeRequest( &mlmeReq );
 804d228:	4668      	mov	r0, sp
          LoRaMacMlmeRequest( &mlmeReq );
 804d22a:	f7fd fd7b 	bl	804ad24 <LoRaMacMlmeRequest>
 804d22e:	e7a6      	b.n	804d17e <certif_rx+0x86>
          if( mcpsIndication->BufferSize == 3 )
 804d230:	7b02      	ldrb	r2, [r0, #12]
 804d232:	2a03      	cmp	r2, #3
 804d234:	d10c      	bne.n	804d250 <certif_rx+0x158>
              mlmeReq.Type = MLME_TXCW;
 804d236:	2204      	movs	r2, #4
 804d238:	f88d 2010 	strb.w	r2, [sp, #16]
              mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 804d23c:	785a      	ldrb	r2, [r3, #1]
 804d23e:	789b      	ldrb	r3, [r3, #2]
 804d240:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 804d244:	f8ad 3014 	strh.w	r3, [sp, #20]
              LoRaMacMlmeRequest( &mlmeReq );
 804d248:	a804      	add	r0, sp, #16
 804d24a:	f7fd fd6b 	bl	804ad24 <LoRaMacMlmeRequest>
 804d24e:	e7c3      	b.n	804d1d8 <certif_rx+0xe0>
          else if( mcpsIndication->BufferSize == 7 )
 804d250:	2a07      	cmp	r2, #7
 804d252:	d1c1      	bne.n	804d1d8 <certif_rx+0xe0>
              mlmeReq.Type = MLME_TXCW_1;
 804d254:	2205      	movs	r2, #5
 804d256:	f88d 2010 	strb.w	r2, [sp, #16]
              mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 804d25a:	7859      	ldrb	r1, [r3, #1]
 804d25c:	789a      	ldrb	r2, [r3, #2]
 804d25e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 804d262:	f8ad 2014 	strh.w	r2, [sp, #20]
              mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 804d266:	791a      	ldrb	r2, [r3, #4]
 804d268:	78d9      	ldrb	r1, [r3, #3]
 804d26a:	0212      	lsls	r2, r2, #8
 804d26c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 804d270:	7959      	ldrb	r1, [r3, #5]
 804d272:	430a      	orrs	r2, r1
 804d274:	2164      	movs	r1, #100	; 0x64
 804d276:	434a      	muls	r2, r1
 804d278:	9206      	str	r2, [sp, #24]
              mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 804d27a:	799b      	ldrb	r3, [r3, #6]
 804d27c:	f88d 301c 	strb.w	r3, [sp, #28]
 804d280:	e7e2      	b.n	804d248 <certif_rx+0x150>
          mlmeReq.Type = MLME_DEVICE_TIME;
 804d282:	a80c      	add	r0, sp, #48	; 0x30
 804d284:	2309      	movs	r3, #9
 804d286:	e7b9      	b.n	804d1fc <certif_rx+0x104>
 804d288:	2000b338 	.word	0x2000b338
 804d28c:	0804d0b9 	.word	0x0804d0b9
 804d290:	2000b438 	.word	0x2000b438

0804d294 <MlmeIndication>:
    MibRequestConfirm_t mibReq;
#endif /* LORAMAC_CLASSB_ENABLED */

    TVL2( PRINTNOW(); PRINTF("APP> MLMEInd STATUS: %s\r\n", EventInfoStatusStrings[MlmeIndication->Status] );    )

    switch( MlmeIndication->MlmeIndication )
 804d294:	7803      	ldrb	r3, [r0, #0]
 804d296:	2b06      	cmp	r3, #6
 804d298:	d103      	bne.n	804d2a2 <MlmeIndication+0xe>
    {
        case MLME_SCHEDULE_UPLINK:
        {
            // The MAC signals that we shall provide an uplink as soon as possible
            LoRaMainCallbacks->LORA_TxNeeded( );			
 804d29a:	4b02      	ldr	r3, [pc, #8]	; (804d2a4 <MlmeIndication+0x10>)
 804d29c:	681b      	ldr	r3, [r3, #0]
 804d29e:	69db      	ldr	r3, [r3, #28]
 804d2a0:	4718      	bx	r3
        }
#endif /* LORAMAC_CLASSB_ENABLED */
        default:
            break;
    }
}
 804d2a2:	4770      	bx	lr
 804d2a4:	2000b454 	.word	0x2000b454

0804d2a8 <McpsIndication>:
{
 804d2a8:	b570      	push	{r4, r5, r6, lr}
    if( mcpsIndication->Status != LORAMAC_EVENT_INFO_STATUS_OK )
 804d2aa:	7843      	ldrb	r3, [r0, #1]
{
 804d2ac:	b08e      	sub	sp, #56	; 0x38
 804d2ae:	4604      	mov	r4, r0
    if( mcpsIndication->Status != LORAMAC_EVENT_INFO_STATUS_OK )
 804d2b0:	2b00      	cmp	r3, #0
 804d2b2:	d136      	bne.n	804d322 <McpsIndication+0x7a>
    if( mcpsIndication->FramePending == true )
 804d2b4:	7943      	ldrb	r3, [r0, #5]
 804d2b6:	2b01      	cmp	r3, #1
 804d2b8:	d103      	bne.n	804d2c2 <McpsIndication+0x1a>
        LoRaMainCallbacks->LORA_TxNeeded( );
 804d2ba:	4b22      	ldr	r3, [pc, #136]	; (804d344 <McpsIndication+0x9c>)
 804d2bc:	681b      	ldr	r3, [r3, #0]
 804d2be:	69db      	ldr	r3, [r3, #28]
 804d2c0:	4798      	blx	r3
    if (certif_running() == true )
 804d2c2:	f7ff fefb 	bl	804d0bc <certif_running>
 804d2c6:	b108      	cbz	r0, 804d2cc <McpsIndication+0x24>
      certif_DownLinkIncrement( );
 804d2c8:	f7ff fefe 	bl	804d0c8 <certif_DownLinkIncrement>
    if( mcpsIndication->RxData == true )
 804d2cc:	7b63      	ldrb	r3, [r4, #13]
 804d2ce:	b133      	cbz	r3, 804d2de <McpsIndication+0x36>
      switch( mcpsIndication->Port )
 804d2d0:	78e3      	ldrb	r3, [r4, #3]
 804d2d2:	2be0      	cmp	r3, #224	; 0xe0
 804d2d4:	d127      	bne.n	804d326 <McpsIndication+0x7e>
          certif_rx( mcpsIndication, &JoinParameters );
 804d2d6:	491c      	ldr	r1, [pc, #112]	; (804d348 <McpsIndication+0xa0>)
 804d2d8:	4620      	mov	r0, r4
 804d2da:	f7ff ff0d 	bl	804d0f8 <certif_rx>
} 


static void TraceDownLinkFrame(McpsIndication_t *mcpsIndication)
{
    const char *slotStrings[] = { "1", "2", "C", "Ping-Slot", "Multicast Ping-Slot" };
 804d2de:	4e1b      	ldr	r6, [pc, #108]	; (804d34c <McpsIndication+0xa4>)
 804d2e0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 804d2e2:	ad09      	add	r5, sp, #36	; 0x24
 804d2e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 804d2e6:	6833      	ldr	r3, [r6, #0]
 804d2e8:	602b      	str	r3, [r5, #0]
                             slotStrings[mcpsIndication->RxSlot], \
                             mcpsIndication->Port, \
                             mcpsIndication->BufferSize, \
                             mcpsIndication->Rssi, \
                             mcpsIndication->Snr );)
	PRINTNOW();
 804d2ea:	a807      	add	r0, sp, #28
 804d2ec:	f000 fbff 	bl	804daee <SysTimeGetMcuTime>
 804d2f0:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 804d2f4:	9907      	ldr	r1, [sp, #28]
 804d2f6:	4816      	ldr	r0, [pc, #88]	; (804d350 <McpsIndication+0xa8>)
 804d2f8:	f000 fd34 	bl	804dd64 <TraceSend>
    PRINTF("#= D/L FRAME %lu =# RxWin %s, Port %d, data size %d, rssi %d, snr %d\r\n\r\n", \
 804d2fc:	7c62      	ldrb	r2, [r4, #17]
 804d2fe:	78e3      	ldrb	r3, [r4, #3]
 804d300:	4814      	ldr	r0, [pc, #80]	; (804d354 <McpsIndication+0xac>)
 804d302:	a90e      	add	r1, sp, #56	; 0x38
 804d304:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 804d308:	f994 1010 	ldrsb.w	r1, [r4, #16]
 804d30c:	9102      	str	r1, [sp, #8]
 804d30e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 804d312:	9101      	str	r1, [sp, #4]
 804d314:	7b21      	ldrb	r1, [r4, #12]
 804d316:	9100      	str	r1, [sp, #0]
 804d318:	f852 2c14 	ldr.w	r2, [r2, #-20]
 804d31c:	6961      	ldr	r1, [r4, #20]
 804d31e:	f000 fd21 	bl	804dd64 <TraceSend>
}
 804d322:	b00e      	add	sp, #56	; 0x38
 804d324:	bd70      	pop	{r4, r5, r6, pc}
          AppData.Port = mcpsIndication->Port;
 804d326:	f88d 3019 	strb.w	r3, [sp, #25]
          AppData.Buff = mcpsIndication->Buffer;
 804d32a:	a80e      	add	r0, sp, #56	; 0x38
          AppData.BuffSize = mcpsIndication->BufferSize;
 804d32c:	7b23      	ldrb	r3, [r4, #12]
 804d32e:	f88d 3018 	strb.w	r3, [sp, #24]
          AppData.Buff = mcpsIndication->Buffer;
 804d332:	68a3      	ldr	r3, [r4, #8]
 804d334:	f840 3d24 	str.w	r3, [r0, #-36]!
          LoRaMainCallbacks->LORA_RxData( &AppData );
 804d338:	4b02      	ldr	r3, [pc, #8]	; (804d344 <McpsIndication+0x9c>)
 804d33a:	681b      	ldr	r3, [r3, #0]
 804d33c:	691b      	ldr	r3, [r3, #16]
 804d33e:	4798      	blx	r3
 804d340:	e7cd      	b.n	804d2de <McpsIndication+0x36>
 804d342:	bf00      	nop
 804d344:	2000b454 	.word	0x2000b454
 804d348:	2000b458 	.word	0x2000b458
 804d34c:	08051d94 	.word	0x08051d94
 804d350:	08051ef3 	.word	0x08051ef3
 804d354:	080520b5 	.word	0x080520b5

0804d358 <McpsConfirm>:
{
 804d358:	b500      	push	{lr}
 804d35a:	b091      	sub	sp, #68	; 0x44
    mibReq.Type = MIB_DEVICE_CLASS;
 804d35c:	a810      	add	r0, sp, #64	; 0x40
 804d35e:	2300      	movs	r3, #0
 804d360:	f800 3d20 	strb.w	r3, [r0, #-32]!
    LoRaMacMibGetRequestConfirm( &mibReq );
 804d364:	f7fd f9ac 	bl	804a6c0 <LoRaMacMibGetRequestConfirm>
    mibGet.Type  = MIB_CHANNELS_MASK;
 804d368:	a810      	add	r0, sp, #64	; 0x40
 804d36a:	2324      	movs	r3, #36	; 0x24
 804d36c:	f800 3d40 	strb.w	r3, [r0, #-64]!
    if( LoRaMacMibGetRequestConfirm( &mibGet ) == LORAMAC_STATUS_OK )
 804d370:	f7fd f9a6 	bl	804a6c0 <LoRaMacMibGetRequestConfirm>
}
 804d374:	b011      	add	sp, #68	; 0x44
 804d376:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0804d37c <LORA_Init>:
{
 804d37c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t devEui[] = LORAWAN_DEVICE_EUI;
 804d380:	4a6f      	ldr	r2, [pc, #444]	; (804d540 <LORA_Init+0x1c4>)
  LoRaParamInit = LoRaParam;
 804d382:	4c70      	ldr	r4, [pc, #448]	; (804d544 <LORA_Init+0x1c8>)
{
 804d384:	b092      	sub	sp, #72	; 0x48
 804d386:	4605      	mov	r5, r0
 804d388:	460e      	mov	r6, r1
  uint8_t devEui[] = LORAWAN_DEVICE_EUI;
 804d38a:	6810      	ldr	r0, [r2, #0]
 804d38c:	6851      	ldr	r1, [r2, #4]
  LoRaMainCallbacks = callbacks;
 804d38e:	6025      	str	r5, [r4, #0]
  uint8_t devEui[] = LORAWAN_DEVICE_EUI;
 804d390:	ab0e      	add	r3, sp, #56	; 0x38
  uint8_t joinEui[] = LORAWAN_JOIN_EUI;
 804d392:	f10d 0840 	add.w	r8, sp, #64	; 0x40
  uint8_t devEui[] = LORAWAN_DEVICE_EUI;
 804d396:	c303      	stmia	r3!, {r0, r1}
  PPRINTF( "ABP\n\r"); 
 804d398:	4d6b      	ldr	r5, [pc, #428]	; (804d548 <LORA_Init+0x1cc>)
  LoRaParamInit = LoRaParam;
 804d39a:	60a6      	str	r6, [r4, #8]
  uint8_t joinEui[] = LORAWAN_JOIN_EUI;
 804d39c:	2300      	movs	r3, #0
 804d39e:	9310      	str	r3, [sp, #64]	; 0x40
 804d3a0:	f8c8 3004 	str.w	r3, [r8, #4]
  PPRINTF( "ABP\n\r"); 
 804d3a4:	4628      	mov	r0, r5
 804d3a6:	f000 fcdd 	bl	804dd64 <TraceSend>
 804d3aa:	2800      	cmp	r0, #0
 804d3ac:	d1fa      	bne.n	804d3a4 <LORA_Init+0x28>
  PPRINTF( "DevEui= %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\n\r", HEX8(devEui));
 804d3ae:	4d67      	ldr	r5, [pc, #412]	; (804d54c <LORA_Init+0x1d0>)
 804d3b0:	f89d 003f 	ldrb.w	r0, [sp, #63]	; 0x3f
 804d3b4:	9004      	str	r0, [sp, #16]
 804d3b6:	f89d 003e 	ldrb.w	r0, [sp, #62]	; 0x3e
 804d3ba:	9003      	str	r0, [sp, #12]
 804d3bc:	f89d 003d 	ldrb.w	r0, [sp, #61]	; 0x3d
 804d3c0:	9002      	str	r0, [sp, #8]
 804d3c2:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 804d3c6:	9001      	str	r0, [sp, #4]
 804d3c8:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
 804d3cc:	9000      	str	r0, [sp, #0]
 804d3ce:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 804d3d2:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 804d3d6:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 804d3da:	4628      	mov	r0, r5
 804d3dc:	f000 fcc2 	bl	804dd64 <TraceSend>
 804d3e0:	2800      	cmp	r0, #0
 804d3e2:	d1e5      	bne.n	804d3b0 <LORA_Init+0x34>
  PPRINTF( "DevAdd=  %08X\n\r", DevAddr) ;
 804d3e4:	4e5a      	ldr	r6, [pc, #360]	; (804d550 <LORA_Init+0x1d4>)
 804d3e6:	4d5b      	ldr	r5, [pc, #364]	; (804d554 <LORA_Init+0x1d8>)
 804d3e8:	4631      	mov	r1, r6
 804d3ea:	4628      	mov	r0, r5
 804d3ec:	f000 fcba 	bl	804dd64 <TraceSend>
 804d3f0:	2800      	cmp	r0, #0
 804d3f2:	d1f9      	bne.n	804d3e8 <LORA_Init+0x6c>
  PPRINTF( "NwkSKey= %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n\r", HEX16(NwkSEncKey));
 804d3f4:	4d58      	ldr	r5, [pc, #352]	; (804d558 <LORA_Init+0x1dc>)
 804d3f6:	4f59      	ldr	r7, [pc, #356]	; (804d55c <LORA_Init+0x1e0>)
 804d3f8:	462e      	mov	r6, r5
 804d3fa:	7be8      	ldrb	r0, [r5, #15]
 804d3fc:	78ab      	ldrb	r3, [r5, #2]
 804d3fe:	786a      	ldrb	r2, [r5, #1]
 804d400:	7829      	ldrb	r1, [r5, #0]
 804d402:	900c      	str	r0, [sp, #48]	; 0x30
 804d404:	7ba8      	ldrb	r0, [r5, #14]
 804d406:	900b      	str	r0, [sp, #44]	; 0x2c
 804d408:	7b68      	ldrb	r0, [r5, #13]
 804d40a:	900a      	str	r0, [sp, #40]	; 0x28
 804d40c:	7b28      	ldrb	r0, [r5, #12]
 804d40e:	9009      	str	r0, [sp, #36]	; 0x24
 804d410:	7ae8      	ldrb	r0, [r5, #11]
 804d412:	9008      	str	r0, [sp, #32]
 804d414:	7aa8      	ldrb	r0, [r5, #10]
 804d416:	9007      	str	r0, [sp, #28]
 804d418:	7a68      	ldrb	r0, [r5, #9]
 804d41a:	9006      	str	r0, [sp, #24]
 804d41c:	7a28      	ldrb	r0, [r5, #8]
 804d41e:	9005      	str	r0, [sp, #20]
 804d420:	79e8      	ldrb	r0, [r5, #7]
 804d422:	9004      	str	r0, [sp, #16]
 804d424:	79a8      	ldrb	r0, [r5, #6]
 804d426:	9003      	str	r0, [sp, #12]
 804d428:	7968      	ldrb	r0, [r5, #5]
 804d42a:	9002      	str	r0, [sp, #8]
 804d42c:	7928      	ldrb	r0, [r5, #4]
 804d42e:	9001      	str	r0, [sp, #4]
 804d430:	78e8      	ldrb	r0, [r5, #3]
 804d432:	9000      	str	r0, [sp, #0]
 804d434:	4638      	mov	r0, r7
 804d436:	f000 fc95 	bl	804dd64 <TraceSend>
 804d43a:	2800      	cmp	r0, #0
 804d43c:	d1dd      	bne.n	804d3fa <LORA_Init+0x7e>
  PPRINTF( "AppSKey= %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n\r", HEX16(AppSKey));
 804d43e:	4d48      	ldr	r5, [pc, #288]	; (804d560 <LORA_Init+0x1e4>)
 804d440:	7ff0      	ldrb	r0, [r6, #31]
 804d442:	7cb3      	ldrb	r3, [r6, #18]
 804d444:	7c72      	ldrb	r2, [r6, #17]
 804d446:	7c31      	ldrb	r1, [r6, #16]
 804d448:	900c      	str	r0, [sp, #48]	; 0x30
 804d44a:	7fb0      	ldrb	r0, [r6, #30]
 804d44c:	900b      	str	r0, [sp, #44]	; 0x2c
 804d44e:	7f70      	ldrb	r0, [r6, #29]
 804d450:	900a      	str	r0, [sp, #40]	; 0x28
 804d452:	7f30      	ldrb	r0, [r6, #28]
 804d454:	9009      	str	r0, [sp, #36]	; 0x24
 804d456:	7ef0      	ldrb	r0, [r6, #27]
 804d458:	9008      	str	r0, [sp, #32]
 804d45a:	7eb0      	ldrb	r0, [r6, #26]
 804d45c:	9007      	str	r0, [sp, #28]
 804d45e:	7e70      	ldrb	r0, [r6, #25]
 804d460:	9006      	str	r0, [sp, #24]
 804d462:	7e30      	ldrb	r0, [r6, #24]
 804d464:	9005      	str	r0, [sp, #20]
 804d466:	7df0      	ldrb	r0, [r6, #23]
 804d468:	9004      	str	r0, [sp, #16]
 804d46a:	7db0      	ldrb	r0, [r6, #22]
 804d46c:	9003      	str	r0, [sp, #12]
 804d46e:	7d70      	ldrb	r0, [r6, #21]
 804d470:	9002      	str	r0, [sp, #8]
 804d472:	7d30      	ldrb	r0, [r6, #20]
 804d474:	9001      	str	r0, [sp, #4]
 804d476:	7cf0      	ldrb	r0, [r6, #19]
 804d478:	9000      	str	r0, [sp, #0]
 804d47a:	4628      	mov	r0, r5
 804d47c:	f000 fc72 	bl	804dd64 <TraceSend>
 804d480:	4607      	mov	r7, r0
 804d482:	2800      	cmp	r0, #0
 804d484:	d1dc      	bne.n	804d440 <LORA_Init+0xc4>
  LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 804d486:	4b37      	ldr	r3, [pc, #220]	; (804d564 <LORA_Init+0x1e8>)
 804d488:	60e3      	str	r3, [r4, #12]
  LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 804d48a:	4b37      	ldr	r3, [pc, #220]	; (804d568 <LORA_Init+0x1ec>)
 804d48c:	6123      	str	r3, [r4, #16]
  LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 804d48e:	4b37      	ldr	r3, [pc, #220]	; (804d56c <LORA_Init+0x1f0>)
 804d490:	6163      	str	r3, [r4, #20]
  LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 804d492:	4b37      	ldr	r3, [pc, #220]	; (804d570 <LORA_Init+0x1f4>)
 804d494:	61a3      	str	r3, [r4, #24]
  LoRaMacCallbacks.GetBatteryLevel = LoRaMainCallbacks->BoardGetBatteryLevel;
 804d496:	6823      	ldr	r3, [r4, #0]
  LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_AU915 );
 804d498:	4936      	ldr	r1, [pc, #216]	; (804d574 <LORA_Init+0x1f8>)
  LoRaMacCallbacks.GetBatteryLevel = LoRaMainCallbacks->BoardGetBatteryLevel;
 804d49a:	681a      	ldr	r2, [r3, #0]
 804d49c:	61e2      	str	r2, [r4, #28]
  LoRaMacCallbacks.GetTemperatureLevel = LoRaMainCallbacks->BoardGetTemperatureLevel;
 804d49e:	685a      	ldr	r2, [r3, #4]
 804d4a0:	6222      	str	r2, [r4, #32]
  LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_AU915 );
 804d4a2:	f1a1 0010 	sub.w	r0, r1, #16
 804d4a6:	2201      	movs	r2, #1
  LoRaMacCallbacks.MacProcessNotify = LoRaMainCallbacks->MacProcessNotify;
 804d4a8:	6a1b      	ldr	r3, [r3, #32]
 804d4aa:	62a3      	str	r3, [r4, #40]	; 0x28
  LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_AU915 );
 804d4ac:	f7fc feae 	bl	804a20c <LoRaMacInitialization>
  mibReq.Type = MIB_DEV_EUI;
 804d4b0:	2302      	movs	r3, #2
 804d4b2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  LoRaMacMibSetRequestConfirm( &mibReq );
 804d4b6:	4830      	ldr	r0, [pc, #192]	; (804d578 <LORA_Init+0x1fc>)
  mibReq.Param.AppKey = AppKey;
 804d4b8:	4d30      	ldr	r5, [pc, #192]	; (804d57c <LORA_Init+0x200>)
  mibReq.Param.DevEui = devEui;
 804d4ba:	ab0e      	add	r3, sp, #56	; 0x38
 804d4bc:	6323      	str	r3, [r4, #48]	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 804d4be:	f7fd f9db 	bl	804a878 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_JOIN_EUI;
 804d4c2:	2303      	movs	r3, #3
  LoRaMacMibSetRequestConfirm( &mibReq );
 804d4c4:	482c      	ldr	r0, [pc, #176]	; (804d578 <LORA_Init+0x1fc>)
  mibReq.Type = MIB_JOIN_EUI;
 804d4c6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  mibReq.Param.JoinEui = joinEui;
 804d4ca:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 804d4ce:	f7fd f9d3 	bl	804a878 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_ADR;
 804d4d2:	2304      	movs	r3, #4
 804d4d4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  mibReq.Param.AdrEnable = LoRaParamInit->AdrEnable;
 804d4d8:	68a3      	ldr	r3, [r4, #8]
  LoRaMacMibSetRequestConfirm( &mibReq );
 804d4da:	4827      	ldr	r0, [pc, #156]	; (804d578 <LORA_Init+0x1fc>)
  mibReq.Param.AdrEnable = LoRaParamInit->AdrEnable;
 804d4dc:	781b      	ldrb	r3, [r3, #0]
 804d4de:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 804d4e2:	f7fd f9c9 	bl	804a878 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_PUBLIC_NETWORK;
 804d4e6:	231d      	movs	r3, #29
 804d4e8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  mibReq.Param.EnablePublicNetwork = LoRaParamInit->EnablePublicNetwork;
 804d4ec:	68a3      	ldr	r3, [r4, #8]
  LoRaMacMibSetRequestConfirm( &mibReq );
 804d4ee:	4822      	ldr	r0, [pc, #136]	; (804d578 <LORA_Init+0x1fc>)
  mibReq.Param.EnablePublicNetwork = LoRaParamInit->EnablePublicNetwork;
 804d4f0:	789b      	ldrb	r3, [r3, #2]
 804d4f2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 804d4f6:	f7fd f9bf 	bl	804a878 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_APP_KEY;
 804d4fa:	2308      	movs	r3, #8
  LoRaMacMibSetRequestConfirm( &mibReq );
 804d4fc:	481e      	ldr	r0, [pc, #120]	; (804d578 <LORA_Init+0x1fc>)
  mibReq.Type = MIB_APP_KEY;
 804d4fe:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  mibReq.Param.AppKey = AppKey;
 804d502:	6325      	str	r5, [r4, #48]	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 804d504:	f7fd f9b8 	bl	804a878 <LoRaMacMibSetRequestConfirm>
  mibReq.Param.NwkKey = NwkKey;
 804d508:	3510      	adds	r5, #16
  mibReq.Type = MIB_NWK_KEY;
 804d50a:	2309      	movs	r3, #9
  LoRaMacMibSetRequestConfirm( &mibReq );
 804d50c:	481a      	ldr	r0, [pc, #104]	; (804d578 <LORA_Init+0x1fc>)
  mibReq.Type = MIB_NWK_KEY;
 804d50e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  mibReq.Param.NwkKey = NwkKey;
 804d512:	6325      	str	r5, [r4, #48]	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 804d514:	f7fd f9b0 	bl	804a878 <LoRaMacMibSetRequestConfirm>
  LoRaMacMibSetRequestConfirm( &mibReq );
 804d518:	4817      	ldr	r0, [pc, #92]	; (804d578 <LORA_Init+0x1fc>)
  mibReq.Type = MIB_DEVICE_CLASS;
 804d51a:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
  mibReq.Param.Class= CLASS_A;
 804d51e:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 804d522:	f7fd f9a9 	bl	804a878 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 804d526:	2330      	movs	r3, #48	; 0x30
 804d528:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  LoRaMacMibSetRequestConfirm( &mibReq );
 804d52c:	4812      	ldr	r0, [pc, #72]	; (804d578 <LORA_Init+0x1fc>)
  mibReq.Param.SystemMaxRxError = 20;
 804d52e:	2314      	movs	r3, #20
 804d530:	6323      	str	r3, [r4, #48]	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 804d532:	f7fd f9a1 	bl	804a878 <LoRaMacMibSetRequestConfirm>
  LoRaMacStart( );
 804d536:	f7fd f85b 	bl	804a5f0 <LoRaMacStart>
}
 804d53a:	b012      	add	sp, #72	; 0x48
 804d53c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804d540:	08051da8 	.word	0x08051da8
 804d544:	2000b454 	.word	0x2000b454
 804d548:	080520fe 	.word	0x080520fe
 804d54c:	08052104 	.word	0x08052104
 804d550:	20000001 	.word	0x20000001
 804d554:	08052136 	.word	0x08052136
 804d558:	200010f0 	.word	0x200010f0
 804d55c:	08052146 	.word	0x08052146
 804d560:	080521a1 	.word	0x080521a1
 804d564:	0804d359 	.word	0x0804d359
 804d568:	0804d2a9 	.word	0x0804d2a9
 804d56c:	0804d62d 	.word	0x0804d62d
 804d570:	0804d295 	.word	0x0804d295
 804d574:	2000b470 	.word	0x2000b470
 804d578:	2000b480 	.word	0x2000b480
 804d57c:	20001110 	.word	0x20001110

0804d580 <LORA_Join>:
{
 804d580:	b570      	push	{r4, r5, r6, lr}
    JoinParameters = mlmeReq.Req.Join;
 804d582:	4c26      	ldr	r4, [pc, #152]	; (804d61c <LORA_Join+0x9c>)
    mibReq.Param.FNwkSIntKey = FNwkSIntKey;
 804d584:	4e26      	ldr	r6, [pc, #152]	; (804d620 <LORA_Join+0xa0>)
    mlmeReq.Req.Join.Datarate = LoRaParamInit->TxDatarate;
 804d586:	68a3      	ldr	r3, [r4, #8]
    JoinParameters = mlmeReq.Req.Join;
 804d588:	785b      	ldrb	r3, [r3, #1]
 804d58a:	7123      	strb	r3, [r4, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 804d58c:	f104 052c 	add.w	r5, r4, #44	; 0x2c
    mibReq.Type = MIB_NET_ID;
 804d590:	2305      	movs	r3, #5
 804d592:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    LoRaMacMibSetRequestConfirm( &mibReq );
 804d596:	4628      	mov	r0, r5
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 804d598:	2300      	movs	r3, #0
 804d59a:	6323      	str	r3, [r4, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 804d59c:	f7fd f96c 	bl	804a878 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_DEV_ADDR;
 804d5a0:	2306      	movs	r3, #6
 804d5a2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    LoRaMacMibSetRequestConfirm( &mibReq );
 804d5a6:	4628      	mov	r0, r5
    mibReq.Param.DevAddr = DevAddr;
 804d5a8:	4b1e      	ldr	r3, [pc, #120]	; (804d624 <LORA_Join+0xa4>)
 804d5aa:	6323      	str	r3, [r4, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 804d5ac:	f7fd f964 	bl	804a878 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_F_NWK_S_INT_KEY;
 804d5b0:	230c      	movs	r3, #12
 804d5b2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    LoRaMacMibSetRequestConfirm( &mibReq );
 804d5b6:	4628      	mov	r0, r5
    mibReq.Param.FNwkSIntKey = FNwkSIntKey;
 804d5b8:	f106 0340 	add.w	r3, r6, #64	; 0x40
 804d5bc:	6323      	str	r3, [r4, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 804d5be:	f7fd f95b 	bl	804a878 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_S_NWK_S_INT_KEY;
 804d5c2:	230d      	movs	r3, #13
 804d5c4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    LoRaMacMibSetRequestConfirm( &mibReq );
 804d5c8:	4628      	mov	r0, r5
    mibReq.Param.SNwkSIntKey = SNwkSIntKey;
 804d5ca:	f106 0350 	add.w	r3, r6, #80	; 0x50
 804d5ce:	6323      	str	r3, [r4, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 804d5d0:	f7fd f952 	bl	804a878 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_NWK_S_ENC_KEY;
 804d5d4:	230e      	movs	r3, #14
    LoRaMacMibSetRequestConfirm( &mibReq );
 804d5d6:	4628      	mov	r0, r5
    mibReq.Type = MIB_NWK_S_ENC_KEY;
 804d5d8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    mibReq.Param.NwkSEncKey = NwkSEncKey;
 804d5dc:	6326      	str	r6, [r4, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 804d5de:	f7fd f94b 	bl	804a878 <LoRaMacMibSetRequestConfirm>
    mibReq.Param.AppSKey = AppSKey;
 804d5e2:	3610      	adds	r6, #16
    mibReq.Type = MIB_APP_S_KEY;
 804d5e4:	230f      	movs	r3, #15
    LoRaMacMibSetRequestConfirm( &mibReq );
 804d5e6:	4628      	mov	r0, r5
    mibReq.Type = MIB_APP_S_KEY;
 804d5e8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    mibReq.Param.AppSKey = AppSKey;
 804d5ec:	6326      	str	r6, [r4, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 804d5ee:	f7fd f943 	bl	804a878 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 804d5f2:	2301      	movs	r3, #1
    LoRaMacMibSetRequestConfirm( &mibReq );
 804d5f4:	4628      	mov	r0, r5
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 804d5f6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 804d5fa:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 804d5fe:	f7fd f93b 	bl	804a878 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 804d602:	2335      	movs	r3, #53	; 0x35
 804d604:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    LoRaMacMibSetRequestConfirm( &mibReq );
 804d608:	4628      	mov	r0, r5
    mibReq.Param.AbpLrWanVersion = abpLrWanVersion;
 804d60a:	4b07      	ldr	r3, [pc, #28]	; (804d628 <LORA_Join+0xa8>)
 804d60c:	6323      	str	r3, [r4, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 804d60e:	f7fd f933 	bl	804a878 <LoRaMacMibSetRequestConfirm>
    LoRaMainCallbacks->LORA_HasJoined();
 804d612:	6823      	ldr	r3, [r4, #0]
}
 804d614:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LoRaMainCallbacks->LORA_HasJoined();
 804d618:	695b      	ldr	r3, [r3, #20]
 804d61a:	4718      	bx	r3
 804d61c:	2000b454 	.word	0x2000b454
 804d620:	200010f0 	.word	0x200010f0
 804d624:	20000001 	.word	0x20000001
 804d628:	01000300 	.word	0x01000300

0804d62c <MlmeConfirm>:
    PRINTF("APP> MlmeConfirm STATUS: %s\r\n", EventInfoStatusStrings[mlmeConfirm->Status] );
 804d62c:	7842      	ldrb	r2, [r0, #1]
 804d62e:	4b13      	ldr	r3, [pc, #76]	; (804d67c <MlmeConfirm+0x50>)
 804d630:	eb03 0382 	add.w	r3, r3, r2, lsl #2
{
 804d634:	b510      	push	{r4, lr}
 804d636:	4604      	mov	r4, r0
    PRINTF("APP> MlmeConfirm STATUS: %s\r\n", EventInfoStatusStrings[mlmeConfirm->Status] );
 804d638:	6e19      	ldr	r1, [r3, #96]	; 0x60
 804d63a:	4811      	ldr	r0, [pc, #68]	; (804d680 <MlmeConfirm+0x54>)
 804d63c:	f000 fb92 	bl	804dd64 <TraceSend>
    switch( mlmeConfirm->MlmeRequest )
 804d640:	7823      	ldrb	r3, [r4, #0]
 804d642:	b113      	cbz	r3, 804d64a <MlmeConfirm+0x1e>
 804d644:	2b03      	cmp	r3, #3
 804d646:	d00c      	beq.n	804d662 <MlmeConfirm+0x36>
}
 804d648:	bd10      	pop	{r4, pc}
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 804d64a:	7863      	ldrb	r3, [r4, #1]
 804d64c:	b92b      	cbnz	r3, 804d65a <MlmeConfirm+0x2e>
              LoRaMainCallbacks->LORA_HasJoined();
 804d64e:	4b0d      	ldr	r3, [pc, #52]	; (804d684 <MlmeConfirm+0x58>)
 804d650:	681b      	ldr	r3, [r3, #0]
}
 804d652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
              LoRaMainCallbacks->LORA_HasJoined();
 804d656:	695b      	ldr	r3, [r3, #20]
 804d658:	4718      	bx	r3
}
 804d65a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                LORA_Join();
 804d65e:	f7ff bf8f 	b.w	804d580 <LORA_Join>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 804d662:	7863      	ldrb	r3, [r4, #1]
 804d664:	2b00      	cmp	r3, #0
 804d666:	d1ef      	bne.n	804d648 <MlmeConfirm+0x1c>
                if (certif_running() == true )
 804d668:	f7ff fd28 	bl	804d0bc <certif_running>
 804d66c:	2800      	cmp	r0, #0
 804d66e:	d0eb      	beq.n	804d648 <MlmeConfirm+0x1c>
                     certif_linkCheck( mlmeConfirm);
 804d670:	4620      	mov	r0, r4
}
 804d672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                     certif_linkCheck( mlmeConfirm);
 804d676:	f7ff bd31 	b.w	804d0dc <certif_linkCheck>
 804d67a:	bf00      	nop
 804d67c:	200010f0 	.word	0x200010f0
 804d680:	080521fc 	.word	0x080521fc
 804d684:	2000b454 	.word	0x2000b454

0804d688 <LORA_JoinStatus>:
{
 804d688:	b500      	push	{lr}
 804d68a:	b089      	sub	sp, #36	; 0x24
  mibReq.Type = MIB_NETWORK_ACTIVATION;
 804d68c:	a808      	add	r0, sp, #32
 804d68e:	2301      	movs	r3, #1
 804d690:	f800 3d20 	strb.w	r3, [r0, #-32]!
  LoRaMacMibGetRequestConfirm( &mibReq );
 804d694:	f7fd f814 	bl	804a6c0 <LoRaMacMibGetRequestConfirm>
  if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 804d698:	f89d 0004 	ldrb.w	r0, [sp, #4]
}
 804d69c:	3000      	adds	r0, #0
 804d69e:	bf18      	it	ne
 804d6a0:	2001      	movne	r0, #1
 804d6a2:	b009      	add	sp, #36	; 0x24
 804d6a4:	f85d fb04 	ldr.w	pc, [sp], #4

0804d6a8 <LORA_send>:
{
 804d6a8:	b570      	push	{r4, r5, r6, lr}
 804d6aa:	b086      	sub	sp, #24
 804d6ac:	4604      	mov	r4, r0
 804d6ae:	460e      	mov	r6, r1
    if (certif_running() == true)
 804d6b0:	f7ff fd04 	bl	804d0bc <certif_running>
 804d6b4:	4605      	mov	r5, r0
 804d6b6:	b128      	cbz	r0, 804d6c4 <LORA_send+0x1c>
    	PRINTF("Test mode");
 804d6b8:	481b      	ldr	r0, [pc, #108]	; (804d728 <LORA_send+0x80>)
 804d6ba:	f000 fb53 	bl	804dd64 <TraceSend>
      return false;
 804d6be:	2000      	movs	r0, #0
}  
 804d6c0:	b006      	add	sp, #24
 804d6c2:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacQueryTxPossible( AppData->BuffSize, &txInfo ) != LORAMAC_STATUS_OK )
 804d6c4:	a901      	add	r1, sp, #4
 804d6c6:	7920      	ldrb	r0, [r4, #4]
 804d6c8:	f7fc ff9a 	bl	804a600 <LoRaMacQueryTxPossible>
 804d6cc:	4b17      	ldr	r3, [pc, #92]	; (804d72c <LORA_send+0x84>)
 804d6ce:	b178      	cbz	r0, 804d6f0 <LORA_send+0x48>
        mcpsReq.Req.Unconfirmed.Datarate = LoRaParamInit->TxDatarate;
 804d6d0:	689b      	ldr	r3, [r3, #8]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 804d6d2:	9504      	str	r5, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 804d6d4:	f8ad 5014 	strh.w	r5, [sp, #20]
        mcpsReq.Req.Unconfirmed.Datarate = LoRaParamInit->TxDatarate;
 804d6d8:	785b      	ldrb	r3, [r3, #1]
        mcpsReq.Type = MCPS_UNCONFIRMED;
 804d6da:	f88d 5008 	strb.w	r5, [sp, #8]
    if( LoRaMacMcpsRequest( &mcpsReq ) == LORAMAC_STATUS_OK )
 804d6de:	a802      	add	r0, sp, #8
            mcpsReq.Req.Confirmed.Datarate = LoRaParamInit->TxDatarate;
 804d6e0:	f88d 3016 	strb.w	r3, [sp, #22]
    if( LoRaMacMcpsRequest( &mcpsReq ) == LORAMAC_STATUS_OK )
 804d6e4:	f7fd fc04 	bl	804aef0 <LoRaMacMcpsRequest>
 804d6e8:	3000      	adds	r0, #0
 804d6ea:	bf18      	it	ne
 804d6ec:	2001      	movne	r0, #1
 804d6ee:	e7e7      	b.n	804d6c0 <LORA_send+0x18>
 804d6f0:	689b      	ldr	r3, [r3, #8]
 804d6f2:	7960      	ldrb	r0, [r4, #5]
 804d6f4:	7921      	ldrb	r1, [r4, #4]
 804d6f6:	6822      	ldr	r2, [r4, #0]
 804d6f8:	f993 3001 	ldrsb.w	r3, [r3, #1]
        if( IsTxConfirmed == LORAWAN_UNCONFIRMED_MSG )
 804d6fc:	b93e      	cbnz	r6, 804d70e <LORA_send+0x66>
            mcpsReq.Type = MCPS_UNCONFIRMED;
 804d6fe:	f88d 6008 	strb.w	r6, [sp, #8]
            mcpsReq.Req.Unconfirmed.fPort = AppData->Port;
 804d702:	f88d 000c 	strb.w	r0, [sp, #12]
            mcpsReq.Req.Unconfirmed.fBufferSize = AppData->BuffSize;
 804d706:	f8ad 1014 	strh.w	r1, [sp, #20]
            mcpsReq.Req.Unconfirmed.fBuffer = AppData->Buff;
 804d70a:	9204      	str	r2, [sp, #16]
 804d70c:	e7e7      	b.n	804d6de <LORA_send+0x36>
            mcpsReq.Type = MCPS_CONFIRMED;
 804d70e:	2401      	movs	r4, #1
            mcpsReq.Req.Confirmed.fBuffer = AppData->Buff;
 804d710:	9204      	str	r2, [sp, #16]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 804d712:	2208      	movs	r2, #8
            mcpsReq.Type = MCPS_CONFIRMED;
 804d714:	f88d 4008 	strb.w	r4, [sp, #8]
            mcpsReq.Req.Confirmed.fPort = AppData->Port;
 804d718:	f88d 000c 	strb.w	r0, [sp, #12]
            mcpsReq.Req.Confirmed.fBufferSize = AppData->BuffSize;
 804d71c:	f8ad 1014 	strh.w	r1, [sp, #20]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 804d720:	f88d 2017 	strb.w	r2, [sp, #23]
 804d724:	e7db      	b.n	804d6de <LORA_send+0x36>
 804d726:	bf00      	nop
 804d728:	0805221a 	.word	0x0805221a
 804d72c:	2000b454 	.word	0x2000b454

0804d730 <LORA_RequestClass>:
{
 804d730:	b570      	push	{r4, r5, r6, lr}
 804d732:	b088      	sub	sp, #32
  mibReq.Type = MIB_DEVICE_CLASS;
 804d734:	ae08      	add	r6, sp, #32
 804d736:	2400      	movs	r4, #0
 804d738:	f806 4d20 	strb.w	r4, [r6, #-32]!
{
 804d73c:	4605      	mov	r5, r0
  LoRaMacMibGetRequestConfirm( &mibReq );
 804d73e:	4630      	mov	r0, r6
 804d740:	f7fc ffbe 	bl	804a6c0 <LoRaMacMibGetRequestConfirm>
  currentClass = mibReq.Param.Class;
 804d744:	f89d 3004 	ldrb.w	r3, [sp, #4]
  if (currentClass != newClass)
 804d748:	42ab      	cmp	r3, r5
 804d74a:	d004      	beq.n	804d756 <LORA_RequestClass+0x26>
    switch (newClass)
 804d74c:	2d01      	cmp	r5, #1
 804d74e:	d014      	beq.n	804d77a <LORA_RequestClass+0x4a>
 804d750:	d304      	bcc.n	804d75c <LORA_RequestClass+0x2c>
 804d752:	2d02      	cmp	r5, #2
 804d754:	d015      	beq.n	804d782 <LORA_RequestClass+0x52>
}
 804d756:	4620      	mov	r0, r4
 804d758:	b008      	add	sp, #32
 804d75a:	bd70      	pop	{r4, r5, r6, pc}
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 804d75c:	4630      	mov	r0, r6
        mibReq.Param.Class = CLASS_A;
 804d75e:	f88d 4004 	strb.w	r4, [sp, #4]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 804d762:	f7fd f889 	bl	804a878 <LoRaMacMibSetRequestConfirm>
 804d766:	4604      	mov	r4, r0
 804d768:	b110      	cbz	r0, 804d770 <LORA_RequestClass+0x40>
          Errorstatus = LORA_ERROR;
 804d76a:	f04f 34ff 	mov.w	r4, #4294967295
 804d76e:	e7f2      	b.n	804d756 <LORA_RequestClass+0x26>
          LoRaMainCallbacks->LORA_ConfirmClass(CLASS_A);
 804d770:	4b0c      	ldr	r3, [pc, #48]	; (804d7a4 <LORA_RequestClass+0x74>)
 804d772:	681b      	ldr	r3, [r3, #0]
 804d774:	699b      	ldr	r3, [r3, #24]
          LoRaMainCallbacks->LORA_ConfirmClass(CLASS_C);
 804d776:	4798      	blx	r3
 804d778:	e7ed      	b.n	804d756 <LORA_RequestClass+0x26>
        PRINTF( "warning: LORAMAC_CLASSB_ENABLED has not been defined at compilation\n\r");
 804d77a:	480b      	ldr	r0, [pc, #44]	; (804d7a8 <LORA_RequestClass+0x78>)
 804d77c:	f000 faf2 	bl	804dd64 <TraceSend>
        break;
 804d780:	e7e9      	b.n	804d756 <LORA_RequestClass+0x26>
        if (currentClass != CLASS_A)
 804d782:	1c1c      	adds	r4, r3, #0
 804d784:	bf18      	it	ne
 804d786:	2401      	movne	r4, #1
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 804d788:	4630      	mov	r0, r6
        if (currentClass != CLASS_A)
 804d78a:	4264      	negs	r4, r4
        mibReq.Param.Class = CLASS_C;
 804d78c:	f88d 5004 	strb.w	r5, [sp, #4]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 804d790:	f7fd f872 	bl	804a878 <LoRaMacMibSetRequestConfirm>
 804d794:	2800      	cmp	r0, #0
 804d796:	d1e8      	bne.n	804d76a <LORA_RequestClass+0x3a>
          LoRaMainCallbacks->LORA_ConfirmClass(CLASS_C);
 804d798:	4b02      	ldr	r3, [pc, #8]	; (804d7a4 <LORA_RequestClass+0x74>)
 804d79a:	681b      	ldr	r3, [r3, #0]
 804d79c:	4628      	mov	r0, r5
 804d79e:	699b      	ldr	r3, [r3, #24]
 804d7a0:	e7e9      	b.n	804d776 <LORA_RequestClass+0x46>
 804d7a2:	bf00      	nop
 804d7a4:	2000b454 	.word	0x2000b454
 804d7a8:	08052224 	.word	0x08052224

0804d7ac <LPM_SetOffMode>:

/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/
void LPM_SetOffMode(LPM_Id_t id, LPM_SetMode_t mode)
{
 804d7ac:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 804d7ae:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 804d7b2:	b672      	cpsid	i
  BACKUP_PRIMASK();
  
  DISABLE_IRQ( );
  
  
  switch(mode)
 804d7b4:	b141      	cbz	r1, 804d7c8 <LPM_SetOffMode+0x1c>
 804d7b6:	2901      	cmp	r1, #1
 804d7b8:	d103      	bne.n	804d7c2 <LPM_SetOffMode+0x16>
  {
    case LPM_Disable:
    {
      OffModeDisable |= (uint32_t)id;
 804d7ba:	4b06      	ldr	r3, [pc, #24]	; (804d7d4 <LPM_SetOffMode+0x28>)
 804d7bc:	681a      	ldr	r2, [r3, #0]
 804d7be:	4302      	orrs	r2, r0
 804d7c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 804d7c2:	f384 8810 	msr	PRIMASK, r4
  }
  
  RESTORE_PRIMASK( );

  return;
}
 804d7c6:	bd10      	pop	{r4, pc}
      OffModeDisable &= ~(uint32_t)id;
 804d7c8:	4902      	ldr	r1, [pc, #8]	; (804d7d4 <LPM_SetOffMode+0x28>)
 804d7ca:	680b      	ldr	r3, [r1, #0]
 804d7cc:	ea23 0300 	bic.w	r3, r3, r0
 804d7d0:	600b      	str	r3, [r1, #0]
      break;
 804d7d2:	e7f6      	b.n	804d7c2 <LPM_SetOffMode+0x16>
 804d7d4:	2000b4a0 	.word	0x2000b4a0

0804d7d8 <LPM_SetStopMode>:

void LPM_SetStopMode(LPM_Id_t id, LPM_SetMode_t mode)
{
 804d7d8:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 804d7da:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 804d7de:	b672      	cpsid	i
  BACKUP_PRIMASK();
  
  DISABLE_IRQ( );
  
  
  switch(mode)
 804d7e0:	b141      	cbz	r1, 804d7f4 <LPM_SetStopMode+0x1c>
 804d7e2:	2901      	cmp	r1, #1
 804d7e4:	d103      	bne.n	804d7ee <LPM_SetStopMode+0x16>
  {
    case LPM_Disable:
    {
      StopModeDisable |= (uint32_t)id;
 804d7e6:	4b06      	ldr	r3, [pc, #24]	; (804d800 <LPM_SetStopMode+0x28>)
 804d7e8:	685a      	ldr	r2, [r3, #4]
 804d7ea:	4302      	orrs	r2, r0
 804d7ec:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 804d7ee:	f384 8810 	msr	PRIMASK, r4
      break;
  }
  RESTORE_PRIMASK( );

  return;
}
 804d7f2:	bd10      	pop	{r4, pc}
      StopModeDisable &= ~(uint32_t)id;
 804d7f4:	4902      	ldr	r1, [pc, #8]	; (804d800 <LPM_SetStopMode+0x28>)
 804d7f6:	684b      	ldr	r3, [r1, #4]
 804d7f8:	ea23 0300 	bic.w	r3, r3, r0
 804d7fc:	604b      	str	r3, [r1, #4]
      break;
 804d7fe:	e7f6      	b.n	804d7ee <LPM_SetStopMode+0x16>
 804d800:	2000b4a0 	.word	0x2000b4a0

0804d804 <LPM_GetMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 804d804:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 804d808:	b672      	cpsid	i

  BACKUP_PRIMASK();
  
  DISABLE_IRQ( );

  if(StopModeDisable )
 804d80a:	4b06      	ldr	r3, [pc, #24]	; (804d824 <LPM_GetMode+0x20>)
 804d80c:	6859      	ldr	r1, [r3, #4]
 804d80e:	b939      	cbnz	r1, 804d820 <LPM_GetMode+0x1c>
  {
    mode_selected = LPM_SleepMode;
  }
  else
  {
    if(OffModeDisable)
 804d810:	681b      	ldr	r3, [r3, #0]
 804d812:	2b00      	cmp	r3, #0
    {
      mode_selected = LPM_StopMode;
    }
    else
    {
      mode_selected = LPM_OffMode;
 804d814:	bf14      	ite	ne
 804d816:	2001      	movne	r0, #1
 804d818:	2002      	moveq	r0, #2
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 804d81a:	f382 8810 	msr	PRIMASK, r2
  }

  RESTORE_PRIMASK( );

  return mode_selected;
}
 804d81e:	4770      	bx	lr
    mode_selected = LPM_SleepMode;
 804d820:	2000      	movs	r0, #0
 804d822:	e7fa      	b.n	804d81a <LPM_GetMode+0x16>
 804d824:	2000b4a0 	.word	0x2000b4a0

0804d828 <add_elementSize_and_inc_writeIdx>:
  }
}

static void add_elementSize_and_inc_writeIdx(queue_param_t* queue,uint16_t element_size)
{
  queue->queue_buff[queue->queue_write_idx++]=(uint8_t) (element_size>>8);
 804d828:	8843      	ldrh	r3, [r0, #2]
 804d82a:	6882      	ldr	r2, [r0, #8]
{
 804d82c:	b510      	push	{r4, lr}
  queue->queue_buff[queue->queue_write_idx++]=(uint8_t) (element_size>>8);
 804d82e:	1c5c      	adds	r4, r3, #1
 804d830:	8044      	strh	r4, [r0, #2]
 804d832:	0a0c      	lsrs	r4, r1, #8
 804d834:	54d4      	strb	r4, [r2, r3]
  /*wrap if needed*/
  if ( queue->queue_write_idx == queue->queue_size)
 804d836:	8842      	ldrh	r2, [r0, #2]
 804d838:	88c3      	ldrh	r3, [r0, #6]
 804d83a:	429a      	cmp	r2, r3
  {
    queue->queue_write_idx=0;
 804d83c:	bf04      	itt	eq
 804d83e:	2300      	moveq	r3, #0
 804d840:	8043      	strheq	r3, [r0, #2]
  }
  queue->queue_buff[queue->queue_write_idx++]=(uint8_t) (element_size);
 804d842:	8843      	ldrh	r3, [r0, #2]
 804d844:	6882      	ldr	r2, [r0, #8]
 804d846:	1c5c      	adds	r4, r3, #1
 804d848:	8044      	strh	r4, [r0, #2]
 804d84a:	54d1      	strb	r1, [r2, r3]
  /*wrap if needed*/
  if ( queue->queue_write_idx == queue->queue_size)
 804d84c:	88c3      	ldrh	r3, [r0, #6]
 804d84e:	8842      	ldrh	r2, [r0, #2]
 804d850:	429a      	cmp	r2, r3
  {
    queue->queue_write_idx=0;
 804d852:	bf04      	itt	eq
 804d854:	2300      	moveq	r3, #0
 804d856:	8043      	strheq	r3, [r0, #2]
  }
}
 804d858:	bd10      	pop	{r4, pc}

0804d85a <circular_queue_init>:
  queue->queue_read_idx=0;
 804d85a:	2300      	movs	r3, #0
 804d85c:	6003      	str	r3, [r0, #0]
  queue->queue_write_idx=0;
 804d85e:	8083      	strh	r3, [r0, #4]
  queue->queue_buff=queue_buff;
 804d860:	6081      	str	r1, [r0, #8]
  queue->queue_size=queue_size;
 804d862:	80c2      	strh	r2, [r0, #6]
  queue->queue_full=0;
 804d864:	7303      	strb	r3, [r0, #12]
}
 804d866:	4770      	bx	lr

0804d868 <circular_queue_add>:
{
 804d868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (queue->queue_write_idx>=queue->queue_read_idx)
 804d86a:	8803      	ldrh	r3, [r0, #0]
{
 804d86c:	4615      	mov	r5, r2
  if (queue->queue_write_idx>=queue->queue_read_idx)
 804d86e:	8842      	ldrh	r2, [r0, #2]
 804d870:	429a      	cmp	r2, r3
{
 804d872:	460e      	mov	r6, r1
    free_size=queue->queue_size-(queue->queue_write_idx-queue->queue_read_idx); 
 804d874:	bf24      	itt	cs
 804d876:	88c1      	ldrhcs	r1, [r0, #6]
 804d878:	185b      	addcs	r3, r3, r1
  if ( queue->queue_full==1)
 804d87a:	7b01      	ldrb	r1, [r0, #12]
    free_size=(queue->queue_read_idx-queue->queue_write_idx); 
 804d87c:	1a9b      	subs	r3, r3, r2
    free_size=0;
 804d87e:	2901      	cmp	r1, #1
    free_size=(queue->queue_read_idx-queue->queue_write_idx); 
 804d880:	b21b      	sxth	r3, r3
  if ((buff_size+ELEMENT_SIZE_LEN<=free_buff_len)&& 
 804d882:	f105 0101 	add.w	r1, r5, #1
    free_size=0;
 804d886:	bf08      	it	eq
 804d888:	2300      	moveq	r3, #0
  if ((buff_size+ELEMENT_SIZE_LEN<=free_buff_len)&& 
 804d88a:	4299      	cmp	r1, r3
{
 804d88c:	4604      	mov	r4, r0
  if ((buff_size+ELEMENT_SIZE_LEN<=free_buff_len)&& 
 804d88e:	da2c      	bge.n	804d8ea <circular_queue_add+0x82>
      ((queue->queue_write_idx+buff_size+ELEMENT_SIZE_LEN<=queue->queue_size) 
 804d890:	88c1      	ldrh	r1, [r0, #6]
 804d892:	18a8      	adds	r0, r5, r2
 804d894:	3001      	adds	r0, #1
  if ((buff_size+ELEMENT_SIZE_LEN<=free_buff_len)&& 
 804d896:	4288      	cmp	r0, r1
 804d898:	db02      	blt.n	804d8a0 <circular_queue_add+0x38>
        || (queue->queue_write_idx>=queue->queue_size-ELEMENT_SIZE_LEN))) /*elementSize cut in 2 or elementSize at Top*/
 804d89a:	3902      	subs	r1, #2
 804d89c:	428a      	cmp	r2, r1
 804d89e:	db24      	blt.n	804d8ea <circular_queue_add+0x82>
    add_elementSize_and_inc_writeIdx(queue, buff_size);
 804d8a0:	4629      	mov	r1, r5
 804d8a2:	4620      	mov	r0, r4
 804d8a4:	f7ff ffc0 	bl	804d828 <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff,buff_size);
 804d8a8:	8863      	ldrh	r3, [r4, #2]
 804d8aa:	1e5a      	subs	r2, r3, #1
 804d8ac:	68a3      	ldr	r3, [r4, #8]
 804d8ae:	4413      	add	r3, r2
 804d8b0:	1972      	adds	r2, r6, r5
  while(size--)
 804d8b2:	42b2      	cmp	r2, r6
 804d8b4:	d114      	bne.n	804d8e0 <circular_queue_add+0x78>
    queue->queue_write_idx+=buff_size;
 804d8b6:	8862      	ldrh	r2, [r4, #2]
    if (queue->queue_write_idx==queue->queue_size)
 804d8b8:	88e3      	ldrh	r3, [r4, #6]
    queue->queue_write_idx+=buff_size;
 804d8ba:	4415      	add	r5, r2
 804d8bc:	b2ad      	uxth	r5, r5
    if (queue->queue_write_idx==queue->queue_size)
 804d8be:	42ab      	cmp	r3, r5
        queue->queue_write_idx=0;
 804d8c0:	bf08      	it	eq
 804d8c2:	2300      	moveq	r3, #0
    queue->queue_write_idx+=buff_size;
 804d8c4:	8065      	strh	r5, [r4, #2]
        queue->queue_write_idx=0;
 804d8c6:	bf08      	it	eq
 804d8c8:	8063      	strheq	r3, [r4, #2]
    queue->queue_nb_element++; 
 804d8ca:	88a3      	ldrh	r3, [r4, #4]
    if (queue->queue_write_idx== queue->queue_read_idx)
 804d8cc:	8862      	ldrh	r2, [r4, #2]
    queue->queue_nb_element++; 
 804d8ce:	3301      	adds	r3, #1
 804d8d0:	80a3      	strh	r3, [r4, #4]
    if (queue->queue_write_idx== queue->queue_read_idx)
 804d8d2:	8823      	ldrh	r3, [r4, #0]
 804d8d4:	429a      	cmp	r2, r3
      queue->queue_full=1;
 804d8d6:	bf04      	itt	eq
 804d8d8:	2301      	moveq	r3, #1
 804d8da:	7323      	strbeq	r3, [r4, #12]
    status=0;
 804d8dc:	2000      	movs	r0, #0
}
 804d8de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *out++= *in++;
 804d8e0:	f816 1b01 	ldrb.w	r1, [r6], #1
 804d8e4:	f803 1f01 	strb.w	r1, [r3, #1]!
 804d8e8:	e7e3      	b.n	804d8b2 <circular_queue_add+0x4a>
  else if (buff_size+2*ELEMENT_SIZE_LEN<=free_buff_len)
 804d8ea:	1ce9      	adds	r1, r5, #3
 804d8ec:	428b      	cmp	r3, r1
 804d8ee:	dd31      	ble.n	804d954 <circular_queue_add+0xec>
    uint16_t top_size = queue->queue_size-(queue->queue_write_idx+ELEMENT_SIZE_LEN);
 804d8f0:	88e7      	ldrh	r7, [r4, #6]
 804d8f2:	3f02      	subs	r7, #2
 804d8f4:	1abf      	subs	r7, r7, r2
 804d8f6:	b2bf      	uxth	r7, r7
    add_elementSize_and_inc_writeIdx(queue,top_size);
 804d8f8:	4639      	mov	r1, r7
 804d8fa:	4620      	mov	r0, r4
 804d8fc:	f7ff ff94 	bl	804d828 <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff,top_size);
 804d900:	8863      	ldrh	r3, [r4, #2]
 804d902:	1e5a      	subs	r2, r3, #1
 804d904:	68a3      	ldr	r3, [r4, #8]
 804d906:	4413      	add	r3, r2
 804d908:	19f2      	adds	r2, r6, r7
  while(size--)
 804d90a:	4296      	cmp	r6, r2
 804d90c:	d118      	bne.n	804d940 <circular_queue_add+0xd8>
    buff_size-=top_size;
 804d90e:	1bed      	subs	r5, r5, r7
    queue->queue_write_idx=0;
 804d910:	2300      	movs	r3, #0
    buff_size-=top_size;
 804d912:	b2ad      	uxth	r5, r5
    queue->queue_write_idx=0;
 804d914:	8063      	strh	r3, [r4, #2]
    add_elementSize_and_inc_writeIdx(queue, buff_size);
 804d916:	4629      	mov	r1, r5
 804d918:	4620      	mov	r0, r4
 804d91a:	f7ff ff85 	bl	804d828 <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff+top_size,buff_size);
 804d91e:	8863      	ldrh	r3, [r4, #2]
 804d920:	1e5a      	subs	r2, r3, #1
 804d922:	68a3      	ldr	r3, [r4, #8]
 804d924:	4413      	add	r3, r2
 804d926:	1972      	adds	r2, r6, r5
  while(size--)
 804d928:	42b2      	cmp	r2, r6
 804d92a:	d10e      	bne.n	804d94a <circular_queue_add+0xe2>
    queue->queue_nb_element+=2;
 804d92c:	88a3      	ldrh	r3, [r4, #4]
    queue->queue_write_idx+=buff_size;
 804d92e:	8862      	ldrh	r2, [r4, #2]
    queue->queue_nb_element+=2;
 804d930:	3302      	adds	r3, #2
    queue->queue_write_idx+=buff_size;
 804d932:	4415      	add	r5, r2
    queue->queue_nb_element+=2;
 804d934:	80a3      	strh	r3, [r4, #4]
    if (queue->queue_write_idx== queue->queue_read_idx)
 804d936:	8823      	ldrh	r3, [r4, #0]
    queue->queue_write_idx+=buff_size;
 804d938:	b2ad      	uxth	r5, r5
 804d93a:	8065      	strh	r5, [r4, #2]
    if (queue->queue_write_idx== queue->queue_read_idx)
 804d93c:	42ab      	cmp	r3, r5
 804d93e:	e7ca      	b.n	804d8d6 <circular_queue_add+0x6e>
    *out++= *in++;
 804d940:	f816 1b01 	ldrb.w	r1, [r6], #1
 804d944:	f803 1f01 	strb.w	r1, [r3, #1]!
 804d948:	e7df      	b.n	804d90a <circular_queue_add+0xa2>
 804d94a:	f816 1b01 	ldrb.w	r1, [r6], #1
 804d94e:	f803 1f01 	strb.w	r1, [r3, #1]!
 804d952:	e7e9      	b.n	804d928 <circular_queue_add+0xc0>
    status=-1;
 804d954:	f04f 30ff 	mov.w	r0, #4294967295
  return status;
 804d958:	e7c1      	b.n	804d8de <circular_queue_add+0x76>

0804d95a <circular_queue_get>:
  if (queue->queue_nb_element==0)
 804d95a:	8883      	ldrh	r3, [r0, #4]
{
 804d95c:	b570      	push	{r4, r5, r6, lr}
  if (queue->queue_nb_element==0)
 804d95e:	b1ab      	cbz	r3, 804d98c <circular_queue_get+0x32>
    uint16_t read_idx=queue->queue_read_idx;
 804d960:	8805      	ldrh	r5, [r0, #0]
    size=(uint16_t) queue->queue_buff[read_idx++]<<8;
 804d962:	6884      	ldr	r4, [r0, #8]
 804d964:	1c6b      	adds	r3, r5, #1
 804d966:	5d66      	ldrb	r6, [r4, r5]
    if (read_idx==queue->queue_size)
 804d968:	88c5      	ldrh	r5, [r0, #6]
    size=(uint16_t) queue->queue_buff[read_idx++]<<8;
 804d96a:	b29b      	uxth	r3, r3
      read_idx=0;
 804d96c:	429d      	cmp	r5, r3
 804d96e:	bf08      	it	eq
 804d970:	2300      	moveq	r3, #0
    size|=(uint16_t) queue->queue_buff[read_idx++];
 804d972:	1c58      	adds	r0, r3, #1
 804d974:	b280      	uxth	r0, r0
 804d976:	5ce3      	ldrb	r3, [r4, r3]
      read_idx=0;
 804d978:	4285      	cmp	r5, r0
 804d97a:	bf08      	it	eq
 804d97c:	2000      	moveq	r0, #0
    *buff= queue->queue_buff+read_idx;
 804d97e:	4420      	add	r0, r4
    size|=(uint16_t) queue->queue_buff[read_idx++];
 804d980:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *buff= queue->queue_buff+read_idx;
 804d984:	6008      	str	r0, [r1, #0]
    * buff_size=size;
 804d986:	8013      	strh	r3, [r2, #0]
    status=0;
 804d988:	2000      	movs	r0, #0
}
 804d98a:	bd70      	pop	{r4, r5, r6, pc}
    status=-1;
 804d98c:	f04f 30ff 	mov.w	r0, #4294967295
  return status;
 804d990:	e7fb      	b.n	804d98a <circular_queue_get+0x30>

0804d992 <circular_queue_remove>:
  if (queue->queue_nb_element==0)
 804d992:	8882      	ldrh	r2, [r0, #4]
{
 804d994:	b570      	push	{r4, r5, r6, lr}
  if (queue->queue_nb_element==0)
 804d996:	b322      	cbz	r2, 804d9e2 <circular_queue_remove+0x50>
    size=(uint16_t) queue->queue_buff[queue->queue_read_idx++]<<8;
 804d998:	8803      	ldrh	r3, [r0, #0]
    if (queue->queue_read_idx==queue->queue_size)
 804d99a:	88c4      	ldrh	r4, [r0, #6]
    size=(uint16_t) queue->queue_buff[queue->queue_read_idx++]<<8;
 804d99c:	6886      	ldr	r6, [r0, #8]
 804d99e:	1c59      	adds	r1, r3, #1
 804d9a0:	b289      	uxth	r1, r1
    if (queue->queue_read_idx==queue->queue_size)
 804d9a2:	42a1      	cmp	r1, r4
    size=(uint16_t) queue->queue_buff[queue->queue_read_idx++]<<8;
 804d9a4:	8001      	strh	r1, [r0, #0]
      queue->queue_read_idx=0;
 804d9a6:	bf08      	it	eq
 804d9a8:	2100      	moveq	r1, #0
    size=(uint16_t) queue->queue_buff[queue->queue_read_idx++]<<8;
 804d9aa:	5cf3      	ldrb	r3, [r6, r3]
      queue->queue_read_idx=0;
 804d9ac:	bf08      	it	eq
 804d9ae:	8001      	strheq	r1, [r0, #0]
    size|=(uint16_t) queue->queue_buff[queue->queue_read_idx++];
 804d9b0:	8805      	ldrh	r5, [r0, #0]
 804d9b2:	1c69      	adds	r1, r5, #1
 804d9b4:	b289      	uxth	r1, r1
    if (queue->queue_read_idx==queue->queue_size)
 804d9b6:	428c      	cmp	r4, r1
    size|=(uint16_t) queue->queue_buff[queue->queue_read_idx++];
 804d9b8:	8001      	strh	r1, [r0, #0]
      queue->queue_read_idx=0;
 804d9ba:	bf08      	it	eq
 804d9bc:	2100      	moveq	r1, #0
    size|=(uint16_t) queue->queue_buff[queue->queue_read_idx++];
 804d9be:	5d75      	ldrb	r5, [r6, r5]
      queue->queue_read_idx=0;
 804d9c0:	bf08      	it	eq
 804d9c2:	8001      	strheq	r1, [r0, #0]
    queue->queue_read_idx+=size;
 804d9c4:	8801      	ldrh	r1, [r0, #0]
    size=(uint16_t) queue->queue_buff[queue->queue_read_idx++]<<8;
 804d9c6:	021b      	lsls	r3, r3, #8
    size|=(uint16_t) queue->queue_buff[queue->queue_read_idx++];
 804d9c8:	432b      	orrs	r3, r5
    queue->queue_read_idx+=size;
 804d9ca:	440b      	add	r3, r1
 804d9cc:	b29b      	uxth	r3, r3
    if (queue->queue_read_idx==queue->queue_size)
 804d9ce:	429c      	cmp	r4, r3
        queue->queue_read_idx=0;
 804d9d0:	bf08      	it	eq
 804d9d2:	2300      	moveq	r3, #0
 804d9d4:	8003      	strh	r3, [r0, #0]
    queue->queue_nb_element--;
 804d9d6:	3a01      	subs	r2, #1
    queue->queue_full=0;
 804d9d8:	2300      	movs	r3, #0
    queue->queue_nb_element--;
 804d9da:	8082      	strh	r2, [r0, #4]
    queue->queue_full=0;
 804d9dc:	7303      	strb	r3, [r0, #12]
    status=0;
 804d9de:	4618      	mov	r0, r3
}
 804d9e0:	bd70      	pop	{r4, r5, r6, pc}
      status=-1;
 804d9e2:	f04f 30ff 	mov.w	r0, #4294967295
  return status;
 804d9e6:	e7fb      	b.n	804d9e0 <circular_queue_remove+0x4e>

0804d9e8 <circular_queue_sense>:
  if (queue->queue_nb_element==0)
 804d9e8:	8880      	ldrh	r0, [r0, #4]
 804d9ea:	fab0 f080 	clz	r0, r0
 804d9ee:	0940      	lsrs	r0, r0, #5
}
 804d9f0:	4240      	negs	r0, r0
 804d9f2:	4770      	bx	lr

0804d9f4 <SysTimeAdd>:
static void CalendarDiv60( uint32_t in, uint32_t* out, uint32_t* remainder );

const char *WeekDayString[]={ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 804d9f4:	b082      	sub	sp, #8
 804d9f6:	b082      	sub	sp, #8
 804d9f8:	f10d 0c08 	add.w	ip, sp, #8
 804d9fc:	e90c 0006 	stmdb	ip, {r1, r2}
    SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };

    c.Seconds = a.Seconds + b.Seconds;
 804da00:	9a00      	ldr	r2, [sp, #0]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 804da02:	f8bd 1010 	ldrh.w	r1, [sp, #16]
{
 804da06:	9303      	str	r3, [sp, #12]
    c.Seconds = a.Seconds + b.Seconds;
 804da08:	4413      	add	r3, r2
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 804da0a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 804da0e:	440a      	add	r2, r1
 804da10:	b292      	uxth	r2, r2
 804da12:	b211      	sxth	r1, r2
    if( c.SubSeconds >= 1000 )
 804da14:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
    {
        c.Seconds++;
        c.SubSeconds -= 1000;
 804da18:	bfa2      	ittt	ge
 804da1a:	f5a2 727a 	subge.w	r2, r2, #1000	; 0x3e8
        c.Seconds++;
 804da1e:	3301      	addge	r3, #1
        c.SubSeconds -= 1000;
 804da20:	b211      	sxthge	r1, r2
    }
    return c;
 804da22:	6003      	str	r3, [r0, #0]
 804da24:	8081      	strh	r1, [r0, #4]
}
 804da26:	b002      	add	sp, #8
 804da28:	b002      	add	sp, #8
 804da2a:	4770      	bx	lr

0804da2c <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 804da2c:	b082      	sub	sp, #8
 804da2e:	b082      	sub	sp, #8
 804da30:	f10d 0c08 	add.w	ip, sp, #8
 804da34:	e90c 0006 	stmdb	ip, {r1, r2}
    SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };

    c.Seconds = a.Seconds - b.Seconds;
 804da38:	9a00      	ldr	r2, [sp, #0]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 804da3a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
{
 804da3e:	9303      	str	r3, [sp, #12]
    c.Seconds = a.Seconds - b.Seconds;
 804da40:	1ad3      	subs	r3, r2, r3
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 804da42:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 804da46:	1a52      	subs	r2, r2, r1
 804da48:	b292      	uxth	r2, r2
 804da4a:	b211      	sxth	r1, r2
    if( c.SubSeconds < 0 )
 804da4c:	2900      	cmp	r1, #0
    {
        c.Seconds--;
        c.SubSeconds += 1000;
 804da4e:	bfbe      	ittt	lt
 804da50:	f502 727a 	addlt.w	r2, r2, #1000	; 0x3e8
        c.Seconds--;
 804da54:	f103 33ff 	addlt.w	r3, r3, #4294967295
        c.SubSeconds += 1000;
 804da58:	b211      	sxthlt	r1, r2
    }
    return c;
 804da5a:	6003      	str	r3, [r0, #0]
 804da5c:	8081      	strh	r1, [r0, #4]
}
 804da5e:	b002      	add	sp, #8
 804da60:	b002      	add	sp, #8
 804da62:	4770      	bx	lr

0804da64 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 804da64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 804da66:	466b      	mov	r3, sp
 804da68:	e883 0003 	stmia.w	r3, {r0, r1}
    SysTime_t DeltaTime;
  
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 804da6c:	a804      	add	r0, sp, #16
 804da6e:	2300      	movs	r3, #0
 804da70:	f820 3d04 	strh.w	r3, [r0, #-4]!
 804da74:	9302      	str	r3, [sp, #8]

    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 804da76:	f000 fead 	bl	804e7d4 <HW_RTC_GetCalendarTime>
    c.Seconds = a.Seconds - b.Seconds;
 804da7a:	9b00      	ldr	r3, [sp, #0]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 804da7c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 804da80:	9002      	str	r0, [sp, #8]
    c.Seconds = a.Seconds - b.Seconds;
 804da82:	1a18      	subs	r0, r3, r0
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 804da84:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 804da88:	1a5b      	subs	r3, r3, r1
 804da8a:	b29b      	uxth	r3, r3
 804da8c:	b219      	sxth	r1, r3
    if( c.SubSeconds < 0 )
 804da8e:	2900      	cmp	r1, #0
        c.SubSeconds += 1000;
 804da90:	bfbe      	ittt	lt
 804da92:	f503 737a 	addlt.w	r3, r3, #1000	; 0x3e8
        c.Seconds--;
 804da96:	f100 30ff 	addlt.w	r0, r0, #4294967295
        c.SubSeconds += 1000;
 804da9a:	b219      	sxthlt	r1, r3

    // sysTime is epoch
    DeltaTime = SysTimeSub( sysTime, calendarTime );

    HW_RTC_BKUPWrite( DeltaTime.Seconds, ( uint32_t )DeltaTime.SubSeconds );
 804da9c:	f000 feac 	bl	804e7f8 <HW_RTC_BKUPWrite>
}
 804daa0:	b005      	add	sp, #20
 804daa2:	f85d fb04 	ldr.w	pc, [sp], #4

0804daa6 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 804daa6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 804daa8:	4604      	mov	r4, r0
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 804daaa:	a804      	add	r0, sp, #16
 804daac:	2300      	movs	r3, #0
 804daae:	f820 3d0c 	strh.w	r3, [r0, #-12]!
 804dab2:	9300      	str	r3, [sp, #0]
    SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
    SysTime_t DeltaTime;

    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 804dab4:	f000 fe8e 	bl	804e7d4 <HW_RTC_GetCalendarTime>

    HW_RTC_BKUPRead( &DeltaTime.Seconds, ( uint32_t* )&DeltaTime.SubSeconds );
 804dab8:	a903      	add	r1, sp, #12
    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 804daba:	9000      	str	r0, [sp, #0]
    HW_RTC_BKUPRead( &DeltaTime.Seconds, ( uint32_t* )&DeltaTime.SubSeconds );
 804dabc:	a802      	add	r0, sp, #8
 804dabe:	f000 fead 	bl	804e81c <HW_RTC_BKUPRead>
    c.Seconds = a.Seconds + b.Seconds;
 804dac2:	9b00      	ldr	r3, [sp, #0]
 804dac4:	9a02      	ldr	r2, [sp, #8]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 804dac6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    c.Seconds = a.Seconds + b.Seconds;
 804daca:	441a      	add	r2, r3
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 804dacc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 804dad0:	440b      	add	r3, r1
 804dad2:	b29b      	uxth	r3, r3
 804dad4:	b219      	sxth	r1, r3
    if( c.SubSeconds >= 1000 )
 804dad6:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
        c.SubSeconds -= 1000;
 804dada:	bfa2      	ittt	ge
 804dadc:	f5a3 737a 	subge.w	r3, r3, #1000	; 0x3e8
        c.Seconds++;
 804dae0:	3201      	addge	r2, #1
        c.SubSeconds -= 1000;
 804dae2:	b219      	sxthge	r1, r3

    sysTime = SysTimeAdd( DeltaTime, calendarTime );

    return sysTime;
}
 804dae4:	4620      	mov	r0, r4
    return sysTime;
 804dae6:	6022      	str	r2, [r4, #0]
 804dae8:	80a1      	strh	r1, [r4, #4]
}
 804daea:	b004      	add	sp, #16
 804daec:	bd10      	pop	{r4, pc}

0804daee <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 804daee:	b537      	push	{r0, r1, r2, r4, r5, lr}
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 804daf0:	2300      	movs	r3, #0
{
 804daf2:	4604      	mov	r4, r0

    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 804daf4:	a801      	add	r0, sp, #4
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 804daf6:	9300      	str	r3, [sp, #0]
 804daf8:	f8ad 3004 	strh.w	r3, [sp, #4]
    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 804dafc:	f000 fe6a 	bl	804e7d4 <HW_RTC_GetCalendarTime>
 804db00:	466d      	mov	r5, sp
 804db02:	9000      	str	r0, [sp, #0]
    
    return calendarTime;
 804db04:	e895 0003 	ldmia.w	r5, {r0, r1}
 804db08:	e884 0003 	stmia.w	r4, {r0, r1}
}
 804db0c:	4620      	mov	r0, r4
 804db0e:	b003      	add	sp, #12
 804db10:	bd30      	pop	{r4, r5, pc}

0804db12 <TimerSetTimeout>:
    cur = cur->Next;
  }
  return false;
}
static void TimerSetTimeout( TimerEvent_t *obj )
{
 804db12:	b570      	push	{r4, r5, r6, lr}
 804db14:	4604      	mov	r4, r0
  int32_t minTicks= HW_RTC_GetMinimumTimeout( );
 804db16:	f000 fce9 	bl	804e4ec <HW_RTC_GetMinimumTimeout>
  obj->IsNext2Expire = true; 
 804db1a:	2301      	movs	r3, #1
 804db1c:	7263      	strb	r3, [r4, #9]
  int32_t minTicks= HW_RTC_GetMinimumTimeout( );
 804db1e:	4605      	mov	r5, r0

  // In case deadline too soon
  if(obj->Timestamp  < (HW_RTC_GetTimerElapsedTime(  ) + minTicks) )
 804db20:	6826      	ldr	r6, [r4, #0]
 804db22:	f000 fcf9 	bl	804e518 <HW_RTC_GetTimerElapsedTime>
 804db26:	4428      	add	r0, r5
 804db28:	4286      	cmp	r6, r0
 804db2a:	d203      	bcs.n	804db34 <TimerSetTimeout+0x22>
  {
    obj->Timestamp = HW_RTC_GetTimerElapsedTime(  ) + minTicks;
 804db2c:	f000 fcf4 	bl	804e518 <HW_RTC_GetTimerElapsedTime>
 804db30:	4428      	add	r0, r5
 804db32:	6020      	str	r0, [r4, #0]
  }
  HW_RTC_SetAlarm( obj->Timestamp );
 804db34:	6820      	ldr	r0, [r4, #0]
}
 804db36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HW_RTC_SetAlarm( obj->Timestamp );
 804db3a:	f000 bd19 	b.w	804e570 <HW_RTC_SetAlarm>
	...

0804db40 <TimerInsertNewHeadTimer>:
  obj->Next = NULL;
}

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
  TimerEvent_t* cur = TimerListHead;
 804db40:	4b04      	ldr	r3, [pc, #16]	; (804db54 <TimerInsertNewHeadTimer+0x14>)
 804db42:	681a      	ldr	r2, [r3, #0]

  if( cur != NULL )
 804db44:	b10a      	cbz	r2, 804db4a <TimerInsertNewHeadTimer+0xa>
  {
    cur->IsNext2Expire = false;
 804db46:	2100      	movs	r1, #0
 804db48:	7251      	strb	r1, [r2, #9]
  }

  obj->Next = cur;
 804db4a:	6142      	str	r2, [r0, #20]
  TimerListHead = obj;
 804db4c:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 804db4e:	f7ff bfe0 	b.w	804db12 <TimerSetTimeout>
 804db52:	bf00      	nop
 804db54:	2000b4a8 	.word	0x2000b4a8

0804db58 <TimerInit>:
  obj->Timestamp = 0;
 804db58:	2300      	movs	r3, #0
  obj->ReloadValue = 0;
 804db5a:	e9c0 3300 	strd	r3, r3, [r0]
  obj->IsStarted = false;
 804db5e:	7203      	strb	r3, [r0, #8]
  obj->IsNext2Expire = false;
 804db60:	7243      	strb	r3, [r0, #9]
  obj->Context = NULL;
 804db62:	e9c0 1303 	strd	r1, r3, [r0, #12]
  obj->Next = NULL;
 804db66:	6143      	str	r3, [r0, #20]
}
 804db68:	4770      	bx	lr
	...

0804db6c <TimerStart>:
{
 804db6c:	b570      	push	{r4, r5, r6, lr}
 804db6e:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 804db70:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 804db74:	b672      	cpsid	i
  if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 804db76:	b170      	cbz	r0, 804db96 <TimerStart+0x2a>
  TimerEvent_t* cur = TimerListHead;
 804db78:	4e16      	ldr	r6, [pc, #88]	; (804dbd4 <TimerStart+0x68>)
 804db7a:	6831      	ldr	r1, [r6, #0]
 804db7c:	460b      	mov	r3, r1
  while( cur != NULL )
 804db7e:	b96b      	cbnz	r3, 804db9c <TimerStart+0x30>
  obj->Timestamp = obj->ReloadValue;
 804db80:	6862      	ldr	r2, [r4, #4]
 804db82:	6022      	str	r2, [r4, #0]
  obj->IsStarted = true;
 804db84:	2201      	movs	r2, #1
 804db86:	7222      	strb	r2, [r4, #8]
  obj->IsNext2Expire = false;
 804db88:	7263      	strb	r3, [r4, #9]
  if( TimerListHead == NULL )
 804db8a:	b959      	cbnz	r1, 804dba4 <TimerStart+0x38>
    HW_RTC_SetTimerContext( );
 804db8c:	f000 fdd8 	bl	804e740 <HW_RTC_SetTimerContext>
      TimerInsertNewHeadTimer( obj);
 804db90:	4620      	mov	r0, r4
 804db92:	f7ff ffd5 	bl	804db40 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 804db96:	f385 8810 	msr	PRIMASK, r5
}
 804db9a:	bd70      	pop	{r4, r5, r6, pc}
    if( cur == obj )
 804db9c:	429c      	cmp	r4, r3
 804db9e:	d0fa      	beq.n	804db96 <TimerStart+0x2a>
    cur = cur->Next;
 804dba0:	695b      	ldr	r3, [r3, #20]
 804dba2:	e7ec      	b.n	804db7e <TimerStart+0x12>
    elapsedTime = HW_RTC_GetTimerElapsedTime( );
 804dba4:	f000 fcb8 	bl	804e518 <HW_RTC_GetTimerElapsedTime>
    obj->Timestamp += elapsedTime;
 804dba8:	6823      	ldr	r3, [r4, #0]
 804dbaa:	4418      	add	r0, r3
    if( obj->Timestamp < TimerListHead->Timestamp )
 804dbac:	6833      	ldr	r3, [r6, #0]
    obj->Timestamp += elapsedTime;
 804dbae:	6020      	str	r0, [r4, #0]
    if( obj->Timestamp < TimerListHead->Timestamp )
 804dbb0:	681a      	ldr	r2, [r3, #0]
 804dbb2:	4290      	cmp	r0, r2
 804dbb4:	d3ec      	bcc.n	804db90 <TimerStart+0x24>
  TimerEvent_t* next = TimerListHead->Next;
 804dbb6:	695a      	ldr	r2, [r3, #20]
  while (cur->Next != NULL )
 804dbb8:	6959      	ldr	r1, [r3, #20]
 804dbba:	b911      	cbnz	r1, 804dbc2 <TimerStart+0x56>
  cur->Next = obj;
 804dbbc:	615c      	str	r4, [r3, #20]
  obj->Next = NULL;
 804dbbe:	6161      	str	r1, [r4, #20]
 804dbc0:	e7e9      	b.n	804db96 <TimerStart+0x2a>
    if( obj->Timestamp  > next->Timestamp )
 804dbc2:	6811      	ldr	r1, [r2, #0]
 804dbc4:	4288      	cmp	r0, r1
 804dbc6:	d902      	bls.n	804dbce <TimerStart+0x62>
        next = next->Next;
 804dbc8:	4613      	mov	r3, r2
 804dbca:	6952      	ldr	r2, [r2, #20]
 804dbcc:	e7f4      	b.n	804dbb8 <TimerStart+0x4c>
        cur->Next = obj;
 804dbce:	615c      	str	r4, [r3, #20]
        obj->Next = next;
 804dbd0:	6162      	str	r2, [r4, #20]
 804dbd2:	e7e0      	b.n	804db96 <TimerStart+0x2a>
 804dbd4:	2000b4a8 	.word	0x2000b4a8

0804dbd8 <TimerIrqHandler>:
{
 804dbd8:	b570      	push	{r4, r5, r6, lr}
  uint32_t old =  HW_RTC_GetTimerContext( );
 804dbda:	f000 fdf5 	bl	804e7c8 <HW_RTC_GetTimerContext>
  if ( TimerListHead != NULL )
 804dbde:	4c1b      	ldr	r4, [pc, #108]	; (804dc4c <TimerIrqHandler+0x74>)
  uint32_t old =  HW_RTC_GetTimerContext( );
 804dbe0:	4605      	mov	r5, r0
  uint32_t now =  HW_RTC_SetTimerContext( );
 804dbe2:	f000 fdad 	bl	804e740 <HW_RTC_SetTimerContext>
  if ( TimerListHead != NULL )
 804dbe6:	6822      	ldr	r2, [r4, #0]
 804dbe8:	b19a      	cbz	r2, 804dc12 <TimerIrqHandler+0x3a>
  uint32_t DeltaContext = now - old; //intentionnal wrap around
 804dbea:	1b40      	subs	r0, r0, r5
 804dbec:	4613      	mov	r3, r2
        next->Timestamp = 0 ;
 804dbee:	2500      	movs	r5, #0
    for (cur=TimerListHead; cur->Next != NULL; cur= cur->Next)
 804dbf0:	695b      	ldr	r3, [r3, #20]
 804dbf2:	b92b      	cbnz	r3, 804dc00 <TimerIrqHandler+0x28>
    cur->IsStarted = false;
 804dbf4:	7213      	strb	r3, [r2, #8]
    exec_cb( cur->Callback, cur->Context );
 804dbf6:	68d3      	ldr	r3, [r2, #12]
    TimerListHead = TimerListHead->Next;
 804dbf8:	6951      	ldr	r1, [r2, #20]
 804dbfa:	6021      	str	r1, [r4, #0]
    exec_cb( cur->Callback, cur->Context );
 804dbfc:	b93b      	cbnz	r3, 804dc0e <TimerIrqHandler+0x36>
 804dbfe:	e7fe      	b.n	804dbfe <TimerIrqHandler+0x26>
      if (next->Timestamp > DeltaContext)
 804dc00:	6819      	ldr	r1, [r3, #0]
 804dc02:	4281      	cmp	r1, r0
        next->Timestamp -= DeltaContext;
 804dc04:	bf86      	itte	hi
 804dc06:	1a09      	subhi	r1, r1, r0
 804dc08:	6019      	strhi	r1, [r3, #0]
        next->Timestamp = 0 ;
 804dc0a:	601d      	strls	r5, [r3, #0]
 804dc0c:	e7f0      	b.n	804dbf0 <TimerIrqHandler+0x18>
    exec_cb( cur->Callback, cur->Context );
 804dc0e:	6910      	ldr	r0, [r2, #16]
 804dc10:	4798      	blx	r3
   cur->IsStarted = false;
 804dc12:	2600      	movs	r6, #0
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 804dc14:	6823      	ldr	r3, [r4, #0]
 804dc16:	b92b      	cbnz	r3, 804dc24 <TimerIrqHandler+0x4c>
  if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 804dc18:	6820      	ldr	r0, [r4, #0]
 804dc1a:	b980      	cbnz	r0, 804dc3e <TimerIrqHandler+0x66>
}
 804dc1c:	bd70      	pop	{r4, r5, r6, pc}
   exec_cb( cur->Callback, cur->Context );
 804dc1e:	6918      	ldr	r0, [r3, #16]
 804dc20:	4790      	blx	r2
 804dc22:	e7f7      	b.n	804dc14 <TimerIrqHandler+0x3c>
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 804dc24:	681d      	ldr	r5, [r3, #0]
 804dc26:	f000 fc77 	bl	804e518 <HW_RTC_GetTimerElapsedTime>
 804dc2a:	4285      	cmp	r5, r0
 804dc2c:	d2f4      	bcs.n	804dc18 <TimerIrqHandler+0x40>
   cur = TimerListHead;
 804dc2e:	6823      	ldr	r3, [r4, #0]
   TimerListHead = TimerListHead->Next;
 804dc30:	695a      	ldr	r2, [r3, #20]
 804dc32:	6022      	str	r2, [r4, #0]
   exec_cb( cur->Callback, cur->Context );
 804dc34:	68da      	ldr	r2, [r3, #12]
   cur->IsStarted = false;
 804dc36:	721e      	strb	r6, [r3, #8]
   exec_cb( cur->Callback, cur->Context );
 804dc38:	2a00      	cmp	r2, #0
 804dc3a:	d1f0      	bne.n	804dc1e <TimerIrqHandler+0x46>
 804dc3c:	e7fe      	b.n	804dc3c <TimerIrqHandler+0x64>
  if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 804dc3e:	7a43      	ldrb	r3, [r0, #9]
 804dc40:	2b00      	cmp	r3, #0
 804dc42:	d1eb      	bne.n	804dc1c <TimerIrqHandler+0x44>
}
 804dc44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    TimerSetTimeout( TimerListHead );
 804dc48:	f7ff bf63 	b.w	804db12 <TimerSetTimeout>
 804dc4c:	2000b4a8 	.word	0x2000b4a8

0804dc50 <TimerStop>:
{
 804dc50:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 804dc52:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 804dc56:	b672      	cpsid	i
  TimerEvent_t* prev = TimerListHead;
 804dc58:	4d10      	ldr	r5, [pc, #64]	; (804dc9c <TimerStop+0x4c>)
 804dc5a:	682b      	ldr	r3, [r5, #0]
  if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 804dc5c:	b103      	cbz	r3, 804dc60 <TimerStop+0x10>
 804dc5e:	b910      	cbnz	r0, 804dc66 <TimerStop+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 804dc60:	f386 8810 	msr	PRIMASK, r6
}  
 804dc64:	bd70      	pop	{r4, r5, r6, pc}
  obj->IsStarted = false;
 804dc66:	2200      	movs	r2, #0
  if( TimerListHead == obj ) // Stop the Head                  
 804dc68:	4283      	cmp	r3, r0
  obj->IsStarted = false;
 804dc6a:	7202      	strb	r2, [r0, #8]
  if( TimerListHead == obj ) // Stop the Head                  
 804dc6c:	d10e      	bne.n	804dc8c <TimerStop+0x3c>
    if( TimerListHead->IsNext2Expire == true ) // The head is already running 
 804dc6e:	7a59      	ldrb	r1, [r3, #9]
 804dc70:	695c      	ldr	r4, [r3, #20]
 804dc72:	b141      	cbz	r1, 804dc86 <TimerStop+0x36>
      TimerListHead->IsNext2Expire = false;
 804dc74:	725a      	strb	r2, [r3, #9]
      if( TimerListHead->Next != NULL )
 804dc76:	b124      	cbz	r4, 804dc82 <TimerStop+0x32>
        TimerSetTimeout( TimerListHead );
 804dc78:	4620      	mov	r0, r4
        TimerListHead = TimerListHead->Next;
 804dc7a:	602c      	str	r4, [r5, #0]
        TimerSetTimeout( TimerListHead );
 804dc7c:	f7ff ff49 	bl	804db12 <TimerSetTimeout>
 804dc80:	e7ee      	b.n	804dc60 <TimerStop+0x10>
        HW_RTC_StopAlarm( );
 804dc82:	f000 fc5f 	bl	804e544 <HW_RTC_StopAlarm>
        TimerListHead = NULL;
 804dc86:	602c      	str	r4, [r5, #0]
 804dc88:	e7ea      	b.n	804dc60 <TimerStop+0x10>
 804dc8a:	4613      	mov	r3, r2
        cur = cur->Next;
 804dc8c:	695a      	ldr	r2, [r3, #20]
    while( cur != NULL )
 804dc8e:	2a00      	cmp	r2, #0
 804dc90:	d0e6      	beq.n	804dc60 <TimerStop+0x10>
      if( cur == obj )
 804dc92:	4290      	cmp	r0, r2
 804dc94:	d1f9      	bne.n	804dc8a <TimerStop+0x3a>
        if( cur->Next != NULL )
 804dc96:	6942      	ldr	r2, [r0, #20]
          prev->Next = cur;
 804dc98:	615a      	str	r2, [r3, #20]
 804dc9a:	e7e1      	b.n	804dc60 <TimerStop+0x10>
 804dc9c:	2000b4a8 	.word	0x2000b4a8

0804dca0 <TimerSetValue>:
{
 804dca0:	b538      	push	{r3, r4, r5, lr}
 804dca2:	4605      	mov	r5, r0
  uint32_t ticks = HW_RTC_ms2Tick( value );
 804dca4:	4608      	mov	r0, r1
 804dca6:	f000 fc23 	bl	804e4f0 <HW_RTC_ms2Tick>
 804dcaa:	4604      	mov	r4, r0
  TimerStop( obj );
 804dcac:	4628      	mov	r0, r5
 804dcae:	f7ff ffcf 	bl	804dc50 <TimerStop>
  minValue = HW_RTC_GetMinimumTimeout( );
 804dcb2:	f000 fc1b 	bl	804e4ec <HW_RTC_GetMinimumTimeout>
 804dcb6:	42a0      	cmp	r0, r4
 804dcb8:	bf38      	it	cc
 804dcba:	4620      	movcc	r0, r4
  obj->ReloadValue = ticks;
 804dcbc:	e9c5 0000 	strd	r0, r0, [r5]
}
 804dcc0:	bd38      	pop	{r3, r4, r5, pc}

0804dcc2 <TimerGetCurrentTime>:
{
 804dcc2:	b508      	push	{r3, lr}
  uint32_t now = HW_RTC_GetTimerValue( );
 804dcc4:	f000 fc36 	bl	804e534 <HW_RTC_GetTimerValue>
}
 804dcc8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return  HW_RTC_Tick2ms(now);
 804dccc:	f000 bc19 	b.w	804e502 <HW_RTC_Tick2ms>

0804dcd0 <TimerGetElapsedTime>:
{
 804dcd0:	b538      	push	{r3, r4, r5, lr}
  if ( past == 0 )
 804dcd2:	4605      	mov	r5, r0
 804dcd4:	b150      	cbz	r0, 804dcec <TimerGetElapsedTime+0x1c>
  uint32_t nowInTicks = HW_RTC_GetTimerValue( );
 804dcd6:	f000 fc2d 	bl	804e534 <HW_RTC_GetTimerValue>
 804dcda:	4604      	mov	r4, r0
  uint32_t pastInTicks = HW_RTC_ms2Tick( past );
 804dcdc:	4628      	mov	r0, r5
 804dcde:	f000 fc07 	bl	804e4f0 <HW_RTC_ms2Tick>
  return HW_RTC_Tick2ms( nowInTicks- pastInTicks );
 804dce2:	1a20      	subs	r0, r4, r0
}
 804dce4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return HW_RTC_Tick2ms( nowInTicks- pastInTicks );
 804dce8:	f000 bc0b 	b.w	804e502 <HW_RTC_Tick2ms>
}
 804dcec:	bd38      	pop	{r3, r4, r5, pc}
	...

0804dcf0 <Trace_TxCpltCallback>:
}

/* Private Functions Definition ------------------------------------------------------*/

static void Trace_TxCpltCallback(void)
{
 804dcf0:	b513      	push	{r0, r1, r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 804dcf2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 804dcf6:	b672      	cpsid	i

  BACKUP_PRIMASK();

  DISABLE_IRQ(); /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  circular_queue_remove(&MsgTraceQueue);
 804dcf8:	480f      	ldr	r0, [pc, #60]	; (804dd38 <Trace_TxCpltCallback+0x48>)
 804dcfa:	f7ff fe4a 	bl	804d992 <circular_queue_remove>
  //DBG_GPIO_SET(GPIOB, GPIO_PIN_13);
  //DBG_GPIO_RST(GPIOB, GPIO_PIN_13);
  /* Sense if new data to be sent */
  status=circular_queue_sense(&MsgTraceQueue);
 804dcfe:	480e      	ldr	r0, [pc, #56]	; (804dd38 <Trace_TxCpltCallback+0x48>)
 804dd00:	f7ff fe72 	bl	804d9e8 <circular_queue_sense>

  if ( status == 0) 
 804dd04:	b970      	cbnz	r0, 804dd24 <Trace_TxCpltCallback+0x34>
  {
    circular_queue_get(&MsgTraceQueue,&buffer,&bufSize);
 804dd06:	f10d 0202 	add.w	r2, sp, #2
 804dd0a:	a901      	add	r1, sp, #4
 804dd0c:	480a      	ldr	r0, [pc, #40]	; (804dd38 <Trace_TxCpltCallback+0x48>)
 804dd0e:	f7ff fe24 	bl	804d95a <circular_queue_get>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 804dd12:	f384 8810 	msr	PRIMASK, r4
    RESTORE_PRIMASK();
    //DBG_GPIO_SET(GPIOB, GPIO_PIN_14);
    //DBG_GPIO_RST(GPIOB, GPIO_PIN_14);
    OutputTrace(buffer, bufSize);
 804dd16:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 804dd1a:	9801      	ldr	r0, [sp, #4]
 804dd1c:	f001 feca 	bl	804fab4 <vcom_Trace>

    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Enable );
    TracePeripheralReady = SET;
    RESTORE_PRIMASK();
  }
}
 804dd20:	b002      	add	sp, #8
 804dd22:	bd10      	pop	{r4, pc}
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Enable );
 804dd24:	2100      	movs	r1, #0
 804dd26:	2020      	movs	r0, #32
 804dd28:	f7ff fd56 	bl	804d7d8 <LPM_SetStopMode>
    TracePeripheralReady = SET;
 804dd2c:	4b03      	ldr	r3, [pc, #12]	; (804dd3c <Trace_TxCpltCallback+0x4c>)
 804dd2e:	2201      	movs	r2, #1
 804dd30:	701a      	strb	r2, [r3, #0]
 804dd32:	f384 8810 	msr	PRIMASK, r4
}
 804dd36:	e7f3      	b.n	804dd20 <Trace_TxCpltCallback+0x30>
 804dd38:	2000b4ac 	.word	0x2000b4ac
 804dd3c:	20001228 	.word	0x20001228

0804dd40 <TraceInit>:
{
 804dd40:	b508      	push	{r3, lr}
  OutputInit(Trace_TxCpltCallback);
 804dd42:	4806      	ldr	r0, [pc, #24]	; (804dd5c <TraceInit+0x1c>)
 804dd44:	f001 fe9a 	bl	804fa7c <vcom_Init>
  circular_queue_init(&MsgTraceQueue, MsgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE);
 804dd48:	4805      	ldr	r0, [pc, #20]	; (804dd60 <TraceInit+0x20>)
 804dd4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 804dd4e:	f100 0110 	add.w	r1, r0, #16
}
 804dd52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  circular_queue_init(&MsgTraceQueue, MsgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE);
 804dd56:	f7ff bd80 	b.w	804d85a <circular_queue_init>
 804dd5a:	bf00      	nop
 804dd5c:	0804dcf1 	.word	0x0804dcf1
 804dd60:	2000b4ac 	.word	0x2000b4ac

0804dd64 <TraceSend>:
{
 804dd64:	b40f      	push	{r0, r1, r2, r3}
 804dd66:	b5f0      	push	{r4, r5, r6, r7, lr}
 804dd68:	b0c5      	sub	sp, #276	; 0x114
 804dd6a:	ab4a      	add	r3, sp, #296	; 0x128
  uint16_t bufSize=vsnprintf(buf,TEMPBUFSIZE,strFormat, vaArgs);
 804dd6c:	f44f 7180 	mov.w	r1, #256	; 0x100
{
 804dd70:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start( vaArgs, strFormat);
 804dd74:	9302      	str	r3, [sp, #8]
  uint16_t bufSize=vsnprintf(buf,TEMPBUFSIZE,strFormat, vaArgs);
 804dd76:	a804      	add	r0, sp, #16
 804dd78:	f002 fb46 	bl	8050408 <vsniprintf>
 804dd7c:	f8ad 0006 	strh.w	r0, [sp, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 804dd80:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 804dd84:	b672      	cpsid	i
  status =circular_queue_add(&MsgTraceQueue,(uint8_t*)buf, bufSize);
 804dd86:	4814      	ldr	r0, [pc, #80]	; (804ddd8 <TraceSend+0x74>)
 804dd88:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 804dd8c:	a904      	add	r1, sp, #16
 804dd8e:	f7ff fd6b 	bl	804d868 <circular_queue_add>
  if ((status==0 ) && (TracePeripheralReady==SET))
 804dd92:	4605      	mov	r5, r0
 804dd94:	b9e0      	cbnz	r0, 804ddd0 <TraceSend+0x6c>
 804dd96:	4f11      	ldr	r7, [pc, #68]	; (804dddc <TraceSend+0x78>)
 804dd98:	783c      	ldrb	r4, [r7, #0]
 804dd9a:	b2e4      	uxtb	r4, r4
 804dd9c:	2c01      	cmp	r4, #1
 804dd9e:	d117      	bne.n	804ddd0 <TraceSend+0x6c>
    circular_queue_get(&MsgTraceQueue,&buffer,&bufSize);
 804dda0:	f10d 0206 	add.w	r2, sp, #6
 804dda4:	a903      	add	r1, sp, #12
 804dda6:	480c      	ldr	r0, [pc, #48]	; (804ddd8 <TraceSend+0x74>)
 804dda8:	f7ff fdd7 	bl	804d95a <circular_queue_get>
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Disable );
 804ddac:	4621      	mov	r1, r4
 804ddae:	2020      	movs	r0, #32
    TracePeripheralReady = RESET;
 804ddb0:	703d      	strb	r5, [r7, #0]
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Disable );
 804ddb2:	f7ff fd11 	bl	804d7d8 <LPM_SetStopMode>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 804ddb6:	f386 8810 	msr	PRIMASK, r6
    OutputTrace(buffer, bufSize);
 804ddba:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 804ddbe:	9803      	ldr	r0, [sp, #12]
 804ddc0:	f001 fe78 	bl	804fab4 <vcom_Trace>
}
 804ddc4:	4628      	mov	r0, r5
 804ddc6:	b045      	add	sp, #276	; 0x114
 804ddc8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 804ddcc:	b004      	add	sp, #16
 804ddce:	4770      	bx	lr
 804ddd0:	f386 8810 	msr	PRIMASK, r6
  return status;
 804ddd4:	e7f6      	b.n	804ddc4 <TraceSend+0x60>
 804ddd6:	bf00      	nop
 804ddd8:	2000b4ac 	.word	0x2000b4ac
 804dddc:	20001228 	.word	0x20001228

0804dde0 <rand1>:

static uint32_t next = 1;

int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 804dde0:	4b07      	ldr	r3, [pc, #28]	; (804de00 <rand1+0x20>)
 804dde2:	4908      	ldr	r1, [pc, #32]	; (804de04 <rand1+0x24>)
 804dde4:	6818      	ldr	r0, [r3, #0]
 804dde6:	f243 0239 	movw	r2, #12345	; 0x3039
 804ddea:	fb01 2000 	mla	r0, r1, r0, r2
 804ddee:	6018      	str	r0, [r3, #0]
 804ddf0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 804ddf4:	fbb0 f3f3 	udiv	r3, r0, r3
 804ddf8:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 804ddfc:	1ac0      	subs	r0, r0, r3
 804ddfe:	4770      	bx	lr
 804de00:	2000122c 	.word	0x2000122c
 804de04:	41c64e6d 	.word	0x41c64e6d

0804de08 <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 804de08:	4b01      	ldr	r3, [pc, #4]	; (804de10 <srand1+0x8>)
 804de0a:	6018      	str	r0, [r3, #0]
}
 804de0c:	4770      	bx	lr
 804de0e:	bf00      	nop
 804de10:	2000122c 	.word	0x2000122c

0804de14 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 804de14:	b538      	push	{r3, r4, r5, lr}
 804de16:	4605      	mov	r5, r0
 804de18:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 804de1a:	f7ff ffe1 	bl	804dde0 <rand1>
 804de1e:	1b61      	subs	r1, r4, r5
 804de20:	3101      	adds	r1, #1
 804de22:	fb90 f3f1 	sdiv	r3, r0, r1
 804de26:	fb03 0011 	mls	r0, r3, r1, r0
}
 804de2a:	4428      	add	r0, r5
 804de2c:	bd38      	pop	{r3, r4, r5, pc}

0804de2e <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 804de2e:	3801      	subs	r0, #1
 804de30:	440a      	add	r2, r1
    while( size-- )
 804de32:	4291      	cmp	r1, r2
 804de34:	d100      	bne.n	804de38 <memcpy1+0xa>
    {
        *dst++ = *src++;
    }
}
 804de36:	4770      	bx	lr
        *dst++ = *src++;
 804de38:	f811 3b01 	ldrb.w	r3, [r1], #1
 804de3c:	f800 3f01 	strb.w	r3, [r0, #1]!
 804de40:	e7f7      	b.n	804de32 <memcpy1+0x4>

0804de42 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 804de42:	4410      	add	r0, r2
 804de44:	440a      	add	r2, r1
    dst = dst + ( size - 1 );
    while( size-- )
 804de46:	4291      	cmp	r1, r2
 804de48:	d100      	bne.n	804de4c <memcpyr+0xa>
    {
        *dst-- = *src++;
    }
}
 804de4a:	4770      	bx	lr
        *dst-- = *src++;
 804de4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 804de50:	f800 3d01 	strb.w	r3, [r0, #-1]!
 804de54:	e7f7      	b.n	804de46 <memcpyr+0x4>

0804de56 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 804de56:	4402      	add	r2, r0
    while( size-- )
 804de58:	4290      	cmp	r0, r2
 804de5a:	d100      	bne.n	804de5e <memset1+0x8>
    {
        *dst++ = value;
    }
}
 804de5c:	4770      	bx	lr
        *dst++ = value;
 804de5e:	f800 1b01 	strb.w	r1, [r0], #1
 804de62:	e7f9      	b.n	804de58 <memset1+0x2>

0804de64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 804de64:	f8df d034 	ldr.w	sp, [pc, #52]	; 804de9c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 804de68:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 804de6a:	e003      	b.n	804de74 <LoopCopyDataInit>

0804de6c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 804de6c:	4b0c      	ldr	r3, [pc, #48]	; (804dea0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 804de6e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 804de70:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 804de72:	3104      	adds	r1, #4

0804de74 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 804de74:	480b      	ldr	r0, [pc, #44]	; (804dea4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 804de76:	4b0c      	ldr	r3, [pc, #48]	; (804dea8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 804de78:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 804de7a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 804de7c:	d3f6      	bcc.n	804de6c <CopyDataInit>
  ldr  r2, =_sbss
 804de7e:	4a0b      	ldr	r2, [pc, #44]	; (804deac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 804de80:	e002      	b.n	804de88 <LoopFillZerobss>

0804de82 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 804de82:	2300      	movs	r3, #0
  str  r3, [r2], #4
 804de84:	f842 3b04 	str.w	r3, [r2], #4

0804de88 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 804de88:	4b09      	ldr	r3, [pc, #36]	; (804deb0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 804de8a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 804de8c:	d3f9      	bcc.n	804de82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 804de8e:	f7f4 ff7d 	bl	8042d8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 804de92:	f002 f91d 	bl	80500d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 804de96:	f000 febf 	bl	804ec18 <main>
  bx  lr    
 804de9a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 804de9c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 804dea0:	08052b80 	.word	0x08052b80
  ldr  r0, =_sdata
 804dea4:	20001000 	.word	0x20001000
  ldr  r3, =_edata
 804dea8:	20001320 	.word	0x20001320
  ldr  r2, =_sbss
 804deac:	20001320 	.word	0x20001320
  ldr  r3, = _ebss
 804deb0:	2000e558 	.word	0x2000e558

0804deb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 804deb4:	e7fe      	b.n	804deb4 <ADC_IRQHandler>

0804deb6 <Str2Int>:
  * @param  pIntNum: The integer value
  * @retval 1: Correct
  *         0: Error
  */
uint32_t Str2Int(uint8_t *pInputStr, uint32_t *pIntNum)
{
 804deb6:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0U;
  uint32_t res = 0U;
  uint32_t val = 0U;

  if ((pInputStr[0U] == '0') && ((pInputStr[1U] == 'x') || (pInputStr[1U] == 'X')))
 804deb8:	7803      	ldrb	r3, [r0, #0]
 804deba:	2b30      	cmp	r3, #48	; 0x30
 804debc:	d127      	bne.n	804df0e <Str2Int+0x58>
 804debe:	7843      	ldrb	r3, [r0, #1]
 804dec0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 804dec4:	2b58      	cmp	r3, #88	; 0x58
 804dec6:	d122      	bne.n	804df0e <Str2Int+0x58>
 804dec8:	2400      	movs	r4, #0
 804deca:	2502      	movs	r5, #2
  {
    i = 2U;
    while ((i < 11U) && (pInputStr[i] != '\0'))
 804decc:	5d43      	ldrb	r3, [r0, r5]
 804dece:	b193      	cbz	r3, 804def6 <Str2Int+0x40>
    {
      if (ISVALIDHEX(pInputStr[i]))
 804ded0:	f023 0620 	bic.w	r6, r3, #32
 804ded4:	3e41      	subs	r6, #65	; 0x41
 804ded6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 804deda:	2e05      	cmp	r6, #5
 804dedc:	b2d7      	uxtb	r7, r2
 804dede:	d901      	bls.n	804dee4 <Str2Int+0x2e>
 804dee0:	2f09      	cmp	r7, #9
 804dee2:	d808      	bhi.n	804def6 <Str2Int+0x40>
      {
        val = (val << 4U) + CONVERTHEX(pInputStr[i]);
 804dee4:	2f09      	cmp	r7, #9
 804dee6:	ea4f 1404 	mov.w	r4, r4, lsl #4
 804deea:	d809      	bhi.n	804df00 <Str2Int+0x4a>
 804deec:	4613      	mov	r3, r2
      {
        /* Return 0, Invalid input */
        res = 0U;
        break;
      }
      i++;
 804deee:	3501      	adds	r5, #1
    while ((i < 11U) && (pInputStr[i] != '\0'))
 804def0:	2d0b      	cmp	r5, #11
        val = (val << 4U) + CONVERTHEX(pInputStr[i]);
 804def2:	441c      	add	r4, r3
    while ((i < 11U) && (pInputStr[i] != '\0'))
 804def4:	d1ea      	bne.n	804decc <Str2Int+0x16>
    }

    /* valid result */
    if (pInputStr[i] == '\0')
 804def6:	5d43      	ldrb	r3, [r0, r5]
 804def8:	bb4b      	cbnz	r3, 804df4e <Str2Int+0x98>
    {
      *pIntNum = val;
 804defa:	600c      	str	r4, [r1, #0]
      res = 1U;
 804defc:	2001      	movs	r0, #1
 804defe:	e027      	b.n	804df50 <Str2Int+0x9a>
        val = (val << 4U) + CONVERTHEX(pInputStr[i]);
 804df00:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 804df04:	2a05      	cmp	r2, #5
 804df06:	bf94      	ite	ls
 804df08:	3b37      	subls	r3, #55	; 0x37
 804df0a:	3b57      	subhi	r3, #87	; 0x57
 804df0c:	e7ef      	b.n	804deee <Str2Int+0x38>
 804df0e:	1e44      	subs	r4, r0, #1
 804df10:	f100 060a 	add.w	r6, r0, #10
 804df14:	2300      	movs	r3, #0
        *pIntNum = val;
        res = 1U;
      }
      else if (ISVALIDDEC(pInputStr[i]))
      {
        val = val * 10U + CONVERTDEC(pInputStr[i]);
 804df16:	270a      	movs	r7, #10
      if (pInputStr[i] == '\0')
 804df18:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 804df1c:	b90a      	cbnz	r2, 804df22 <Str2Int+0x6c>
        *pIntNum = val;
 804df1e:	600b      	str	r3, [r1, #0]
        res = 1U;
 804df20:	e7ec      	b.n	804defc <Str2Int+0x46>
      else if (((pInputStr[i] == 'k') || (pInputStr[i] == 'K')) && (i > 0U))
 804df22:	f002 05df 	and.w	r5, r2, #223	; 0xdf
 804df26:	2d4b      	cmp	r5, #75	; 0x4b
 804df28:	d103      	bne.n	804df32 <Str2Int+0x7c>
 804df2a:	4284      	cmp	r4, r0
 804df2c:	d007      	beq.n	804df3e <Str2Int+0x88>
        val = val << 10U;
 804df2e:	029b      	lsls	r3, r3, #10
 804df30:	e7f5      	b.n	804df1e <Str2Int+0x68>
      else if (((pInputStr[i] == 'm') || (pInputStr[i] == 'M')) && (i > 0U))
 804df32:	2d4d      	cmp	r5, #77	; 0x4d
 804df34:	d103      	bne.n	804df3e <Str2Int+0x88>
 804df36:	4284      	cmp	r4, r0
 804df38:	d009      	beq.n	804df4e <Str2Int+0x98>
        val = val << 20U;
 804df3a:	051b      	lsls	r3, r3, #20
 804df3c:	e7ef      	b.n	804df1e <Str2Int+0x68>
      else if (ISVALIDDEC(pInputStr[i]))
 804df3e:	3a30      	subs	r2, #48	; 0x30
 804df40:	b2d5      	uxtb	r5, r2
 804df42:	2d09      	cmp	r5, #9
 804df44:	d803      	bhi.n	804df4e <Str2Int+0x98>
    while ((i < 11U) && (res != 1U))
 804df46:	42b4      	cmp	r4, r6
        val = val * 10U + CONVERTDEC(pInputStr[i]);
 804df48:	fb07 2303 	mla	r3, r7, r3, r2
    while ((i < 11U) && (res != 1U))
 804df4c:	d1e4      	bne.n	804df18 <Str2Int+0x62>
      res = 1U;
 804df4e:	2000      	movs	r0, #0
      i++;
    }
  }

  return res;
}
 804df50:	bdf0      	pop	{r4, r5, r6, r7, pc}

0804df52 <Serial_PutByte>:
  * @brief  Transmit a byte to the HyperTerminal
  * @param  param The byte to be sent
  * @retval HAL_StatusTypeDef HAL_OK if OK
  */
HAL_StatusTypeDef Serial_PutByte(uint8_t uParam)
{
 804df52:	b507      	push	{r0, r1, r2, lr}
 804df54:	ab02      	add	r3, sp, #8
  return COM_Transmit(&uParam, 1U, TX_TIMEOUT);
 804df56:	2264      	movs	r2, #100	; 0x64
{
 804df58:	f803 0d01 	strb.w	r0, [r3, #-1]!
  return COM_Transmit(&uParam, 1U, TX_TIMEOUT);
 804df5c:	2101      	movs	r1, #1
 804df5e:	4618      	mov	r0, r3
 804df60:	f001 ff48 	bl	804fdf4 <COM_Transmit>
}
 804df64:	b003      	add	sp, #12
 804df66:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0804df6c <Error_Handler>:
  __HAL_RCC_DBGMCU_CLK_DISABLE();
#endif
}

void Error_Handler(void)
{
 804df6c:	b508      	push	{r3, lr}
	PRINTF("Erro Handler");
 804df6e:	4802      	ldr	r0, [pc, #8]	; (804df78 <Error_Handler+0xc>)
 804df70:	f7ff fef8 	bl	804dd64 <TraceSend>
 804df74:	e7fe      	b.n	804df74 <Error_Handler+0x8>
 804df76:	bf00      	nop
 804df78:	080525ec 	.word	0x080525ec

0804df7c <FLASH_INT_If_Clear_Error>:
  * @brief  Clear error flags raised during previous operation
  * @param  None
  * @retval HAL Status.
  */
HAL_StatusTypeDef FLASH_INT_If_Clear_Error(void)
{
 804df7c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef ret = HAL_ERROR;

  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 804df7e:	f7f5 fd6b 	bl	8043a58 <HAL_FLASH_Unlock>
 804df82:	b950      	cbnz	r0, 804df9a <FLASH_INT_If_Clear_Error+0x1e>
  {

    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_SR_WRPERR | FLASH_SR_PGAERR | FLASH_SR_PGPERR | FLASH_SR_PGSERR);
 804df84:	4b06      	ldr	r3, [pc, #24]	; (804dfa0 <FLASH_INT_If_Clear_Error+0x24>)
 804df86:	22f0      	movs	r2, #240	; 0xf0
 804df88:	60da      	str	r2, [r3, #12]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 804df8a:	f7f5 fd77 	bl	8043a7c <HAL_FLASH_Lock>
 804df8e:	b118      	cbz	r0, 804df98 <FLASH_INT_If_Clear_Error+0x1c>
      ret = HAL_OK;
    }
#ifdef FLASH_IF_DBG
    else
    {
      FLASH_IF_TRACE("[FLASH_IF] Lock failure\r\n");
 804df90:	4804      	ldr	r0, [pc, #16]	; (804dfa4 <FLASH_INT_If_Clear_Error+0x28>)
#endif /* FLASH_IF_DBG */
  }
#ifdef FLASH_IF_DBG
  else
  {
    FLASH_IF_TRACE("[FLASH_IF] Unlock failure\r\n");
 804df92:	f002 f957 	bl	8050244 <puts>
  HAL_StatusTypeDef ret = HAL_ERROR;
 804df96:	2001      	movs	r0, #1
  }
#endif /* FLASH_IF_DBG */
  return ret;
}
 804df98:	bd08      	pop	{r3, pc}
    FLASH_IF_TRACE("[FLASH_IF] Unlock failure\r\n");
 804df9a:	4803      	ldr	r0, [pc, #12]	; (804dfa8 <FLASH_INT_If_Clear_Error+0x2c>)
 804df9c:	e7f9      	b.n	804df92 <FLASH_INT_If_Clear_Error+0x16>
 804df9e:	bf00      	nop
 804dfa0:	40023c00 	.word	0x40023c00
 804dfa4:	080525f9 	.word	0x080525f9
 804dfa8:	08052612 	.word	0x08052612

0804dfac <FLASH_If_Read>:
  if ((uint32_t) pSource < EXTERNAL_FLASH_ADDRESS)
 804dfac:	f1b1 4f10 	cmp.w	r1, #2415919104	; 0x90000000
{
 804dfb0:	b508      	push	{r3, lr}
  if ((uint32_t) pSource < EXTERNAL_FLASH_ADDRESS)
 804dfb2:	d203      	bcs.n	804dfbc <FLASH_If_Read+0x10>
  memcpy(pDestination, pSource, uLength);
 804dfb4:	f002 f8bf 	bl	8050136 <memcpy>
    return FLASH_INT_If_Read(pDestination, pSource, uLength);
 804dfb8:	2000      	movs	r0, #0
}
 804dfba:	bd08      	pop	{r3, pc}
    return FLASH_EXT_If_Read(pDestination, pSource, uLength);
 804dfbc:	2001      	movs	r0, #1
 804dfbe:	e7fc      	b.n	804dfba <FLASH_If_Read+0xe>

0804dfc0 <FLASH_INT_If_Erase_Size>:
{
 804dfc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 804dfc2:	b087      	sub	sp, #28
  uint32_t sector_error = 0U;
 804dfc4:	2300      	movs	r3, #0
{
 804dfc6:	4605      	mov	r5, r0
 804dfc8:	460f      	mov	r7, r1
  uint32_t sector_error = 0U;
 804dfca:	9300      	str	r3, [sp, #0]
  e_ret_status = FLASH_INT_If_Clear_Error();
 804dfcc:	f7ff ffd6 	bl	804df7c <FLASH_INT_If_Clear_Error>
  if (e_ret_status == HAL_OK)
 804dfd0:	4604      	mov	r4, r0
 804dfd2:	bb90      	cbnz	r0, 804e03a <FLASH_INT_If_Erase_Size+0x7a>
    if (HAL_FLASH_Unlock() == HAL_OK)
 804dfd4:	f7f5 fd40 	bl	8043a58 <HAL_FLASH_Unlock>
 804dfd8:	4604      	mov	r4, r0
 804dfda:	bba8      	cbnz	r0, 804e048 <FLASH_INT_If_Erase_Size+0x88>

static uint32_t GetSector(uint32_t Add)
{
  uint32_t sector = 0;

  while (Add >= FlashSectorsAddress[sector + 1])
 804dfdc:	4b1b      	ldr	r3, [pc, #108]	; (804e04c <FLASH_INT_If_Erase_Size+0x8c>)
  uint32_t sector = 0;
 804dfde:	4606      	mov	r6, r0
 804dfe0:	4618      	mov	r0, r3
  while (Add >= FlashSectorsAddress[sector + 1])
 804dfe2:	1c72      	adds	r2, r6, #1
 804dfe4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 804dfe8:	428d      	cmp	r5, r1
 804dfea:	d229      	bcs.n	804e040 <FLASH_INT_If_Erase_Size+0x80>
      nb_sectors = GetSector(uStart + uLength - 1U) - first_sector + 1U;
 804dfec:	3f01      	subs	r7, #1
 804dfee:	443d      	add	r5, r7
  uint32_t sector = 0;
 804dff0:	2300      	movs	r3, #0
  while (Add >= FlashSectorsAddress[sector + 1])
 804dff2:	1c5a      	adds	r2, r3, #1
 804dff4:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 804dff8:	428d      	cmp	r5, r1
 804dffa:	d223      	bcs.n	804e044 <FLASH_INT_If_Erase_Size+0x84>
      nb_sectors = GetSector(uStart + uLength - 1U) - first_sector + 1U;
 804dffc:	f1c6 0501 	rsb	r5, r6, #1
 804e000:	441d      	add	r5, r3
      p_erase_init.TypeErase     = FLASH_TYPEERASE_SECTORS;
 804e002:	2300      	movs	r3, #0
 804e004:	9301      	str	r3, [sp, #4]
        WRITE_REG(IWDG->KR, IWDG_KEY_RELOAD);
 804e006:	4f12      	ldr	r7, [pc, #72]	; (804e050 <FLASH_INT_If_Erase_Size+0x90>)
      p_erase_init.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 804e008:	2302      	movs	r3, #2
 804e00a:	9305      	str	r3, [sp, #20]
        chunk_nb_sectors = (nb_sectors >= NB_PAGE_SECTOR_PER_ERASE) ? NB_PAGE_SECTOR_PER_ERASE : nb_sectors;
 804e00c:	2d02      	cmp	r5, #2
 804e00e:	462b      	mov	r3, r5
        if (HAL_FLASHEx_Erase(&p_erase_init, &sector_error) != HAL_OK)
 804e010:	4669      	mov	r1, sp
        chunk_nb_sectors = (nb_sectors >= NB_PAGE_SECTOR_PER_ERASE) ? NB_PAGE_SECTOR_PER_ERASE : nb_sectors;
 804e012:	bf28      	it	cs
 804e014:	2302      	movcs	r3, #2
        if (HAL_FLASHEx_Erase(&p_erase_init, &sector_error) != HAL_OK)
 804e016:	a801      	add	r0, sp, #4
        p_erase_init.NbSectors = chunk_nb_sectors;
 804e018:	e9cd 6303 	strd	r6, r3, [sp, #12]
        nb_sectors -= chunk_nb_sectors;
 804e01c:	1aed      	subs	r5, r5, r3
        first_sector += chunk_nb_sectors;
 804e01e:	441e      	add	r6, r3
        if (HAL_FLASHEx_Erase(&p_erase_init, &sector_error) != HAL_OK)
 804e020:	f7f5 fe10 	bl	8043c44 <HAL_FLASHEx_Erase>
 804e024:	b110      	cbz	r0, 804e02c <FLASH_INT_If_Erase_Size+0x6c>
          HAL_FLASH_GetError();
 804e026:	f7f5 fd33 	bl	8043a90 <HAL_FLASH_GetError>
          e_ret_status = HAL_ERROR;
 804e02a:	2401      	movs	r4, #1
        WRITE_REG(IWDG->KR, IWDG_KEY_RELOAD);
 804e02c:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 804e030:	603b      	str	r3, [r7, #0]
      } while (nb_sectors > 0);
 804e032:	2d00      	cmp	r5, #0
 804e034:	d1ea      	bne.n	804e00c <FLASH_INT_If_Erase_Size+0x4c>
      HAL_FLASH_Lock();
 804e036:	f7f5 fd21 	bl	8043a7c <HAL_FLASH_Lock>
}
 804e03a:	4620      	mov	r0, r4
 804e03c:	b007      	add	sp, #28
 804e03e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  {
    sector++;
 804e040:	4616      	mov	r6, r2
 804e042:	e7ce      	b.n	804dfe2 <FLASH_INT_If_Erase_Size+0x22>
 804e044:	4613      	mov	r3, r2
 804e046:	e7d4      	b.n	804dff2 <FLASH_INT_If_Erase_Size+0x32>
      e_ret_status = HAL_ERROR;
 804e048:	2401      	movs	r4, #1
 804e04a:	e7f6      	b.n	804e03a <FLASH_INT_If_Erase_Size+0x7a>
 804e04c:	20001230 	.word	0x20001230
 804e050:	40003000 	.word	0x40003000

0804e054 <FLASH_If_Erase_Size>:
  if ((uint32_t) pStart < EXTERNAL_FLASH_ADDRESS)
 804e054:	f1b0 4f10 	cmp.w	r0, #2415919104	; 0x90000000
 804e058:	d201      	bcs.n	804e05e <FLASH_If_Erase_Size+0xa>
    return FLASH_INT_If_Erase_Size(pStart, uLength);
 804e05a:	f7ff bfb1 	b.w	804dfc0 <FLASH_INT_If_Erase_Size>
}
 804e05e:	2001      	movs	r0, #1
 804e060:	4770      	bx	lr

0804e062 <FLASH_INT_If_Write>:
{
 804e062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804e066:	4605      	mov	r5, r0
 804e068:	460e      	mov	r6, r1
 804e06a:	4617      	mov	r7, r2
  e_ret_status = FLASH_INT_If_Clear_Error();
 804e06c:	f7ff ff86 	bl	804df7c <FLASH_INT_If_Clear_Error>
  if (e_ret_status == HAL_OK)
 804e070:	4604      	mov	r4, r0
 804e072:	b940      	cbnz	r0, 804e086 <FLASH_INT_If_Write+0x24>
    if (HAL_FLASH_Unlock() != HAL_OK)
 804e074:	f7f5 fcf0 	bl	8043a58 <HAL_FLASH_Unlock>
 804e078:	4604      	mov	r4, r0
 804e07a:	b9c8      	cbnz	r0, 804e0b0 <FLASH_INT_If_Write+0x4e>
 804e07c:	442f      	add	r7, r5
      for (i = 0U; i < uLength; i++)
 804e07e:	42bd      	cmp	r5, r7
 804e080:	d104      	bne.n	804e08c <FLASH_INT_If_Write+0x2a>
      HAL_FLASH_Lock();
 804e082:	f7f5 fcfb 	bl	8043a7c <HAL_FLASH_Lock>
}
 804e086:	4620      	mov	r0, r4
 804e088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, (uint32_t) pDestination,  *((uint8_t *)(pdata + i))) == HAL_OK)
 804e08c:	7832      	ldrb	r2, [r6, #0]
 804e08e:	2300      	movs	r3, #0
 804e090:	4629      	mov	r1, r5
 804e092:	2000      	movs	r0, #0
 804e094:	46b0      	mov	r8, r6
 804e096:	f7f5 fd2b 	bl	8043af0 <HAL_FLASH_Program>
 804e09a:	b938      	cbnz	r0, 804e0ac <FLASH_INT_If_Write+0x4a>
          if (*(uint8_t *)pDestination != *(uint8_t *)(pdata + i))
 804e09c:	f815 3b01 	ldrb.w	r3, [r5], #1
 804e0a0:	f898 2000 	ldrb.w	r2, [r8]
 804e0a4:	429a      	cmp	r2, r3
 804e0a6:	f106 0601 	add.w	r6, r6, #1
 804e0aa:	d0e8      	beq.n	804e07e <FLASH_INT_If_Write+0x1c>
          e_ret_status = HAL_ERROR;
 804e0ac:	2401      	movs	r4, #1
 804e0ae:	e7e8      	b.n	804e082 <FLASH_INT_If_Write+0x20>
      return HAL_ERROR;
 804e0b0:	2401      	movs	r4, #1
 804e0b2:	e7e8      	b.n	804e086 <FLASH_INT_If_Write+0x24>

0804e0b4 <FLASH_If_Write>:
  if ((uint32_t) pDestination < EXTERNAL_FLASH_ADDRESS)
 804e0b4:	f1b0 4f10 	cmp.w	r0, #2415919104	; 0x90000000
 804e0b8:	d201      	bcs.n	804e0be <FLASH_If_Write+0xa>
    return FLASH_INT_If_Write(pDestination, pSource, uLength);
 804e0ba:	f7ff bfd2 	b.w	804e062 <FLASH_INT_If_Write>
}
 804e0be:	2001      	movs	r0, #1
 804e0c0:	4770      	bx	lr
	...

0804e0c4 <Ymodem_HeaderPktRxCpltCallback>:
  * @brief  Ymodem Header Packet Transfer completed callback.
  * @param  uFileSize Dimension of the file that will be received (Bytes).
  * @retval None
  */
HAL_StatusTypeDef Ymodem_HeaderPktRxCpltCallback(uint32_t uFileSize)
{
 804e0c4:	b510      	push	{r4, lr}
  /*Reset of the ymodem variables */
  m_uFileSizeYmodem = 0U;
  m_uPacketsReceived = 0U;
 804e0c6:	4b07      	ldr	r3, [pc, #28]	; (804e0e4 <Ymodem_HeaderPktRxCpltCallback+0x20>)
 804e0c8:	2400      	movs	r4, #0
  m_uNbrBlocksYmodem = 0U;

  /*Filesize information is stored*/
  m_uFileSizeYmodem = uFileSize;
 804e0ca:	e9c3 4000 	strd	r4, r0, [r3]

  /*Compute the number of blocks */
#ifndef MINICOM_YMODEM
  /* Teraterm sends 1kB YMODEM packets */
  m_uNbrBlocksYmodem = (m_uFileSizeYmodem + (PACKET_1K_SIZE - 1U)) / PACKET_1K_SIZE;
 804e0ce:	f200 30ff 	addw	r0, r0, #1023	; 0x3ff
 804e0d2:	0a80      	lsrs	r0, r0, #10
 804e0d4:	6098      	str	r0, [r3, #8]
  /* Minicom sends 128 bytes YMODEM packets */
  m_uNbrBlocksYmodem = (m_uFileSizeYmodem + (PACKET_SIZE - 1U)) / PACKET_SIZE;
#endif /* MINICOM_YMODEM */

  /* NOTE : delay inserted for Ymodem protocol*/
  HAL_Delay(1000U);
 804e0d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 804e0da:	f001 f8fb 	bl	804f2d4 <HAL_Delay>

  return HAL_OK;
}
 804e0de:	4620      	mov	r0, r4
 804e0e0:	bd10      	pop	{r4, pc}
 804e0e2:	bf00      	nop
 804e0e4:	2000b5bc 	.word	0x2000b5bc

0804e0e8 <Ymodem_DataPktRxCpltCallback>:
  * @retval None
  */
#ifndef MINICOM_YMODEM
/* Teraterm YMODEM */
HAL_StatusTypeDef Ymodem_DataPktRxCpltCallback(uint8_t *pData, uint32_t uFlashDestination, uint32_t uSize)
{
 804e0e8:	b570      	push	{r4, r5, r6, lr}
  uint32_t uOldSize;
#if !defined(SFU_NO_SWAP)
  SE_FwRawHeaderTypeDef fw_header_dwl;
#endif /* (SFU_NO_SWAP) */

  m_uPacketsReceived++;
 804e0ea:	4c43      	ldr	r4, [pc, #268]	; (804e1f8 <Ymodem_DataPktRxCpltCallback+0x110>)
 804e0ec:	6823      	ldr	r3, [r4, #0]
{
 804e0ee:	4615      	mov	r5, r2

  /*Increase the number of received packets*/
  if (m_uPacketsReceived == m_uNbrBlocksYmodem) /*Last Packet*/
 804e0f0:	68a2      	ldr	r2, [r4, #8]
  m_uPacketsReceived++;
 804e0f2:	3301      	adds	r3, #1
  if (m_uPacketsReceived == m_uNbrBlocksYmodem) /*Last Packet*/
 804e0f4:	4293      	cmp	r3, r2
{
 804e0f6:	b0d0      	sub	sp, #320	; 0x140
 804e0f8:	4606      	mov	r6, r0
  m_uPacketsReceived++;
 804e0fa:	6023      	str	r3, [r4, #0]
  if (m_uPacketsReceived == m_uNbrBlocksYmodem) /*Last Packet*/
 804e0fc:	d106      	bne.n	804e10c <Ymodem_DataPktRxCpltCallback+0x24>
  {
    /*Extracting actual payload from last packet*/
    if (0 == (m_uFileSizeYmodem % PACKET_1K_SIZE))
 804e0fe:	6865      	ldr	r5, [r4, #4]
 804e100:	f3c5 0509 	ubfx	r5, r5, #0, #10
    {
      /* The last packet must be fully considered */
      uSize = PACKET_1K_SIZE;
 804e104:	2d00      	cmp	r5, #0
 804e106:	bf08      	it	eq
 804e108:	f44f 6580 	moveq.w	r5, #1024	; 0x400
      uSize = m_uFileSizeYmodem - ((uint32_t)(m_uFileSizeYmodem / PACKET_1K_SIZE) * PACKET_1K_SIZE);
    }
  }

  /* First packet : Contains header information: PartialFwSize and PartialFwOffset information */
  if (m_uPacketsReceived == 1)
 804e10c:	2b01      	cmp	r3, #1
 804e10e:	d112      	bne.n	804e136 <Ymodem_DataPktRxCpltCallback+0x4e>
    /* End of Image to be downloaded */
#if defined(SFU_NO_SWAP)
    m_uDwlImgEnd = uFlashDestination + ((SE_FwRawHeaderTypeDef *)pData)->FwSize + SFU_IMG_IMAGE_OFFSET;
#else
    m_uDwlImgEnd = uFlashDestination + ((SE_FwRawHeaderTypeDef *)pData)->PartialFwSize
                   + (((SE_FwRawHeaderTypeDef *)pData)->PartialFwOffset % SLOT_SIZE(SLOT_SWAP))
 804e110:	4b3a      	ldr	r3, [pc, #232]	; (804e1fc <Ymodem_DataPktRxCpltCallback+0x114>)
 804e112:	4a3b      	ldr	r2, [pc, #236]	; (804e200 <Ymodem_DataPktRxCpltCallback+0x118>)
 804e114:	69db      	ldr	r3, [r3, #28]
 804e116:	69d2      	ldr	r2, [r2, #28]
 804e118:	68f0      	ldr	r0, [r6, #12]
 804e11a:	3301      	adds	r3, #1
 804e11c:	1a9b      	subs	r3, r3, r2
 804e11e:	fbb0 f2f3 	udiv	r2, r0, r3
 804e122:	fb03 0312 	mls	r3, r3, r2, r0
    m_uDwlImgEnd = uFlashDestination + ((SE_FwRawHeaderTypeDef *)pData)->PartialFwSize
 804e126:	6932      	ldr	r2, [r6, #16]
    m_uDwlImgCurrent = uFlashDestination;
 804e128:	e9c4 1103 	strd	r1, r1, [r4, #12]
    m_uDwlImgEnd = uFlashDestination + ((SE_FwRawHeaderTypeDef *)pData)->PartialFwSize
 804e12c:	4411      	add	r1, r2
                   + SFU_IMG_IMAGE_OFFSET;
 804e12e:	f501 7100 	add.w	r1, r1, #512	; 0x200
 804e132:	4419      	add	r1, r3
    m_uDwlImgEnd = uFlashDestination + ((SE_FwRawHeaderTypeDef *)pData)->PartialFwSize
 804e134:	6161      	str	r1, [r4, #20]
#endif /* SFU_NO_SWAP */
  }

  /* This packet : contains end of FW header */
  if ((m_uDwlImgCurrent < (m_uDwlImgStart + SFU_IMG_IMAGE_OFFSET)) &&
 804e136:	68e3      	ldr	r3, [r4, #12]
 804e138:	6920      	ldr	r0, [r4, #16]
 804e13a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 804e13e:	4283      	cmp	r3, r0
 804e140:	d946      	bls.n	804e1d0 <Ymodem_DataPktRxCpltCallback+0xe8>
      ((m_uDwlImgCurrent + uSize) >= (m_uDwlImgStart + SFU_IMG_IMAGE_OFFSET)))
 804e142:	1942      	adds	r2, r0, r5
  if ((m_uDwlImgCurrent < (m_uDwlImgStart + SFU_IMG_IMAGE_OFFSET)) &&
 804e144:	4293      	cmp	r3, r2
 804e146:	d843      	bhi.n	804e1d0 <Ymodem_DataPktRxCpltCallback+0xe8>
    uLength = SFU_IMG_IMAGE_OFFSET % PACKET_1K_SIZE;
    if (uLength == 0)
    {
      uLength = PACKET_1K_SIZE;
    }
    if (FLASH_If_Write((void *)m_uDwlImgCurrent, pData, uLength) == HAL_OK)
 804e148:	f44f 7200 	mov.w	r2, #512	; 0x200
 804e14c:	4631      	mov	r1, r6
 804e14e:	f7ff ffb1 	bl	804e0b4 <FLASH_If_Write>
 804e152:	2800      	cmp	r0, #0
 804e154:	d13e      	bne.n	804e1d4 <Ymodem_DataPktRxCpltCallback+0xec>
#else
      /*
       * Read header from dwl area : in some configuration header can be transmitted with 2 YMODEM packets
       * ==> pData contains only the last part of the header and cannot be used to retrieve PartialFwOffset
       */
      e_ret_status = FLASH_If_Read((uint8_t *)&fw_header_dwl, (void *) m_uDwlImgStart, SE_FW_HEADER_TOT_LEN);
 804e156:	f44f 72a0 	mov.w	r2, #320	; 0x140
 804e15a:	68e1      	ldr	r1, [r4, #12]
 804e15c:	4668      	mov	r0, sp
 804e15e:	f7ff ff25 	bl	804dfac <FLASH_If_Read>

      /* Shift the DWL area pointer, to align image with (PartialFwOffset % sector size) in DWL area */
      m_uDwlImgCurrent += uLength + fw_header_dwl.PartialFwOffset % SLOT_SIZE(SLOT_SWAP);
 804e162:	4b26      	ldr	r3, [pc, #152]	; (804e1fc <Ymodem_DataPktRxCpltCallback+0x114>)
 804e164:	4a26      	ldr	r2, [pc, #152]	; (804e200 <Ymodem_DataPktRxCpltCallback+0x118>)
 804e166:	69db      	ldr	r3, [r3, #28]
 804e168:	69d2      	ldr	r2, [r2, #28]
 804e16a:	9903      	ldr	r1, [sp, #12]
 804e16c:	3301      	adds	r3, #1
 804e16e:	1a9b      	subs	r3, r3, r2
 804e170:	fbb1 f2f3 	udiv	r2, r1, r3
 804e174:	fb03 1312 	mls	r3, r3, r2, r1
 804e178:	6922      	ldr	r2, [r4, #16]
 804e17a:	f502 7200 	add.w	r2, r2, #512	; 0x200
 804e17e:	4413      	add	r3, r2
 804e180:	6123      	str	r3, [r4, #16]
#endif /* SFU_NO_SWAP */

      /* Update remaining packet size to write */
      uSize -= uLength;
 804e182:	f5a5 7500 	sub.w	r5, r5, #512	; 0x200

      /* Update pData pointer to received packet data */
      pData += uLength;
 804e186:	f506 7600 	add.w	r6, r6, #512	; 0x200
      e_ret_status = HAL_ERROR;
    }
  }

  /* Skip data write if all has been already written as part of the header */
  if (uSize != 0U)
 804e18a:	b19d      	cbz	r5, 804e1b4 <Ymodem_DataPktRxCpltCallback+0xcc>
  {
    /*Adjust dimension to unitary flash programming length */
    if (uSize % FLASH_IF_MIN_WRITE_LEN != 0U)
 804e18c:	076b      	lsls	r3, r5, #29
 804e18e:	d00b      	beq.n	804e1a8 <Ymodem_DataPktRxCpltCallback+0xc0>
    {
      uOldSize = uSize;
      uSize += (FLASH_IF_MIN_WRITE_LEN - (uSize % FLASH_IF_MIN_WRITE_LEN));
      m_uDwlImgEnd += (FLASH_IF_MIN_WRITE_LEN - (uSize % FLASH_IF_MIN_WRITE_LEN));
 804e190:	6962      	ldr	r2, [r4, #20]
      uSize += (FLASH_IF_MIN_WRITE_LEN - (uSize % FLASH_IF_MIN_WRITE_LEN));
 804e192:	f025 0307 	bic.w	r3, r5, #7
      m_uDwlImgEnd += (FLASH_IF_MIN_WRITE_LEN - (uSize % FLASH_IF_MIN_WRITE_LEN));
 804e196:	3208      	adds	r2, #8
      uSize += (FLASH_IF_MIN_WRITE_LEN - (uSize % FLASH_IF_MIN_WRITE_LEN));
 804e198:	3308      	adds	r3, #8
      m_uDwlImgEnd += (FLASH_IF_MIN_WRITE_LEN - (uSize % FLASH_IF_MIN_WRITE_LEN));
 804e19a:	6162      	str	r2, [r4, #20]
 804e19c:	4435      	add	r5, r6
      while (uOldSize < uSize)
      {
        pData[uOldSize] = 0xFF;
 804e19e:	21ff      	movs	r1, #255	; 0xff
      while (uOldSize < uSize)
 804e1a0:	1baa      	subs	r2, r5, r6
 804e1a2:	429a      	cmp	r2, r3
 804e1a4:	d318      	bcc.n	804e1d8 <Ymodem_DataPktRxCpltCallback+0xf0>
 804e1a6:	461d      	mov	r5, r3
    }

    /* Write Data in Flash - size has to be 64-bit aligned */

    /* Write in flash only if not beyond allowed area */
    if (((m_uDwlImgCurrent + uSize) <= m_uDwlImgEnd) && (e_ret_status == HAL_OK))
 804e1a8:	6923      	ldr	r3, [r4, #16]
 804e1aa:	6962      	ldr	r2, [r4, #20]
 804e1ac:	1959      	adds	r1, r3, r5
 804e1ae:	4291      	cmp	r1, r2
 804e1b0:	d915      	bls.n	804e1de <Ymodem_DataPktRxCpltCallback+0xf6>
        e_ret_status = HAL_ERROR;
      }
    }
    else
    {
      e_ret_status = HAL_ERROR;
 804e1b2:	2001      	movs	r0, #1
    }
  }

  /* Last packet : reset m_uPacketsReceived */
  if (m_uPacketsReceived == m_uNbrBlocksYmodem)
 804e1b4:	68a3      	ldr	r3, [r4, #8]
 804e1b6:	6822      	ldr	r2, [r4, #0]
 804e1b8:	429a      	cmp	r2, r3
  {
    m_uPacketsReceived = 0U;
 804e1ba:	bf04      	itt	eq
 804e1bc:	2300      	moveq	r3, #0
 804e1be:	6023      	streq	r3, [r4, #0]
  }

  /* Reset data counters in case of error */
  if (e_ret_status == HAL_ERROR)
 804e1c0:	2801      	cmp	r0, #1
  {

    /*Reset of the ymodem variables */
    m_uFileSizeYmodem = 0U;
 804e1c2:	bf02      	ittt	eq
 804e1c4:	2300      	moveq	r3, #0
    m_uPacketsReceived = 0U;
 804e1c6:	e9c4 3300 	strdeq	r3, r3, [r4]
    m_uNbrBlocksYmodem = 0U;
 804e1ca:	60a3      	streq	r3, [r4, #8]
  }
  return e_ret_status;
}
 804e1cc:	b050      	add	sp, #320	; 0x140
 804e1ce:	bd70      	pop	{r4, r5, r6, pc}
  HAL_StatusTypeDef e_ret_status = HAL_OK;
 804e1d0:	2000      	movs	r0, #0
 804e1d2:	e7da      	b.n	804e18a <Ymodem_DataPktRxCpltCallback+0xa2>
      e_ret_status = HAL_ERROR;
 804e1d4:	2001      	movs	r0, #1
 804e1d6:	e7d8      	b.n	804e18a <Ymodem_DataPktRxCpltCallback+0xa2>
        pData[uOldSize] = 0xFF;
 804e1d8:	f805 1b01 	strb.w	r1, [r5], #1
 804e1dc:	e7e0      	b.n	804e1a0 <Ymodem_DataPktRxCpltCallback+0xb8>
    if (((m_uDwlImgCurrent + uSize) <= m_uDwlImgEnd) && (e_ret_status == HAL_OK))
 804e1de:	2800      	cmp	r0, #0
 804e1e0:	d1e7      	bne.n	804e1b2 <Ymodem_DataPktRxCpltCallback+0xca>
      if (FLASH_If_Write((void *)m_uDwlImgCurrent, pData, uSize) == HAL_OK)
 804e1e2:	462a      	mov	r2, r5
 804e1e4:	4631      	mov	r1, r6
 804e1e6:	4618      	mov	r0, r3
 804e1e8:	f7ff ff64 	bl	804e0b4 <FLASH_If_Write>
 804e1ec:	2800      	cmp	r0, #0
 804e1ee:	d1e0      	bne.n	804e1b2 <Ymodem_DataPktRxCpltCallback+0xca>
        m_uDwlImgCurrent += uSize;
 804e1f0:	6923      	ldr	r3, [r4, #16]
 804e1f2:	441d      	add	r5, r3
 804e1f4:	6125      	str	r5, [r4, #16]
 804e1f6:	e7dd      	b.n	804e1b4 <Ymodem_DataPktRxCpltCallback+0xcc>
 804e1f8:	2000b5bc 	.word	0x2000b5bc
 804e1fc:	08051df0 	.word	0x08051df0
 804e200:	08051dd0 	.word	0x08051dd0

0804e204 <FW_UPDATE_Run>:
{
 804e204:	b530      	push	{r4, r5, lr}
  PRINTF("\r\n================ New Fw Download =========================\r\n\n");
 804e206:	482c      	ldr	r0, [pc, #176]	; (804e2b8 <FW_UPDATE_Run+0xb4>)
{
 804e208:	b0d7      	sub	sp, #348	; 0x15c
  PRINTF("\r\n================ New Fw Download =========================\r\n\n");
 804e20a:	f7ff fdab 	bl	804dd64 <TraceSend>
  SFU_APP_GetDownloadAreaInfo(SLOT_DWL_1, &fw_image_dwl_area);
 804e20e:	a902      	add	r1, sp, #8
 804e210:	2004      	movs	r0, #4
 804e212:	f000 ffad 	bl	804f170 <SFU_APP_GetDownloadAreaInfo>
  YMODEM_CallbacksTypeDef ymodemCb = {Ymodem_HeaderPktRxCpltCallback, Ymodem_DataPktRxCpltCallback};
 804e216:	4b29      	ldr	r3, [pc, #164]	; (804e2bc <FW_UPDATE_Run+0xb8>)
 804e218:	e893 0003 	ldmia.w	r3, {r0, r1}
 804e21c:	ac06      	add	r4, sp, #24
 804e21e:	e884 0003 	stmia.w	r4, {r0, r1}
  PRINTF("  -- Send Firmware \r\n\n");
 804e222:	4827      	ldr	r0, [pc, #156]	; (804e2c0 <FW_UPDATE_Run+0xbc>)
 804e224:	f7ff fd9e 	bl	804dd64 <TraceSend>
  WRITE_REG(IWDG->KR, IWDG_KEY_RELOAD);
 804e228:	4b26      	ldr	r3, [pc, #152]	; (804e2c4 <FW_UPDATE_Run+0xc0>)
  PRINTF("  -- -- Erasing download area ...\r\n\n");
 804e22a:	4827      	ldr	r0, [pc, #156]	; (804e2c8 <FW_UPDATE_Run+0xc4>)
  WRITE_REG(IWDG->KR, IWDG_KEY_RELOAD);
 804e22c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 804e230:	601a      	str	r2, [r3, #0]
  PRINTF("  -- -- Erasing download area ...\r\n\n");
 804e232:	f7ff fd97 	bl	804dd64 <TraceSend>
  if ((ret = FLASH_If_Erase_Size((void *)(pFwImageDwlArea->DownloadAddr), pFwImageDwlArea->MaxSizeInBytes)) == HAL_OK)
 804e236:	e9dd 1002 	ldrd	r1, r0, [sp, #8]
 804e23a:	f7ff ff0b 	bl	804e054 <FLASH_If_Erase_Size>
 804e23e:	bb70      	cbnz	r0, 804e29e <FW_UPDATE_Run+0x9a>
	  PRINTF("  -- -- File> Transfer> YMODEM> Send ");
 804e240:	4822      	ldr	r0, [pc, #136]	; (804e2cc <FW_UPDATE_Run+0xc8>)
 804e242:	f7ff fd8f 	bl	804dd64 <TraceSend>
    Ymodem_Init();
 804e246:	f001 fded 	bl	804fe24 <Ymodem_Init>
    e_result = Ymodem_Receive(&u_fw_size, pFwImageDwlArea->DownloadAddr, &ymodemCb);
 804e24a:	4622      	mov	r2, r4
 804e24c:	9903      	ldr	r1, [sp, #12]
 804e24e:	a801      	add	r0, sp, #4
 804e250:	f001 fdea 	bl	804fe28 <Ymodem_Receive>
 804e254:	4605      	mov	r5, r0
    PRINTF("\r\n\n");
 804e256:	481e      	ldr	r0, [pc, #120]	; (804e2d0 <FW_UPDATE_Run+0xcc>)
 804e258:	f7ff fd84 	bl	804dd64 <TraceSend>
    if ((e_result == COM_OK))
 804e25c:	bb25      	cbnz	r5, 804e2a8 <FW_UPDATE_Run+0xa4>
    	PRINTF("  -- -- Programming Completed Successfully!\r\n\n");
 804e25e:	481d      	ldr	r0, [pc, #116]	; (804e2d4 <FW_UPDATE_Run+0xd0>)
 804e260:	f7ff fd80 	bl	804dd64 <TraceSend>
    	PRINTF("  -- -- Bytes: %ld\r\n\n", u_fw_size);
 804e264:	9901      	ldr	r1, [sp, #4]
 804e266:	481c      	ldr	r0, [pc, #112]	; (804e2d8 <FW_UPDATE_Run+0xd4>)
 804e268:	f7ff fd7c 	bl	804dd64 <TraceSend>
    ret = FLASH_If_Read(fw_header_dwl_slot, (void *) fw_image_dwl_area.DownloadAddr, SE_FW_HEADER_TOT_LEN);
 804e26c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 804e270:	9903      	ldr	r1, [sp, #12]
 804e272:	4620      	mov	r0, r4
 804e274:	f7ff fe9a 	bl	804dfac <FLASH_If_Read>
 804e278:	4605      	mov	r5, r0
    (void)SFU_APP_InstallAtNextReset((uint8_t *) fw_header_dwl_slot);
 804e27a:	4620      	mov	r0, r4
 804e27c:	f000 ff5c 	bl	804f138 <SFU_APP_InstallAtNextReset>
    PRINTF("  -- Image correctly downloaded - reboot\r\n\n");
 804e280:	4816      	ldr	r0, [pc, #88]	; (804e2dc <FW_UPDATE_Run+0xd8>)
 804e282:	f7ff fd6f 	bl	804dd64 <TraceSend>
    COM_Transmit((uint8_t*)&answer_update_success_buffer, sizeof(answer_update_success_buffer), 100);
 804e286:	2264      	movs	r2, #100	; 0x64
 804e288:	2103      	movs	r1, #3
 804e28a:	4815      	ldr	r0, [pc, #84]	; (804e2e0 <FW_UPDATE_Run+0xdc>)
 804e28c:	f001 fdb2 	bl	804fdf4 <COM_Transmit>
    HAL_Delay(1000U);
 804e290:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 804e294:	f001 f81e 	bl	804f2d4 <HAL_Delay>
    HAL_NVIC_SystemReset();
 804e298:	f7f5 f97e 	bl	8043598 <HAL_NVIC_SystemReset>
  if (ret != HAL_OK)
 804e29c:	b115      	cbz	r5, 804e2a4 <FW_UPDATE_Run+0xa0>
	  PRINTF("  -- !!Operation failed!! \r\n\n");
 804e29e:	4811      	ldr	r0, [pc, #68]	; (804e2e4 <FW_UPDATE_Run+0xe0>)
 804e2a0:	f7ff fd60 	bl	804dd64 <TraceSend>
}
 804e2a4:	b057      	add	sp, #348	; 0x15c
 804e2a6:	bd30      	pop	{r4, r5, pc}
    else if (e_result == COM_ABORT)
 804e2a8:	2d02      	cmp	r5, #2
    	PRINTF("  -- -- !!Aborted by user!!\r\n\n");
 804e2aa:	bf0c      	ite	eq
 804e2ac:	480e      	ldreq	r0, [pc, #56]	; (804e2e8 <FW_UPDATE_Run+0xe4>)
    	PRINTF("  -- -- !!Error during file download!!\r\n\n");
 804e2ae:	480f      	ldrne	r0, [pc, #60]	; (804e2ec <FW_UPDATE_Run+0xe8>)
 804e2b0:	f7ff fd58 	bl	804dd64 <TraceSend>
 804e2b4:	e7f3      	b.n	804e29e <FW_UPDATE_Run+0x9a>
 804e2b6:	bf00      	nop
 804e2b8:	0805262d 	.word	0x0805262d
 804e2bc:	08051db0 	.word	0x08051db0
 804e2c0:	0805266d 	.word	0x0805266d
 804e2c4:	40003000 	.word	0x40003000
 804e2c8:	08052684 	.word	0x08052684
 804e2cc:	080526a9 	.word	0x080526a9
 804e2d0:	080527a3 	.word	0x080527a3
 804e2d4:	080526cf 	.word	0x080526cf
 804e2d8:	080526fe 	.word	0x080526fe
 804e2dc:	08052714 	.word	0x08052714
 804e2e0:	20001083 	.word	0x20001083
 804e2e4:	08052789 	.word	0x08052789
 804e2e8:	08052740 	.word	0x08052740
 804e2ec:	0805275f 	.word	0x0805275f

0804e2f0 <HW_GPIO_GetBitPos>:

  if ((GPIO_Pin & 0xFF00) != 0)
  {
    PinPos |= 0x8;
  }
  if ((GPIO_Pin & 0xF0F0) != 0)
 804e2f0:	4a0a      	ldr	r2, [pc, #40]	; (804e31c <HW_GPIO_GetBitPos+0x2c>)
    PinPos |= 0x8;
 804e2f2:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
 804e2f6:	bf14      	ite	ne
 804e2f8:	2308      	movne	r3, #8
 804e2fa:	2300      	moveq	r3, #0
  if ((GPIO_Pin & 0xF0F0) != 0)
 804e2fc:	4210      	tst	r0, r2
  {
    PinPos |= 0x4;
  }
  if ((GPIO_Pin & 0xCCCC) != 0)
 804e2fe:	4a08      	ldr	r2, [pc, #32]	; (804e320 <HW_GPIO_GetBitPos+0x30>)
    PinPos |= 0x4;
 804e300:	bf18      	it	ne
 804e302:	f043 0304 	orrne.w	r3, r3, #4
  if ((GPIO_Pin & 0xCCCC) != 0)
 804e306:	4210      	tst	r0, r2
  {
    PinPos |= 0x2;
  }
  if ((GPIO_Pin & 0xAAAA) != 0)
 804e308:	4a06      	ldr	r2, [pc, #24]	; (804e324 <HW_GPIO_GetBitPos+0x34>)
    PinPos |= 0x2;
 804e30a:	bf18      	it	ne
 804e30c:	f043 0302 	orrne.w	r3, r3, #2
  if ((GPIO_Pin & 0xAAAA) != 0)
 804e310:	4210      	tst	r0, r2
  {
    PinPos |= 0x1;
 804e312:	bf18      	it	ne
 804e314:	f043 0301 	orrne.w	r3, r3, #1
  }


  return PinPos;
}
 804e318:	4618      	mov	r0, r3
 804e31a:	4770      	bx	lr
 804e31c:	fffff0f0 	.word	0xfffff0f0
 804e320:	ffffcccc 	.word	0xffffcccc
 804e324:	ffffaaaa 	.word	0xffffaaaa

0804e328 <HW_GPIO_Init>:
{
 804e328:	b430      	push	{r4, r5}
  RCC_GPIO_CLK_ENABLE((uint32_t) port);
 804e32a:	4b28      	ldr	r3, [pc, #160]	; (804e3cc <HW_GPIO_Init+0xa4>)
 804e32c:	4298      	cmp	r0, r3
{
 804e32e:	b086      	sub	sp, #24
  RCC_GPIO_CLK_ENABLE((uint32_t) port);
 804e330:	f04f 0400 	mov.w	r4, #0
 804e334:	f503 5350 	add.w	r3, r3, #13312	; 0x3400
 804e338:	d032      	beq.n	804e3a0 <HW_GPIO_Init+0x78>
 804e33a:	d80f      	bhi.n	804e35c <HW_GPIO_Init+0x34>
 804e33c:	4d24      	ldr	r5, [pc, #144]	; (804e3d0 <HW_GPIO_Init+0xa8>)
 804e33e:	42a8      	cmp	r0, r5
 804e340:	d01e      	beq.n	804e380 <HW_GPIO_Init+0x58>
 804e342:	2300      	movs	r3, #0
 804e344:	9305      	str	r3, [sp, #20]
 804e346:	4b23      	ldr	r3, [pc, #140]	; (804e3d4 <HW_GPIO_Init+0xac>)
 804e348:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 804e34a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 804e34e:	631c      	str	r4, [r3, #48]	; 0x30
 804e350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804e352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804e356:	9305      	str	r3, [sp, #20]
 804e358:	9b05      	ldr	r3, [sp, #20]
 804e35a:	e01b      	b.n	804e394 <HW_GPIO_Init+0x6c>
 804e35c:	4d1e      	ldr	r5, [pc, #120]	; (804e3d8 <HW_GPIO_Init+0xb0>)
 804e35e:	42a8      	cmp	r0, r5
 804e360:	d029      	beq.n	804e3b6 <HW_GPIO_Init+0x8e>
 804e362:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 804e366:	42a8      	cmp	r0, r5
 804e368:	d1eb      	bne.n	804e342 <HW_GPIO_Init+0x1a>
 804e36a:	9404      	str	r4, [sp, #16]
 804e36c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 804e36e:	f044 0408 	orr.w	r4, r4, #8
 804e372:	631c      	str	r4, [r3, #48]	; 0x30
 804e374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804e376:	f003 0308 	and.w	r3, r3, #8
 804e37a:	9304      	str	r3, [sp, #16]
 804e37c:	9b04      	ldr	r3, [sp, #16]
 804e37e:	e009      	b.n	804e394 <HW_GPIO_Init+0x6c>
 804e380:	9401      	str	r4, [sp, #4]
 804e382:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 804e384:	f044 0401 	orr.w	r4, r4, #1
 804e388:	631c      	str	r4, [r3, #48]	; 0x30
 804e38a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804e38c:	f003 0301 	and.w	r3, r3, #1
 804e390:	9301      	str	r3, [sp, #4]
 804e392:	9b01      	ldr	r3, [sp, #4]
  initStruct->Pin = GPIO_Pin ;
 804e394:	6011      	str	r1, [r2, #0]
  HAL_GPIO_Init(port, initStruct);
 804e396:	4611      	mov	r1, r2
}
 804e398:	b006      	add	sp, #24
 804e39a:	bc30      	pop	{r4, r5}
  HAL_GPIO_Init(port, initStruct);
 804e39c:	f7f5 bca0 	b.w	8043ce0 <HAL_GPIO_Init>
  RCC_GPIO_CLK_ENABLE((uint32_t) port);
 804e3a0:	9402      	str	r4, [sp, #8]
 804e3a2:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 804e3a4:	f044 0402 	orr.w	r4, r4, #2
 804e3a8:	631c      	str	r4, [r3, #48]	; 0x30
 804e3aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804e3ac:	f003 0302 	and.w	r3, r3, #2
 804e3b0:	9302      	str	r3, [sp, #8]
 804e3b2:	9b02      	ldr	r3, [sp, #8]
 804e3b4:	e7ee      	b.n	804e394 <HW_GPIO_Init+0x6c>
 804e3b6:	9403      	str	r4, [sp, #12]
 804e3b8:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 804e3ba:	f044 0404 	orr.w	r4, r4, #4
 804e3be:	631c      	str	r4, [r3, #48]	; 0x30
 804e3c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804e3c2:	f003 0304 	and.w	r3, r3, #4
 804e3c6:	9303      	str	r3, [sp, #12]
 804e3c8:	9b03      	ldr	r3, [sp, #12]
 804e3ca:	e7e3      	b.n	804e394 <HW_GPIO_Init+0x6c>
 804e3cc:	40020400 	.word	0x40020400
 804e3d0:	40020000 	.word	0x40020000
 804e3d4:	40023800 	.word	0x40023800
 804e3d8:	40020800 	.word	0x40020800

0804e3dc <HW_GPIO_SetIrq>:
{
 804e3dc:	b538      	push	{r3, r4, r5, lr}
  uint32_t BitPos = HW_GPIO_GetBitPos(GPIO_Pin) ;
 804e3de:	4608      	mov	r0, r1
{
 804e3e0:	461c      	mov	r4, r3
 804e3e2:	4615      	mov	r5, r2
  uint32_t BitPos = HW_GPIO_GetBitPos(GPIO_Pin) ;
 804e3e4:	f7ff ff84 	bl	804e2f0 <HW_GPIO_GetBitPos>
 804e3e8:	4b08      	ldr	r3, [pc, #32]	; (804e40c <HW_GPIO_SetIrq+0x30>)
    GpioIrq[ BitPos ] = irqHandler;
 804e3ea:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  if (irqHandler != NULL)
 804e3ee:	b164      	cbz	r4, 804e40a <HW_GPIO_SetIrq+0x2e>
    IRQnb = MSP_GetIRQn(GPIO_Pin);
 804e3f0:	4608      	mov	r0, r1
 804e3f2:	f000 ffbd 	bl	804f370 <MSP_GetIRQn>
    HAL_NVIC_SetPriority(IRQnb, prio, 0);
 804e3f6:	4629      	mov	r1, r5
    IRQnb = MSP_GetIRQn(GPIO_Pin);
 804e3f8:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(IRQnb, prio, 0);
 804e3fa:	2200      	movs	r2, #0
 804e3fc:	f7f5 f876 	bl	80434ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IRQnb);
 804e400:	4620      	mov	r0, r4
}
 804e402:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_NVIC_EnableIRQ(IRQnb);
 804e406:	f7f5 b8a5 	b.w	8043554 <HAL_NVIC_EnableIRQ>
}
 804e40a:	bd38      	pop	{r3, r4, r5, pc}
 804e40c:	2000b5d4 	.word	0x2000b5d4

0804e410 <HW_GPIO_IrqHandler>:
{
 804e410:	b510      	push	{r4, lr}
  uint32_t BitPos = HW_GPIO_GetBitPos(GPIO_Pin);
 804e412:	f7ff ff6d 	bl	804e2f0 <HW_GPIO_GetBitPos>
  if (GpioIrq[ BitPos ]  != NULL)
 804e416:	4b04      	ldr	r3, [pc, #16]	; (804e428 <HW_GPIO_IrqHandler+0x18>)
 804e418:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 804e41c:	b11b      	cbz	r3, 804e426 <HW_GPIO_IrqHandler+0x16>
    GpioIrq[ BitPos ](NULL);
 804e41e:	2000      	movs	r0, #0
}
 804e420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    GpioIrq[ BitPos ](NULL);
 804e424:	4718      	bx	r3
}
 804e426:	bd10      	pop	{r4, pc}
 804e428:	2000b5d4 	.word	0x2000b5d4

0804e42c <HW_GPIO_Write>:
  HAL_GPIO_WritePin(GPIOx, GPIO_Pin, (GPIO_PinState) value);
 804e42c:	b2d2      	uxtb	r2, r2
 804e42e:	f7f5 bdcb 	b.w	8043fc8 <HAL_GPIO_WritePin>
	...

0804e434 <HW_RTC_GetCalendarValue>:
 * @param pointer to RTC_DateStruct
 * @param pointer to RTC_TimeStruct
 * @retval time in ticks
 */
static uint64_t HW_RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 804e434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t first_read;
  uint32_t correction;
  uint32_t seconds;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 804e438:	2200      	movs	r2, #0
{
 804e43a:	4605      	mov	r5, r0
  HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 804e43c:	4826      	ldr	r0, [pc, #152]	; (804e4d8 <HW_RTC_GetCalendarValue+0xa4>)
  * @param  RTCx RTC Instance
  * @retval Sub second value (number between 0 and 65535)
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 804e43e:	4f27      	ldr	r7, [pc, #156]	; (804e4dc <HW_RTC_GetCalendarValue+0xa8>)

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
    HAL_RTC_GetDate(&RtcHandle, RTC_DateStruct, RTC_FORMAT_BIN);
 804e440:	f8df 8094 	ldr.w	r8, [pc, #148]	; 804e4d8 <HW_RTC_GetCalendarValue+0xa4>
{
 804e444:	460c      	mov	r4, r1
  HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 804e446:	f7f6 fb54 	bl	8044af2 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&RtcHandle, RTC_DateStruct, RTC_FORMAT_BIN);
 804e44a:	2200      	movs	r2, #0
 804e44c:	4629      	mov	r1, r5
 804e44e:	4640      	mov	r0, r8
 804e450:	6abe      	ldr	r6, [r7, #40]	; 0x28
 804e452:	f7f6 fb75 	bl	8044b40 <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 804e456:	2200      	movs	r2, #0
 804e458:	4621      	mov	r1, r4
 804e45a:	4640      	mov	r0, r8
 804e45c:	f7f6 fb49 	bl	8044af2 <HAL_RTC_GetTime>
 804e460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804e462:	b2b6      	uxth	r6, r6
 804e464:	b29b      	uxth	r3, r3

  }
  while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 804e466:	42b3      	cmp	r3, r6
 804e468:	d1ef      	bne.n	804e44a <HW_RTC_GetCalendarValue+0x16>

  /* calculte amount of elapsed days since 01/01/2000 */
  seconds = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 804e46a:	78eb      	ldrb	r3, [r5, #3]

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 804e46c:	4a1c      	ldr	r2, [pc, #112]	; (804e4e0 <HW_RTC_GetCalendarValue+0xac>)
 804e46e:	491d      	ldr	r1, [pc, #116]	; (804e4e4 <HW_RTC_GetCalendarValue+0xb0>)
 804e470:	f013 0f03 	tst.w	r3, #3
 804e474:	bf08      	it	eq
 804e476:	4611      	moveq	r1, r2

  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 804e478:	786a      	ldrb	r2, [r5, #1]
  seconds = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 804e47a:	f240 50b5 	movw	r0, #1461	; 0x5b5
 804e47e:	4358      	muls	r0, r3
  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 804e480:	3a01      	subs	r2, #1
 804e482:	233d      	movs	r3, #61	; 0x3d
 804e484:	4353      	muls	r3, r2
  seconds = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 804e486:	1cc6      	adds	r6, r0, #3
  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 804e488:	3301      	adds	r3, #1
 804e48a:	2002      	movs	r0, #2
 804e48c:	fb93 f3f0 	sdiv	r3, r3, r0

  seconds += (RTC_DateStruct->Date - 1);
 804e490:	78a8      	ldrb	r0, [r5, #2]
  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 804e492:	0052      	lsls	r2, r2, #1
 804e494:	3801      	subs	r0, #1
 804e496:	eb00 0096 	add.w	r0, r0, r6, lsr #2
 804e49a:	fa21 f202 	lsr.w	r2, r1, r2
 804e49e:	4403      	add	r3, r0
 804e4a0:	f002 0203 	and.w	r2, r2, #3
  seconds += (RTC_DateStruct->Date - 1);
 804e4a4:	1a9b      	subs	r3, r3, r2

  /* convert from days to seconds */
  seconds *= SECONDS_IN_1DAY;

  seconds += ((uint32_t)RTC_TimeStruct->Seconds +
              ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 804e4a6:	7862      	ldrb	r2, [r4, #1]
              ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 804e4a8:	7821      	ldrb	r1, [r4, #0]
              ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 804e4aa:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 804e4ae:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 804e4b2:	0092      	lsls	r2, r2, #2
 804e4b4:	fb00 2201 	mla	r2, r0, r1, r2
  seconds += ((uint32_t)RTC_TimeStruct->Seconds +
 804e4b8:	78a1      	ldrb	r1, [r4, #2]
              ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 804e4ba:	440a      	add	r2, r1
  seconds += ((uint32_t)RTC_TimeStruct->Seconds +
 804e4bc:	490a      	ldr	r1, [pc, #40]	; (804e4e8 <HW_RTC_GetCalendarValue+0xb4>)
 804e4be:	fb01 2303 	mla	r3, r1, r3, r2



  calendarValue = (((uint64_t) seconds) << N_PREDIV_S) + (PREDIV_S - RTC_TimeStruct->SubSeconds);
 804e4c2:	0d9e      	lsrs	r6, r3, #22
 804e4c4:	029d      	lsls	r5, r3, #10
 804e4c6:	6863      	ldr	r3, [r4, #4]
 804e4c8:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 804e4cc:	3303      	adds	r3, #3

  return (calendarValue);
}
 804e4ce:	18e8      	adds	r0, r5, r3
 804e4d0:	f146 0100 	adc.w	r1, r6, #0
 804e4d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804e4d8:	2000b614 	.word	0x2000b614
 804e4dc:	40002800 	.word	0x40002800
 804e4e0:	00445550 	.word	0x00445550
 804e4e4:	0099aaa0 	.word	0x0099aaa0
 804e4e8:	00015180 	.word	0x00015180

0804e4ec <HW_RTC_GetMinimumTimeout>:
}
 804e4ec:	2003      	movs	r0, #3
 804e4ee:	4770      	bx	lr

0804e4f0 <HW_RTC_ms2Tick>:
{
 804e4f0:	b508      	push	{r3, lr}
 804e4f2:	4601      	mov	r1, r0
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 804e4f4:	227d      	movs	r2, #125	; 0x7d
 804e4f6:	2300      	movs	r3, #0
 804e4f8:	01c0      	lsls	r0, r0, #7
 804e4fa:	0e49      	lsrs	r1, r1, #25
 804e4fc:	f7f2 fc8e 	bl	8040e1c <__aeabi_uldivmod>
}
 804e500:	bd08      	pop	{r3, pc}

0804e502 <HW_RTC_Tick2ms>:
  return ((seconds * 1000) + ((tick * 1000) >> N_PREDIV_S));
 804e502:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  tick = tick & PREDIV_S;
 804e506:	f3c0 0209 	ubfx	r2, r0, #0, #10
  uint32_t seconds = tick >> N_PREDIV_S;
 804e50a:	0a80      	lsrs	r0, r0, #10
  return ((seconds * 1000) + ((tick * 1000) >> N_PREDIV_S));
 804e50c:	435a      	muls	r2, r3
 804e50e:	4358      	muls	r0, r3
}
 804e510:	eb00 2092 	add.w	r0, r0, r2, lsr #10
 804e514:	4770      	bx	lr
	...

0804e518 <HW_RTC_GetTimerElapsedTime>:
{
 804e518:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 804e51a:	a901      	add	r1, sp, #4
 804e51c:	4668      	mov	r0, sp
 804e51e:	f7ff ff89 	bl	804e434 <HW_RTC_GetCalendarValue>
  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 804e522:	4b03      	ldr	r3, [pc, #12]	; (804e530 <HW_RTC_GetTimerElapsedTime+0x18>)
 804e524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
 804e526:	1ac0      	subs	r0, r0, r3
 804e528:	b007      	add	sp, #28
 804e52a:	f85d fb04 	ldr.w	pc, [sp], #4
 804e52e:	bf00      	nop
 804e530:	2000b614 	.word	0x2000b614

0804e534 <HW_RTC_GetTimerValue>:
{
 804e534:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 804e536:	a901      	add	r1, sp, #4
 804e538:	4668      	mov	r0, sp
 804e53a:	f7ff ff7b 	bl	804e434 <HW_RTC_GetCalendarValue>
}
 804e53e:	b007      	add	sp, #28
 804e540:	f85d fb04 	ldr.w	pc, [sp], #4

0804e544 <HW_RTC_StopAlarm>:
{
 804e544:	b510      	push	{r4, lr}
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A);
 804e546:	4c08      	ldr	r4, [pc, #32]	; (804e568 <HW_RTC_StopAlarm+0x24>)
 804e548:	f44f 7180 	mov.w	r1, #256	; 0x100
 804e54c:	4620      	mov	r0, r4
 804e54e:	f7f6 f873 	bl	8044638 <HAL_RTC_DeactivateAlarm>
  __HAL_RTC_ALARM_CLEAR_FLAG(&RtcHandle, RTC_FLAG_ALRAF);
 804e552:	6822      	ldr	r2, [r4, #0]
 804e554:	68d3      	ldr	r3, [r2, #12]
 804e556:	b2db      	uxtb	r3, r3
 804e558:	f463 73c0 	orn	r3, r3, #384	; 0x180
 804e55c:	60d3      	str	r3, [r2, #12]
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 804e55e:	4b03      	ldr	r3, [pc, #12]	; (804e56c <HW_RTC_StopAlarm+0x28>)
 804e560:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 804e564:	615a      	str	r2, [r3, #20]
}
 804e566:	bd10      	pop	{r4, pc}
 804e568:	2000b614 	.word	0x2000b614
 804e56c:	40013c00 	.word	0x40013c00

0804e570 <HW_RTC_SetAlarm>:
{
 804e570:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - HW_RTC_GetTimerElapsedTime())))
 804e574:	4c54      	ldr	r4, [pc, #336]	; (804e6c8 <HW_RTC_SetAlarm+0x158>)
{
 804e576:	4605      	mov	r5, r0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - HW_RTC_GetTimerElapsedTime())))
 804e578:	f9b4 604c 	ldrsh.w	r6, [r4, #76]	; 0x4c
 804e57c:	f7ff ffcc 	bl	804e518 <HW_RTC_GetTimerElapsedTime>
 804e580:	3603      	adds	r6, #3
 804e582:	1a28      	subs	r0, r5, r0
 804e584:	4286      	cmp	r6, r0
    LPM_SetStopMode(LPM_RTC_Id, LPM_Enable);
 804e586:	bf34      	ite	cc
 804e588:	2100      	movcc	r1, #0
    LPM_SetStopMode(LPM_RTC_Id, LPM_Disable);
 804e58a:	2101      	movcs	r1, #1
 804e58c:	2004      	movs	r0, #4
 804e58e:	f7ff f923 	bl	804d7d8 <LPM_SetStopMode>
  if (LPM_GetMode() == LPM_StopMode)
 804e592:	f7ff f937 	bl	804d804 <LPM_GetMode>
 804e596:	2801      	cmp	r0, #1
    timeout = timeout -  McuWakeUpTimeCal;
 804e598:	bf08      	it	eq
 804e59a:	f9b4 304c 	ldrsheq.w	r3, [r4, #76]	; 0x4c
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 804e59e:	6da6      	ldr	r6, [r4, #88]	; 0x58
 804e5a0:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
 804e5a4:	9201      	str	r2, [sp, #4]
    timeout = timeout -  McuWakeUpTimeCal;
 804e5a6:	bf08      	it	eq
 804e5a8:	1aed      	subeq	r5, r5, r3
  rtcAlarmSubSeconds =  PREDIV_S - RTC_TimeStruct.SubSeconds;
 804e5aa:	f5c6 767f 	rsb	r6, r6, #1020	; 0x3fc
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 804e5ae:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 804e5b2:	9300      	str	r3, [sp, #0]
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 804e5b4:	f894 b055 	ldrb.w	fp, [r4, #85]	; 0x55
 804e5b8:	f894 a056 	ldrb.w	sl, [r4, #86]	; 0x56
 804e5bc:	f894 8057 	ldrb.w	r8, [r4, #87]	; 0x57
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 804e5c0:	f894 7069 	ldrb.w	r7, [r4, #105]	; 0x69
 804e5c4:	f894 906b 	ldrb.w	r9, [r4, #107]	; 0x6b
  rtcAlarmSubSeconds =  PREDIV_S - RTC_TimeStruct.SubSeconds;
 804e5c8:	3603      	adds	r6, #3
  HW_RTC_StopAlarm();
 804e5ca:	f7ff ffbb 	bl	804e544 <HW_RTC_StopAlarm>
  rtcAlarmSubSeconds += (timeoutValue & PREDIV_S);
 804e5ce:	f3c5 0109 	ubfx	r1, r5, #0, #10
  rtcAlarmDays =  RTC_DateStruct.Date;
 804e5d2:	9b00      	ldr	r3, [sp, #0]
 804e5d4:	9a01      	ldr	r2, [sp, #4]
  rtcAlarmSubSeconds += (timeoutValue & PREDIV_S);
 804e5d6:	fa11 f686 	uxtah	r6, r1, r6
  while (timeoutValue >= SECONDS_IN_1DAY)
 804e5da:	493c      	ldr	r1, [pc, #240]	; (804e6cc <HW_RTC_SetAlarm+0x15c>)
  rtcAlarmSubSeconds += (timeoutValue & PREDIV_S);
 804e5dc:	b2b6      	uxth	r6, r6
  timeoutValue >>= N_PREDIV_S;  /* convert timeout  in seconds */
 804e5de:	0aad      	lsrs	r5, r5, #10
  rtcAlarmDays =  RTC_DateStruct.Date;
 804e5e0:	b29b      	uxth	r3, r3
  while (timeoutValue >= SECONDS_IN_1DAY)
 804e5e2:	428d      	cmp	r5, r1
 804e5e4:	d84b      	bhi.n	804e67e <HW_RTC_SetAlarm+0x10e>
  rtcAlarmHours = RTC_TimeStruct.Hours;
 804e5e6:	fa1f fc82 	uxth.w	ip, r2
  while (timeoutValue >= SECONDS_IN_1HOUR)
 804e5ea:	f5b5 6f61 	cmp.w	r5, #3600	; 0xe10
 804e5ee:	d24d      	bcs.n	804e68c <HW_RTC_SetAlarm+0x11c>
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 804e5f0:	fa1f f28b 	uxth.w	r2, fp
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 804e5f4:	2d3b      	cmp	r5, #59	; 0x3b
 804e5f6:	d850      	bhi.n	804e69a <HW_RTC_SetAlarm+0x12a>
 804e5f8:	0ab1      	lsrs	r1, r6, #10
 804e5fa:	ebc1 1081 	rsb	r0, r1, r1, lsl #6
 804e5fe:	eb06 2680 	add.w	r6, r6, r0, lsl #10
 804e602:	eb01 000a 	add.w	r0, r1, sl
 804e606:	4428      	add	r0, r5
 804e608:	b2b6      	uxth	r6, r6
 804e60a:	b280      	uxth	r0, r0
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 804e60c:	283b      	cmp	r0, #59	; 0x3b
 804e60e:	d848      	bhi.n	804e6a2 <HW_RTC_SetAlarm+0x132>
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 804e610:	2a3b      	cmp	r2, #59	; 0x3b
 804e612:	d84b      	bhi.n	804e6ac <HW_RTC_SetAlarm+0x13c>
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 804e614:	f1bc 0f17 	cmp.w	ip, #23
 804e618:	d84f      	bhi.n	804e6ba <HW_RTC_SetAlarm+0x14a>
 804e61a:	492d      	ldr	r1, [pc, #180]	; (804e6d0 <HW_RTC_SetAlarm+0x160>)
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 804e61c:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  if (RTC_DateStruct.Year % 4 == 0)
 804e620:	f019 0f03 	tst.w	r9, #3
 804e624:	f107 37ff 	add.w	r7, r7, #4294967295
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 804e628:	bf16      	itet	ne
 804e62a:	19c9      	addne	r1, r1, r7
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 804e62c:	5dcd      	ldrbeq	r5, [r1, r7]
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 804e62e:	7b0d      	ldrbne	r5, [r1, #12]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 804e630:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 804e634:	42ab      	cmp	r3, r5
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 804e636:	bf84      	itt	hi
 804e638:	fb93 f1f5 	sdivhi	r1, r3, r5
 804e63c:	fb05 3311 	mlshi	r3, r5, r1, r3
  RTC_AlarmStructure.AlarmSubSecondMask  = HW_RTC_ALARMSUBSECONDMASK;
 804e640:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 804e644:	63e1      	str	r1, [r4, #60]	; 0x3c
  HAL_RTC_SetAlarm_IT(&RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 804e646:	4923      	ldr	r1, [pc, #140]	; (804e6d4 <HW_RTC_SetAlarm+0x164>)
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 804e648:	f884 c024 	strb.w	ip, [r4, #36]	; 0x24
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 804e64c:	bf88      	it	hi
 804e64e:	b29b      	uxthhi	r3, r3
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S - rtcAlarmSubSeconds;
 804e650:	f5c6 767f 	rsb	r6, r6, #1020	; 0x3fc
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 804e654:	2200      	movs	r2, #0
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S - rtcAlarmSubSeconds;
 804e656:	3603      	adds	r6, #3
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 804e658:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  HAL_RTC_SetAlarm_IT(&RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 804e65c:	f1a1 0024 	sub.w	r0, r1, #36	; 0x24
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 804e660:	f44f 7380 	mov.w	r3, #256	; 0x100
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S - rtcAlarmSubSeconds;
 804e664:	62a6      	str	r6, [r4, #40]	; 0x28
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 804e666:	f884 8027 	strb.w	r8, [r4, #39]	; 0x27
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 804e66a:	6422      	str	r2, [r4, #64]	; 0x40
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 804e66c:	63a2      	str	r2, [r4, #56]	; 0x38
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 804e66e:	64a3      	str	r3, [r4, #72]	; 0x48
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 804e670:	e9c4 220c 	strd	r2, r2, [r4, #48]	; 0x30
}
 804e674:	b003      	add	sp, #12
 804e676:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  HAL_RTC_SetAlarm_IT(&RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 804e67a:	f7f6 b983 	b.w	8044984 <HAL_RTC_SetAlarm_IT>
    timeoutValue -= SECONDS_IN_1DAY;
 804e67e:	f5a5 35a8 	sub.w	r5, r5, #86016	; 0x15000
    rtcAlarmDays++;
 804e682:	3301      	adds	r3, #1
    timeoutValue -= SECONDS_IN_1DAY;
 804e684:	f5a5 75c0 	sub.w	r5, r5, #384	; 0x180
    rtcAlarmDays++;
 804e688:	b29b      	uxth	r3, r3
 804e68a:	e7aa      	b.n	804e5e2 <HW_RTC_SetAlarm+0x72>
    rtcAlarmHours++;
 804e68c:	f10c 0c01 	add.w	ip, ip, #1
    timeoutValue -= SECONDS_IN_1HOUR;
 804e690:	f5a5 6561 	sub.w	r5, r5, #3600	; 0xe10
    rtcAlarmHours++;
 804e694:	fa1f fc8c 	uxth.w	ip, ip
 804e698:	e7a7      	b.n	804e5ea <HW_RTC_SetAlarm+0x7a>
    rtcAlarmMinutes++;
 804e69a:	3201      	adds	r2, #1
    timeoutValue -= SECONDS_IN_1MINUTE;
 804e69c:	3d3c      	subs	r5, #60	; 0x3c
    rtcAlarmMinutes++;
 804e69e:	b292      	uxth	r2, r2
 804e6a0:	e7a8      	b.n	804e5f4 <HW_RTC_SetAlarm+0x84>
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 804e6a2:	383c      	subs	r0, #60	; 0x3c
    rtcAlarmMinutes++;
 804e6a4:	3201      	adds	r2, #1
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 804e6a6:	b280      	uxth	r0, r0
    rtcAlarmMinutes++;
 804e6a8:	b292      	uxth	r2, r2
 804e6aa:	e7af      	b.n	804e60c <HW_RTC_SetAlarm+0x9c>
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 804e6ac:	3a3c      	subs	r2, #60	; 0x3c
    rtcAlarmHours++;
 804e6ae:	f10c 0c01 	add.w	ip, ip, #1
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 804e6b2:	b292      	uxth	r2, r2
    rtcAlarmHours++;
 804e6b4:	fa1f fc8c 	uxth.w	ip, ip
 804e6b8:	e7aa      	b.n	804e610 <HW_RTC_SetAlarm+0xa0>
    rtcAlarmHours -= HOURS_IN_1DAY;
 804e6ba:	f1ac 0c18 	sub.w	ip, ip, #24
    rtcAlarmDays++;
 804e6be:	3301      	adds	r3, #1
    rtcAlarmHours -= HOURS_IN_1DAY;
 804e6c0:	fa1f fc8c 	uxth.w	ip, ip
    rtcAlarmDays++;
 804e6c4:	b29b      	uxth	r3, r3
 804e6c6:	e7a5      	b.n	804e614 <HW_RTC_SetAlarm+0xa4>
 804e6c8:	2000b614 	.word	0x2000b614
 804e6cc:	0001517f 	.word	0x0001517f
 804e6d0:	08051db8 	.word	0x08051db8
 804e6d4:	2000b638 	.word	0x2000b638

0804e6d8 <HW_RTC_IrqHandler>:
{
 804e6d8:	b508      	push	{r3, lr}
  LPM_SetStopMode(LPM_RTC_Id, LPM_Enable);
 804e6da:	2100      	movs	r1, #0
 804e6dc:	2004      	movs	r0, #4
 804e6de:	f7ff f87b 	bl	804d7d8 <LPM_SetStopMode>
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 804e6e2:	4b0b      	ldr	r3, [pc, #44]	; (804e710 <HW_RTC_IrqHandler+0x38>)
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 804e6e4:	480b      	ldr	r0, [pc, #44]	; (804e714 <HW_RTC_IrqHandler+0x3c>)
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 804e6e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 804e6ea:	615a      	str	r2, [r3, #20]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 804e6ec:	6802      	ldr	r2, [r0, #0]
 804e6ee:	6893      	ldr	r3, [r2, #8]
 804e6f0:	04d9      	lsls	r1, r3, #19
 804e6f2:	d50b      	bpl.n	804e70c <HW_RTC_IrqHandler+0x34>
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 804e6f4:	68d3      	ldr	r3, [r2, #12]
 804e6f6:	05db      	lsls	r3, r3, #23
 804e6f8:	d508      	bpl.n	804e70c <HW_RTC_IrqHandler+0x34>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 804e6fa:	68d3      	ldr	r3, [r2, #12]
 804e6fc:	b2db      	uxtb	r3, r3
 804e6fe:	f463 73c0 	orn	r3, r3, #384	; 0x180
 804e702:	60d3      	str	r3, [r2, #12]
}
 804e704:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      HAL_RTC_AlarmAEventCallback(hrtc);
 804e708:	f000 be2e 	b.w	804f368 <HAL_RTC_AlarmAEventCallback>
}
 804e70c:	bd08      	pop	{r3, pc}
 804e70e:	bf00      	nop
 804e710:	40013c00 	.word	0x40013c00
 804e714:	2000b614 	.word	0x2000b614

0804e718 <HW_RTC_DelayMs>:
{
 804e718:	4601      	mov	r1, r0
 804e71a:	b538      	push	{r3, r4, r5, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 804e71c:	227d      	movs	r2, #125	; 0x7d
 804e71e:	2300      	movs	r3, #0
 804e720:	01c0      	lsls	r0, r0, #7
 804e722:	0e49      	lsrs	r1, r1, #25
 804e724:	f7f2 fb7a 	bl	8040e1c <__aeabi_uldivmod>
 804e728:	4604      	mov	r4, r0
  timeout = HW_RTC_GetTimerValue();
 804e72a:	f7ff ff03 	bl	804e534 <HW_RTC_GetTimerValue>
 804e72e:	4605      	mov	r5, r0
  while (((HW_RTC_GetTimerValue() - timeout)) < delayValue)
 804e730:	f7ff ff00 	bl	804e534 <HW_RTC_GetTimerValue>
 804e734:	1b40      	subs	r0, r0, r5
 804e736:	42a0      	cmp	r0, r4
 804e738:	d300      	bcc.n	804e73c <HW_RTC_DelayMs+0x24>
}
 804e73a:	bd38      	pop	{r3, r4, r5, pc}
    __NOP();
 804e73c:	bf00      	nop
 804e73e:	e7f7      	b.n	804e730 <HW_RTC_DelayMs+0x18>

0804e740 <HW_RTC_SetTimerContext>:
{
 804e740:	b510      	push	{r4, lr}
  RtcTimerContext.Rtc_Time = (uint32_t) HW_RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 804e742:	4c04      	ldr	r4, [pc, #16]	; (804e754 <HW_RTC_SetTimerContext+0x14>)
 804e744:	f104 0154 	add.w	r1, r4, #84	; 0x54
 804e748:	f104 0068 	add.w	r0, r4, #104	; 0x68
 804e74c:	f7ff fe72 	bl	804e434 <HW_RTC_GetCalendarValue>
 804e750:	6520      	str	r0, [r4, #80]	; 0x50
}
 804e752:	bd10      	pop	{r4, pc}
 804e754:	2000b614 	.word	0x2000b614

0804e758 <HW_RTC_Init>:
{
 804e758:	b530      	push	{r4, r5, lr}
  if (HW_RTC_Initalized == false)
 804e75a:	4c18      	ldr	r4, [pc, #96]	; (804e7bc <HW_RTC_Init+0x64>)
 804e75c:	f894 506c 	ldrb.w	r5, [r4, #108]	; 0x6c
{
 804e760:	b087      	sub	sp, #28
  if (HW_RTC_Initalized == false)
 804e762:	bb45      	cbnz	r5, 804e7b6 <HW_RTC_Init+0x5e>
  RtcHandle.Instance = RTC;
 804e764:	4b16      	ldr	r3, [pc, #88]	; (804e7c0 <HW_RTC_Init+0x68>)
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 804e766:	61a5      	str	r5, [r4, #24]
  RtcHandle.Init.SynchPrediv = PREDIV_S;  /*RTC_SYNCH_PREDIV; */
 804e768:	221f      	movs	r2, #31
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 804e76a:	e9c4 3500 	strd	r3, r5, [r4]
  HAL_RTC_Init(&RtcHandle);
 804e76e:	4620      	mov	r0, r4
  RtcHandle.Init.SynchPrediv = PREDIV_S;  /*RTC_SYNCH_PREDIV; */
 804e770:	f240 33ff 	movw	r3, #1023	; 0x3ff
 804e774:	e9c4 2302 	strd	r2, r3, [r4, #8]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 804e778:	e9c4 5504 	strd	r5, r5, [r4, #16]
  HAL_RTC_Init(&RtcHandle);
 804e77c:	f7f5 ffdb 	bl	8044736 <HAL_RTC_Init>
  RTC_DateStruct.WeekDay = RTC_WEEKDAY_MONDAY;
 804e780:	a906      	add	r1, sp, #24
 804e782:	4b10      	ldr	r3, [pc, #64]	; (804e7c4 <HW_RTC_Init+0x6c>)
 804e784:	f841 3d18 	str.w	r3, [r1, #-24]!
  HAL_RTC_SetDate(&RtcHandle, &RTC_DateStruct, RTC_FORMAT_BIN);
 804e788:	462a      	mov	r2, r5
 804e78a:	4620      	mov	r0, r4
 804e78c:	f7f6 f89d 	bl	80448ca <HAL_RTC_SetDate>
  RTC_TimeStruct.Hours = 11;
 804e790:	f242 530b 	movw	r3, #9483	; 0x250b
  HAL_RTC_SetTime(&RtcHandle, &RTC_TimeStruct, RTC_FORMAT_BIN);
 804e794:	462a      	mov	r2, r5
 804e796:	a901      	add	r1, sp, #4
 804e798:	4620      	mov	r0, r4
  RTC_TimeStruct.TimeFormat = 0;
 804e79a:	e9cd 3501 	strd	r3, r5, [sp, #4]
  RTC_TimeStruct.DayLightSaving = RTC_STOREOPERATION_RESET;
 804e79e:	e9cd 5504 	strd	r5, r5, [sp, #16]
  HAL_RTC_SetTime(&RtcHandle, &RTC_TimeStruct, RTC_FORMAT_BIN);
 804e7a2:	f7f6 f821 	bl	80447e8 <HAL_RTC_SetTime>
  HAL_RTCEx_EnableBypassShadow(&RtcHandle);
 804e7a6:	4620      	mov	r0, r4
 804e7a8:	f7f6 f9f3 	bl	8044b92 <HAL_RTCEx_EnableBypassShadow>
    HW_RTC_SetTimerContext();
 804e7ac:	f7ff ffc8 	bl	804e740 <HW_RTC_SetTimerContext>
    HW_RTC_Initalized = true;
 804e7b0:	2301      	movs	r3, #1
 804e7b2:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
 804e7b6:	b007      	add	sp, #28
 804e7b8:	bd30      	pop	{r4, r5, pc}
 804e7ba:	bf00      	nop
 804e7bc:	2000b614 	.word	0x2000b614
 804e7c0:	40002800 	.word	0x40002800
 804e7c4:	15080301 	.word	0x15080301

0804e7c8 <HW_RTC_GetTimerContext>:
}
 804e7c8:	4b01      	ldr	r3, [pc, #4]	; (804e7d0 <HW_RTC_GetTimerContext+0x8>)
 804e7ca:	6d18      	ldr	r0, [r3, #80]	; 0x50
 804e7cc:	4770      	bx	lr
 804e7ce:	bf00      	nop
 804e7d0:	2000b614 	.word	0x2000b614

0804e7d4 <HW_RTC_GetCalendarTime>:
 * \param [IN]   pointer to ms
 *
 * \return uint32_t seconds
 */
uint32_t HW_RTC_GetCalendarTime(uint16_t *mSeconds)
{
 804e7d4:	b530      	push	{r4, r5, lr}
 804e7d6:	b087      	sub	sp, #28
 804e7d8:	4605      	mov	r5, r0
  RTC_TimeTypeDef RTC_TimeStruct ;
  RTC_DateTypeDef RTC_DateStruct;
  uint32_t ticks;

  uint64_t calendarValue = HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 804e7da:	a901      	add	r1, sp, #4
 804e7dc:	4668      	mov	r0, sp
 804e7de:	f7ff fe29 	bl	804e434 <HW_RTC_GetCalendarValue>
 804e7e2:	4604      	mov	r4, r0

  uint32_t seconds = (uint32_t)(calendarValue >> N_PREDIV_S);

  ticks = (uint32_t) calendarValue & PREDIV_S;

  *mSeconds = HW_RTC_Tick2ms(ticks);
 804e7e4:	f3c0 0009 	ubfx	r0, r0, #0, #10
 804e7e8:	f7ff fe8b 	bl	804e502 <HW_RTC_Tick2ms>
 804e7ec:	8028      	strh	r0, [r5, #0]
  uint32_t seconds = (uint32_t)(calendarValue >> N_PREDIV_S);
 804e7ee:	0aa0      	lsrs	r0, r4, #10

  return seconds;
}
 804e7f0:	ea40 5081 	orr.w	r0, r0, r1, lsl #22
 804e7f4:	b007      	add	sp, #28
 804e7f6:	bd30      	pop	{r4, r5, pc}

0804e7f8 <HW_RTC_BKUPWrite>:

void HW_RTC_BKUPWrite(uint32_t Data0, uint32_t Data1)
{
 804e7f8:	b538      	push	{r3, r4, r5, lr}
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR0, Data0);
 804e7fa:	4c07      	ldr	r4, [pc, #28]	; (804e818 <HW_RTC_BKUPWrite+0x20>)
{
 804e7fc:	460d      	mov	r5, r1
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR0, Data0);
 804e7fe:	4602      	mov	r2, r0
 804e800:	2100      	movs	r1, #0
 804e802:	4620      	mov	r0, r4
 804e804:	f7f6 f9bb 	bl	8044b7e <HAL_RTCEx_BKUPWrite>
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, Data1);
 804e808:	462a      	mov	r2, r5
 804e80a:	4620      	mov	r0, r4
 804e80c:	2101      	movs	r1, #1
}
 804e80e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, Data1);
 804e812:	f7f6 b9b4 	b.w	8044b7e <HAL_RTCEx_BKUPWrite>
 804e816:	bf00      	nop
 804e818:	2000b614 	.word	0x2000b614

0804e81c <HW_RTC_BKUPRead>:

void HW_RTC_BKUPRead(uint32_t *Data0, uint32_t *Data1)
{
 804e81c:	b570      	push	{r4, r5, r6, lr}
  *Data0 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR0);
 804e81e:	4c07      	ldr	r4, [pc, #28]	; (804e83c <HW_RTC_BKUPRead+0x20>)
{
 804e820:	4606      	mov	r6, r0
 804e822:	460d      	mov	r5, r1
  *Data0 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR0);
 804e824:	4620      	mov	r0, r4
 804e826:	2100      	movs	r1, #0
 804e828:	f7f6 f9ae 	bl	8044b88 <HAL_RTCEx_BKUPRead>
  *Data1 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1);
 804e82c:	2101      	movs	r1, #1
  *Data0 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR0);
 804e82e:	6030      	str	r0, [r6, #0]
  *Data1 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1);
 804e830:	4620      	mov	r0, r4
 804e832:	f7f6 f9a9 	bl	8044b88 <HAL_RTCEx_BKUPRead>
 804e836:	6028      	str	r0, [r5, #0]
}
 804e838:	bd70      	pop	{r4, r5, r6, pc}
 804e83a:	bf00      	nop
 804e83c:	2000b614 	.word	0x2000b614

0804e840 <HW_SPI_IoInit>:
  /*##-2- Configure the SPI GPIOs */
  HW_SPI_IoDeInit();
}

void HW_SPI_IoInit(void)
{
 804e840:	b570      	push	{r4, r5, r6, lr}
 804e842:	b088      	sub	sp, #32

	GPIO_InitTypeDef initStruct = { 0 };
 804e844:	2214      	movs	r2, #20
 804e846:	2100      	movs	r1, #0
 804e848:	a803      	add	r0, sp, #12
 804e84a:	f001 fc7f 	bl	805014c <memset>
	if (hspi.Instance == SPI2) {
 804e84e:	4b25      	ldr	r3, [pc, #148]	; (804e8e4 <HW_SPI_IoInit+0xa4>)
 804e850:	681a      	ldr	r2, [r3, #0]
 804e852:	4b25      	ldr	r3, [pc, #148]	; (804e8e8 <HW_SPI_IoInit+0xa8>)
 804e854:	429a      	cmp	r2, r3
 804e856:	d143      	bne.n	804e8e0 <HW_SPI_IoInit+0xa0>
		/* Peripheral clock enable */
		__HAL_RCC_SPI2_CLK_ENABLE();
 804e858:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 804e85c:	2400      	movs	r4, #0
 804e85e:	9400      	str	r4, [sp, #0]
 804e860:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		initStruct.Mode = GPIO_MODE_AF_PP;
		initStruct.Pull = GPIO_NOPULL;
		initStruct.Speed = GPIO_SPEED_HIGH;
		initStruct.Alternate = SPI2_AF;

		HW_GPIO_Init(RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 804e862:	4822      	ldr	r0, [pc, #136]	; (804e8ec <HW_SPI_IoInit+0xac>)
		__HAL_RCC_SPI2_CLK_ENABLE();
 804e864:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 804e868:	641a      	str	r2, [r3, #64]	; 0x40
 804e86a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804e86c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 804e870:	9200      	str	r2, [sp, #0]
 804e872:	9a00      	ldr	r2, [sp, #0]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 804e874:	9401      	str	r4, [sp, #4]
 804e876:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804e878:	f042 0204 	orr.w	r2, r2, #4
 804e87c:	631a      	str	r2, [r3, #48]	; 0x30
 804e87e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804e880:	f002 0204 	and.w	r2, r2, #4
 804e884:	9201      	str	r2, [sp, #4]
 804e886:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 804e888:	9402      	str	r4, [sp, #8]
 804e88a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804e88c:	f042 0202 	orr.w	r2, r2, #2
 804e890:	631a      	str	r2, [r3, #48]	; 0x30
 804e892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804e894:	f003 0302 	and.w	r3, r3, #2
 804e898:	9302      	str	r3, [sp, #8]
 804e89a:	9b02      	ldr	r3, [sp, #8]
		initStruct.Alternate = SPI2_AF;
 804e89c:	2203      	movs	r2, #3
 804e89e:	2305      	movs	r3, #5
 804e8a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
		initStruct.Mode = GPIO_MODE_AF_PP;
 804e8a4:	2502      	movs	r5, #2
		HW_GPIO_Init(RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 804e8a6:	aa03      	add	r2, sp, #12
 804e8a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
		initStruct.Mode = GPIO_MODE_AF_PP;
 804e8ac:	9504      	str	r5, [sp, #16]
		HW_GPIO_Init(RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 804e8ae:	f7ff fd3b 	bl	804e328 <HW_GPIO_Init>
		HW_GPIO_Init(RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct);
 804e8b2:	aa03      	add	r2, sp, #12
 804e8b4:	2104      	movs	r1, #4
 804e8b6:	480e      	ldr	r0, [pc, #56]	; (804e8f0 <HW_SPI_IoInit+0xb0>)
 804e8b8:	f7ff fd36 	bl	804e328 <HW_GPIO_Init>
		HW_GPIO_Init(RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct);
 804e8bc:	aa03      	add	r2, sp, #12
 804e8be:	2108      	movs	r1, #8
 804e8c0:	480b      	ldr	r0, [pc, #44]	; (804e8f0 <HW_SPI_IoInit+0xb0>)
 804e8c2:	f7ff fd31 	bl	804e328 <HW_GPIO_Init>

		initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 804e8c6:	2601      	movs	r6, #1
		initStruct.Pull = GPIO_NOPULL;

		HW_GPIO_Init(RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct);
 804e8c8:	aa03      	add	r2, sp, #12
 804e8ca:	4629      	mov	r1, r5
 804e8cc:	4807      	ldr	r0, [pc, #28]	; (804e8ec <HW_SPI_IoInit+0xac>)
		initStruct.Pull = GPIO_NOPULL;
 804e8ce:	e9cd 6404 	strd	r6, r4, [sp, #16]
		HW_GPIO_Init(RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct);
 804e8d2:	f7ff fd29 	bl	804e328 <HW_GPIO_Init>

		HW_GPIO_Write(RADIO_NSS_PORT, RADIO_NSS_PIN, 1);
 804e8d6:	4632      	mov	r2, r6
 804e8d8:	4629      	mov	r1, r5
 804e8da:	4804      	ldr	r0, [pc, #16]	; (804e8ec <HW_SPI_IoInit+0xac>)
 804e8dc:	f7ff fda6 	bl	804e42c <HW_GPIO_Write>
	}
}
 804e8e0:	b008      	add	sp, #32
 804e8e2:	bd70      	pop	{r4, r5, r6, pc}
 804e8e4:	2000b684 	.word	0x2000b684
 804e8e8:	40003800 	.word	0x40003800
 804e8ec:	40020400 	.word	0x40020400
 804e8f0:	40020800 	.word	0x40020800

0804e8f4 <HW_SPI_Init>:
{
 804e8f4:	b508      	push	{r3, lr}
  hspi.Instance = SPI_RADIO;
 804e8f6:	4b1b      	ldr	r3, [pc, #108]	; (804e964 <HW_SPI_Init+0x70>)
 804e8f8:	4a1b      	ldr	r2, [pc, #108]	; (804e968 <HW_SPI_Init+0x74>)
 804e8fa:	601a      	str	r2, [r3, #0]
/* Private functions ---------------------------------------------------------*/

static uint32_t SpiFrequency(uint32_t hz)
{
  uint32_t divisor = 0;
  uint32_t SysClkTmp = SystemCoreClock;
 804e8fc:	4a1b      	ldr	r2, [pc, #108]	; (804e96c <HW_SPI_Init+0x78>)
  uint32_t baudRate;

  while (SysClkTmp > hz)
 804e8fe:	481c      	ldr	r0, [pc, #112]	; (804e970 <HW_SPI_Init+0x7c>)
  uint32_t SysClkTmp = SystemCoreClock;
 804e900:	6811      	ldr	r1, [r2, #0]
  uint32_t divisor = 0;
 804e902:	2200      	movs	r2, #0
  while (SysClkTmp > hz)
 804e904:	4281      	cmp	r1, r0
 804e906:	d904      	bls.n	804e912 <HW_SPI_Init+0x1e>
  {
    divisor++;
 804e908:	3201      	adds	r2, #1
    SysClkTmp = (SysClkTmp >> 1);

    if (divisor >= 7)
 804e90a:	2a07      	cmp	r2, #7
    SysClkTmp = (SysClkTmp >> 1);
 804e90c:	ea4f 0151 	mov.w	r1, r1, lsr #1
    if (divisor >= 7)
 804e910:	d1f8      	bne.n	804e904 <HW_SPI_Init+0x10>
    {
      break;
    }
  }

  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 804e912:	f012 0104 	ands.w	r1, r2, #4
 804e916:	bf18      	it	ne
 804e918:	2120      	movne	r1, #32
             (((divisor & 0x2) == 0) ? 0x0 : SPI_CR1_BR_1) |
 804e91a:	f012 0002 	ands.w	r0, r2, #2
 804e91e:	bf18      	it	ne
 804e920:	2010      	movne	r0, #16
             (((divisor & 0x1) == 0) ? 0x0 : SPI_CR1_BR_0);
 804e922:	f012 0201 	ands.w	r2, r2, #1
  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 804e926:	ea41 0100 	orr.w	r1, r1, r0
             (((divisor & 0x1) == 0) ? 0x0 : SPI_CR1_BR_0);
 804e92a:	bf18      	it	ne
 804e92c:	2208      	movne	r2, #8
  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 804e92e:	430a      	orrs	r2, r1
  hspi.Init.BaudRatePrescaler = SpiFrequency(10000000);
 804e930:	61da      	str	r2, [r3, #28]
  hspi.Init.Mode           = SPI_MODE_MASTER;
 804e932:	f44f 7182 	mov.w	r1, #260	; 0x104
 804e936:	2200      	movs	r2, #0
 804e938:	e9c3 1201 	strd	r1, r2, [r3, #4]
  if (HAL_SPI_Init(&hspi) != HAL_OK)
 804e93c:	4809      	ldr	r0, [pc, #36]	; (804e964 <HW_SPI_Init+0x70>)
  hspi.Init.DataSize       = SPI_DATASIZE_8BIT;
 804e93e:	60da      	str	r2, [r3, #12]
  hspi.Init.NSS            = SPI_NSS_SOFT;
 804e940:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi.Init.CLKPhase       = SPI_PHASE_1EDGE;
 804e944:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 804e948:	629a      	str	r2, [r3, #40]	; 0x28
  hspi.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 804e94a:	621a      	str	r2, [r3, #32]
  hspi.Init.NSS            = SPI_NSS_SOFT;
 804e94c:	6199      	str	r1, [r3, #24]
  hspi.Init.TIMode         = SPI_TIMODE_DISABLE;
 804e94e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_SPI_Init(&hspi) != HAL_OK)
 804e950:	f7f6 ff28 	bl	80457a4 <HAL_SPI_Init>
 804e954:	b108      	cbz	r0, 804e95a <HW_SPI_Init+0x66>
    Error_Handler();
 804e956:	f7ff fb09 	bl	804df6c <Error_Handler>
}
 804e95a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HW_SPI_IoInit();
 804e95e:	f7ff bf6f 	b.w	804e840 <HW_SPI_IoInit>
 804e962:	bf00      	nop
 804e964:	2000b684 	.word	0x2000b684
 804e968:	40003800 	.word	0x40003800
 804e96c:	200010cc 	.word	0x200010cc
 804e970:	00989680 	.word	0x00989680

0804e974 <HW_SPI_InOut>:
{
 804e974:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  HAL_SPI_TransmitReceive(&hspi, (uint8_t *) &txData, (uint8_t *) &rxData, 1, HAL_MAX_DELAY);
 804e976:	f04f 33ff 	mov.w	r3, #4294967295
{
 804e97a:	f8ad 000e 	strh.w	r0, [sp, #14]
  HAL_SPI_TransmitReceive(&hspi, (uint8_t *) &txData, (uint8_t *) &rxData, 1, HAL_MAX_DELAY);
 804e97e:	9300      	str	r3, [sp, #0]
 804e980:	f10d 0216 	add.w	r2, sp, #22
 804e984:	2301      	movs	r3, #1
 804e986:	f10d 010e 	add.w	r1, sp, #14
 804e98a:	4804      	ldr	r0, [pc, #16]	; (804e99c <HW_SPI_InOut+0x28>)
 804e98c:	f7f6 ff47 	bl	804581e <HAL_SPI_TransmitReceive>
}
 804e990:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 804e994:	b007      	add	sp, #28
 804e996:	f85d fb04 	ldr.w	pc, [sp], #4
 804e99a:	bf00      	nop
 804e99c:	2000b684 	.word	0x2000b684

0804e9a0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init()
{
 804e9a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 804e9a2:	2210      	movs	r2, #16
 804e9a4:	2100      	movs	r1, #0
 804e9a6:	a802      	add	r0, sp, #8
 804e9a8:	f001 fbd0 	bl	805014c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 804e9ac:	4815      	ldr	r0, [pc, #84]	; (804ea04 <MX_TIM2_Init+0x64>)
	htim2.Init.Prescaler = 839;
 804e9ae:	f240 3247 	movw	r2, #839	; 0x347
 804e9b2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 804e9b6:	2300      	movs	r3, #0
	htim2.Init.Prescaler = 839;
 804e9b8:	e9c0 1200 	strd	r1, r2, [r0]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim2.Init.Period = 9999;
 804e9bc:	f242 720f 	movw	r2, #9999	; 0x270f
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 804e9c0:	e9cd 3300 	strd	r3, r3, [sp]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 804e9c4:	6083      	str	r3, [r0, #8]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 804e9c6:	e9c0 2303 	strd	r2, r3, [r0, #12]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 804e9ca:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 804e9cc:	f7f7 f94a 	bl	8045c64 <HAL_TIM_Base_Init>
 804e9d0:	b108      	cbz	r0, 804e9d6 <MX_TIM2_Init+0x36>
		Error_Handler();
 804e9d2:	f7ff facb 	bl	804df6c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 804e9d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 804e9da:	a902      	add	r1, sp, #8
 804e9dc:	4809      	ldr	r0, [pc, #36]	; (804ea04 <MX_TIM2_Init+0x64>)
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 804e9de:	9302      	str	r3, [sp, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 804e9e0:	f7f7 f964 	bl	8045cac <HAL_TIM_ConfigClockSource>
 804e9e4:	b108      	cbz	r0, 804e9ea <MX_TIM2_Init+0x4a>
		Error_Handler();
 804e9e6:	f7ff fac1 	bl	804df6c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 804e9ea:	2300      	movs	r3, #0
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 804e9ec:	4669      	mov	r1, sp
 804e9ee:	4805      	ldr	r0, [pc, #20]	; (804ea04 <MX_TIM2_Init+0x64>)
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 804e9f0:	e9cd 3300 	strd	r3, r3, [sp]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 804e9f4:	f7f7 f9ee 	bl	8045dd4 <HAL_TIMEx_MasterConfigSynchronization>
 804e9f8:	b108      	cbz	r0, 804e9fe <MX_TIM2_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 804e9fa:	f7ff fab7 	bl	804df6c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
}
 804e9fe:	b007      	add	sp, #28
 804ea00:	f85d fb04 	ldr.w	pc, [sp], #4
 804ea04:	2000de88 	.word	0x2000de88

0804ea08 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 804ea08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 804ea0a:	2210      	movs	r2, #16
 804ea0c:	2100      	movs	r1, #0
 804ea0e:	a802      	add	r0, sp, #8
 804ea10:	f001 fb9c 	bl	805014c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 804ea14:	4815      	ldr	r0, [pc, #84]	; (804ea6c <MX_TIM3_Init+0x64>)
  htim3.Init.Prescaler = 839;
 804ea16:	4916      	ldr	r1, [pc, #88]	; (804ea70 <MX_TIM3_Init+0x68>)
 804ea18:	f240 3247 	movw	r2, #839	; 0x347
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 804ea1c:	2300      	movs	r3, #0
  htim3.Init.Prescaler = 839;
 804ea1e:	e9c0 1200 	strd	r1, r2, [r0]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 9999;
 804ea22:	f242 720f 	movw	r2, #9999	; 0x270f
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 804ea26:	e9cd 3300 	strd	r3, r3, [sp]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 804ea2a:	6083      	str	r3, [r0, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 804ea2c:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 804ea30:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 804ea32:	f7f7 f917 	bl	8045c64 <HAL_TIM_Base_Init>
 804ea36:	b108      	cbz	r0, 804ea3c <MX_TIM3_Init+0x34>
  {
    Error_Handler();
 804ea38:	f7ff fa98 	bl	804df6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 804ea3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 804ea40:	a902      	add	r1, sp, #8
 804ea42:	480a      	ldr	r0, [pc, #40]	; (804ea6c <MX_TIM3_Init+0x64>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 804ea44:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 804ea46:	f7f7 f931 	bl	8045cac <HAL_TIM_ConfigClockSource>
 804ea4a:	b108      	cbz	r0, 804ea50 <MX_TIM3_Init+0x48>
  {
    Error_Handler();
 804ea4c:	f7ff fa8e 	bl	804df6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 804ea50:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 804ea52:	4669      	mov	r1, sp
 804ea54:	4805      	ldr	r0, [pc, #20]	; (804ea6c <MX_TIM3_Init+0x64>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 804ea56:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 804ea5a:	f7f7 f9bb 	bl	8045dd4 <HAL_TIMEx_MasterConfigSynchronization>
 804ea5e:	b108      	cbz	r0, 804ea64 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 804ea60:	f7ff fa84 	bl	804df6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 804ea64:	b007      	add	sp, #28
 804ea66:	f85d fb04 	ldr.w	pc, [sp], #4
 804ea6a:	bf00      	nop
 804ea6c:	2000de48 	.word	0x2000de48
 804ea70:	40000400 	.word	0x40000400

0804ea74 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 804ea74:	6803      	ldr	r3, [r0, #0]
 804ea76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 804ea7a:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 804ea7c:	d116      	bne.n	804eaac <HAL_TIM_Base_MspInit+0x38>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 804ea7e:	2200      	movs	r2, #0
 804ea80:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 804ea84:	9200      	str	r2, [sp, #0]
 804ea86:	6c19      	ldr	r1, [r3, #64]	; 0x40
 804ea88:	f041 0101 	orr.w	r1, r1, #1
 804ea8c:	6419      	str	r1, [r3, #64]	; 0x40
 804ea8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804ea90:	f003 0301 	and.w	r3, r3, #1
 804ea94:	9300      	str	r3, [sp, #0]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 804ea96:	201c      	movs	r0, #28
 804ea98:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 804ea9a:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 804ea9c:	f7f4 fd26 	bl	80434ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 804eaa0:	201c      	movs	r0, #28
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 804eaa2:	b003      	add	sp, #12
 804eaa4:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 804eaa8:	f7f4 bd54 	b.w	8043554 <HAL_NVIC_EnableIRQ>
  else if(htim_base->Instance==TIM3)
 804eaac:	4a0b      	ldr	r2, [pc, #44]	; (804eadc <HAL_TIM_Base_MspInit+0x68>)
 804eaae:	4293      	cmp	r3, r2
 804eab0:	d111      	bne.n	804ead6 <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM3_CLK_ENABLE();
 804eab2:	2200      	movs	r2, #0
 804eab4:	4b0a      	ldr	r3, [pc, #40]	; (804eae0 <HAL_TIM_Base_MspInit+0x6c>)
 804eab6:	9201      	str	r2, [sp, #4]
 804eab8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 804eaba:	f041 0102 	orr.w	r1, r1, #2
 804eabe:	6419      	str	r1, [r3, #64]	; 0x40
 804eac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804eac2:	f003 0302 	and.w	r3, r3, #2
 804eac6:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 804eac8:	201d      	movs	r0, #29
 804eaca:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 804eacc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 804eace:	f7f4 fd0d 	bl	80434ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 804ead2:	201d      	movs	r0, #29
 804ead4:	e7e5      	b.n	804eaa2 <HAL_TIM_Base_MspInit+0x2e>
}
 804ead6:	b003      	add	sp, #12
 804ead8:	f85d fb04 	ldr.w	pc, [sp], #4
 804eadc:	40000400 	.word	0x40000400
 804eae0:	40023800 	.word	0x40023800

0804eae4 <LoraMacProcessNotify>:
  }
}

void LoraMacProcessNotify(void)
{
  LoraMacProcessRequest = LORA_SET;
 804eae4:	4b01      	ldr	r3, [pc, #4]	; (804eaec <LoraMacProcessNotify+0x8>)
 804eae6:	2201      	movs	r2, #1
 804eae8:	701a      	strb	r2, [r3, #0]
}
 804eaea:	4770      	bx	lr
 804eaec:	2000b6dc 	.word	0x2000b6dc

0804eaf0 <LORA_TxNeeded>:
  LORA_send(&AppData, LORAWAN_UNCONFIRMED_MSG);
}

static void LORA_TxNeeded(void)
{
  AppData.BuffSize = 0;
 804eaf0:	4803      	ldr	r0, [pc, #12]	; (804eb00 <LORA_TxNeeded+0x10>)
 804eaf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 804eaf6:	8083      	strh	r3, [r0, #4]
  AppData.Port = LORAWAN_APP_PORT;

  LORA_send(&AppData, LORAWAN_UNCONFIRMED_MSG);
 804eaf8:	2100      	movs	r1, #0
 804eafa:	f7fe bdd5 	b.w	804d6a8 <LORA_send>
 804eafe:	bf00      	nop
 804eb00:	20001264 	.word	0x20001264

0804eb04 <LORA_ConfirmClass>:
{
 804eb04:	b508      	push	{r3, lr}
  PRINTF("switch to class %c done\n\r", "ABC"[Class]);
 804eb06:	4b07      	ldr	r3, [pc, #28]	; (804eb24 <LORA_ConfirmClass+0x20>)
 804eb08:	5c19      	ldrb	r1, [r3, r0]
 804eb0a:	4807      	ldr	r0, [pc, #28]	; (804eb28 <LORA_ConfirmClass+0x24>)
 804eb0c:	f7ff f92a 	bl	804dd64 <TraceSend>
  AppData.BuffSize = 0;
 804eb10:	4806      	ldr	r0, [pc, #24]	; (804eb2c <LORA_ConfirmClass+0x28>)
 804eb12:	f44f 7300 	mov.w	r3, #512	; 0x200
 804eb16:	8083      	strh	r3, [r0, #4]
  LORA_send(&AppData, LORAWAN_UNCONFIRMED_MSG);
 804eb18:	2100      	movs	r1, #0
}
 804eb1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LORA_send(&AppData, LORAWAN_UNCONFIRMED_MSG);
 804eb1e:	f7fe bdc3 	b.w	804d6a8 <LORA_send>
 804eb22:	bf00      	nop
 804eb24:	080529a9 	.word	0x080529a9
 804eb28:	0805298f 	.word	0x0805298f
 804eb2c:	20001264 	.word	0x20001264

0804eb30 <LORA_HasJoined>:
  LORA_RequestClass(LORAWAN_DEFAULT_CLASS);
 804eb30:	2002      	movs	r0, #2
 804eb32:	f7fe bdfd 	b.w	804d730 <LORA_RequestClass>

0804eb36 <LORA_GetBatteryLevel>:
  * @brief This function return the battery level
  * @param none
  * @retval the battery level  1 (very low) to 254 (fully charged)
  */
uint8_t LORA_GetBatteryLevel(void)
{
 804eb36:	b508      	push	{r3, lr}
  uint16_t batteryLevelmV;
  uint8_t batteryLevel = 0;

  batteryLevelmV = HW_GetBatteryLevel();
 804eb38:	f000 fe6a 	bl	804f810 <HW_GetBatteryLevel>


  /* Convert batterey level from mV to linea scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 804eb3c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 804eb40:	4298      	cmp	r0, r3
 804eb42:	d80c      	bhi.n	804eb5e <LORA_GetBatteryLevel+0x28>
  {
    batteryLevel = LORAWAN_MAX_BAT;
  }
  else if (batteryLevelmV < VDD_MIN)
 804eb44:	f5b0 6fe1 	cmp.w	r0, #1800	; 0x708
 804eb48:	d30b      	bcc.n	804eb62 <LORA_GetBatteryLevel+0x2c>
  {
    batteryLevel = 0;
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 804eb4a:	f5a0 63e1 	sub.w	r3, r0, #1800	; 0x708
 804eb4e:	20fe      	movs	r0, #254	; 0xfe
 804eb50:	4358      	muls	r0, r3
 804eb52:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 804eb56:	fbb0 f0f3 	udiv	r0, r0, r3
 804eb5a:	b2c0      	uxtb	r0, r0
  }

  return batteryLevel;
}
 804eb5c:	bd08      	pop	{r3, pc}
    batteryLevel = LORAWAN_MAX_BAT;
 804eb5e:	20fe      	movs	r0, #254	; 0xfe
 804eb60:	e7fc      	b.n	804eb5c <LORA_GetBatteryLevel+0x26>
    batteryLevel = 0;
 804eb62:	2000      	movs	r0, #0
 804eb64:	e7fa      	b.n	804eb5c <LORA_GetBatteryLevel+0x26>
	...

0804eb68 <OnTxTimerEvent>:
{
 804eb68:	b510      	push	{r4, lr}
  TimerStart(&TxTimer);
 804eb6a:	4c03      	ldr	r4, [pc, #12]	; (804eb78 <OnTxTimerEvent+0x10>)
 804eb6c:	1d20      	adds	r0, r4, #4
 804eb6e:	f7fe fffd 	bl	804db6c <TimerStart>
  AppProcessRequest = LORA_SET;
 804eb72:	2301      	movs	r3, #1
 804eb74:	7723      	strb	r3, [r4, #28]
}
 804eb76:	bd10      	pop	{r4, pc}
 804eb78:	2000b6dc 	.word	0x2000b6dc

0804eb7c <LORA_RxData>:
{
 804eb7c:	b510      	push	{r4, lr}
 804eb7e:	4604      	mov	r4, r0
  PRINTF("PACKET RECEIVED ON PORT %d\n\r", AppData->Port);
 804eb80:	7941      	ldrb	r1, [r0, #5]
 804eb82:	4812      	ldr	r0, [pc, #72]	; (804ebcc <LORA_RxData+0x50>)
 804eb84:	f7ff f8ee 	bl	804dd64 <TraceSend>
  switch (AppData->Port)
 804eb88:	7963      	ldrb	r3, [r4, #5]
 804eb8a:	2b02      	cmp	r3, #2
 804eb8c:	d011      	beq.n	804ebb2 <LORA_RxData+0x36>
 804eb8e:	2b03      	cmp	r3, #3
 804eb90:	d109      	bne.n	804eba6 <LORA_RxData+0x2a>
      if (AppData->BuffSize == 1)
 804eb92:	7923      	ldrb	r3, [r4, #4]
 804eb94:	2b01      	cmp	r3, #1
 804eb96:	d106      	bne.n	804eba6 <LORA_RxData+0x2a>
        switch (AppData->Buff[0])
 804eb98:	6823      	ldr	r3, [r4, #0]
 804eb9a:	7818      	ldrb	r0, [r3, #0]
 804eb9c:	2801      	cmp	r0, #1
 804eb9e:	d004      	beq.n	804ebaa <LORA_RxData+0x2e>
 804eba0:	d302      	bcc.n	804eba8 <LORA_RxData+0x2c>
 804eba2:	2802      	cmp	r0, #2
 804eba4:	d001      	beq.n	804ebaa <LORA_RxData+0x2e>
}
 804eba6:	bd10      	pop	{r4, pc}
            LORA_RequestClass(CLASS_A);
 804eba8:	2000      	movs	r0, #0
}
 804ebaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            LORA_RequestClass(CLASS_C);
 804ebae:	f7fe bdbf 	b.w	804d730 <LORA_RequestClass>
      if (AppData->BuffSize == 1)
 804ebb2:	7923      	ldrb	r3, [r4, #4]
 804ebb4:	2b01      	cmp	r3, #1
 804ebb6:	d1f6      	bne.n	804eba6 <LORA_RxData+0x2a>
        AppLedStateOn = AppData->Buff[0] & 0x01;
 804ebb8:	6823      	ldr	r3, [r4, #0]
 804ebba:	781b      	ldrb	r3, [r3, #0]
        if (AppLedStateOn == RESET)
 804ebbc:	07db      	lsls	r3, r3, #31
          PRINTF("LED OFF\n\r");
 804ebbe:	bf54      	ite	pl
 804ebc0:	4803      	ldrpl	r0, [pc, #12]	; (804ebd0 <LORA_RxData+0x54>)
          PRINTF("LED ON\n\r");
 804ebc2:	4804      	ldrmi	r0, [pc, #16]	; (804ebd4 <LORA_RxData+0x58>)
}
 804ebc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          PRINTF("LED ON\n\r");
 804ebc8:	f7ff b8cc 	b.w	804dd64 <TraceSend>
 804ebcc:	080529ad 	.word	0x080529ad
 804ebd0:	080529ca 	.word	0x080529ca
 804ebd4:	080529d4 	.word	0x080529d4

0804ebd8 <nibble_to_ascii>:
    if((c>=0)&&(c<=9)){
 804ebd8:	2809      	cmp	r0, #9
        return (c+=48);
 804ebda:	bf94      	ite	ls
 804ebdc:	3030      	addls	r0, #48	; 0x30
        return (c+=55);
 804ebde:	3037      	addhi	r0, #55	; 0x37
 804ebe0:	b2c0      	uxtb	r0, r0
}
 804ebe2:	4770      	bx	lr

0804ebe4 <hex_to_ascii>:
int hex_to_ascii(unsigned char *buffer_out, unsigned char *buffer_in, int tamanho){
 804ebe4:	b538      	push	{r3, r4, r5, lr}
 804ebe6:	3901      	subs	r1, #1
 804ebe8:	4604      	mov	r4, r0
    for(int i=0; i<(tamanho);i++)
 804ebea:	2300      	movs	r3, #0
 804ebec:	4293      	cmp	r3, r2
 804ebee:	db01      	blt.n	804ebf4 <hex_to_ascii+0x10>
}
 804ebf0:	2000      	movs	r0, #0
 804ebf2:	bd38      	pop	{r3, r4, r5, pc}
        buffer_out[j] = nibble_to_ascii((buffer_in[i]&0xF0)>>4);
 804ebf4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 804ebf8:	0900      	lsrs	r0, r0, #4
 804ebfa:	f7ff ffed 	bl	804ebd8 <nibble_to_ascii>
 804ebfe:	f804 0013 	strb.w	r0, [r4, r3, lsl #1]
        buffer_out[j+1] = nibble_to_ascii(buffer_in[i]&0x0F);
 804ec02:	7808      	ldrb	r0, [r1, #0]
 804ec04:	f000 000f 	and.w	r0, r0, #15
 804ec08:	f7ff ffe6 	bl	804ebd8 <nibble_to_ascii>
 804ec0c:	eb04 0543 	add.w	r5, r4, r3, lsl #1
    for(int i=0; i<(tamanho);i++)
 804ec10:	3301      	adds	r3, #1
        buffer_out[j+1] = nibble_to_ascii(buffer_in[i]&0x0F);
 804ec12:	7068      	strb	r0, [r5, #1]
 804ec14:	e7ea      	b.n	804ebec <hex_to_ascii+0x8>
	...

0804ec18 <main>:
{
 804ec18:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
  flags_ble.all_flags=RESET;
 804ec1a:	4cbd      	ldr	r4, [pc, #756]	; (804ef10 <main+0x2f8>)
 804ec1c:	2300      	movs	r3, #0
 804ec1e:	7023      	strb	r3, [r4, #0]
  HAL_Init();
 804ec20:	f7f4 fa26 	bl	8043070 <HAL_Init>
  SystemClock_Config();
 804ec24:	f000 fcba 	bl	804f59c <SystemClock_Config>
  HW_Init();
 804ec28:	f000 fbca 	bl	804f3c0 <HW_Init>
	if(f_mount(&SDFatFS, (const TCHAR *)&SDPath, 1) != FR_OK)
 804ec2c:	2201      	movs	r2, #1
 804ec2e:	49b9      	ldr	r1, [pc, #740]	; (804ef14 <main+0x2fc>)
 804ec30:	48b9      	ldr	r0, [pc, #740]	; (804ef18 <main+0x300>)
 804ec32:	f7f8 fcb5 	bl	80475a0 <f_mount>
 804ec36:	b110      	cbz	r0, 804ec3e <main+0x26>
		PRINT_SD_CARD(PRINTF("Erro ao montar o cartao\r\n");)
 804ec38:	48b8      	ldr	r0, [pc, #736]	; (804ef1c <main+0x304>)
 804ec3a:	f7ff f893 	bl	804dd64 <TraceSend>
  LPM_SetOffMode(LPM_APPLI_Id, LPM_Disable);
 804ec3e:	2101      	movs	r1, #1
  PRINTF("APP_VERSION= %02X.%02X.%02X.%02X\r\n", (uint8_t)(__APP_VERSION >> 24), (uint8_t)(__APP_VERSION >> 16), (uint8_t)(__APP_VERSION >> 8), (uint8_t)__APP_VERSION);
 804ec40:	2500      	movs	r5, #0
  LPM_SetOffMode(LPM_APPLI_Id, LPM_Disable);
 804ec42:	4608      	mov	r0, r1
 804ec44:	f7fe fdb2 	bl	804d7ac <LPM_SetOffMode>
  PRINTF("APP_VERSION= %02X.%02X.%02X.%02X\r\n", (uint8_t)(__APP_VERSION >> 24), (uint8_t)(__APP_VERSION >> 16), (uint8_t)(__APP_VERSION >> 8), (uint8_t)__APP_VERSION);
 804ec48:	462b      	mov	r3, r5
 804ec4a:	2203      	movs	r2, #3
 804ec4c:	2101      	movs	r1, #1
 804ec4e:	9500      	str	r5, [sp, #0]
 804ec50:	48b3      	ldr	r0, [pc, #716]	; (804ef20 <main+0x308>)
		ble_handler((uint8_t*)&message_ble);					// Aciona o handler para selecionar a mensagem de resposta.
 804ec52:	4fb4      	ldr	r7, [pc, #720]	; (804ef24 <main+0x30c>)
		HAL_UART_AbortReceive_IT(&huart1);
 804ec54:	4eb4      	ldr	r6, [pc, #720]	; (804ef28 <main+0x310>)
		HAL_UART_Receive_IT(&huart1, rx_byte_uart1, 1);
 804ec56:	f8df 834c 	ldr.w	r8, [pc, #844]	; 804efa4 <main+0x38c>
  PRINTF("APP_VERSION= %02X.%02X.%02X.%02X\r\n", (uint8_t)(__APP_VERSION >> 24), (uint8_t)(__APP_VERSION >> 16), (uint8_t)(__APP_VERSION >> 8), (uint8_t)__APP_VERSION);
 804ec5a:	f7ff f883 	bl	804dd64 <TraceSend>
  PRINTF("MAC_VERSION= %02X.%02X.%02X.%02X\r\n", (uint8_t)(__LORA_MAC_VERSION >> 24), (uint8_t)(__LORA_MAC_VERSION >> 16), (uint8_t)(__LORA_MAC_VERSION >> 8), (uint8_t)__LORA_MAC_VERSION);
 804ec5e:	2204      	movs	r2, #4
 804ec60:	4611      	mov	r1, r2
 804ec62:	2302      	movs	r3, #2
 804ec64:	9500      	str	r5, [sp, #0]
 804ec66:	48b1      	ldr	r0, [pc, #708]	; (804ef2c <main+0x314>)
 804ec68:	f7ff f87c 	bl	804dd64 <TraceSend>
  LORA_Init(&LoRaMainCallbacks, &LoRaParamInit);
 804ec6c:	49b0      	ldr	r1, [pc, #704]	; (804ef30 <main+0x318>)
 804ec6e:	1d08      	adds	r0, r1, #4
 804ec70:	f7fe fb84 	bl	804d37c <LORA_Init>
  LORA_Join();
 804ec74:	f7fe fc84 	bl	804d580 <LORA_Join>
    TimerInit(&TxTimer, OnTxTimerEvent);
 804ec78:	49ae      	ldr	r1, [pc, #696]	; (804ef34 <main+0x31c>)
 804ec7a:	48af      	ldr	r0, [pc, #700]	; (804ef38 <main+0x320>)
 804ec7c:	f7fe ff6c 	bl	804db58 <TimerInit>
    TimerSetValue(&TxTimer,  APP_TX_DUTYCYCLE);
 804ec80:	f242 7110 	movw	r1, #10000	; 0x2710
 804ec84:	48ac      	ldr	r0, [pc, #688]	; (804ef38 <main+0x320>)
 804ec86:	f7ff f80b 	bl	804dca0 <TimerSetValue>
    OnTxTimerEvent(NULL);
 804ec8a:	4628      	mov	r0, r5
 804ec8c:	f7ff ff6c 	bl	804eb68 <OnTxTimerEvent>
  in_use_TAG = EMPTY_QUEUE;
 804ec90:	4baa      	ldr	r3, [pc, #680]	; (804ef3c <main+0x324>)
  INIT_ReaderUART(USART2, 57600);
 804ec92:	48ab      	ldr	r0, [pc, #684]	; (804ef40 <main+0x328>)
  in_use_TAG = EMPTY_QUEUE;
 804ec94:	f04f 32ff 	mov.w	r2, #4294967295
  INIT_ReaderUART(USART2, 57600);
 804ec98:	f44f 4161 	mov.w	r1, #57600	; 0xe100
  in_use_TAG = EMPTY_QUEUE;
 804ec9c:	601a      	str	r2, [r3, #0]
  INIT_ReaderUART(USART2, 57600);
 804ec9e:	f7f2 fa3d 	bl	804111c <INIT_ReaderUART>
  init_Communication();
 804eca2:	f7f2 fa81 	bl	80411a8 <init_Communication>
	if (flags_ble.enable_handler){
 804eca6:	7823      	ldrb	r3, [r4, #0]
 804eca8:	069a      	lsls	r2, r3, #26
 804ecaa:	d505      	bpl.n	804ecb8 <main+0xa0>
		flags_ble.enable_handler = 0;
 804ecac:	f36f 1345 	bfc	r3, #5, #1
		ble_handler((uint8_t*)&message_ble);					// Aciona o handler para selecionar a mensagem de resposta.
 804ecb0:	4638      	mov	r0, r7
		flags_ble.enable_handler = 0;
 804ecb2:	7023      	strb	r3, [r4, #0]
		ble_handler((uint8_t*)&message_ble);					// Aciona o handler para selecionar a mensagem de resposta.
 804ecb4:	f7f2 fb42 	bl	804133c <ble_handler>
	if (flags_ble.update_mode){
 804ecb8:	7823      	ldrb	r3, [r4, #0]
 804ecba:	06dd      	lsls	r5, r3, #27
 804ecbc:	d51e      	bpl.n	804ecfc <main+0xe4>
		flags_ble.update_mode = RESET;
 804ecbe:	f36f 1304 	bfc	r3, #4, #1
		HAL_NVIC_DisableIRQ(USART1_IRQn);
 804ecc2:	2025      	movs	r0, #37	; 0x25
		flags_ble.update_mode = RESET;
 804ecc4:	7023      	strb	r3, [r4, #0]
		HAL_NVIC_DisableIRQ(USART1_IRQn);
 804ecc6:	f7f4 fc53 	bl	8043570 <HAL_NVIC_DisableIRQ>
		HAL_UART_AbortReceive_IT(&huart1);
 804ecca:	4630      	mov	r0, r6
 804eccc:	f7f7 fc7c 	bl	80465c8 <HAL_UART_AbortReceive_IT>
		HAL_UART_DeInit(&huart1);
 804ecd0:	4630      	mov	r0, r6
 804ecd2:	f7f7 f997 	bl	8046004 <HAL_UART_DeInit>
		HAL_Delay(1);
 804ecd6:	2001      	movs	r0, #1
 804ecd8:	f000 fafc 	bl	804f2d4 <HAL_Delay>
		COM_Init();
 804ecdc:	f001 f86a 	bl	804fdb4 <COM_Init>
		HAL_Delay(1);
 804ece0:	2001      	movs	r0, #1
 804ece2:	f000 faf7 	bl	804f2d4 <HAL_Delay>
		COM_Flush();
 804ece6:	f001 f895 	bl	804fe14 <COM_Flush>
		FW_UPDATE_Run();
 804ecea:	f7ff fa8b 	bl	804e204 <FW_UPDATE_Run>
		MX_USART1_UART_Init();
 804ecee:	f7f2 fbc3 	bl	8041478 <MX_USART1_UART_Init>
		HAL_UART_Receive_IT(&huart1, rx_byte_uart1, 1);
 804ecf2:	2201      	movs	r2, #1
 804ecf4:	4641      	mov	r1, r8
 804ecf6:	4630      	mov	r0, r6
 804ecf8:	f7f7 fa5a 	bl	80461b0 <HAL_UART_Receive_IT>
	if ((flags_ble.start == SET) && (flags_ble.connection == SET))
 804ecfc:	7823      	ldrb	r3, [r4, #0]
 804ecfe:	f003 0309 	and.w	r3, r3, #9
 804ed02:	2b09      	cmp	r3, #9
 804ed04:	d15d      	bne.n	804edc2 <main+0x1aa>
	if(communication_validation_flag)
 804ed06:	4d8f      	ldr	r5, [pc, #572]	; (804ef44 <main+0x32c>)
 804ed08:	782b      	ldrb	r3, [r5, #0]
 804ed0a:	b133      	cbz	r3, 804ed1a <main+0x102>
			 data_Validation();
 804ed0c:	f7f2 faaa 	bl	8041264 <data_Validation>
			 flag_resend = 1;
 804ed10:	4b8d      	ldr	r3, [pc, #564]	; (804ef48 <main+0x330>)
 804ed12:	2201      	movs	r2, #1
 804ed14:	701a      	strb	r2, [r3, #0]
			 communication_validation_flag = 0;
 804ed16:	2300      	movs	r3, #0
 804ed18:	702b      	strb	r3, [r5, #0]
	if(flags_ble.spare0 == SET){
 804ed1a:	f994 3000 	ldrsb.w	r3, [r4]
 804ed1e:	2b00      	cmp	r3, #0
 804ed20:	da29      	bge.n	804ed76 <main+0x15e>
		if (get_Earrings(&earrings_TAG)) {
 804ed22:	488a      	ldr	r0, [pc, #552]	; (804ef4c <main+0x334>)
 804ed24:	f7f2 fa56 	bl	80411d4 <get_Earrings>
 804ed28:	2800      	cmp	r0, #0
 804ed2a:	f000 8089 	beq.w	804ee40 <main+0x228>
			hex_to_ascii(aciis_tag, earrings_TAG.N_TAG, EARRING_SIZE);
 804ed2e:	220c      	movs	r2, #12
 804ed30:	4986      	ldr	r1, [pc, #536]	; (804ef4c <main+0x334>)
 804ed32:	4887      	ldr	r0, [pc, #540]	; (804ef50 <main+0x338>)
 804ed34:	f7ff ff56 	bl	804ebe4 <hex_to_ascii>
			memcpy(&send_Tag_ble[EARRING_START_BYTE-1], aciis_tag, EARRING_SIZE*2);
 804ed38:	4b85      	ldr	r3, [pc, #532]	; (804ef50 <main+0x338>)
 804ed3a:	4a86      	ldr	r2, [pc, #536]	; (804ef54 <main+0x33c>)
 804ed3c:	f103 0118 	add.w	r1, r3, #24
 804ed40:	f853 0b04 	ldr.w	r0, [r3], #4
 804ed44:	f842 0b04 	str.w	r0, [r2], #4
 804ed48:	428b      	cmp	r3, r1
 804ed4a:	d1f9      	bne.n	804ed40 <main+0x128>
			send_Tag_ble[30] = 0xA0;
 804ed4c:	4b82      	ldr	r3, [pc, #520]	; (804ef58 <main+0x340>)
 804ed4e:	22a0      	movs	r2, #160	; 0xa0
 804ed50:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
			send_Tag_ble[31] = 0xA0;
 804ed54:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
			send_Tag_ble[32] = 0xA0;
 804ed58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			send_Tag_ble[33] = 0xA0;
 804ed5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			send_Tag_ble[34] = 0x0D;
 804ed60:	220d      	movs	r2, #13
 804ed62:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
			flags_ble.tag = SET;
 804ed66:	7823      	ldrb	r3, [r4, #0]
 804ed68:	f043 0302 	orr.w	r3, r3, #2
			flags_ble.tag = RESET;
 804ed6c:	7023      	strb	r3, [r4, #0]
		flags_ble.spare0 = RESET;
 804ed6e:	7823      	ldrb	r3, [r4, #0]
 804ed70:	f36f 13c7 	bfc	r3, #7, #1
 804ed74:	7023      	strb	r3, [r4, #0]
	if(flags_ble.confirm == SET )
 804ed76:	7823      	ldrb	r3, [r4, #0]
 804ed78:	0758      	lsls	r0, r3, #29
 804ed7a:	d506      	bpl.n	804ed8a <main+0x172>
		number_earrings++;
 804ed7c:	4977      	ldr	r1, [pc, #476]	; (804ef5c <main+0x344>)
 804ed7e:	680a      	ldr	r2, [r1, #0]
		flags_ble.confirm = RESET;
 804ed80:	f36f 0382 	bfc	r3, #2, #1
		number_earrings++;
 804ed84:	3201      	adds	r2, #1
 804ed86:	600a      	str	r2, [r1, #0]
		flags_ble.confirm = RESET;
 804ed88:	7023      	strb	r3, [r4, #0]
			if (flags_ble.tag == SET) {
 804ed8a:	7823      	ldrb	r3, [r4, #0]
 804ed8c:	0799      	lsls	r1, r3, #30
 804ed8e:	d50b      	bpl.n	804eda8 <main+0x190>
				if (send_flag) {
 804ed90:	4d73      	ldr	r5, [pc, #460]	; (804ef60 <main+0x348>)
 804ed92:	782b      	ldrb	r3, [r5, #0]
 804ed94:	b143      	cbz	r3, 804eda8 <main+0x190>
					HAL_UART_Transmit(&huart1, (uint8_t*) send_Tag_ble, SIZE_EARRING_SEND, 1000);
 804ed96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 804ed9a:	2223      	movs	r2, #35	; 0x23
 804ed9c:	4971      	ldr	r1, [pc, #452]	; (804ef64 <main+0x34c>)
 804ed9e:	4630      	mov	r0, r6
 804eda0:	f7f7 f948 	bl	8046034 <HAL_UART_Transmit>
					send_flag = 0;
 804eda4:	2300      	movs	r3, #0
 804eda6:	702b      	strb	r3, [r5, #0]
		if(flags_ble.rfid_send_cmd == SET)
 804eda8:	7823      	ldrb	r3, [r4, #0]
 804edaa:	065a      	lsls	r2, r3, #25
 804edac:	d509      	bpl.n	804edc2 <main+0x1aa>
			flags_ble.rfid_send_cmd = RESET;
 804edae:	f36f 1386 	bfc	r3, #6, #1
			data_request_chafon(ANTENNA1);
 804edb2:	2080      	movs	r0, #128	; 0x80
			flags_ble.rfid_send_cmd = RESET;
 804edb4:	7023      	strb	r3, [r4, #0]
			data_request_chafon(ANTENNA1);
 804edb6:	f7f2 fa2f 	bl	8041218 <data_request_chafon>
			flags_ble.spare0 = SET;
 804edba:	7823      	ldrb	r3, [r4, #0]
 804edbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 804edc0:	7023      	strb	r3, [r4, #0]
	if (flag_send_timeout == SET)
 804edc2:	4b69      	ldr	r3, [pc, #420]	; (804ef68 <main+0x350>)
 804edc4:	4d69      	ldr	r5, [pc, #420]	; (804ef6c <main+0x354>)
 804edc6:	781a      	ldrb	r2, [r3, #0]
 804edc8:	2a01      	cmp	r2, #1
 804edca:	d130      	bne.n	804ee2e <main+0x216>
		flag_send_timeout = RESET;
 804edcc:	f04f 0a00 	mov.w	sl, #0
 804edd0:	f883 a000 	strb.w	sl, [r3]
		if (AppProcessRequest == LORA_SET)
 804edd4:	7f2b      	ldrb	r3, [r5, #28]
 804edd6:	2b01      	cmp	r3, #1
 804edd8:	d129      	bne.n	804ee2e <main+0x216>
			if(flag_send_to_lora > 0 ){
 804edda:	7f6b      	ldrb	r3, [r5, #29]
			AppProcessRequest = LORA_RESET;
 804eddc:	f885 a01c 	strb.w	sl, [r5, #28]
			if(flag_send_to_lora > 0 ){
 804ede0:	b32b      	cbz	r3, 804ee2e <main+0x216>
				flag_send_to_lora--;
 804ede2:	3b01      	subs	r3, #1
 804ede4:	776b      	strb	r3, [r5, #29]
	if (LORA_JoinStatus() != LORA_SET)
 804ede6:	f7fe fc4f 	bl	804d688 <LORA_JoinStatus>
 804edea:	2801      	cmp	r0, #1
 804edec:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 804efa8 <main+0x390>
 804edf0:	d02a      	beq.n	804ee48 <main+0x230>
		LORA_Join();
 804edf2:	f7fe fbc5 	bl	804d580 <LORA_Join>
	delayed_store_flag++; 	// Contagem de TAGs atrasadas ao envio
 804edf6:	f8d9 1000 	ldr.w	r1, [r9]
	PRINT_SD_CARD(PRINTF("===> Escrita no cartao. Count = %d\r\n", delayed_store_flag);)
 804edfa:	485d      	ldr	r0, [pc, #372]	; (804ef70 <main+0x358>)
		flag_lora_joined = RESET;
 804edfc:	f885 a01e 	strb.w	sl, [r5, #30]
	delayed_store_flag++; 	// Contagem de TAGs atrasadas ao envio
 804ee00:	3101      	adds	r1, #1
 804ee02:	f8c9 1000 	str.w	r1, [r9]
	PRINT_SD_CARD(PRINTF("===> Escrita no cartao. Count = %d\r\n", delayed_store_flag);)
 804ee06:	f7fe ffad 	bl	804dd64 <TraceSend>
	f_write(&SDFile, store_TAG[last_TAG].N_TAG, sizeof(store_TAG[last_TAG].N_TAG), (void *)&byteswritten);
 804ee0a:	4b5a      	ldr	r3, [pc, #360]	; (804ef74 <main+0x35c>)
 804ee0c:	485a      	ldr	r0, [pc, #360]	; (804ef78 <main+0x360>)
 804ee0e:	6819      	ldr	r1, [r3, #0]
 804ee10:	4b5a      	ldr	r3, [pc, #360]	; (804ef7c <main+0x364>)
 804ee12:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 804ee16:	fb0c 0101 	mla	r1, ip, r1, r0
 804ee1a:	2224      	movs	r2, #36	; 0x24
 804ee1c:	4858      	ldr	r0, [pc, #352]	; (804ef80 <main+0x368>)
 804ee1e:	f7f8 fcb0 	bl	8047782 <f_write>
	f_close(&SDFile);
 804ee22:	4857      	ldr	r0, [pc, #348]	; (804ef80 <main+0x368>)
 804ee24:	f7f8 fdcc 	bl	80479c0 <f_close>
				PRINTF("\n Envio pelo tempo configurado \n");
 804ee28:	4856      	ldr	r0, [pc, #344]	; (804ef84 <main+0x36c>)
 804ee2a:	f7fe ff9b 	bl	804dd64 <TraceSend>
    if (LoraMacProcessRequest == LORA_SET)
 804ee2e:	782b      	ldrb	r3, [r5, #0]
 804ee30:	2b01      	cmp	r3, #1
 804ee32:	f47f af38 	bne.w	804eca6 <main+0x8e>
      LoraMacProcessRequest = LORA_RESET;
 804ee36:	2300      	movs	r3, #0
 804ee38:	702b      	strb	r3, [r5, #0]
      LoRaMacProcess();
 804ee3a:	f7fa fd7b 	bl	8049934 <LoRaMacProcess>
 804ee3e:	e732      	b.n	804eca6 <main+0x8e>
			flags_ble.tag = RESET;
 804ee40:	7823      	ldrb	r3, [r4, #0]
 804ee42:	f360 0341 	bfi	r3, r0, #1, #1
 804ee46:	e791      	b.n	804ed6c <main+0x154>
	if (delayed_store_flag > 0){
 804ee48:	f8d9 3000 	ldr.w	r3, [r9]
 804ee4c:	2b00      	cmp	r3, #0
 804ee4e:	dd1c      	ble.n	804ee8a <main+0x272>
		delayed_store_flag--;
 804ee50:	3b01      	subs	r3, #1
 804ee52:	f8c9 3000 	str.w	r3, [r9]
	f_gets(buffer_tag, bytesread, &SDFile);
 804ee56:	4b4c      	ldr	r3, [pc, #304]	; (804ef88 <main+0x370>)
 804ee58:	4a49      	ldr	r2, [pc, #292]	; (804ef80 <main+0x368>)
 804ee5a:	6819      	ldr	r1, [r3, #0]
 804ee5c:	484b      	ldr	r0, [pc, #300]	; (804ef8c <main+0x374>)
 804ee5e:	f7f8 fdc0 	bl	80479e2 <f_gets>
	memcpy(tag_to_lora.N_TAG, buffer_tag, sizeof(buffer_tag));
 804ee62:	4b4a      	ldr	r3, [pc, #296]	; (804ef8c <main+0x374>)
 804ee64:	4a4a      	ldr	r2, [pc, #296]	; (804ef90 <main+0x378>)
 804ee66:	f103 0130 	add.w	r1, r3, #48	; 0x30
 804ee6a:	f853 0b04 	ldr.w	r0, [r3], #4
 804ee6e:	f842 0b04 	str.w	r0, [r2], #4
 804ee72:	428b      	cmp	r3, r1
 804ee74:	d1f9      	bne.n	804ee6a <main+0x252>
 804ee76:	881b      	ldrh	r3, [r3, #0]
 804ee78:	8013      	strh	r3, [r2, #0]
	delayed_store_flag--;
 804ee7a:	f8d9 1000 	ldr.w	r1, [r9]
	PRINT_SD_CARD(PRINTF("===> Removida do cartão. Count = %d\r\n", delayed_store_flag);)
 804ee7e:	4845      	ldr	r0, [pc, #276]	; (804ef94 <main+0x37c>)
	delayed_store_flag--;
 804ee80:	3901      	subs	r1, #1
 804ee82:	f8c9 1000 	str.w	r1, [r9]
	PRINT_SD_CARD(PRINTF("===> Removida do cartão. Count = %d\r\n", delayed_store_flag);)
 804ee86:	f7fe ff6d 	bl	804dd64 <TraceSend>
	flag_lora_joined = SET;
 804ee8a:	2301      	movs	r3, #1
	AppData.BuffSize = sizeof(Model_TAG);
 804ee8c:	4a32      	ldr	r2, [pc, #200]	; (804ef58 <main+0x340>)
	flag_lora_joined = SET;
 804ee8e:	77ab      	strb	r3, [r5, #30]
	AppData.BuffSize = sizeof(Model_TAG);
 804ee90:	f44f 730f 	mov.w	r3, #572	; 0x23c
 804ee94:	8093      	strh	r3, [r2, #4]
	if(pack_position > 0){
 804ee96:	7feb      	ldrb	r3, [r5, #31]
 804ee98:	6812      	ldr	r2, [r2, #0]
 804ee9a:	b1f3      	cbz	r3, 804eeda <main+0x2c2>
		memcpy(AppData.Buff, &pack_to_lora[--pack_position], sizeof(Model_TAG));
 804ee9c:	3b01      	subs	r3, #1
 804ee9e:	b2db      	uxtb	r3, r3
 804eea0:	493d      	ldr	r1, [pc, #244]	; (804ef98 <main+0x380>)
 804eea2:	77eb      	strb	r3, [r5, #31]
 804eea4:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 804eea8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 804eeac:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 804eeb0:	f853 0b04 	ldr.w	r0, [r3], #4
 804eeb4:	f842 0b04 	str.w	r0, [r2], #4
 804eeb8:	428b      	cmp	r3, r1
 804eeba:	d1f9      	bne.n	804eeb0 <main+0x298>
	PRINTF("\n Pack_position = %d \n\r", pack_position);
 804eebc:	7fe9      	ldrb	r1, [r5, #31]
 804eebe:	4837      	ldr	r0, [pc, #220]	; (804ef9c <main+0x384>)
 804eec0:	f7fe ff50 	bl	804dd64 <TraceSend>
	HAL_TIM_Base_Stop_IT(&htim2);
 804eec4:	4836      	ldr	r0, [pc, #216]	; (804efa0 <main+0x388>)
 804eec6:	f7f6 fdaa 	bl	8045a1e <HAL_TIM_Base_Stop_IT>
	LORA_send(&AppData, LORAWAN_DEFAULT_CONFIRM_MSG_STATE);
 804eeca:	2100      	movs	r1, #0
 804eecc:	4822      	ldr	r0, [pc, #136]	; (804ef58 <main+0x340>)
 804eece:	f7fe fbeb 	bl	804d6a8 <LORA_send>
	HAL_TIM_Base_Start_IT(&htim2);
 804eed2:	4833      	ldr	r0, [pc, #204]	; (804efa0 <main+0x388>)
 804eed4:	f7f6 fd93 	bl	80459fe <HAL_TIM_Base_Start_IT>
 804eed8:	e7a6      	b.n	804ee28 <main+0x210>
		char none_msg[] = "1111111111";
 804eeda:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 804efac <main+0x394>
 804eede:	f8dc 0000 	ldr.w	r0, [ip]
 804eee2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 804eee6:	f89c e00a 	ldrb.w	lr, [ip, #10]
		memcpy(AppData.Buff, &none_msg, sizeof(none_msg));
 804eeea:	f882 e00a 	strb.w	lr, [r2, #10]
		char none_msg[] = "1111111111";
 804eeee:	ab03      	add	r3, sp, #12
 804eef0:	c303      	stmia	r3!, {r0, r1}
 804eef2:	f8bc 1008 	ldrh.w	r1, [ip, #8]
 804eef6:	8019      	strh	r1, [r3, #0]
 804eef8:	f883 e002 	strb.w	lr, [r3, #2]
		memcpy(AppData.Buff, &none_msg, sizeof(none_msg));
 804eefc:	f10d 0c0c 	add.w	ip, sp, #12
 804ef00:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 804ef04:	881b      	ldrh	r3, [r3, #0]
 804ef06:	6010      	str	r0, [r2, #0]
 804ef08:	6051      	str	r1, [r2, #4]
 804ef0a:	8113      	strh	r3, [r2, #8]
 804ef0c:	e7d6      	b.n	804eebc <main+0x2a4>
 804ef0e:	bf00      	nop
 804ef10:	2000bc70 	.word	0x2000bc70
 804ef14:	2000bd69 	.word	0x2000bd69
 804ef18:	2000cda0 	.word	0x2000cda0
 804ef1c:	080529dd 	.word	0x080529dd
 804ef20:	080529f7 	.word	0x080529f7
 804ef24:	2000a098 	.word	0x2000a098
 804ef28:	2000bc74 	.word	0x2000bc74
 804ef2c:	08052a1a 	.word	0x08052a1a
 804ef30:	2000126c 	.word	0x2000126c
 804ef34:	0804eb69 	.word	0x0804eb69
 804ef38:	2000b6e0 	.word	0x2000b6e0
 804ef3c:	200071ac 	.word	0x200071ac
 804ef40:	40004400 	.word	0x40004400
 804ef44:	2000140e 	.word	0x2000140e
 804ef48:	200030a3 	.word	0x200030a3
 804ef4c:	2000df44 	.word	0x2000df44
 804ef50:	2000e30c 	.word	0x2000e30c
 804ef54:	2000129a 	.word	0x2000129a
 804ef58:	20001264 	.word	0x20001264
 804ef5c:	2000133c 	.word	0x2000133c
 804ef60:	20003031 	.word	0x20003031
 804ef64:	20001294 	.word	0x20001294
 804ef68:	2000a2b4 	.word	0x2000a2b4
 804ef6c:	2000b6dc 	.word	0x2000b6dc
 804ef70:	08052a3d 	.word	0x08052a3d
 804ef74:	2000107c 	.word	0x2000107c
 804ef78:	200071b0 	.word	0x200071b0
 804ef7c:	2000bc64 	.word	0x2000bc64
 804ef80:	2000bd70 	.word	0x2000bd70
 804ef84:	08052aa1 	.word	0x08052aa1
 804ef88:	2000bc6c 	.word	0x2000bc6c
 804ef8c:	2000e2da 	.word	0x2000e2da
 804ef90:	2000df08 	.word	0x2000df08
 804ef94:	08052a62 	.word	0x08052a62
 804ef98:	2000e082 	.word	0x2000e082
 804ef9c:	08052a89 	.word	0x08052a89
 804efa0:	2000de88 	.word	0x2000de88
 804efa4:	2000bc68 	.word	0x2000bc68
 804efa8:	200042c4 	.word	0x200042c4
 804efac:	08052ac2 	.word	0x08052ac2

0804efb0 <MX_SDIO_SD_Init>:
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 804efb0:	4b05      	ldr	r3, [pc, #20]	; (804efc8 <MX_SDIO_SD_Init+0x18>)
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 804efb2:	4906      	ldr	r1, [pc, #24]	; (804efcc <MX_SDIO_SD_Init+0x1c>)
 804efb4:	2200      	movs	r2, #0
 804efb6:	e9c3 1200 	strd	r1, r2, [r3]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 804efba:	e9c3 2202 	strd	r2, r2, [r3, #8]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 804efbe:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hsd.Init.ClockDiv = 5;
 804efc2:	2205      	movs	r2, #5
 804efc4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 804efc6:	4770      	bx	lr
 804efc8:	2000e3fc 	.word	0x2000e3fc
 804efcc:	40012c00 	.word	0x40012c00

0804efd0 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 804efd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804efd4:	4606      	mov	r6, r0
 804efd6:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804efd8:	2214      	movs	r2, #20
 804efda:	2100      	movs	r1, #0
 804efdc:	a803      	add	r0, sp, #12
 804efde:	f001 f8b5 	bl	805014c <memset>
  if(sdHandle->Instance==SDIO)
 804efe2:	6832      	ldr	r2, [r6, #0]
 804efe4:	4b4d      	ldr	r3, [pc, #308]	; (804f11c <HAL_SD_MspInit+0x14c>)
 804efe6:	429a      	cmp	r2, r3
 804efe8:	f040 8094 	bne.w	804f114 <HAL_SD_MspInit+0x144>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 804efec:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 804eff0:	2500      	movs	r5, #0
 804eff2:	9500      	str	r5, [sp, #0]
 804eff4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 804eff6:	484a      	ldr	r0, [pc, #296]	; (804f120 <HAL_SD_MspInit+0x150>)
    __HAL_RCC_SDIO_CLK_ENABLE();
 804eff8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 804effc:	645a      	str	r2, [r3, #68]	; 0x44
 804effe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 804f000:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 804f004:	9200      	str	r2, [sp, #0]
 804f006:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 804f008:	9501      	str	r5, [sp, #4]
 804f00a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804f00c:	f042 0204 	orr.w	r2, r2, #4
 804f010:	631a      	str	r2, [r3, #48]	; 0x30
 804f012:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804f014:	f002 0204 	and.w	r2, r2, #4
 804f018:	9201      	str	r2, [sp, #4]
 804f01a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 804f01c:	9502      	str	r5, [sp, #8]
 804f01e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804f020:	f042 0208 	orr.w	r2, r2, #8
 804f024:	631a      	str	r2, [r3, #48]	; 0x30
 804f026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804f028:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 804f02c:	240c      	movs	r4, #12
    __HAL_RCC_GPIOD_CLK_ENABLE();
 804f02e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804f030:	f04f 0a02 	mov.w	sl, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804f034:	f04f 0901 	mov.w	r9, #1
 804f038:	2703      	movs	r7, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 804f03a:	eb0d 0104 	add.w	r1, sp, r4
    __HAL_RCC_GPIOD_CLK_ENABLE();
 804f03e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 804f040:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804f042:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 804f046:	e9cd 3a03 	strd	r3, sl, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804f04a:	e9cd 9705 	strd	r9, r7, [sp, #20]

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 804f04e:	f04f 0804 	mov.w	r8, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 804f052:	f7f4 fe45 	bl	8043ce0 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 804f056:	eb0d 0104 	add.w	r1, sp, r4
 804f05a:	4832      	ldr	r0, [pc, #200]	; (804f124 <HAL_SD_MspInit+0x154>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 804f05c:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804f05e:	e9cd 8a03 	strd	r8, sl, [sp, #12]

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 804f062:	4c31      	ldr	r4, [pc, #196]	; (804f128 <HAL_SD_MspInit+0x158>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804f064:	e9cd 9705 	strd	r9, r7, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 804f068:	f7f4 fe3a 	bl	8043ce0 <HAL_GPIO_Init>
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 804f06c:	f8df e0c4 	ldr.w	lr, [pc, #196]	; 804f134 <HAL_SD_MspInit+0x164>
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 804f070:	62a7      	str	r7, [r4, #40]	; 0x28
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 804f072:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 804f076:	e9c4 e300 	strd	lr, r3, [r4]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 804f07a:	f44f 6980 	mov.w	r9, #1024	; 0x400
 804f07e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 804f082:	e9c4 9304 	strd	r9, r3, [r4, #16]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 804f086:	f44f 4a80 	mov.w	sl, #16384	; 0x4000
 804f08a:	2320      	movs	r3, #32
 804f08c:	e9c4 a306 	strd	sl, r3, [r4, #24]
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 804f090:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 804f094:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 804f098:	4620      	mov	r0, r4
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 804f09a:	e9c4 5502 	strd	r5, r5, [r4, #8]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 804f09e:	e9c4 5808 	strd	r5, r8, [r4, #32]
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 804f0a2:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 804f0a6:	f7f4 faaf 	bl	8043608 <HAL_DMA_Init>
 804f0aa:	b108      	cbz	r0, 804f0b0 <HAL_SD_MspInit+0xe0>
    {
      Error_Handler();
 804f0ac:	f7fe ff5e 	bl	804df6c <Error_Handler>

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 804f0b0:	4a1e      	ldr	r2, [pc, #120]	; (804f12c <HAL_SD_MspInit+0x15c>)
    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 804f0b2:	6434      	str	r4, [r6, #64]	; 0x40
 804f0b4:	63a6      	str	r6, [r4, #56]	; 0x38
    hdma_sdio_tx.Instance = DMA2_Stream6;
 804f0b6:	4c1e      	ldr	r4, [pc, #120]	; (804f130 <HAL_SD_MspInit+0x160>)
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 804f0b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 804f0bc:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 804f0c0:	2140      	movs	r1, #64	; 0x40
 804f0c2:	2300      	movs	r3, #0
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 804f0c4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 804f0c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 804f0cc:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 804f0d0:	6223      	str	r3, [r4, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 804f0d2:	2704      	movs	r7, #4
 804f0d4:	2303      	movs	r3, #3
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 804f0d6:	e9c4 0204 	strd	r0, r2, [r4, #16]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 804f0da:	f44f 4580 	mov.w	r5, #16384	; 0x4000
 804f0de:	2220      	movs	r2, #32
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 804f0e0:	e9c4 7309 	strd	r7, r3, [r4, #36]	; 0x24
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 804f0e4:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 804f0e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 804f0ec:	4620      	mov	r0, r4
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 804f0ee:	e9c4 5206 	strd	r5, r2, [r4, #24]
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 804f0f2:	e9c4 c30b 	strd	ip, r3, [r4, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 804f0f6:	f7f4 fa87 	bl	8043608 <HAL_DMA_Init>
 804f0fa:	b108      	cbz	r0, 804f100 <HAL_SD_MspInit+0x130>
    {
      Error_Handler();
 804f0fc:	f7fe ff36 	bl	804df6c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 804f100:	2200      	movs	r2, #0
 804f102:	2031      	movs	r0, #49	; 0x31
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 804f104:	63f4      	str	r4, [r6, #60]	; 0x3c
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 804f106:	4611      	mov	r1, r2
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 804f108:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 804f10a:	f7f4 f9ef 	bl	80434ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 804f10e:	2031      	movs	r0, #49	; 0x31
 804f110:	f7f4 fa20 	bl	8043554 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 804f114:	b008      	add	sp, #32
 804f116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804f11a:	bf00      	nop
 804f11c:	40012c00 	.word	0x40012c00
 804f120:	40020800 	.word	0x40020800
 804f124:	40020c00 	.word	0x40020c00
 804f128:	2000e33c 	.word	0x2000e33c
 804f12c:	400264a0 	.word	0x400264a0
 804f130:	2000e39c 	.word	0x2000e39c
 804f134:	40026458 	.word	0x40026458

0804f138 <SFU_APP_InstallAtNextReset>:
  *         This function is used by the User Application to request a Firmware installation (at next reboot).
  * @param  fw_header FW header of the FW to be installed
  * @retval HAL_OK if successful, otherwise HAL_ERROR
  */
HAL_StatusTypeDef SFU_APP_InstallAtNextReset(uint8_t *fw_header)
{
 804f138:	b513      	push	{r0, r1, r4, lr}
#if  !defined(SFU_NO_SWAP)
  if (fw_header == NULL)
 804f13a:	4604      	mov	r4, r0
 804f13c:	b910      	cbnz	r0, 804f144 <SFU_APP_InstallAtNextReset+0xc>
  {
    return HAL_ERROR;
 804f13e:	2001      	movs	r0, #1
  }
  return HAL_OK;
#else
  return HAL_OK;                   /* Nothing to do */
#endif /* !SFU_NO_SWAP */
}
 804f140:	b002      	add	sp, #8
 804f142:	bd10      	pop	{r4, pc}
  ret = FLASH_If_Erase_Size((void *) SlotStartAdd[SLOT_SWAP], SFU_IMG_IMAGE_OFFSET);
 804f144:	4b09      	ldr	r3, [pc, #36]	; (804f16c <SFU_APP_InstallAtNextReset+0x34>)
 804f146:	69db      	ldr	r3, [r3, #28]
 804f148:	9301      	str	r3, [sp, #4]
 804f14a:	f44f 7100 	mov.w	r1, #512	; 0x200
 804f14e:	4618      	mov	r0, r3
 804f150:	f7fe ff80 	bl	804e054 <FLASH_If_Erase_Size>
  if (ret == HAL_OK)
 804f154:	2800      	cmp	r0, #0
 804f156:	d1f2      	bne.n	804f13e <SFU_APP_InstallAtNextReset+0x6>
    ret = FLASH_If_Write((void *)SlotStartAdd[SLOT_SWAP], pfw_header, SE_FW_HEADER_TOT_LEN);
 804f158:	f44f 72a0 	mov.w	r2, #320	; 0x140
 804f15c:	4621      	mov	r1, r4
 804f15e:	9801      	ldr	r0, [sp, #4]
 804f160:	f7fe ffa8 	bl	804e0b4 <FLASH_If_Write>
    return HAL_ERROR;
 804f164:	3000      	adds	r0, #0
 804f166:	bf18      	it	ne
 804f168:	2001      	movne	r0, #1
 804f16a:	e7e9      	b.n	804f140 <SFU_APP_InstallAtNextReset+0x8>
 804f16c:	08051dd0 	.word	0x08051dd0

0804f170 <SFU_APP_GetDownloadAreaInfo>:
  * @retval HAL_OK if successful, otherwise HAL_ERROR
  */

void SFU_APP_GetDownloadAreaInfo(uint32_t DwlSlot, SFU_FwImageFlashTypeDef *pArea)
{
  pArea->DownloadAddr = SlotStartAdd[DwlSlot];
 804f170:	4b06      	ldr	r3, [pc, #24]	; (804f18c <SFU_APP_GetDownloadAreaInfo+0x1c>)
 804f172:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
  pArea->MaxSizeInBytes = (uint32_t)SLOT_SIZE(DwlSlot);
 804f176:	4b06      	ldr	r3, [pc, #24]	; (804f190 <SFU_APP_GetDownloadAreaInfo+0x20>)
  pArea->DownloadAddr = SlotStartAdd[DwlSlot];
 804f178:	604a      	str	r2, [r1, #4]
  pArea->MaxSizeInBytes = (uint32_t)SLOT_SIZE(DwlSlot);
 804f17a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 804f17e:	3301      	adds	r3, #1
 804f180:	1a9b      	subs	r3, r3, r2
 804f182:	600b      	str	r3, [r1, #0]
  pArea->ImageOffsetInBytes = SFU_IMG_IMAGE_OFFSET;
 804f184:	f44f 7300 	mov.w	r3, #512	; 0x200
 804f188:	608b      	str	r3, [r1, #8]
}
 804f18a:	4770      	bx	lr
 804f18c:	08051dd0 	.word	0x08051dd0
 804f190:	08051df0 	.word	0x08051df0

0804f194 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 804f194:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804f196:	2214      	movs	r2, #20
{
 804f198:	b08a      	sub	sp, #40	; 0x28
 804f19a:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804f19c:	2100      	movs	r1, #0
 804f19e:	eb0d 0002 	add.w	r0, sp, r2
 804f1a2:	f000 ffd3 	bl	805014c <memset>
  if(hadc->Instance==ADC1)
 804f1a6:	6823      	ldr	r3, [r4, #0]
 804f1a8:	4a1e      	ldr	r2, [pc, #120]	; (804f224 <HAL_ADC_MspInit+0x90>)
 804f1aa:	4293      	cmp	r3, r2
 804f1ac:	d11f      	bne.n	804f1ee <HAL_ADC_MspInit+0x5a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 804f1ae:	4b1e      	ldr	r3, [pc, #120]	; (804f228 <HAL_ADC_MspInit+0x94>)
 804f1b0:	2100      	movs	r1, #0
 804f1b2:	9101      	str	r1, [sp, #4]
 804f1b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 804f1b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 804f1ba:	645a      	str	r2, [r3, #68]	; 0x44
 804f1bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 804f1be:	f402 7280 	and.w	r2, r2, #256	; 0x100
 804f1c2:	9201      	str	r2, [sp, #4]
 804f1c4:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 804f1c6:	9102      	str	r1, [sp, #8]
 804f1c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804f1ca:	f042 0201 	orr.w	r2, r2, #1
 804f1ce:	631a      	str	r2, [r3, #48]	; 0x30
 804f1d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804f1d2:	f003 0301 	and.w	r3, r3, #1
 804f1d6:	9302      	str	r3, [sp, #8]
 804f1d8:	9b02      	ldr	r3, [sp, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 804f1da:	2301      	movs	r3, #1

    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**ADC2 GPIO Configuration
    PA7     ------> ADC2_IN7		// MIK
    */
	GPIO_InitStruct.Pin = BIRUTA_Pin;
 804f1dc:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(BIRUTA_GPIO_Port, &GPIO_InitStruct);
 804f1de:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 804f1e0:	2303      	movs	r3, #3
	HAL_GPIO_Init(BIRUTA_GPIO_Port, &GPIO_InitStruct);
 804f1e2:	4812      	ldr	r0, [pc, #72]	; (804f22c <HAL_ADC_MspInit+0x98>)
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 804f1e4:	9306      	str	r3, [sp, #24]
	HAL_GPIO_Init(BIRUTA_GPIO_Port, &GPIO_InitStruct);
 804f1e6:	f7f4 fd7b 	bl	8043ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 804f1ea:	b00a      	add	sp, #40	; 0x28
 804f1ec:	bd10      	pop	{r4, pc}
  else if(hadc->Instance==ADC2)
 804f1ee:	4a10      	ldr	r2, [pc, #64]	; (804f230 <HAL_ADC_MspInit+0x9c>)
 804f1f0:	4293      	cmp	r3, r2
 804f1f2:	d1fa      	bne.n	804f1ea <HAL_ADC_MspInit+0x56>
    __HAL_RCC_ADC2_CLK_ENABLE();
 804f1f4:	4b0c      	ldr	r3, [pc, #48]	; (804f228 <HAL_ADC_MspInit+0x94>)
 804f1f6:	2100      	movs	r1, #0
 804f1f8:	9103      	str	r1, [sp, #12]
 804f1fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 804f1fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 804f200:	645a      	str	r2, [r3, #68]	; 0x44
 804f202:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 804f204:	f402 7200 	and.w	r2, r2, #512	; 0x200
 804f208:	9203      	str	r2, [sp, #12]
 804f20a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 804f20c:	9104      	str	r1, [sp, #16]
 804f20e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804f210:	f042 0201 	orr.w	r2, r2, #1
 804f214:	631a      	str	r2, [r3, #48]	; 0x30
 804f216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804f218:	f003 0301 	and.w	r3, r3, #1
 804f21c:	9304      	str	r3, [sp, #16]
 804f21e:	9b04      	ldr	r3, [sp, #16]
	GPIO_InitStruct.Pin = BIRUTA_Pin;
 804f220:	2380      	movs	r3, #128	; 0x80
 804f222:	e7db      	b.n	804f1dc <HAL_ADC_MspInit+0x48>
 804f224:	40012000 	.word	0x40012000
 804f228:	40023800 	.word	0x40023800
 804f22c:	40020000 	.word	0x40020000
 804f230:	40012100 	.word	0x40012100

0804f234 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 804f234:	b5f0      	push	{r4, r5, r6, r7, lr}
 804f236:	4604      	mov	r4, r0
 804f238:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804f23a:	2214      	movs	r2, #20
 804f23c:	2100      	movs	r1, #0
 804f23e:	a803      	add	r0, sp, #12
 804f240:	f000 ff84 	bl	805014c <memset>
  if(hspi->Instance==SPI2)
 804f244:	6822      	ldr	r2, [r4, #0]
 804f246:	4b1f      	ldr	r3, [pc, #124]	; (804f2c4 <HAL_SPI_MspInit+0x90>)
 804f248:	429a      	cmp	r2, r3
 804f24a:	d138      	bne.n	804f2be <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 804f24c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 804f250:	2400      	movs	r4, #0
 804f252:	9400      	str	r4, [sp, #0]
 804f254:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = LORA_MISO_Pin|LORA_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 804f256:	481c      	ldr	r0, [pc, #112]	; (804f2c8 <HAL_SPI_MspInit+0x94>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 804f258:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 804f25c:	641a      	str	r2, [r3, #64]	; 0x40
 804f25e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804f260:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 804f264:	9200      	str	r2, [sp, #0]
 804f266:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 804f268:	9401      	str	r4, [sp, #4]
 804f26a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804f26c:	f042 0204 	orr.w	r2, r2, #4
 804f270:	631a      	str	r2, [r3, #48]	; 0x30
 804f272:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804f274:	f002 0204 	and.w	r2, r2, #4
 804f278:	9201      	str	r2, [sp, #4]
 804f27a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 804f27c:	9402      	str	r4, [sp, #8]
 804f27e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804f280:	f042 0202 	orr.w	r2, r2, #2
 804f284:	631a      	str	r2, [r3, #48]	; 0x30
 804f286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804f288:	f003 0302 	and.w	r3, r3, #2
 804f28c:	9302      	str	r3, [sp, #8]
 804f28e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804f290:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 804f292:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804f296:	2702      	movs	r7, #2
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 804f298:	2603      	movs	r6, #3
 804f29a:	2505      	movs	r5, #5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804f29c:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 804f2a0:	e9cd 6506 	strd	r6, r5, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 804f2a4:	f7f4 fd1c 	bl	8043ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LORA_SCK_Pin;
 804f2a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(LORA_SCK_GPIO_Port, &GPIO_InitStruct);
 804f2ac:	a903      	add	r1, sp, #12
 804f2ae:	4807      	ldr	r0, [pc, #28]	; (804f2cc <HAL_SPI_MspInit+0x98>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 804f2b0:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804f2b2:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804f2b6:	e9cd 4605 	strd	r4, r6, [sp, #20]
    HAL_GPIO_Init(LORA_SCK_GPIO_Port, &GPIO_InitStruct);
 804f2ba:	f7f4 fd11 	bl	8043ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 804f2be:	b009      	add	sp, #36	; 0x24
 804f2c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 804f2c2:	bf00      	nop
 804f2c4:	40003800 	.word	0x40003800
 804f2c8:	40020800 	.word	0x40020800
 804f2cc:	40020400 	.word	0x40020400

0804f2d0 <HAL_InitTick>:
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Return function status */
  return HAL_OK;
}
 804f2d0:	2000      	movs	r0, #0
 804f2d2:	4770      	bx	lr

0804f2d4 <HAL_Delay>:
  * @brief This function provides delay (in ms)
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 804f2d4:	b082      	sub	sp, #8
 804f2d6:	9001      	str	r0, [sp, #4]
  HW_RTC_DelayMs(Delay);   /* based on RTC */
 804f2d8:	9801      	ldr	r0, [sp, #4]
}
 804f2da:	b002      	add	sp, #8
  HW_RTC_DelayMs(Delay);   /* based on RTC */
 804f2dc:	f7ff ba1c 	b.w	804e718 <HW_RTC_DelayMs>

0804f2e0 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 804f2e0:	b082      	sub	sp, #8
  /* Enable Power Clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 804f2e2:	2300      	movs	r3, #0
 804f2e4:	9301      	str	r3, [sp, #4]
 804f2e6:	4b06      	ldr	r3, [pc, #24]	; (804f300 <HAL_MspInit+0x20>)
 804f2e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804f2ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 804f2ee:	641a      	str	r2, [r3, #64]	; 0x40
 804f2f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804f2f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804f2f6:	9301      	str	r3, [sp, #4]
 804f2f8:	9b01      	ldr	r3, [sp, #4]

  HW_GpioInit();
}
 804f2fa:	b002      	add	sp, #8
  HW_GpioInit();
 804f2fc:	f000 b890 	b.w	804f420 <HW_GpioInit>
 804f300:	40023800 	.word	0x40023800

0804f304 <HAL_RTC_MspInit>:
  *        order to modify the RTC Clock source, as consequence RTC registers (including
  *        the backup registers) and RCC_CSR register are set to their reset values.
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
{
 804f304:	b500      	push	{lr}
 804f306:	b091      	sub	sp, #68	; 0x44
	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 804f308:	222c      	movs	r2, #44	; 0x2c
 804f30a:	2100      	movs	r1, #0
 804f30c:	a805      	add	r0, sp, #20
 804f30e:	f000 ff1d 	bl	805014c <memset>
	  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct = {0};
 804f312:	2210      	movs	r2, #16
 804f314:	2100      	movs	r1, #0
 804f316:	4668      	mov	r0, sp
 804f318:	f000 ff18 	bl	805014c <memset>

	  /*##-1- Configue the RTC clock soucre ######################################*/
	  /* -a- Enable LSE Oscillator */
	  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSI; //_LSE
 804f31c:	2308      	movs	r3, #8
 804f31e:	9304      	str	r3, [sp, #16]
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
	  RCC_OscInitStruct.LSIState = RCC_LSI_ON; //.LSEState = LSE_ON
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 804f320:	a804      	add	r0, sp, #16
	  RCC_OscInitStruct.LSIState = RCC_LSI_ON; //.LSEState = LSE_ON
 804f322:	2301      	movs	r3, #1
 804f324:	9309      	str	r3, [sp, #36]	; 0x24
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 804f326:	f7f4 fe61 	bl	8043fec <HAL_RCC_OscConfig>
 804f32a:	b108      	cbz	r0, 804f330 <HAL_RTC_MspInit+0x2c>
	  {
	    Error_Handler();
 804f32c:	f7fe fe1e 	bl	804df6c <Error_Handler>
	  }

	  /* -b- Select LSI as RTC clock source */
	  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 804f330:	2302      	movs	r3, #2
 804f332:	9300      	str	r3, [sp, #0]
	  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;//LSE
	  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 804f334:	4668      	mov	r0, sp
	  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;//LSE
 804f336:	f44f 7300 	mov.w	r3, #512	; 0x200
 804f33a:	9303      	str	r3, [sp, #12]
	  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 804f33c:	f7f5 f8e4 	bl	8044508 <HAL_RCCEx_PeriphCLKConfig>
 804f340:	b108      	cbz	r0, 804f346 <HAL_RTC_MspInit+0x42>
	  {
	    Error_Handler();
 804f342:	f7fe fe13 	bl	804df6c <Error_Handler>
	  }

	  /*##-2- Enable the RTC peripheral Clock ####################################*/
	  /* Enable RTC Clock */
	  __HAL_RCC_RTC_ENABLE();//RTCCLK
 804f346:	4b07      	ldr	r3, [pc, #28]	; (804f364 <HAL_RTC_MspInit+0x60>)
 804f348:	2201      	movs	r2, #1
 804f34a:	601a      	str	r2, [r3, #0]

	  /*##-3- Configure the NVIC for RTC Alarm ###################################*/
	  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0x0, 0);
 804f34c:	2200      	movs	r2, #0
 804f34e:	4611      	mov	r1, r2
 804f350:	2029      	movs	r0, #41	; 0x29
 804f352:	f7f4 f8cb 	bl	80434ec <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 804f356:	2029      	movs	r0, #41	; 0x29
 804f358:	f7f4 f8fc 	bl	8043554 <HAL_NVIC_EnableIRQ>
}
 804f35c:	b011      	add	sp, #68	; 0x44
 804f35e:	f85d fb04 	ldr.w	pc, [sp], #4
 804f362:	bf00      	nop
 804f364:	42470e3c 	.word	0x42470e3c

0804f368 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc: RTC handle
  * @retval None
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
  TimerIrqHandler();
 804f368:	f7fe bc36 	b.w	804dbd8 <TimerIrqHandler>

0804f36c <HAL_GPIO_EXTI_Callback>:
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	HW_GPIO_IrqHandler(GPIO_Pin);
 804f36c:	f7ff b850 	b.w	804e410 <HW_GPIO_IrqHandler>

0804f370 <MSP_GetIRQn>:
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval IRQ number
  */
IRQn_Type MSP_GetIRQn(uint16_t GPIO_Pin)
{
  switch (GPIO_Pin)
 804f370:	2810      	cmp	r0, #16
 804f372:	d020      	beq.n	804f3b6 <MSP_GetIRQn+0x46>
 804f374:	d80c      	bhi.n	804f390 <MSP_GetIRQn+0x20>
 804f376:	2802      	cmp	r0, #2
 804f378:	d019      	beq.n	804f3ae <MSP_GetIRQn+0x3e>
 804f37a:	d803      	bhi.n	804f384 <MSP_GetIRQn+0x14>
 804f37c:	2801      	cmp	r0, #1
 804f37e:	d01c      	beq.n	804f3ba <MSP_GetIRQn+0x4a>
    case GPIO_PIN_12:
    case GPIO_PIN_13:
    case GPIO_PIN_14:
    case GPIO_PIN_15:
    default:
      return EXTI15_10_IRQn;
 804f380:	2028      	movs	r0, #40	; 0x28
 804f382:	4770      	bx	lr
  switch (GPIO_Pin)
 804f384:	2804      	cmp	r0, #4
 804f386:	d014      	beq.n	804f3b2 <MSP_GetIRQn+0x42>
 804f388:	2808      	cmp	r0, #8
 804f38a:	d1f9      	bne.n	804f380 <MSP_GetIRQn+0x10>
      return EXTI3_IRQn;
 804f38c:	2009      	movs	r0, #9
 804f38e:	4770      	bx	lr
  switch (GPIO_Pin)
 804f390:	2880      	cmp	r0, #128	; 0x80
 804f392:	d004      	beq.n	804f39e <MSP_GetIRQn+0x2e>
 804f394:	d805      	bhi.n	804f3a2 <MSP_GetIRQn+0x32>
 804f396:	2820      	cmp	r0, #32
 804f398:	d001      	beq.n	804f39e <MSP_GetIRQn+0x2e>
 804f39a:	2840      	cmp	r0, #64	; 0x40
 804f39c:	d1f0      	bne.n	804f380 <MSP_GetIRQn+0x10>
      return EXTI9_5_IRQn;
 804f39e:	2017      	movs	r0, #23
 804f3a0:	4770      	bx	lr
  switch (GPIO_Pin)
 804f3a2:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 804f3a6:	d0fa      	beq.n	804f39e <MSP_GetIRQn+0x2e>
 804f3a8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 804f3ac:	e7f6      	b.n	804f39c <MSP_GetIRQn+0x2c>
      return EXTI1_IRQn;
 804f3ae:	2007      	movs	r0, #7
 804f3b0:	4770      	bx	lr
      return EXTI2_IRQn;
 804f3b2:	2008      	movs	r0, #8
 804f3b4:	4770      	bx	lr
      return EXTI4_IRQn;
 804f3b6:	200a      	movs	r0, #10
 804f3b8:	4770      	bx	lr
      return EXTI0_IRQn;
 804f3ba:	2006      	movs	r0, #6
  }
}
 804f3bc:	4770      	bx	lr
	...

0804f3c0 <HW_Init>:
  * @brief This function initializes the hardware
  * @param None
  * @retval None
  */
void HW_Init(void)
{
 804f3c0:	b510      	push	{r4, lr}
  if (McuInitialized == false)
 804f3c2:	4c12      	ldr	r4, [pc, #72]	; (804f40c <HW_Init+0x4c>)
 804f3c4:	7823      	ldrb	r3, [r4, #0]
 804f3c6:	bb03      	cbnz	r3, 804f40a <HW_Init+0x4a>
    NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x3000);
#endif

    //HW_AdcInit();

    Radio.IoInit();
 804f3c8:	4b11      	ldr	r3, [pc, #68]	; (804f410 <HW_Init+0x50>)
 804f3ca:	681b      	ldr	r3, [r3, #0]
 804f3cc:	4798      	blx	r3

    HW_SPI_Init();
 804f3ce:	f7ff fa91 	bl	804e8f4 <HW_SPI_Init>

    HW_RTC_Init();
 804f3d2:	f7ff f9c1 	bl	804e758 <HW_RTC_Init>

//    HW_I2C1_Init();

    TraceInit();
 804f3d6:	f7fe fcb3 	bl	804dd40 <TraceInit>

    //BSP_sensor_Init();

    Ble_Init_GPIO();
 804f3da:	f7f2 f885 	bl	80414e8 <Ble_Init_GPIO>
    //COM_Init();
    MX_USART1_UART_Init();
 804f3de:	f7f2 f84b 	bl	8041478 <MX_USART1_UART_Init>
    MX_USART2_UART_Init();
 804f3e2:	f7f2 f865 	bl	80414b0 <MX_USART2_UART_Init>
	MX_TIM3_Init();
 804f3e6:	f7ff fb0f 	bl	804ea08 <MX_TIM3_Init>
    MX_TIM2_Init();
 804f3ea:	f7ff fad9 	bl	804e9a0 <MX_TIM2_Init>

    MX_SDIO_SD_Init();
 804f3ee:	f7ff fddf 	bl	804efb0 <MX_SDIO_SD_Init>
    MX_FATFS_Init();
 804f3f2:	f7f3 fd4f 	bl	8042e94 <MX_FATFS_Init>

    // Inicialização da Base do timer
    HAL_TIM_Base_Start_IT(&htim3);
 804f3f6:	4807      	ldr	r0, [pc, #28]	; (804f414 <HW_Init+0x54>)
 804f3f8:	f7f6 fb01 	bl	80459fe <HAL_TIM_Base_Start_IT>
    //__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);		// Habilita receber interrupções da UART com Bluetooth
    //__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);		// Habilita receber interrupções da UART com RFID
    HAL_UART_Receive_IT(&huart1, rx_byte_uart1, 1);
 804f3fc:	2201      	movs	r2, #1
 804f3fe:	4906      	ldr	r1, [pc, #24]	; (804f418 <HW_Init+0x58>)
 804f400:	4806      	ldr	r0, [pc, #24]	; (804f41c <HW_Init+0x5c>)
 804f402:	f7f6 fed5 	bl	80461b0 <HAL_UART_Receive_IT>
   // HAL_UART_Receive_IT(&huart2, rx_byte_uart2, 1);
    McuInitialized = true;
 804f406:	2301      	movs	r3, #1
 804f408:	7023      	strb	r3, [r4, #0]
  }
}
 804f40a:	bd10      	pop	{r4, pc}
 804f40c:	2000b73a 	.word	0x2000b73a
 804f410:	08051928 	.word	0x08051928
 804f414:	2000de48 	.word	0x2000de48
 804f418:	2000bc68 	.word	0x2000bc68
 804f41c:	2000bc74 	.word	0x2000bc74

0804f420 <HW_GpioInit>:
  vcom_IoDeInit();
}


void HW_GpioInit(void)
{
 804f420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804f424:	b08c      	sub	sp, #48	; 0x30
	 GPIO_InitTypeDef GPIO_InitStruct = {0};

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 804f426:	4c59      	ldr	r4, [pc, #356]	; (804f58c <HW_GpioInit+0x16c>)
	  __HAL_RCC_GPIOA_CLK_ENABLE();
	  __HAL_RCC_GPIOB_CLK_ENABLE();
	  __HAL_RCC_GPIOD_CLK_ENABLE();

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 804f428:	4f59      	ldr	r7, [pc, #356]	; (804f590 <HW_GpioInit+0x170>)

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_RESET);
 804f42a:	f8df 8168 	ldr.w	r8, [pc, #360]	; 804f594 <HW_GpioInit+0x174>
	  /*Configure GPIO pin Output Level */
	  //HAL_GPIO_WritePin(GPIOB, LED_PLUVIOMETRO_Pin|LED_ANEMOMETRO_Pin, GPIO_PIN_RESET);

	  /*Configure GPIO pin : USER_BUTTON_Pin */
	  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 804f42e:	f8df 9168 	ldr.w	r9, [pc, #360]	; 804f598 <HW_GpioInit+0x178>
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 804f432:	2500      	movs	r5, #0
	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 804f434:	2214      	movs	r2, #20
 804f436:	2100      	movs	r1, #0
 804f438:	a807      	add	r0, sp, #28
 804f43a:	f000 fe87 	bl	805014c <memset>
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 804f43e:	9500      	str	r5, [sp, #0]
 804f440:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804f442:	f043 0310 	orr.w	r3, r3, #16
 804f446:	6323      	str	r3, [r4, #48]	; 0x30
 804f448:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804f44a:	f003 0310 	and.w	r3, r3, #16
 804f44e:	9300      	str	r3, [sp, #0]
 804f450:	9b00      	ldr	r3, [sp, #0]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 804f452:	9501      	str	r5, [sp, #4]
 804f454:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804f456:	f043 0304 	orr.w	r3, r3, #4
 804f45a:	6323      	str	r3, [r4, #48]	; 0x30
 804f45c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804f45e:	f003 0304 	and.w	r3, r3, #4
 804f462:	9301      	str	r3, [sp, #4]
 804f464:	9b01      	ldr	r3, [sp, #4]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 804f466:	9502      	str	r5, [sp, #8]
 804f468:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804f46a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 804f46e:	6323      	str	r3, [r4, #48]	; 0x30
 804f470:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804f472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804f476:	9302      	str	r3, [sp, #8]
 804f478:	9b02      	ldr	r3, [sp, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 804f47a:	9503      	str	r5, [sp, #12]
 804f47c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804f47e:	f043 0301 	orr.w	r3, r3, #1
 804f482:	6323      	str	r3, [r4, #48]	; 0x30
 804f484:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804f486:	f003 0301 	and.w	r3, r3, #1
 804f48a:	9303      	str	r3, [sp, #12]
 804f48c:	9b03      	ldr	r3, [sp, #12]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 804f48e:	9504      	str	r5, [sp, #16]
 804f490:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804f492:	f043 0302 	orr.w	r3, r3, #2
 804f496:	6323      	str	r3, [r4, #48]	; 0x30
 804f498:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804f49a:	f003 0302 	and.w	r3, r3, #2
 804f49e:	9304      	str	r3, [sp, #16]
 804f4a0:	9b04      	ldr	r3, [sp, #16]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 804f4a2:	9505      	str	r5, [sp, #20]
 804f4a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804f4a6:	f043 0308 	orr.w	r3, r3, #8
 804f4aa:	6323      	str	r3, [r4, #48]	; 0x30
 804f4ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804f4ae:	f003 0308 	and.w	r3, r3, #8
 804f4b2:	9305      	str	r3, [sp, #20]
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 804f4b4:	462a      	mov	r2, r5
 804f4b6:	4638      	mov	r0, r7
 804f4b8:	2140      	movs	r1, #64	; 0x40
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 804f4ba:	9b05      	ldr	r3, [sp, #20]
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 804f4bc:	f7f4 fd84 	bl	8043fc8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_RESET);
 804f4c0:	462a      	mov	r2, r5
 804f4c2:	4640      	mov	r0, r8
 804f4c4:	2101      	movs	r1, #1
 804f4c6:	f7f4 fd7f 	bl	8043fc8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(MEM_WP_GPIO_Port, MEM_WP_Pin, GPIO_PIN_SET);
 804f4ca:	2201      	movs	r2, #1
 804f4cc:	4640      	mov	r0, r8
 804f4ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 804f4d2:	f7f4 fd79 	bl	8043fc8 <HAL_GPIO_WritePin>
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 804f4d6:	2601      	movs	r6, #1
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 804f4d8:	2308      	movs	r3, #8
	  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 804f4da:	a907      	add	r1, sp, #28
 804f4dc:	4638      	mov	r0, r7
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 804f4de:	e9cd 3907 	strd	r3, r9, [sp, #28]
//	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
//	  GPIO_InitStruct.Pull = GPIO_NOPULL;
//	  HAL_GPIO_Init(LORA_DIO5_GPIO_Port, &GPIO_InitStruct);

	  /*Configure GPIO pin : PtPin */
      GPIO_InitStruct.Pin = ANEMOMETRO_Pin;
 804f4e2:	f44f 4a80 	mov.w	sl, #16384	; 0x4000
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 804f4e6:	9609      	str	r6, [sp, #36]	; 0x24
	  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 804f4e8:	f7f4 fbfa 	bl	8043ce0 <HAL_GPIO_Init>
      GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
      GPIO_InitStruct.Pull = GPIO_PULLUP;
      HAL_GPIO_Init(ANEMOMETRO_GPIO_Port, &GPIO_InitStruct);
 804f4ec:	a907      	add	r1, sp, #28
 804f4ee:	4638      	mov	r0, r7
      GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 804f4f0:	e9cd a907 	strd	sl, r9, [sp, #28]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 804f4f4:	9609      	str	r6, [sp, #36]	; 0x24
      HAL_GPIO_Init(ANEMOMETRO_GPIO_Port, &GPIO_InitStruct);
 804f4f6:	f7f4 fbf3 	bl	8043ce0 <HAL_GPIO_Init>

      /*Configure GPIO pin : PtPin */
      GPIO_InitStruct.Pin = PLUVIOMETRO_Pin;
 804f4fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
      GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 804f4fe:	e9cd 3907 	strd	r3, r9, [sp, #28]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
      HAL_GPIO_Init(PLUVIOMETRO_GPIO_Port, &GPIO_InitStruct);
 804f502:	a907      	add	r1, sp, #28
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 804f504:	2302      	movs	r3, #2
      HAL_GPIO_Init(PLUVIOMETRO_GPIO_Port, &GPIO_InitStruct);
 804f506:	4638      	mov	r0, r7
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 804f508:	9309      	str	r3, [sp, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 804f50a:	f5a7 6700 	sub.w	r7, r7, #2048	; 0x800
      HAL_GPIO_Init(PLUVIOMETRO_GPIO_Port, &GPIO_InitStruct);
 804f50e:	f7f4 fbe7 	bl	8043ce0 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = LORA_RESET_Pin|MEM_WP_Pin;
 804f512:	f240 1301 	movw	r3, #257	; 0x101
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 804f516:	a907      	add	r1, sp, #28
 804f518:	4640      	mov	r0, r8
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 804f51a:	e9cd 3607 	strd	r3, r6, [sp, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804f51e:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 804f522:	f7f4 fbdd 	bl	8043ce0 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 804f526:	4632      	mov	r2, r6
 804f528:	4651      	mov	r1, sl
 804f52a:	4638      	mov	r0, r7
 804f52c:	f7f4 fd4c 	bl	8043fc8 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : PtPin */
	  GPIO_InitStruct.Pin = SD_DET_CARD_Pin;
 804f530:	2380      	movs	r3, #128	; 0x80
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
	  HAL_GPIO_Init(SD_DET_CARD_GPIO_Port, &GPIO_InitStruct);
 804f532:	a907      	add	r1, sp, #28
 804f534:	4638      	mov	r0, r7
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 804f536:	e9cd 3507 	strd	r3, r5, [sp, #28]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 804f53a:	9609      	str	r6, [sp, #36]	; 0x24
	  HAL_GPIO_Init(SD_DET_CARD_GPIO_Port, &GPIO_InitStruct);
 804f53c:	f7f4 fbd0 	bl	8043ce0 <HAL_GPIO_Init>

	  /* DMA controller clock enable */
	  __HAL_RCC_DMA2_CLK_ENABLE();
 804f540:	9506      	str	r5, [sp, #24]
 804f542:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804f544:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 804f548:	6323      	str	r3, [r4, #48]	; 0x30
 804f54a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804f54c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000

	  /* DMA interrupt init */
	  /* DMA2_Stream3_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 804f550:	462a      	mov	r2, r5
 804f552:	4629      	mov	r1, r5
	  __HAL_RCC_DMA2_CLK_ENABLE();
 804f554:	9306      	str	r3, [sp, #24]
	  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 804f556:	203b      	movs	r0, #59	; 0x3b
	  __HAL_RCC_DMA2_CLK_ENABLE();
 804f558:	9b06      	ldr	r3, [sp, #24]
	  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 804f55a:	f7f3 ffc7 	bl	80434ec <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 804f55e:	203b      	movs	r0, #59	; 0x3b
 804f560:	f7f3 fff8 	bl	8043554 <HAL_NVIC_EnableIRQ>
	  /* DMA2_Stream6_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 804f564:	462a      	mov	r2, r5
 804f566:	4629      	mov	r1, r5
 804f568:	2045      	movs	r0, #69	; 0x45
 804f56a:	f7f3 ffbf 	bl	80434ec <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 804f56e:	2045      	movs	r0, #69	; 0x45
 804f570:	f7f3 fff0 	bl	8043554 <HAL_NVIC_EnableIRQ>


	  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 804f574:	462a      	mov	r2, r5
 804f576:	4629      	mov	r1, r5
 804f578:	2028      	movs	r0, #40	; 0x28
 804f57a:	f7f3 ffb7 	bl	80434ec <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 804f57e:	2028      	movs	r0, #40	; 0x28
 804f580:	f7f3 ffe8 	bl	8043554 <HAL_NVIC_EnableIRQ>

}
 804f584:	b00c      	add	sp, #48	; 0x30
 804f586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804f58a:	bf00      	nop
 804f58c:	40023800 	.word	0x40023800
 804f590:	40021000 	.word	0x40021000
 804f594:	40020400 	.word	0x40020400
 804f598:	10110000 	.word	0x10110000

0804f59c <SystemClock_Config>:
  * @retval None
  */



void SystemClock_Config(void) {
 804f59c:	b510      	push	{r4, lr}
 804f59e:	b098      	sub	sp, #96	; 0x60
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 804f5a0:	2210      	movs	r2, #16
 804f5a2:	2100      	movs	r1, #0
 804f5a4:	a80e      	add	r0, sp, #56	; 0x38
 804f5a6:	f000 fdd1 	bl	805014c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 804f5aa:	2214      	movs	r2, #20
 804f5ac:	2100      	movs	r1, #0
 804f5ae:	a807      	add	r0, sp, #28
 804f5b0:	f000 fdcc 	bl	805014c <memset>
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 804f5b4:	2210      	movs	r2, #16
 804f5b6:	2100      	movs	r1, #0
 804f5b8:	a803      	add	r0, sp, #12
 804f5ba:	f000 fdc7 	bl	805014c <memset>

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 804f5be:	4b26      	ldr	r3, [pc, #152]	; (804f658 <SystemClock_Config+0xbc>)
 804f5c0:	2100      	movs	r1, #0
 804f5c2:	9101      	str	r1, [sp, #4]
 804f5c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804f5c6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 804f5ca:	641a      	str	r2, [r3, #64]	; 0x40
 804f5cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804f5ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804f5d2:	9301      	str	r3, [sp, #4]
 804f5d4:	9b01      	ldr	r3, [sp, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 804f5d6:	4b21      	ldr	r3, [pc, #132]	; (804f65c <SystemClock_Config+0xc0>)
 804f5d8:	9102      	str	r1, [sp, #8]
 804f5da:	681a      	ldr	r2, [r3, #0]
 804f5dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 804f5e0:	601a      	str	r2, [r3, #0]
 804f5e2:	681b      	ldr	r3, [r3, #0]
 804f5e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 804f5e8:	9302      	str	r3, [sp, #8]
    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 804f5ea:	2001      	movs	r0, #1
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 804f5ec:	9b02      	ldr	r3, [sp, #8]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 804f5ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 804f5f2:	e9cd 030c 	strd	r0, r3, [sp, #48]	; 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 804f5f6:	2402      	movs	r4, #2
 804f5f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 804f5fc:	e9cd 4312 	strd	r4, r3, [sp, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLM = 4;
    RCC_OscInitStruct.PLL.PLLN = 168;
 804f600:	f04f 0c04 	mov.w	ip, #4
 804f604:	23a8      	movs	r3, #168	; 0xa8
 804f606:	e9cd c314 	strd	ip, r3, [sp, #80]	; 0x50
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
    RCC_OscInitStruct.PLL.PLLQ = 7;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 804f60a:	a80c      	add	r0, sp, #48	; 0x30
    RCC_OscInitStruct.PLL.PLLQ = 7;
 804f60c:	2307      	movs	r3, #7
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 804f60e:	9416      	str	r4, [sp, #88]	; 0x58
    RCC_OscInitStruct.PLL.PLLQ = 7;
 804f610:	9317      	str	r3, [sp, #92]	; 0x5c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 804f612:	f7f4 fceb 	bl	8043fec <HAL_RCC_OscConfig>
 804f616:	b108      	cbz	r0, 804f61c <SystemClock_Config+0x80>
        Error_Handler();
 804f618:	f7fe fca8 	bl	804df6c <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 804f61c:	230f      	movs	r3, #15
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 804f61e:	2100      	movs	r1, #0
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 804f620:	e9cd 3407 	strd	r3, r4, [sp, #28]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 804f624:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 804f628:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 804f62c:	a807      	add	r0, sp, #28
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 804f62e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 804f632:	2105      	movs	r1, #5
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 804f634:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 804f636:	f7f4 fead 	bl	8044394 <HAL_RCC_ClockConfig>
 804f63a:	b108      	cbz	r0, 804f640 <SystemClock_Config+0xa4>
        Error_Handler();
 804f63c:	f7fe fc96 	bl	804df6c <Error_Handler>
    }
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 804f640:	2302      	movs	r3, #2
 804f642:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV8;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 804f644:	a803      	add	r0, sp, #12
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV8;
 804f646:	4b06      	ldr	r3, [pc, #24]	; (804f660 <SystemClock_Config+0xc4>)
 804f648:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 804f64a:	f7f4 ff5d 	bl	8044508 <HAL_RCCEx_PeriphCLKConfig>
 804f64e:	b108      	cbz	r0, 804f654 <SystemClock_Config+0xb8>
        Error_Handler();
 804f650:	f7fe fc8c 	bl	804df6c <Error_Handler>
    }
}
 804f654:	b018      	add	sp, #96	; 0x60
 804f656:	bd10      	pop	{r4, pc}
 804f658:	40023800 	.word	0x40023800
 804f65c:	40007000 	.word	0x40007000
 804f660:	00080300 	.word	0x00080300

0804f664 <HW_GetRandomSeed>:
  * @param None
  * @retval see
  */
uint32_t HW_GetRandomSeed(void)
{
  return ((*(uint32_t *)ID1) ^ (*(uint32_t *)ID2) ^ (*(uint32_t *)ID3));
 804f664:	4a03      	ldr	r2, [pc, #12]	; (804f674 <HW_GetRandomSeed+0x10>)
 804f666:	4b04      	ldr	r3, [pc, #16]	; (804f678 <HW_GetRandomSeed+0x14>)
 804f668:	6810      	ldr	r0, [r2, #0]
 804f66a:	681b      	ldr	r3, [r3, #0]
 804f66c:	4043      	eors	r3, r0
 804f66e:	6850      	ldr	r0, [r2, #4]
}
 804f670:	4058      	eors	r0, r3
 804f672:	4770      	bx	lr
 804f674:	1fff7594 	.word	0x1fff7594
 804f678:	1fff7590 	.word	0x1fff7590

0804f67c <HW_GetUniqueId>:
  * @param unique ID
  * @retval none
  */
void HW_GetUniqueId(uint8_t *id)
{
  id[7] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3)) >> 24;
 804f67c:	4910      	ldr	r1, [pc, #64]	; (804f6c0 <HW_GetUniqueId+0x44>)
 804f67e:	4a11      	ldr	r2, [pc, #68]	; (804f6c4 <HW_GetUniqueId+0x48>)
 804f680:	680b      	ldr	r3, [r1, #0]
{
 804f682:	b510      	push	{r4, lr}
  id[7] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3)) >> 24;
 804f684:	6814      	ldr	r4, [r2, #0]
 804f686:	4423      	add	r3, r4
 804f688:	0e1b      	lsrs	r3, r3, #24
 804f68a:	71c3      	strb	r3, [r0, #7]
  id[6] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3)) >> 16;
 804f68c:	6814      	ldr	r4, [r2, #0]
 804f68e:	680b      	ldr	r3, [r1, #0]
 804f690:	4423      	add	r3, r4
 804f692:	0c1b      	lsrs	r3, r3, #16
 804f694:	7183      	strb	r3, [r0, #6]
  id[5] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3)) >> 8;
 804f696:	6814      	ldr	r4, [r2, #0]
 804f698:	680b      	ldr	r3, [r1, #0]
 804f69a:	4423      	add	r3, r4
 804f69c:	0a1b      	lsrs	r3, r3, #8
 804f69e:	7143      	strb	r3, [r0, #5]
  id[4] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3));
 804f6a0:	6812      	ldr	r2, [r2, #0]
 804f6a2:	680b      	ldr	r3, [r1, #0]
 804f6a4:	4413      	add	r3, r2
 804f6a6:	7103      	strb	r3, [r0, #4]
  id[3] = ((*(uint32_t *)ID2)) >> 24;
 804f6a8:	4b07      	ldr	r3, [pc, #28]	; (804f6c8 <HW_GetUniqueId+0x4c>)
 804f6aa:	78da      	ldrb	r2, [r3, #3]
 804f6ac:	70c2      	strb	r2, [r0, #3]
  id[2] = ((*(uint32_t *)ID2)) >> 16;
 804f6ae:	885a      	ldrh	r2, [r3, #2]
 804f6b0:	7082      	strb	r2, [r0, #2]
  id[1] = ((*(uint32_t *)ID2)) >> 8;
 804f6b2:	681a      	ldr	r2, [r3, #0]
 804f6b4:	0a12      	lsrs	r2, r2, #8
 804f6b6:	7042      	strb	r2, [r0, #1]
  id[0] = ((*(uint32_t *)ID2));
 804f6b8:	681b      	ldr	r3, [r3, #0]
 804f6ba:	7003      	strb	r3, [r0, #0]
}
 804f6bc:	bd10      	pop	{r4, pc}
 804f6be:	bf00      	nop
 804f6c0:	1fff7590 	.word	0x1fff7590
 804f6c4:	1fff7598 	.word	0x1fff7598
 804f6c8:	1fff7594 	.word	0x1fff7594

0804f6cc <HW_AdcInit>:
  * @brief This function initializes the ADC
  * @param none
  * @retval none
  */
void HW_AdcInit(void)
{
 804f6cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
//  ADC_MultiModeTypeDef multimode = {0};
  ADC_ChannelConfTypeDef sConfig = {0};
 804f6ce:	2210      	movs	r2, #16
 804f6d0:	2100      	movs	r1, #0
 804f6d2:	4668      	mov	r0, sp
 804f6d4:	f000 fd3a 	bl	805014c <memset>
  if (AdcInitialized == false)
 804f6d8:	4a14      	ldr	r2, [pc, #80]	; (804f72c <HW_AdcInit+0x60>)
 804f6da:	7853      	ldrb	r3, [r2, #1]
 804f6dc:	bb1b      	cbnz	r3, 804f726 <HW_AdcInit+0x5a>
  {
    AdcInitialized = true;
 804f6de:	2401      	movs	r4, #1

	///////////////////////////////////////////////////////////////////////////

	  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	  */
	  hadc2.Instance = ADC2;
 804f6e0:	4813      	ldr	r0, [pc, #76]	; (804f730 <HW_AdcInit+0x64>)
    AdcInitialized = true;
 804f6e2:	7054      	strb	r4, [r2, #1]
	  hadc2.Instance = ADC2;
 804f6e4:	4a13      	ldr	r2, [pc, #76]	; (804f734 <HW_AdcInit+0x68>)
	  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
	  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 804f6e6:	6083      	str	r3, [r0, #8]
	  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 804f6e8:	e9c0 2300 	strd	r2, r3, [r0]
	  hadc2.Init.ScanConvMode = DISABLE;
	  hadc2.Init.ContinuousConvMode = DISABLE;
	  hadc2.Init.DiscontinuousConvMode = DISABLE;
	  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
	  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 804f6ec:	4a12      	ldr	r2, [pc, #72]	; (804f738 <HW_AdcInit+0x6c>)
	  hadc2.Init.ScanConvMode = DISABLE;
 804f6ee:	6103      	str	r3, [r0, #16]
	  hadc2.Init.ContinuousConvMode = DISABLE;
 804f6f0:	7603      	strb	r3, [r0, #24]
	  hadc2.Init.DiscontinuousConvMode = DISABLE;
 804f6f2:	f880 3020 	strb.w	r3, [r0, #32]
	  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 804f6f6:	62c3      	str	r3, [r0, #44]	; 0x2c
	  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 804f6f8:	6282      	str	r2, [r0, #40]	; 0x28
	  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 804f6fa:	60c3      	str	r3, [r0, #12]
	  hadc2.Init.NbrOfConversion = 1;
 804f6fc:	61c4      	str	r4, [r0, #28]
	  hadc2.Init.DMAContinuousRequests = DISABLE;
 804f6fe:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
	  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 804f702:	6144      	str	r4, [r0, #20]
	  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 804f704:	f7f3 fce0 	bl	80430c8 <HAL_ADC_Init>
 804f708:	b108      	cbz	r0, 804f70e <HW_AdcInit+0x42>
	  {
	    Error_Handler();
 804f70a:	f7fe fc2f 	bl	804df6c <Error_Handler>
	  }
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_7;
 804f70e:	2307      	movs	r3, #7
	  sConfig.Rank = 1;
 804f710:	e9cd 3400 	strd	r3, r4, [sp]
	  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
	  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 804f714:	4669      	mov	r1, sp
	  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 804f716:	2300      	movs	r3, #0
	  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 804f718:	4805      	ldr	r0, [pc, #20]	; (804f730 <HW_AdcInit+0x64>)
	  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 804f71a:	9302      	str	r3, [sp, #8]
	  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 804f71c:	f7f3 fe44 	bl	80433a8 <HAL_ADC_ConfigChannel>
 804f720:	b108      	cbz	r0, 804f726 <HW_AdcInit+0x5a>
	  {
	    Error_Handler();
 804f722:	f7fe fc23 	bl	804df6c <Error_Handler>
	  }

  }
}
 804f726:	b004      	add	sp, #16
 804f728:	bd10      	pop	{r4, pc}
 804f72a:	bf00      	nop
 804f72c:	2000b73a 	.word	0x2000b73a
 804f730:	2000e480 	.word	0x2000e480
 804f734:	40012100 	.word	0x40012100
 804f738:	0f000001 	.word	0x0f000001

0804f73c <HW_AdcReadChannel>:
  * @brief This function De-initializes the ADC
  * @param Channel
  * @retval Value
  */
uint16_t HW_AdcReadChannel(uint32_t Channel)
{
 804f73c:	b530      	push	{r4, r5, lr}
 804f73e:	b087      	sub	sp, #28

  ADC_ChannelConfTypeDef adcConf = {0};
 804f740:	2210      	movs	r2, #16
 804f742:	2100      	movs	r1, #0
{
 804f744:	4605      	mov	r5, r0
  ADC_ChannelConfTypeDef adcConf = {0};
 804f746:	a802      	add	r0, sp, #8
 804f748:	f000 fd00 	bl	805014c <memset>

  uint16_t adcData = 0;

  HW_AdcInit();
 804f74c:	f7ff ffbe 	bl	804f6cc <HW_AdcInit>

  if (AdcInitialized == true)
 804f750:	4b17      	ldr	r3, [pc, #92]	; (804f7b0 <HW_AdcReadChannel+0x74>)
 804f752:	7858      	ldrb	r0, [r3, #1]
 804f754:	b350      	cbz	r0, 804f7ac <HW_AdcReadChannel+0x70>
  {

    ADCCLK_ENABLE();
 804f756:	4c17      	ldr	r4, [pc, #92]	; (804f7b4 <HW_AdcReadChannel+0x78>)
 804f758:	2300      	movs	r3, #0
 804f75a:	9301      	str	r3, [sp, #4]
 804f75c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 804f75e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 804f762:	6463      	str	r3, [r4, #68]	; 0x44
 804f764:	6c63      	ldr	r3, [r4, #68]	; 0x44
    /*calibrate ADC if any calibraiton hardware*/
    //HAL_ADCEx_Calibration_Start(&hadc, ADC_EOC_SINGLE_CONV);

    /* configure adc channel */
    adcConf.SamplingTime = ADC_SAMPLETIME_56CYCLES;
    adcConf.Channel = Channel;
 804f766:	9502      	str	r5, [sp, #8]
    ADCCLK_ENABLE();
 804f768:	f403 7380 	and.w	r3, r3, #256	; 0x100
    adcConf.Rank = 1;
    HAL_ADC_ConfigChannel(&hadc, &adcConf);
 804f76c:	4d12      	ldr	r5, [pc, #72]	; (804f7b8 <HW_AdcReadChannel+0x7c>)
    ADCCLK_ENABLE();
 804f76e:	9301      	str	r3, [sp, #4]
 804f770:	9b01      	ldr	r3, [sp, #4]
    adcConf.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 804f772:	2303      	movs	r3, #3
    HAL_ADC_ConfigChannel(&hadc, &adcConf);
 804f774:	a902      	add	r1, sp, #8
    adcConf.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 804f776:	9304      	str	r3, [sp, #16]
    HAL_ADC_ConfigChannel(&hadc, &adcConf);
 804f778:	4628      	mov	r0, r5
    adcConf.Rank = 1;
 804f77a:	2301      	movs	r3, #1
 804f77c:	9303      	str	r3, [sp, #12]
    HAL_ADC_ConfigChannel(&hadc, &adcConf);
 804f77e:	f7f3 fe13 	bl	80433a8 <HAL_ADC_ConfigChannel>

    /* Start the conversion process */
    HAL_ADC_Start(&hadc);
 804f782:	4628      	mov	r0, r5
 804f784:	f7f3 fd46 	bl	8043214 <HAL_ADC_Start>

    /* Wait for the end of conversion */
    HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 804f788:	f04f 31ff 	mov.w	r1, #4294967295
 804f78c:	4628      	mov	r0, r5
 804f78e:	f7f3 fdb7 	bl	8043300 <HAL_ADC_PollForConversion>

    /* Get the converted value of regular channel */
    adcData = HAL_ADC_GetValue(&hadc);
 804f792:	4628      	mov	r0, r5
 804f794:	f7f3 fe04 	bl	80433a0 <HAL_ADC_GetValue>
    __HAL_ADC_DISABLE(&hadc);
 804f798:	682a      	ldr	r2, [r5, #0]
 804f79a:	6893      	ldr	r3, [r2, #8]
 804f79c:	f023 0301 	bic.w	r3, r3, #1
 804f7a0:	6093      	str	r3, [r2, #8]
    //ADC_Disable(&hadc) ;

    ADCCLK_DISABLE();
 804f7a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 804f7a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    adcData = HAL_ADC_GetValue(&hadc);
 804f7a8:	b280      	uxth	r0, r0
    ADCCLK_DISABLE();
 804f7aa:	6463      	str	r3, [r4, #68]	; 0x44
  }
  return adcData;
}
 804f7ac:	b007      	add	sp, #28
 804f7ae:	bd30      	pop	{r4, r5, pc}
 804f7b0:	2000b73a 	.word	0x2000b73a
 804f7b4:	40023800 	.word	0x40023800
 804f7b8:	2000e4c8 	.word	0x2000e4c8

0804f7bc <HW_GetTemperatureLevel>:
{
 804f7bc:	b510      	push	{r4, lr}
  measuredLevel = HW_AdcReadChannel(ADC_CHANNEL_VREFINT);
 804f7be:	2011      	movs	r0, #17
 804f7c0:	f7ff ffbc 	bl	804f73c <HW_AdcReadChannel>
  if (measuredLevel == 0)
 804f7c4:	b1e8      	cbz	r0, 804f802 <HW_GetTemperatureLevel+0x46>
    batteryLevelmV = (((uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL)) / measuredLevel);
 804f7c6:	4b10      	ldr	r3, [pc, #64]	; (804f808 <HW_GetTemperatureLevel+0x4c>)
 804f7c8:	881b      	ldrh	r3, [r3, #0]
 804f7ca:	f640 34b8 	movw	r4, #3000	; 0xbb8
 804f7ce:	435c      	muls	r4, r3
 804f7d0:	fbb4 f4f0 	udiv	r4, r4, r0
  measuredLevel = HW_AdcReadChannel(ADC_CHANNEL_TEMPSENSOR);
 804f7d4:	2010      	movs	r0, #16
 804f7d6:	f7ff ffb1 	bl	804f73c <HW_AdcReadChannel>
  temperatureDegreeC = COMPUTE_TEMPERATURE(measuredLevel, batteryLevelmV);
 804f7da:	4b0c      	ldr	r3, [pc, #48]	; (804f80c <HW_GetTemperatureLevel+0x50>)
 804f7dc:	881a      	ldrh	r2, [r3, #0]
 804f7de:	3322      	adds	r3, #34	; 0x22
 804f7e0:	4360      	muls	r0, r4
 804f7e2:	881b      	ldrh	r3, [r3, #0]
 804f7e4:	f640 34b8 	movw	r4, #3000	; 0xbb8
 804f7e8:	fbb0 f0f4 	udiv	r0, r0, r4
 804f7ec:	2450      	movs	r4, #80	; 0x50
 804f7ee:	1a80      	subs	r0, r0, r2
 804f7f0:	4360      	muls	r0, r4
 804f7f2:	1a9b      	subs	r3, r3, r2
 804f7f4:	0200      	lsls	r0, r0, #8
 804f7f6:	fb90 f0f3 	sdiv	r0, r0, r3
 804f7fa:	f500 50f0 	add.w	r0, r0, #7680	; 0x1e00
}
 804f7fe:	b280      	uxth	r0, r0
 804f800:	bd10      	pop	{r4, pc}
    batteryLevelmV = 0;
 804f802:	4604      	mov	r4, r0
 804f804:	e7e6      	b.n	804f7d4 <HW_GetTemperatureLevel+0x18>
 804f806:	bf00      	nop
 804f808:	1fff75aa 	.word	0x1fff75aa
 804f80c:	1fff75a8 	.word	0x1fff75a8

0804f810 <HW_GetBatteryLevel>:
{
 804f810:	b508      	push	{r3, lr}
  measuredLevel = HW_AdcReadChannel(ADC_CHANNEL_VREFINT);
 804f812:	2011      	movs	r0, #17
 804f814:	f7ff ff92 	bl	804f73c <HW_AdcReadChannel>
  if (measuredLevel == 0)
 804f818:	b130      	cbz	r0, 804f828 <HW_GetBatteryLevel+0x18>
    batteryLevelmV = (((uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL)) / measuredLevel);
 804f81a:	4b04      	ldr	r3, [pc, #16]	; (804f82c <HW_GetBatteryLevel+0x1c>)
 804f81c:	881a      	ldrh	r2, [r3, #0]
 804f81e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 804f822:	4353      	muls	r3, r2
 804f824:	fbb3 f0f0 	udiv	r0, r3, r0
}
 804f828:	b280      	uxth	r0, r0
 804f82a:	bd08      	pop	{r3, pc}
 804f82c:	1fff75aa 	.word	0x1fff75aa

0804f830 <NMI_Handler>:
 * @param  None
 * @retval None
 */

void NMI_Handler(void) {
}
 804f830:	4770      	bx	lr

0804f832 <HardFault_Handler>:
 * @retval None
 */

void HardFault_Handler(void) {
	while (1) {
		__NOP();
 804f832:	bf00      	nop
 804f834:	e7fd      	b.n	804f832 <HardFault_Handler>

0804f836 <MemManage_Handler>:
/**
 * @brief  This function handles Memory Manage exception.
 * @param  None
 * @retval None
 */
void MemManage_Handler(void) {
 804f836:	e7fe      	b.n	804f836 <MemManage_Handler>

0804f838 <BusFault_Handler>:
/**
 * @brief  This function handles Bus Fault exception.
 * @param  None
 * @retval None
 */
void BusFault_Handler(void) {
 804f838:	e7fe      	b.n	804f838 <BusFault_Handler>

0804f83a <UsageFault_Handler>:
/**
 * @brief  This function handles Usage Fault exception.
 * @param  None
 * @retval None
 */
void UsageFault_Handler(void) {
 804f83a:	e7fe      	b.n	804f83a <UsageFault_Handler>

0804f83c <SVC_Handler>:
 804f83c:	4770      	bx	lr

0804f83e <DebugMon_Handler>:
 804f83e:	4770      	bx	lr

0804f840 <PendSV_Handler>:
 804f840:	4770      	bx	lr

0804f842 <SysTick_Handler>:
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void) {
	HAL_IncTick();
 804f842:	f7f3 bc2f 	b.w	80430a4 <HAL_IncTick>
	...

0804f848 <TIM2_IRQHandler>:
}

void TIM2_IRQHandler(void) {
	flags_ble.rfid_send_cmd = SET;
 804f848:	4a09      	ldr	r2, [pc, #36]	; (804f870 <TIM2_IRQHandler+0x28>)
	if ((count_send_flag++ > -1)  && (flag_resend == 1)){
		send_flag = 1;
		count_send_flag = 0;
	}

	HAL_TIM_IRQHandler(&htim2);
 804f84a:	480a      	ldr	r0, [pc, #40]	; (804f874 <TIM2_IRQHandler+0x2c>)
	flags_ble.rfid_send_cmd = SET;
 804f84c:	7813      	ldrb	r3, [r2, #0]
 804f84e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804f852:	7013      	strb	r3, [r2, #0]
	if ((count_send_flag++ > -1)  && (flag_resend == 1)){
 804f854:	4b08      	ldr	r3, [pc, #32]	; (804f878 <TIM2_IRQHandler+0x30>)
 804f856:	781a      	ldrb	r2, [r3, #0]
 804f858:	3201      	adds	r2, #1
 804f85a:	701a      	strb	r2, [r3, #0]
 804f85c:	4a07      	ldr	r2, [pc, #28]	; (804f87c <TIM2_IRQHandler+0x34>)
 804f85e:	7812      	ldrb	r2, [r2, #0]
 804f860:	2a01      	cmp	r2, #1
		send_flag = 1;
 804f862:	bf01      	itttt	eq
 804f864:	4906      	ldreq	r1, [pc, #24]	; (804f880 <TIM2_IRQHandler+0x38>)
 804f866:	700a      	strbeq	r2, [r1, #0]
		count_send_flag = 0;
 804f868:	2200      	moveq	r2, #0
 804f86a:	701a      	strbeq	r2, [r3, #0]
	HAL_TIM_IRQHandler(&htim2);
 804f86c:	f7f6 b8f1 	b.w	8045a52 <HAL_TIM_IRQHandler>
 804f870:	2000bc70 	.word	0x2000bc70
 804f874:	2000de88 	.word	0x2000de88
 804f878:	20003030 	.word	0x20003030
 804f87c:	200030a3 	.word	0x200030a3
 804f880:	20003031 	.word	0x20003031

0804f884 <TIM3_IRQHandler>:
}

/**
 * @brief This function handles TIM3 global interrupt.
 */
void TIM3_IRQHandler(void) {
 804f884:	b510      	push	{r4, lr}
	/*
	 * 	Timer dispara a cada 100 ms e se tiver 10 contagens, sinaliza que
	 * 	o pino de estado se manteve em alta e conexão foi bem sucedida.
	 */

	ble_state = 1; //HAL_GPIO_ReadPin(BLE_STATE_GPIO_Port,BLE_STATE_Pin);
 804f886:	4b16      	ldr	r3, [pc, #88]	; (804f8e0 <TIM3_IRQHandler+0x5c>)
 804f888:	4c16      	ldr	r4, [pc, #88]	; (804f8e4 <TIM3_IRQHandler+0x60>)
 804f88a:	2201      	movs	r2, #1
 804f88c:	701a      	strb	r2, [r3, #0]
	if (ble_state == 1) {
		if (++count_tim3 > 9) {
 804f88e:	4a16      	ldr	r2, [pc, #88]	; (804f8e8 <TIM3_IRQHandler+0x64>)
 804f890:	7813      	ldrb	r3, [r2, #0]
 804f892:	3301      	adds	r3, #1
 804f894:	b2db      	uxtb	r3, r3
 804f896:	2b09      	cmp	r3, #9
 804f898:	7013      	strb	r3, [r2, #0]
 804f89a:	d905      	bls.n	804f8a8 <TIM3_IRQHandler+0x24>
			flags_ble.connection = SET;
 804f89c:	7823      	ldrb	r3, [r4, #0]
 804f89e:	f043 0308 	orr.w	r3, r3, #8
 804f8a2:	7023      	strb	r3, [r4, #0]
			count_tim3 = 0;
 804f8a4:	2300      	movs	r3, #0
 804f8a6:	7013      	strb	r3, [r2, #0]
		flags_ble.connection = RESET;
		count_tim3 = 0;
	}

//	// Para as requisições de TAG pois a conexão foi quebrada
	if (flags_ble.connection == RESET) {
 804f8a8:	7823      	ldrb	r3, [r4, #0]
 804f8aa:	071a      	lsls	r2, r3, #28
 804f8ac:	d402      	bmi.n	804f8b4 <TIM3_IRQHandler+0x30>
		HAL_TIM_Base_Stop_IT(&htim2);
 804f8ae:	480f      	ldr	r0, [pc, #60]	; (804f8ec <TIM3_IRQHandler+0x68>)
 804f8b0:	f7f6 f8b5 	bl	8045a1e <HAL_TIM_Base_Stop_IT>
	}

	if (flags_ble.start == SET) {
 804f8b4:	7823      	ldrb	r3, [r4, #0]
 804f8b6:	07db      	lsls	r3, r3, #31
 804f8b8:	d50a      	bpl.n	804f8d0 <TIM3_IRQHandler+0x4c>
		if (count_send++ == 50) {
 804f8ba:	4b0d      	ldr	r3, [pc, #52]	; (804f8f0 <TIM3_IRQHandler+0x6c>)
 804f8bc:	681a      	ldr	r2, [r3, #0]
 804f8be:	1c51      	adds	r1, r2, #1
 804f8c0:	2a32      	cmp	r2, #50	; 0x32
 804f8c2:	6019      	str	r1, [r3, #0]
 804f8c4:	d104      	bne.n	804f8d0 <TIM3_IRQHandler+0x4c>
			flag_send_timeout = SET;
 804f8c6:	4a0b      	ldr	r2, [pc, #44]	; (804f8f4 <TIM3_IRQHandler+0x70>)
 804f8c8:	2101      	movs	r1, #1
 804f8ca:	7011      	strb	r1, [r2, #0]
			count_send = 0;
 804f8cc:	2200      	movs	r2, #0
 804f8ce:	601a      	str	r2, [r3, #0]
		}
	}

	HAL_NVIC_ClearPendingIRQ(TIM3_IRQn); // limpa flags de interrupção
 804f8d0:	201d      	movs	r0, #29
 804f8d2:	f7f3 fe73 	bl	80435bc <HAL_NVIC_ClearPendingIRQ>

	HAL_TIM_IRQHandler(&htim3);
 804f8d6:	4808      	ldr	r0, [pc, #32]	; (804f8f8 <TIM3_IRQHandler+0x74>)

}
 804f8d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_TIM_IRQHandler(&htim3);
 804f8dc:	f7f6 b8b9 	b.w	8045a52 <HAL_TIM_IRQHandler>
 804f8e0:	2000a090 	.word	0x2000a090
 804f8e4:	2000bc70 	.word	0x2000bc70
 804f8e8:	2000b73c 	.word	0x2000b73c
 804f8ec:	2000de88 	.word	0x2000de88
 804f8f0:	2000a2b8 	.word	0x2000a2b8
 804f8f4:	2000a2b4 	.word	0x2000a2b4
 804f8f8:	2000de48 	.word	0x2000de48

0804f8fc <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void) {
 804f8fc:	b508      	push	{r3, lr}

	HAL_UART_IRQHandler(&huart1);
 804f8fe:	4815      	ldr	r0, [pc, #84]	; (804f954 <USART1_IRQHandler+0x58>)
 804f900:	f7f6 fd38 	bl	8046374 <HAL_UART_IRQHandler>
	if (ble_index > sizeof(message_ble))
 804f904:	4b14      	ldr	r3, [pc, #80]	; (804f958 <USART1_IRQHandler+0x5c>)
		ble_index = 0;
	message_ble[ble_index] = rx_byte_uart1[0];
 804f906:	4915      	ldr	r1, [pc, #84]	; (804f95c <USART1_IRQHandler+0x60>)
	if (ble_index > sizeof(message_ble))
 804f908:	681a      	ldr	r2, [r3, #0]
	message_ble[ble_index] = rx_byte_uart1[0];
 804f90a:	4815      	ldr	r0, [pc, #84]	; (804f960 <USART1_IRQHandler+0x64>)
 804f90c:	7809      	ldrb	r1, [r1, #0]
	if (ble_index > sizeof(message_ble))
 804f90e:	2a21      	cmp	r2, #33	; 0x21
		ble_index = 0;
 804f910:	bf84      	itt	hi
 804f912:	2200      	movhi	r2, #0
 804f914:	601a      	strhi	r2, [r3, #0]
	message_ble[ble_index] = rx_byte_uart1[0];
 804f916:	681a      	ldr	r2, [r3, #0]
 804f918:	5481      	strb	r1, [r0, r2]
	ble_index++;
 804f91a:	3201      	adds	r2, #1
	if (ble_index > 2) {
 804f91c:	2a02      	cmp	r2, #2
	ble_index++;
 804f91e:	601a      	str	r2, [r3, #0]
	if (ble_index > 2) {
 804f920:	dd0b      	ble.n	804f93a <USART1_IRQHandler+0x3e>
		if (message_ble[0] == 0xa) {
 804f922:	7802      	ldrb	r2, [r0, #0]
 804f924:	2a0a      	cmp	r2, #10
 804f926:	d108      	bne.n	804f93a <USART1_IRQHandler+0x3e>
			if (message_ble[ble_index - 1] == 0xd) {
 804f928:	290d      	cmp	r1, #13
 804f92a:	d106      	bne.n	804f93a <USART1_IRQHandler+0x3e>
				// Sinaliza que chegou uma mensagem válida
				ble_index = 0;				// Zera o índice para nova mensagem
 804f92c:	2200      	movs	r2, #0
 804f92e:	601a      	str	r2, [r3, #0]
				flags_ble.enable_handler = 1;
 804f930:	4a0c      	ldr	r2, [pc, #48]	; (804f964 <USART1_IRQHandler+0x68>)
 804f932:	7813      	ldrb	r3, [r2, #0]
 804f934:	f043 0320 	orr.w	r3, r3, #32
 804f938:	7013      	strb	r3, [r2, #0]
			}
		}
	}

	HAL_NVIC_ClearPendingIRQ(USART1_IRQn);
 804f93a:	2025      	movs	r0, #37	; 0x25
 804f93c:	f7f3 fe3e 	bl	80435bc <HAL_NVIC_ClearPendingIRQ>
	HAL_UART_Abort_IT(&huart1);
 804f940:	4804      	ldr	r0, [pc, #16]	; (804f954 <USART1_IRQHandler+0x58>)
 804f942:	f7f6 fdc3 	bl	80464cc <HAL_UART_Abort_IT>
	HAL_UART_Receive_IT(&huart1, rx_byte_uart1, 1);
 804f946:	2201      	movs	r2, #1
 804f948:	4904      	ldr	r1, [pc, #16]	; (804f95c <USART1_IRQHandler+0x60>)
 804f94a:	4802      	ldr	r0, [pc, #8]	; (804f954 <USART1_IRQHandler+0x58>)

}
 804f94c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_UART_Receive_IT(&huart1, rx_byte_uart1, 1);
 804f950:	f7f6 bc2e 	b.w	80461b0 <HAL_UART_Receive_IT>
 804f954:	2000bc74 	.word	0x2000bc74
 804f958:	2000a094 	.word	0x2000a094
 804f95c:	2000bc68 	.word	0x2000bc68
 804f960:	2000a098 	.word	0x2000a098
 804f964:	2000bc70 	.word	0x2000bc70

0804f968 <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void) {
 804f968:	b538      	push	{r3, r4, r5, lr}
	 * 	mensagem é padrão, logo ao se detectar o caracter 0x0D
	 * 	habilitar a flag que permite tratar a mensagem.
	 */

	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 804f96a:	4812      	ldr	r0, [pc, #72]	; (804f9b4 <USART2_IRQHandler+0x4c>)
 804f96c:	f7f6 fd02 	bl	8046374 <HAL_UART_IRQHandler>
	HAL_UART_Receive_IT(&huart2, rx_byte_uart2, 1);
#endif

#ifdef USE_CHAFON_4_ANTENNAS

	data[count_byte] = reciver_buffer[0];
 804f970:	4b11      	ldr	r3, [pc, #68]	; (804f9b8 <USART2_IRQHandler+0x50>)
 804f972:	4a12      	ldr	r2, [pc, #72]	; (804f9bc <USART2_IRQHandler+0x54>)
 804f974:	6819      	ldr	r1, [r3, #0]
 804f976:	4812      	ldr	r0, [pc, #72]	; (804f9c0 <USART2_IRQHandler+0x58>)
 804f978:	7812      	ldrb	r2, [r2, #0]
 804f97a:	5442      	strb	r2, [r0, r1]
if(count_byte++ > data[0]){
 804f97c:	7800      	ldrb	r0, [r0, #0]
 804f97e:	1c4a      	adds	r2, r1, #1
 804f980:	4281      	cmp	r1, r0
 804f982:	601a      	str	r2, [r3, #0]
 804f984:	dd08      	ble.n	804f998 <USART2_IRQHandler+0x30>
 804f986:	4d0f      	ldr	r5, [pc, #60]	; (804f9c4 <USART2_IRQHandler+0x5c>)
 804f988:	480f      	ldr	r0, [pc, #60]	; (804f9c8 <USART2_IRQHandler+0x60>)
 804f98a:	4910      	ldr	r1, [pc, #64]	; (804f9cc <USART2_IRQHandler+0x64>)
	if(data[0] == 0x11)
	{
		count_tags = count_byte;
 804f98c:	602a      	str	r2, [r5, #0]
 804f98e:	2400      	movs	r4, #0
		count_byte = 0;
 804f990:	601c      	str	r4, [r3, #0]
		communication_validation_flag = 1;
 804f992:	2301      	movs	r3, #1
 804f994:	7003      	strb	r3, [r0, #0]
		flag_new_pack = 1;
 804f996:	700b      	strb	r3, [r1, #0]
//			count_byte = 0;
//			communication_validation_flag = 1;
//			flag_new_pack = 1;
//		}

	HAL_NVIC_ClearPendingIRQ(USART2_IRQn);
 804f998:	2026      	movs	r0, #38	; 0x26
 804f99a:	f7f3 fe0f 	bl	80435bc <HAL_NVIC_ClearPendingIRQ>
	HAL_UART_Abort_IT(&huart2);
 804f99e:	4805      	ldr	r0, [pc, #20]	; (804f9b4 <USART2_IRQHandler+0x4c>)
 804f9a0:	f7f6 fd94 	bl	80464cc <HAL_UART_Abort_IT>
	HAL_UART_Receive_IT(&huart2, reciver_buffer, 1);
 804f9a4:	2201      	movs	r2, #1
 804f9a6:	4905      	ldr	r1, [pc, #20]	; (804f9bc <USART2_IRQHandler+0x54>)
 804f9a8:	4802      	ldr	r0, [pc, #8]	; (804f9b4 <USART2_IRQHandler+0x4c>)

#endif

	/* USER CODE END USART2_IRQn 1 */
}
 804f9aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_UART_Receive_IT(&huart2, reciver_buffer, 1);
 804f9ae:	f7f6 bbff 	b.w	80461b0 <HAL_UART_Receive_IT>
 804f9b2:	bf00      	nop
 804f9b4:	2000bbf8 	.word	0x2000bbf8
 804f9b8:	20003034 	.word	0x20003034
 804f9bc:	2000bc38 	.word	0x2000bc38
 804f9c0:	20001345 	.word	0x20001345
 804f9c4:	20001340 	.word	0x20001340
 804f9c8:	2000140e 	.word	0x2000140e
 804f9cc:	20001344 	.word	0x20001344

0804f9d0 <SDIO_IRQHandler>:
 */
void SDIO_IRQHandler(void) {
	/* USER CODE BEGIN SDIO_IRQn 0 */

	/* USER CODE END SDIO_IRQn 0 */
	HAL_SD_IRQHandler(&hsd);
 804f9d0:	4801      	ldr	r0, [pc, #4]	; (804f9d8 <SDIO_IRQHandler+0x8>)
 804f9d2:	f7f5 bd73 	b.w	80454bc <HAL_SD_IRQHandler>
 804f9d6:	bf00      	nop
 804f9d8:	2000e3fc 	.word	0x2000e3fc

0804f9dc <DMA2_Stream3_IRQHandler>:
 */
void DMA2_Stream3_IRQHandler(void) {
	/* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

	/* USER CODE END DMA2_Stream3_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_sdio_rx);
 804f9dc:	4801      	ldr	r0, [pc, #4]	; (804f9e4 <DMA2_Stream3_IRQHandler+0x8>)
 804f9de:	f7f3 bf07 	b.w	80437f0 <HAL_DMA_IRQHandler>
 804f9e2:	bf00      	nop
 804f9e4:	2000e33c 	.word	0x2000e33c

0804f9e8 <DMA2_Stream6_IRQHandler>:
 */
void DMA2_Stream6_IRQHandler(void) {
	/* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

	/* USER CODE END DMA2_Stream6_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_sdio_tx);
 804f9e8:	4801      	ldr	r0, [pc, #4]	; (804f9f0 <DMA2_Stream6_IRQHandler+0x8>)
 804f9ea:	f7f3 bf01 	b.w	80437f0 <HAL_DMA_IRQHandler>
 804f9ee:	bf00      	nop
 804f9f0:	2000e39c 	.word	0x2000e39c

0804f9f4 <USART3_IRQHandler>:

	/* USER CODE END DMA2_Stream6_IRQn 1 */
}

void USARTx_IRQHandler(void) {
	vcom_IRQHandler();
 804f9f4:	f000 b872 	b.w	804fadc <vcom_IRQHandler>

0804f9f8 <DMA1_Stream4_IRQHandler>:
}

void USARTx_DMA_TX_IRQHandler(void) {
	vcom_DMA_TX_IRQHandler();
 804f9f8:	f000 b86a 	b.w	804fad0 <vcom_DMA_TX_IRQHandler>

0804f9fc <RTC_Alarm_IRQHandler>:
}

void RTC_Alarm_IRQHandler(void) {
	HW_RTC_IrqHandler();
 804f9fc:	f7fe be6c 	b.w	804e6d8 <HW_RTC_IrqHandler>

0804fa00 <EXTI0_IRQHandler>:
}

void EXTI0_IRQHandler(void) {
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 804fa00:	2001      	movs	r0, #1
 804fa02:	f7f4 bae7 	b.w	8043fd4 <HAL_GPIO_EXTI_IRQHandler>

0804fa06 <EXTI1_IRQHandler>:
}

void EXTI1_IRQHandler(void) {
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 804fa06:	2002      	movs	r0, #2
 804fa08:	f7f4 bae4 	b.w	8043fd4 <HAL_GPIO_EXTI_IRQHandler>

0804fa0c <EXTI2_IRQHandler>:
}

void EXTI2_IRQHandler(void) {
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 804fa0c:	2004      	movs	r0, #4
 804fa0e:	f7f4 bae1 	b.w	8043fd4 <HAL_GPIO_EXTI_IRQHandler>

0804fa12 <EXTI3_IRQHandler>:
}

void EXTI3_IRQHandler(void) {
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 804fa12:	2008      	movs	r0, #8
 804fa14:	f7f4 bade 	b.w	8043fd4 <HAL_GPIO_EXTI_IRQHandler>

0804fa18 <EXTI4_IRQHandler>:
}

void EXTI4_IRQHandler(void) {
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 804fa18:	2010      	movs	r0, #16
 804fa1a:	f7f4 badb 	b.w	8043fd4 <HAL_GPIO_EXTI_IRQHandler>

0804fa1e <EXTI9_5_IRQHandler>:
}

void EXTI9_5_IRQHandler(void) {
 804fa1e:	b508      	push	{r3, lr}
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 804fa20:	2020      	movs	r0, #32
 804fa22:	f7f4 fad7 	bl	8043fd4 <HAL_GPIO_EXTI_IRQHandler>

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 804fa26:	2040      	movs	r0, #64	; 0x40
 804fa28:	f7f4 fad4 	bl	8043fd4 <HAL_GPIO_EXTI_IRQHandler>

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 804fa2c:	2080      	movs	r0, #128	; 0x80
 804fa2e:	f7f4 fad1 	bl	8043fd4 <HAL_GPIO_EXTI_IRQHandler>

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 804fa32:	f44f 7080 	mov.w	r0, #256	; 0x100
 804fa36:	f7f4 facd 	bl	8043fd4 <HAL_GPIO_EXTI_IRQHandler>

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 804fa3a:	f44f 7000 	mov.w	r0, #512	; 0x200
}
 804fa3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 804fa42:	f7f4 bac7 	b.w	8043fd4 <HAL_GPIO_EXTI_IRQHandler>

0804fa46 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void) {
 804fa46:	b508      	push	{r3, lr}
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 804fa48:	f44f 6080 	mov.w	r0, #1024	; 0x400
 804fa4c:	f7f4 fac2 	bl	8043fd4 <HAL_GPIO_EXTI_IRQHandler>

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 804fa50:	f44f 6000 	mov.w	r0, #2048	; 0x800
 804fa54:	f7f4 fabe 	bl	8043fd4 <HAL_GPIO_EXTI_IRQHandler>

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 804fa58:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 804fa5c:	f7f4 faba 	bl	8043fd4 <HAL_GPIO_EXTI_IRQHandler>

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 804fa60:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 804fa64:	f7f4 fab6 	bl	8043fd4 <HAL_GPIO_EXTI_IRQHandler>

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 804fa68:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 804fa6c:	f7f4 fab2 	bl	8043fd4 <HAL_GPIO_EXTI_IRQHandler>

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 804fa70:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
 804fa74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 804fa78:	f7f4 baac 	b.w	8043fd4 <HAL_GPIO_EXTI_IRQHandler>

0804fa7c <vcom_Init>:

static void (*TxCpltCallback)(void);
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/
void vcom_Init(void (*TxCb)(void))
{
 804fa7c:	b508      	push	{r3, lr}
      - Parity = ODD parity
      - BaudRate = 921600 baud
      - Hardware flow control disabled (RTS and CTS signals) */
  UartHandle.Instance        = USARTx;

  UartHandle.Init.BaudRate   = 230400;
 804fa7e:	490b      	ldr	r1, [pc, #44]	; (804faac <vcom_Init+0x30>)
  TxCpltCallback = TxCb;
 804fa80:	4b0b      	ldr	r3, [pc, #44]	; (804fab0 <vcom_Init+0x34>)
  UartHandle.Init.BaudRate   = 230400;
 804fa82:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 804fa86:	e9c3 1201 	strd	r1, r2, [r3, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 804fa8a:	2200      	movs	r2, #0
  TxCpltCallback = TxCb;
 804fa8c:	6018      	str	r0, [r3, #0]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 804fa8e:	e9c3 2203 	strd	r2, r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 804fa92:	615a      	str	r2, [r3, #20]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 804fa94:	61da      	str	r2, [r3, #28]
  UartHandle.Init.Mode       = UART_MODE_TX;

  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 804fa96:	1d18      	adds	r0, r3, #4
  UartHandle.Init.Mode       = UART_MODE_TX;
 804fa98:	2208      	movs	r2, #8
 804fa9a:	619a      	str	r2, [r3, #24]
  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 804fa9c:	f7f6 fa84 	bl	8045fa8 <HAL_UART_Init>
 804faa0:	b118      	cbz	r0, 804faaa <vcom_Init+0x2e>
  {
    /* Initialization Error */
    Error_Handler();
  }
}
 804faa2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 804faa6:	f7fe ba61 	b.w	804df6c <Error_Handler>
}
 804faaa:	bd08      	pop	{r3, pc}
 804faac:	40004800 	.word	0x40004800
 804fab0:	2000b740 	.word	0x2000b740

0804fab4 <vcom_Trace>:

void vcom_Trace(uint8_t *p_data, uint16_t size)
{
  HAL_UART_Transmit_DMA(&UartHandle, p_data, size);
 804fab4:	460a      	mov	r2, r1
 804fab6:	4601      	mov	r1, r0
 804fab8:	4801      	ldr	r0, [pc, #4]	; (804fac0 <vcom_Trace+0xc>)
 804faba:	f7f6 bba1 	b.w	8046200 <HAL_UART_Transmit_DMA>
 804fabe:	bf00      	nop
 804fac0:	2000b744 	.word	0x2000b744

0804fac4 <HAL_UART_TxCpltCallback>:
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
  /* buffer transmission complete*/
  TxCpltCallback();
 804fac4:	4b01      	ldr	r3, [pc, #4]	; (804facc <HAL_UART_TxCpltCallback+0x8>)
 804fac6:	681b      	ldr	r3, [r3, #0]
 804fac8:	4718      	bx	r3
 804faca:	bf00      	nop
 804facc:	2000b740 	.word	0x2000b740

0804fad0 <vcom_DMA_TX_IRQHandler>:
}

void vcom_DMA_TX_IRQHandler(void)
{
  HAL_DMA_IRQHandler(UartHandle.hdmatx);
 804fad0:	4b01      	ldr	r3, [pc, #4]	; (804fad8 <vcom_DMA_TX_IRQHandler+0x8>)
 804fad2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 804fad4:	f7f3 be8c 	b.w	80437f0 <HAL_DMA_IRQHandler>
 804fad8:	2000b740 	.word	0x2000b740

0804fadc <vcom_IRQHandler>:
}

void vcom_IRQHandler(void)
{
  HAL_UART_IRQHandler(&UartHandle);
 804fadc:	4801      	ldr	r0, [pc, #4]	; (804fae4 <vcom_IRQHandler+0x8>)
 804fade:	f7f6 bc49 	b.w	8046374 <HAL_UART_IRQHandler>
 804fae2:	bf00      	nop
 804fae4:	2000b744 	.word	0x2000b744

0804fae8 <vcom_IoInit>:
		HAL_NVIC_DisableIRQ(USARTx_DMA_TX_IRQn);
	}
}

void vcom_IoInit(void)
{
 804fae8:	b530      	push	{r4, r5, lr}
 804faea:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 804faec:	4b17      	ldr	r3, [pc, #92]	; (804fb4c <vcom_IoInit+0x64>)
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
  GPIO_InitStruct.Alternate = USARTx_TX_AF;

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 804faee:	4c18      	ldr	r4, [pc, #96]	; (804fb50 <vcom_IoInit+0x68>)
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 804faf0:	2200      	movs	r2, #0
  USARTx_TX_GPIO_CLK_ENABLE();
 804faf2:	9201      	str	r2, [sp, #4]
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 804faf4:	9205      	str	r2, [sp, #20]
  USARTx_TX_GPIO_CLK_ENABLE();
 804faf6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 804faf8:	f041 0102 	orr.w	r1, r1, #2
 804fafc:	6319      	str	r1, [r3, #48]	; 0x30
 804fafe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 804fb00:	f001 0102 	and.w	r1, r1, #2
 804fb04:	9101      	str	r1, [sp, #4]
 804fb06:	9901      	ldr	r1, [sp, #4]
  USARTx_RX_GPIO_CLK_ENABLE();
 804fb08:	9202      	str	r2, [sp, #8]
 804fb0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804fb0c:	f042 0202 	orr.w	r2, r2, #2
 804fb10:	631a      	str	r2, [r3, #48]	; 0x30
 804fb12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804fb14:	f003 0302 	and.w	r3, r3, #2
 804fb18:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 804fb1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  USARTx_RX_GPIO_CLK_ENABLE();
 804fb1e:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 804fb20:	2302      	movs	r3, #2
 804fb22:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 804fb26:	2507      	movs	r5, #7
 804fb28:	2303      	movs	r3, #3
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 804fb2a:	a903      	add	r1, sp, #12
 804fb2c:	4620      	mov	r0, r4
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 804fb2e:	e9cd 3506 	strd	r3, r5, [sp, #24]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 804fb32:	f7f4 f8d5 	bl	8043ce0 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 804fb36:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Alternate = USARTx_RX_AF;

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 804fb3a:	a903      	add	r1, sp, #12
 804fb3c:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 804fb3e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 804fb40:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 804fb42:	f7f4 f8cd 	bl	8043ce0 <HAL_GPIO_Init>
}
 804fb46:	b009      	add	sp, #36	; 0x24
 804fb48:	bd30      	pop	{r4, r5, pc}
 804fb4a:	bf00      	nop
 804fb4c:	40023800 	.word	0x40023800
 804fb50:	40020400 	.word	0x40020400

0804fb54 <HAL_UART_MspInit>:
{
 804fb54:	b5f0      	push	{r4, r5, r6, r7, lr}
 804fb56:	4606      	mov	r6, r0
 804fb58:	b08f      	sub	sp, #60	; 0x3c
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 804fb5a:	2214      	movs	r2, #20
 804fb5c:	2100      	movs	r1, #0
 804fb5e:	a809      	add	r0, sp, #36	; 0x24
 804fb60:	f000 faf4 	bl	805014c <memset>
	if (huart->Instance == USART1) {
 804fb64:	6833      	ldr	r3, [r6, #0]
 804fb66:	4a58      	ldr	r2, [pc, #352]	; (804fcc8 <HAL_UART_MspInit+0x174>)
 804fb68:	4293      	cmp	r3, r2
 804fb6a:	d12c      	bne.n	804fbc6 <HAL_UART_MspInit+0x72>
		__HAL_RCC_USART1_CLK_ENABLE();
 804fb6c:	4b57      	ldr	r3, [pc, #348]	; (804fccc <HAL_UART_MspInit+0x178>)
		HAL_GPIO_Init(BLE_TX_GPIO_Port, &GPIO_InitStruct);
 804fb6e:	4858      	ldr	r0, [pc, #352]	; (804fcd0 <HAL_UART_MspInit+0x17c>)
		__HAL_RCC_USART1_CLK_ENABLE();
 804fb70:	2400      	movs	r4, #0
 804fb72:	9401      	str	r4, [sp, #4]
 804fb74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 804fb76:	f042 0210 	orr.w	r2, r2, #16
 804fb7a:	645a      	str	r2, [r3, #68]	; 0x44
 804fb7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 804fb7e:	f002 0210 	and.w	r2, r2, #16
 804fb82:	9201      	str	r2, [sp, #4]
 804fb84:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 804fb86:	9402      	str	r4, [sp, #8]
 804fb88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804fb8a:	f042 0201 	orr.w	r2, r2, #1
 804fb8e:	631a      	str	r2, [r3, #48]	; 0x30
 804fb90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804fb92:	f003 0301 	and.w	r3, r3, #1
 804fb96:	9302      	str	r3, [sp, #8]
 804fb98:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804fb9a:	2502      	movs	r5, #2
 804fb9c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 804fba0:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
		HAL_GPIO_Init(BLE_TX_GPIO_Port, &GPIO_InitStruct);
 804fba4:	a909      	add	r1, sp, #36	; 0x24
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 804fba6:	2307      	movs	r3, #7
 804fba8:	2603      	movs	r6, #3
 804fbaa:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
		HAL_GPIO_Init(BLE_TX_GPIO_Port, &GPIO_InitStruct);
 804fbae:	f7f4 f897 	bl	8043ce0 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(USART1_IRQn, 0, 2);
 804fbb2:	2025      	movs	r0, #37	; 0x25
 804fbb4:	462a      	mov	r2, r5
 804fbb6:	4621      	mov	r1, r4
 804fbb8:	f7f3 fc98 	bl	80434ec <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 804fbbc:	2025      	movs	r0, #37	; 0x25
		HAL_NVIC_EnableIRQ(USARTx_IRQn);
 804fbbe:	f7f3 fcc9 	bl	8043554 <HAL_NVIC_EnableIRQ>
}
 804fbc2:	b00f      	add	sp, #60	; 0x3c
 804fbc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if (huart->Instance == USART2) {
 804fbc6:	4a43      	ldr	r2, [pc, #268]	; (804fcd4 <HAL_UART_MspInit+0x180>)
 804fbc8:	4293      	cmp	r3, r2
 804fbca:	d128      	bne.n	804fc1e <HAL_UART_MspInit+0xca>
		__HAL_RCC_USART2_CLK_ENABLE();
 804fbcc:	4b3f      	ldr	r3, [pc, #252]	; (804fccc <HAL_UART_MspInit+0x178>)
 804fbce:	2400      	movs	r4, #0
 804fbd0:	9403      	str	r4, [sp, #12]
 804fbd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804fbd4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 804fbd8:	641a      	str	r2, [r3, #64]	; 0x40
 804fbda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804fbdc:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 804fbe0:	9203      	str	r2, [sp, #12]
 804fbe2:	9a03      	ldr	r2, [sp, #12]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 804fbe4:	9404      	str	r4, [sp, #16]
 804fbe6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804fbe8:	f042 0201 	orr.w	r2, r2, #1
 804fbec:	631a      	str	r2, [r3, #48]	; 0x30
 804fbee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804fbf0:	f003 0301 	and.w	r3, r3, #1
 804fbf4:	9304      	str	r3, [sp, #16]
 804fbf6:	9b04      	ldr	r3, [sp, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804fbf8:	210c      	movs	r1, #12
 804fbfa:	2302      	movs	r3, #2
 804fbfc:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 804fc00:	2003      	movs	r0, #3
 804fc02:	2307      	movs	r3, #7
 804fc04:	e9cd 030c 	strd	r0, r3, [sp, #48]	; 0x30
		HAL_GPIO_Init(RFID_TX_GPIO_Port, &GPIO_InitStruct);
 804fc08:	a909      	add	r1, sp, #36	; 0x24
 804fc0a:	4831      	ldr	r0, [pc, #196]	; (804fcd0 <HAL_UART_MspInit+0x17c>)
 804fc0c:	f7f4 f868 	bl	8043ce0 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 804fc10:	2026      	movs	r0, #38	; 0x26
 804fc12:	4622      	mov	r2, r4
 804fc14:	4621      	mov	r1, r4
 804fc16:	f7f3 fc69 	bl	80434ec <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 804fc1a:	2026      	movs	r0, #38	; 0x26
 804fc1c:	e7cf      	b.n	804fbbe <HAL_UART_MspInit+0x6a>
	else if (huart->Instance == USARTx) {
 804fc1e:	4a2e      	ldr	r2, [pc, #184]	; (804fcd8 <HAL_UART_MspInit+0x184>)
 804fc20:	4293      	cmp	r3, r2
 804fc22:	d1ce      	bne.n	804fbc2 <HAL_UART_MspInit+0x6e>
		USARTx_TX_GPIO_CLK_ENABLE();
 804fc24:	4b29      	ldr	r3, [pc, #164]	; (804fccc <HAL_UART_MspInit+0x178>)
		hdma_tx.Instance = USARTx_TX_DMA_CHANNEL;
 804fc26:	4d2d      	ldr	r5, [pc, #180]	; (804fcdc <HAL_UART_MspInit+0x188>)
		USARTx_TX_GPIO_CLK_ENABLE();
 804fc28:	2400      	movs	r4, #0
 804fc2a:	9405      	str	r4, [sp, #20]
 804fc2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804fc2e:	f042 0202 	orr.w	r2, r2, #2
 804fc32:	631a      	str	r2, [r3, #48]	; 0x30
 804fc34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804fc36:	f002 0202 	and.w	r2, r2, #2
 804fc3a:	9205      	str	r2, [sp, #20]
 804fc3c:	9a05      	ldr	r2, [sp, #20]
		USARTx_RX_GPIO_CLK_ENABLE();
 804fc3e:	9406      	str	r4, [sp, #24]
 804fc40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804fc42:	f042 0202 	orr.w	r2, r2, #2
 804fc46:	631a      	str	r2, [r3, #48]	; 0x30
 804fc48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804fc4a:	f002 0202 	and.w	r2, r2, #2
 804fc4e:	9206      	str	r2, [sp, #24]
 804fc50:	9a06      	ldr	r2, [sp, #24]
		USARTx_CLK_ENABLE();
 804fc52:	9407      	str	r4, [sp, #28]
 804fc54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804fc56:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 804fc5a:	641a      	str	r2, [r3, #64]	; 0x40
 804fc5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804fc5e:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 804fc62:	9207      	str	r2, [sp, #28]
 804fc64:	9a07      	ldr	r2, [sp, #28]
		DMAx_CLK_ENABLE();
 804fc66:	9408      	str	r4, [sp, #32]
 804fc68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804fc6a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 804fc6e:	631a      	str	r2, [r3, #48]	; 0x30
 804fc70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804fc72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 804fc76:	9308      	str	r3, [sp, #32]
 804fc78:	9b08      	ldr	r3, [sp, #32]
		vcom_IoInit();
 804fc7a:	f7ff ff35 	bl	804fae8 <vcom_IoInit>
		hdma_tx.Init.Channel = DMA_CHANNEL_7;
 804fc7e:	4a18      	ldr	r2, [pc, #96]	; (804fce0 <HAL_UART_MspInit+0x18c>)
		hdma_tx.Init.Priority = DMA_PRIORITY_LOW;
 804fc80:	666c      	str	r4, [r5, #100]	; 0x64
		hdma_tx.Init.Channel = DMA_CHANNEL_7;
 804fc82:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
 804fc86:	e9c5 2311 	strd	r2, r3, [r5, #68]	; 0x44
		HAL_DMA_Init(&hdma_tx);
 804fc8a:	f105 0744 	add.w	r7, r5, #68	; 0x44
		hdma_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 804fc8e:	2340      	movs	r3, #64	; 0x40
		hdma_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 804fc90:	e9c5 3413 	strd	r3, r4, [r5, #76]	; 0x4c
		HAL_DMA_Init(&hdma_tx);
 804fc94:	4638      	mov	r0, r7
		hdma_tx.Init.MemInc = DMA_MINC_ENABLE;
 804fc96:	f44f 6380 	mov.w	r3, #1024	; 0x400
		hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 804fc9a:	e9c5 3415 	strd	r3, r4, [r5, #84]	; 0x54
		hdma_tx.Init.Mode = DMA_NORMAL;
 804fc9e:	e9c5 4417 	strd	r4, r4, [r5, #92]	; 0x5c
		HAL_DMA_Init(&hdma_tx);
 804fca2:	f7f3 fcb1 	bl	8043608 <HAL_DMA_Init>
		HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 804fca6:	2201      	movs	r2, #1
 804fca8:	4621      	mov	r1, r4
		__HAL_LINKDMA(huart, hdmatx, hdma_tx);
 804fcaa:	6337      	str	r7, [r6, #48]	; 0x30
		HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 804fcac:	200f      	movs	r0, #15
		__HAL_LINKDMA(huart, hdmatx, hdma_tx);
 804fcae:	67ee      	str	r6, [r5, #124]	; 0x7c
		HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 804fcb0:	f7f3 fc1c 	bl	80434ec <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 804fcb4:	200f      	movs	r0, #15
 804fcb6:	f7f3 fc4d 	bl	8043554 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 804fcba:	2027      	movs	r0, #39	; 0x27
 804fcbc:	2201      	movs	r2, #1
 804fcbe:	4621      	mov	r1, r4
 804fcc0:	f7f3 fc14 	bl	80434ec <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USARTx_IRQn);
 804fcc4:	2027      	movs	r0, #39	; 0x27
 804fcc6:	e77a      	b.n	804fbbe <HAL_UART_MspInit+0x6a>
 804fcc8:	40011000 	.word	0x40011000
 804fccc:	40023800 	.word	0x40023800
 804fcd0:	40020000 	.word	0x40020000
 804fcd4:	40004400 	.word	0x40004400
 804fcd8:	40004800 	.word	0x40004800
 804fcdc:	2000b740 	.word	0x2000b740
 804fce0:	40026070 	.word	0x40026070

0804fce4 <vcom_IoDeInit>:

void vcom_IoDeInit(void)
{
 804fce4:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 804fce6:	2300      	movs	r3, #0
{
 804fce8:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 804fcea:	e9cd 3303 	strd	r3, r3, [sp, #12]

  USARTx_TX_GPIO_CLK_ENABLE();
 804fcee:	9300      	str	r3, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 804fcf0:	9305      	str	r3, [sp, #20]
  USARTx_TX_GPIO_CLK_ENABLE();
 804fcf2:	4b0f      	ldr	r3, [pc, #60]	; (804fd30 <vcom_IoDeInit+0x4c>)

  GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStructure.Pull = GPIO_NOPULL;

  GPIO_InitStructure.Pin =  USARTx_TX_PIN ;
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStructure);
 804fcf4:	4d0f      	ldr	r5, [pc, #60]	; (804fd34 <vcom_IoDeInit+0x50>)
  USARTx_TX_GPIO_CLK_ENABLE();
 804fcf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804fcf8:	f042 0202 	orr.w	r2, r2, #2
 804fcfc:	631a      	str	r2, [r3, #48]	; 0x30
 804fcfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804fd00:	f003 0302 	and.w	r3, r3, #2
 804fd04:	9300      	str	r3, [sp, #0]
  GPIO_InitStructure.Pin =  USARTx_TX_PIN ;
 804fd06:	ac06      	add	r4, sp, #24
  USARTx_TX_GPIO_CLK_ENABLE();
 804fd08:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 804fd0a:	2303      	movs	r3, #3
 804fd0c:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Pin =  USARTx_TX_PIN ;
 804fd0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 804fd12:	f844 3d14 	str.w	r3, [r4, #-20]!
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStructure);
 804fd16:	4628      	mov	r0, r5
 804fd18:	4621      	mov	r1, r4
 804fd1a:	f7f3 ffe1 	bl	8043ce0 <HAL_GPIO_Init>

  GPIO_InitStructure.Pin =  USARTx_RX_PIN ;
 804fd1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStructure);
 804fd22:	4621      	mov	r1, r4
 804fd24:	4628      	mov	r0, r5
  GPIO_InitStructure.Pin =  USARTx_RX_PIN ;
 804fd26:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStructure);
 804fd28:	f7f3 ffda 	bl	8043ce0 <HAL_GPIO_Init>
}
 804fd2c:	b007      	add	sp, #28
 804fd2e:	bd30      	pop	{r4, r5, pc}
 804fd30:	40023800 	.word	0x40023800
 804fd34:	40020400 	.word	0x40020400

0804fd38 <HAL_UART_MspDeInit>:
void HAL_UART_MspDeInit(UART_HandleTypeDef *huart) {
 804fd38:	b538      	push	{r3, r4, r5, lr}
	if (huart->Instance == USART1) {
 804fd3a:	4a1a      	ldr	r2, [pc, #104]	; (804fda4 <HAL_UART_MspDeInit+0x6c>)
 804fd3c:	6803      	ldr	r3, [r0, #0]
 804fd3e:	4c1a      	ldr	r4, [pc, #104]	; (804fda8 <HAL_UART_MspDeInit+0x70>)
 804fd40:	4293      	cmp	r3, r2
void HAL_UART_MspDeInit(UART_HandleTypeDef *huart) {
 804fd42:	4605      	mov	r5, r0
	if (huart->Instance == USART1) {
 804fd44:	d10d      	bne.n	804fd62 <HAL_UART_MspDeInit+0x2a>
		__HAL_RCC_USART1_CLK_DISABLE();
 804fd46:	6c63      	ldr	r3, [r4, #68]	; 0x44
		HAL_GPIO_DeInit(BLE_TX_GPIO_Port, BLE_TX_Pin | BLE_RX_Pin);
 804fd48:	4818      	ldr	r0, [pc, #96]	; (804fdac <HAL_UART_MspDeInit+0x74>)
		__HAL_RCC_USART1_CLK_DISABLE();
 804fd4a:	f023 0310 	bic.w	r3, r3, #16
 804fd4e:	6463      	str	r3, [r4, #68]	; 0x44
		HAL_GPIO_DeInit(BLE_TX_GPIO_Port, BLE_TX_Pin | BLE_RX_Pin);
 804fd50:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 804fd54:	f7f4 f8a4 	bl	8043ea0 <HAL_GPIO_DeInit>
		HAL_NVIC_DisableIRQ(USART1_IRQn);
 804fd58:	2025      	movs	r0, #37	; 0x25
}
 804fd5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_NVIC_DisableIRQ(USARTx_DMA_TX_IRQn);
 804fd5e:	f7f3 bc07 	b.w	8043570 <HAL_NVIC_DisableIRQ>
	} else if (huart->Instance == USART2) {
 804fd62:	4a13      	ldr	r2, [pc, #76]	; (804fdb0 <HAL_UART_MspDeInit+0x78>)
 804fd64:	4293      	cmp	r3, r2
 804fd66:	d109      	bne.n	804fd7c <HAL_UART_MspDeInit+0x44>
		__HAL_RCC_USART2_CLK_DISABLE();
 804fd68:	6c23      	ldr	r3, [r4, #64]	; 0x40
		HAL_GPIO_DeInit(RFID_TX_GPIO_Port, GPIO_PIN_2 | GPIO_PIN_3);
 804fd6a:	4810      	ldr	r0, [pc, #64]	; (804fdac <HAL_UART_MspDeInit+0x74>)
		__HAL_RCC_USART2_CLK_DISABLE();
 804fd6c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 804fd70:	6423      	str	r3, [r4, #64]	; 0x40
		HAL_GPIO_DeInit(RFID_TX_GPIO_Port, GPIO_PIN_2 | GPIO_PIN_3);
 804fd72:	210c      	movs	r1, #12
 804fd74:	f7f4 f894 	bl	8043ea0 <HAL_GPIO_DeInit>
		HAL_NVIC_DisableIRQ(USART2_IRQn);
 804fd78:	2026      	movs	r0, #38	; 0x26
 804fd7a:	e7ee      	b.n	804fd5a <HAL_UART_MspDeInit+0x22>
		vcom_IoDeInit();
 804fd7c:	f7ff ffb2 	bl	804fce4 <vcom_IoDeInit>
		USARTx_FORCE_RESET();
 804fd80:	6a23      	ldr	r3, [r4, #32]
		if (huart->hdmarx != 0) {
 804fd82:	6b68      	ldr	r0, [r5, #52]	; 0x34
		USARTx_FORCE_RESET();
 804fd84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 804fd88:	6223      	str	r3, [r4, #32]
		USARTx_RELEASE_RESET();
 804fd8a:	6a23      	ldr	r3, [r4, #32]
 804fd8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 804fd90:	6223      	str	r3, [r4, #32]
		if (huart->hdmarx != 0) {
 804fd92:	b108      	cbz	r0, 804fd98 <HAL_UART_MspDeInit+0x60>
			HAL_DMA_DeInit(huart->hdmarx);
 804fd94:	f7f3 fcb6 	bl	8043704 <HAL_DMA_DeInit>
		if (huart->hdmatx != 0) {
 804fd98:	6b28      	ldr	r0, [r5, #48]	; 0x30
 804fd9a:	b108      	cbz	r0, 804fda0 <HAL_UART_MspDeInit+0x68>
			HAL_DMA_DeInit(huart->hdmatx);
 804fd9c:	f7f3 fcb2 	bl	8043704 <HAL_DMA_DeInit>
		HAL_NVIC_DisableIRQ(USARTx_DMA_TX_IRQn);
 804fda0:	200f      	movs	r0, #15
 804fda2:	e7da      	b.n	804fd5a <HAL_UART_MspDeInit+0x22>
 804fda4:	40011000 	.word	0x40011000
 804fda8:	40023800 	.word	0x40023800
 804fdac:	40020000 	.word	0x40020000
 804fdb0:	40004400 	.word	0x40004400

0804fdb4 <COM_Init>:
  * @brief  Initialize COM module.
  * @param  None.
  * @retval HAL Status.
  */
HAL_StatusTypeDef  COM_Init(void)
{
 804fdb4:	b508      	push	{r3, lr}
#if defined(__GNUC__)
  setvbuf(stdout, NULL, _IONBF, 0);
 804fdb6:	4b0c      	ldr	r3, [pc, #48]	; (804fde8 <COM_Init+0x34>)
 804fdb8:	6818      	ldr	r0, [r3, #0]
 804fdba:	2300      	movs	r3, #0
 804fdbc:	2202      	movs	r2, #2
 804fdbe:	4619      	mov	r1, r3
 804fdc0:	6880      	ldr	r0, [r0, #8]
 804fdc2:	f000 fa47 	bl	8050254 <setvbuf>
  - One Stop Bit
  - No parity
  - Hardware flow control disabled (RTS and CTS signals)
  - Receive and transmit enabled
  */
  /*UartHandleUpdate*/huart1.Instance = COM_UART;
 804fdc6:	4809      	ldr	r0, [pc, #36]	; (804fdec <COM_Init+0x38>)
  /*UartHandleUpdate*/huart1.Init.BaudRate = 9600;
 804fdc8:	4a09      	ldr	r2, [pc, #36]	; (804fdf0 <COM_Init+0x3c>)
 804fdca:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 804fdce:	e9c0 2300 	strd	r2, r3, [r0]
  /*UartHandleUpdate*/huart1.Init.WordLength = UART_WORDLENGTH_8B;
 804fdd2:	2300      	movs	r3, #0
  /*UartHandleUpdate*/huart1.Init.StopBits = UART_STOPBITS_1;
 804fdd4:	e9c0 3302 	strd	r3, r3, [r0, #8]
  /*UartHandleUpdate*/huart1.Init.Parity = UART_PARITY_NONE;
 804fdd8:	6103      	str	r3, [r0, #16]
  /*UartHandleUpdate*/huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 804fdda:	6183      	str	r3, [r0, #24]
  /*UartHandleUpdate*/huart1.Init.Mode = UART_MODE_RX | UART_MODE_TX;
 804fddc:	230c      	movs	r3, #12
 804fdde:	6143      	str	r3, [r0, #20]

  return HAL_UART_Init(&huart1/*UartHandleUpdate*/);
}
 804fde0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return HAL_UART_Init(&huart1/*UartHandleUpdate*/);
 804fde4:	f7f6 b8e0 	b.w	8045fa8 <HAL_UART_Init>
 804fde8:	200012b8 	.word	0x200012b8
 804fdec:	2000bc74 	.word	0x2000bc74
 804fdf0:	40011000 	.word	0x40011000

0804fdf4 <COM_Transmit>:
  * @param uTimeout: Timeout duration.
  * @retval Status of the Transmit operation.
  */
HAL_StatusTypeDef COM_Transmit(uint8_t *Data, uint16_t uDataLength, uint32_t uTimeout)
{ //UartHandleUpdate
  return HAL_UART_Transmit(&huart1, (uint8_t *)Data, uDataLength, uTimeout);
 804fdf4:	4613      	mov	r3, r2
 804fdf6:	460a      	mov	r2, r1
 804fdf8:	4601      	mov	r1, r0
 804fdfa:	4801      	ldr	r0, [pc, #4]	; (804fe00 <COM_Transmit+0xc>)
 804fdfc:	f7f6 b91a 	b.w	8046034 <HAL_UART_Transmit>
 804fe00:	2000bc74 	.word	0x2000bc74

0804fe04 <COM_Receive>:
  * @param uTimeout: Timeout duration.
  * @retval Status of the Receive operation.
  */
HAL_StatusTypeDef COM_Receive(uint8_t *Data, uint16_t uDataLength, uint32_t uTimeout)
{
  return HAL_UART_Receive(&huart1, (uint8_t *)Data, uDataLength, uTimeout);
 804fe04:	4613      	mov	r3, r2
 804fe06:	460a      	mov	r2, r1
 804fe08:	4601      	mov	r1, r0
 804fe0a:	4801      	ldr	r0, [pc, #4]	; (804fe10 <COM_Receive+0xc>)
 804fe0c:	f7f6 b96e 	b.w	80460ec <HAL_UART_Receive>
 804fe10:	2000bc74 	.word	0x2000bc74

0804fe14 <COM_Flush>:
  * @retval HAL_Status.
  */
HAL_StatusTypeDef COM_Flush(void)
{
  /* Clean the input path */
  __HAL_UART_FLUSH_DRREGISTER(&huart1);
 804fe14:	4b02      	ldr	r3, [pc, #8]	; (804fe20 <COM_Flush+0xc>)
 804fe16:	681b      	ldr	r3, [r3, #0]
  return HAL_OK;
}
 804fe18:	2000      	movs	r0, #0
  __HAL_UART_FLUSH_DRREGISTER(&huart1);
 804fe1a:	685b      	ldr	r3, [r3, #4]
}
 804fe1c:	4770      	bx	lr
 804fe1e:	bf00      	nop
 804fe20:	2000bc74 	.word	0x2000bc74

0804fe24 <Ymodem_Init>:
  * @param None.
  * @retval None.
  */
void Ymodem_Init(void)
{
}
 804fe24:	4770      	bx	lr
	...

0804fe28 <Ymodem_Receive>:
  * @param  puSize The uSize of the file.
  * @param  uFlashDestination where the file has to be downloaded.
  * @retval COM_StatusTypeDef result of reception/programming
  */
COM_StatusTypeDef Ymodem_Receive(uint32_t *puSize, uint32_t uFlashDestination, YMODEM_CallbacksTypeDef *appCb)
{
 804fe28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804fe2c:	b08d      	sub	sp, #52	; 0x34
 804fe2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    *pData = char1;
 804fe32:	4fa0      	ldr	r7, [pc, #640]	; (80500b4 <Ymodem_Receive+0x28c>)
{
 804fe34:	4692      	mov	sl, r2
  uint32_t i;
  uint32_t packet_length;
  uint32_t session_done = 0U;
  uint32_t file_done;
  uint32_t errors = 0U;
  uint32_t session_begin = 0U;
 804fe36:	f04f 0900 	mov.w	r9, #0
 804fe3a:	2600      	movs	r6, #0
 804fe3c:	e0db      	b.n	804fff6 <Ymodem_Receive+0x1ce>
    switch (char1)
 804fe3e:	2b61      	cmp	r3, #97	; 0x61
 804fe40:	d004      	beq.n	804fe4c <Ymodem_Receive+0x24>
 804fe42:	2b72      	cmp	r3, #114	; 0x72
 804fe44:	d076      	beq.n	804ff34 <Ymodem_Receive+0x10c>
 804fe46:	2b41      	cmp	r3, #65	; 0x41
 804fe48:	f040 8084 	bne.w	804ff54 <Ymodem_Receive+0x12c>
        status = HAL_BUSY;
 804fe4c:	2402      	movs	r4, #2
  uint32_t packet_size = 0U;
 804fe4e:	2500      	movs	r5, #0
 804fe50:	e001      	b.n	804fe56 <Ymodem_Receive+0x2e>
        packet_size = PACKET_1K_SIZE;
 804fe52:	f44f 6580 	mov.w	r5, #1024	; 0x400
    *pData = char1;
 804fe56:	f89d 3017 	ldrb.w	r3, [sp, #23]
 804fe5a:	703b      	strb	r3, [r7, #0]
    if (packet_size >= PACKET_SIZE)
 804fe5c:	2d7f      	cmp	r5, #127	; 0x7f
 804fe5e:	d97d      	bls.n	804ff5c <Ymodem_Receive+0x134>
      status = COM_Receive(&pData[PACKET_NUMBER_INDEX], packet_size + PACKET_OVERHEAD_SIZE, uTimeout);
 804fe60:	fa1f fb85 	uxth.w	fp, r5
 804fe64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 804fe68:	f10b 0104 	add.w	r1, fp, #4
 804fe6c:	4892      	ldr	r0, [pc, #584]	; (80500b8 <Ymodem_Receive+0x290>)
 804fe6e:	f7ff ffc9 	bl	804fe04 <COM_Receive>
      if (status == HAL_OK)
 804fe72:	4604      	mov	r4, r0
 804fe74:	2800      	cmp	r0, #0
 804fe76:	d172      	bne.n	804ff5e <Ymodem_Receive+0x136>
        if (pData[PACKET_NUMBER_INDEX] != ((pData[PACKET_CNUMBER_INDEX]) ^ NEGATIVE_BYTE))
 804fe78:	78fb      	ldrb	r3, [r7, #3]
 804fe7a:	78ba      	ldrb	r2, [r7, #2]
 804fe7c:	43db      	mvns	r3, r3
 804fe7e:	b2db      	uxtb	r3, r3
 804fe80:	429a      	cmp	r2, r3
 804fe82:	d16e      	bne.n	804ff62 <Ymodem_Receive+0x13a>
          crc = pData[ packet_size + PACKET_DATA_INDEX ] << 8U;
 804fe84:	197b      	adds	r3, r7, r5
    out ^= 0x1021;
 804fe86:	f241 0e21 	movw	lr, #4129	; 0x1021
          crc = pData[ packet_size + PACKET_DATA_INDEX ] << 8U;
 804fe8a:	791a      	ldrb	r2, [r3, #4]
          crc += pData[ packet_size + PACKET_DATA_INDEX + 1U ];
 804fe8c:	795b      	ldrb	r3, [r3, #5]
 804fe8e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 804fe92:	4a8a      	ldr	r2, [pc, #552]	; (80500bc <Ymodem_Receive+0x294>)
 804fe94:	9301      	str	r3, [sp, #4]
 804fe96:	1c51      	adds	r1, r2, #1
 804fe98:	f10b 33ff 	add.w	r3, fp, #4294967295
 804fe9c:	fa11 f383 	uxtah	r3, r1, r3
      crc = crc_update(crc, *pdata & i);
 804fea0:	f812 cf01 	ldrb.w	ip, [r2, #1]!
 804fea4:	2008      	movs	r0, #8
    for (i = 0x80; i; i >>= 1)
 804fea6:	2180      	movs	r1, #128	; 0x80
  uint16_t xor = crc_in >> 15;
 804fea8:	ea4f 3bd4 	mov.w	fp, r4, lsr #15
  uint16_t out = crc_in << 1;
 804feac:	0064      	lsls	r4, r4, #1
 804feae:	b2a4      	uxth	r4, r4
  if (incr)
 804feb0:	ea1c 0f01 	tst.w	ip, r1
    out++;
 804feb4:	bf1c      	itt	ne
 804feb6:	3401      	addne	r4, #1
 804feb8:	b2a4      	uxthne	r4, r4
  if (xor)
 804feba:	f1bb 0f00 	cmp.w	fp, #0
 804febe:	d001      	beq.n	804fec4 <Ymodem_Receive+0x9c>
    out ^= 0x1021;
 804fec0:	ea84 040e 	eor.w	r4, r4, lr
    for (i = 0x80; i; i >>= 1)
 804fec4:	3801      	subs	r0, #1
 804fec6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 804feca:	d1ed      	bne.n	804fea8 <Ymodem_Receive+0x80>
  for (crc = 0; size > 0; size--, pdata++)
 804fecc:	429a      	cmp	r2, r3
 804fece:	d1e7      	bne.n	804fea0 <Ymodem_Receive+0x78>
 804fed0:	2310      	movs	r3, #16
    out ^= 0x1021;
 804fed2:	f241 0221 	movw	r2, #4129	; 0x1021
  uint16_t xor = crc_in >> 15;
 804fed6:	0be1      	lsrs	r1, r4, #15
  uint16_t out = crc_in << 1;
 804fed8:	0064      	lsls	r4, r4, #1
 804feda:	b2a4      	uxth	r4, r4
  if (xor)
 804fedc:	b101      	cbz	r1, 804fee0 <Ymodem_Receive+0xb8>
    out ^= 0x1021;
 804fede:	4054      	eors	r4, r2
 804fee0:	3b01      	subs	r3, #1
  for (i = 0; i < 16; i++)
 804fee2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 804fee6:	d1f6      	bne.n	804fed6 <Ymodem_Receive+0xae>
          if (crc16(&pData[PACKET_DATA_INDEX], packet_size) != crc)
 804fee8:	9b01      	ldr	r3, [sp, #4]
 804feea:	42a3      	cmp	r3, r4
 804feec:	d139      	bne.n	804ff62 <Ymodem_Receive+0x13a>
              *puSize = filesize;
              file_done = 1U;           /* file reception ended */
              break;
            default:
              /* Normal packet */
              if (m_aPacketData[PACKET_NUMBER_INDEX] != (packets_received & 0xff))
 804feee:	78ba      	ldrb	r2, [r7, #2]
 804fef0:	b2f3      	uxtb	r3, r6
 804fef2:	429a      	cmp	r2, r3
 804fef4:	d17f      	bne.n	804fff6 <Ymodem_Receive+0x1ce>
                /* Serial_PutByte(NAK); */
              }
              else
              {
                /* first packet : header (file name + file size) */
                if (packets_received == 0U)
 804fef6:	2e00      	cmp	r6, #0
 804fef8:	f040 80b8 	bne.w	805006c <Ymodem_Receive+0x244>
                {
                  /* File name packet */
                  if (m_aPacketData[PACKET_DATA_INDEX] != 0U)
 804fefc:	793b      	ldrb	r3, [r7, #4]
 804fefe:	2b00      	cmp	r3, #0
 804ff00:	f040 809b 	bne.w	805003a <Ymodem_Receive+0x212>

                  }
                  /* File header packet is empty, end session */
                  else
                  {
                    Serial_PutByte(ACK);
 804ff04:	2006      	movs	r0, #6
 804ff06:	f7fe f824 	bl	804df52 <Serial_PutByte>
 804ff0a:	4630      	mov	r0, r6
          break;
      }
    }
  }
  return e_result;
}
 804ff0c:	b00d      	add	sp, #52	; 0x34
 804ff0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((COM_Receive(&char1, 1U, uTimeout) == HAL_OK) && (char1 == CA))
 804ff12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 804ff16:	2101      	movs	r1, #1
 804ff18:	f10d 0017 	add.w	r0, sp, #23
 804ff1c:	f7ff ff72 	bl	804fe04 <COM_Receive>
 804ff20:	4604      	mov	r4, r0
 804ff22:	b9c8      	cbnz	r0, 804ff58 <Ymodem_Receive+0x130>
 804ff24:	f89d 3017 	ldrb.w	r3, [sp, #23]
          packet_size = 2U;                               /* specific packet_size to indicate transmission aborted */
 804ff28:	2b18      	cmp	r3, #24
 804ff2a:	bf16      	itet	ne
 804ff2c:	2500      	movne	r5, #0
 804ff2e:	2502      	moveq	r5, #2
 804ff30:	2401      	movne	r4, #1
 804ff32:	e790      	b.n	804fe56 <Ymodem_Receive+0x2e>
        COM_Receive(&char1, 1U, uTimeout);                /* Ymodem startup sequence : rb ==> 0x72 + 0x62 + 0x0D */
 804ff34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 804ff38:	2101      	movs	r1, #1
 804ff3a:	f10d 0017 	add.w	r0, sp, #23
 804ff3e:	f7ff ff61 	bl	804fe04 <COM_Receive>
        COM_Receive(&char1, 1U, uTimeout);
 804ff42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 804ff46:	2101      	movs	r1, #1
 804ff48:	f10d 0017 	add.w	r0, sp, #23
 804ff4c:	f7ff ff5a 	bl	804fe04 <COM_Receive>
        packet_size = 3U;                                 /* specific packet_size to indicate transmission started */
 804ff50:	2503      	movs	r5, #3
 804ff52:	e780      	b.n	804fe56 <Ymodem_Receive+0x2e>
        status = HAL_ERROR;
 804ff54:	2401      	movs	r4, #1
 804ff56:	e77a      	b.n	804fe4e <Ymodem_Receive+0x26>
          status = HAL_ERROR;
 804ff58:	2401      	movs	r4, #1
 804ff5a:	e77c      	b.n	804fe56 <Ymodem_Receive+0x2e>
      switch (ReceivePacket(m_aPacketData, &packet_length, DOWNLOAD_TIMEOUT))
 804ff5c:	b17c      	cbz	r4, 804ff7e <Ymodem_Receive+0x156>
 804ff5e:	2c02      	cmp	r4, #2
 804ff60:	d008      	beq.n	804ff74 <Ymodem_Receive+0x14c>
          if (session_begin > 0U)
 804ff62:	f1b9 0f00 	cmp.w	r9, #0
 804ff66:	d001      	beq.n	804ff6c <Ymodem_Receive+0x144>
            errors ++;
 804ff68:	f108 0801 	add.w	r8, r8, #1
          if (errors > MAX_ERRORS)
 804ff6c:	f1b8 0f05 	cmp.w	r8, #5
 804ff70:	f240 8098 	bls.w	80500a4 <Ymodem_Receive+0x27c>
          Serial_PutByte(CA);
 804ff74:	2018      	movs	r0, #24
 804ff76:	f7fd ffec 	bl	804df52 <Serial_PutByte>
          Serial_PutByte(CA);
 804ff7a:	2018      	movs	r0, #24
 804ff7c:	e00d      	b.n	804ff9a <Ymodem_Receive+0x172>
          switch (packet_length)
 804ff7e:	2d02      	cmp	r5, #2
 804ff80:	d00a      	beq.n	804ff98 <Ymodem_Receive+0x170>
 804ff82:	2d03      	cmp	r5, #3
 804ff84:	d037      	beq.n	804fff6 <Ymodem_Receive+0x1ce>
 804ff86:	2d00      	cmp	r5, #0
 804ff88:	d1b1      	bne.n	804feee <Ymodem_Receive+0xc6>
              Serial_PutByte(ACK);
 804ff8a:	2006      	movs	r0, #6
 804ff8c:	f7fd ffe1 	bl	804df52 <Serial_PutByte>
              *puSize = filesize;
 804ff90:	9a02      	ldr	r2, [sp, #8]
 804ff92:	9b06      	ldr	r3, [sp, #24]
 804ff94:	6013      	str	r3, [r2, #0]
 804ff96:	e750      	b.n	804fe3a <Ymodem_Receive+0x12>
              Serial_PutByte(ACK);
 804ff98:	2006      	movs	r0, #6
          Serial_PutByte(CA);
 804ff9a:	f7fd ffda 	bl	804df52 <Serial_PutByte>
          break;
 804ff9e:	e063      	b.n	8050068 <Ymodem_Receive+0x240>
                      m_aFileName[i++] = *file_ptr++;
 804ffa0:	5483      	strb	r3, [r0, r2]
 804ffa2:	3201      	adds	r2, #1
                    while ((*file_ptr != 0U) && (i < FILE_NAME_LENGTH))
 804ffa4:	f811 3b01 	ldrb.w	r3, [r1], #1
 804ffa8:	b10b      	cbz	r3, 804ffae <Ymodem_Receive+0x186>
 804ffaa:	2a40      	cmp	r2, #64	; 0x40
 804ffac:	d1f8      	bne.n	804ffa0 <Ymodem_Receive+0x178>
                    m_aFileName[i++] = '\0';
 804ffae:	2300      	movs	r3, #0
 804ffb0:	5483      	strb	r3, [r0, r2]
 804ffb2:	a807      	add	r0, sp, #28
                    while ((*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 804ffb4:	5cca      	ldrb	r2, [r1, r3]
 804ffb6:	2a20      	cmp	r2, #32
 804ffb8:	d001      	beq.n	804ffbe <Ymodem_Receive+0x196>
 804ffba:	2b10      	cmp	r3, #16
 804ffbc:	d141      	bne.n	8050042 <Ymodem_Receive+0x21a>
                    file_size[i++] = '\0';
 804ffbe:	aa0c      	add	r2, sp, #48	; 0x30
 804ffc0:	4413      	add	r3, r2
                    Str2Int(file_size, &filesize);
 804ffc2:	a906      	add	r1, sp, #24
                    file_size[i++] = '\0';
 804ffc4:	2200      	movs	r2, #0
 804ffc6:	f803 2c14 	strb.w	r2, [r3, #-20]
                    Str2Int(file_size, &filesize);
 804ffca:	f7fd ff74 	bl	804deb6 <Str2Int>
                    if (appCb->Ymodem_HeaderPktRxCpltCallback((uint32_t) filesize) == HAL_OK)
 804ffce:	f8da 3000 	ldr.w	r3, [sl]
 804ffd2:	9806      	ldr	r0, [sp, #24]
 804ffd4:	4798      	blx	r3
 804ffd6:	4604      	mov	r4, r0
 804ffd8:	bbb0      	cbnz	r0, 8050048 <Ymodem_Receive+0x220>
                      Serial_PutByte(ACK);
 804ffda:	2006      	movs	r0, #6
 804ffdc:	f7fd ffb9 	bl	804df52 <Serial_PutByte>
                      COM_Flush();
 804ffe0:	f7ff ff18 	bl	804fe14 <COM_Flush>
                      Serial_PutByte(CRC16);
 804ffe4:	2043      	movs	r0, #67	; 0x43
                    Serial_PutByte(ACK);
 804ffe6:	f7fd ffb4 	bl	804df52 <Serial_PutByte>
 804ffea:	4620      	mov	r0, r4
                packets_received ++;
 804ffec:	3601      	adds	r6, #1
                session_begin = 1U;
 804ffee:	f04f 0901 	mov.w	r9, #1
    while ((file_done == 0U) && (e_result == COM_OK))
 804fff2:	2800      	cmp	r0, #0
 804fff4:	d18a      	bne.n	804ff0c <Ymodem_Receive+0xe4>
 804fff6:	f04f 0800 	mov.w	r8, #0
  WRITE_REG(IWDG->KR, IWDG_KEY_RELOAD);
 804fffa:	4b31      	ldr	r3, [pc, #196]	; (80500c0 <Ymodem_Receive+0x298>)
 804fffc:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8050000:	601a      	str	r2, [r3, #0]
  status = (HAL_StatusTypeDef)COM_Receive(&char1, 1, uTimeout);
 8050002:	2101      	movs	r1, #1
 8050004:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8050008:	f10d 0017 	add.w	r0, sp, #23
 805000c:	f7ff fefa 	bl	804fe04 <COM_Receive>
 8050010:	4604      	mov	r4, r0
 8050012:	4605      	mov	r5, r0
  if (status == HAL_OK)
 8050014:	2800      	cmp	r0, #0
 8050016:	d1a2      	bne.n	804ff5e <Ymodem_Receive+0x136>
    switch (char1)
 8050018:	f89d 3017 	ldrb.w	r3, [sp, #23]
 805001c:	2b18      	cmp	r3, #24
 805001e:	f43f af78 	beq.w	804ff12 <Ymodem_Receive+0xea>
 8050022:	f63f af0c 	bhi.w	804fe3e <Ymodem_Receive+0x16>
 8050026:	2b02      	cmp	r3, #2
 8050028:	f43f af13 	beq.w	804fe52 <Ymodem_Receive+0x2a>
 805002c:	2b04      	cmp	r3, #4
 805002e:	f43f af0e 	beq.w	804fe4e <Ymodem_Receive+0x26>
 8050032:	2b01      	cmp	r3, #1
 8050034:	d18e      	bne.n	804ff54 <Ymodem_Receive+0x12c>
        packet_size = PACKET_SIZE;
 8050036:	2580      	movs	r5, #128	; 0x80
 8050038:	e70d      	b.n	804fe56 <Ymodem_Receive+0x2e>
 805003a:	4632      	mov	r2, r6
                    file_ptr = m_aPacketData + PACKET_DATA_INDEX;
 805003c:	4921      	ldr	r1, [pc, #132]	; (80500c4 <Ymodem_Receive+0x29c>)
 805003e:	4822      	ldr	r0, [pc, #136]	; (80500c8 <Ymodem_Receive+0x2a0>)
 8050040:	e7b0      	b.n	804ffa4 <Ymodem_Receive+0x17c>
                      file_size[i++] = *file_ptr++;
 8050042:	54c2      	strb	r2, [r0, r3]
 8050044:	3301      	adds	r3, #1
 8050046:	e7b5      	b.n	804ffb4 <Ymodem_Receive+0x18c>
                      tmp = CA;
 8050048:	ac0c      	add	r4, sp, #48	; 0x30
 805004a:	2318      	movs	r3, #24
 805004c:	f804 3d1a 	strb.w	r3, [r4, #-26]!
                      COM_Transmit(&tmp, 1U, NAK_TIMEOUT);
 8050050:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8050054:	2101      	movs	r1, #1
 8050056:	4620      	mov	r0, r4
 8050058:	f7ff fecc 	bl	804fdf4 <COM_Transmit>
                      COM_Transmit(&tmp, 1U, NAK_TIMEOUT);
 805005c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8050060:	2101      	movs	r1, #1
 8050062:	4620      	mov	r0, r4
 8050064:	f7ff fec6 	bl	804fdf4 <COM_Transmit>
                session_begin = 1U;
 8050068:	2002      	movs	r0, #2
  return e_result;
 805006a:	e74f      	b.n	804ff0c <Ymodem_Receive+0xe4>
                  if (appCb->Ymodem_DataPktRxCpltCallback((uint8_t *) ramsource, uFlashDestination,
 805006c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8050070:	9903      	ldr	r1, [sp, #12]
 8050072:	4814      	ldr	r0, [pc, #80]	; (80500c4 <Ymodem_Receive+0x29c>)
 8050074:	462a      	mov	r2, r5
 8050076:	4798      	blx	r3
 8050078:	4604      	mov	r4, r0
 805007a:	b908      	cbnz	r0, 8050080 <Ymodem_Receive+0x258>
                    Serial_PutByte(ACK);
 805007c:	2006      	movs	r0, #6
 805007e:	e7b2      	b.n	804ffe6 <Ymodem_Receive+0x1be>
                    tmp = CA;
 8050080:	ac0c      	add	r4, sp, #48	; 0x30
 8050082:	2318      	movs	r3, #24
 8050084:	f804 3d1a 	strb.w	r3, [r4, #-26]!
                    COM_Transmit(&tmp, 1U, NAK_TIMEOUT);
 8050088:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 805008c:	2101      	movs	r1, #1
 805008e:	4620      	mov	r0, r4
 8050090:	f7ff feb0 	bl	804fdf4 <COM_Transmit>
                    COM_Transmit(&tmp, 1U, NAK_TIMEOUT);
 8050094:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8050098:	2101      	movs	r1, #1
 805009a:	4620      	mov	r0, r4
 805009c:	f7ff feaa 	bl	804fdf4 <COM_Transmit>
                    e_result = COM_ERROR;
 80500a0:	2001      	movs	r0, #1
 80500a2:	e7a3      	b.n	804ffec <Ymodem_Receive+0x1c4>
            Serial_PutByte(CRC16); /* Ask for a packet */
 80500a4:	2043      	movs	r0, #67	; 0x43
 80500a6:	f7fd ff54 	bl	804df52 <Serial_PutByte>
            printf("\b.");         /* Replace C char by . on display console */
 80500aa:	4808      	ldr	r0, [pc, #32]	; (80500cc <Ymodem_Receive+0x2a4>)
 80500ac:	f000 f856 	bl	805015c <iprintf>
 80500b0:	e7a3      	b.n	804fffa <Ymodem_Receive+0x1d2>
 80500b2:	bf00      	nop
 80500b4:	2000b7e4 	.word	0x2000b7e4
 80500b8:	2000b7e6 	.word	0x2000b7e6
 80500bc:	2000b7e7 	.word	0x2000b7e7
 80500c0:	40003000 	.word	0x40003000
 80500c4:	2000b7e8 	.word	0x2000b7e8
 80500c8:	2000e510 	.word	0x2000e510
 80500cc:	08052acd 	.word	0x08052acd

080500d0 <__libc_init_array>:
 80500d0:	b570      	push	{r4, r5, r6, lr}
 80500d2:	4e0d      	ldr	r6, [pc, #52]	; (8050108 <__libc_init_array+0x38>)
 80500d4:	4c0d      	ldr	r4, [pc, #52]	; (805010c <__libc_init_array+0x3c>)
 80500d6:	1ba4      	subs	r4, r4, r6
 80500d8:	10a4      	asrs	r4, r4, #2
 80500da:	2500      	movs	r5, #0
 80500dc:	42a5      	cmp	r5, r4
 80500de:	d109      	bne.n	80500f4 <__libc_init_array+0x24>
 80500e0:	4e0b      	ldr	r6, [pc, #44]	; (8050110 <__libc_init_array+0x40>)
 80500e2:	4c0c      	ldr	r4, [pc, #48]	; (8050114 <__libc_init_array+0x44>)
 80500e4:	f001 fb98 	bl	8051818 <_init>
 80500e8:	1ba4      	subs	r4, r4, r6
 80500ea:	10a4      	asrs	r4, r4, #2
 80500ec:	2500      	movs	r5, #0
 80500ee:	42a5      	cmp	r5, r4
 80500f0:	d105      	bne.n	80500fe <__libc_init_array+0x2e>
 80500f2:	bd70      	pop	{r4, r5, r6, pc}
 80500f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80500f8:	4798      	blx	r3
 80500fa:	3501      	adds	r5, #1
 80500fc:	e7ee      	b.n	80500dc <__libc_init_array+0xc>
 80500fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8050102:	4798      	blx	r3
 8050104:	3501      	adds	r5, #1
 8050106:	e7f2      	b.n	80500ee <__libc_init_array+0x1e>
 8050108:	08052b70 	.word	0x08052b70
 805010c:	08052b70 	.word	0x08052b70
 8050110:	08052b70 	.word	0x08052b70
 8050114:	08052b74 	.word	0x08052b74

08050118 <memcmp>:
 8050118:	b530      	push	{r4, r5, lr}
 805011a:	2400      	movs	r4, #0
 805011c:	42a2      	cmp	r2, r4
 805011e:	d101      	bne.n	8050124 <memcmp+0xc>
 8050120:	2000      	movs	r0, #0
 8050122:	e007      	b.n	8050134 <memcmp+0x1c>
 8050124:	5d03      	ldrb	r3, [r0, r4]
 8050126:	3401      	adds	r4, #1
 8050128:	190d      	adds	r5, r1, r4
 805012a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 805012e:	42ab      	cmp	r3, r5
 8050130:	d0f4      	beq.n	805011c <memcmp+0x4>
 8050132:	1b58      	subs	r0, r3, r5
 8050134:	bd30      	pop	{r4, r5, pc}

08050136 <memcpy>:
 8050136:	b510      	push	{r4, lr}
 8050138:	1e43      	subs	r3, r0, #1
 805013a:	440a      	add	r2, r1
 805013c:	4291      	cmp	r1, r2
 805013e:	d100      	bne.n	8050142 <memcpy+0xc>
 8050140:	bd10      	pop	{r4, pc}
 8050142:	f811 4b01 	ldrb.w	r4, [r1], #1
 8050146:	f803 4f01 	strb.w	r4, [r3, #1]!
 805014a:	e7f7      	b.n	805013c <memcpy+0x6>

0805014c <memset>:
 805014c:	4402      	add	r2, r0
 805014e:	4603      	mov	r3, r0
 8050150:	4293      	cmp	r3, r2
 8050152:	d100      	bne.n	8050156 <memset+0xa>
 8050154:	4770      	bx	lr
 8050156:	f803 1b01 	strb.w	r1, [r3], #1
 805015a:	e7f9      	b.n	8050150 <memset+0x4>

0805015c <iprintf>:
 805015c:	b40f      	push	{r0, r1, r2, r3}
 805015e:	4b0a      	ldr	r3, [pc, #40]	; (8050188 <iprintf+0x2c>)
 8050160:	b513      	push	{r0, r1, r4, lr}
 8050162:	681c      	ldr	r4, [r3, #0]
 8050164:	b124      	cbz	r4, 8050170 <iprintf+0x14>
 8050166:	69a3      	ldr	r3, [r4, #24]
 8050168:	b913      	cbnz	r3, 8050170 <iprintf+0x14>
 805016a:	4620      	mov	r0, r4
 805016c:	f000 fb0a 	bl	8050784 <__sinit>
 8050170:	ab05      	add	r3, sp, #20
 8050172:	9a04      	ldr	r2, [sp, #16]
 8050174:	68a1      	ldr	r1, [r4, #8]
 8050176:	9301      	str	r3, [sp, #4]
 8050178:	4620      	mov	r0, r4
 805017a:	f000 fe1d 	bl	8050db8 <_vfiprintf_r>
 805017e:	b002      	add	sp, #8
 8050180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8050184:	b004      	add	sp, #16
 8050186:	4770      	bx	lr
 8050188:	200012b8 	.word	0x200012b8

0805018c <_puts_r>:
 805018c:	b570      	push	{r4, r5, r6, lr}
 805018e:	460e      	mov	r6, r1
 8050190:	4605      	mov	r5, r0
 8050192:	b118      	cbz	r0, 805019c <_puts_r+0x10>
 8050194:	6983      	ldr	r3, [r0, #24]
 8050196:	b90b      	cbnz	r3, 805019c <_puts_r+0x10>
 8050198:	f000 faf4 	bl	8050784 <__sinit>
 805019c:	69ab      	ldr	r3, [r5, #24]
 805019e:	68ac      	ldr	r4, [r5, #8]
 80501a0:	b913      	cbnz	r3, 80501a8 <_puts_r+0x1c>
 80501a2:	4628      	mov	r0, r5
 80501a4:	f000 faee 	bl	8050784 <__sinit>
 80501a8:	4b23      	ldr	r3, [pc, #140]	; (8050238 <_puts_r+0xac>)
 80501aa:	429c      	cmp	r4, r3
 80501ac:	d117      	bne.n	80501de <_puts_r+0x52>
 80501ae:	686c      	ldr	r4, [r5, #4]
 80501b0:	89a3      	ldrh	r3, [r4, #12]
 80501b2:	071b      	lsls	r3, r3, #28
 80501b4:	d51d      	bpl.n	80501f2 <_puts_r+0x66>
 80501b6:	6923      	ldr	r3, [r4, #16]
 80501b8:	b1db      	cbz	r3, 80501f2 <_puts_r+0x66>
 80501ba:	3e01      	subs	r6, #1
 80501bc:	68a3      	ldr	r3, [r4, #8]
 80501be:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80501c2:	3b01      	subs	r3, #1
 80501c4:	60a3      	str	r3, [r4, #8]
 80501c6:	b9e9      	cbnz	r1, 8050204 <_puts_r+0x78>
 80501c8:	2b00      	cmp	r3, #0
 80501ca:	da2e      	bge.n	805022a <_puts_r+0x9e>
 80501cc:	4622      	mov	r2, r4
 80501ce:	210a      	movs	r1, #10
 80501d0:	4628      	mov	r0, r5
 80501d2:	f000 f927 	bl	8050424 <__swbuf_r>
 80501d6:	3001      	adds	r0, #1
 80501d8:	d011      	beq.n	80501fe <_puts_r+0x72>
 80501da:	200a      	movs	r0, #10
 80501dc:	e011      	b.n	8050202 <_puts_r+0x76>
 80501de:	4b17      	ldr	r3, [pc, #92]	; (805023c <_puts_r+0xb0>)
 80501e0:	429c      	cmp	r4, r3
 80501e2:	d101      	bne.n	80501e8 <_puts_r+0x5c>
 80501e4:	68ac      	ldr	r4, [r5, #8]
 80501e6:	e7e3      	b.n	80501b0 <_puts_r+0x24>
 80501e8:	4b15      	ldr	r3, [pc, #84]	; (8050240 <_puts_r+0xb4>)
 80501ea:	429c      	cmp	r4, r3
 80501ec:	bf08      	it	eq
 80501ee:	68ec      	ldreq	r4, [r5, #12]
 80501f0:	e7de      	b.n	80501b0 <_puts_r+0x24>
 80501f2:	4621      	mov	r1, r4
 80501f4:	4628      	mov	r0, r5
 80501f6:	f000 f967 	bl	80504c8 <__swsetup_r>
 80501fa:	2800      	cmp	r0, #0
 80501fc:	d0dd      	beq.n	80501ba <_puts_r+0x2e>
 80501fe:	f04f 30ff 	mov.w	r0, #4294967295
 8050202:	bd70      	pop	{r4, r5, r6, pc}
 8050204:	2b00      	cmp	r3, #0
 8050206:	da04      	bge.n	8050212 <_puts_r+0x86>
 8050208:	69a2      	ldr	r2, [r4, #24]
 805020a:	429a      	cmp	r2, r3
 805020c:	dc06      	bgt.n	805021c <_puts_r+0x90>
 805020e:	290a      	cmp	r1, #10
 8050210:	d004      	beq.n	805021c <_puts_r+0x90>
 8050212:	6823      	ldr	r3, [r4, #0]
 8050214:	1c5a      	adds	r2, r3, #1
 8050216:	6022      	str	r2, [r4, #0]
 8050218:	7019      	strb	r1, [r3, #0]
 805021a:	e7cf      	b.n	80501bc <_puts_r+0x30>
 805021c:	4622      	mov	r2, r4
 805021e:	4628      	mov	r0, r5
 8050220:	f000 f900 	bl	8050424 <__swbuf_r>
 8050224:	3001      	adds	r0, #1
 8050226:	d1c9      	bne.n	80501bc <_puts_r+0x30>
 8050228:	e7e9      	b.n	80501fe <_puts_r+0x72>
 805022a:	6823      	ldr	r3, [r4, #0]
 805022c:	200a      	movs	r0, #10
 805022e:	1c5a      	adds	r2, r3, #1
 8050230:	6022      	str	r2, [r4, #0]
 8050232:	7018      	strb	r0, [r3, #0]
 8050234:	e7e5      	b.n	8050202 <_puts_r+0x76>
 8050236:	bf00      	nop
 8050238:	08052af4 	.word	0x08052af4
 805023c:	08052b14 	.word	0x08052b14
 8050240:	08052ad4 	.word	0x08052ad4

08050244 <puts>:
 8050244:	4b02      	ldr	r3, [pc, #8]	; (8050250 <puts+0xc>)
 8050246:	4601      	mov	r1, r0
 8050248:	6818      	ldr	r0, [r3, #0]
 805024a:	f7ff bf9f 	b.w	805018c <_puts_r>
 805024e:	bf00      	nop
 8050250:	200012b8 	.word	0x200012b8

08050254 <setvbuf>:
 8050254:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8050258:	461d      	mov	r5, r3
 805025a:	4b51      	ldr	r3, [pc, #324]	; (80503a0 <setvbuf+0x14c>)
 805025c:	681e      	ldr	r6, [r3, #0]
 805025e:	4604      	mov	r4, r0
 8050260:	460f      	mov	r7, r1
 8050262:	4690      	mov	r8, r2
 8050264:	b126      	cbz	r6, 8050270 <setvbuf+0x1c>
 8050266:	69b3      	ldr	r3, [r6, #24]
 8050268:	b913      	cbnz	r3, 8050270 <setvbuf+0x1c>
 805026a:	4630      	mov	r0, r6
 805026c:	f000 fa8a 	bl	8050784 <__sinit>
 8050270:	4b4c      	ldr	r3, [pc, #304]	; (80503a4 <setvbuf+0x150>)
 8050272:	429c      	cmp	r4, r3
 8050274:	d152      	bne.n	805031c <setvbuf+0xc8>
 8050276:	6874      	ldr	r4, [r6, #4]
 8050278:	f1b8 0f02 	cmp.w	r8, #2
 805027c:	d006      	beq.n	805028c <setvbuf+0x38>
 805027e:	f1b8 0f01 	cmp.w	r8, #1
 8050282:	f200 8089 	bhi.w	8050398 <setvbuf+0x144>
 8050286:	2d00      	cmp	r5, #0
 8050288:	f2c0 8086 	blt.w	8050398 <setvbuf+0x144>
 805028c:	4621      	mov	r1, r4
 805028e:	4630      	mov	r0, r6
 8050290:	f000 fa0e 	bl	80506b0 <_fflush_r>
 8050294:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8050296:	b141      	cbz	r1, 80502aa <setvbuf+0x56>
 8050298:	f104 0344 	add.w	r3, r4, #68	; 0x44
 805029c:	4299      	cmp	r1, r3
 805029e:	d002      	beq.n	80502a6 <setvbuf+0x52>
 80502a0:	4630      	mov	r0, r6
 80502a2:	f000 fb65 	bl	8050970 <_free_r>
 80502a6:	2300      	movs	r3, #0
 80502a8:	6363      	str	r3, [r4, #52]	; 0x34
 80502aa:	2300      	movs	r3, #0
 80502ac:	61a3      	str	r3, [r4, #24]
 80502ae:	6063      	str	r3, [r4, #4]
 80502b0:	89a3      	ldrh	r3, [r4, #12]
 80502b2:	061b      	lsls	r3, r3, #24
 80502b4:	d503      	bpl.n	80502be <setvbuf+0x6a>
 80502b6:	6921      	ldr	r1, [r4, #16]
 80502b8:	4630      	mov	r0, r6
 80502ba:	f000 fb59 	bl	8050970 <_free_r>
 80502be:	89a3      	ldrh	r3, [r4, #12]
 80502c0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80502c4:	f023 0303 	bic.w	r3, r3, #3
 80502c8:	f1b8 0f02 	cmp.w	r8, #2
 80502cc:	81a3      	strh	r3, [r4, #12]
 80502ce:	d05d      	beq.n	805038c <setvbuf+0x138>
 80502d0:	ab01      	add	r3, sp, #4
 80502d2:	466a      	mov	r2, sp
 80502d4:	4621      	mov	r1, r4
 80502d6:	4630      	mov	r0, r6
 80502d8:	f000 fade 	bl	8050898 <__swhatbuf_r>
 80502dc:	89a3      	ldrh	r3, [r4, #12]
 80502de:	4318      	orrs	r0, r3
 80502e0:	81a0      	strh	r0, [r4, #12]
 80502e2:	bb2d      	cbnz	r5, 8050330 <setvbuf+0xdc>
 80502e4:	9d00      	ldr	r5, [sp, #0]
 80502e6:	4628      	mov	r0, r5
 80502e8:	f000 fb3a 	bl	8050960 <malloc>
 80502ec:	4607      	mov	r7, r0
 80502ee:	2800      	cmp	r0, #0
 80502f0:	d14e      	bne.n	8050390 <setvbuf+0x13c>
 80502f2:	f8dd 9000 	ldr.w	r9, [sp]
 80502f6:	45a9      	cmp	r9, r5
 80502f8:	d13c      	bne.n	8050374 <setvbuf+0x120>
 80502fa:	f04f 30ff 	mov.w	r0, #4294967295
 80502fe:	89a3      	ldrh	r3, [r4, #12]
 8050300:	f043 0302 	orr.w	r3, r3, #2
 8050304:	81a3      	strh	r3, [r4, #12]
 8050306:	2300      	movs	r3, #0
 8050308:	60a3      	str	r3, [r4, #8]
 805030a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 805030e:	6023      	str	r3, [r4, #0]
 8050310:	6123      	str	r3, [r4, #16]
 8050312:	2301      	movs	r3, #1
 8050314:	6163      	str	r3, [r4, #20]
 8050316:	b003      	add	sp, #12
 8050318:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 805031c:	4b22      	ldr	r3, [pc, #136]	; (80503a8 <setvbuf+0x154>)
 805031e:	429c      	cmp	r4, r3
 8050320:	d101      	bne.n	8050326 <setvbuf+0xd2>
 8050322:	68b4      	ldr	r4, [r6, #8]
 8050324:	e7a8      	b.n	8050278 <setvbuf+0x24>
 8050326:	4b21      	ldr	r3, [pc, #132]	; (80503ac <setvbuf+0x158>)
 8050328:	429c      	cmp	r4, r3
 805032a:	bf08      	it	eq
 805032c:	68f4      	ldreq	r4, [r6, #12]
 805032e:	e7a3      	b.n	8050278 <setvbuf+0x24>
 8050330:	2f00      	cmp	r7, #0
 8050332:	d0d8      	beq.n	80502e6 <setvbuf+0x92>
 8050334:	69b3      	ldr	r3, [r6, #24]
 8050336:	b913      	cbnz	r3, 805033e <setvbuf+0xea>
 8050338:	4630      	mov	r0, r6
 805033a:	f000 fa23 	bl	8050784 <__sinit>
 805033e:	f1b8 0f01 	cmp.w	r8, #1
 8050342:	bf08      	it	eq
 8050344:	89a3      	ldrheq	r3, [r4, #12]
 8050346:	6027      	str	r7, [r4, #0]
 8050348:	bf04      	itt	eq
 805034a:	f043 0301 	orreq.w	r3, r3, #1
 805034e:	81a3      	strheq	r3, [r4, #12]
 8050350:	89a3      	ldrh	r3, [r4, #12]
 8050352:	f013 0008 	ands.w	r0, r3, #8
 8050356:	e9c4 7504 	strd	r7, r5, [r4, #16]
 805035a:	d01b      	beq.n	8050394 <setvbuf+0x140>
 805035c:	f013 0001 	ands.w	r0, r3, #1
 8050360:	bf18      	it	ne
 8050362:	426d      	negne	r5, r5
 8050364:	f04f 0300 	mov.w	r3, #0
 8050368:	bf1d      	ittte	ne
 805036a:	60a3      	strne	r3, [r4, #8]
 805036c:	61a5      	strne	r5, [r4, #24]
 805036e:	4618      	movne	r0, r3
 8050370:	60a5      	streq	r5, [r4, #8]
 8050372:	e7d0      	b.n	8050316 <setvbuf+0xc2>
 8050374:	4648      	mov	r0, r9
 8050376:	f000 faf3 	bl	8050960 <malloc>
 805037a:	4607      	mov	r7, r0
 805037c:	2800      	cmp	r0, #0
 805037e:	d0bc      	beq.n	80502fa <setvbuf+0xa6>
 8050380:	89a3      	ldrh	r3, [r4, #12]
 8050382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8050386:	81a3      	strh	r3, [r4, #12]
 8050388:	464d      	mov	r5, r9
 805038a:	e7d3      	b.n	8050334 <setvbuf+0xe0>
 805038c:	2000      	movs	r0, #0
 805038e:	e7b6      	b.n	80502fe <setvbuf+0xaa>
 8050390:	46a9      	mov	r9, r5
 8050392:	e7f5      	b.n	8050380 <setvbuf+0x12c>
 8050394:	60a0      	str	r0, [r4, #8]
 8050396:	e7be      	b.n	8050316 <setvbuf+0xc2>
 8050398:	f04f 30ff 	mov.w	r0, #4294967295
 805039c:	e7bb      	b.n	8050316 <setvbuf+0xc2>
 805039e:	bf00      	nop
 80503a0:	200012b8 	.word	0x200012b8
 80503a4:	08052af4 	.word	0x08052af4
 80503a8:	08052b14 	.word	0x08052b14
 80503ac:	08052ad4 	.word	0x08052ad4

080503b0 <_vsniprintf_r>:
 80503b0:	b530      	push	{r4, r5, lr}
 80503b2:	1e14      	subs	r4, r2, #0
 80503b4:	4605      	mov	r5, r0
 80503b6:	b09b      	sub	sp, #108	; 0x6c
 80503b8:	4618      	mov	r0, r3
 80503ba:	da05      	bge.n	80503c8 <_vsniprintf_r+0x18>
 80503bc:	238b      	movs	r3, #139	; 0x8b
 80503be:	602b      	str	r3, [r5, #0]
 80503c0:	f04f 30ff 	mov.w	r0, #4294967295
 80503c4:	b01b      	add	sp, #108	; 0x6c
 80503c6:	bd30      	pop	{r4, r5, pc}
 80503c8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80503cc:	f8ad 300c 	strh.w	r3, [sp, #12]
 80503d0:	bf14      	ite	ne
 80503d2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80503d6:	4623      	moveq	r3, r4
 80503d8:	9302      	str	r3, [sp, #8]
 80503da:	9305      	str	r3, [sp, #20]
 80503dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80503e0:	9100      	str	r1, [sp, #0]
 80503e2:	9104      	str	r1, [sp, #16]
 80503e4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80503e8:	4602      	mov	r2, r0
 80503ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80503ec:	4669      	mov	r1, sp
 80503ee:	4628      	mov	r0, r5
 80503f0:	f000 fbc0 	bl	8050b74 <_svfiprintf_r>
 80503f4:	1c43      	adds	r3, r0, #1
 80503f6:	bfbc      	itt	lt
 80503f8:	238b      	movlt	r3, #139	; 0x8b
 80503fa:	602b      	strlt	r3, [r5, #0]
 80503fc:	2c00      	cmp	r4, #0
 80503fe:	d0e1      	beq.n	80503c4 <_vsniprintf_r+0x14>
 8050400:	9b00      	ldr	r3, [sp, #0]
 8050402:	2200      	movs	r2, #0
 8050404:	701a      	strb	r2, [r3, #0]
 8050406:	e7dd      	b.n	80503c4 <_vsniprintf_r+0x14>

08050408 <vsniprintf>:
 8050408:	b507      	push	{r0, r1, r2, lr}
 805040a:	9300      	str	r3, [sp, #0]
 805040c:	4613      	mov	r3, r2
 805040e:	460a      	mov	r2, r1
 8050410:	4601      	mov	r1, r0
 8050412:	4803      	ldr	r0, [pc, #12]	; (8050420 <vsniprintf+0x18>)
 8050414:	6800      	ldr	r0, [r0, #0]
 8050416:	f7ff ffcb 	bl	80503b0 <_vsniprintf_r>
 805041a:	b003      	add	sp, #12
 805041c:	f85d fb04 	ldr.w	pc, [sp], #4
 8050420:	200012b8 	.word	0x200012b8

08050424 <__swbuf_r>:
 8050424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8050426:	460e      	mov	r6, r1
 8050428:	4614      	mov	r4, r2
 805042a:	4605      	mov	r5, r0
 805042c:	b118      	cbz	r0, 8050436 <__swbuf_r+0x12>
 805042e:	6983      	ldr	r3, [r0, #24]
 8050430:	b90b      	cbnz	r3, 8050436 <__swbuf_r+0x12>
 8050432:	f000 f9a7 	bl	8050784 <__sinit>
 8050436:	4b21      	ldr	r3, [pc, #132]	; (80504bc <__swbuf_r+0x98>)
 8050438:	429c      	cmp	r4, r3
 805043a:	d12a      	bne.n	8050492 <__swbuf_r+0x6e>
 805043c:	686c      	ldr	r4, [r5, #4]
 805043e:	69a3      	ldr	r3, [r4, #24]
 8050440:	60a3      	str	r3, [r4, #8]
 8050442:	89a3      	ldrh	r3, [r4, #12]
 8050444:	071a      	lsls	r2, r3, #28
 8050446:	d52e      	bpl.n	80504a6 <__swbuf_r+0x82>
 8050448:	6923      	ldr	r3, [r4, #16]
 805044a:	b363      	cbz	r3, 80504a6 <__swbuf_r+0x82>
 805044c:	6923      	ldr	r3, [r4, #16]
 805044e:	6820      	ldr	r0, [r4, #0]
 8050450:	1ac0      	subs	r0, r0, r3
 8050452:	6963      	ldr	r3, [r4, #20]
 8050454:	b2f6      	uxtb	r6, r6
 8050456:	4283      	cmp	r3, r0
 8050458:	4637      	mov	r7, r6
 805045a:	dc04      	bgt.n	8050466 <__swbuf_r+0x42>
 805045c:	4621      	mov	r1, r4
 805045e:	4628      	mov	r0, r5
 8050460:	f000 f926 	bl	80506b0 <_fflush_r>
 8050464:	bb28      	cbnz	r0, 80504b2 <__swbuf_r+0x8e>
 8050466:	68a3      	ldr	r3, [r4, #8]
 8050468:	3b01      	subs	r3, #1
 805046a:	60a3      	str	r3, [r4, #8]
 805046c:	6823      	ldr	r3, [r4, #0]
 805046e:	1c5a      	adds	r2, r3, #1
 8050470:	6022      	str	r2, [r4, #0]
 8050472:	701e      	strb	r6, [r3, #0]
 8050474:	6963      	ldr	r3, [r4, #20]
 8050476:	3001      	adds	r0, #1
 8050478:	4283      	cmp	r3, r0
 805047a:	d004      	beq.n	8050486 <__swbuf_r+0x62>
 805047c:	89a3      	ldrh	r3, [r4, #12]
 805047e:	07db      	lsls	r3, r3, #31
 8050480:	d519      	bpl.n	80504b6 <__swbuf_r+0x92>
 8050482:	2e0a      	cmp	r6, #10
 8050484:	d117      	bne.n	80504b6 <__swbuf_r+0x92>
 8050486:	4621      	mov	r1, r4
 8050488:	4628      	mov	r0, r5
 805048a:	f000 f911 	bl	80506b0 <_fflush_r>
 805048e:	b190      	cbz	r0, 80504b6 <__swbuf_r+0x92>
 8050490:	e00f      	b.n	80504b2 <__swbuf_r+0x8e>
 8050492:	4b0b      	ldr	r3, [pc, #44]	; (80504c0 <__swbuf_r+0x9c>)
 8050494:	429c      	cmp	r4, r3
 8050496:	d101      	bne.n	805049c <__swbuf_r+0x78>
 8050498:	68ac      	ldr	r4, [r5, #8]
 805049a:	e7d0      	b.n	805043e <__swbuf_r+0x1a>
 805049c:	4b09      	ldr	r3, [pc, #36]	; (80504c4 <__swbuf_r+0xa0>)
 805049e:	429c      	cmp	r4, r3
 80504a0:	bf08      	it	eq
 80504a2:	68ec      	ldreq	r4, [r5, #12]
 80504a4:	e7cb      	b.n	805043e <__swbuf_r+0x1a>
 80504a6:	4621      	mov	r1, r4
 80504a8:	4628      	mov	r0, r5
 80504aa:	f000 f80d 	bl	80504c8 <__swsetup_r>
 80504ae:	2800      	cmp	r0, #0
 80504b0:	d0cc      	beq.n	805044c <__swbuf_r+0x28>
 80504b2:	f04f 37ff 	mov.w	r7, #4294967295
 80504b6:	4638      	mov	r0, r7
 80504b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80504ba:	bf00      	nop
 80504bc:	08052af4 	.word	0x08052af4
 80504c0:	08052b14 	.word	0x08052b14
 80504c4:	08052ad4 	.word	0x08052ad4

080504c8 <__swsetup_r>:
 80504c8:	4b32      	ldr	r3, [pc, #200]	; (8050594 <__swsetup_r+0xcc>)
 80504ca:	b570      	push	{r4, r5, r6, lr}
 80504cc:	681d      	ldr	r5, [r3, #0]
 80504ce:	4606      	mov	r6, r0
 80504d0:	460c      	mov	r4, r1
 80504d2:	b125      	cbz	r5, 80504de <__swsetup_r+0x16>
 80504d4:	69ab      	ldr	r3, [r5, #24]
 80504d6:	b913      	cbnz	r3, 80504de <__swsetup_r+0x16>
 80504d8:	4628      	mov	r0, r5
 80504da:	f000 f953 	bl	8050784 <__sinit>
 80504de:	4b2e      	ldr	r3, [pc, #184]	; (8050598 <__swsetup_r+0xd0>)
 80504e0:	429c      	cmp	r4, r3
 80504e2:	d10f      	bne.n	8050504 <__swsetup_r+0x3c>
 80504e4:	686c      	ldr	r4, [r5, #4]
 80504e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80504ea:	b29a      	uxth	r2, r3
 80504ec:	0715      	lsls	r5, r2, #28
 80504ee:	d42c      	bmi.n	805054a <__swsetup_r+0x82>
 80504f0:	06d0      	lsls	r0, r2, #27
 80504f2:	d411      	bmi.n	8050518 <__swsetup_r+0x50>
 80504f4:	2209      	movs	r2, #9
 80504f6:	6032      	str	r2, [r6, #0]
 80504f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80504fc:	81a3      	strh	r3, [r4, #12]
 80504fe:	f04f 30ff 	mov.w	r0, #4294967295
 8050502:	e03e      	b.n	8050582 <__swsetup_r+0xba>
 8050504:	4b25      	ldr	r3, [pc, #148]	; (805059c <__swsetup_r+0xd4>)
 8050506:	429c      	cmp	r4, r3
 8050508:	d101      	bne.n	805050e <__swsetup_r+0x46>
 805050a:	68ac      	ldr	r4, [r5, #8]
 805050c:	e7eb      	b.n	80504e6 <__swsetup_r+0x1e>
 805050e:	4b24      	ldr	r3, [pc, #144]	; (80505a0 <__swsetup_r+0xd8>)
 8050510:	429c      	cmp	r4, r3
 8050512:	bf08      	it	eq
 8050514:	68ec      	ldreq	r4, [r5, #12]
 8050516:	e7e6      	b.n	80504e6 <__swsetup_r+0x1e>
 8050518:	0751      	lsls	r1, r2, #29
 805051a:	d512      	bpl.n	8050542 <__swsetup_r+0x7a>
 805051c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 805051e:	b141      	cbz	r1, 8050532 <__swsetup_r+0x6a>
 8050520:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8050524:	4299      	cmp	r1, r3
 8050526:	d002      	beq.n	805052e <__swsetup_r+0x66>
 8050528:	4630      	mov	r0, r6
 805052a:	f000 fa21 	bl	8050970 <_free_r>
 805052e:	2300      	movs	r3, #0
 8050530:	6363      	str	r3, [r4, #52]	; 0x34
 8050532:	89a3      	ldrh	r3, [r4, #12]
 8050534:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8050538:	81a3      	strh	r3, [r4, #12]
 805053a:	2300      	movs	r3, #0
 805053c:	6063      	str	r3, [r4, #4]
 805053e:	6923      	ldr	r3, [r4, #16]
 8050540:	6023      	str	r3, [r4, #0]
 8050542:	89a3      	ldrh	r3, [r4, #12]
 8050544:	f043 0308 	orr.w	r3, r3, #8
 8050548:	81a3      	strh	r3, [r4, #12]
 805054a:	6923      	ldr	r3, [r4, #16]
 805054c:	b94b      	cbnz	r3, 8050562 <__swsetup_r+0x9a>
 805054e:	89a3      	ldrh	r3, [r4, #12]
 8050550:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8050554:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8050558:	d003      	beq.n	8050562 <__swsetup_r+0x9a>
 805055a:	4621      	mov	r1, r4
 805055c:	4630      	mov	r0, r6
 805055e:	f000 f9bf 	bl	80508e0 <__smakebuf_r>
 8050562:	89a2      	ldrh	r2, [r4, #12]
 8050564:	f012 0301 	ands.w	r3, r2, #1
 8050568:	d00c      	beq.n	8050584 <__swsetup_r+0xbc>
 805056a:	2300      	movs	r3, #0
 805056c:	60a3      	str	r3, [r4, #8]
 805056e:	6963      	ldr	r3, [r4, #20]
 8050570:	425b      	negs	r3, r3
 8050572:	61a3      	str	r3, [r4, #24]
 8050574:	6923      	ldr	r3, [r4, #16]
 8050576:	b953      	cbnz	r3, 805058e <__swsetup_r+0xc6>
 8050578:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 805057c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8050580:	d1ba      	bne.n	80504f8 <__swsetup_r+0x30>
 8050582:	bd70      	pop	{r4, r5, r6, pc}
 8050584:	0792      	lsls	r2, r2, #30
 8050586:	bf58      	it	pl
 8050588:	6963      	ldrpl	r3, [r4, #20]
 805058a:	60a3      	str	r3, [r4, #8]
 805058c:	e7f2      	b.n	8050574 <__swsetup_r+0xac>
 805058e:	2000      	movs	r0, #0
 8050590:	e7f7      	b.n	8050582 <__swsetup_r+0xba>
 8050592:	bf00      	nop
 8050594:	200012b8 	.word	0x200012b8
 8050598:	08052af4 	.word	0x08052af4
 805059c:	08052b14 	.word	0x08052b14
 80505a0:	08052ad4 	.word	0x08052ad4

080505a4 <__sflush_r>:
 80505a4:	898a      	ldrh	r2, [r1, #12]
 80505a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80505aa:	4605      	mov	r5, r0
 80505ac:	0710      	lsls	r0, r2, #28
 80505ae:	460c      	mov	r4, r1
 80505b0:	d458      	bmi.n	8050664 <__sflush_r+0xc0>
 80505b2:	684b      	ldr	r3, [r1, #4]
 80505b4:	2b00      	cmp	r3, #0
 80505b6:	dc05      	bgt.n	80505c4 <__sflush_r+0x20>
 80505b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80505ba:	2b00      	cmp	r3, #0
 80505bc:	dc02      	bgt.n	80505c4 <__sflush_r+0x20>
 80505be:	2000      	movs	r0, #0
 80505c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80505c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80505c6:	2e00      	cmp	r6, #0
 80505c8:	d0f9      	beq.n	80505be <__sflush_r+0x1a>
 80505ca:	2300      	movs	r3, #0
 80505cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80505d0:	682f      	ldr	r7, [r5, #0]
 80505d2:	6a21      	ldr	r1, [r4, #32]
 80505d4:	602b      	str	r3, [r5, #0]
 80505d6:	d032      	beq.n	805063e <__sflush_r+0x9a>
 80505d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80505da:	89a3      	ldrh	r3, [r4, #12]
 80505dc:	075a      	lsls	r2, r3, #29
 80505de:	d505      	bpl.n	80505ec <__sflush_r+0x48>
 80505e0:	6863      	ldr	r3, [r4, #4]
 80505e2:	1ac0      	subs	r0, r0, r3
 80505e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80505e6:	b10b      	cbz	r3, 80505ec <__sflush_r+0x48>
 80505e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80505ea:	1ac0      	subs	r0, r0, r3
 80505ec:	2300      	movs	r3, #0
 80505ee:	4602      	mov	r2, r0
 80505f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80505f2:	6a21      	ldr	r1, [r4, #32]
 80505f4:	4628      	mov	r0, r5
 80505f6:	47b0      	blx	r6
 80505f8:	1c43      	adds	r3, r0, #1
 80505fa:	89a3      	ldrh	r3, [r4, #12]
 80505fc:	d106      	bne.n	805060c <__sflush_r+0x68>
 80505fe:	6829      	ldr	r1, [r5, #0]
 8050600:	291d      	cmp	r1, #29
 8050602:	d848      	bhi.n	8050696 <__sflush_r+0xf2>
 8050604:	4a29      	ldr	r2, [pc, #164]	; (80506ac <__sflush_r+0x108>)
 8050606:	40ca      	lsrs	r2, r1
 8050608:	07d6      	lsls	r6, r2, #31
 805060a:	d544      	bpl.n	8050696 <__sflush_r+0xf2>
 805060c:	2200      	movs	r2, #0
 805060e:	6062      	str	r2, [r4, #4]
 8050610:	04d9      	lsls	r1, r3, #19
 8050612:	6922      	ldr	r2, [r4, #16]
 8050614:	6022      	str	r2, [r4, #0]
 8050616:	d504      	bpl.n	8050622 <__sflush_r+0x7e>
 8050618:	1c42      	adds	r2, r0, #1
 805061a:	d101      	bne.n	8050620 <__sflush_r+0x7c>
 805061c:	682b      	ldr	r3, [r5, #0]
 805061e:	b903      	cbnz	r3, 8050622 <__sflush_r+0x7e>
 8050620:	6560      	str	r0, [r4, #84]	; 0x54
 8050622:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8050624:	602f      	str	r7, [r5, #0]
 8050626:	2900      	cmp	r1, #0
 8050628:	d0c9      	beq.n	80505be <__sflush_r+0x1a>
 805062a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 805062e:	4299      	cmp	r1, r3
 8050630:	d002      	beq.n	8050638 <__sflush_r+0x94>
 8050632:	4628      	mov	r0, r5
 8050634:	f000 f99c 	bl	8050970 <_free_r>
 8050638:	2000      	movs	r0, #0
 805063a:	6360      	str	r0, [r4, #52]	; 0x34
 805063c:	e7c0      	b.n	80505c0 <__sflush_r+0x1c>
 805063e:	2301      	movs	r3, #1
 8050640:	4628      	mov	r0, r5
 8050642:	47b0      	blx	r6
 8050644:	1c41      	adds	r1, r0, #1
 8050646:	d1c8      	bne.n	80505da <__sflush_r+0x36>
 8050648:	682b      	ldr	r3, [r5, #0]
 805064a:	2b00      	cmp	r3, #0
 805064c:	d0c5      	beq.n	80505da <__sflush_r+0x36>
 805064e:	2b1d      	cmp	r3, #29
 8050650:	d001      	beq.n	8050656 <__sflush_r+0xb2>
 8050652:	2b16      	cmp	r3, #22
 8050654:	d101      	bne.n	805065a <__sflush_r+0xb6>
 8050656:	602f      	str	r7, [r5, #0]
 8050658:	e7b1      	b.n	80505be <__sflush_r+0x1a>
 805065a:	89a3      	ldrh	r3, [r4, #12]
 805065c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8050660:	81a3      	strh	r3, [r4, #12]
 8050662:	e7ad      	b.n	80505c0 <__sflush_r+0x1c>
 8050664:	690f      	ldr	r7, [r1, #16]
 8050666:	2f00      	cmp	r7, #0
 8050668:	d0a9      	beq.n	80505be <__sflush_r+0x1a>
 805066a:	0793      	lsls	r3, r2, #30
 805066c:	680e      	ldr	r6, [r1, #0]
 805066e:	bf08      	it	eq
 8050670:	694b      	ldreq	r3, [r1, #20]
 8050672:	600f      	str	r7, [r1, #0]
 8050674:	bf18      	it	ne
 8050676:	2300      	movne	r3, #0
 8050678:	eba6 0807 	sub.w	r8, r6, r7
 805067c:	608b      	str	r3, [r1, #8]
 805067e:	f1b8 0f00 	cmp.w	r8, #0
 8050682:	dd9c      	ble.n	80505be <__sflush_r+0x1a>
 8050684:	4643      	mov	r3, r8
 8050686:	463a      	mov	r2, r7
 8050688:	6a21      	ldr	r1, [r4, #32]
 805068a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 805068c:	4628      	mov	r0, r5
 805068e:	47b0      	blx	r6
 8050690:	2800      	cmp	r0, #0
 8050692:	dc06      	bgt.n	80506a2 <__sflush_r+0xfe>
 8050694:	89a3      	ldrh	r3, [r4, #12]
 8050696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 805069a:	81a3      	strh	r3, [r4, #12]
 805069c:	f04f 30ff 	mov.w	r0, #4294967295
 80506a0:	e78e      	b.n	80505c0 <__sflush_r+0x1c>
 80506a2:	4407      	add	r7, r0
 80506a4:	eba8 0800 	sub.w	r8, r8, r0
 80506a8:	e7e9      	b.n	805067e <__sflush_r+0xda>
 80506aa:	bf00      	nop
 80506ac:	20400001 	.word	0x20400001

080506b0 <_fflush_r>:
 80506b0:	b538      	push	{r3, r4, r5, lr}
 80506b2:	690b      	ldr	r3, [r1, #16]
 80506b4:	4605      	mov	r5, r0
 80506b6:	460c      	mov	r4, r1
 80506b8:	b1db      	cbz	r3, 80506f2 <_fflush_r+0x42>
 80506ba:	b118      	cbz	r0, 80506c4 <_fflush_r+0x14>
 80506bc:	6983      	ldr	r3, [r0, #24]
 80506be:	b90b      	cbnz	r3, 80506c4 <_fflush_r+0x14>
 80506c0:	f000 f860 	bl	8050784 <__sinit>
 80506c4:	4b0c      	ldr	r3, [pc, #48]	; (80506f8 <_fflush_r+0x48>)
 80506c6:	429c      	cmp	r4, r3
 80506c8:	d109      	bne.n	80506de <_fflush_r+0x2e>
 80506ca:	686c      	ldr	r4, [r5, #4]
 80506cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80506d0:	b17b      	cbz	r3, 80506f2 <_fflush_r+0x42>
 80506d2:	4621      	mov	r1, r4
 80506d4:	4628      	mov	r0, r5
 80506d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80506da:	f7ff bf63 	b.w	80505a4 <__sflush_r>
 80506de:	4b07      	ldr	r3, [pc, #28]	; (80506fc <_fflush_r+0x4c>)
 80506e0:	429c      	cmp	r4, r3
 80506e2:	d101      	bne.n	80506e8 <_fflush_r+0x38>
 80506e4:	68ac      	ldr	r4, [r5, #8]
 80506e6:	e7f1      	b.n	80506cc <_fflush_r+0x1c>
 80506e8:	4b05      	ldr	r3, [pc, #20]	; (8050700 <_fflush_r+0x50>)
 80506ea:	429c      	cmp	r4, r3
 80506ec:	bf08      	it	eq
 80506ee:	68ec      	ldreq	r4, [r5, #12]
 80506f0:	e7ec      	b.n	80506cc <_fflush_r+0x1c>
 80506f2:	2000      	movs	r0, #0
 80506f4:	bd38      	pop	{r3, r4, r5, pc}
 80506f6:	bf00      	nop
 80506f8:	08052af4 	.word	0x08052af4
 80506fc:	08052b14 	.word	0x08052b14
 8050700:	08052ad4 	.word	0x08052ad4

08050704 <std>:
 8050704:	2300      	movs	r3, #0
 8050706:	b510      	push	{r4, lr}
 8050708:	4604      	mov	r4, r0
 805070a:	e9c0 3300 	strd	r3, r3, [r0]
 805070e:	6083      	str	r3, [r0, #8]
 8050710:	8181      	strh	r1, [r0, #12]
 8050712:	6643      	str	r3, [r0, #100]	; 0x64
 8050714:	81c2      	strh	r2, [r0, #14]
 8050716:	e9c0 3304 	strd	r3, r3, [r0, #16]
 805071a:	6183      	str	r3, [r0, #24]
 805071c:	4619      	mov	r1, r3
 805071e:	2208      	movs	r2, #8
 8050720:	305c      	adds	r0, #92	; 0x5c
 8050722:	f7ff fd13 	bl	805014c <memset>
 8050726:	4b05      	ldr	r3, [pc, #20]	; (805073c <std+0x38>)
 8050728:	6263      	str	r3, [r4, #36]	; 0x24
 805072a:	4b05      	ldr	r3, [pc, #20]	; (8050740 <std+0x3c>)
 805072c:	62a3      	str	r3, [r4, #40]	; 0x28
 805072e:	4b05      	ldr	r3, [pc, #20]	; (8050744 <std+0x40>)
 8050730:	62e3      	str	r3, [r4, #44]	; 0x2c
 8050732:	4b05      	ldr	r3, [pc, #20]	; (8050748 <std+0x44>)
 8050734:	6224      	str	r4, [r4, #32]
 8050736:	6323      	str	r3, [r4, #48]	; 0x30
 8050738:	bd10      	pop	{r4, pc}
 805073a:	bf00      	nop
 805073c:	08051315 	.word	0x08051315
 8050740:	08051337 	.word	0x08051337
 8050744:	0805136f 	.word	0x0805136f
 8050748:	08051393 	.word	0x08051393

0805074c <_cleanup_r>:
 805074c:	4901      	ldr	r1, [pc, #4]	; (8050754 <_cleanup_r+0x8>)
 805074e:	f000 b885 	b.w	805085c <_fwalk_reent>
 8050752:	bf00      	nop
 8050754:	080506b1 	.word	0x080506b1

08050758 <__sfmoreglue>:
 8050758:	b570      	push	{r4, r5, r6, lr}
 805075a:	1e4a      	subs	r2, r1, #1
 805075c:	2568      	movs	r5, #104	; 0x68
 805075e:	4355      	muls	r5, r2
 8050760:	460e      	mov	r6, r1
 8050762:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8050766:	f000 f951 	bl	8050a0c <_malloc_r>
 805076a:	4604      	mov	r4, r0
 805076c:	b140      	cbz	r0, 8050780 <__sfmoreglue+0x28>
 805076e:	2100      	movs	r1, #0
 8050770:	e9c0 1600 	strd	r1, r6, [r0]
 8050774:	300c      	adds	r0, #12
 8050776:	60a0      	str	r0, [r4, #8]
 8050778:	f105 0268 	add.w	r2, r5, #104	; 0x68
 805077c:	f7ff fce6 	bl	805014c <memset>
 8050780:	4620      	mov	r0, r4
 8050782:	bd70      	pop	{r4, r5, r6, pc}

08050784 <__sinit>:
 8050784:	6983      	ldr	r3, [r0, #24]
 8050786:	b510      	push	{r4, lr}
 8050788:	4604      	mov	r4, r0
 805078a:	bb33      	cbnz	r3, 80507da <__sinit+0x56>
 805078c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8050790:	6503      	str	r3, [r0, #80]	; 0x50
 8050792:	4b12      	ldr	r3, [pc, #72]	; (80507dc <__sinit+0x58>)
 8050794:	4a12      	ldr	r2, [pc, #72]	; (80507e0 <__sinit+0x5c>)
 8050796:	681b      	ldr	r3, [r3, #0]
 8050798:	6282      	str	r2, [r0, #40]	; 0x28
 805079a:	4298      	cmp	r0, r3
 805079c:	bf04      	itt	eq
 805079e:	2301      	moveq	r3, #1
 80507a0:	6183      	streq	r3, [r0, #24]
 80507a2:	f000 f81f 	bl	80507e4 <__sfp>
 80507a6:	6060      	str	r0, [r4, #4]
 80507a8:	4620      	mov	r0, r4
 80507aa:	f000 f81b 	bl	80507e4 <__sfp>
 80507ae:	60a0      	str	r0, [r4, #8]
 80507b0:	4620      	mov	r0, r4
 80507b2:	f000 f817 	bl	80507e4 <__sfp>
 80507b6:	2200      	movs	r2, #0
 80507b8:	60e0      	str	r0, [r4, #12]
 80507ba:	2104      	movs	r1, #4
 80507bc:	6860      	ldr	r0, [r4, #4]
 80507be:	f7ff ffa1 	bl	8050704 <std>
 80507c2:	2201      	movs	r2, #1
 80507c4:	2109      	movs	r1, #9
 80507c6:	68a0      	ldr	r0, [r4, #8]
 80507c8:	f7ff ff9c 	bl	8050704 <std>
 80507cc:	2202      	movs	r2, #2
 80507ce:	2112      	movs	r1, #18
 80507d0:	68e0      	ldr	r0, [r4, #12]
 80507d2:	f7ff ff97 	bl	8050704 <std>
 80507d6:	2301      	movs	r3, #1
 80507d8:	61a3      	str	r3, [r4, #24]
 80507da:	bd10      	pop	{r4, pc}
 80507dc:	08052ad0 	.word	0x08052ad0
 80507e0:	0805074d 	.word	0x0805074d

080507e4 <__sfp>:
 80507e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80507e6:	4b1b      	ldr	r3, [pc, #108]	; (8050854 <__sfp+0x70>)
 80507e8:	681e      	ldr	r6, [r3, #0]
 80507ea:	69b3      	ldr	r3, [r6, #24]
 80507ec:	4607      	mov	r7, r0
 80507ee:	b913      	cbnz	r3, 80507f6 <__sfp+0x12>
 80507f0:	4630      	mov	r0, r6
 80507f2:	f7ff ffc7 	bl	8050784 <__sinit>
 80507f6:	3648      	adds	r6, #72	; 0x48
 80507f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80507fc:	3b01      	subs	r3, #1
 80507fe:	d503      	bpl.n	8050808 <__sfp+0x24>
 8050800:	6833      	ldr	r3, [r6, #0]
 8050802:	b133      	cbz	r3, 8050812 <__sfp+0x2e>
 8050804:	6836      	ldr	r6, [r6, #0]
 8050806:	e7f7      	b.n	80507f8 <__sfp+0x14>
 8050808:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 805080c:	b16d      	cbz	r5, 805082a <__sfp+0x46>
 805080e:	3468      	adds	r4, #104	; 0x68
 8050810:	e7f4      	b.n	80507fc <__sfp+0x18>
 8050812:	2104      	movs	r1, #4
 8050814:	4638      	mov	r0, r7
 8050816:	f7ff ff9f 	bl	8050758 <__sfmoreglue>
 805081a:	6030      	str	r0, [r6, #0]
 805081c:	2800      	cmp	r0, #0
 805081e:	d1f1      	bne.n	8050804 <__sfp+0x20>
 8050820:	230c      	movs	r3, #12
 8050822:	603b      	str	r3, [r7, #0]
 8050824:	4604      	mov	r4, r0
 8050826:	4620      	mov	r0, r4
 8050828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 805082a:	4b0b      	ldr	r3, [pc, #44]	; (8050858 <__sfp+0x74>)
 805082c:	6665      	str	r5, [r4, #100]	; 0x64
 805082e:	e9c4 5500 	strd	r5, r5, [r4]
 8050832:	60a5      	str	r5, [r4, #8]
 8050834:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8050838:	e9c4 5505 	strd	r5, r5, [r4, #20]
 805083c:	2208      	movs	r2, #8
 805083e:	4629      	mov	r1, r5
 8050840:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8050844:	f7ff fc82 	bl	805014c <memset>
 8050848:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 805084c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8050850:	e7e9      	b.n	8050826 <__sfp+0x42>
 8050852:	bf00      	nop
 8050854:	08052ad0 	.word	0x08052ad0
 8050858:	ffff0001 	.word	0xffff0001

0805085c <_fwalk_reent>:
 805085c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8050860:	4680      	mov	r8, r0
 8050862:	4689      	mov	r9, r1
 8050864:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8050868:	2600      	movs	r6, #0
 805086a:	b914      	cbnz	r4, 8050872 <_fwalk_reent+0x16>
 805086c:	4630      	mov	r0, r6
 805086e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8050872:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8050876:	3f01      	subs	r7, #1
 8050878:	d501      	bpl.n	805087e <_fwalk_reent+0x22>
 805087a:	6824      	ldr	r4, [r4, #0]
 805087c:	e7f5      	b.n	805086a <_fwalk_reent+0xe>
 805087e:	89ab      	ldrh	r3, [r5, #12]
 8050880:	2b01      	cmp	r3, #1
 8050882:	d907      	bls.n	8050894 <_fwalk_reent+0x38>
 8050884:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8050888:	3301      	adds	r3, #1
 805088a:	d003      	beq.n	8050894 <_fwalk_reent+0x38>
 805088c:	4629      	mov	r1, r5
 805088e:	4640      	mov	r0, r8
 8050890:	47c8      	blx	r9
 8050892:	4306      	orrs	r6, r0
 8050894:	3568      	adds	r5, #104	; 0x68
 8050896:	e7ee      	b.n	8050876 <_fwalk_reent+0x1a>

08050898 <__swhatbuf_r>:
 8050898:	b570      	push	{r4, r5, r6, lr}
 805089a:	460e      	mov	r6, r1
 805089c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80508a0:	2900      	cmp	r1, #0
 80508a2:	b096      	sub	sp, #88	; 0x58
 80508a4:	4614      	mov	r4, r2
 80508a6:	461d      	mov	r5, r3
 80508a8:	da07      	bge.n	80508ba <__swhatbuf_r+0x22>
 80508aa:	2300      	movs	r3, #0
 80508ac:	602b      	str	r3, [r5, #0]
 80508ae:	89b3      	ldrh	r3, [r6, #12]
 80508b0:	061a      	lsls	r2, r3, #24
 80508b2:	d410      	bmi.n	80508d6 <__swhatbuf_r+0x3e>
 80508b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80508b8:	e00e      	b.n	80508d8 <__swhatbuf_r+0x40>
 80508ba:	466a      	mov	r2, sp
 80508bc:	f000 fd90 	bl	80513e0 <_fstat_r>
 80508c0:	2800      	cmp	r0, #0
 80508c2:	dbf2      	blt.n	80508aa <__swhatbuf_r+0x12>
 80508c4:	9a01      	ldr	r2, [sp, #4]
 80508c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80508ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80508ce:	425a      	negs	r2, r3
 80508d0:	415a      	adcs	r2, r3
 80508d2:	602a      	str	r2, [r5, #0]
 80508d4:	e7ee      	b.n	80508b4 <__swhatbuf_r+0x1c>
 80508d6:	2340      	movs	r3, #64	; 0x40
 80508d8:	2000      	movs	r0, #0
 80508da:	6023      	str	r3, [r4, #0]
 80508dc:	b016      	add	sp, #88	; 0x58
 80508de:	bd70      	pop	{r4, r5, r6, pc}

080508e0 <__smakebuf_r>:
 80508e0:	898b      	ldrh	r3, [r1, #12]
 80508e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80508e4:	079d      	lsls	r5, r3, #30
 80508e6:	4606      	mov	r6, r0
 80508e8:	460c      	mov	r4, r1
 80508ea:	d507      	bpl.n	80508fc <__smakebuf_r+0x1c>
 80508ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80508f0:	6023      	str	r3, [r4, #0]
 80508f2:	6123      	str	r3, [r4, #16]
 80508f4:	2301      	movs	r3, #1
 80508f6:	6163      	str	r3, [r4, #20]
 80508f8:	b002      	add	sp, #8
 80508fa:	bd70      	pop	{r4, r5, r6, pc}
 80508fc:	ab01      	add	r3, sp, #4
 80508fe:	466a      	mov	r2, sp
 8050900:	f7ff ffca 	bl	8050898 <__swhatbuf_r>
 8050904:	9900      	ldr	r1, [sp, #0]
 8050906:	4605      	mov	r5, r0
 8050908:	4630      	mov	r0, r6
 805090a:	f000 f87f 	bl	8050a0c <_malloc_r>
 805090e:	b948      	cbnz	r0, 8050924 <__smakebuf_r+0x44>
 8050910:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8050914:	059a      	lsls	r2, r3, #22
 8050916:	d4ef      	bmi.n	80508f8 <__smakebuf_r+0x18>
 8050918:	f023 0303 	bic.w	r3, r3, #3
 805091c:	f043 0302 	orr.w	r3, r3, #2
 8050920:	81a3      	strh	r3, [r4, #12]
 8050922:	e7e3      	b.n	80508ec <__smakebuf_r+0xc>
 8050924:	4b0d      	ldr	r3, [pc, #52]	; (805095c <__smakebuf_r+0x7c>)
 8050926:	62b3      	str	r3, [r6, #40]	; 0x28
 8050928:	89a3      	ldrh	r3, [r4, #12]
 805092a:	6020      	str	r0, [r4, #0]
 805092c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8050930:	81a3      	strh	r3, [r4, #12]
 8050932:	9b00      	ldr	r3, [sp, #0]
 8050934:	6163      	str	r3, [r4, #20]
 8050936:	9b01      	ldr	r3, [sp, #4]
 8050938:	6120      	str	r0, [r4, #16]
 805093a:	b15b      	cbz	r3, 8050954 <__smakebuf_r+0x74>
 805093c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8050940:	4630      	mov	r0, r6
 8050942:	f000 fd5f 	bl	8051404 <_isatty_r>
 8050946:	b128      	cbz	r0, 8050954 <__smakebuf_r+0x74>
 8050948:	89a3      	ldrh	r3, [r4, #12]
 805094a:	f023 0303 	bic.w	r3, r3, #3
 805094e:	f043 0301 	orr.w	r3, r3, #1
 8050952:	81a3      	strh	r3, [r4, #12]
 8050954:	89a3      	ldrh	r3, [r4, #12]
 8050956:	431d      	orrs	r5, r3
 8050958:	81a5      	strh	r5, [r4, #12]
 805095a:	e7cd      	b.n	80508f8 <__smakebuf_r+0x18>
 805095c:	0805074d 	.word	0x0805074d

08050960 <malloc>:
 8050960:	4b02      	ldr	r3, [pc, #8]	; (805096c <malloc+0xc>)
 8050962:	4601      	mov	r1, r0
 8050964:	6818      	ldr	r0, [r3, #0]
 8050966:	f000 b851 	b.w	8050a0c <_malloc_r>
 805096a:	bf00      	nop
 805096c:	200012b8 	.word	0x200012b8

08050970 <_free_r>:
 8050970:	b538      	push	{r3, r4, r5, lr}
 8050972:	4605      	mov	r5, r0
 8050974:	2900      	cmp	r1, #0
 8050976:	d045      	beq.n	8050a04 <_free_r+0x94>
 8050978:	f851 3c04 	ldr.w	r3, [r1, #-4]
 805097c:	1f0c      	subs	r4, r1, #4
 805097e:	2b00      	cmp	r3, #0
 8050980:	bfb8      	it	lt
 8050982:	18e4      	addlt	r4, r4, r3
 8050984:	f000 fd79 	bl	805147a <__malloc_lock>
 8050988:	4a1f      	ldr	r2, [pc, #124]	; (8050a08 <_free_r+0x98>)
 805098a:	6813      	ldr	r3, [r2, #0]
 805098c:	4610      	mov	r0, r2
 805098e:	b933      	cbnz	r3, 805099e <_free_r+0x2e>
 8050990:	6063      	str	r3, [r4, #4]
 8050992:	6014      	str	r4, [r2, #0]
 8050994:	4628      	mov	r0, r5
 8050996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 805099a:	f000 bd6f 	b.w	805147c <__malloc_unlock>
 805099e:	42a3      	cmp	r3, r4
 80509a0:	d90c      	bls.n	80509bc <_free_r+0x4c>
 80509a2:	6821      	ldr	r1, [r4, #0]
 80509a4:	1862      	adds	r2, r4, r1
 80509a6:	4293      	cmp	r3, r2
 80509a8:	bf04      	itt	eq
 80509aa:	681a      	ldreq	r2, [r3, #0]
 80509ac:	685b      	ldreq	r3, [r3, #4]
 80509ae:	6063      	str	r3, [r4, #4]
 80509b0:	bf04      	itt	eq
 80509b2:	1852      	addeq	r2, r2, r1
 80509b4:	6022      	streq	r2, [r4, #0]
 80509b6:	6004      	str	r4, [r0, #0]
 80509b8:	e7ec      	b.n	8050994 <_free_r+0x24>
 80509ba:	4613      	mov	r3, r2
 80509bc:	685a      	ldr	r2, [r3, #4]
 80509be:	b10a      	cbz	r2, 80509c4 <_free_r+0x54>
 80509c0:	42a2      	cmp	r2, r4
 80509c2:	d9fa      	bls.n	80509ba <_free_r+0x4a>
 80509c4:	6819      	ldr	r1, [r3, #0]
 80509c6:	1858      	adds	r0, r3, r1
 80509c8:	42a0      	cmp	r0, r4
 80509ca:	d10b      	bne.n	80509e4 <_free_r+0x74>
 80509cc:	6820      	ldr	r0, [r4, #0]
 80509ce:	4401      	add	r1, r0
 80509d0:	1858      	adds	r0, r3, r1
 80509d2:	4282      	cmp	r2, r0
 80509d4:	6019      	str	r1, [r3, #0]
 80509d6:	d1dd      	bne.n	8050994 <_free_r+0x24>
 80509d8:	6810      	ldr	r0, [r2, #0]
 80509da:	6852      	ldr	r2, [r2, #4]
 80509dc:	605a      	str	r2, [r3, #4]
 80509de:	4401      	add	r1, r0
 80509e0:	6019      	str	r1, [r3, #0]
 80509e2:	e7d7      	b.n	8050994 <_free_r+0x24>
 80509e4:	d902      	bls.n	80509ec <_free_r+0x7c>
 80509e6:	230c      	movs	r3, #12
 80509e8:	602b      	str	r3, [r5, #0]
 80509ea:	e7d3      	b.n	8050994 <_free_r+0x24>
 80509ec:	6820      	ldr	r0, [r4, #0]
 80509ee:	1821      	adds	r1, r4, r0
 80509f0:	428a      	cmp	r2, r1
 80509f2:	bf04      	itt	eq
 80509f4:	6811      	ldreq	r1, [r2, #0]
 80509f6:	6852      	ldreq	r2, [r2, #4]
 80509f8:	6062      	str	r2, [r4, #4]
 80509fa:	bf04      	itt	eq
 80509fc:	1809      	addeq	r1, r1, r0
 80509fe:	6021      	streq	r1, [r4, #0]
 8050a00:	605c      	str	r4, [r3, #4]
 8050a02:	e7c7      	b.n	8050994 <_free_r+0x24>
 8050a04:	bd38      	pop	{r3, r4, r5, pc}
 8050a06:	bf00      	nop
 8050a08:	2000bbec 	.word	0x2000bbec

08050a0c <_malloc_r>:
 8050a0c:	b570      	push	{r4, r5, r6, lr}
 8050a0e:	1ccd      	adds	r5, r1, #3
 8050a10:	f025 0503 	bic.w	r5, r5, #3
 8050a14:	3508      	adds	r5, #8
 8050a16:	2d0c      	cmp	r5, #12
 8050a18:	bf38      	it	cc
 8050a1a:	250c      	movcc	r5, #12
 8050a1c:	2d00      	cmp	r5, #0
 8050a1e:	4606      	mov	r6, r0
 8050a20:	db01      	blt.n	8050a26 <_malloc_r+0x1a>
 8050a22:	42a9      	cmp	r1, r5
 8050a24:	d903      	bls.n	8050a2e <_malloc_r+0x22>
 8050a26:	230c      	movs	r3, #12
 8050a28:	6033      	str	r3, [r6, #0]
 8050a2a:	2000      	movs	r0, #0
 8050a2c:	bd70      	pop	{r4, r5, r6, pc}
 8050a2e:	f000 fd24 	bl	805147a <__malloc_lock>
 8050a32:	4a21      	ldr	r2, [pc, #132]	; (8050ab8 <_malloc_r+0xac>)
 8050a34:	6814      	ldr	r4, [r2, #0]
 8050a36:	4621      	mov	r1, r4
 8050a38:	b991      	cbnz	r1, 8050a60 <_malloc_r+0x54>
 8050a3a:	4c20      	ldr	r4, [pc, #128]	; (8050abc <_malloc_r+0xb0>)
 8050a3c:	6823      	ldr	r3, [r4, #0]
 8050a3e:	b91b      	cbnz	r3, 8050a48 <_malloc_r+0x3c>
 8050a40:	4630      	mov	r0, r6
 8050a42:	f000 fc57 	bl	80512f4 <_sbrk_r>
 8050a46:	6020      	str	r0, [r4, #0]
 8050a48:	4629      	mov	r1, r5
 8050a4a:	4630      	mov	r0, r6
 8050a4c:	f000 fc52 	bl	80512f4 <_sbrk_r>
 8050a50:	1c43      	adds	r3, r0, #1
 8050a52:	d124      	bne.n	8050a9e <_malloc_r+0x92>
 8050a54:	230c      	movs	r3, #12
 8050a56:	6033      	str	r3, [r6, #0]
 8050a58:	4630      	mov	r0, r6
 8050a5a:	f000 fd0f 	bl	805147c <__malloc_unlock>
 8050a5e:	e7e4      	b.n	8050a2a <_malloc_r+0x1e>
 8050a60:	680b      	ldr	r3, [r1, #0]
 8050a62:	1b5b      	subs	r3, r3, r5
 8050a64:	d418      	bmi.n	8050a98 <_malloc_r+0x8c>
 8050a66:	2b0b      	cmp	r3, #11
 8050a68:	d90f      	bls.n	8050a8a <_malloc_r+0x7e>
 8050a6a:	600b      	str	r3, [r1, #0]
 8050a6c:	50cd      	str	r5, [r1, r3]
 8050a6e:	18cc      	adds	r4, r1, r3
 8050a70:	4630      	mov	r0, r6
 8050a72:	f000 fd03 	bl	805147c <__malloc_unlock>
 8050a76:	f104 000b 	add.w	r0, r4, #11
 8050a7a:	1d23      	adds	r3, r4, #4
 8050a7c:	f020 0007 	bic.w	r0, r0, #7
 8050a80:	1ac3      	subs	r3, r0, r3
 8050a82:	d0d3      	beq.n	8050a2c <_malloc_r+0x20>
 8050a84:	425a      	negs	r2, r3
 8050a86:	50e2      	str	r2, [r4, r3]
 8050a88:	e7d0      	b.n	8050a2c <_malloc_r+0x20>
 8050a8a:	428c      	cmp	r4, r1
 8050a8c:	684b      	ldr	r3, [r1, #4]
 8050a8e:	bf16      	itet	ne
 8050a90:	6063      	strne	r3, [r4, #4]
 8050a92:	6013      	streq	r3, [r2, #0]
 8050a94:	460c      	movne	r4, r1
 8050a96:	e7eb      	b.n	8050a70 <_malloc_r+0x64>
 8050a98:	460c      	mov	r4, r1
 8050a9a:	6849      	ldr	r1, [r1, #4]
 8050a9c:	e7cc      	b.n	8050a38 <_malloc_r+0x2c>
 8050a9e:	1cc4      	adds	r4, r0, #3
 8050aa0:	f024 0403 	bic.w	r4, r4, #3
 8050aa4:	42a0      	cmp	r0, r4
 8050aa6:	d005      	beq.n	8050ab4 <_malloc_r+0xa8>
 8050aa8:	1a21      	subs	r1, r4, r0
 8050aaa:	4630      	mov	r0, r6
 8050aac:	f000 fc22 	bl	80512f4 <_sbrk_r>
 8050ab0:	3001      	adds	r0, #1
 8050ab2:	d0cf      	beq.n	8050a54 <_malloc_r+0x48>
 8050ab4:	6025      	str	r5, [r4, #0]
 8050ab6:	e7db      	b.n	8050a70 <_malloc_r+0x64>
 8050ab8:	2000bbec 	.word	0x2000bbec
 8050abc:	2000bbf0 	.word	0x2000bbf0

08050ac0 <__ssputs_r>:
 8050ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8050ac4:	688e      	ldr	r6, [r1, #8]
 8050ac6:	429e      	cmp	r6, r3
 8050ac8:	4682      	mov	sl, r0
 8050aca:	460c      	mov	r4, r1
 8050acc:	4690      	mov	r8, r2
 8050ace:	4699      	mov	r9, r3
 8050ad0:	d837      	bhi.n	8050b42 <__ssputs_r+0x82>
 8050ad2:	898a      	ldrh	r2, [r1, #12]
 8050ad4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8050ad8:	d031      	beq.n	8050b3e <__ssputs_r+0x7e>
 8050ada:	6825      	ldr	r5, [r4, #0]
 8050adc:	6909      	ldr	r1, [r1, #16]
 8050ade:	1a6f      	subs	r7, r5, r1
 8050ae0:	6965      	ldr	r5, [r4, #20]
 8050ae2:	2302      	movs	r3, #2
 8050ae4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8050ae8:	fb95 f5f3 	sdiv	r5, r5, r3
 8050aec:	f109 0301 	add.w	r3, r9, #1
 8050af0:	443b      	add	r3, r7
 8050af2:	429d      	cmp	r5, r3
 8050af4:	bf38      	it	cc
 8050af6:	461d      	movcc	r5, r3
 8050af8:	0553      	lsls	r3, r2, #21
 8050afa:	d530      	bpl.n	8050b5e <__ssputs_r+0x9e>
 8050afc:	4629      	mov	r1, r5
 8050afe:	f7ff ff85 	bl	8050a0c <_malloc_r>
 8050b02:	4606      	mov	r6, r0
 8050b04:	b950      	cbnz	r0, 8050b1c <__ssputs_r+0x5c>
 8050b06:	230c      	movs	r3, #12
 8050b08:	f8ca 3000 	str.w	r3, [sl]
 8050b0c:	89a3      	ldrh	r3, [r4, #12]
 8050b0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8050b12:	81a3      	strh	r3, [r4, #12]
 8050b14:	f04f 30ff 	mov.w	r0, #4294967295
 8050b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8050b1c:	463a      	mov	r2, r7
 8050b1e:	6921      	ldr	r1, [r4, #16]
 8050b20:	f7ff fb09 	bl	8050136 <memcpy>
 8050b24:	89a3      	ldrh	r3, [r4, #12]
 8050b26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8050b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8050b2e:	81a3      	strh	r3, [r4, #12]
 8050b30:	6126      	str	r6, [r4, #16]
 8050b32:	6165      	str	r5, [r4, #20]
 8050b34:	443e      	add	r6, r7
 8050b36:	1bed      	subs	r5, r5, r7
 8050b38:	6026      	str	r6, [r4, #0]
 8050b3a:	60a5      	str	r5, [r4, #8]
 8050b3c:	464e      	mov	r6, r9
 8050b3e:	454e      	cmp	r6, r9
 8050b40:	d900      	bls.n	8050b44 <__ssputs_r+0x84>
 8050b42:	464e      	mov	r6, r9
 8050b44:	4632      	mov	r2, r6
 8050b46:	4641      	mov	r1, r8
 8050b48:	6820      	ldr	r0, [r4, #0]
 8050b4a:	f000 fc7d 	bl	8051448 <memmove>
 8050b4e:	68a3      	ldr	r3, [r4, #8]
 8050b50:	1b9b      	subs	r3, r3, r6
 8050b52:	60a3      	str	r3, [r4, #8]
 8050b54:	6823      	ldr	r3, [r4, #0]
 8050b56:	441e      	add	r6, r3
 8050b58:	6026      	str	r6, [r4, #0]
 8050b5a:	2000      	movs	r0, #0
 8050b5c:	e7dc      	b.n	8050b18 <__ssputs_r+0x58>
 8050b5e:	462a      	mov	r2, r5
 8050b60:	f000 fc8d 	bl	805147e <_realloc_r>
 8050b64:	4606      	mov	r6, r0
 8050b66:	2800      	cmp	r0, #0
 8050b68:	d1e2      	bne.n	8050b30 <__ssputs_r+0x70>
 8050b6a:	6921      	ldr	r1, [r4, #16]
 8050b6c:	4650      	mov	r0, sl
 8050b6e:	f7ff feff 	bl	8050970 <_free_r>
 8050b72:	e7c8      	b.n	8050b06 <__ssputs_r+0x46>

08050b74 <_svfiprintf_r>:
 8050b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8050b78:	461d      	mov	r5, r3
 8050b7a:	898b      	ldrh	r3, [r1, #12]
 8050b7c:	061f      	lsls	r7, r3, #24
 8050b7e:	b09d      	sub	sp, #116	; 0x74
 8050b80:	4680      	mov	r8, r0
 8050b82:	460c      	mov	r4, r1
 8050b84:	4616      	mov	r6, r2
 8050b86:	d50f      	bpl.n	8050ba8 <_svfiprintf_r+0x34>
 8050b88:	690b      	ldr	r3, [r1, #16]
 8050b8a:	b96b      	cbnz	r3, 8050ba8 <_svfiprintf_r+0x34>
 8050b8c:	2140      	movs	r1, #64	; 0x40
 8050b8e:	f7ff ff3d 	bl	8050a0c <_malloc_r>
 8050b92:	6020      	str	r0, [r4, #0]
 8050b94:	6120      	str	r0, [r4, #16]
 8050b96:	b928      	cbnz	r0, 8050ba4 <_svfiprintf_r+0x30>
 8050b98:	230c      	movs	r3, #12
 8050b9a:	f8c8 3000 	str.w	r3, [r8]
 8050b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8050ba2:	e0c8      	b.n	8050d36 <_svfiprintf_r+0x1c2>
 8050ba4:	2340      	movs	r3, #64	; 0x40
 8050ba6:	6163      	str	r3, [r4, #20]
 8050ba8:	2300      	movs	r3, #0
 8050baa:	9309      	str	r3, [sp, #36]	; 0x24
 8050bac:	2320      	movs	r3, #32
 8050bae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8050bb2:	2330      	movs	r3, #48	; 0x30
 8050bb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8050bb8:	9503      	str	r5, [sp, #12]
 8050bba:	f04f 0b01 	mov.w	fp, #1
 8050bbe:	4637      	mov	r7, r6
 8050bc0:	463d      	mov	r5, r7
 8050bc2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8050bc6:	b10b      	cbz	r3, 8050bcc <_svfiprintf_r+0x58>
 8050bc8:	2b25      	cmp	r3, #37	; 0x25
 8050bca:	d13e      	bne.n	8050c4a <_svfiprintf_r+0xd6>
 8050bcc:	ebb7 0a06 	subs.w	sl, r7, r6
 8050bd0:	d00b      	beq.n	8050bea <_svfiprintf_r+0x76>
 8050bd2:	4653      	mov	r3, sl
 8050bd4:	4632      	mov	r2, r6
 8050bd6:	4621      	mov	r1, r4
 8050bd8:	4640      	mov	r0, r8
 8050bda:	f7ff ff71 	bl	8050ac0 <__ssputs_r>
 8050bde:	3001      	adds	r0, #1
 8050be0:	f000 80a4 	beq.w	8050d2c <_svfiprintf_r+0x1b8>
 8050be4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8050be6:	4453      	add	r3, sl
 8050be8:	9309      	str	r3, [sp, #36]	; 0x24
 8050bea:	783b      	ldrb	r3, [r7, #0]
 8050bec:	2b00      	cmp	r3, #0
 8050bee:	f000 809d 	beq.w	8050d2c <_svfiprintf_r+0x1b8>
 8050bf2:	2300      	movs	r3, #0
 8050bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8050bf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8050bfc:	9304      	str	r3, [sp, #16]
 8050bfe:	9307      	str	r3, [sp, #28]
 8050c00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8050c04:	931a      	str	r3, [sp, #104]	; 0x68
 8050c06:	462f      	mov	r7, r5
 8050c08:	2205      	movs	r2, #5
 8050c0a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8050c0e:	4850      	ldr	r0, [pc, #320]	; (8050d50 <_svfiprintf_r+0x1dc>)
 8050c10:	f7ef fc16 	bl	8040440 <memchr>
 8050c14:	9b04      	ldr	r3, [sp, #16]
 8050c16:	b9d0      	cbnz	r0, 8050c4e <_svfiprintf_r+0xda>
 8050c18:	06d9      	lsls	r1, r3, #27
 8050c1a:	bf44      	itt	mi
 8050c1c:	2220      	movmi	r2, #32
 8050c1e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8050c22:	071a      	lsls	r2, r3, #28
 8050c24:	bf44      	itt	mi
 8050c26:	222b      	movmi	r2, #43	; 0x2b
 8050c28:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8050c2c:	782a      	ldrb	r2, [r5, #0]
 8050c2e:	2a2a      	cmp	r2, #42	; 0x2a
 8050c30:	d015      	beq.n	8050c5e <_svfiprintf_r+0xea>
 8050c32:	9a07      	ldr	r2, [sp, #28]
 8050c34:	462f      	mov	r7, r5
 8050c36:	2000      	movs	r0, #0
 8050c38:	250a      	movs	r5, #10
 8050c3a:	4639      	mov	r1, r7
 8050c3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8050c40:	3b30      	subs	r3, #48	; 0x30
 8050c42:	2b09      	cmp	r3, #9
 8050c44:	d94d      	bls.n	8050ce2 <_svfiprintf_r+0x16e>
 8050c46:	b1b8      	cbz	r0, 8050c78 <_svfiprintf_r+0x104>
 8050c48:	e00f      	b.n	8050c6a <_svfiprintf_r+0xf6>
 8050c4a:	462f      	mov	r7, r5
 8050c4c:	e7b8      	b.n	8050bc0 <_svfiprintf_r+0x4c>
 8050c4e:	4a40      	ldr	r2, [pc, #256]	; (8050d50 <_svfiprintf_r+0x1dc>)
 8050c50:	1a80      	subs	r0, r0, r2
 8050c52:	fa0b f000 	lsl.w	r0, fp, r0
 8050c56:	4318      	orrs	r0, r3
 8050c58:	9004      	str	r0, [sp, #16]
 8050c5a:	463d      	mov	r5, r7
 8050c5c:	e7d3      	b.n	8050c06 <_svfiprintf_r+0x92>
 8050c5e:	9a03      	ldr	r2, [sp, #12]
 8050c60:	1d11      	adds	r1, r2, #4
 8050c62:	6812      	ldr	r2, [r2, #0]
 8050c64:	9103      	str	r1, [sp, #12]
 8050c66:	2a00      	cmp	r2, #0
 8050c68:	db01      	blt.n	8050c6e <_svfiprintf_r+0xfa>
 8050c6a:	9207      	str	r2, [sp, #28]
 8050c6c:	e004      	b.n	8050c78 <_svfiprintf_r+0x104>
 8050c6e:	4252      	negs	r2, r2
 8050c70:	f043 0302 	orr.w	r3, r3, #2
 8050c74:	9207      	str	r2, [sp, #28]
 8050c76:	9304      	str	r3, [sp, #16]
 8050c78:	783b      	ldrb	r3, [r7, #0]
 8050c7a:	2b2e      	cmp	r3, #46	; 0x2e
 8050c7c:	d10c      	bne.n	8050c98 <_svfiprintf_r+0x124>
 8050c7e:	787b      	ldrb	r3, [r7, #1]
 8050c80:	2b2a      	cmp	r3, #42	; 0x2a
 8050c82:	d133      	bne.n	8050cec <_svfiprintf_r+0x178>
 8050c84:	9b03      	ldr	r3, [sp, #12]
 8050c86:	1d1a      	adds	r2, r3, #4
 8050c88:	681b      	ldr	r3, [r3, #0]
 8050c8a:	9203      	str	r2, [sp, #12]
 8050c8c:	2b00      	cmp	r3, #0
 8050c8e:	bfb8      	it	lt
 8050c90:	f04f 33ff 	movlt.w	r3, #4294967295
 8050c94:	3702      	adds	r7, #2
 8050c96:	9305      	str	r3, [sp, #20]
 8050c98:	4d2e      	ldr	r5, [pc, #184]	; (8050d54 <_svfiprintf_r+0x1e0>)
 8050c9a:	7839      	ldrb	r1, [r7, #0]
 8050c9c:	2203      	movs	r2, #3
 8050c9e:	4628      	mov	r0, r5
 8050ca0:	f7ef fbce 	bl	8040440 <memchr>
 8050ca4:	b138      	cbz	r0, 8050cb6 <_svfiprintf_r+0x142>
 8050ca6:	2340      	movs	r3, #64	; 0x40
 8050ca8:	1b40      	subs	r0, r0, r5
 8050caa:	fa03 f000 	lsl.w	r0, r3, r0
 8050cae:	9b04      	ldr	r3, [sp, #16]
 8050cb0:	4303      	orrs	r3, r0
 8050cb2:	3701      	adds	r7, #1
 8050cb4:	9304      	str	r3, [sp, #16]
 8050cb6:	7839      	ldrb	r1, [r7, #0]
 8050cb8:	4827      	ldr	r0, [pc, #156]	; (8050d58 <_svfiprintf_r+0x1e4>)
 8050cba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8050cbe:	2206      	movs	r2, #6
 8050cc0:	1c7e      	adds	r6, r7, #1
 8050cc2:	f7ef fbbd 	bl	8040440 <memchr>
 8050cc6:	2800      	cmp	r0, #0
 8050cc8:	d038      	beq.n	8050d3c <_svfiprintf_r+0x1c8>
 8050cca:	4b24      	ldr	r3, [pc, #144]	; (8050d5c <_svfiprintf_r+0x1e8>)
 8050ccc:	bb13      	cbnz	r3, 8050d14 <_svfiprintf_r+0x1a0>
 8050cce:	9b03      	ldr	r3, [sp, #12]
 8050cd0:	3307      	adds	r3, #7
 8050cd2:	f023 0307 	bic.w	r3, r3, #7
 8050cd6:	3308      	adds	r3, #8
 8050cd8:	9303      	str	r3, [sp, #12]
 8050cda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8050cdc:	444b      	add	r3, r9
 8050cde:	9309      	str	r3, [sp, #36]	; 0x24
 8050ce0:	e76d      	b.n	8050bbe <_svfiprintf_r+0x4a>
 8050ce2:	fb05 3202 	mla	r2, r5, r2, r3
 8050ce6:	2001      	movs	r0, #1
 8050ce8:	460f      	mov	r7, r1
 8050cea:	e7a6      	b.n	8050c3a <_svfiprintf_r+0xc6>
 8050cec:	2300      	movs	r3, #0
 8050cee:	3701      	adds	r7, #1
 8050cf0:	9305      	str	r3, [sp, #20]
 8050cf2:	4619      	mov	r1, r3
 8050cf4:	250a      	movs	r5, #10
 8050cf6:	4638      	mov	r0, r7
 8050cf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8050cfc:	3a30      	subs	r2, #48	; 0x30
 8050cfe:	2a09      	cmp	r2, #9
 8050d00:	d903      	bls.n	8050d0a <_svfiprintf_r+0x196>
 8050d02:	2b00      	cmp	r3, #0
 8050d04:	d0c8      	beq.n	8050c98 <_svfiprintf_r+0x124>
 8050d06:	9105      	str	r1, [sp, #20]
 8050d08:	e7c6      	b.n	8050c98 <_svfiprintf_r+0x124>
 8050d0a:	fb05 2101 	mla	r1, r5, r1, r2
 8050d0e:	2301      	movs	r3, #1
 8050d10:	4607      	mov	r7, r0
 8050d12:	e7f0      	b.n	8050cf6 <_svfiprintf_r+0x182>
 8050d14:	ab03      	add	r3, sp, #12
 8050d16:	9300      	str	r3, [sp, #0]
 8050d18:	4622      	mov	r2, r4
 8050d1a:	4b11      	ldr	r3, [pc, #68]	; (8050d60 <_svfiprintf_r+0x1ec>)
 8050d1c:	a904      	add	r1, sp, #16
 8050d1e:	4640      	mov	r0, r8
 8050d20:	f3af 8000 	nop.w
 8050d24:	f1b0 3fff 	cmp.w	r0, #4294967295
 8050d28:	4681      	mov	r9, r0
 8050d2a:	d1d6      	bne.n	8050cda <_svfiprintf_r+0x166>
 8050d2c:	89a3      	ldrh	r3, [r4, #12]
 8050d2e:	065b      	lsls	r3, r3, #25
 8050d30:	f53f af35 	bmi.w	8050b9e <_svfiprintf_r+0x2a>
 8050d34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8050d36:	b01d      	add	sp, #116	; 0x74
 8050d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8050d3c:	ab03      	add	r3, sp, #12
 8050d3e:	9300      	str	r3, [sp, #0]
 8050d40:	4622      	mov	r2, r4
 8050d42:	4b07      	ldr	r3, [pc, #28]	; (8050d60 <_svfiprintf_r+0x1ec>)
 8050d44:	a904      	add	r1, sp, #16
 8050d46:	4640      	mov	r0, r8
 8050d48:	f000 f9c2 	bl	80510d0 <_printf_i>
 8050d4c:	e7ea      	b.n	8050d24 <_svfiprintf_r+0x1b0>
 8050d4e:	bf00      	nop
 8050d50:	08052b34 	.word	0x08052b34
 8050d54:	08052b3a 	.word	0x08052b3a
 8050d58:	08052b3e 	.word	0x08052b3e
 8050d5c:	00000000 	.word	0x00000000
 8050d60:	08050ac1 	.word	0x08050ac1

08050d64 <__sfputc_r>:
 8050d64:	6893      	ldr	r3, [r2, #8]
 8050d66:	3b01      	subs	r3, #1
 8050d68:	2b00      	cmp	r3, #0
 8050d6a:	b410      	push	{r4}
 8050d6c:	6093      	str	r3, [r2, #8]
 8050d6e:	da08      	bge.n	8050d82 <__sfputc_r+0x1e>
 8050d70:	6994      	ldr	r4, [r2, #24]
 8050d72:	42a3      	cmp	r3, r4
 8050d74:	db01      	blt.n	8050d7a <__sfputc_r+0x16>
 8050d76:	290a      	cmp	r1, #10
 8050d78:	d103      	bne.n	8050d82 <__sfputc_r+0x1e>
 8050d7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8050d7e:	f7ff bb51 	b.w	8050424 <__swbuf_r>
 8050d82:	6813      	ldr	r3, [r2, #0]
 8050d84:	1c58      	adds	r0, r3, #1
 8050d86:	6010      	str	r0, [r2, #0]
 8050d88:	7019      	strb	r1, [r3, #0]
 8050d8a:	4608      	mov	r0, r1
 8050d8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8050d90:	4770      	bx	lr

08050d92 <__sfputs_r>:
 8050d92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8050d94:	4606      	mov	r6, r0
 8050d96:	460f      	mov	r7, r1
 8050d98:	4614      	mov	r4, r2
 8050d9a:	18d5      	adds	r5, r2, r3
 8050d9c:	42ac      	cmp	r4, r5
 8050d9e:	d101      	bne.n	8050da4 <__sfputs_r+0x12>
 8050da0:	2000      	movs	r0, #0
 8050da2:	e007      	b.n	8050db4 <__sfputs_r+0x22>
 8050da4:	463a      	mov	r2, r7
 8050da6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8050daa:	4630      	mov	r0, r6
 8050dac:	f7ff ffda 	bl	8050d64 <__sfputc_r>
 8050db0:	1c43      	adds	r3, r0, #1
 8050db2:	d1f3      	bne.n	8050d9c <__sfputs_r+0xa>
 8050db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08050db8 <_vfiprintf_r>:
 8050db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8050dbc:	460c      	mov	r4, r1
 8050dbe:	b09d      	sub	sp, #116	; 0x74
 8050dc0:	4617      	mov	r7, r2
 8050dc2:	461d      	mov	r5, r3
 8050dc4:	4606      	mov	r6, r0
 8050dc6:	b118      	cbz	r0, 8050dd0 <_vfiprintf_r+0x18>
 8050dc8:	6983      	ldr	r3, [r0, #24]
 8050dca:	b90b      	cbnz	r3, 8050dd0 <_vfiprintf_r+0x18>
 8050dcc:	f7ff fcda 	bl	8050784 <__sinit>
 8050dd0:	4b7c      	ldr	r3, [pc, #496]	; (8050fc4 <_vfiprintf_r+0x20c>)
 8050dd2:	429c      	cmp	r4, r3
 8050dd4:	d158      	bne.n	8050e88 <_vfiprintf_r+0xd0>
 8050dd6:	6874      	ldr	r4, [r6, #4]
 8050dd8:	89a3      	ldrh	r3, [r4, #12]
 8050dda:	0718      	lsls	r0, r3, #28
 8050ddc:	d55e      	bpl.n	8050e9c <_vfiprintf_r+0xe4>
 8050dde:	6923      	ldr	r3, [r4, #16]
 8050de0:	2b00      	cmp	r3, #0
 8050de2:	d05b      	beq.n	8050e9c <_vfiprintf_r+0xe4>
 8050de4:	2300      	movs	r3, #0
 8050de6:	9309      	str	r3, [sp, #36]	; 0x24
 8050de8:	2320      	movs	r3, #32
 8050dea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8050dee:	2330      	movs	r3, #48	; 0x30
 8050df0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8050df4:	9503      	str	r5, [sp, #12]
 8050df6:	f04f 0b01 	mov.w	fp, #1
 8050dfa:	46b8      	mov	r8, r7
 8050dfc:	4645      	mov	r5, r8
 8050dfe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8050e02:	b10b      	cbz	r3, 8050e08 <_vfiprintf_r+0x50>
 8050e04:	2b25      	cmp	r3, #37	; 0x25
 8050e06:	d154      	bne.n	8050eb2 <_vfiprintf_r+0xfa>
 8050e08:	ebb8 0a07 	subs.w	sl, r8, r7
 8050e0c:	d00b      	beq.n	8050e26 <_vfiprintf_r+0x6e>
 8050e0e:	4653      	mov	r3, sl
 8050e10:	463a      	mov	r2, r7
 8050e12:	4621      	mov	r1, r4
 8050e14:	4630      	mov	r0, r6
 8050e16:	f7ff ffbc 	bl	8050d92 <__sfputs_r>
 8050e1a:	3001      	adds	r0, #1
 8050e1c:	f000 80c2 	beq.w	8050fa4 <_vfiprintf_r+0x1ec>
 8050e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8050e22:	4453      	add	r3, sl
 8050e24:	9309      	str	r3, [sp, #36]	; 0x24
 8050e26:	f898 3000 	ldrb.w	r3, [r8]
 8050e2a:	2b00      	cmp	r3, #0
 8050e2c:	f000 80ba 	beq.w	8050fa4 <_vfiprintf_r+0x1ec>
 8050e30:	2300      	movs	r3, #0
 8050e32:	f04f 32ff 	mov.w	r2, #4294967295
 8050e36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8050e3a:	9304      	str	r3, [sp, #16]
 8050e3c:	9307      	str	r3, [sp, #28]
 8050e3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8050e42:	931a      	str	r3, [sp, #104]	; 0x68
 8050e44:	46a8      	mov	r8, r5
 8050e46:	2205      	movs	r2, #5
 8050e48:	f818 1b01 	ldrb.w	r1, [r8], #1
 8050e4c:	485e      	ldr	r0, [pc, #376]	; (8050fc8 <_vfiprintf_r+0x210>)
 8050e4e:	f7ef faf7 	bl	8040440 <memchr>
 8050e52:	9b04      	ldr	r3, [sp, #16]
 8050e54:	bb78      	cbnz	r0, 8050eb6 <_vfiprintf_r+0xfe>
 8050e56:	06d9      	lsls	r1, r3, #27
 8050e58:	bf44      	itt	mi
 8050e5a:	2220      	movmi	r2, #32
 8050e5c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8050e60:	071a      	lsls	r2, r3, #28
 8050e62:	bf44      	itt	mi
 8050e64:	222b      	movmi	r2, #43	; 0x2b
 8050e66:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8050e6a:	782a      	ldrb	r2, [r5, #0]
 8050e6c:	2a2a      	cmp	r2, #42	; 0x2a
 8050e6e:	d02a      	beq.n	8050ec6 <_vfiprintf_r+0x10e>
 8050e70:	9a07      	ldr	r2, [sp, #28]
 8050e72:	46a8      	mov	r8, r5
 8050e74:	2000      	movs	r0, #0
 8050e76:	250a      	movs	r5, #10
 8050e78:	4641      	mov	r1, r8
 8050e7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8050e7e:	3b30      	subs	r3, #48	; 0x30
 8050e80:	2b09      	cmp	r3, #9
 8050e82:	d969      	bls.n	8050f58 <_vfiprintf_r+0x1a0>
 8050e84:	b360      	cbz	r0, 8050ee0 <_vfiprintf_r+0x128>
 8050e86:	e024      	b.n	8050ed2 <_vfiprintf_r+0x11a>
 8050e88:	4b50      	ldr	r3, [pc, #320]	; (8050fcc <_vfiprintf_r+0x214>)
 8050e8a:	429c      	cmp	r4, r3
 8050e8c:	d101      	bne.n	8050e92 <_vfiprintf_r+0xda>
 8050e8e:	68b4      	ldr	r4, [r6, #8]
 8050e90:	e7a2      	b.n	8050dd8 <_vfiprintf_r+0x20>
 8050e92:	4b4f      	ldr	r3, [pc, #316]	; (8050fd0 <_vfiprintf_r+0x218>)
 8050e94:	429c      	cmp	r4, r3
 8050e96:	bf08      	it	eq
 8050e98:	68f4      	ldreq	r4, [r6, #12]
 8050e9a:	e79d      	b.n	8050dd8 <_vfiprintf_r+0x20>
 8050e9c:	4621      	mov	r1, r4
 8050e9e:	4630      	mov	r0, r6
 8050ea0:	f7ff fb12 	bl	80504c8 <__swsetup_r>
 8050ea4:	2800      	cmp	r0, #0
 8050ea6:	d09d      	beq.n	8050de4 <_vfiprintf_r+0x2c>
 8050ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8050eac:	b01d      	add	sp, #116	; 0x74
 8050eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8050eb2:	46a8      	mov	r8, r5
 8050eb4:	e7a2      	b.n	8050dfc <_vfiprintf_r+0x44>
 8050eb6:	4a44      	ldr	r2, [pc, #272]	; (8050fc8 <_vfiprintf_r+0x210>)
 8050eb8:	1a80      	subs	r0, r0, r2
 8050eba:	fa0b f000 	lsl.w	r0, fp, r0
 8050ebe:	4318      	orrs	r0, r3
 8050ec0:	9004      	str	r0, [sp, #16]
 8050ec2:	4645      	mov	r5, r8
 8050ec4:	e7be      	b.n	8050e44 <_vfiprintf_r+0x8c>
 8050ec6:	9a03      	ldr	r2, [sp, #12]
 8050ec8:	1d11      	adds	r1, r2, #4
 8050eca:	6812      	ldr	r2, [r2, #0]
 8050ecc:	9103      	str	r1, [sp, #12]
 8050ece:	2a00      	cmp	r2, #0
 8050ed0:	db01      	blt.n	8050ed6 <_vfiprintf_r+0x11e>
 8050ed2:	9207      	str	r2, [sp, #28]
 8050ed4:	e004      	b.n	8050ee0 <_vfiprintf_r+0x128>
 8050ed6:	4252      	negs	r2, r2
 8050ed8:	f043 0302 	orr.w	r3, r3, #2
 8050edc:	9207      	str	r2, [sp, #28]
 8050ede:	9304      	str	r3, [sp, #16]
 8050ee0:	f898 3000 	ldrb.w	r3, [r8]
 8050ee4:	2b2e      	cmp	r3, #46	; 0x2e
 8050ee6:	d10e      	bne.n	8050f06 <_vfiprintf_r+0x14e>
 8050ee8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8050eec:	2b2a      	cmp	r3, #42	; 0x2a
 8050eee:	d138      	bne.n	8050f62 <_vfiprintf_r+0x1aa>
 8050ef0:	9b03      	ldr	r3, [sp, #12]
 8050ef2:	1d1a      	adds	r2, r3, #4
 8050ef4:	681b      	ldr	r3, [r3, #0]
 8050ef6:	9203      	str	r2, [sp, #12]
 8050ef8:	2b00      	cmp	r3, #0
 8050efa:	bfb8      	it	lt
 8050efc:	f04f 33ff 	movlt.w	r3, #4294967295
 8050f00:	f108 0802 	add.w	r8, r8, #2
 8050f04:	9305      	str	r3, [sp, #20]
 8050f06:	4d33      	ldr	r5, [pc, #204]	; (8050fd4 <_vfiprintf_r+0x21c>)
 8050f08:	f898 1000 	ldrb.w	r1, [r8]
 8050f0c:	2203      	movs	r2, #3
 8050f0e:	4628      	mov	r0, r5
 8050f10:	f7ef fa96 	bl	8040440 <memchr>
 8050f14:	b140      	cbz	r0, 8050f28 <_vfiprintf_r+0x170>
 8050f16:	2340      	movs	r3, #64	; 0x40
 8050f18:	1b40      	subs	r0, r0, r5
 8050f1a:	fa03 f000 	lsl.w	r0, r3, r0
 8050f1e:	9b04      	ldr	r3, [sp, #16]
 8050f20:	4303      	orrs	r3, r0
 8050f22:	f108 0801 	add.w	r8, r8, #1
 8050f26:	9304      	str	r3, [sp, #16]
 8050f28:	f898 1000 	ldrb.w	r1, [r8]
 8050f2c:	482a      	ldr	r0, [pc, #168]	; (8050fd8 <_vfiprintf_r+0x220>)
 8050f2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8050f32:	2206      	movs	r2, #6
 8050f34:	f108 0701 	add.w	r7, r8, #1
 8050f38:	f7ef fa82 	bl	8040440 <memchr>
 8050f3c:	2800      	cmp	r0, #0
 8050f3e:	d037      	beq.n	8050fb0 <_vfiprintf_r+0x1f8>
 8050f40:	4b26      	ldr	r3, [pc, #152]	; (8050fdc <_vfiprintf_r+0x224>)
 8050f42:	bb1b      	cbnz	r3, 8050f8c <_vfiprintf_r+0x1d4>
 8050f44:	9b03      	ldr	r3, [sp, #12]
 8050f46:	3307      	adds	r3, #7
 8050f48:	f023 0307 	bic.w	r3, r3, #7
 8050f4c:	3308      	adds	r3, #8
 8050f4e:	9303      	str	r3, [sp, #12]
 8050f50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8050f52:	444b      	add	r3, r9
 8050f54:	9309      	str	r3, [sp, #36]	; 0x24
 8050f56:	e750      	b.n	8050dfa <_vfiprintf_r+0x42>
 8050f58:	fb05 3202 	mla	r2, r5, r2, r3
 8050f5c:	2001      	movs	r0, #1
 8050f5e:	4688      	mov	r8, r1
 8050f60:	e78a      	b.n	8050e78 <_vfiprintf_r+0xc0>
 8050f62:	2300      	movs	r3, #0
 8050f64:	f108 0801 	add.w	r8, r8, #1
 8050f68:	9305      	str	r3, [sp, #20]
 8050f6a:	4619      	mov	r1, r3
 8050f6c:	250a      	movs	r5, #10
 8050f6e:	4640      	mov	r0, r8
 8050f70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8050f74:	3a30      	subs	r2, #48	; 0x30
 8050f76:	2a09      	cmp	r2, #9
 8050f78:	d903      	bls.n	8050f82 <_vfiprintf_r+0x1ca>
 8050f7a:	2b00      	cmp	r3, #0
 8050f7c:	d0c3      	beq.n	8050f06 <_vfiprintf_r+0x14e>
 8050f7e:	9105      	str	r1, [sp, #20]
 8050f80:	e7c1      	b.n	8050f06 <_vfiprintf_r+0x14e>
 8050f82:	fb05 2101 	mla	r1, r5, r1, r2
 8050f86:	2301      	movs	r3, #1
 8050f88:	4680      	mov	r8, r0
 8050f8a:	e7f0      	b.n	8050f6e <_vfiprintf_r+0x1b6>
 8050f8c:	ab03      	add	r3, sp, #12
 8050f8e:	9300      	str	r3, [sp, #0]
 8050f90:	4622      	mov	r2, r4
 8050f92:	4b13      	ldr	r3, [pc, #76]	; (8050fe0 <_vfiprintf_r+0x228>)
 8050f94:	a904      	add	r1, sp, #16
 8050f96:	4630      	mov	r0, r6
 8050f98:	f3af 8000 	nop.w
 8050f9c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8050fa0:	4681      	mov	r9, r0
 8050fa2:	d1d5      	bne.n	8050f50 <_vfiprintf_r+0x198>
 8050fa4:	89a3      	ldrh	r3, [r4, #12]
 8050fa6:	065b      	lsls	r3, r3, #25
 8050fa8:	f53f af7e 	bmi.w	8050ea8 <_vfiprintf_r+0xf0>
 8050fac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8050fae:	e77d      	b.n	8050eac <_vfiprintf_r+0xf4>
 8050fb0:	ab03      	add	r3, sp, #12
 8050fb2:	9300      	str	r3, [sp, #0]
 8050fb4:	4622      	mov	r2, r4
 8050fb6:	4b0a      	ldr	r3, [pc, #40]	; (8050fe0 <_vfiprintf_r+0x228>)
 8050fb8:	a904      	add	r1, sp, #16
 8050fba:	4630      	mov	r0, r6
 8050fbc:	f000 f888 	bl	80510d0 <_printf_i>
 8050fc0:	e7ec      	b.n	8050f9c <_vfiprintf_r+0x1e4>
 8050fc2:	bf00      	nop
 8050fc4:	08052af4 	.word	0x08052af4
 8050fc8:	08052b34 	.word	0x08052b34
 8050fcc:	08052b14 	.word	0x08052b14
 8050fd0:	08052ad4 	.word	0x08052ad4
 8050fd4:	08052b3a 	.word	0x08052b3a
 8050fd8:	08052b3e 	.word	0x08052b3e
 8050fdc:	00000000 	.word	0x00000000
 8050fe0:	08050d93 	.word	0x08050d93

08050fe4 <_printf_common>:
 8050fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8050fe8:	4691      	mov	r9, r2
 8050fea:	461f      	mov	r7, r3
 8050fec:	688a      	ldr	r2, [r1, #8]
 8050fee:	690b      	ldr	r3, [r1, #16]
 8050ff0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8050ff4:	4293      	cmp	r3, r2
 8050ff6:	bfb8      	it	lt
 8050ff8:	4613      	movlt	r3, r2
 8050ffa:	f8c9 3000 	str.w	r3, [r9]
 8050ffe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8051002:	4606      	mov	r6, r0
 8051004:	460c      	mov	r4, r1
 8051006:	b112      	cbz	r2, 805100e <_printf_common+0x2a>
 8051008:	3301      	adds	r3, #1
 805100a:	f8c9 3000 	str.w	r3, [r9]
 805100e:	6823      	ldr	r3, [r4, #0]
 8051010:	0699      	lsls	r1, r3, #26
 8051012:	bf42      	ittt	mi
 8051014:	f8d9 3000 	ldrmi.w	r3, [r9]
 8051018:	3302      	addmi	r3, #2
 805101a:	f8c9 3000 	strmi.w	r3, [r9]
 805101e:	6825      	ldr	r5, [r4, #0]
 8051020:	f015 0506 	ands.w	r5, r5, #6
 8051024:	d107      	bne.n	8051036 <_printf_common+0x52>
 8051026:	f104 0a19 	add.w	sl, r4, #25
 805102a:	68e3      	ldr	r3, [r4, #12]
 805102c:	f8d9 2000 	ldr.w	r2, [r9]
 8051030:	1a9b      	subs	r3, r3, r2
 8051032:	42ab      	cmp	r3, r5
 8051034:	dc28      	bgt.n	8051088 <_printf_common+0xa4>
 8051036:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 805103a:	6822      	ldr	r2, [r4, #0]
 805103c:	3300      	adds	r3, #0
 805103e:	bf18      	it	ne
 8051040:	2301      	movne	r3, #1
 8051042:	0692      	lsls	r2, r2, #26
 8051044:	d42d      	bmi.n	80510a2 <_printf_common+0xbe>
 8051046:	f104 0243 	add.w	r2, r4, #67	; 0x43
 805104a:	4639      	mov	r1, r7
 805104c:	4630      	mov	r0, r6
 805104e:	47c0      	blx	r8
 8051050:	3001      	adds	r0, #1
 8051052:	d020      	beq.n	8051096 <_printf_common+0xb2>
 8051054:	6823      	ldr	r3, [r4, #0]
 8051056:	68e5      	ldr	r5, [r4, #12]
 8051058:	f8d9 2000 	ldr.w	r2, [r9]
 805105c:	f003 0306 	and.w	r3, r3, #6
 8051060:	2b04      	cmp	r3, #4
 8051062:	bf08      	it	eq
 8051064:	1aad      	subeq	r5, r5, r2
 8051066:	68a3      	ldr	r3, [r4, #8]
 8051068:	6922      	ldr	r2, [r4, #16]
 805106a:	bf0c      	ite	eq
 805106c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8051070:	2500      	movne	r5, #0
 8051072:	4293      	cmp	r3, r2
 8051074:	bfc4      	itt	gt
 8051076:	1a9b      	subgt	r3, r3, r2
 8051078:	18ed      	addgt	r5, r5, r3
 805107a:	f04f 0900 	mov.w	r9, #0
 805107e:	341a      	adds	r4, #26
 8051080:	454d      	cmp	r5, r9
 8051082:	d11a      	bne.n	80510ba <_printf_common+0xd6>
 8051084:	2000      	movs	r0, #0
 8051086:	e008      	b.n	805109a <_printf_common+0xb6>
 8051088:	2301      	movs	r3, #1
 805108a:	4652      	mov	r2, sl
 805108c:	4639      	mov	r1, r7
 805108e:	4630      	mov	r0, r6
 8051090:	47c0      	blx	r8
 8051092:	3001      	adds	r0, #1
 8051094:	d103      	bne.n	805109e <_printf_common+0xba>
 8051096:	f04f 30ff 	mov.w	r0, #4294967295
 805109a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 805109e:	3501      	adds	r5, #1
 80510a0:	e7c3      	b.n	805102a <_printf_common+0x46>
 80510a2:	18e1      	adds	r1, r4, r3
 80510a4:	1c5a      	adds	r2, r3, #1
 80510a6:	2030      	movs	r0, #48	; 0x30
 80510a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80510ac:	4422      	add	r2, r4
 80510ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80510b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80510b6:	3302      	adds	r3, #2
 80510b8:	e7c5      	b.n	8051046 <_printf_common+0x62>
 80510ba:	2301      	movs	r3, #1
 80510bc:	4622      	mov	r2, r4
 80510be:	4639      	mov	r1, r7
 80510c0:	4630      	mov	r0, r6
 80510c2:	47c0      	blx	r8
 80510c4:	3001      	adds	r0, #1
 80510c6:	d0e6      	beq.n	8051096 <_printf_common+0xb2>
 80510c8:	f109 0901 	add.w	r9, r9, #1
 80510cc:	e7d8      	b.n	8051080 <_printf_common+0x9c>
	...

080510d0 <_printf_i>:
 80510d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80510d4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80510d8:	460c      	mov	r4, r1
 80510da:	7e09      	ldrb	r1, [r1, #24]
 80510dc:	b085      	sub	sp, #20
 80510de:	296e      	cmp	r1, #110	; 0x6e
 80510e0:	4617      	mov	r7, r2
 80510e2:	4606      	mov	r6, r0
 80510e4:	4698      	mov	r8, r3
 80510e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80510e8:	f000 80b3 	beq.w	8051252 <_printf_i+0x182>
 80510ec:	d822      	bhi.n	8051134 <_printf_i+0x64>
 80510ee:	2963      	cmp	r1, #99	; 0x63
 80510f0:	d036      	beq.n	8051160 <_printf_i+0x90>
 80510f2:	d80a      	bhi.n	805110a <_printf_i+0x3a>
 80510f4:	2900      	cmp	r1, #0
 80510f6:	f000 80b9 	beq.w	805126c <_printf_i+0x19c>
 80510fa:	2958      	cmp	r1, #88	; 0x58
 80510fc:	f000 8083 	beq.w	8051206 <_printf_i+0x136>
 8051100:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8051104:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8051108:	e032      	b.n	8051170 <_printf_i+0xa0>
 805110a:	2964      	cmp	r1, #100	; 0x64
 805110c:	d001      	beq.n	8051112 <_printf_i+0x42>
 805110e:	2969      	cmp	r1, #105	; 0x69
 8051110:	d1f6      	bne.n	8051100 <_printf_i+0x30>
 8051112:	6820      	ldr	r0, [r4, #0]
 8051114:	6813      	ldr	r3, [r2, #0]
 8051116:	0605      	lsls	r5, r0, #24
 8051118:	f103 0104 	add.w	r1, r3, #4
 805111c:	d52a      	bpl.n	8051174 <_printf_i+0xa4>
 805111e:	681b      	ldr	r3, [r3, #0]
 8051120:	6011      	str	r1, [r2, #0]
 8051122:	2b00      	cmp	r3, #0
 8051124:	da03      	bge.n	805112e <_printf_i+0x5e>
 8051126:	222d      	movs	r2, #45	; 0x2d
 8051128:	425b      	negs	r3, r3
 805112a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 805112e:	486f      	ldr	r0, [pc, #444]	; (80512ec <_printf_i+0x21c>)
 8051130:	220a      	movs	r2, #10
 8051132:	e039      	b.n	80511a8 <_printf_i+0xd8>
 8051134:	2973      	cmp	r1, #115	; 0x73
 8051136:	f000 809d 	beq.w	8051274 <_printf_i+0x1a4>
 805113a:	d808      	bhi.n	805114e <_printf_i+0x7e>
 805113c:	296f      	cmp	r1, #111	; 0x6f
 805113e:	d020      	beq.n	8051182 <_printf_i+0xb2>
 8051140:	2970      	cmp	r1, #112	; 0x70
 8051142:	d1dd      	bne.n	8051100 <_printf_i+0x30>
 8051144:	6823      	ldr	r3, [r4, #0]
 8051146:	f043 0320 	orr.w	r3, r3, #32
 805114a:	6023      	str	r3, [r4, #0]
 805114c:	e003      	b.n	8051156 <_printf_i+0x86>
 805114e:	2975      	cmp	r1, #117	; 0x75
 8051150:	d017      	beq.n	8051182 <_printf_i+0xb2>
 8051152:	2978      	cmp	r1, #120	; 0x78
 8051154:	d1d4      	bne.n	8051100 <_printf_i+0x30>
 8051156:	2378      	movs	r3, #120	; 0x78
 8051158:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 805115c:	4864      	ldr	r0, [pc, #400]	; (80512f0 <_printf_i+0x220>)
 805115e:	e055      	b.n	805120c <_printf_i+0x13c>
 8051160:	6813      	ldr	r3, [r2, #0]
 8051162:	1d19      	adds	r1, r3, #4
 8051164:	681b      	ldr	r3, [r3, #0]
 8051166:	6011      	str	r1, [r2, #0]
 8051168:	f104 0542 	add.w	r5, r4, #66	; 0x42
 805116c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8051170:	2301      	movs	r3, #1
 8051172:	e08c      	b.n	805128e <_printf_i+0x1be>
 8051174:	681b      	ldr	r3, [r3, #0]
 8051176:	6011      	str	r1, [r2, #0]
 8051178:	f010 0f40 	tst.w	r0, #64	; 0x40
 805117c:	bf18      	it	ne
 805117e:	b21b      	sxthne	r3, r3
 8051180:	e7cf      	b.n	8051122 <_printf_i+0x52>
 8051182:	6813      	ldr	r3, [r2, #0]
 8051184:	6825      	ldr	r5, [r4, #0]
 8051186:	1d18      	adds	r0, r3, #4
 8051188:	6010      	str	r0, [r2, #0]
 805118a:	0628      	lsls	r0, r5, #24
 805118c:	d501      	bpl.n	8051192 <_printf_i+0xc2>
 805118e:	681b      	ldr	r3, [r3, #0]
 8051190:	e002      	b.n	8051198 <_printf_i+0xc8>
 8051192:	0668      	lsls	r0, r5, #25
 8051194:	d5fb      	bpl.n	805118e <_printf_i+0xbe>
 8051196:	881b      	ldrh	r3, [r3, #0]
 8051198:	4854      	ldr	r0, [pc, #336]	; (80512ec <_printf_i+0x21c>)
 805119a:	296f      	cmp	r1, #111	; 0x6f
 805119c:	bf14      	ite	ne
 805119e:	220a      	movne	r2, #10
 80511a0:	2208      	moveq	r2, #8
 80511a2:	2100      	movs	r1, #0
 80511a4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80511a8:	6865      	ldr	r5, [r4, #4]
 80511aa:	60a5      	str	r5, [r4, #8]
 80511ac:	2d00      	cmp	r5, #0
 80511ae:	f2c0 8095 	blt.w	80512dc <_printf_i+0x20c>
 80511b2:	6821      	ldr	r1, [r4, #0]
 80511b4:	f021 0104 	bic.w	r1, r1, #4
 80511b8:	6021      	str	r1, [r4, #0]
 80511ba:	2b00      	cmp	r3, #0
 80511bc:	d13d      	bne.n	805123a <_printf_i+0x16a>
 80511be:	2d00      	cmp	r5, #0
 80511c0:	f040 808e 	bne.w	80512e0 <_printf_i+0x210>
 80511c4:	4665      	mov	r5, ip
 80511c6:	2a08      	cmp	r2, #8
 80511c8:	d10b      	bne.n	80511e2 <_printf_i+0x112>
 80511ca:	6823      	ldr	r3, [r4, #0]
 80511cc:	07db      	lsls	r3, r3, #31
 80511ce:	d508      	bpl.n	80511e2 <_printf_i+0x112>
 80511d0:	6923      	ldr	r3, [r4, #16]
 80511d2:	6862      	ldr	r2, [r4, #4]
 80511d4:	429a      	cmp	r2, r3
 80511d6:	bfde      	ittt	le
 80511d8:	2330      	movle	r3, #48	; 0x30
 80511da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80511de:	f105 35ff 	addle.w	r5, r5, #4294967295
 80511e2:	ebac 0305 	sub.w	r3, ip, r5
 80511e6:	6123      	str	r3, [r4, #16]
 80511e8:	f8cd 8000 	str.w	r8, [sp]
 80511ec:	463b      	mov	r3, r7
 80511ee:	aa03      	add	r2, sp, #12
 80511f0:	4621      	mov	r1, r4
 80511f2:	4630      	mov	r0, r6
 80511f4:	f7ff fef6 	bl	8050fe4 <_printf_common>
 80511f8:	3001      	adds	r0, #1
 80511fa:	d14d      	bne.n	8051298 <_printf_i+0x1c8>
 80511fc:	f04f 30ff 	mov.w	r0, #4294967295
 8051200:	b005      	add	sp, #20
 8051202:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8051206:	4839      	ldr	r0, [pc, #228]	; (80512ec <_printf_i+0x21c>)
 8051208:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 805120c:	6813      	ldr	r3, [r2, #0]
 805120e:	6821      	ldr	r1, [r4, #0]
 8051210:	1d1d      	adds	r5, r3, #4
 8051212:	681b      	ldr	r3, [r3, #0]
 8051214:	6015      	str	r5, [r2, #0]
 8051216:	060a      	lsls	r2, r1, #24
 8051218:	d50b      	bpl.n	8051232 <_printf_i+0x162>
 805121a:	07ca      	lsls	r2, r1, #31
 805121c:	bf44      	itt	mi
 805121e:	f041 0120 	orrmi.w	r1, r1, #32
 8051222:	6021      	strmi	r1, [r4, #0]
 8051224:	b91b      	cbnz	r3, 805122e <_printf_i+0x15e>
 8051226:	6822      	ldr	r2, [r4, #0]
 8051228:	f022 0220 	bic.w	r2, r2, #32
 805122c:	6022      	str	r2, [r4, #0]
 805122e:	2210      	movs	r2, #16
 8051230:	e7b7      	b.n	80511a2 <_printf_i+0xd2>
 8051232:	064d      	lsls	r5, r1, #25
 8051234:	bf48      	it	mi
 8051236:	b29b      	uxthmi	r3, r3
 8051238:	e7ef      	b.n	805121a <_printf_i+0x14a>
 805123a:	4665      	mov	r5, ip
 805123c:	fbb3 f1f2 	udiv	r1, r3, r2
 8051240:	fb02 3311 	mls	r3, r2, r1, r3
 8051244:	5cc3      	ldrb	r3, [r0, r3]
 8051246:	f805 3d01 	strb.w	r3, [r5, #-1]!
 805124a:	460b      	mov	r3, r1
 805124c:	2900      	cmp	r1, #0
 805124e:	d1f5      	bne.n	805123c <_printf_i+0x16c>
 8051250:	e7b9      	b.n	80511c6 <_printf_i+0xf6>
 8051252:	6813      	ldr	r3, [r2, #0]
 8051254:	6825      	ldr	r5, [r4, #0]
 8051256:	6961      	ldr	r1, [r4, #20]
 8051258:	1d18      	adds	r0, r3, #4
 805125a:	6010      	str	r0, [r2, #0]
 805125c:	0628      	lsls	r0, r5, #24
 805125e:	681b      	ldr	r3, [r3, #0]
 8051260:	d501      	bpl.n	8051266 <_printf_i+0x196>
 8051262:	6019      	str	r1, [r3, #0]
 8051264:	e002      	b.n	805126c <_printf_i+0x19c>
 8051266:	066a      	lsls	r2, r5, #25
 8051268:	d5fb      	bpl.n	8051262 <_printf_i+0x192>
 805126a:	8019      	strh	r1, [r3, #0]
 805126c:	2300      	movs	r3, #0
 805126e:	6123      	str	r3, [r4, #16]
 8051270:	4665      	mov	r5, ip
 8051272:	e7b9      	b.n	80511e8 <_printf_i+0x118>
 8051274:	6813      	ldr	r3, [r2, #0]
 8051276:	1d19      	adds	r1, r3, #4
 8051278:	6011      	str	r1, [r2, #0]
 805127a:	681d      	ldr	r5, [r3, #0]
 805127c:	6862      	ldr	r2, [r4, #4]
 805127e:	2100      	movs	r1, #0
 8051280:	4628      	mov	r0, r5
 8051282:	f7ef f8dd 	bl	8040440 <memchr>
 8051286:	b108      	cbz	r0, 805128c <_printf_i+0x1bc>
 8051288:	1b40      	subs	r0, r0, r5
 805128a:	6060      	str	r0, [r4, #4]
 805128c:	6863      	ldr	r3, [r4, #4]
 805128e:	6123      	str	r3, [r4, #16]
 8051290:	2300      	movs	r3, #0
 8051292:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8051296:	e7a7      	b.n	80511e8 <_printf_i+0x118>
 8051298:	6923      	ldr	r3, [r4, #16]
 805129a:	462a      	mov	r2, r5
 805129c:	4639      	mov	r1, r7
 805129e:	4630      	mov	r0, r6
 80512a0:	47c0      	blx	r8
 80512a2:	3001      	adds	r0, #1
 80512a4:	d0aa      	beq.n	80511fc <_printf_i+0x12c>
 80512a6:	6823      	ldr	r3, [r4, #0]
 80512a8:	079b      	lsls	r3, r3, #30
 80512aa:	d413      	bmi.n	80512d4 <_printf_i+0x204>
 80512ac:	68e0      	ldr	r0, [r4, #12]
 80512ae:	9b03      	ldr	r3, [sp, #12]
 80512b0:	4298      	cmp	r0, r3
 80512b2:	bfb8      	it	lt
 80512b4:	4618      	movlt	r0, r3
 80512b6:	e7a3      	b.n	8051200 <_printf_i+0x130>
 80512b8:	2301      	movs	r3, #1
 80512ba:	464a      	mov	r2, r9
 80512bc:	4639      	mov	r1, r7
 80512be:	4630      	mov	r0, r6
 80512c0:	47c0      	blx	r8
 80512c2:	3001      	adds	r0, #1
 80512c4:	d09a      	beq.n	80511fc <_printf_i+0x12c>
 80512c6:	3501      	adds	r5, #1
 80512c8:	68e3      	ldr	r3, [r4, #12]
 80512ca:	9a03      	ldr	r2, [sp, #12]
 80512cc:	1a9b      	subs	r3, r3, r2
 80512ce:	42ab      	cmp	r3, r5
 80512d0:	dcf2      	bgt.n	80512b8 <_printf_i+0x1e8>
 80512d2:	e7eb      	b.n	80512ac <_printf_i+0x1dc>
 80512d4:	2500      	movs	r5, #0
 80512d6:	f104 0919 	add.w	r9, r4, #25
 80512da:	e7f5      	b.n	80512c8 <_printf_i+0x1f8>
 80512dc:	2b00      	cmp	r3, #0
 80512de:	d1ac      	bne.n	805123a <_printf_i+0x16a>
 80512e0:	7803      	ldrb	r3, [r0, #0]
 80512e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80512e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80512ea:	e76c      	b.n	80511c6 <_printf_i+0xf6>
 80512ec:	08052b45 	.word	0x08052b45
 80512f0:	08052b56 	.word	0x08052b56

080512f4 <_sbrk_r>:
 80512f4:	b538      	push	{r3, r4, r5, lr}
 80512f6:	4c06      	ldr	r4, [pc, #24]	; (8051310 <_sbrk_r+0x1c>)
 80512f8:	2300      	movs	r3, #0
 80512fa:	4605      	mov	r5, r0
 80512fc:	4608      	mov	r0, r1
 80512fe:	6023      	str	r3, [r4, #0]
 8051300:	f000 fa74 	bl	80517ec <_sbrk>
 8051304:	1c43      	adds	r3, r0, #1
 8051306:	d102      	bne.n	805130e <_sbrk_r+0x1a>
 8051308:	6823      	ldr	r3, [r4, #0]
 805130a:	b103      	cbz	r3, 805130e <_sbrk_r+0x1a>
 805130c:	602b      	str	r3, [r5, #0]
 805130e:	bd38      	pop	{r3, r4, r5, pc}
 8051310:	2000e554 	.word	0x2000e554

08051314 <__sread>:
 8051314:	b510      	push	{r4, lr}
 8051316:	460c      	mov	r4, r1
 8051318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 805131c:	f000 f8d6 	bl	80514cc <_read_r>
 8051320:	2800      	cmp	r0, #0
 8051322:	bfab      	itete	ge
 8051324:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8051326:	89a3      	ldrhlt	r3, [r4, #12]
 8051328:	181b      	addge	r3, r3, r0
 805132a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 805132e:	bfac      	ite	ge
 8051330:	6563      	strge	r3, [r4, #84]	; 0x54
 8051332:	81a3      	strhlt	r3, [r4, #12]
 8051334:	bd10      	pop	{r4, pc}

08051336 <__swrite>:
 8051336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 805133a:	461f      	mov	r7, r3
 805133c:	898b      	ldrh	r3, [r1, #12]
 805133e:	05db      	lsls	r3, r3, #23
 8051340:	4605      	mov	r5, r0
 8051342:	460c      	mov	r4, r1
 8051344:	4616      	mov	r6, r2
 8051346:	d505      	bpl.n	8051354 <__swrite+0x1e>
 8051348:	2302      	movs	r3, #2
 805134a:	2200      	movs	r2, #0
 805134c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8051350:	f000 f868 	bl	8051424 <_lseek_r>
 8051354:	89a3      	ldrh	r3, [r4, #12]
 8051356:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 805135a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 805135e:	81a3      	strh	r3, [r4, #12]
 8051360:	4632      	mov	r2, r6
 8051362:	463b      	mov	r3, r7
 8051364:	4628      	mov	r0, r5
 8051366:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 805136a:	f000 b817 	b.w	805139c <_write_r>

0805136e <__sseek>:
 805136e:	b510      	push	{r4, lr}
 8051370:	460c      	mov	r4, r1
 8051372:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8051376:	f000 f855 	bl	8051424 <_lseek_r>
 805137a:	1c43      	adds	r3, r0, #1
 805137c:	89a3      	ldrh	r3, [r4, #12]
 805137e:	bf15      	itete	ne
 8051380:	6560      	strne	r0, [r4, #84]	; 0x54
 8051382:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8051386:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 805138a:	81a3      	strheq	r3, [r4, #12]
 805138c:	bf18      	it	ne
 805138e:	81a3      	strhne	r3, [r4, #12]
 8051390:	bd10      	pop	{r4, pc}

08051392 <__sclose>:
 8051392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8051396:	f000 b813 	b.w	80513c0 <_close_r>
	...

0805139c <_write_r>:
 805139c:	b538      	push	{r3, r4, r5, lr}
 805139e:	4c07      	ldr	r4, [pc, #28]	; (80513bc <_write_r+0x20>)
 80513a0:	4605      	mov	r5, r0
 80513a2:	4608      	mov	r0, r1
 80513a4:	4611      	mov	r1, r2
 80513a6:	2200      	movs	r2, #0
 80513a8:	6022      	str	r2, [r4, #0]
 80513aa:	461a      	mov	r2, r3
 80513ac:	f000 fa2c 	bl	8051808 <_write>
 80513b0:	1c43      	adds	r3, r0, #1
 80513b2:	d102      	bne.n	80513ba <_write_r+0x1e>
 80513b4:	6823      	ldr	r3, [r4, #0]
 80513b6:	b103      	cbz	r3, 80513ba <_write_r+0x1e>
 80513b8:	602b      	str	r3, [r5, #0]
 80513ba:	bd38      	pop	{r3, r4, r5, pc}
 80513bc:	2000e554 	.word	0x2000e554

080513c0 <_close_r>:
 80513c0:	b538      	push	{r3, r4, r5, lr}
 80513c2:	4c06      	ldr	r4, [pc, #24]	; (80513dc <_close_r+0x1c>)
 80513c4:	2300      	movs	r3, #0
 80513c6:	4605      	mov	r5, r0
 80513c8:	4608      	mov	r0, r1
 80513ca:	6023      	str	r3, [r4, #0]
 80513cc:	f000 f9e6 	bl	805179c <_close>
 80513d0:	1c43      	adds	r3, r0, #1
 80513d2:	d102      	bne.n	80513da <_close_r+0x1a>
 80513d4:	6823      	ldr	r3, [r4, #0]
 80513d6:	b103      	cbz	r3, 80513da <_close_r+0x1a>
 80513d8:	602b      	str	r3, [r5, #0]
 80513da:	bd38      	pop	{r3, r4, r5, pc}
 80513dc:	2000e554 	.word	0x2000e554

080513e0 <_fstat_r>:
 80513e0:	b538      	push	{r3, r4, r5, lr}
 80513e2:	4c07      	ldr	r4, [pc, #28]	; (8051400 <_fstat_r+0x20>)
 80513e4:	2300      	movs	r3, #0
 80513e6:	4605      	mov	r5, r0
 80513e8:	4608      	mov	r0, r1
 80513ea:	4611      	mov	r1, r2
 80513ec:	6023      	str	r3, [r4, #0]
 80513ee:	f000 f9dd 	bl	80517ac <_fstat>
 80513f2:	1c43      	adds	r3, r0, #1
 80513f4:	d102      	bne.n	80513fc <_fstat_r+0x1c>
 80513f6:	6823      	ldr	r3, [r4, #0]
 80513f8:	b103      	cbz	r3, 80513fc <_fstat_r+0x1c>
 80513fa:	602b      	str	r3, [r5, #0]
 80513fc:	bd38      	pop	{r3, r4, r5, pc}
 80513fe:	bf00      	nop
 8051400:	2000e554 	.word	0x2000e554

08051404 <_isatty_r>:
 8051404:	b538      	push	{r3, r4, r5, lr}
 8051406:	4c06      	ldr	r4, [pc, #24]	; (8051420 <_isatty_r+0x1c>)
 8051408:	2300      	movs	r3, #0
 805140a:	4605      	mov	r5, r0
 805140c:	4608      	mov	r0, r1
 805140e:	6023      	str	r3, [r4, #0]
 8051410:	f000 f9d4 	bl	80517bc <_isatty>
 8051414:	1c43      	adds	r3, r0, #1
 8051416:	d102      	bne.n	805141e <_isatty_r+0x1a>
 8051418:	6823      	ldr	r3, [r4, #0]
 805141a:	b103      	cbz	r3, 805141e <_isatty_r+0x1a>
 805141c:	602b      	str	r3, [r5, #0]
 805141e:	bd38      	pop	{r3, r4, r5, pc}
 8051420:	2000e554 	.word	0x2000e554

08051424 <_lseek_r>:
 8051424:	b538      	push	{r3, r4, r5, lr}
 8051426:	4c07      	ldr	r4, [pc, #28]	; (8051444 <_lseek_r+0x20>)
 8051428:	4605      	mov	r5, r0
 805142a:	4608      	mov	r0, r1
 805142c:	4611      	mov	r1, r2
 805142e:	2200      	movs	r2, #0
 8051430:	6022      	str	r2, [r4, #0]
 8051432:	461a      	mov	r2, r3
 8051434:	f000 f9ca 	bl	80517cc <_lseek>
 8051438:	1c43      	adds	r3, r0, #1
 805143a:	d102      	bne.n	8051442 <_lseek_r+0x1e>
 805143c:	6823      	ldr	r3, [r4, #0]
 805143e:	b103      	cbz	r3, 8051442 <_lseek_r+0x1e>
 8051440:	602b      	str	r3, [r5, #0]
 8051442:	bd38      	pop	{r3, r4, r5, pc}
 8051444:	2000e554 	.word	0x2000e554

08051448 <memmove>:
 8051448:	4288      	cmp	r0, r1
 805144a:	b510      	push	{r4, lr}
 805144c:	eb01 0302 	add.w	r3, r1, r2
 8051450:	d807      	bhi.n	8051462 <memmove+0x1a>
 8051452:	1e42      	subs	r2, r0, #1
 8051454:	4299      	cmp	r1, r3
 8051456:	d00a      	beq.n	805146e <memmove+0x26>
 8051458:	f811 4b01 	ldrb.w	r4, [r1], #1
 805145c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8051460:	e7f8      	b.n	8051454 <memmove+0xc>
 8051462:	4283      	cmp	r3, r0
 8051464:	d9f5      	bls.n	8051452 <memmove+0xa>
 8051466:	1881      	adds	r1, r0, r2
 8051468:	1ad2      	subs	r2, r2, r3
 805146a:	42d3      	cmn	r3, r2
 805146c:	d100      	bne.n	8051470 <memmove+0x28>
 805146e:	bd10      	pop	{r4, pc}
 8051470:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8051474:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8051478:	e7f7      	b.n	805146a <memmove+0x22>

0805147a <__malloc_lock>:
 805147a:	4770      	bx	lr

0805147c <__malloc_unlock>:
 805147c:	4770      	bx	lr

0805147e <_realloc_r>:
 805147e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8051480:	4607      	mov	r7, r0
 8051482:	4614      	mov	r4, r2
 8051484:	460e      	mov	r6, r1
 8051486:	b921      	cbnz	r1, 8051492 <_realloc_r+0x14>
 8051488:	4611      	mov	r1, r2
 805148a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 805148e:	f7ff babd 	b.w	8050a0c <_malloc_r>
 8051492:	b922      	cbnz	r2, 805149e <_realloc_r+0x20>
 8051494:	f7ff fa6c 	bl	8050970 <_free_r>
 8051498:	4625      	mov	r5, r4
 805149a:	4628      	mov	r0, r5
 805149c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 805149e:	f000 f827 	bl	80514f0 <_malloc_usable_size_r>
 80514a2:	42a0      	cmp	r0, r4
 80514a4:	d20f      	bcs.n	80514c6 <_realloc_r+0x48>
 80514a6:	4621      	mov	r1, r4
 80514a8:	4638      	mov	r0, r7
 80514aa:	f7ff faaf 	bl	8050a0c <_malloc_r>
 80514ae:	4605      	mov	r5, r0
 80514b0:	2800      	cmp	r0, #0
 80514b2:	d0f2      	beq.n	805149a <_realloc_r+0x1c>
 80514b4:	4631      	mov	r1, r6
 80514b6:	4622      	mov	r2, r4
 80514b8:	f7fe fe3d 	bl	8050136 <memcpy>
 80514bc:	4631      	mov	r1, r6
 80514be:	4638      	mov	r0, r7
 80514c0:	f7ff fa56 	bl	8050970 <_free_r>
 80514c4:	e7e9      	b.n	805149a <_realloc_r+0x1c>
 80514c6:	4635      	mov	r5, r6
 80514c8:	e7e7      	b.n	805149a <_realloc_r+0x1c>
	...

080514cc <_read_r>:
 80514cc:	b538      	push	{r3, r4, r5, lr}
 80514ce:	4c07      	ldr	r4, [pc, #28]	; (80514ec <_read_r+0x20>)
 80514d0:	4605      	mov	r5, r0
 80514d2:	4608      	mov	r0, r1
 80514d4:	4611      	mov	r1, r2
 80514d6:	2200      	movs	r2, #0
 80514d8:	6022      	str	r2, [r4, #0]
 80514da:	461a      	mov	r2, r3
 80514dc:	f000 f97e 	bl	80517dc <_read>
 80514e0:	1c43      	adds	r3, r0, #1
 80514e2:	d102      	bne.n	80514ea <_read_r+0x1e>
 80514e4:	6823      	ldr	r3, [r4, #0]
 80514e6:	b103      	cbz	r3, 80514ea <_read_r+0x1e>
 80514e8:	602b      	str	r3, [r5, #0]
 80514ea:	bd38      	pop	{r3, r4, r5, pc}
 80514ec:	2000e554 	.word	0x2000e554

080514f0 <_malloc_usable_size_r>:
 80514f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80514f4:	1f18      	subs	r0, r3, #4
 80514f6:	2b00      	cmp	r3, #0
 80514f8:	bfbc      	itt	lt
 80514fa:	580b      	ldrlt	r3, [r1, r0]
 80514fc:	18c0      	addlt	r0, r0, r3
 80514fe:	4770      	bx	lr

08051500 <ceil>:
 8051500:	ec51 0b10 	vmov	r0, r1, d0
 8051504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8051508:	f3c1 570a 	ubfx	r7, r1, #20, #11
 805150c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8051510:	2e13      	cmp	r6, #19
 8051512:	460c      	mov	r4, r1
 8051514:	ee10 5a10 	vmov	r5, s0
 8051518:	4680      	mov	r8, r0
 805151a:	dc30      	bgt.n	805157e <ceil+0x7e>
 805151c:	2e00      	cmp	r6, #0
 805151e:	da12      	bge.n	8051546 <ceil+0x46>
 8051520:	a333      	add	r3, pc, #204	; (adr r3, 80515f0 <ceil+0xf0>)
 8051522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8051526:	f7ee ffe1 	bl	80404ec <__adddf3>
 805152a:	2200      	movs	r2, #0
 805152c:	2300      	movs	r3, #0
 805152e:	f7ef fc23 	bl	8040d78 <__aeabi_dcmpgt>
 8051532:	b128      	cbz	r0, 8051540 <ceil+0x40>
 8051534:	2c00      	cmp	r4, #0
 8051536:	db55      	blt.n	80515e4 <ceil+0xe4>
 8051538:	432c      	orrs	r4, r5
 805153a:	d057      	beq.n	80515ec <ceil+0xec>
 805153c:	4c2e      	ldr	r4, [pc, #184]	; (80515f8 <ceil+0xf8>)
 805153e:	2500      	movs	r5, #0
 8051540:	4621      	mov	r1, r4
 8051542:	4628      	mov	r0, r5
 8051544:	e025      	b.n	8051592 <ceil+0x92>
 8051546:	4f2d      	ldr	r7, [pc, #180]	; (80515fc <ceil+0xfc>)
 8051548:	4137      	asrs	r7, r6
 805154a:	ea01 0307 	and.w	r3, r1, r7
 805154e:	4303      	orrs	r3, r0
 8051550:	d01f      	beq.n	8051592 <ceil+0x92>
 8051552:	a327      	add	r3, pc, #156	; (adr r3, 80515f0 <ceil+0xf0>)
 8051554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8051558:	f7ee ffc8 	bl	80404ec <__adddf3>
 805155c:	2200      	movs	r2, #0
 805155e:	2300      	movs	r3, #0
 8051560:	f7ef fc0a 	bl	8040d78 <__aeabi_dcmpgt>
 8051564:	2800      	cmp	r0, #0
 8051566:	d0eb      	beq.n	8051540 <ceil+0x40>
 8051568:	2c00      	cmp	r4, #0
 805156a:	bfc2      	ittt	gt
 805156c:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8051570:	fa43 f606 	asrgt.w	r6, r3, r6
 8051574:	19a4      	addgt	r4, r4, r6
 8051576:	ea24 0407 	bic.w	r4, r4, r7
 805157a:	2500      	movs	r5, #0
 805157c:	e7e0      	b.n	8051540 <ceil+0x40>
 805157e:	2e33      	cmp	r6, #51	; 0x33
 8051580:	dd0b      	ble.n	805159a <ceil+0x9a>
 8051582:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8051586:	d104      	bne.n	8051592 <ceil+0x92>
 8051588:	ee10 2a10 	vmov	r2, s0
 805158c:	460b      	mov	r3, r1
 805158e:	f7ee ffad 	bl	80404ec <__adddf3>
 8051592:	ec41 0b10 	vmov	d0, r0, r1
 8051596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 805159a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 805159e:	f04f 33ff 	mov.w	r3, #4294967295
 80515a2:	fa23 f707 	lsr.w	r7, r3, r7
 80515a6:	4207      	tst	r7, r0
 80515a8:	d0f3      	beq.n	8051592 <ceil+0x92>
 80515aa:	a311      	add	r3, pc, #68	; (adr r3, 80515f0 <ceil+0xf0>)
 80515ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80515b0:	f7ee ff9c 	bl	80404ec <__adddf3>
 80515b4:	2200      	movs	r2, #0
 80515b6:	2300      	movs	r3, #0
 80515b8:	f7ef fbde 	bl	8040d78 <__aeabi_dcmpgt>
 80515bc:	2800      	cmp	r0, #0
 80515be:	d0bf      	beq.n	8051540 <ceil+0x40>
 80515c0:	2c00      	cmp	r4, #0
 80515c2:	dd02      	ble.n	80515ca <ceil+0xca>
 80515c4:	2e14      	cmp	r6, #20
 80515c6:	d103      	bne.n	80515d0 <ceil+0xd0>
 80515c8:	3401      	adds	r4, #1
 80515ca:	ea25 0507 	bic.w	r5, r5, r7
 80515ce:	e7b7      	b.n	8051540 <ceil+0x40>
 80515d0:	2301      	movs	r3, #1
 80515d2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80515d6:	fa03 f606 	lsl.w	r6, r3, r6
 80515da:	4435      	add	r5, r6
 80515dc:	4545      	cmp	r5, r8
 80515de:	bf38      	it	cc
 80515e0:	18e4      	addcc	r4, r4, r3
 80515e2:	e7f2      	b.n	80515ca <ceil+0xca>
 80515e4:	2500      	movs	r5, #0
 80515e6:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80515ea:	e7a9      	b.n	8051540 <ceil+0x40>
 80515ec:	4625      	mov	r5, r4
 80515ee:	e7a7      	b.n	8051540 <ceil+0x40>
 80515f0:	8800759c 	.word	0x8800759c
 80515f4:	7e37e43c 	.word	0x7e37e43c
 80515f8:	3ff00000 	.word	0x3ff00000
 80515fc:	000fffff 	.word	0x000fffff

08051600 <floor>:
 8051600:	ec51 0b10 	vmov	r0, r1, d0
 8051604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8051608:	f3c1 570a 	ubfx	r7, r1, #20, #11
 805160c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8051610:	2e13      	cmp	r6, #19
 8051612:	460c      	mov	r4, r1
 8051614:	ee10 5a10 	vmov	r5, s0
 8051618:	4680      	mov	r8, r0
 805161a:	dc34      	bgt.n	8051686 <floor+0x86>
 805161c:	2e00      	cmp	r6, #0
 805161e:	da16      	bge.n	805164e <floor+0x4e>
 8051620:	a335      	add	r3, pc, #212	; (adr r3, 80516f8 <floor+0xf8>)
 8051622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8051626:	f7ee ff61 	bl	80404ec <__adddf3>
 805162a:	2200      	movs	r2, #0
 805162c:	2300      	movs	r3, #0
 805162e:	f7ef fba3 	bl	8040d78 <__aeabi_dcmpgt>
 8051632:	b148      	cbz	r0, 8051648 <floor+0x48>
 8051634:	2c00      	cmp	r4, #0
 8051636:	da59      	bge.n	80516ec <floor+0xec>
 8051638:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 805163c:	4a30      	ldr	r2, [pc, #192]	; (8051700 <floor+0x100>)
 805163e:	432b      	orrs	r3, r5
 8051640:	2500      	movs	r5, #0
 8051642:	42ab      	cmp	r3, r5
 8051644:	bf18      	it	ne
 8051646:	4614      	movne	r4, r2
 8051648:	4621      	mov	r1, r4
 805164a:	4628      	mov	r0, r5
 805164c:	e025      	b.n	805169a <floor+0x9a>
 805164e:	4f2d      	ldr	r7, [pc, #180]	; (8051704 <floor+0x104>)
 8051650:	4137      	asrs	r7, r6
 8051652:	ea01 0307 	and.w	r3, r1, r7
 8051656:	4303      	orrs	r3, r0
 8051658:	d01f      	beq.n	805169a <floor+0x9a>
 805165a:	a327      	add	r3, pc, #156	; (adr r3, 80516f8 <floor+0xf8>)
 805165c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8051660:	f7ee ff44 	bl	80404ec <__adddf3>
 8051664:	2200      	movs	r2, #0
 8051666:	2300      	movs	r3, #0
 8051668:	f7ef fb86 	bl	8040d78 <__aeabi_dcmpgt>
 805166c:	2800      	cmp	r0, #0
 805166e:	d0eb      	beq.n	8051648 <floor+0x48>
 8051670:	2c00      	cmp	r4, #0
 8051672:	bfbe      	ittt	lt
 8051674:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8051678:	fa43 f606 	asrlt.w	r6, r3, r6
 805167c:	19a4      	addlt	r4, r4, r6
 805167e:	ea24 0407 	bic.w	r4, r4, r7
 8051682:	2500      	movs	r5, #0
 8051684:	e7e0      	b.n	8051648 <floor+0x48>
 8051686:	2e33      	cmp	r6, #51	; 0x33
 8051688:	dd0b      	ble.n	80516a2 <floor+0xa2>
 805168a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 805168e:	d104      	bne.n	805169a <floor+0x9a>
 8051690:	ee10 2a10 	vmov	r2, s0
 8051694:	460b      	mov	r3, r1
 8051696:	f7ee ff29 	bl	80404ec <__adddf3>
 805169a:	ec41 0b10 	vmov	d0, r0, r1
 805169e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80516a2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80516a6:	f04f 33ff 	mov.w	r3, #4294967295
 80516aa:	fa23 f707 	lsr.w	r7, r3, r7
 80516ae:	4207      	tst	r7, r0
 80516b0:	d0f3      	beq.n	805169a <floor+0x9a>
 80516b2:	a311      	add	r3, pc, #68	; (adr r3, 80516f8 <floor+0xf8>)
 80516b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80516b8:	f7ee ff18 	bl	80404ec <__adddf3>
 80516bc:	2200      	movs	r2, #0
 80516be:	2300      	movs	r3, #0
 80516c0:	f7ef fb5a 	bl	8040d78 <__aeabi_dcmpgt>
 80516c4:	2800      	cmp	r0, #0
 80516c6:	d0bf      	beq.n	8051648 <floor+0x48>
 80516c8:	2c00      	cmp	r4, #0
 80516ca:	da02      	bge.n	80516d2 <floor+0xd2>
 80516cc:	2e14      	cmp	r6, #20
 80516ce:	d103      	bne.n	80516d8 <floor+0xd8>
 80516d0:	3401      	adds	r4, #1
 80516d2:	ea25 0507 	bic.w	r5, r5, r7
 80516d6:	e7b7      	b.n	8051648 <floor+0x48>
 80516d8:	2301      	movs	r3, #1
 80516da:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80516de:	fa03 f606 	lsl.w	r6, r3, r6
 80516e2:	4435      	add	r5, r6
 80516e4:	4545      	cmp	r5, r8
 80516e6:	bf38      	it	cc
 80516e8:	18e4      	addcc	r4, r4, r3
 80516ea:	e7f2      	b.n	80516d2 <floor+0xd2>
 80516ec:	2500      	movs	r5, #0
 80516ee:	462c      	mov	r4, r5
 80516f0:	e7aa      	b.n	8051648 <floor+0x48>
 80516f2:	bf00      	nop
 80516f4:	f3af 8000 	nop.w
 80516f8:	8800759c 	.word	0x8800759c
 80516fc:	7e37e43c 	.word	0x7e37e43c
 8051700:	bff00000 	.word	0xbff00000
 8051704:	000fffff 	.word	0x000fffff

08051708 <round>:
 8051708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 805170a:	ec57 6b10 	vmov	r6, r7, d0
 805170e:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8051712:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8051716:	2c13      	cmp	r4, #19
 8051718:	463b      	mov	r3, r7
 805171a:	463d      	mov	r5, r7
 805171c:	dc17      	bgt.n	805174e <round+0x46>
 805171e:	2c00      	cmp	r4, #0
 8051720:	da09      	bge.n	8051736 <round+0x2e>
 8051722:	3401      	adds	r4, #1
 8051724:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8051728:	d103      	bne.n	8051732 <round+0x2a>
 805172a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 805172e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8051732:	2100      	movs	r1, #0
 8051734:	e02c      	b.n	8051790 <round+0x88>
 8051736:	4a18      	ldr	r2, [pc, #96]	; (8051798 <round+0x90>)
 8051738:	4122      	asrs	r2, r4
 805173a:	4217      	tst	r7, r2
 805173c:	d100      	bne.n	8051740 <round+0x38>
 805173e:	b19e      	cbz	r6, 8051768 <round+0x60>
 8051740:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8051744:	4123      	asrs	r3, r4
 8051746:	442b      	add	r3, r5
 8051748:	ea23 0302 	bic.w	r3, r3, r2
 805174c:	e7f1      	b.n	8051732 <round+0x2a>
 805174e:	2c33      	cmp	r4, #51	; 0x33
 8051750:	dd0d      	ble.n	805176e <round+0x66>
 8051752:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8051756:	d107      	bne.n	8051768 <round+0x60>
 8051758:	4630      	mov	r0, r6
 805175a:	4639      	mov	r1, r7
 805175c:	ee10 2a10 	vmov	r2, s0
 8051760:	f7ee fec4 	bl	80404ec <__adddf3>
 8051764:	4606      	mov	r6, r0
 8051766:	460f      	mov	r7, r1
 8051768:	ec47 6b10 	vmov	d0, r6, r7
 805176c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 805176e:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8051772:	f04f 30ff 	mov.w	r0, #4294967295
 8051776:	40d0      	lsrs	r0, r2
 8051778:	4206      	tst	r6, r0
 805177a:	d0f5      	beq.n	8051768 <round+0x60>
 805177c:	2201      	movs	r2, #1
 805177e:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8051782:	fa02 f404 	lsl.w	r4, r2, r4
 8051786:	1931      	adds	r1, r6, r4
 8051788:	bf28      	it	cs
 805178a:	189b      	addcs	r3, r3, r2
 805178c:	ea21 0100 	bic.w	r1, r1, r0
 8051790:	461f      	mov	r7, r3
 8051792:	460e      	mov	r6, r1
 8051794:	e7e8      	b.n	8051768 <round+0x60>
 8051796:	bf00      	nop
 8051798:	000fffff 	.word	0x000fffff

0805179c <_close>:
 805179c:	4b02      	ldr	r3, [pc, #8]	; (80517a8 <_close+0xc>)
 805179e:	2258      	movs	r2, #88	; 0x58
 80517a0:	601a      	str	r2, [r3, #0]
 80517a2:	f04f 30ff 	mov.w	r0, #4294967295
 80517a6:	4770      	bx	lr
 80517a8:	2000e554 	.word	0x2000e554

080517ac <_fstat>:
 80517ac:	4b02      	ldr	r3, [pc, #8]	; (80517b8 <_fstat+0xc>)
 80517ae:	2258      	movs	r2, #88	; 0x58
 80517b0:	601a      	str	r2, [r3, #0]
 80517b2:	f04f 30ff 	mov.w	r0, #4294967295
 80517b6:	4770      	bx	lr
 80517b8:	2000e554 	.word	0x2000e554

080517bc <_isatty>:
 80517bc:	4b02      	ldr	r3, [pc, #8]	; (80517c8 <_isatty+0xc>)
 80517be:	2258      	movs	r2, #88	; 0x58
 80517c0:	601a      	str	r2, [r3, #0]
 80517c2:	2000      	movs	r0, #0
 80517c4:	4770      	bx	lr
 80517c6:	bf00      	nop
 80517c8:	2000e554 	.word	0x2000e554

080517cc <_lseek>:
 80517cc:	4b02      	ldr	r3, [pc, #8]	; (80517d8 <_lseek+0xc>)
 80517ce:	2258      	movs	r2, #88	; 0x58
 80517d0:	601a      	str	r2, [r3, #0]
 80517d2:	f04f 30ff 	mov.w	r0, #4294967295
 80517d6:	4770      	bx	lr
 80517d8:	2000e554 	.word	0x2000e554

080517dc <_read>:
 80517dc:	4b02      	ldr	r3, [pc, #8]	; (80517e8 <_read+0xc>)
 80517de:	2258      	movs	r2, #88	; 0x58
 80517e0:	601a      	str	r2, [r3, #0]
 80517e2:	f04f 30ff 	mov.w	r0, #4294967295
 80517e6:	4770      	bx	lr
 80517e8:	2000e554 	.word	0x2000e554

080517ec <_sbrk>:
 80517ec:	4b04      	ldr	r3, [pc, #16]	; (8051800 <_sbrk+0x14>)
 80517ee:	6819      	ldr	r1, [r3, #0]
 80517f0:	4602      	mov	r2, r0
 80517f2:	b909      	cbnz	r1, 80517f8 <_sbrk+0xc>
 80517f4:	4903      	ldr	r1, [pc, #12]	; (8051804 <_sbrk+0x18>)
 80517f6:	6019      	str	r1, [r3, #0]
 80517f8:	6818      	ldr	r0, [r3, #0]
 80517fa:	4402      	add	r2, r0
 80517fc:	601a      	str	r2, [r3, #0]
 80517fe:	4770      	bx	lr
 8051800:	2000bbf4 	.word	0x2000bbf4
 8051804:	2000e558 	.word	0x2000e558

08051808 <_write>:
 8051808:	4b02      	ldr	r3, [pc, #8]	; (8051814 <_write+0xc>)
 805180a:	2258      	movs	r2, #88	; 0x58
 805180c:	601a      	str	r2, [r3, #0]
 805180e:	f04f 30ff 	mov.w	r0, #4294967295
 8051812:	4770      	bx	lr
 8051814:	2000e554 	.word	0x2000e554

08051818 <_init>:
 8051818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 805181a:	bf00      	nop
 805181c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 805181e:	bc08      	pop	{r3}
 8051820:	469e      	mov	lr, r3
 8051822:	4770      	bx	lr

08051824 <_fini>:
 8051824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8051826:	bf00      	nop
 8051828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 805182a:	bc08      	pop	{r3}
 805182c:	469e      	mov	lr, r3
 805182e:	4770      	bx	lr
